<?xml version="1.0" encoding="utf-8"?>
<DirectedGraph Title="DG" xmlns="http://schemas.microsoft.com/vs/2009/dgml">
<Nodes>
<Node Id="EXTERNAL" Label="EXTERNAL" />
<Node Id="25014:[387..448).1" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 706572" />
<Node Id="25014:[390..448).1" Label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 706573" />
<Node Id="28001:[588..156578).1" Label="param BindingTests(this) 706574" />
<Node Id="21002:[790..793).1" Label="'C' 706575" />
<Node Id="21002:[772..793).1" Label="DefaultTypeName = 'C' 706576" />
<Node Id="21002:[845..848).1" Label="'M' 706577" />
<Node Id="21002:[825..848).1" Label="DefaultMethodName = 'M' 706578" />
<Node Id="21002:[3243..25375).1" Label="@'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 706579" />
<Node Id="21002:[3098..25375).1" Label="LINQ =
        #region the string LINQ defines a complete LINQ API called List1$T$ (for instance method) and List2$T$ (for extension methods)
 @'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 706580" />
<Node Id="21002:[678..25421).1" Label="param CompilingTestBase(this) 706581" />
<Node Id="21003:[1338..2835).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 706582" />
<Node Id="21003:[1308..2835).1" Label="NullableAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 706583" />
<Node Id="21003:[2908..3440).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 706584" />
<Node Id="21003:[2871..3440).1" Label="NullableContextAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 706585" />
<Node Id="21003:[3516..3915).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 706586" />
<Node Id="21003:[3476..3915).1" Label="NullablePublicOnlyAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 706587" />
<Node Id="21003:[4223..4448).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 706588" />
<Node Id="21003:[4192..4448).1" Label="AllowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 706589" />
<Node Id="21003:[4518..4746).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 706590" />
<Node Id="21003:[4484..4746).1" Label="DisallowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 706591" />
<Node Id="21003:[4813..5071).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 706592" />
<Node Id="21003:[4782..5071).1" Label="MaybeNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 706593" />
<Node Id="21003:[5142..5397).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 706594" />
<Node Id="21003:[5107..5397).1" Label="MaybeNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 706595" />
<Node Id="21003:[5462..5718).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 706596" />
<Node Id="21003:[5433..5718).1" Label="NotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 706597" />
<Node Id="21003:[5787..6038).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 706598" />
<Node Id="21003:[5754..6038).1" Label="NotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 706599" />
<Node Id="21003:[6109..6460).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 706600" />
<Node Id="21003:[6074..6460).1" Label="MemberNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 706601" />
<Node Id="21003:[6535..6920).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 706602" />
<Node Id="21003:[6496..6920).1" Label="MemberNotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 706603" />
<Node Id="21003:[6993..7250).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 706604" />
<Node Id="21003:[6956..7250).1" Label="DoesNotReturnIfAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 706605" />
<Node Id="21003:[7321..7557).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 706606" />
<Node Id="21003:[7286..7557).1" Label="DoesNotReturnAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 706607" />
<Node Id="21003:[7631..7980).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 706608" />
<Node Id="21003:[7593..7980).1" Label="NotNullIfNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 706609" />
<Node Id="21003:[8047..8155).1" Label="@'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 706610" />
<Node Id="21003:[8016..8155).1" Label="IsExternalInitTypeDefinition = @'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 706611" />
<Node Id="21003:[8220..8359).1" Label="@'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 706612" />
<Node Id="21003:[8191..8359).1" Label="IAsyncDisposableDefinition = @'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 706613" />
<Node Id="21003:[8415..20279).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 706614" />
<Node Id="21003:[8395..20279).1" Label="AsyncStreamsTypes = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 706615" />
<Node Id="21003:[20353..20617).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 706616" />
<Node Id="21003:[20315..20617).1" Label="EnumeratorCancellationAttributeType = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 706617" />
<Node Id="21003:[20689..21473).1" Label="@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 706618" />
<Node Id="21003:[20653..21473).1" Label="NativeIntegerAttributeDefinition =
@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 706619" />
<Node Id="25004:[2227..2317).1" Label="() =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 706620" />
<Node Id="25004:[2332..2368).1" Label="LazyThreadSafetyMode.PublicationOnly 706621" />
<Node Id="25004:[2183..2369).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 706622" />
<Node Id="25004:[2155..2369).1" Label="s_lazyDefaultVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 706623" />
<Node Id="25004:[2602..2696).1" Label="() =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 706624" />
<Node Id="25004:[2711..2747).1" Label="LazyThreadSafetyMode.PublicationOnly 706625" />
<Node Id="25004:[2558..2748).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 706626" />
<Node Id="25004:[2531..2748).1" Label="s_lazyLatestVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 706627" />
<Node Id="25004:[2914..2947).1" Label="RuntimeUtilities.IsCoreClrRuntime 706628" />
<Node Id="25004:[3094..3171).1" Label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 706629" />
<Node Id="25004:[3077..3172).1" Label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 706630" />
<Node Id="25004:[2894..3172).1" Label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime
            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')
            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 706631" />
<Node Id="25004:[3490..5167).1" Label="() =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            } 706632" />
<Node Id="25004:[5182..5218).1" Label="LazyThreadSafetyMode.PublicationOnly 706633" />
<Node Id="25004:[3446..5219).1" Label="new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 706634" />
<Node Id="25004:[3432..5219).1" Label="s_winRtRefs = new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 706635" />
<Node Id="25004:[5576..5645).1" Label="() =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 706636" />
<Node Id="25004:[5660..5696).1" Label="LazyThreadSafetyMode.PublicationOnly 706637" />
<Node Id="25004:[5532..5697).1" Label="new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 706638" />
<Node Id="25004:[5508..5697).1" Label="s_portableRefsMinimal = new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 706639" />
<Node Id="25004:[6321..6439).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 706640" />
<Node Id="25004:[6458..6494).1" Label="LazyThreadSafetyMode.PublicationOnly 706641" />
<Node Id="25004:[6275..6495).1" Label="new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 706642" />
<Node Id="25004:[6244..6495).1" Label="s_systemCoreRef =
            new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 706643" />
<Node Id="25004:[6714..6838).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 706644" />
<Node Id="25004:[6853..6889).1" Label="LazyThreadSafetyMode.PublicationOnly 706645" />
<Node Id="25004:[6672..6890).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706646" />
<Node Id="25004:[6637..6890).1" Label="s_systemCoreRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706647" />
<Node Id="25004:[7130..7249).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 706648" />
<Node Id="25004:[7264..7300).1" Label="LazyThreadSafetyMode.PublicationOnly 706649" />
<Node Id="25004:[7088..7301).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706650" />
<Node Id="25004:[7066..7301).1" Label="s_systemCoreRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706651" />
<Node Id="25004:[7532..7667).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 706652" />
<Node Id="25004:[7682..7718).1" Label="LazyThreadSafetyMode.PublicationOnly 706653" />
<Node Id="25004:[7490..7719).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706654" />
<Node Id="25004:[7464..7719).1" Label="s_systemWindowsFormsRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706655" />
<Node Id="25004:[7940..8064).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 706656" />
<Node Id="25004:[8079..8115).1" Label="LazyThreadSafetyMode.PublicationOnly 706657" />
<Node Id="25004:[7898..8116).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706658" />
<Node Id="25004:[7877..8116).1" Label="s_systemDrawingRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706659" />
<Node Id="25004:[8324..8442).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 706660" />
<Node Id="25004:[8457..8493).1" Label="LazyThreadSafetyMode.PublicationOnly 706661" />
<Node Id="25004:[8282..8494).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706662" />
<Node Id="25004:[8264..8494).1" Label="s_systemDataRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706663" />
<Node Id="25004:[8694..8807).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 706664" />
<Node Id="25004:[8822..8858).1" Label="LazyThreadSafetyMode.PublicationOnly 706665" />
<Node Id="25004:[8652..8859).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706666" />
<Node Id="25004:[8636..8859).1" Label="s_mscorlibRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706667" />
<Node Id="25004:[9063..9214).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 706668" />
<Node Id="25004:[9229..9265).1" Label="LazyThreadSafetyMode.PublicationOnly 706669" />
<Node Id="25004:[9021..9266).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706670" />
<Node Id="25004:[8997..9266).1" Label="s_mscorlibRefPortable = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706671" />
<Node Id="25004:[9478..10389).1" Label="() =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            } 706672" />
<Node Id="25004:[10404..10440).1" Label="LazyThreadSafetyMode.PublicationOnly 706673" />
<Node Id="25004:[9436..10441).1" Label="new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 706674" />
<Node Id="25004:[9420..10441).1" Label="s_aacorlibRef = new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 706675" />
<Node Id="25004:[10811..10967).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri') 706676" />
<Node Id="25004:[10982..11018).1" Label="LazyThreadSafetyMode.PublicationOnly 706677" />
<Node Id="25004:[10769..11019).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 706678" />
<Node Id="25004:[10749..11019).1" Label="s_mscorlibRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 706679" />
<Node Id="25004:[11415..11589).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 706680" />
<Node Id="25004:[11604..11640).1" Label="LazyThreadSafetyMode.PublicationOnly 706681" />
<Node Id="25004:[11373..11641).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706682" />
<Node Id="25004:[11345..11641).1" Label="s_mscorlibRef_silverlight = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706683" />
<Node Id="25004:[12432..12560).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 706684" />
<Node Id="25004:[12575..12611).1" Label="LazyThreadSafetyMode.PublicationOnly 706685" />
<Node Id="25004:[12390..12612).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706686" />
<Node Id="25004:[12369..12612).1" Label="s_desktopCSharpRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706687" />
<Node Id="25004:[12815..12944).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 706688" />
<Node Id="25004:[12959..12995).1" Label="LazyThreadSafetyMode.PublicationOnly 706689" />
<Node Id="25004:[12773..12996).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706690" />
<Node Id="25004:[12760..12996).1" Label="s_std20Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706691" />
<Node Id="25004:[13204..13343).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 706692" />
<Node Id="25004:[13358..13394).1" Label="LazyThreadSafetyMode.PublicationOnly 706693" />
<Node Id="25004:[13162..13395).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706694" />
<Node Id="25004:[13138..13395).1" Label="s_46NetStandardFacade = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706695" />
<Node Id="25004:[13621..13796).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 706696" />
<Node Id="25004:[13811..13847).1" Label="LazyThreadSafetyMode.PublicationOnly 706697" />
<Node Id="25004:[13579..13848).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 706698" />
<Node Id="25004:[13551..13848).1" Label="s_systemDynamicRuntimeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 706699" />
<Node Id="25004:[14066..14175).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 706700" />
<Node Id="25004:[14190..14226).1" Label="LazyThreadSafetyMode.PublicationOnly 706701" />
<Node Id="25004:[14024..14227).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706702" />
<Node Id="25004:[14010..14227).1" Label="s_systemRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706703" />
<Node Id="25004:[14421..14531).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 706704" />
<Node Id="25004:[14546..14582).1" Label="LazyThreadSafetyMode.PublicationOnly 706705" />
<Node Id="25004:[14379..14583).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706706" />
<Node Id="25004:[14361..14583).1" Label="s_systemRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706707" />
<Node Id="25004:[14798..14913).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 706708" />
<Node Id="25004:[14928..14964).1" Label="LazyThreadSafetyMode.PublicationOnly 706709" />
<Node Id="25004:[14756..14965).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706710" />
<Node Id="25004:[14725..14965).1" Label="s_systemRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706711" />
<Node Id="25004:[15193..15301).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 706712" />
<Node Id="25004:[15316..15352).1" Label="LazyThreadSafetyMode.PublicationOnly 706713" />
<Node Id="25004:[15151..15353).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706714" />
<Node Id="25004:[15133..15353).1" Label="s_systemRef_v20 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706715" />
<Node Id="25004:[15554..15670).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 706716" />
<Node Id="25004:[15685..15721).1" Label="LazyThreadSafetyMode.PublicationOnly 706717" />
<Node Id="25004:[15512..15722).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706718" />
<Node Id="25004:[15495..15722).1" Label="s_systemXmlRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706719" />
<Node Id="25004:[15925..16050).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 706720" />
<Node Id="25004:[16065..16101).1" Label="LazyThreadSafetyMode.PublicationOnly 706721" />
<Node Id="25004:[15883..16102).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706722" />
<Node Id="25004:[15862..16102).1" Label="s_systemXmlLinqRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706723" />
<Node Id="25004:[16314..16416).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 706724" />
<Node Id="25004:[16431..16467).1" Label="LazyThreadSafetyMode.PublicationOnly 706725" />
<Node Id="25004:[16272..16468).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706726" />
<Node Id="25004:[16250..16468).1" Label="s_mscorlibFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706727" />
<Node Id="25004:[16687..16800).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 706728" />
<Node Id="25004:[16815..16851).1" Label="LazyThreadSafetyMode.PublicationOnly 706729" />
<Node Id="25004:[16645..16852).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706730" />
<Node Id="25004:[16618..16852).1" Label="s_systemRuntimeFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706731" />
<Node Id="25004:[17083..17200).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 706732" />
<Node Id="25004:[17215..17251).1" Label="LazyThreadSafetyMode.PublicationOnly 706733" />
<Node Id="25004:[17041..17252).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706734" />
<Node Id="25004:[17012..17252).1" Label="s_systemThreadingFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706735" />
<Node Id="25004:[17497..17625).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 706736" />
<Node Id="25004:[17640..17676).1" Label="LazyThreadSafetyMode.PublicationOnly 706737" />
<Node Id="25004:[17455..17677).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706738" />
<Node Id="25004:[17421..17677).1" Label="s_systemThreadingTasksFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706739" />
<Node Id="25004:[17911..18059).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 706740" />
<Node Id="25004:[18074..18110).1" Label="LazyThreadSafetyMode.PublicationOnly 706741" />
<Node Id="25004:[17869..18111).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706742" />
<Node Id="25004:[17850..18111).1" Label="s_mscorlibPP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706743" />
<Node Id="25004:[18321..18481).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 706744" />
<Node Id="25004:[18496..18532).1" Label="LazyThreadSafetyMode.PublicationOnly 706745" />
<Node Id="25004:[18279..18533).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706746" />
<Node Id="25004:[18255..18533).1" Label="s_systemRuntimePP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706747" />
<Node Id="25004:[18754..18880).1" Label="() =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 706748" />
<Node Id="25004:[18895..18931).1" Label="LazyThreadSafetyMode.PublicationOnly 706749" />
<Node Id="25004:[18712..18932).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706750" />
<Node Id="25004:[18687..18932).1" Label="s_FSharpTestLibraryRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 706751" />
<Node Id="25004:[19130..19147).1" Label="@'R:\Invalid.dll' 706752" />
<Node Id="25004:[19120..19147).1" Label="fullPath: @'R:\Invalid.dll' 706753" />
<Node Id="25004:[19094..19148).1" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 706754" />
<Node Id="25004:[19094..19148).5" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 706755" />
<Node Id="25004:[19081..19148).1" Label="InvalidRef = new TestMetadataReference(fullPath: @'R:\Invalid.dll') 706756" />
<Node Id="21003:[51329..51357).1" Label="MscorlibRef_v4_0_30316_17626 706757" />
<Node Id="25004:[10673..10688).1" Label="Net451.mscorlib 706758" />
<Node Id="21003:[51307..51358).1" Label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 706759" />
<Node Id="21003:[51292..51358).1" Label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 706760" />
<Node Id="21003:[56538..56550).1" Label="'/*$bind$*/' 706761" />
<Node Id="21003:[56524..56550).1" Label="StartString = '/*$bind$*/' 706762" />
<Node Id="21003:[56596..56609).1" Label="'/*$/bind$*/' 706763" />
<Node Id="21003:[56584..56609).1" Label="EndString = '/*$/bind$*/' 706764" />
<Node Id="21003:[92394..99056).1" Label="@'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 706765" />
<Node Id="21003:[92381..99056).1" Label="SpanSource = @'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 706766" />
<Node Id="21003:[101764..102290).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 706767" />
<Node Id="21003:[101743..102290).1" Label="s_IAsyncEnumerable = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 706768" />
<Node Id="21003:[1215..102298).1" Label="param CSharpTestBase(this) 706769" />
<Node Id="25015:[917..26825).1" Label="param CommonTestBase(this) 706770" />
<Node Id="25004:[926..968).1" Label="param TestBase(this) 706771" />
<Node Id="25004:[908..913).1" Label="_temp 706772" />
<Node Id="25014:[387..448).372" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 706773" />
<Node Id="28001:[14383..14823).1" Label="param ParenthesizedDelegate(this) 706774" />
<Node Id="28001:[14459..14616).1" Label="var source =
@'class C
{
    System.Action$object$ F = null;
    void M()
    {
        ((this.F))(null);
        (new C().F)(null, null);
    }
}'; 706775" />
<Node Id="28001:[14630..14812).1" Label="CreateCompilation(source).VerifyDiagnostics(
                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2').WithLocation(7, 9)); 706776" />
<Node Id="28001:[14648..14654).1" Label="source 706777" />
<Node Id="21004:[2251..2264).1" Label="param operator(string source) 706778" />
<Node Id="21004:[2290..2296).1" Label="source 706779" />
<Node Id="21004:[2269..2297).1" Label="new CSharpTestSource(source) 706780" />
<Node Id="21004:[839..851).1" Label="param CSharpTestSource(object value) 706781" />
<Node Id="21004:[814..902).1" Label="param CSharpTestSource(this) 706782" />
<Node Id="21004:[877..882).1" Label="Value 706783" />
<Node Id="28001:[14630..14812).2" Label="CreateCompilation(source).VerifyDiagnostics(
                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2').WithLocation(7, 9)); 706784" />
<Node Id="28001:[14630..14812).4" Label="CreateCompilation(source).VerifyDiagnostics(
                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2').WithLocation(7, 9)); 706785" />
<Node Id="28001:[14630..14655).1" Label="CreateCompilation(source) 706786" />
<Node Id="21003:[44736..44759).1" Label="param CreateCompilation(CSharpTestSource source) 706787" />
<Node Id="21003:[44774..44822).1" Label="param CreateCompilation(IEnumerable$MetadataReference$ references = null) 706788" />
<Node Id="21003:[44837..44876).1" Label="param CreateCompilation(CSharpCompilationOptions options = null) 706789" />
<Node Id="21003:[44891..44929).1" Label="param CreateCompilation(CSharpParseOptions parseOptions = null) 706790" />
<Node Id="21003:[44944..45002).1" Label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 706791" />
<Node Id="21003:[45017..45041).1" Label="param CreateCompilation(string assemblyName = '') 706792" />
<Node Id="21003:[45056..45082).1" Label="param CreateCompilation(string sourceFileName = '') 706793" />
<Node Id="21003:[45097..45128).1" Label="param CreateCompilation(bool skipUsesIsNullable = false) 706794" />
<Node Id="21003:[45156..45162).1" Label="source 706795" />
<Node Id="21003:[45198..45213).1" Label="targetFramework 706796" />
<Node Id="21003:[45215..45225).1" Label="references 706797" />
<Node Id="21003:[45164..45226).1" Label="TargetFrameworkUtil.GetReferences(targetFramework, references) 706798" />
<Node Id="25005:[9600..9618).1" Label="param GetReferences(TargetFramework tf) 706799" />
<Node Id="25005:[9620..9671).1" Label="param GetReferences(IEnumerable$MetadataReference$ additionalReferences) 706800" />
<Node Id="25005:[9697..9732).1" Label="var references = GetReferences(tf); 706801" />
<Node Id="25005:[9714..9731).1" Label="GetReferences(tf) 706802" />
<Node Id="25005:[7569..7600).1" Label="param GetReferences(TargetFramework targetFramework) 706803" />
<Node Id="25005:[7605..9525).1" Label="targetFramework switch
        {
            TargetFramework.Empty =$ ImmutableArray$MetadataReference$.Empty,
            TargetFramework.Mscorlib40 =$ Mscorlib40References,
            TargetFramework.Mscorlib40Extended =$ Mscorlib40ExtendedReferences,
            TargetFramework.Mscorlib40AndSystemCore =$ Mscorlib40andSystemCoreReferences,
            TargetFramework.Mscorlib40AndVBRuntime =$ Mscorlib40andVBRuntimeReferences,
            TargetFramework.Mscorlib45 =$ Mscorlib45References,
            TargetFramework.Mscorlib45Extended =$ Mscorlib45ExtendedReferences,
            TargetFramework.Mscorlib45AndCSharp =$ Mscorlib45AndCSharpReferences,
            TargetFramework.Mscorlib45AndVBRuntime =$ Mscorlib45AndVBRuntimeReferences,
            TargetFramework.Mscorlib46 =$ Mscorlib46References,
            TargetFramework.Mscorlib46Extended =$ Mscorlib46ExtendedReferences,
            TargetFramework.Mscorlib461 =$ Mscorlib46References,
            TargetFramework.Mscorlib461Extended =$ Mscorlib461ExtendedReferences,
            TargetFramework.NetStandard20 =$ NetStandard20References,
            TargetFramework.NetCoreApp =$ NetCoreAppReferences,
            TargetFramework.WinRT =$ WinRTReferences,
            TargetFramework.Standard =$ StandardReferences,
            TargetFramework.StandardLatest =$ StandardLatestReferences,
            TargetFramework.StandardAndCSharp =$ StandardAndCSharpReferences,
            TargetFramework.StandardAndVBRuntime =$ StandardAndVBRuntimeReferences,
            TargetFramework.StandardCompat =$ StandardCompatReferences,
            TargetFramework.DefaultVb =$ DefaultVbReferences,
            TargetFramework.Minimal =$ MinimalReferences,
            TargetFramework.MinimalAsync =$ MinimalAsyncReferences,
            _ =$ throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),
        } 706804" />
<Node Id="25005:[8889..8907).1" Label="StandardReferences 706805" />
<Node Id="25005:[6208..6241).1" Label="RuntimeUtilities.IsCoreClrRuntime 706806" />
<Node Id="25005:[6270..6298).1" Label="Mscorlib46ExtendedReferences 706807" />
<Node Id="25005:[4543..4693).1" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 706808" />
<Node Id="25005:[4648..4670).1" Label="TestBase.ValueTupleRef 706809" />
<Node Id="25004:[12011..12051).1" Label="TestReferences.NetFx.ValueTuple.tuplelib 706810" />
<Node Id="25005:[4543..4693).7" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 706811" />
<Node Id="25005:[6208..6298).1" Label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 706812" />
<Node Id="25005:[9746..9845).1" Label="if (additionalReferences == null)
            {
                return references;
            } 706813" />
<Node Id="25005:[9746..9845).2" Label="if (additionalReferences == null)
            {
                return references;
            } 706814" />
<Node Id="25005:[9812..9830).1" Label="return references; 706815" />
<Node Id="21003:[45228..45235).1" Label="options 706816" />
<Node Id="21003:[45237..45249).1" Label="parseOptions 706817" />
<Node Id="21003:[45251..45263).1" Label="assemblyName 706818" />
<Node Id="21003:[45265..45279).1" Label="sourceFileName 706819" />
<Node Id="21003:[45281..45299).1" Label="skipUsesIsNullable 706820" />
<Node Id="21003:[45133..45300).1" Label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 706821" />
<Node Id="21003:[45382..45405).1" Label="param CreateEmptyCompilation(CSharpTestSource source) 706822" />
<Node Id="21003:[45420..45468).1" Label="param CreateEmptyCompilation(IEnumerable$MetadataReference$ references = null) 706823" />
<Node Id="21003:[45483..45522).1" Label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 706824" />
<Node Id="21003:[45537..45575).1" Label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 706825" />
<Node Id="21003:[45590..45614).1" Label="param CreateEmptyCompilation(string assemblyName = '') 706826" />
<Node Id="21003:[45629..45655).1" Label="param CreateEmptyCompilation(string sourceFileName = '') 706827" />
<Node Id="21003:[45670..45701).1" Label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 706828" />
<Node Id="21003:[45728..45734).1" Label="source 706829" />
<Node Id="21003:[45736..45746).1" Label="references 706830" />
<Node Id="21003:[45748..45755).1" Label="options 706831" />
<Node Id="21003:[45757..45769).1" Label="parseOptions 706832" />
<Node Id="21003:[45771..45783).1" Label="assemblyName 706833" />
<Node Id="21003:[45785..45799).1" Label="sourceFileName 706834" />
<Node Id="21003:[45801..45819).1" Label="skipUsesIsNullable 706835" />
<Node Id="21003:[45842..45846).1" Label="null 706836" />
<Node Id="21003:[45821..45846).1" Label="experimentalFeature: null 706837" />
<Node Id="21003:[45706..45847).1" Label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 706838" />
<Node Id="21003:[45929..45952).1" Label="param CreateCompilationCore(CSharpTestSource source) 706839" />
<Node Id="21003:[45967..46008).1" Label="param CreateCompilationCore(IEnumerable$MetadataReference$ references) 706840" />
<Node Id="21003:[46023..46055).1" Label="param CreateCompilationCore(CSharpCompilationOptions options) 706841" />
<Node Id="21003:[46070..46101).1" Label="param CreateCompilationCore(CSharpParseOptions parseOptions) 706842" />
<Node Id="21003:[46116..46135).1" Label="param CreateCompilationCore(string assemblyName) 706843" />
<Node Id="21003:[46150..46171).1" Label="param CreateCompilationCore(string sourceFileName) 706844" />
<Node Id="21003:[46186..46209).1" Label="param CreateCompilationCore(bool skipUsesIsNullable) 706845" />
<Node Id="21003:[46224..46254).1" Label="param CreateCompilationCore(MessageID? experimentalFeature) 706846" />
<Node Id="21003:[46280..46350).1" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 706847" />
<Node Id="21003:[46280..46350).2" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 706848" />
<Node Id="21003:[46298..46349).1" Label="source.GetSyntaxTrees(parseOptions, sourceFileName) 706849" />
<Node Id="21004:[949..980).1" Label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 706850" />
<Node Id="21004:[982..1008).1" Label="param GetSyntaxTrees(string sourceFileName = '') 706851" />
<Node Id="21004:[914..2190).1" Label="param GetSyntaxTrees(this) 706852" />
<Node Id="21004:[1034..2179).1" Label="switch (Value)
            {
                case string source:
                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };
                case string[] sources:
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return CSharpTestBase.Parse(parseOptions, sources);
                case SyntaxTree tree:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return new[] { tree };
                case SyntaxTree[] trees:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return trees;
                case CSharpTestSource[] testSources:
                    return testSources.SelectMany(s =$ s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();
                case null:
                    return Array.Empty$SyntaxTree$();
                default:
                    throw new Exception($'Unexpected value: {Value}');
            } 706853" />
<Node Id="21004:[1122..1208).1" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 706854" />
<Node Id="21004:[1122..1208).3" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 706855" />
<Node Id="21004:[1122..1208).4" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 706856" />
<Node Id="21004:[1137..1205).1" Label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 706857" />
<Node Id="21003:[34078..34089).1" Label="param Parse(string text) 706858" />
<Node Id="21003:[34091..34111).1" Label="param Parse(string filename = '') 706859" />
<Node Id="21003:[34113..34146).1" Label="param Parse(CSharpParseOptions options = null) 706860" />
<Node Id="21003:[34148..34172).1" Label="param Parse(Encoding encoding = null) 706861" />
<Node Id="21003:[34198..34304).1" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 706862" />
<Node Id="21003:[34198..34304).2" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 706863" />
<Node Id="21010:[590..618).1" Label="kind: SourceCodeKind.Regular 706864" />
<Node Id="21010:[620..662).1" Label="documentationMode: DocumentationMode.Parse 706865" />
<Node Id="21010:[567..663).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 706866" />
<Node Id="21010:[567..663).5" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 706867" />
<Node Id="21010:[557..663).1" Label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 706868" />
<Node Id="21010:[742..763).1" Label="SourceCodeKind.Script 706869" />
<Node Id="21010:[725..764).1" Label="Regular.WithKind(SourceCodeKind.Script) 706870" />
<Node Id="21010:[716..764).1" Label="Script = Regular.WithKind(SourceCodeKind.Script) 706871" />
<Node Id="21010:[856..879).1" Label="LanguageVersion.CSharp6 706872" />
<Node Id="21010:[828..880).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 706873" />
<Node Id="21010:[817..880).1" Label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 706874" />
<Node Id="21010:[972..995).1" Label="LanguageVersion.CSharp7 706875" />
<Node Id="21010:[944..996).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 706876" />
<Node Id="21010:[933..996).1" Label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 706877" />
<Node Id="21010:[1090..1115).1" Label="LanguageVersion.CSharp7_1 706878" />
<Node Id="21010:[1062..1116).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 706879" />
<Node Id="21010:[1049..1116).1" Label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 706880" />
<Node Id="21010:[1210..1235).1" Label="LanguageVersion.CSharp7_2 706881" />
<Node Id="21010:[1182..1236).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 706882" />
<Node Id="21010:[1169..1236).1" Label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 706883" />
<Node Id="21010:[1330..1355).1" Label="LanguageVersion.CSharp7_3 706884" />
<Node Id="21010:[1302..1356).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 706885" />
<Node Id="21010:[1289..1356).1" Label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 706886" />
<Node Id="21010:[1454..1477).1" Label="LanguageVersion.Default 706887" />
<Node Id="21010:[1426..1478).1" Label="Regular.WithLanguageVersion(LanguageVersion.Default) 706888" />
<Node Id="21010:[1409..1478).1" Label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 706889" />
<Node Id="21010:[1576..1599).1" Label="LanguageVersion.Preview 706890" />
<Node Id="21010:[1548..1600).1" Label="Regular.WithLanguageVersion(LanguageVersion.Preview) 706891" />
<Node Id="21010:[1531..1600).1" Label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 706892" />
<Node Id="21010:[1692..1715).1" Label="LanguageVersion.CSharp8 706893" />
<Node Id="21010:[1664..1716).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 706894" />
<Node Id="21010:[1653..1716).1" Label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 706895" />
<Node Id="21010:[1808..1831).1" Label="LanguageVersion.CSharp9 706896" />
<Node Id="21010:[1780..1832).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 706897" />
<Node Id="21010:[1769..1832).1" Label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 706898" />
<Node Id="21010:[1950..1976).1" Label="DocumentationMode.Diagnose 706899" />
<Node Id="21010:[1920..1977).1" Label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 706900" />
<Node Id="21010:[1885..1977).1" Label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 706901" />
<Node Id="21010:[2060..2067).1" Label="Regular 706902" />
<Node Id="21010:[2080..2109).1" Label="'UseLegacyStrongNameProvider' 706903" />
<Node Id="21010:[2060..2110).1" Label="Regular.WithFeature('UseLegacyStrongNameProvider') 706904" />
<Node Id="21010:[7783..7814).1" Label="param WithFeature(this CSharpParseOptions options) 706905" />
<Node Id="21010:[7816..7830).1" Label="param WithFeature(string feature) 706906" />
<Node Id="21010:[7832..7853).1" Label="param WithFeature(string value = 'true') 706907" />
<Node Id="21010:[7879..7992).1" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 706908" />
<Node Id="21010:[7879..7992).2" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 706909" />
<Node Id="21010:[7879..7992).3" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 706910" />
<Node Id="21010:[7879..7992).4" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 706911" />
<Node Id="21010:[7879..7992).5" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 706912" />
<Node Id="21010:[7931..7989).1" Label="new[] { new KeyValuePair$string, string$(feature, value) } 706913" />
<Node Id="21010:[7879..7992).9" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 706914" />
<Node Id="21010:[2030..2110).1" Label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 706915" />
<Node Id="21010:[2227..2274).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates 706916" />
<Node Id="21010:[2227..2292).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 706917" />
<Node Id="21010:[2295..2296).1" Label="1 706918" />
<Node Id="21010:[2227..2296).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 706919" />
<Node Id="21010:[2199..2297).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 706920" />
<Node Id="21010:[2163..2297).1" Label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 706921" />
<Node Id="21010:[2401..2450).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides 706922" />
<Node Id="21010:[2401..2468).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 706923" />
<Node Id="21010:[2373..2469).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 706924" />
<Node Id="21010:[2350..2469).1" Label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 706925" />
<Node Id="21010:[2576..2599).1" Label="LanguageVersion.CSharp8 706926" />
<Node Id="21010:[2548..2600).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 706927" />
<Node Id="21010:[2522..2600).1" Label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 706928" />
<Node Id="21010:[2655..2705).1" Label="RegularWithExtendedPartialMethods = RegularPreview 706929" />
<Node Id="21010:[2799..2838).1" Label="new SmallDictionary$string, string$ { } 706930" />
<Node Id="21010:[2774..2838).1" Label="s_experimentalFeatures = new SmallDictionary$string, string$ { } 706931" />
<Node Id="21010:[2954..2982).1" Label="kind: SourceCodeKind.Regular 706932" />
<Node Id="21010:[2984..3025).1" Label="documentationMode: DocumentationMode.None 706933" />
<Node Id="21010:[3027..3067).1" Label="languageVersion: LanguageVersion.Preview 706934" />
<Node Id="21010:[2931..3068).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 706935" />
<Node Id="21010:[2931..3068).3" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 706936" />
<Node Id="21010:[3082..3104).1" Label="s_experimentalFeatures 706937" />
<Node Id="21010:[2931..3105).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 706938" />
<Node Id="21010:[2891..3105).1" Label="ExperimentalParseOptions =
            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 706939" />
<Node Id="21010:[3487..3556).1" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 706940" />
<Node Id="21010:[3524..3544).1" Label="'testV7SwitchBinder' 706941" />
<Node Id="21010:[3546..3552).1" Label="'true' 706942" />
<Node Id="21010:[3487..3556).2" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 706943" />
<Node Id="21010:[3465..3557).1" Label="Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 706944" />
<Node Id="21010:[3436..3557).1" Label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 706945" />
<Node Id="21010:[3612..3656).1" Label="RegularWithoutRecursivePatterns = Regular7_3 706946" />
<Node Id="21010:[3709..3748).1" Label="RegularWithRecursivePatterns = Regular8 706947" />
<Node Id="21010:[3801..3844).1" Label="RegularWithoutPatternCombinators = Regular8 706948" />
<Node Id="21010:[3897..3943).1" Label="RegularWithPatternCombinators = RegularPreview 706949" />
<Node Id="21010:[4035..4070).1" Label="OutputKind.DynamicallyLinkedLibrary 706950" />
<Node Id="21010:[4072..4097).1" Label="OptimizationLevel.Release 706951" />
<Node Id="21010:[4017..4098).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 706952" />
<Node Id="21010:[10204..10225).1" Label="param CreateTestOptions(OutputKind outputKind) 706953" />
<Node Id="21010:[10227..10262).1" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 706954" />
<Node Id="21010:[10264..10288).1" Label="param CreateTestOptions(bool allowUnsafe = false) 706955" />
<Node Id="21010:[10335..10345).1" Label="outputKind 706956" />
<Node Id="21010:[10347..10383).1" Label="optimizationLevel: optimizationLevel 706957" />
<Node Id="21010:[10385..10425).1" Label="warningLevel: Diagnostic.MaxWarningLevel 706958" />
<Node Id="21010:[10427..10451).1" Label="allowUnsafe: allowUnsafe 706959" />
<Node Id="21010:[10306..10452).1" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706960" />
<Node Id="21010:[10306..10452).47" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706961" />
<Node Id="21010:[4004..4098).1" Label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 706962" />
<Node Id="21010:[4188..4217).1" Label="OutputKind.ConsoleApplication 706963" />
<Node Id="21010:[4219..4244).1" Label="OptimizationLevel.Release 706964" />
<Node Id="21010:[4170..4245).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 706965" />
<Node Id="21010:[10204..10225).2" Label="param CreateTestOptions(OutputKind outputKind) 706966" />
<Node Id="21010:[10227..10262).2" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 706967" />
<Node Id="21010:[10264..10288).2" Label="param CreateTestOptions(bool allowUnsafe = false) 706968" />
<Node Id="21010:[10335..10345).2" Label="outputKind 706969" />
<Node Id="21010:[10347..10383).2" Label="optimizationLevel: optimizationLevel 706970" />
<Node Id="21010:[10385..10425).2" Label="warningLevel: Diagnostic.MaxWarningLevel 706971" />
<Node Id="21010:[10427..10451).2" Label="allowUnsafe: allowUnsafe 706972" />
<Node Id="21010:[10306..10452).49" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706973" />
<Node Id="21010:[10306..10452).95" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706974" />
<Node Id="21010:[4157..4245).1" Label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 706975" />
<Node Id="21010:[4353..4357).1" Label="true 706976" />
<Node Id="21010:[4324..4358).1" Label="ReleaseDll.WithDebugPlusMode(true) 706977" />
<Node Id="21010:[4306..4358).1" Label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 706978" />
<Node Id="21010:[4466..4470).1" Label="true 706979" />
<Node Id="21010:[4437..4471).1" Label="ReleaseExe.WithDebugPlusMode(true) 706980" />
<Node Id="21010:[4419..4471).1" Label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 706981" />
<Node Id="21010:[4561..4596).1" Label="OutputKind.DynamicallyLinkedLibrary 706982" />
<Node Id="21010:[4598..4621).1" Label="OptimizationLevel.Debug 706983" />
<Node Id="21010:[4543..4622).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 706984" />
<Node Id="21010:[10204..10225).3" Label="param CreateTestOptions(OutputKind outputKind) 706985" />
<Node Id="21010:[10227..10262).3" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 706986" />
<Node Id="21010:[10264..10288).3" Label="param CreateTestOptions(bool allowUnsafe = false) 706987" />
<Node Id="21010:[10335..10345).3" Label="outputKind 706988" />
<Node Id="21010:[10347..10383).3" Label="optimizationLevel: optimizationLevel 706989" />
<Node Id="21010:[10385..10425).3" Label="warningLevel: Diagnostic.MaxWarningLevel 706990" />
<Node Id="21010:[10427..10451).3" Label="allowUnsafe: allowUnsafe 706991" />
<Node Id="21010:[10306..10452).97" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706992" />
<Node Id="21010:[10306..10452).143" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 706993" />
<Node Id="21010:[4532..4622).1" Label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 706994" />
<Node Id="21010:[4710..4739).1" Label="OutputKind.ConsoleApplication 706995" />
<Node Id="21010:[4741..4764).1" Label="OptimizationLevel.Debug 706996" />
<Node Id="21010:[4692..4765).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 706997" />
<Node Id="21010:[10204..10225).4" Label="param CreateTestOptions(OutputKind outputKind) 706998" />
<Node Id="21010:[10227..10262).4" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 706999" />
<Node Id="21010:[10264..10288).4" Label="param CreateTestOptions(bool allowUnsafe = false) 707000" />
<Node Id="21010:[10335..10345).4" Label="outputKind 707001" />
<Node Id="21010:[10347..10383).4" Label="optimizationLevel: optimizationLevel 707002" />
<Node Id="21010:[10385..10425).4" Label="warningLevel: Diagnostic.MaxWarningLevel 707003" />
<Node Id="21010:[10427..10451).4" Label="allowUnsafe: allowUnsafe 707004" />
<Node Id="21010:[10306..10452).145" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707005" />
<Node Id="21010:[10306..10452).191" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707006" />
<Node Id="21010:[4681..4765).1" Label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 707007" />
<Node Id="21010:[4859..4892).1" Label="OutputKind.WindowsRuntimeMetadata 707008" />
<Node Id="21010:[4894..4919).1" Label="OptimizationLevel.Release 707009" />
<Node Id="21010:[4841..4920).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 707010" />
<Node Id="21010:[10204..10225).5" Label="param CreateTestOptions(OutputKind outputKind) 707011" />
<Node Id="21010:[10227..10262).5" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 707012" />
<Node Id="21010:[10264..10288).5" Label="param CreateTestOptions(bool allowUnsafe = false) 707013" />
<Node Id="21010:[10335..10345).5" Label="outputKind 707014" />
<Node Id="21010:[10347..10383).5" Label="optimizationLevel: optimizationLevel 707015" />
<Node Id="21010:[10385..10425).5" Label="warningLevel: Diagnostic.MaxWarningLevel 707016" />
<Node Id="21010:[10427..10451).5" Label="allowUnsafe: allowUnsafe 707017" />
<Node Id="21010:[10306..10452).193" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707018" />
<Node Id="21010:[10306..10452).239" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707019" />
<Node Id="21010:[4826..4920).1" Label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 707020" />
<Node Id="21010:[5010..5043).1" Label="OutputKind.WindowsRuntimeMetadata 707021" />
<Node Id="21010:[5045..5068).1" Label="OptimizationLevel.Debug 707022" />
<Node Id="21010:[4992..5069).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 707023" />
<Node Id="21010:[10204..10225).6" Label="param CreateTestOptions(OutputKind outputKind) 707024" />
<Node Id="21010:[10227..10262).6" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 707025" />
<Node Id="21010:[10264..10288).6" Label="param CreateTestOptions(bool allowUnsafe = false) 707026" />
<Node Id="21010:[10335..10345).6" Label="outputKind 707027" />
<Node Id="21010:[10347..10383).6" Label="optimizationLevel: optimizationLevel 707028" />
<Node Id="21010:[10385..10425).6" Label="warningLevel: Diagnostic.MaxWarningLevel 707029" />
<Node Id="21010:[10427..10451).6" Label="allowUnsafe: allowUnsafe 707030" />
<Node Id="21010:[10306..10452).241" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707031" />
<Node Id="21010:[10306..10452).287" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707032" />
<Node Id="21010:[4979..5069).1" Label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 707033" />
<Node Id="21010:[5164..5184).1" Label="OutputKind.NetModule 707034" />
<Node Id="21010:[5186..5211).1" Label="OptimizationLevel.Release 707035" />
<Node Id="21010:[5146..5212).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 707036" />
<Node Id="21010:[10204..10225).7" Label="param CreateTestOptions(OutputKind outputKind) 707037" />
<Node Id="21010:[10227..10262).7" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 707038" />
<Node Id="21010:[10264..10288).7" Label="param CreateTestOptions(bool allowUnsafe = false) 707039" />
<Node Id="21010:[10335..10345).7" Label="outputKind 707040" />
<Node Id="21010:[10347..10383).7" Label="optimizationLevel: optimizationLevel 707041" />
<Node Id="21010:[10385..10425).7" Label="warningLevel: Diagnostic.MaxWarningLevel 707042" />
<Node Id="21010:[10427..10451).7" Label="allowUnsafe: allowUnsafe 707043" />
<Node Id="21010:[10306..10452).289" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707044" />
<Node Id="21010:[10306..10452).335" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707045" />
<Node Id="21010:[5130..5212).1" Label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 707046" />
<Node Id="21010:[5303..5323).1" Label="OutputKind.NetModule 707047" />
<Node Id="21010:[5325..5348).1" Label="OptimizationLevel.Debug 707048" />
<Node Id="21010:[5285..5349).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 707049" />
<Node Id="21010:[10204..10225).8" Label="param CreateTestOptions(OutputKind outputKind) 707050" />
<Node Id="21010:[10227..10262).8" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 707051" />
<Node Id="21010:[10264..10288).8" Label="param CreateTestOptions(bool allowUnsafe = false) 707052" />
<Node Id="21010:[10335..10345).8" Label="outputKind 707053" />
<Node Id="21010:[10347..10383).8" Label="optimizationLevel: optimizationLevel 707054" />
<Node Id="21010:[10385..10425).8" Label="warningLevel: Diagnostic.MaxWarningLevel 707055" />
<Node Id="21010:[10427..10451).8" Label="allowUnsafe: allowUnsafe 707056" />
<Node Id="21010:[10306..10452).337" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707057" />
<Node Id="21010:[10306..10452).383" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 707058" />
<Node Id="21010:[5271..5349).1" Label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 707059" />
<Node Id="21010:[5456..5460).1" Label="true 707060" />
<Node Id="21010:[5429..5461).1" Label="ReleaseDll.WithAllowUnsafe(true) 707061" />
<Node Id="21010:[5410..5461).1" Label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 707062" />
<Node Id="21010:[5566..5570).1" Label="true 707063" />
<Node Id="21010:[5539..5571).1" Label="ReleaseExe.WithAllowUnsafe(true) 707064" />
<Node Id="21010:[5520..5571).1" Label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 707065" />
<Node Id="21010:[5674..5678).1" Label="true 707066" />
<Node Id="21010:[5649..5679).1" Label="DebugDll.WithAllowUnsafe(true) 707067" />
<Node Id="21010:[5632..5679).1" Label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 707068" />
<Node Id="21010:[5780..5784).1" Label="true 707069" />
<Node Id="21010:[5755..5785).1" Label="DebugExe.WithAllowUnsafe(true) 707070" />
<Node Id="21010:[5738..5785).1" Label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 707071" />
<Node Id="21010:[5900..5951).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 707072" />
<Node Id="21010:[5866..5952).1" Label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707073" />
<Node Id="21010:[5846..5952).1" Label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707074" />
<Node Id="21010:[6065..6116).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 707075" />
<Node Id="21010:[6031..6117).1" Label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707076" />
<Node Id="21010:[6011..6117).1" Label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707077" />
<Node Id="21010:[6236..6287).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 707078" />
<Node Id="21010:[6199..6288).1" Label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707079" />
<Node Id="21010:[6176..6288).1" Label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707080" />
<Node Id="21010:[6397..6448).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 707081" />
<Node Id="21010:[6365..6449).1" Label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707082" />
<Node Id="21010:[6347..6449).1" Label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 707083" />
<Node Id="21010:[6560..6586).1" Label="DebugInformationFormat.Pdb 707084" />
<Node Id="21010:[6513..6587).1" Label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 707085" />
<Node Id="21010:[6497..6587).1" Label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 707086" />
<Node Id="21003:[34259..34289).1" Label="options = TestOptions.Regular; 707087" />
<Node Id="21003:[34320..34386).1" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 707088" />
<Node Id="21003:[34320..34386).2" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 707089" />
<Node Id="21003:[34320..34386).3" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 707090" />
<Node Id="21003:[34320..34386).5" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 707091" />
<Node Id="21003:[34320..34386).7" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 707092" />
<Node Id="21003:[34400..34487).1" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 707093" />
<Node Id="21003:[34400..34487).2" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 707094" />
<Node Id="21003:[34400..34487).3" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 707095" />
<Node Id="21003:[34400..34487).4" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 707096" />
<Node Id="21003:[34400..34487).6" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 707097" />
<Node Id="21003:[34407..34486).1" Label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 707098" />
<Node Id="21003:[34554..34569).1" Label="param CheckSerializable(SyntaxTree tree) 707099" />
<Node Id="21003:[34595..34627).1" Label="var stream = new MemoryStream(); 707100" />
<Node Id="21003:[34641..34667).1" Label="var root = tree.GetRoot(); 707101" />
<Node Id="21003:[34641..34667).3" Label="var root = tree.GetRoot(); 707102" />
<Node Id="21003:[34681..34706).1" Label="root.SerializeTo(stream); 707103" />
<Node Id="21003:[34681..34706).2" Label="root.SerializeTo(stream); 707104" />
<Node Id="21003:[34681..34706).4" Label="root.SerializeTo(stream); 707105" />
<Node Id="21003:[34720..34740).1" Label="stream.Position = 0; 707106" />
<Node Id="21003:[34720..34735).1" Label="stream.Position 707107" />
<Node Id="21003:[34754..34818).1" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 707108" />
<Node Id="21003:[34754..34818).2" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 707109" />
<Node Id="21003:[34754..34818).4" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 707110" />
<Node Id="21003:[34832..34844).1" Label="return tree; 707111" />
<Node Id="21004:[1129..1207).1" Label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 707112" />
<Node Id="21003:[46280..46350).3" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 707113" />
<Node Id="21003:[46366..46650).1" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 707114" />
<Node Id="21003:[46366..46650).2" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 707115" />
<Node Id="21003:[46419..46533).1" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 707116" />
<Node Id="21003:[46419..46533).2" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 707117" />
<Node Id="21003:[46419..46533).4" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 707118" />
<Node Id="21003:[46563..46584).1" Label="hasTopLevelStatements 707119" />
<Node Id="21003:[46553..46635).1" Label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 707120" />
<Node Id="21003:[46755..46872).1" Label="if (Debugger.IsAttached)
            {
                options = options.WithConcurrentBuild(false);
            } 707121" />
<Node Id="21003:[46888..47066).1" Label="if (experimentalFeature.HasValue)
            {
                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);
            } 707122" />
<Node Id="21003:[47082..47319).1" Label="Func$CSharpCompilation$ createCompilationLambda = () =$ CSharpCompilation.Create(
                assemblyName == '' ? GetUniqueName() : assemblyName,
                syntaxTrees,
                references,
                options); 707123" />
<Node Id="21003:[47333..47400).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 707124" />
<Node Id="21003:[47333..47399).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 707125" />
<Node Id="25006:[11552..11587).1" Label="param ValidateIOperations(Func$Compilation$ createCompilation) 707126" />
<Node Id="25006:[11613..11696).1" Label="if (!EnableVerifyIOperation)
            {
                return;
            } 707127" />
<Node Id="25006:[11674..11681).1" Label="return; 707128" />
<Node Id="21003:[47333..47400).2" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 707129" />
<Node Id="21003:[47414..47458).1" Label="var compilation = createCompilationLambda(); 707130" />
<Node Id="21003:[47414..47458).2" Label="var compilation = createCompilationLambda(); 707131" />
<Node Id="25004:[1041..1077).1" Label="return Guid.NewGuid().ToString('D'); 707132" />
<Node Id="21003:[47414..47458).4" Label="var compilation = createCompilationLambda(); 707133" />
<Node Id="21003:[47689..47930).1" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 707134" />
<Node Id="21003:[47717..47747).1" Label="IsNullableEnabled(compilation) 707135" />
<Node Id="21003:[48025..48054).1" Label="param IsNullableEnabled(CSharpCompilation compilation) 707136" />
<Node Id="21003:[48175..48211).1" Label="var trees = compilation.SyntaxTrees; 707137" />
<Node Id="21003:[48225..48313).1" Label="if (trees.IsDefaultOrEmpty)
            {
                return false;
            } 707138" />
<Node Id="21003:[48327..48378).1" Label="var options = (CSharpParseOptions)trees[0].Options; 707139" />
<Node Id="21003:[48327..48378).2" Label="var options = (CSharpParseOptions)trees[0].Options; 707140" />
<Node Id="21003:[48392..48469).1" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 707141" />
<Node Id="21003:[48392..48469).2" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 707142" />
<Node Id="21003:[47689..47930).3" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 707143" />
<Node Id="21003:[47944..47963).1" Label="return compilation; 707144" />
<Node Id="28001:[14630..14812).21" Label="CreateCompilation(source).VerifyDiagnostics(
                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2').WithLocation(7, 9)); 707145" />
<Node Id="28001:[14692..14747).1" Label="Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)') 707146" />
<Node Id="25004:[19277..19288).1" Label="param Diagnostic(object code) 707147" />
<Node Id="25004:[19303..19330).1" Label="param Diagnostic(string squiggledText = null) 707148" />
<Node Id="25004:[19345..19370).1" Label="param Diagnostic(object[] arguments = null) 707149" />
<Node Id="25004:[19385..19419).1" Label="param Diagnostic(LinePosition? startLocation = null) 707150" />
<Node Id="25004:[19434..19483).1" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 707151" />
<Node Id="25004:[19498..19537).1" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 707152" />
<Node Id="25004:[19552..19577).1" Label="param Diagnostic(bool isSuppressed = false) 707153" />
<Node Id="25004:[19603..19877).1" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 707154" />
<Node Id="25004:[19603..19877).2" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 707155" />
<Node Id="25004:[19603..19877).3" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 707156" />
<Node Id="25004:[19603..19877).4" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 707157" />
<Node Id="25004:[19603..19877).5" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 707158" />
<Node Id="25004:[19603..19877).6" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 707159" />
<Node Id="25004:[19603..19877).7" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 707160" />
<Node Id="25004:[19610..19876).1" Label="TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed) 707161" />
<Node Id="25007:[3334..3345).1" Label="param Diagnostic(object code) 707162" />
<Node Id="25007:[3360..3387).1" Label="param Diagnostic(string squiggledText = null) 707163" />
<Node Id="25007:[3402..3427).1" Label="param Diagnostic(object[] arguments = null) 707164" />
<Node Id="25007:[3442..3476).1" Label="param Diagnostic(LinePosition? startLocation = null) 707165" />
<Node Id="25007:[3491..3540).1" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 707166" />
<Node Id="25007:[3555..3594).1" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 707167" />
<Node Id="25007:[3609..3634).1" Label="param Diagnostic(bool isSuppressed = false) 707168" />
<Node Id="25007:[3660..3885).1" Label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||
                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||
                         code is int ||
                         code is string); 707169" />
<Node Id="25007:[3901..4266).1" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 707170" />
<Node Id="25007:[3901..4266).4" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 707171" />
<Node Id="25007:[3901..4266).6" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 707172" />
<Node Id="25007:[3901..4266).7" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 707173" />
<Node Id="25007:[3901..4266).8" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 707174" />
<Node Id="25007:[3901..4266).9" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 707175" />
<Node Id="25007:[3901..4266).10" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 707176" />
<Node Id="25003:[747..750).1" Label="{ } 707177" />
<Node Id="25003:[740..750).1" Label="None = { } 707178" />
<Node Id="25003:[814..818).1" Label="null 707179" />
<Node Id="25003:[808..818).1" Label="Any = null 707180" />
<Node Id="25007:[3901..4266).13" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 707181" />
<Node Id="25007:[3908..4265).1" Label="new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed) 707182" />
<Node Id="25003:[2816..2827).1" Label="param DiagnosticDescription(object code) 707183" />
<Node Id="25003:[2842..2863).1" Label="param DiagnosticDescription(bool isWarningAsError) 707184" />
<Node Id="25003:[2878..2898).1" Label="param DiagnosticDescription(string squiggledText) 707185" />
<Node Id="25003:[2913..2931).1" Label="param DiagnosticDescription(object[] arguments) 707186" />
<Node Id="25003:[2946..2973).1" Label="param DiagnosticDescription(LinePosition? startLocation) 707187" />
<Node Id="25003:[2988..3030).1" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 707188" />
<Node Id="25003:[3045..3076).1" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 707189" />
<Node Id="25003:[3091..3116).1" Label="param DiagnosticDescription(Type errorCodeType = null) 707190" />
<Node Id="25003:[3131..3176).1" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 707191" />
<Node Id="25003:[3191..3238).1" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 707192" />
<Node Id="25003:[3253..3278).1" Label="param DiagnosticDescription(bool isSuppressed = false) 707193" />
<Node Id="25003:[2773..3850).1" Label="param DiagnosticDescription(this) 707194" />
<Node Id="25003:[912..917).1" Label="_code 707195" />
<Node Id="25003:[950..967).1" Label="_isWarningAsError 707196" />
<Node Id="25003:[1000..1013).1" Label="_isSuppressed 707197" />
<Node Id="25003:[1048..1062).1" Label="_squiggledText 707198" />
<Node Id="25003:[1099..1109).1" Label="_arguments 707199" />
<Node Id="25003:[1151..1165).1" Label="_startPosition 707200" />
<Node Id="25003:[1276..1303).1" Label="_argumentOrderDoesNotMatter 707201" />
<Node Id="25003:[1336..1350).1" Label="_errorCodeType 707202" />
<Node Id="25003:[1383..1412).1" Label="_ignoreArgumentsWhenComparing 707203" />
<Node Id="25003:[1460..1479).1" Label="_defaultSeverityOpt 707204" />
<Node Id="25003:[1527..1548).1" Label="_effectiveSeverityOpt 707205" />
<Node Id="25003:[1673..1689).1" Label="_syntaxPredicate 707206" />
<Node Id="25003:[1713..1727).1" Label="_showPredicate 707207" />
<Node Id="25003:[1891..1900).1" Label="_location 707208" />
<Node Id="25003:[1941..1960).1" Label="_argumentsAsStrings 707209" />
<Node Id="25003:[3304..3309).1" Label="_code 707210" />
<Node Id="25003:[3331..3348).1" Label="_isWarningAsError 707211" />
<Node Id="25003:[3382..3396).1" Label="_squiggledText 707212" />
<Node Id="25003:[3427..3437).1" Label="_arguments 707213" />
<Node Id="25003:[3464..3478).1" Label="_startPosition 707214" />
<Node Id="25003:[3509..3525).1" Label="_syntaxPredicate 707215" />
<Node Id="25003:[3562..3589).1" Label="_argumentOrderDoesNotMatter 707216" />
<Node Id="25003:[3633..3682).1" Label="_errorCodeType = errorCodeType ?? code.GetType(); 707217" />
<Node Id="25003:[3633..3647).1" Label="_errorCodeType 707218" />
<Node Id="25003:[3696..3715).1" Label="_defaultSeverityOpt 707219" />
<Node Id="25003:[3751..3772).1" Label="_effectiveSeverityOpt 707220" />
<Node Id="25003:[3810..3823).1" Label="_isSuppressed 707221" />
<Node Id="25004:[19603..19877).8" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 707222" />
<Node Id="28001:[14630..14812).34" Label="CreateCompilation(source).VerifyDiagnostics(
                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2').WithLocation(7, 9)); 707223" />
<Node Id="28001:[14692..14791).1" Label="Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2') 707224" />
<Node Id="28001:[14692..14791).3" Label="Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2') 707225" />
<Node Id="25003:[7407..7432).1" Label="param WithArguments(params object[] arguments) 707226" />
<Node Id="25003:[7364..7671).1" Label="param WithArguments(this) 707227" />
<Node Id="25003:[7458..7660).1" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707228" />
<Node Id="25003:[7458..7660).2" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707229" />
<Node Id="25003:[7458..7660).3" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707230" />
<Node Id="25003:[7458..7660).4" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707231" />
<Node Id="25003:[7458..7660).5" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707232" />
<Node Id="25003:[7458..7660).6" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707233" />
<Node Id="25003:[7458..7660).7" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707234" />
<Node Id="25003:[7458..7660).9" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707235" />
<Node Id="25003:[7458..7660).10" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707236" />
<Node Id="25003:[7458..7660).11" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707237" />
<Node Id="25003:[7458..7660).12" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707238" />
<Node Id="25003:[7465..7659).1" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 707239" />
<Node Id="25003:[2816..2827).2" Label="param DiagnosticDescription(object code) 707240" />
<Node Id="25003:[2842..2863).2" Label="param DiagnosticDescription(bool isWarningAsError) 707241" />
<Node Id="25003:[2878..2898).2" Label="param DiagnosticDescription(string squiggledText) 707242" />
<Node Id="25003:[2913..2931).2" Label="param DiagnosticDescription(object[] arguments) 707243" />
<Node Id="25003:[2946..2973).2" Label="param DiagnosticDescription(LinePosition? startLocation) 707244" />
<Node Id="25003:[2988..3030).2" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 707245" />
<Node Id="25003:[3045..3076).2" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 707246" />
<Node Id="25003:[3091..3116).2" Label="param DiagnosticDescription(Type errorCodeType = null) 707247" />
<Node Id="25003:[3131..3176).2" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 707248" />
<Node Id="25003:[3191..3238).2" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 707249" />
<Node Id="25003:[3253..3278).2" Label="param DiagnosticDescription(bool isSuppressed = false) 707250" />
<Node Id="25003:[2773..3850).2" Label="param DiagnosticDescription(this) 707251" />
<Node Id="25003:[912..917).2" Label="_code 707252" />
<Node Id="25003:[950..967).2" Label="_isWarningAsError 707253" />
<Node Id="25003:[1000..1013).2" Label="_isSuppressed 707254" />
<Node Id="25003:[1048..1062).2" Label="_squiggledText 707255" />
<Node Id="25003:[1099..1109).2" Label="_arguments 707256" />
<Node Id="25003:[1151..1165).4" Label="_startPosition 707257" />
<Node Id="25003:[1276..1303).2" Label="_argumentOrderDoesNotMatter 707258" />
<Node Id="25003:[1336..1350).2" Label="_errorCodeType 707259" />
<Node Id="25003:[1383..1412).2" Label="_ignoreArgumentsWhenComparing 707260" />
<Node Id="25003:[1460..1479).2" Label="_defaultSeverityOpt 707261" />
<Node Id="25003:[1527..1548).2" Label="_effectiveSeverityOpt 707262" />
<Node Id="25003:[1673..1689).2" Label="_syntaxPredicate 707263" />
<Node Id="25003:[1713..1727).2" Label="_showPredicate 707264" />
<Node Id="25003:[1891..1900).2" Label="_location 707265" />
<Node Id="25003:[1941..1960).2" Label="_argumentsAsStrings 707266" />
<Node Id="25003:[3427..3437).2" Label="_arguments 707267" />
<Node Id="25003:[3562..3589).2" Label="_argumentOrderDoesNotMatter 707268" />
<Node Id="28001:[14630..14812).41" Label="CreateCompilation(source).VerifyDiagnostics(
                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2').WithLocation(7, 9)); 707269" />
<Node Id="28001:[14692..14810).1" Label="Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2').WithLocation(7, 9) 707270" />
<Node Id="25003:[9181..9189).1" Label="param WithLocation(int line) 707271" />
<Node Id="25003:[9191..9201).1" Label="param WithLocation(int column) 707272" />
<Node Id="25003:[9139..9487).1" Label="param WithLocation(this) 707273" />
<Node Id="25003:[9227..9476).1" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707274" />
<Node Id="25003:[9227..9476).2" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707275" />
<Node Id="25003:[9227..9476).3" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707276" />
<Node Id="25003:[9227..9476).4" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707277" />
<Node Id="25003:[9227..9476).5" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707278" />
<Node Id="25003:[9227..9476).6" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707279" />
<Node Id="25003:[9227..9476).9" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707280" />
<Node Id="25003:[9227..9476).11" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707281" />
<Node Id="25003:[9227..9476).13" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707282" />
<Node Id="25003:[9227..9476).14" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707283" />
<Node Id="25003:[9227..9476).15" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707284" />
<Node Id="25003:[9227..9476).16" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707285" />
<Node Id="25003:[9227..9476).17" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707286" />
<Node Id="25003:[9227..9476).18" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 707287" />
<Node Id="25003:[9234..9475).1" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 707288" />
<Node Id="25003:[2816..2827).3" Label="param DiagnosticDescription(object code) 707289" />
<Node Id="25003:[2842..2863).3" Label="param DiagnosticDescription(bool isWarningAsError) 707290" />
<Node Id="25003:[2878..2898).3" Label="param DiagnosticDescription(string squiggledText) 707291" />
<Node Id="25003:[2913..2931).3" Label="param DiagnosticDescription(object[] arguments) 707292" />
<Node Id="25003:[2946..2973).3" Label="param DiagnosticDescription(LinePosition? startLocation) 707293" />
<Node Id="25003:[2988..3030).3" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 707294" />
<Node Id="25003:[3045..3076).3" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 707295" />
<Node Id="25003:[3091..3116).3" Label="param DiagnosticDescription(Type errorCodeType = null) 707296" />
<Node Id="25003:[3131..3176).3" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 707297" />
<Node Id="25003:[3191..3238).3" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 707298" />
<Node Id="25003:[3253..3278).3" Label="param DiagnosticDescription(bool isSuppressed = false) 707299" />
<Node Id="25003:[2773..3850).3" Label="param DiagnosticDescription(this) 707300" />
<Node Id="25003:[912..917).3" Label="_code 707301" />
<Node Id="25003:[950..967).3" Label="_isWarningAsError 707302" />
<Node Id="25003:[1000..1013).3" Label="_isSuppressed 707303" />
<Node Id="25003:[1048..1062).3" Label="_squiggledText 707304" />
<Node Id="25003:[1099..1109).3" Label="_arguments 707305" />
<Node Id="25003:[1151..1165).7" Label="_startPosition 707306" />
<Node Id="25003:[1276..1303).3" Label="_argumentOrderDoesNotMatter 707307" />
<Node Id="25003:[1336..1350).3" Label="_errorCodeType 707308" />
<Node Id="25003:[1383..1412).3" Label="_ignoreArgumentsWhenComparing 707309" />
<Node Id="25003:[1460..1479).3" Label="_defaultSeverityOpt 707310" />
<Node Id="25003:[1527..1548).3" Label="_effectiveSeverityOpt 707311" />
<Node Id="25003:[1673..1689).3" Label="_syntaxPredicate 707312" />
<Node Id="25003:[1713..1727).3" Label="_showPredicate 707313" />
<Node Id="25003:[1891..1900).3" Label="_location 707314" />
<Node Id="25003:[1941..1960).3" Label="_argumentsAsStrings 707315" />
<Node Id="25003:[3464..3478).3" Label="_startPosition 707316" />
<Node Id="28001:[14630..14812).46" Label="CreateCompilation(source).VerifyDiagnostics(
                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2').WithLocation(7, 9)); 707317" />
<Node Id="28001:[14630..14811).1" Label="CreateCompilation(source).VerifyDiagnostics(
                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2').WithLocation(7, 9)) 707318" />
<Node Id="28001:[14630..14811).2" Label="CreateCompilation(source).VerifyDiagnostics(
                Diagnostic(ErrorCode.ERR_BadDelArgCount, '(new C().F)').WithArguments('System.Action$object$', '2').WithLocation(7, 9)) 707319" />
<Node Id="25002:[4263..4282).1" Label="param VerifyDiagnostics(this TCompilation c) 707320" />
<Node Id="25002:[4284..4323).1" Label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 707321" />
<Node Id="25002:[4395..4432).1" Label="var diagnostics = c.GetDiagnostics(); 707322" />
<Node Id="10345:[956..960).1" Label="null 707323" />
<Node Id="10345:[975..1032).1" Label="ImmutableDictionary$string, AliasAndUsingDirective$.Empty 707324" />
<Node Id="10345:[1047..1101).1" Label="ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty 707325" />
<Node Id="10345:[1116..1166).1" Label="ImmutableArray$AliasAndExternAliasDirective$.Empty 707326" />
<Node Id="10345:[1181..1185).1" Label="null 707327" />
<Node Id="10345:[930..1186).1" Label="new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 707328" />
<Node Id="10345:[1753..1782).1" Label="param Imports(CSharpCompilation compilation) 707329" />
<Node Id="10345:[1797..1861).1" Label="param Imports(ImmutableDictionary$string, AliasAndUsingDirective$ usingAliases) 707330" />
<Node Id="10345:[1876..1931).1" Label="param Imports(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 707331" />
<Node Id="10345:[1946..1998).1" Label="param Imports(ImmutableArray$AliasAndExternAliasDirective$ externs) 707332" />
<Node Id="10345:[2013..2038).1" Label="param Imports(DiagnosticBag diagnostics) 707333" />
<Node Id="10345:[1723..2412).1" Label="param Imports(this) 707334" />
<Node Id="10345:[1234..1246).1" Label="_compilation 707335" />
<Node Id="10345:[1288..1300).1" Label="_diagnostics 707336" />
<Node Id="10345:[1531..1543).1" Label="UsingAliases 707337" />
<Node Id="10345:[2064..2099).1" Label="Debug.Assert(usingAliases != null); 707338" />
<Node Id="10345:[2064..2099).2" Label="Debug.Assert(usingAliases != null); 707339" />
<Node Id="10345:[2113..2145).1" Label="Debug.Assert(!usings.IsDefault); 707340" />
<Node Id="10345:[2159..2192).1" Label="Debug.Assert(!externs.IsDefault); 707341" />
<Node Id="10345:[2208..2220).1" Label="_compilation 707342" />
<Node Id="10345:[2249..2266).1" Label="this.UsingAliases 707343" />
<Node Id="10345:[2296..2307).1" Label="this.Usings 707344" />
<Node Id="10345:[2331..2343).1" Label="_diagnostics 707345" />
<Node Id="10345:[2372..2390).1" Label="this.ExternAliases 707346" />
<Node Id="10345:[922..1186).1" Label="Empty = new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 707347" />
<Node Id="25002:[4395..4432).3" Label="var diagnostics = c.GetDiagnostics(); 707348" />
<Node Id="10345:[13089..13118).1" Label="param FromGlobalUsings(CSharpCompilation compilation) 707349" />
<Node Id="10345:[13144..13184).1" Label="var usings = compilation.Options.Usings; 707350" />
<Node Id="10345:[13200..13326).1" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 707351" />
<Node Id="10345:[13200..13326).2" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 707352" />
<Node Id="10345:[13200..13326).4" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 707353" />
<Node Id="10345:[13298..13311).1" Label="return Empty; 707354" />
<Node Id="25002:[4395..4432).6" Label="var diagnostics = c.GetDiagnostics(); 707355" />
<Node Id="10345:[24530..24565).1" Label="param Complete(CancellationToken cancellationToken) 707356" />
<Node Id="10345:[24507..26254).1" Label="param Complete(this) 707357" />
<Node Id="10345:[24591..26243).1" Label="while (true)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var incompletePart = _state.NextIncompletePart;
                switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                }

                _state.SpinWaitComplete(incompletePart, cancellationToken);
            } 707358" />
<Node Id="10345:[24636..24685).1" Label="cancellationToken.ThrowIfCancellationRequested(); 707359" />
<Node Id="10345:[24703..24750).1" Label="var incompletePart = _state.NextIncompletePart; 707360" />
<Node Id="10345:[24768..26149).1" Label="switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                } 707361" />
<Node Id="10345:[26025..26098).1" Label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 707362" />
<Node Id="10345:[26169..26228).1" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 707363" />
<Node Id="10345:[26169..26228).2" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 707364" />
<Node Id="10345:[26169..26228).3" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 707365" />
<Node Id="10345:[24932..25204).1" Label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            } 707366" />
<Node Id="10345:[25064..25074).1" Label="Validate() 707367" />
<Node Id="10345:[26266..28173).1" Label="param Validate(this) 707368" />
<Node Id="10345:[26314..26387).1" Label="if (this == Empty)
            {
                return;
            } 707369" />
<Node Id="10345:[26365..26372).1" Label="return; 707370" />
<Node Id="10345:[25064..25075).1" Label="Validate(); 707371" />
<Node Id="10345:[25109..25173).1" Label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 707372" />
<Node Id="10345:[25858..25865).1" Label="return; 707373" />
<Node Id="10298:[471..492).1" Label="param Includes(this BinderFlags self) 707374" />
<Node Id="10298:[494..511).1" Label="param Includes(BinderFlags other) 707375" />
<Node Id="10298:[537..568).1" Label="return (self & other) == other; 707376" />
<Node Id="25002:[4395..4432).10" Label="var diagnostics = c.GetDiagnostics(); 707377" />
<Node Id="10292:[1720..1721).1" Label="0 707378" />
<Node Id="10292:[1704..1721).1" Label="ExternalScope = 0 707379" />
<Node Id="10292:[1768..1769).1" Label="1 707380" />
<Node Id="10292:[1752..1769).1" Label="TopLevelScope = 1 707381" />
<Node Id="10292:[1992..1993).1" Label="2 707382" />
<Node Id="10292:[1963..1993).1" Label="ValueKindInsignificantBits = 2 707383" />
<Node Id="10292:[2032..2129).1" Label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 $$ ValueKindInsignificantBits) - 1)) 707384" />
<Node Id="10306:[388969..389344).1" Label="property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 707385" />
<Node Id="10306:[388923..389344).1" Label="s_isIndexedPropertyWithNonOptionalArguments = property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 707386" />
<Node Id="10306:[389480..389543).1" Label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 707387" />
<Node Id="10306:[389562..389646).1" Label="memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType 707388" />
<Node Id="10306:[389708..389839).1" Label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 707389" />
<Node Id="10306:[389665..389839).1" Label="miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 707390" />
<Node Id="10306:[389438..389840).1" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 707391" />
<Node Id="10306:[389438..389840).17" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 707392" />
<Node Id="10306:[389401..389840).1" Label="s_propertyGroupFormat =
            new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 707393" />
<Node Id="10310:[84494..84496).1" Label="10 707394" />
<Node Id="10310:[84458..84496).1" Label="MaxParameterListsForErrorRecovery = 10 707395" />
<Node Id="10316:[802..830).1" Label="'$$h__TransparentIdentifier' 707396" />
<Node Id="10316:[772..830).1" Label="transparentIdentifierPrefix = '$$h__TransparentIdentifier' 707397" />
<Node Id="10319:[69643..69663).1" Label="s =$ (MethodSymbol)s 707398" />
<Node Id="10319:[69620..69663).1" Label="s_toMethodSymbolFunc = s =$ (MethodSymbol)s 707399" />
<Node Id="10319:[69752..69774).1" Label="s =$ (PropertySymbol)s 707400" />
<Node Id="10319:[69727..69774).1" Label="s_toPropertySymbolFunc = s =$ (PropertySymbol)s 707401" />
<Node Id="10286:[30925..30954).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 707402" />
<Node Id="10286:[30969..31000).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 707403" />
<Node Id="10286:[31015..31040).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 707404" />
<Node Id="10286:[31055..31080).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 707405" />
<Node Id="10286:[31095..31126).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 707406" />
<Node Id="10286:[31152..31210).1" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 707407" />
<Node Id="10286:[31152..31210).2" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 707408" />
<Node Id="10286:[31152..31210).4" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 707409" />
<Node Id="10286:[31152..31210).5" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 707410" />
<Node Id="10286:[31515..31598).1" Label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 707411" />
<Node Id="10286:[31614..31710).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707412" />
<Node Id="10286:[31614..31710).2" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707413" />
<Node Id="10286:[31614..31710).3" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707414" />
<Node Id="10286:[31614..31710).4" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707415" />
<Node Id="10286:[31614..31710).5" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707416" />
<Node Id="10286:[31614..31710).6" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 707417" />
<Node Id="10286:[31614..31709).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 707418" />
<Node Id="10319:[80080..80109).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 707419" />
<Node Id="10319:[80111..80133).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 707420" />
<Node Id="10319:[80135..80160).1" Label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 707421" />
<Node Id="10319:[80162..80186).1" Label="param GetWellKnownTypeMember(Location location = null) 707422" />
<Node Id="10319:[80188..80212).1" Label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 707423" />
<Node Id="10319:[80214..80237).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 707424" />
<Node Id="10319:[80263..80315).1" Label="Debug.Assert((syntax != null) ^ (location != null)); 707425" />
<Node Id="10319:[80263..80315).2" Label="Debug.Assert((syntax != null) ^ (location != null)); 707426" />
<Node Id="10319:[80263..80315).4" Label="Debug.Assert((syntax != null) ^ (location != null)); 707427" />
<Node Id="10319:[80263..80315).5" Label="Debug.Assert((syntax != null) ^ (location != null)); 707428" />
<Node Id="10319:[80331..80364).1" Label="DiagnosticInfo useSiteDiagnostic; 707429" />
<Node Id="10319:[80378..80479).1" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 707430" />
<Node Id="10319:[80378..80479).2" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 707431" />
<Node Id="10319:[80378..80479).3" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 707432" />
<Node Id="10319:[80378..80479).4" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 707433" />
<Node Id="10319:[80400..80478).1" Label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 707434" />
<Node Id="10319:[80843..80872).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 707435" />
<Node Id="10319:[80874..80896).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 707436" />
<Node Id="10319:[80898..80931).1" Label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 707437" />
<Node Id="10319:[80933..80956).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 707438" />
<Node Id="10319:[80982..81047).1" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 707439" />
<Node Id="10319:[80982..81047).2" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 707440" />
<Node Id="10319:[80982..81047).3" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 707441" />
<Node Id="10060:[2841..2854).1" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707442" />
<Node Id="10060:[2856..2875).1" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707443" />
<Node Id="10060:[2901..2932).1" Label="Debug.Assert(symbol is object); 707444" />
<Node Id="10060:[2948..3467).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 707445" />
<Node Id="10060:[3483..3502).1" Label="isInternal = false; 707446" />
<Node Id="10060:[3553..4223).1" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 707447" />
<Node Id="10060:[4243..4274).1" Label="symbol = symbol.ContainingType; 707448" />
<Node Id="10060:[3518..4328).1" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 707449" />
<Node Id="10060:[4344..4356).1" Label="return true; 707450" />
<Node Id="10319:[80982..81047).8" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 707451" />
<Node Id="10060:[2841..2854).2" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707452" />
<Node Id="10060:[2856..2875).2" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707453" />
<Node Id="10060:[2901..2932).3" Label="Debug.Assert(symbol is object); 707454" />
<Node Id="10060:[2948..3467).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 707455" />
<Node Id="10060:[3553..4223).2" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 707456" />
<Node Id="10060:[4243..4274).2" Label="symbol = symbol.ContainingType; 707457" />
<Node Id="10060:[3518..4328).2" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 707458" />
<Node Id="10060:[3553..4223).3" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 707459" />
<Node Id="10319:[80982..81047).15" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 707460" />
<Node Id="10319:[81063..82500).1" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 707461" />
<Node Id="10319:[81063..82500).2" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 707462" />
<Node Id="10319:[81129..81207).1" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 707463" />
<Node Id="10319:[81129..81207).2" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 707464" />
<Node Id="10060:[2841..2854).4" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707465" />
<Node Id="10060:[2856..2875).4" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707466" />
<Node Id="10060:[2901..2932).7" Label="Debug.Assert(symbol is object); 707467" />
<Node Id="10060:[2948..3467).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 707468" />
<Node Id="10060:[3483..3502).7" Label="isInternal = false; 707469" />
<Node Id="10060:[3553..4223).6" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 707470" />
<Node Id="10060:[4243..4274).6" Label="symbol = symbol.ContainingType; 707471" />
<Node Id="10060:[3518..4328).6" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 707472" />
<Node Id="10060:[2841..2854).5" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707473" />
<Node Id="10060:[2856..2875).5" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707474" />
<Node Id="10060:[2901..2932).9" Label="Debug.Assert(symbol is object); 707475" />
<Node Id="10060:[2948..3467).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 707476" />
<Node Id="10060:[3553..4223).7" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 707477" />
<Node Id="10060:[4243..4274).7" Label="symbol = symbol.ContainingType; 707478" />
<Node Id="10060:[3518..4328).7" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 707479" />
<Node Id="10319:[81225..82039).1" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 707480" />
<Node Id="10319:[81225..82039).2" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 707481" />
<Node Id="10319:[82516..82536).1" Label="return memberSymbol; 707482" />
<Node Id="10319:[80495..80738).1" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 707483" />
<Node Id="10319:[80495..80738).2" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 707484" />
<Node Id="10319:[80754..80774).1" Label="return memberSymbol; 707485" />
<Node Id="10060:[2841..2854).9" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707486" />
<Node Id="10060:[2856..2875).9" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707487" />
<Node Id="10060:[2901..2932).17" Label="Debug.Assert(symbol is object); 707488" />
<Node Id="10060:[2948..3467).9" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 707489" />
<Node Id="10060:[3553..4223).11" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 707490" />
<Node Id="10060:[4243..4274).11" Label="symbol = symbol.ContainingType; 707491" />
<Node Id="10060:[3518..4328).11" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 707492" />
<Node Id="10060:[2841..2854).10" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 707493" />
<Node Id="10060:[2856..2875).10" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 707494" />
<Node Id="10060:[2901..2932).19" Label="Debug.Assert(symbol is object); 707495" />
<Node Id="10060:[2948..3467).10" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 707496" />
<Node Id="10060:[3553..4223).12" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 707497" />
<Node Id="10060:[4243..4274).12" Label="symbol = symbol.ContainingType; 707498" />
<Node Id="10060:[3518..4328).12" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 707499" />
<Node Id="10319:[81225..82039).4" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 707500" />
<Node Id="10319:[81225..82039).5" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 707501" />
<Node Id="10319:[82516..82536).2" Label="return memberSymbol; 707502" />
<Node Id="10319:[80495..80738).5" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 707503" />
<Node Id="10319:[80754..80774).2" Label="return memberSymbol; 707504" />
<Node Id="10319:[81225..82039).7" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 707505" />
<Node Id="10319:[82516..82536).3" Label="return memberSymbol; 707506" />
<Node Id="10319:[80754..80774).3" Label="return memberSymbol; 707507" />
<Node Id="10076:[2308..2337).1" Label="param BinderFactory(CSharpCompilation compilation) 707508" />
<Node Id="10076:[2339..2360).1" Label="param BinderFactory(SyntaxTree syntaxTree) 707509" />
<Node Id="10076:[2362..2386).1" Label="param BinderFactory(bool ignoreAccessibility) 707510" />
<Node Id="10076:[2285..3386).1" Label="param BinderFactory(this) 707511" />
<Node Id="10076:[1715..1727).1" Label="_binderCache 707512" />
<Node Id="10076:[1773..1785).1" Label="_compilation 707513" />
<Node Id="10076:[1824..1835).1" Label="_syntaxTree 707514" />
<Node Id="10076:[1883..1903).1" Label="_buckStopsHereBinder 707515" />
<Node Id="10076:[1936..1956).1" Label="_ignoreAccessibility 707516" />
<Node Id="10076:[2247..2272).1" Label="_binderFactoryVisitorPool 707517" />
<Node Id="10076:[2412..2424).1" Label="_compilation 707518" />
<Node Id="10076:[2453..2464).1" Label="_syntaxTree 707519" />
<Node Id="10076:[2492..2512).1" Label="_ignoreAccessibility 707520" />
<Node Id="10076:[2551..2658).1" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 707521" />
<Node Id="10076:[2551..2658).3" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 707522" />
<Node Id="10076:[2551..2658).5" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 707523" />
<Node Id="10076:[2551..2576).1" Label="_binderFactoryVisitorPool 707524" />
<Node Id="10076:[3236..3299).1" Label="_binderCache = new ConcurrentCache$BinderCacheKey, Binder$(50); 707525" />
<Node Id="10076:[3236..3248).1" Label="_binderCache 707526" />
<Node Id="10076:[3315..3375).1" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 707527" />
<Node Id="10076:[3315..3375).2" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 707528" />
<Node Id="10076:[3338..3374).1" Label="new BuckStopsHereBinder(compilation) 707529" />
<Node Id="10325:[645..674).1" Label="param BuckStopsHereBinder(CSharpCompilation compilation) 707530" />
<Node Id="10325:[616..730).1" Label="param BuckStopsHereBinder(this) 707531" />
<Node Id="10325:[696..707).1" Label="compilation 707532" />
<Node Id="10325:[616..730).2" Label="param BuckStopsHereBinder(this) 707533" />
<Node Id="10286:[939..968).1" Label="param Binder(CSharpCompilation compilation) 707534" />
<Node Id="10286:[923..1219).1" Label="param Binder(this) 707535" />
<Node Id="10286:[726..773).1" Label="internal CSharpCompilation Compilation { get; } 707536" />
<Node Id="10286:[815..820).1" Label="Flags 707537" />
<Node Id="10286:[2975..3015).1" Label="protected internal Binder? Next { get; } 707538" />
<Node Id="10286:[17802..17818).1" Label="_lazyConversions 707539" />
<Node Id="10286:[18200..18223).1" Label="_lazyOverloadResolution 707540" />
<Node Id="10286:[994..1034).1" Label="RoslynDebug.Assert(compilation != null); 707541" />
<Node Id="10286:[994..1034).2" Label="RoslynDebug.Assert(compilation != null); 707542" />
<Node Id="10286:[1048..1096).1" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 707543" />
<Node Id="10286:[1048..1096).2" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 707544" />
<Node Id="10286:[1110..1120).1" Label="this.Flags 707545" />
<Node Id="10286:[1177..1193).1" Label="this.Compilation 707546" />
<Node Id="10076:[3315..3335).1" Label="_buckStopsHereBinder 707547" />
<Node Id="25002:[4395..4432).19" Label="var diagnostics = c.GetDiagnostics(); 707548" />
<Node Id="10076:[4437..4452).1" Label="param GetBinder(SyntaxNode node) 707549" />
<Node Id="10076:[4454..4498).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 707550" />
<Node Id="10076:[4500..4523).1" Label="param GetBinder(Symbol memberOpt = null) 707551" />
<Node Id="10076:[4411..5059).1" Label="param GetBinder(this) 707552" />
<Node Id="10076:[4549..4579).1" Label="int position = node.SpanStart; 707553" />
<Node Id="10076:[4821..4829).1" Label="InScript 707554" />
<Node Id="10076:[3592..3700).1" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 707555" />
<Node Id="10076:[3628..3685).1" Label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 707556" />
<Node Id="10076:[4815..4966).1" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 707557" />
<Node Id="10076:[4815..4966).3" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 707558" />
<Node Id="10076:[4815..4966).4" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 707559" />
<Node Id="10076:[4815..4966).5" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 707560" />
<Node Id="10076:[4932..4951).1" Label="node = node.Parent; 707561" />
<Node Id="10076:[4982..5048).1" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 707562" />
<Node Id="10076:[4982..5048).2" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 707563" />
<Node Id="10076:[4982..5048).3" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 707564" />
<Node Id="10076:[4982..5048).4" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 707565" />
<Node Id="10076:[4989..5047).1" Label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 707566" />
<Node Id="10076:[5097..5112).1" Label="param GetBinder(SyntaxNode node) 707567" />
<Node Id="10076:[5114..5126).1" Label="param GetBinder(int position) 707568" />
<Node Id="10076:[5128..5172).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 707569" />
<Node Id="10076:[5174..5197).1" Label="param GetBinder(Symbol memberOpt = null) 707570" />
<Node Id="10076:[5071..5759).1" Label="param GetBinder(this) 707571" />
<Node Id="10076:[5223..5250).1" Label="Debug.Assert(node != null); 707572" />
<Node Id="10076:[5223..5250).2" Label="Debug.Assert(node != null); 707573" />
<Node Id="10076:[5277..5448).1" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 707574" />
<Node Id="10076:[5277..5448).2" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 707575" />
<Node Id="10076:[5470..5538).1" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 707576" />
<Node Id="10076:[5470..5538).3" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 707577" />
<Node Id="10077:[909..930).1" Label="param BinderFactoryVisitor(BinderFactory factory) 707578" />
<Node Id="10077:[879..998).1" Label="param BinderFactoryVisitor(this) 707579" />
<Node Id="10077:[879..998).2" Label="param BinderFactoryVisitor(this) 707580" />
<Node Id="10077:[698..707).1" Label="_position 707581" />
<Node Id="10077:[747..768).1" Label="_memberDeclarationOpt 707582" />
<Node Id="10077:[798..808).1" Label="_memberOpt 707583" />
<Node Id="10077:[854..862).1" Label="_factory 707584" />
<Node Id="10077:[964..972).1" Label="_factory 707585" />
<Node Id="10076:[5470..5538).4" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 707586" />
<Node Id="10076:[5552..5614).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 707587" />
<Node Id="10076:[5552..5614).2" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 707588" />
<Node Id="10076:[5552..5614).3" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 707589" />
<Node Id="10076:[5552..5613).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 707590" />
<Node Id="10077:[1039..1051).1" Label="param Initialize(int position) 707591" />
<Node Id="10077:[1053..1090).1" Label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 707592" />
<Node Id="10077:[1092..1108).1" Label="param Initialize(Symbol memberOpt) 707593" />
<Node Id="10077:[1014..1370).1" Label="param Initialize(this) 707594" />
<Node Id="10077:[1142..1210).1" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 707595" />
<Node Id="10077:[1142..1210).2" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 707596" />
<Node Id="10077:[1142..1210).4" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 707597" />
<Node Id="10077:[1142..1210).5" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 707598" />
<Node Id="10077:[1230..1239).1" Label="_position 707599" />
<Node Id="10077:[1269..1290).1" Label="_memberDeclarationOpt 707600" />
<Node Id="10077:[1332..1342).1" Label="_memberOpt 707601" />
<Node Id="10076:[5552..5614).4" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 707602" />
<Node Id="10076:[5628..5664).1" Label="Binder result = visitor.Visit(node); 707603" />
<Node Id="10076:[5644..5663).1" Label="visitor.Visit(node) 707604" />
<Node Id="10077:[2693..2708).1" Label="param Visit(SyntaxNode node) 707605" />
<Node Id="10077:[2664..2780).1" Label="param Visit(this) 707606" />
<Node Id="10077:[2742..2765).1" Label="return VisitCore(node); 707607" />
<Node Id="10077:[2749..2764).1" Label="VisitCore(node) 707608" />
<Node Id="10077:[2877..2892).1" Label="param VisitCore(SyntaxNode node) 707609" />
<Node Id="10077:[2852..2986).1" Label="param VisitCore(this) 707610" />
<Node Id="10077:[2926..2971).1" Label="return ((CSharpSyntaxNode)node).Accept(this); 707611" />
<Node Id="10077:[2926..2971).2" Label="return ((CSharpSyntaxNode)node).Accept(this); 707612" />
<Node Id="10077:[2926..2971).3" Label="return ((CSharpSyntaxNode)node).Accept(this); 707613" />
<Node Id="10077:[34617..34644).1" Label="param VisitClassDeclaration(ClassDeclarationSyntax node) 707614" />
<Node Id="10077:[34572..34731).1" Label="param VisitClassDeclaration(this) 707615" />
<Node Id="10077:[34678..34716).1" Label="return VisitTypeDeclarationCore(node); 707616" />
<Node Id="10077:[34685..34715).1" Label="VisitTypeDeclarationCore(node) 707617" />
<Node Id="10077:[31025..31053).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 707618" />
<Node Id="10077:[30985..32417).1" Label="param VisitTypeDeclarationCore(this) 707619" />
<Node Id="10077:[31087..31238).1" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 707620" />
<Node Id="10077:[31087..31238).2" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 707621" />
<Node Id="10077:[31087..31238).3" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 707622" />
<Node Id="10077:[31258..31297).1" Label="NodeUsage extraInfo = NodeUsage.Normal; 707623" />
<Node Id="10077:[31490..32331).1" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 707624" />
<Node Id="10077:[31490..32331).2" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 707625" />
<Node Id="10077:[31490..32331).6" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 707626" />
<Node Id="10077:[31490..32331).7" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 707627" />
<Node Id="10077:[31842..31894).1" Label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 707628" />
<Node Id="10077:[32351..32402).1" Label="return VisitTypeDeclarationCore(parent, extraInfo); 707629" />
<Node Id="10077:[32351..32402).2" Label="return VisitTypeDeclarationCore(parent, extraInfo); 707630" />
<Node Id="10077:[32358..32401).1" Label="VisitTypeDeclarationCore(parent, extraInfo) 707631" />
<Node Id="10077:[32474..32502).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 707632" />
<Node Id="10077:[32504..32523).1" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 707633" />
<Node Id="10077:[32433..34556).1" Label="param VisitTypeDeclarationCore(this) 707634" />
<Node Id="10077:[32557..32607).1" Label="var key = CreateBinderCacheKey(parent, extraInfo); 707635" />
<Node Id="10077:[32557..32607).2" Label="var key = CreateBinderCacheKey(parent, extraInfo); 707636" />
<Node Id="10077:[32567..32606).1" Label="CreateBinderCacheKey(parent, extraInfo) 707637" />
<Node Id="10077:[44159..44180).1" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 707638" />
<Node Id="10077:[44182..44197).1" Label="param CreateBinderCacheKey(NodeUsage usage) 707639" />
<Node Id="10077:[44231..44317).1" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 707640" />
<Node Id="10077:[44231..44317).3" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 707641" />
<Node Id="10077:[44335..44374).1" Label="return new BinderCacheKey(node, usage); 707642" />
<Node Id="10077:[44335..44374).2" Label="return new BinderCacheKey(node, usage); 707643" />
<Node Id="10077:[44335..44374).3" Label="return new BinderCacheKey(node, usage); 707644" />
<Node Id="10077:[44342..44373).1" Label="new BinderCacheKey(node, usage) 707645" />
<Node Id="10076:[875..902).1" Label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 707646" />
<Node Id="10076:[904..919).1" Label="param BinderCacheKey(NodeUsage usage) 707647" />
<Node Id="10076:[853..1034).1" Label="param BinderCacheKey(this) 707648" />
<Node Id="10076:[953..968).1" Label="this.syntaxNode 707649" />
<Node Id="10076:[1000..1010).1" Label="this.usage 707650" />
<Node Id="10077:[32557..32607).3" Label="var key = CreateBinderCacheKey(parent, extraInfo); 707651" />
<Node Id="10077:[32627..32647).1" Label="Binder resultBinder; 707652" />
<Node Id="10077:[32670..32681).1" Label="binderCache 707653" />
<Node Id="10077:[2066..2158).1" Label="get
                {
                    return _factory._binderCache;
                } 707654" />
<Node Id="10077:[2110..2139).1" Label="return _factory._binderCache; 707655" />
<Node Id="10077:[32665..34501).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 707656" />
<Node Id="10077:[32665..34501).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 707657" />
<Node Id="10077:[32665..34501).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 707658" />
<Node Id="10077:[32665..34501).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 707659" />
<Node Id="10077:[32665..34501).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 707660" />
<Node Id="10076:[1241..1380).1" Label="param GetHashCode(this) 707661" />
<Node Id="10076:[1307..1365).1" Label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 707662" />
<Node Id="10077:[33226..33266).1" Label="resultBinder = VisitCore(parent.Parent); 707663" />
<Node Id="10077:[33241..33265).1" Label="VisitCore(parent.Parent) 707664" />
<Node Id="10077:[2877..2892).2" Label="param VisitCore(SyntaxNode node) 707665" />
<Node Id="10077:[39020..39048).1" Label="param VisitCompilationUnit(CompilationUnitSyntax parent) 707666" />
<Node Id="10077:[38976..39245).1" Label="param VisitCompilationUnit(this) 707667" />
<Node Id="10077:[39082..39230).1" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 707668" />
<Node Id="10077:[39170..39187).1" Label="IsInUsing(parent) 707669" />
<Node Id="10077:[44823..44854).1" Label="param IsInUsing(CSharpSyntaxNode containingNode) 707670" />
<Node Id="10077:[44800..46356).1" Label="param IsInUsing(this) 707671" />
<Node Id="10077:[44888..44934).1" Label="TextSpan containingSpan = containingNode.Span; 707672" />
<Node Id="10077:[44954..44972).1" Label="SyntaxToken token; 707673" />
<Node Id="10077:[44966..44971).1" Label="token 707674" />
<Node Id="10077:[44990..45616).1" Label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)
                {
                    // This occurs at EOF
                    token = containingNode.GetLastToken();
                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());
                }
                else if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 707675" />
<Node Id="10077:[45331..45616).1" Label="if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 707676" />
<Node Id="10077:[45553..45597).1" Label="token = containingNode.FindToken(_position); 707677" />
<Node Id="10077:[45553..45597).2" Label="token = containingNode.FindToken(_position); 707678" />
<Node Id="10077:[45636..45660).1" Label="var node = token.Parent; 707679" />
<Node Id="10077:[45678..46310).1" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 707680" />
<Node Id="10077:[45678..46310).2" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 707681" />
<Node Id="10077:[45678..46310).3" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 707682" />
<Node Id="10077:[46088..46248).1" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 707683" />
<Node Id="10077:[46088..46248).2" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 707684" />
<Node Id="10077:[46272..46291).1" Label="node = node.Parent; 707685" />
<Node Id="10077:[46328..46341).1" Label="return false; 707686" />
<Node Id="10077:[39082..39230).3" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 707687" />
<Node Id="10077:[39220..39228).1" Label="InScript 707688" />
<Node Id="10077:[2243..2331).1" Label="get
                {
                    return _factory.InScript;
                } 707689" />
<Node Id="10077:[2294..2311).1" Label="_factory.InScript 707690" />
<Node Id="10076:[3592..3700).2" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 707691" />
<Node Id="10077:[2287..2312).1" Label="return _factory.InScript; 707692" />
<Node Id="10077:[39089..39229).1" Label="VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript) 707693" />
<Node Id="10077:[39298..39335).1" Label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 707694" />
<Node Id="10077:[39337..39349).1" Label="param VisitCompilationUnit(bool inUsing) 707695" />
<Node Id="10077:[39351..39364).1" Label="param VisitCompilationUnit(bool inScript) 707696" />
<Node Id="10077:[39261..44091).1" Label="param VisitCompilationUnit(this) 707697" />
<Node Id="10077:[39421..39431).1" Label="syntaxTree 707698" />
<Node Id="10077:[1641..1732).1" Label="get
                {
                    return _factory._syntaxTree;
                } 707699" />
<Node Id="10077:[1685..1713).1" Label="return _factory._syntaxTree; 707700" />
<Node Id="10077:[39398..39590).1" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 707701" />
<Node Id="10077:[39398..39590).2" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 707702" />
<Node Id="10077:[39398..39590).5" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 707703" />
<Node Id="10077:[39626..39633).1" Label="inUsing 707704" />
<Node Id="10077:[39766..39774).1" Label="inScript 707705" />
<Node Id="10077:[39610..39829).1" Label="var extraInfo = inUsing
                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)
                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 707706" />
<Node Id="10077:[39877..39936).1" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 707707" />
<Node Id="10077:[39877..39936).2" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 707708" />
<Node Id="10077:[39887..39935).1" Label="CreateBinderCacheKey(compilationUnit, extraInfo) 707709" />
<Node Id="10077:[44159..44180).2" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 707710" />
<Node Id="10077:[44182..44197).2" Label="param CreateBinderCacheKey(NodeUsage usage) 707711" />
<Node Id="10077:[44231..44317).9" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 707712" />
<Node Id="10077:[44231..44317).11" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 707713" />
<Node Id="10077:[39877..39936).3" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 707714" />
<Node Id="10077:[39956..39970).1" Label="Binder result; 707715" />
<Node Id="10077:[39993..40004).1" Label="binderCache 707716" />
<Node Id="10077:[2066..2158).2" Label="get
                {
                    return _factory._binderCache;
                } 707717" />
<Node Id="10077:[2110..2139).2" Label="return _factory._binderCache; 707718" />
<Node Id="10077:[39988..44042).1" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 707719" />
<Node Id="10077:[39988..44042).2" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 707720" />
<Node Id="10077:[39988..44042).3" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 707721" />
<Node Id="10077:[39988..44042).4" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 707722" />
<Node Id="10077:[39988..44042).5" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 707723" />
<Node Id="10077:[40084..40108).1" Label="this.buckStopsHereBinder 707724" />
<Node Id="10077:[1843..1943).1" Label="get
                {
                    return _factory._buckStopsHereBinder;
                } 707725" />
<Node Id="10077:[1887..1924).1" Label="return _factory._buckStopsHereBinder; 707726" />
<Node Id="10077:[40075..40109).1" Label="result = this.buckStopsHereBinder; 707727" />
<Node Id="10077:[40133..43967).1" Label="if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    } 707728" />
<Node Id="10077:[43302..43313).1" Label="compilation 707729" />
<Node Id="10077:[1456..1548).1" Label="get
                {
                    return _factory._compilation;
                } 707730" />
<Node Id="10077:[1500..1529).1" Label="return _factory._compilation; 707731" />
<Node Id="10077:[43271..43374).1" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 707732" />
<Node Id="10077:[43271..43374).3" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 707733" />
<Node Id="10077:[43271..43374).4" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 707734" />
<Node Id="10077:[43271..43374).5" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 707735" />
<Node Id="10077:[43271..43374).6" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 707736" />
<Node Id="10077:[43280..43373).1" Label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 707737" />
<Node Id="10346:[1426..1457).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 707738" />
<Node Id="10346:[1459..1470).1" Label="param InContainerBinder(Binder next) 707739" />
<Node Id="10346:[1472..1506).1" Label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 707740" />
<Node Id="10346:[1508..1520).1" Label="param InContainerBinder(bool inUsing) 707741" />
<Node Id="10346:[1399..2435).1" Label="param InContainerBinder(this) 707742" />
<Node Id="10346:[1542..1546).1" Label="next 707743" />
<Node Id="10346:[1399..2435).2" Label="param InContainerBinder(this) 707744" />
<Node Id="10286:[1247..1258).1" Label="param Binder(Binder next) 707745" />
<Node Id="10286:[1231..1520).1" Label="param Binder(this) 707746" />
<Node Id="10286:[1260..1291).1" Label="param Binder(Conversions? conversions = null) 707747" />
<Node Id="10286:[1317..1350).1" Label="RoslynDebug.Assert(next != null); 707748" />
<Node Id="10286:[1317..1350).2" Label="RoslynDebug.Assert(next != null); 707749" />
<Node Id="10286:[1364..1368).1" Label="Next 707750" />
<Node Id="10286:[1390..1400).1" Label="this.Flags 707751" />
<Node Id="10286:[1428..1444).1" Label="this.Compilation 707752" />
<Node Id="10286:[1478..1494).1" Label="_lazyConversions 707753" />
<Node Id="10346:[858..868).1" Label="_container 707754" />
<Node Id="10346:[932..947).1" Label="_computeImports 707755" />
<Node Id="10346:[974..986).1" Label="_lazyImports 707756" />
<Node Id="10346:[1017..1033).1" Label="_lazyImportChain 707757" />
<Node Id="10346:[1074..1100).1" Label="_lazyQuickAttributeChecker 707758" />
<Node Id="10346:[1572..1612).1" Label="Debug.Assert((object)container != null); 707759" />
<Node Id="10346:[1572..1612).2" Label="Debug.Assert((object)container != null); 707760" />
<Node Id="10346:[1626..1666).1" Label="Debug.Assert(declarationSyntax != null); 707761" />
<Node Id="10346:[1626..1666).2" Label="Debug.Assert(declarationSyntax != null); 707762" />
<Node Id="10346:[1682..1692).1" Label="_container 707763" />
<Node Id="10346:[1719..1832).1" Label="_computeImports = basesBeingResolved =$ Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 707764" />
<Node Id="10346:[1719..1734).1" Label="_computeImports 707765" />
<Node Id="10346:[1848..2424).1" Label="if (!inUsing)
            {
                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                }
            } 707766" />
<Node Id="10346:[1894..2409).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 707767" />
<Node Id="10346:[1994..2057).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 707768" />
<Node Id="10346:[2079..2092).1" Label="_usingsSyntax 707769" />
<Node Id="10077:[43503..43514).1" Label="compilation 707770" />
<Node Id="10077:[1456..1548).2" Label="get
                {
                    return _factory._compilation;
                } 707771" />
<Node Id="10077:[1500..1529).2" Label="return _factory._compilation; 707772" />
<Node Id="10077:[43402..43944).1" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 707773" />
<Node Id="10077:[43402..43944).3" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 707774" />
<Node Id="10077:[43402..43944).4" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 707775" />
<Node Id="10077:[43991..44002).1" Label="binderCache 707776" />
<Node Id="10077:[2110..2139).3" Label="return _factory._binderCache; 707777" />
<Node Id="10077:[43991..44023).1" Label="binderCache.TryAdd(key, result); 707778" />
<Node Id="10077:[43991..44023).2" Label="binderCache.TryAdd(key, result); 707779" />
<Node Id="10077:[43991..44023).3" Label="binderCache.TryAdd(key, result); 707780" />
<Node Id="10077:[43991..44023).4" Label="binderCache.TryAdd(key, result); 707781" />
<Node Id="10077:[43991..44023).5" Label="binderCache.TryAdd(key, result); 707782" />
<Node Id="10077:[44062..44076).1" Label="return result; 707783" />
<Node Id="10077:[2926..2971).8" Label="return ((CSharpSyntaxNode)node).Accept(this); 707784" />
<Node Id="10077:[33290..34322).1" Label="if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    } 707785" />
<Node Id="10077:[33414..33451).1" Label="resultBinder.ContainingMemberOrLambda 707786" />
<Node Id="10346:[7369..7588).1" Label="get
            {
                var merged = _container as MergedNamespaceSymbol;
                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;
            } 707787" />
<Node Id="10346:[7405..7454).1" Label="var merged = _container as MergedNamespaceSymbol; 707788" />
<Node Id="10346:[7472..7573).1" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 707789" />
<Node Id="10346:[7472..7573).2" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 707790" />
<Node Id="10346:[7479..7503).1" Label="((object)merged != null) 707791" />
<Node Id="10077:[33373..33481).1" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 707792" />
<Node Id="10077:[33373..33481).2" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 707793" />
<Node Id="10077:[33509..34299).1" Label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        } 707794" />
<Node Id="10077:[33969..34032).1" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 707795" />
<Node Id="10077:[33969..34032).2" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 707796" />
<Node Id="10077:[33969..34032).3" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 707797" />
<Node Id="10077:[33984..34031).1" Label="new InContainerBinder(typeSymbol, resultBinder) 707798" />
<Node Id="10346:[2571..2602).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 707799" />
<Node Id="10346:[2604..2615).1" Label="param InContainerBinder(Binder next) 707800" />
<Node Id="10346:[2617..2639).1" Label="param InContainerBinder(Imports imports = null) 707801" />
<Node Id="10346:[2544..2854).1" Label="param InContainerBinder(this) 707802" />
<Node Id="10346:[2661..2665).1" Label="next 707803" />
<Node Id="10346:[2544..2854).2" Label="param InContainerBinder(this) 707804" />
<Node Id="10286:[1247..1258).2" Label="param Binder(Binder next) 707805" />
<Node Id="10286:[1231..1520).2" Label="param Binder(this) 707806" />
<Node Id="10286:[1260..1291).2" Label="param Binder(Conversions? conversions = null) 707807" />
<Node Id="10286:[1317..1350).5" Label="RoslynDebug.Assert(next != null); 707808" />
<Node Id="10286:[1317..1350).6" Label="RoslynDebug.Assert(next != null); 707809" />
<Node Id="10286:[1390..1400).2" Label="this.Flags 707810" />
<Node Id="10286:[1428..1444).2" Label="this.Compilation 707811" />
<Node Id="10286:[1478..1494).2" Label="_lazyConversions 707812" />
<Node Id="10346:[858..868).2" Label="_container 707813" />
<Node Id="10346:[932..947).2" Label="_computeImports 707814" />
<Node Id="10346:[974..986).2" Label="_lazyImports 707815" />
<Node Id="10346:[1017..1033).2" Label="_lazyImportChain 707816" />
<Node Id="10346:[1074..1100).2" Label="_lazyQuickAttributeChecker 707817" />
<Node Id="10346:[2691..2750).1" Label="Debug.Assert((object)container != null || imports != null); 707818" />
<Node Id="10346:[2691..2750).2" Label="Debug.Assert((object)container != null || imports != null); 707819" />
<Node Id="10346:[2766..2776).1" Label="_container 707820" />
<Node Id="10346:[2803..2843).1" Label="_lazyImports = imports ?? Imports.Empty; 707821" />
<Node Id="10346:[2803..2843).2" Label="_lazyImports = imports ?? Imports.Empty; 707822" />
<Node Id="10346:[2803..2815).1" Label="_lazyImports 707823" />
<Node Id="10077:[34064..34272).1" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 707824" />
<Node Id="10077:[34064..34272).2" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 707825" />
<Node Id="10077:[34346..34420).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 707826" />
<Node Id="10077:[34361..34419).1" Label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 707827" />
<Node Id="10307:[3496..3521).1" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 707828" />
<Node Id="10307:[3452..3756).1" Label="param WithUnsafeRegionIfNecessary(this) 707829" />
<Node Id="10307:[3547..3745).1" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 707830" />
<Node Id="10307:[3547..3745).2" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 707831" />
<Node Id="10307:[3555..3600).1" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 707832" />
<Node Id="10298:[471..492).6" Label="param Includes(this BinderFlags self) 707833" />
<Node Id="10298:[494..511).6" Label="param Includes(BinderFlags other) 707834" />
<Node Id="10307:[3547..3745).4" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 707835" />
<Node Id="10307:[3547..3745).7" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 707836" />
<Node Id="10307:[3554..3645).1" Label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 707837" />
<Node Id="10077:[34444..34455).1" Label="binderCache 707838" />
<Node Id="10077:[2110..2139).4" Label="return _factory._binderCache; 707839" />
<Node Id="10077:[34444..34482).1" Label="binderCache.TryAdd(key, resultBinder); 707840" />
<Node Id="10077:[34444..34482).2" Label="binderCache.TryAdd(key, resultBinder); 707841" />
<Node Id="10077:[34444..34482).3" Label="binderCache.TryAdd(key, resultBinder); 707842" />
<Node Id="10077:[34444..34482).4" Label="binderCache.TryAdd(key, resultBinder); 707843" />
<Node Id="10077:[34444..34482).5" Label="binderCache.TryAdd(key, resultBinder); 707844" />
<Node Id="10077:[34521..34541).1" Label="return resultBinder; 707845" />
<Node Id="10077:[2926..2971).12" Label="return ((CSharpSyntaxNode)node).Accept(this); 707846" />
<Node Id="10076:[5678..5718).1" Label="_binderFactoryVisitorPool.Free(visitor); 707847" />
<Node Id="10076:[5678..5718).2" Label="_binderFactoryVisitorPool.Free(visitor); 707848" />
<Node Id="10076:[5734..5748).1" Label="return result; 707849" />
<Node Id="25002:[4395..4432).22" Label="var diagnostics = c.GetDiagnostics(); 707850" />
<Node Id="10076:[5223..5250).6" Label="Debug.Assert(node != null); 707851" />
<Node Id="10076:[5277..5448).6" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 707852" />
<Node Id="10076:[5391..5433).1" Label="container.AssertMemberExposure(memberOpt); 707853" />
<Node Id="10076:[5391..5433).2" Label="container.AssertMemberExposure(memberOpt); 707854" />
<Node Id="10077:[4637..4671).1" Label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 707855" />
<Node Id="10077:[4591..7075).1" Label="param VisitMethodDeclaration(this) 707856" />
<Node Id="10077:[4705..4866).1" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 707857" />
<Node Id="10077:[4705..4866).2" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 707858" />
<Node Id="10077:[4705..4866).3" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 707859" />
<Node Id="10077:[4886..4902).1" Label="NodeUsage usage; 707860" />
<Node Id="10077:[4920..5555).1" Label="if (LookupPosition.IsInBody(_position, methodDecl))
                {
                    usage = NodeUsage.MethodBody;
                }
                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 707861" />
<Node Id="10077:[4920..5555).2" Label="if (LookupPosition.IsInBody(_position, methodDecl))
                {
                    usage = NodeUsage.MethodBody;
                }
                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 707862" />
<Node Id="10077:[5083..5555).1" Label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 707863" />
<Node Id="10077:[5083..5555).2" Label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 707864" />
<Node Id="10077:[5511..5536).1" Label="usage = NodeUsage.Normal; 707865" />
<Node Id="10077:[5575..5625).1" Label="var key = CreateBinderCacheKey(methodDecl, usage); 707866" />
<Node Id="10077:[5575..5625).2" Label="var key = CreateBinderCacheKey(methodDecl, usage); 707867" />
<Node Id="10077:[5585..5624).1" Label="CreateBinderCacheKey(methodDecl, usage) 707868" />
<Node Id="10077:[44159..44180).3" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 707869" />
<Node Id="10077:[44182..44197).3" Label="param CreateBinderCacheKey(NodeUsage usage) 707870" />
<Node Id="10077:[44231..44317).17" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 707871" />
<Node Id="10077:[44231..44317).19" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 707872" />
<Node Id="10077:[44335..44374).11" Label="return new BinderCacheKey(node, usage); 707873" />
<Node Id="10077:[44342..44373).3" Label="new BinderCacheKey(node, usage) 707874" />
<Node Id="10076:[853..1034).3" Label="param BinderCacheKey(this) 707875" />
<Node Id="10077:[5575..5625).3" Label="var key = CreateBinderCacheKey(methodDecl, usage); 707876" />
<Node Id="10077:[5645..5665).1" Label="Binder resultBinder; 707877" />
<Node Id="10077:[5688..5699).1" Label="binderCache 707878" />
<Node Id="10077:[2066..2158).5" Label="get
                {
                    return _factory._binderCache;
                } 707879" />
<Node Id="10077:[2110..2139).5" Label="return _factory._binderCache; 707880" />
<Node Id="10077:[5683..7020).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 707881" />
<Node Id="10077:[5683..7020).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 707882" />
<Node Id="10077:[5683..7020).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 707883" />
<Node Id="10077:[5683..7020).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 707884" />
<Node Id="10077:[5683..7020).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 707885" />
<Node Id="10077:[5776..5836).1" Label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 707886" />
<Node Id="10077:[5858..6188).1" Label="if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    } 707887" />
<Node Id="10077:[5858..6188).2" Label="if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    } 707888" />
<Node Id="10077:[5930..6023).1" Label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 707889" />
<Node Id="10077:[5930..6023).2" Label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 707890" />
<Node Id="10077:[5945..6022).1" Label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 707891" />
<Node Id="10077:[32474..32502).2" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 707892" />
<Node Id="10077:[32504..32523).2" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 707893" />
<Node Id="10077:[44231..44317).25" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 707894" />
<Node Id="10077:[44231..44317).27" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 707895" />
<Node Id="10077:[44954..44972).2" Label="SyntaxToken token; 707896" />
<Node Id="10077:[44966..44971).34" Label="token 707897" />
<Node Id="10077:[39421..39431).2" Label="syntaxTree 707898" />
<Node Id="10077:[1641..1732).2" Label="get
                {
                    return _factory._syntaxTree;
                } 707899" />
<Node Id="10077:[1685..1713).2" Label="return _factory._syntaxTree; 707900" />
<Node Id="10077:[39398..39590).7" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 707901" />
<Node Id="10077:[39398..39590).8" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 707902" />
<Node Id="10077:[44231..44317).33" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 707903" />
<Node Id="10286:[1317..1350).9" Label="RoslynDebug.Assert(next != null); 707904" />
<Node Id="10346:[858..868).3" Label="_container 707905" />
<Node Id="10346:[1572..1612).5" Label="Debug.Assert((object)container != null); 707906" />
<Node Id="10346:[1626..1666).5" Label="Debug.Assert(declarationSyntax != null); 707907" />
<Node Id="10286:[1317..1350).13" Label="RoslynDebug.Assert(next != null); 707908" />
<Node Id="10346:[858..868).4" Label="_container 707909" />
<Node Id="10346:[2691..2750).6" Label="Debug.Assert((object)container != null || imports != null); 707910" />
<Node Id="10077:[34064..34272).4" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 707911" />
<Node Id="10077:[6212..6251).1" Label="SourceMemberMethodSymbol method = null; 707912" />
<Node Id="10077:[6275..6566).1" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 707913" />
<Node Id="10077:[6590..6839).1" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 707914" />
<Node Id="10077:[6863..6941).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 707915" />
<Node Id="10077:[6878..6940).1" Label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 707916" />
<Node Id="10307:[3496..3521).3" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 707917" />
<Node Id="10307:[3452..3756).3" Label="param WithUnsafeRegionIfNecessary(this) 707918" />
<Node Id="10077:[6963..6974).1" Label="binderCache 707919" />
<Node Id="10077:[2110..2139).10" Label="return _factory._binderCache; 707920" />
<Node Id="10077:[6963..7001).1" Label="binderCache.TryAdd(key, resultBinder); 707921" />
<Node Id="10077:[6963..7001).2" Label="binderCache.TryAdd(key, resultBinder); 707922" />
<Node Id="10077:[6963..7001).3" Label="binderCache.TryAdd(key, resultBinder); 707923" />
<Node Id="10077:[6963..7001).5" Label="binderCache.TryAdd(key, resultBinder); 707924" />
<Node Id="10077:[7040..7060).1" Label="return resultBinder; 707925" />
<Node Id="10077:[2926..2971).26" Label="return ((CSharpSyntaxNode)node).Accept(this); 707926" />
<Node Id="10307:[3228..3245).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 707927" />
<Node Id="10307:[3247..3264).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 707928" />
<Node Id="10307:[3165..3440).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 707929" />
<Node Id="10307:[3290..3331).1" Label="Debug.Assert((object)containing != null); 707930" />
<Node Id="10307:[3290..3331).2" Label="Debug.Assert((object)containing != null); 707931" />
<Node Id="10307:[3345..3429).1" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 707932" />
<Node Id="10307:[3345..3429).2" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 707933" />
<Node Id="10307:[3345..3429).4" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 707934" />
<Node Id="10307:[3345..3429).5" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 707935" />
<Node Id="10307:[3352..3428).1" Label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 707936" />
<Node Id="10307:[1072..1083).1" Label="param BinderWithContainingMemberOrLambda(Binder next) 707937" />
<Node Id="10307:[1085..1102).1" Label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 707938" />
<Node Id="10307:[1104..1135).1" Label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 707939" />
<Node Id="10307:[1028..1341).1" Label="param BinderWithContainingMemberOrLambda(this) 707940" />
<Node Id="10307:[1161..1165).1" Label="next 707941" />
<Node Id="10307:[1167..1172).1" Label="flags 707942" />
<Node Id="10307:[1028..1341).2" Label="param BinderWithContainingMemberOrLambda(this) 707943" />
<Node Id="10286:[1549..1560).1" Label="param Binder(Binder next) 707944" />
<Node Id="10286:[1562..1579).1" Label="param Binder(BinderFlags flags) 707945" />
<Node Id="10286:[1532..2083).1" Label="param Binder(this) 707946" />
<Node Id="10286:[726..773).7" Label="internal CSharpCompilation Compilation { get; } 707947" />
<Node Id="10286:[815..820).7" Label="Flags 707948" />
<Node Id="10286:[2975..3015).7" Label="protected internal Binder? Next { get; } 707949" />
<Node Id="10286:[17802..17818).7" Label="_lazyConversions 707950" />
<Node Id="10286:[18200..18223).7" Label="_lazyOverloadResolution 707951" />
<Node Id="10286:[1605..1638).1" Label="RoslynDebug.Assert(next != null); 707952" />
<Node Id="10286:[1605..1638).2" Label="RoslynDebug.Assert(next != null); 707953" />
<Node Id="10286:[1688..1781).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 707954" />
<Node Id="10286:[1688..1781).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 707955" />
<Node Id="10286:[1708..1779).1" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 707956" />
<Node Id="10298:[471..492).9" Label="param Includes(this BinderFlags self) 707957" />
<Node Id="10298:[494..511).9" Label="param Includes(BinderFlags other) 707958" />
<Node Id="10286:[1820..1963).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 707959" />
<Node Id="10286:[1820..1963).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 707960" />
<Node Id="10286:[1840..1888).1" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 707961" />
<Node Id="10298:[471..492).10" Label="param Includes(this BinderFlags self) 707962" />
<Node Id="10298:[494..511).10" Label="param Includes(BinderFlags other) 707963" />
<Node Id="10286:[1977..1981).1" Label="Next 707964" />
<Node Id="10286:[2003..2013).1" Label="this.Flags 707965" />
<Node Id="10286:[2036..2052).1" Label="this.Compilation 707966" />
<Node Id="10307:[683..708).1" Label="_containingMemberOrLambda 707967" />
<Node Id="10307:[1206..1253).1" Label="Debug.Assert(containingMemberOrLambda != null); 707968" />
<Node Id="10307:[1206..1253).2" Label="Debug.Assert(containingMemberOrLambda != null); 707969" />
<Node Id="10307:[1273..1298).1" Label="_containingMemberOrLambda 707970" />
<Node Id="25002:[4395..4432).31" Label="var diagnostics = c.GetDiagnostics(); 707971" />
<Node Id="10313:[1230..1280).1" Label="param ValidateParameterNameConflicts(ImmutableArray$TypeParameterSymbol$ typeParameters) 707972" />
<Node Id="10313:[1295..1337).1" Label="param ValidateParameterNameConflicts(ImmutableArray$ParameterSymbol$ parameters) 707973" />
<Node Id="10313:[1352..1376).1" Label="param ValidateParameterNameConflicts(bool allowShadowingNames) 707974" />
<Node Id="10313:[1391..1416).1" Label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 707975" />
<Node Id="10313:[1171..3563).1" Label="param ValidateParameterNameConflicts(this) 707976" />
<Node Id="10313:[1442..1480).1" Label="PooledHashSet$string$? tpNames = null; 707977" />
<Node Id="10313:[1494..2257).1" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 707978" />
<Node Id="10313:[2273..2310).1" Label="PooledHashSet$string$? pNames = null; 707979" />
<Node Id="10313:[2324..3491).1" Label="if (!parameters.IsDefaultOrEmpty)
            {
                pNames = PooledHashSet$string$.GetInstance();
                foreach (var p in parameters)
                {
                    var name = p.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    }

                    if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    }
                }
            } 707980" />
<Node Id="10313:[3507..3523).1" Label="tpNames?.Free(); 707981" />
<Node Id="10313:[3537..3552).1" Label="pNames?.Free(); 707982" />
<Node Id="10319:[13685..13708).1" Label="param BindType(ExpressionSyntax syntax) 707983" />
<Node Id="10319:[13710..13735).1" Label="param BindType(DiagnosticBag diagnostics) 707984" />
<Node Id="10319:[13737..13783).1" Label="param BindType(ConsList$TypeSymbol$ basesBeingResolved = null) 707985" />
<Node Id="10319:[13785..13824).1" Label="param BindType(bool suppressUseSiteDiagnostics = false) 707986" />
<Node Id="10319:[13647..14061).1" Label="param BindType(this) 707987" />
<Node Id="10319:[13850..13948).1" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 707988" />
<Node Id="10319:[13850..13948).2" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 707989" />
<Node Id="10319:[13850..13948).3" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 707990" />
<Node Id="10319:[13850..13948).4" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 707991" />
<Node Id="10319:[13863..13947).1" Label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 707992" />
<Node Id="10319:[14931..14954).1" Label="param BindTypeOrAlias(ExpressionSyntax syntax) 707993" />
<Node Id="10319:[14956..14981).1" Label="param BindTypeOrAlias(DiagnosticBag diagnostics) 707994" />
<Node Id="10319:[14983..15029).1" Label="param BindTypeOrAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 707995" />
<Node Id="10319:[15031..15070).1" Label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 707996" />
<Node Id="10319:[14862..16302).1" Label="param BindTypeOrAlias(this) 707997" />
<Node Id="10319:[15096..15130).1" Label="Debug.Assert(diagnostics != null); 707998" />
<Node Id="10319:[15096..15130).2" Label="Debug.Assert(diagnostics != null); 707999" />
<Node Id="10319:[15146..15291).1" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708000" />
<Node Id="10319:[15146..15291).2" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708001" />
<Node Id="10319:[15146..15291).3" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708002" />
<Node Id="10319:[15146..15291).4" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708003" />
<Node Id="10319:[15146..15291).5" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708004" />
<Node Id="10319:[15146..15291).6" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 708005" />
<Node Id="10319:[15159..15290).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 708006" />
<Node Id="10319:[20002..20025).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 708007" />
<Node Id="10319:[20027..20052).1" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 708008" />
<Node Id="10319:[20054..20093).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 708009" />
<Node Id="10319:[20095..20126).1" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 708010" />
<Node Id="10319:[19916..30085).1" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 708011" />
<Node Id="10319:[20152..24647).1" Label="switch (syntax.Kind())
            {
                case SyntaxKind.NullableType:
                    return bindNullable(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.PredefinedType:
                    return bindPredefined(syntax, diagnostics);

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);

                case SyntaxKind.AliasQualifiedName:
                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);

                case SyntaxKind.QualifiedName:
                    {
                        var node = (QualifiedNameSyntax)syntax;
                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.SimpleMemberAccessExpression:
                    {
                        var node = (MemberAccessExpressionSyntax)syntax;
                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.ArrayType:
                    {
                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);
                    }

                case SyntaxKind.PointerType:
                    return bindPointer(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.FunctionPointerType:
                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;
                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)
                    {
                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;
                        var asterisk = functionPointerTypeSyntax.AsteriskToken;
                        RoslynDebug.Assert(@delegate.SyntaxTree is object);
                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));
                    }

                    return TypeWithAnnotations.Create(
                        FunctionPointerTypeSymbol.CreateFromSource(
                            functionPointerTypeSyntax,
                            this,
                            diagnostics,
                            basesBeingResolved,
                            suppressUseSiteDiagnostics));

                case SyntaxKind.OmittedTypeArgument:
                    {
                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);
                    }

                case SyntaxKind.TupleType:
                    {
                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;
                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));
                    }

                case SyntaxKind.RefType:
                    {
                        // ref needs to be handled by the caller
                        var refTypeSyntax = (RefTypeSyntax)syntax;
                        var refToken = refTypeSyntax.RefKeyword;
                        if (!syntax.HasErrors)
                        {
                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());
                        }

                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                default:
                    {
                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind
                        // is attempted to be bound as a type pattern.
                        return createErrorType(syntax);
                    }
            } 708012" />
<Node Id="10319:[20392..20435).1" Label="return bindPredefined(syntax, diagnostics); 708013" />
<Node Id="10319:[20392..20435).2" Label="return bindPredefined(syntax, diagnostics); 708014" />
<Node Id="10319:[20399..20434).1" Label="bindPredefined(syntax, diagnostics) 708015" />
<Node Id="10319:[27647..28051).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 708016" />
<Node Id="10319:[27647..28051).2" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 708017" />
<Node Id="10319:[27647..28051).3" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 708018" />
<Node Id="10319:[27790..27840).1" Label="var predefinedType = (PredefinedTypeSyntax)syntax; 708019" />
<Node Id="10319:[27858..27923).1" Label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 708020" />
<Node Id="10319:[27858..27923).2" Label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 708021" />
<Node Id="10319:[27869..27922).1" Label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 708022" />
<Node Id="10319:[39111..39136).1" Label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 708023" />
<Node Id="10319:[39138..39163).1" Label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 708024" />
<Node Id="10319:[39062..39279).1" Label="param BindPredefinedTypeSymbol(this) 708025" />
<Node Id="10319:[39189..39268).1" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 708026" />
<Node Id="10319:[39189..39268).6" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 708027" />
<Node Id="10319:[39189..39268).7" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 708028" />
<Node Id="10319:[39196..39267).1" Label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 708029" />
<Node Id="10319:[73460..73478).1" Label="param GetSpecialType(SpecialType typeId) 708030" />
<Node Id="10319:[73480..73505).1" Label="param GetSpecialType(DiagnosticBag diagnostics) 708031" />
<Node Id="10319:[73507..73522).1" Label="param GetSpecialType(SyntaxNode node) 708032" />
<Node Id="10319:[73420..73626).1" Label="param GetSpecialType(this) 708033" />
<Node Id="10319:[73548..73615).1" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 708034" />
<Node Id="10319:[73548..73615).2" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 708035" />
<Node Id="10319:[73548..73615).3" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 708036" />
<Node Id="10319:[73548..73615).4" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 708037" />
<Node Id="10319:[73555..73614).1" Label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 708038" />
<Node Id="10319:[73685..73714).1" Label="param GetSpecialType(CSharpCompilation compilation) 708039" />
<Node Id="10319:[73716..73734).1" Label="param GetSpecialType(SpecialType typeId) 708040" />
<Node Id="10319:[73736..73751).1" Label="param GetSpecialType(SyntaxNode node) 708041" />
<Node Id="10319:[73753..73778).1" Label="param GetSpecialType(DiagnosticBag diagnostics) 708042" />
<Node Id="10319:[73804..73868).1" Label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 708043" />
<Node Id="10319:[73804..73868).2" Label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 708044" />
<Node Id="10319:[73882..73975).1" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 708045" />
<Node Id="10319:[73882..73975).2" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 708046" />
<Node Id="10319:[73989..74045).1" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 708047" />
<Node Id="10319:[73989..74045).2" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 708048" />
<Node Id="10319:[73989..74045).3" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 708049" />
<Node Id="10319:[73989..74044).1" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 708050" />
<Node Id="10319:[76345..76358).1" Label="param ReportUseSiteDiagnostics(Symbol symbol) 708051" />
<Node Id="10319:[76360..76385).1" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 708052" />
<Node Id="10319:[76387..76402).1" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 708053" />
<Node Id="10319:[76428..76480).1" Label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 708054" />
<Node Id="10319:[76494..76582).1" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 708055" />
<Node Id="10319:[76494..76582).2" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 708056" />
<Node Id="10319:[74059..74077).1" Label="return typeSymbol; 708057" />
<Node Id="10319:[27941..28036).1" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 708058" />
<Node Id="10319:[27975..28028).1" Label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 708059" />
<Node Id="10286:[10010..10027).1" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 708060" />
<Node Id="10286:[9966..10197).1" Label="param AreNullableAnnotationsEnabled(this) 708061" />
<Node Id="10286:[10053..10100).1" Label="RoslynDebug.Assert(token.SyntaxTree is object); 708062" />
<Node Id="10286:[10114..10186).1" Label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 708063" />
<Node Id="10286:[10121..10185).1" Label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 708064" />
<Node Id="10286:[9073..9094).1" Label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 708065" />
<Node Id="10286:[9096..9108).1" Label="param AreNullableAnnotationsEnabled(int position) 708066" />
<Node Id="10286:[9029..9954).1" Label="param AreNullableAnnotationsEnabled(this) 708067" />
<Node Id="10286:[9134..9189).1" Label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 708068" />
<Node Id="10286:[9203..9282).1" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 708069" />
<Node Id="10286:[9203..9282).2" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 708070" />
<Node Id="10286:[9305..9942).1" Label="context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            } 708071" />
<Node Id="10286:[9298..9943).1" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 708072" />
<Node Id="10286:[9298..9943).2" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 708073" />
<Node Id="10286:[9798..9837).1" Label="AreNullableAnnotationsGloballyEnabled() 708074" />
<Node Id="10286:[10465..10663).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 708075" />
<Node Id="10286:[10551..10586).1" Label="RoslynDebug.Assert(Next is object); 708076" />
<Node Id="10286:[10607..10651).1" Label="Next.AreNullableAnnotationsGloballyEnabled() 708077" />
<Node Id="10286:[10465..10663).2" Label="param AreNullableAnnotationsGloballyEnabled(this) 708078" />
<Node Id="10325:[4462..4594).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 708079" />
<Node Id="10325:[4556..4582).1" Label="GetGlobalAnnotationState() 708080" />
<Node Id="10286:[10675..11259).1" Label="param GetGlobalAnnotationState(this) 708081" />
<Node Id="10286:[10741..11248).1" Label="switch (Compilation.Options.NullableContextOptions)
            {
                case NullableContextOptions.Enable:
                case NullableContextOptions.Annotations:
                    return true;

                case NullableContextOptions.Disable:
                case NullableContextOptions.Warnings:
                    return false;

                default:
                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);
            } 708082" />
<Node Id="10286:[11085..11098).1" Label="return false; 708083" />
<Node Id="10325:[4549..4583).1" Label="return GetGlobalAnnotationState(); 708084" />
<Node Id="10286:[10600..10652).1" Label="return Next.AreNullableAnnotationsGloballyEnabled(); 708085" />
<Node Id="10319:[27941..28036).4" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 708086" />
<Node Id="10319:[28030..28034).1" Label="type 708087" />
<Node Id="10287:[2888..2927).1" Label="param operator(TypeWithAnnotations typeWithAnnotations) 708088" />
<Node Id="10287:[2961..3037).1" Label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 708089" />
<Node Id="10287:[2961..3037).2" Label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 708090" />
<Node Id="10287:[2968..3036).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 708091" />
<Node Id="10287:[718..757).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 708092" />
<Node Id="10287:[666..1076).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 708093" />
<Node Id="10287:[791..833).1" Label="Debug.Assert(typeWithAnnotations.HasType); 708094" />
<Node Id="10287:[851..871).1" Label="_typeWithAnnotations 708095" />
<Node Id="10287:[912..927).1" Label="_symbol = null; 708096" />
<Node Id="10287:[912..919).1" Label="_symbol 708097" />
<Node Id="10287:[945..972).1" Label="_isNullableEnabled = false; 708098" />
<Node Id="10287:[945..963).1" Label="_isNullableEnabled 708099" />
<Node Id="10319:[27941..28036).5" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 708100" />
<Node Id="10319:[27941..28036).7" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 708101" />
<Node Id="10319:[27941..28036).9" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 708102" />
<Node Id="10319:[15383..15396).1" Label="symbol.IsType 708103" />
<Node Id="10287:[1609..1643).1" Label="=$ !_typeWithAnnotations.IsDefault 708104" />
<Node Id="10287:[1612..1643).1" Label="!_typeWithAnnotations.IsDefault 708105" />
<Node Id="10319:[15379..15933).1" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 708106" />
<Node Id="10319:[15548..15561).1" Label="symbol.IsType 708107" />
<Node Id="10319:[15544..15884).1" Label="if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                } 708108" />
<Node Id="10319:[15783..15809).1" Label="symbol.TypeWithAnnotations 708109" />
<Node Id="10287:[1474..1497).1" Label="=$ _typeWithAnnotations 708110" />
<Node Id="10287:[1477..1497).1" Label="_typeWithAnnotations 708111" />
<Node Id="10319:[15783..15865).1" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708112" />
<Node Id="10319:[15783..15865).2" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708113" />
<Node Id="10319:[15783..15865).3" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708114" />
<Node Id="10319:[15783..15865).4" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708115" />
<Node Id="10319:[15783..15865).5" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708116" />
<Node Id="10319:[15783..15865).6" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 708117" />
<Node Id="10286:[21504..21529).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 708118" />
<Node Id="10286:[21531..21544).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 708119" />
<Node Id="10286:[21546..21561).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 708120" />
<Node Id="10286:[21563..21583).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 708121" />
<Node Id="10286:[21462..21711).1" Label="param ReportDiagnosticsIfObsolete(this) 708122" />
<Node Id="10286:[21609..21700).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 708123" />
<Node Id="10286:[21609..21700).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 708124" />
<Node Id="10286:[21609..21700).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 708125" />
<Node Id="10286:[21609..21700).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 708126" />
<Node Id="10286:[21609..21699).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 708127" />
<Node Id="10286:[22044..22069).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 708128" />
<Node Id="10286:[22071..22084).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 708129" />
<Node Id="10286:[22086..22108).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 708130" />
<Node Id="10286:[22110..22130).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 708131" />
<Node Id="10286:[22002..22611).1" Label="param ReportDiagnosticsIfObsolete(this) 708132" />
<Node Id="10286:[22156..22600).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Event:
                case SymbolKind.Property:
                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);
                    break;
            } 708133" />
<Node Id="10286:[22421..22557).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708134" />
<Node Id="10286:[22421..22557).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708135" />
<Node Id="10286:[22421..22557).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708136" />
<Node Id="10286:[22421..22557).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708137" />
<Node Id="10286:[22493..22522).1" Label="this.ContainingMemberOrLambda 708138" />
<Node Id="10307:[1439..1480).1" Label="get { return _containingMemberOrLambda; } 708139" />
<Node Id="10307:[1445..1478).1" Label="return _containingMemberOrLambda; 708140" />
<Node Id="10286:[22421..22557).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708141" />
<Node Id="10286:[22524..22543).1" Label="this.ContainingType 708142" />
<Node Id="10286:[15519..15926).1" Label="get
            {
                var member = this.ContainingMemberOrLambda;
                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);
                return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                };
            } 708143" />
<Node Id="10286:[15568..15597).1" Label="this.ContainingMemberOrLambda 708144" />
<Node Id="10307:[1439..1480).2" Label="get { return _containingMemberOrLambda; } 708145" />
<Node Id="10307:[1445..1478).2" Label="return _containingMemberOrLambda; 708146" />
<Node Id="10286:[15555..15598).1" Label="var member = this.ContainingMemberOrLambda; 708147" />
<Node Id="10286:[15616..15690).1" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 708148" />
<Node Id="10286:[15616..15690).2" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 708149" />
<Node Id="10286:[15715..15910).1" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 708150" />
<Node Id="10286:[15708..15911).1" Label="return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                }; 708151" />
<Node Id="10286:[22421..22557).7" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708152" />
<Node Id="10286:[22421..22557).9" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708153" />
<Node Id="10286:[22421..22556).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 708154" />
<Node Id="10286:[23056..23081).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 708155" />
<Node Id="10286:[23096..23109).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 708156" />
<Node Id="10286:[23124..23146).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 708157" />
<Node Id="10286:[23161..23181).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 708158" />
<Node Id="10286:[23196..23220).1" Label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 708159" />
<Node Id="10286:[23235..23266).1" Label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 708160" />
<Node Id="10286:[23281..23301).1" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 708161" />
<Node Id="10286:[23327..23364).1" Label="RoslynDebug.Assert(symbol is object); 708162" />
<Node Id="10286:[23380..23684).1" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 708163" />
<Node Id="10286:[23893..24026).1" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 708164" />
<Node Id="10286:[24450..24529).1" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 708165" />
<Node Id="10286:[24450..24529).2" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 708166" />
<Node Id="10286:[24450..24529).3" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 708167" />
<Node Id="10286:[24545..24641).1" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 708168" />
<Node Id="10286:[24655..25349).1" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 708169" />
<Node Id="10286:[25365..25492).1" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 708170" />
<Node Id="10286:[25365..25492).2" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 708171" />
<Node Id="10286:[25365..25492).3" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 708172" />
<Node Id="10286:[25365..25492).4" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 708173" />
<Node Id="10286:[25365..25492).5" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 708174" />
<Node Id="10286:[25386..25491).1" Label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 708175" />
<Node Id="10286:[26910..26935).1" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 708176" />
<Node Id="10286:[26937..26950).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 708177" />
<Node Id="10286:[26952..26974).1" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 708178" />
<Node Id="10286:[26976..27000).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 708179" />
<Node Id="10286:[27002..27022).1" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 708180" />
<Node Id="10286:[27048..27088).1" Label="RoslynDebug.Assert(diagnostics != null); 708181" />
<Node Id="10286:[27048..27088).2" Label="RoslynDebug.Assert(diagnostics != null); 708182" />
<Node Id="10286:[27104..27192).1" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 708183" />
<Node Id="10286:[27104..27192).2" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 708184" />
<Node Id="10286:[27104..27192).3" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 708185" />
<Node Id="10286:[27104..27192).5" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 708186" />
<Node Id="10286:[27208..27236).1" Label="DiagnosticInfo? info = null; 708187" />
<Node Id="10286:[27250..27722).1" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 708188" />
<Node Id="10286:[27738..27845).1" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 708189" />
<Node Id="10286:[27738..27845).2" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 708190" />
<Node Id="10286:[27861..27873).1" Label="return kind; 708191" />
<Node Id="10286:[26281..26812).1" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 708192" />
<Node Id="10286:[26450..26769).1" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 708193" />
<Node Id="10286:[22421..22557).10" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 708194" />
<Node Id="10286:[21609..21700).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 708195" />
<Node Id="10319:[15904..15918).1" Label="return symbol; 708196" />
<Node Id="10319:[13962..14050).1" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 708197" />
<Node Id="10319:[13962..14050).2" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 708198" />
<Node Id="10319:[13962..14050).3" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 708199" />
<Node Id="10319:[13962..14050).4" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 708200" />
<Node Id="10319:[13969..14029).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 708201" />
<Node Id="10319:[51762..51815).1" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 708202" />
<Node Id="10319:[51817..51842).1" Label="param UnwrapAlias(DiagnosticBag diagnostics) 708203" />
<Node Id="10319:[51844..51861).1" Label="param UnwrapAlias(SyntaxNode syntax) 708204" />
<Node Id="10319:[51863..51909).1" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 708205" />
<Node Id="10319:[51698..52285).1" Label="param UnwrapAlias(this) 708206" />
<Node Id="10319:[51939..51953).1" Label="symbol.IsAlias 708207" />
<Node Id="10287:[1680..1716).1" Label="=$ _symbol?.Kind == SymbolKind.Alias 708208" />
<Node Id="10287:[1683..1690).1" Label="_symbol 708209" />
<Node Id="10287:[1683..1716).1" Label="_symbol?.Kind == SymbolKind.Alias 708210" />
<Node Id="10319:[51935..52244).1" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 708211" />
<Node Id="10319:[52260..52274).1" Label="return symbol; 708212" />
<Node Id="10319:[13969..14049).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 708213" />
<Node Id="10287:[1474..1497).2" Label="=$ _typeWithAnnotations 708214" />
<Node Id="10287:[1477..1497).2" Label="_typeWithAnnotations 708215" />
<Node Id="25002:[4395..4432).35" Label="var diagnostics = c.GetDiagnostics(); 708216" />
<Node Id="10845:[522..547).1" Label="param TypeConversions(AssemblySymbol corLibrary) 708217" />
<Node Id="10845:[549..580).1" Label="param TypeConversions(bool includeNullability = false) 708218" />
<Node Id="10845:[499..728).1" Label="param TypeConversions(this) 708219" />
<Node Id="10845:[602..612).1" Label="corLibrary 708220" />
<Node Id="10845:[637..638).1" Label="0 708221" />
<Node Id="10845:[660..678).1" Label="includeNullability 708222" />
<Node Id="10845:[701..705).1" Label="null 708223" />
<Node Id="10845:[499..728).2" Label="param TypeConversions(this) 708224" />
<Node Id="10845:[764..789).1" Label="param TypeConversions(AssemblySymbol corLibrary) 708225" />
<Node Id="10845:[791..816).1" Label="param TypeConversions(int currentRecursionDepth) 708226" />
<Node Id="10845:[818..841).1" Label="param TypeConversions(bool includeNullability) 708227" />
<Node Id="10845:[843..878).1" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 708228" />
<Node Id="10845:[740..997).1" Label="param TypeConversions(this) 708229" />
<Node Id="10843:[685..687).1" Label="50 708230" />
<Node Id="10843:[661..687).1" Label="MaximumRecursionDepth = 50 708231" />
<Node Id="10843:[82075..82080).1" Label="false 708232" />
<Node Id="10843:[82071..82080).1" Label="F = false 708233" />
<Node Id="10843:[82114..82118).1" Label="true 708234" />
<Node Id="10843:[82110..82118).1" Label="T = true 708235" />
<Node Id="10843:[82447..82485).1" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 708236" />
<Node Id="10843:[82447..82485).2" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 708237" />
<Node Id="10843:[82447..82485).4" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 708238" />
<Node Id="10843:[82519..82557).1" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 708239" />
<Node Id="10843:[82519..82557).2" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 708240" />
<Node Id="10843:[82519..82557).4" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 708241" />
<Node Id="10843:[82591..82629).1" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 708242" />
<Node Id="10843:[82591..82629).2" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 708243" />
<Node Id="10843:[82591..82629).6" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 708244" />
<Node Id="10843:[82663..82701).1" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 708245" />
<Node Id="10843:[82663..82701).2" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 708246" />
<Node Id="10843:[82663..82701).6" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 708247" />
<Node Id="10843:[82735..82773).1" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 708248" />
<Node Id="10843:[82735..82773).2" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 708249" />
<Node Id="10843:[82735..82773).8" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 708250" />
<Node Id="10843:[82807..82845).1" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 708251" />
<Node Id="10843:[82807..82845).2" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 708252" />
<Node Id="10843:[82807..82845).8" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 708253" />
<Node Id="10843:[82879..82917).1" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708254" />
<Node Id="10843:[82879..82917).2" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708255" />
<Node Id="10843:[82879..82917).11" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708256" />
<Node Id="10843:[82951..82989).1" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708257" />
<Node Id="10843:[82951..82989).2" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708258" />
<Node Id="10843:[82951..82989).11" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 708259" />
<Node Id="10843:[83023..83061).1" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 708260" />
<Node Id="10843:[83023..83061).2" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 708261" />
<Node Id="10843:[83023..83061).5" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 708262" />
<Node Id="10843:[83095..83133).1" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 708263" />
<Node Id="10843:[83095..83133).2" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 708264" />
<Node Id="10843:[83095..83133).12" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 708265" />
<Node Id="10843:[83167..83205).1" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 708266" />
<Node Id="10843:[83167..83205).2" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 708267" />
<Node Id="10843:[83239..83277).1" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 708268" />
<Node Id="10843:[83239..83277).2" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 708269" />
<Node Id="10843:[82333..83288).1" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708270" />
<Node Id="10843:[82333..83288).2" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708271" />
<Node Id="10843:[82333..83288).3" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708272" />
<Node Id="10843:[82333..83288).4" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708273" />
<Node Id="10843:[82333..83288).5" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708274" />
<Node Id="10843:[82333..83288).6" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708275" />
<Node Id="10843:[82333..83288).7" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708276" />
<Node Id="10843:[82333..83288).8" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708277" />
<Node Id="10843:[82333..83288).9" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708278" />
<Node Id="10843:[82333..83288).10" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708279" />
<Node Id="10843:[82333..83288).11" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708280" />
<Node Id="10843:[82333..83288).12" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708281" />
<Node Id="10843:[82333..83288).13" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708282" />
<Node Id="10843:[82293..83288).1" Label="s_implicitNumericConversions =
        {
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 708283" />
<Node Id="10843:[83487..83525).1" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 708284" />
<Node Id="10843:[83487..83525).2" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 708285" />
<Node Id="10843:[83487..83525).3" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 708286" />
<Node Id="10843:[83559..83597).1" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 708287" />
<Node Id="10843:[83559..83597).2" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 708288" />
<Node Id="10843:[83559..83597).3" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 708289" />
<Node Id="10843:[83631..83669).1" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 708290" />
<Node Id="10843:[83631..83669).2" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 708291" />
<Node Id="10843:[83631..83669).4" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 708292" />
<Node Id="10843:[83703..83741).1" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 708293" />
<Node Id="10843:[83703..83741).2" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 708294" />
<Node Id="10843:[83703..83741).5" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 708295" />
<Node Id="10843:[83775..83813).1" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 708296" />
<Node Id="10843:[83775..83813).2" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 708297" />
<Node Id="10843:[83775..83813).6" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 708298" />
<Node Id="10843:[83847..83885).1" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 708299" />
<Node Id="10843:[83847..83885).2" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 708300" />
<Node Id="10843:[83847..83885).7" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 708301" />
<Node Id="10843:[83919..83957).1" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 708302" />
<Node Id="10843:[83919..83957).2" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 708303" />
<Node Id="10843:[83919..83957).8" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 708304" />
<Node Id="10843:[83991..84029).1" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 708305" />
<Node Id="10843:[83991..84029).2" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 708306" />
<Node Id="10843:[83991..84029).9" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 708307" />
<Node Id="10843:[84063..84101).1" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 708308" />
<Node Id="10843:[84063..84101).2" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 708309" />
<Node Id="10843:[84063..84101).5" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 708310" />
<Node Id="10843:[84135..84173).1" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 708311" />
<Node Id="10843:[84135..84173).2" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 708312" />
<Node Id="10843:[84135..84173).11" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 708313" />
<Node Id="10843:[84207..84245).1" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 708314" />
<Node Id="10843:[84207..84245).2" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 708315" />
<Node Id="10843:[84207..84245).12" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 708316" />
<Node Id="10843:[84279..84317).1" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 708317" />
<Node Id="10843:[84279..84317).2" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 708318" />
<Node Id="10843:[84279..84317).13" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 708319" />
<Node Id="10843:[83373..84328).1" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708320" />
<Node Id="10843:[83373..84328).2" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708321" />
<Node Id="10843:[83373..84328).3" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708322" />
<Node Id="10843:[83373..84328).4" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708323" />
<Node Id="10843:[83373..84328).5" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708324" />
<Node Id="10843:[83373..84328).6" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708325" />
<Node Id="10843:[83373..84328).7" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708326" />
<Node Id="10843:[83373..84328).8" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708327" />
<Node Id="10843:[83373..84328).9" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708328" />
<Node Id="10843:[83373..84328).10" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708329" />
<Node Id="10843:[83373..84328).11" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708330" />
<Node Id="10843:[83373..84328).12" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708331" />
<Node Id="10843:[83373..84328).13" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708332" />
<Node Id="10843:[83333..84328).1" Label="s_explicitNumericConversions =
        {
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 708333" />
<Node Id="10845:[900..910).1" Label="corLibrary 708334" />
<Node Id="10845:[912..933).1" Label="currentRecursionDepth 708335" />
<Node Id="10845:[935..953).1" Label="includeNullability 708336" />
<Node Id="10845:[955..974).1" Label="otherNullabilityOpt 708337" />
<Node Id="10845:[740..997).2" Label="param TypeConversions(this) 708338" />
<Node Id="10843:[1173..1198).1" Label="param ConversionsBase(AssemblySymbol corLibrary) 708339" />
<Node Id="10843:[1200..1225).1" Label="param ConversionsBase(int currentRecursionDepth) 708340" />
<Node Id="10843:[1227..1250).1" Label="param ConversionsBase(bool includeNullability) 708341" />
<Node Id="10843:[1252..1287).1" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 708342" />
<Node Id="10843:[1147..1833).1" Label="param ConversionsBase(this) 708343" />
<Node Id="10843:[734..744).1" Label="corLibrary 708344" />
<Node Id="10843:[778..799).1" Label="currentRecursionDepth 708345" />
<Node Id="10843:[835..853).1" Label="IncludeNullability 708346" />
<Node Id="10843:[1113..1134).1" Label="_lazyOtherNullability 708347" />
<Node Id="10843:[1313..1354).1" Label="Debug.Assert((object)corLibrary != null); 708348" />
<Node Id="10843:[1313..1354).2" Label="Debug.Assert((object)corLibrary != null); 708349" />
<Node Id="10843:[1368..1474).1" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 708350" />
<Node Id="10843:[1368..1474).2" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 708351" />
<Node Id="10843:[1488..1600).1" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 708352" />
<Node Id="10843:[1488..1600).2" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 708353" />
<Node Id="10843:[1616..1631).1" Label="this.corLibrary 708354" />
<Node Id="10843:[1659..1685).1" Label="this.currentRecursionDepth 708355" />
<Node Id="10843:[1724..1742).1" Label="IncludeNullability 708356" />
<Node Id="10843:[1778..1799).1" Label="_lazyOtherNullability 708357" />
<Node Id="25002:[4395..4432).38" Label="var diagnostics = c.GetDiagnostics(); 708358" />
<Node Id="10076:[5223..5250).10" Label="Debug.Assert(node != null); 708359" />
<Node Id="10077:[2398..2415).1" Label="param DefaultVisit(SyntaxNode parent) 708360" />
<Node Id="10077:[2362..2496).1" Label="param DefaultVisit(this) 708361" />
<Node Id="10077:[2449..2481).1" Label="return VisitCore(parent.Parent); 708362" />
<Node Id="10077:[2456..2480).1" Label="VisitCore(parent.Parent) 708363" />
<Node Id="10077:[2877..2892).6" Label="param VisitCore(SyntaxNode node) 708364" />
<Node Id="10077:[2852..2986).6" Label="param VisitCore(this) 708365" />
<Node Id="10077:[2926..2971).33" Label="return ((CSharpSyntaxNode)node).Accept(this); 708366" />
<Node Id="10077:[15216..15245).1" Label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 708367" />
<Node Id="10077:[15171..15372).1" Label="param VisitFieldDeclaration(this) 708368" />
<Node Id="10077:[15279..15357).1" Label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 708369" />
<Node Id="10077:[15286..15310).1" Label="VisitCore(parent.Parent) 708370" />
<Node Id="10077:[2877..2892).7" Label="param VisitCore(SyntaxNode node) 708371" />
<Node Id="10077:[2852..2986).7" Label="param VisitCore(this) 708372" />
<Node Id="10077:[2926..2971).36" Label="return ((CSharpSyntaxNode)node).Accept(this); 708373" />
<Node Id="10077:[34685..34715).2" Label="VisitTypeDeclarationCore(node) 708374" />
<Node Id="10077:[31258..31297).2" Label="NodeUsage extraInfo = NodeUsage.Normal; 708375" />
<Node Id="10077:[31490..32331).13" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 708376" />
<Node Id="10077:[32358..32401).2" Label="VisitTypeDeclarationCore(parent, extraInfo) 708377" />
<Node Id="10077:[32567..32606).3" Label="CreateBinderCacheKey(parent, extraInfo) 708378" />
<Node Id="10077:[44231..44317).41" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 708379" />
<Node Id="10077:[44231..44317).43" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 708380" />
<Node Id="10077:[44335..44374).23" Label="return new BinderCacheKey(node, usage); 708381" />
<Node Id="10077:[44342..44373).6" Label="new BinderCacheKey(node, usage) 708382" />
<Node Id="10076:[853..1034).6" Label="param BinderCacheKey(this) 708383" />
<Node Id="10077:[32557..32607).11" Label="var key = CreateBinderCacheKey(parent, extraInfo); 708384" />
<Node Id="10077:[32627..32647).3" Label="Binder resultBinder; 708385" />
<Node Id="10077:[32670..32681).3" Label="binderCache 708386" />
<Node Id="10077:[32665..34501).20" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 708387" />
<Node Id="10077:[32665..34501).21" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 708388" />
<Node Id="10077:[32665..34501).23" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 708389" />
<Node Id="10077:[44954..44972).3" Label="SyntaxToken token; 708390" />
<Node Id="10077:[44966..44971).67" Label="token 708391" />
<Node Id="10077:[39421..39431).3" Label="syntaxTree 708392" />
<Node Id="10077:[1641..1732).3" Label="get
                {
                    return _factory._syntaxTree;
                } 708393" />
<Node Id="10077:[1685..1713).3" Label="return _factory._syntaxTree; 708394" />
<Node Id="10077:[39398..39590).13" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 708395" />
<Node Id="10077:[39398..39590).14" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 708396" />
<Node Id="10077:[44231..44317).49" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 708397" />
<Node Id="10286:[1317..1350).17" Label="RoslynDebug.Assert(next != null); 708398" />
<Node Id="10346:[858..868).5" Label="_container 708399" />
<Node Id="10346:[1572..1612).9" Label="Debug.Assert((object)container != null); 708400" />
<Node Id="10346:[1626..1666).9" Label="Debug.Assert(declarationSyntax != null); 708401" />
<Node Id="10346:[2691..2750).11" Label="Debug.Assert((object)container != null || imports != null); 708402" />
<Node Id="10077:[34064..34272).7" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 708403" />
<Node Id="10077:[15286..15356).1" Label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 708404" />
<Node Id="10307:[3496..3521).5" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 708405" />
<Node Id="10307:[3452..3756).5" Label="param WithUnsafeRegionIfNecessary(this) 708406" />
<Node Id="10307:[3547..3745).38" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 708407" />
<Node Id="10307:[3555..3600).5" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 708408" />
<Node Id="10298:[494..511).12" Label="param Includes(BinderFlags other) 708409" />
<Node Id="10286:[1688..1781).7" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 708410" />
<Node Id="10298:[471..492).13" Label="param Includes(this BinderFlags self) 708411" />
<Node Id="10286:[1820..1963).7" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 708412" />
<Node Id="10298:[471..492).14" Label="param Includes(this BinderFlags self) 708413" />
<Node Id="10319:[21140..21179).1" Label="var node = (QualifiedNameSyntax)syntax; 708414" />
<Node Id="10319:[21205..21314).1" Label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708415" />
<Node Id="10319:[21205..21314).3" Label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708416" />
<Node Id="10319:[21205..21314).4" Label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708417" />
<Node Id="10319:[21205..21314).5" Label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708418" />
<Node Id="10319:[21212..21313).1" Label="BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 708419" />
<Node Id="10319:[71214..71239).1" Label="param BindQualifiedName(ExpressionSyntax leftName) 708420" />
<Node Id="10319:[71254..71280).1" Label="param BindQualifiedName(SimpleNameSyntax rightName) 708421" />
<Node Id="10319:[71295..71320).1" Label="param BindQualifiedName(DiagnosticBag diagnostics) 708422" />
<Node Id="10319:[71335..71374).1" Label="param BindQualifiedName(ConsList$TypeSymbol$ basesBeingResolved) 708423" />
<Node Id="10319:[71389..71420).1" Label="param BindQualifiedName(bool suppressUseSiteDiagnostics) 708424" />
<Node Id="10319:[71130..73408).1" Label="param BindQualifiedName(this) 708425" />
<Node Id="10319:[71446..71583).1" Label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 708426" />
<Node Id="10319:[71446..71583).2" Label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 708427" />
<Node Id="10319:[71446..71583).3" Label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 708428" />
<Node Id="10319:[71446..71583).4" Label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 708429" />
<Node Id="10319:[71457..71560).1" Label="BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false) 708430" />
<Node Id="10319:[18431..18454).1" Label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 708431" />
<Node Id="10319:[18456..18481).1" Label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 708432" />
<Node Id="10319:[18483..18522).1" Label="param BindNamespaceOrTypeSymbol(ConsList$TypeSymbol$ basesBeingResolved) 708433" />
<Node Id="10319:[18524..18555).1" Label="param BindNamespaceOrTypeSymbol(bool suppressUseSiteDiagnostics) 708434" />
<Node Id="10319:[18300..18837).1" Label="param BindNamespaceOrTypeSymbol(this) 708435" />
<Node Id="10319:[18581..18696).1" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708436" />
<Node Id="10319:[18581..18696).2" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708437" />
<Node Id="10319:[18581..18696).3" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708438" />
<Node Id="10319:[18581..18696).4" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 708439" />
<Node Id="10319:[18594..18695).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 708440" />
<Node Id="10319:[20002..20025).3" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 708441" />
<Node Id="10319:[20027..20052).3" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 708442" />
<Node Id="10319:[20054..20093).3" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 708443" />
<Node Id="10319:[20095..20126).3" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 708444" />
<Node Id="10319:[19916..30085).3" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 708445" />
<Node Id="10319:[20508..20675).1" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 708446" />
<Node Id="10319:[20508..20675).2" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 708447" />
<Node Id="10319:[20508..20675).3" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 708448" />
<Node Id="10319:[20508..20675).4" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 708449" />
<Node Id="10319:[20515..20674).1" Label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 708450" />
<Node Id="10319:[41849..41874).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 708451" />
<Node Id="10319:[41889..41914).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 708452" />
<Node Id="10319:[41929..41968).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 708453" />
<Node Id="10319:[41983..42014).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 708454" />
<Node Id="10319:[42029..42063).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 708455" />
<Node Id="10319:[41732..45579).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 708456" />
<Node Id="10319:[42089..42141).1" Label="var identifierValueText = node.Identifier.ValueText; 708457" />
<Node Id="10319:[42478..42805).1" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 708458" />
<Node Id="10319:[42821..42938).1" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708459" />
<Node Id="10319:[42821..42938).2" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708460" />
<Node Id="10319:[42821..42938).3" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708461" />
<Node Id="10319:[42821..42938).4" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708462" />
<Node Id="10319:[42821..42938).6" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708463" />
<Node Id="10319:[42839..42937).1" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 708464" />
<Node Id="10319:[63849..63870).1" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 708465" />
<Node Id="10319:[63885..63919).1" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 708466" />
<Node Id="10319:[63934..63945).1" Label="param CreateErrorIfLookupOnTypeParameter(string name) 708467" />
<Node Id="10319:[63960..63969).1" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 708468" />
<Node Id="10319:[63984..64009).1" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 708469" />
<Node Id="10319:[63768..64484).1" Label="param CreateErrorIfLookupOnTypeParameter(this) 708470" />
<Node Id="10319:[64035..64445).1" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 708471" />
<Node Id="10319:[64035..64445).2" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 708472" />
<Node Id="10319:[64461..64473).1" Label="return null; 708473" />
<Node Id="10319:[42821..42938).7" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 708474" />
<Node Id="10319:[42952..43079).1" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 708475" />
<Node Id="10319:[42952..43079).2" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 708476" />
<Node Id="10354:[10826..10838).1" Label="CreatePool() 708477" />
<Node Id="10354:[10975..11012).1" Label="ObjectPool$LookupResult$ pool = null; 708478" />
<Node Id="10354:[11026..11097).1" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 708479" />
<Node Id="10354:[11026..11097).3" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 708480" />
<Node Id="10354:[11142..11154).1" Label="return pool; 708481" />
<Node Id="10354:[10809..10838).1" Label="s_poolInstance = CreatePool() 708482" />
<Node Id="10319:[43108..43134).1" Label="LookupResult.GetInstance() 708483" />
<Node Id="10354:[11244..11285).1" Label="var instance = s_poolInstance.Allocate(); 708484" />
<Node Id="10354:[11244..11285).2" Label="var instance = s_poolInstance.Allocate(); 708485" />
<Node Id="10354:[11244..11285).3" Label="var instance = s_poolInstance.Allocate(); 708486" />
<Node Id="10354:[3419..3448).1" Label="param LookupResult(ObjectPool$LookupResult$ pool) 708487" />
<Node Id="10354:[3398..3626).1" Label="param LookupResult(this) 708488" />
<Node Id="10354:[3068..3073).1" Label="_kind 708489" />
<Node Id="10354:[3200..3211).1" Label="_symbolList 708490" />
<Node Id="10354:[3319..3325).1" Label="_error 708491" />
<Node Id="10354:[3380..3385).1" Label="_pool 708492" />
<Node Id="10354:[3474..3479).1" Label="_pool 708493" />
<Node Id="10354:[3501..3506).1" Label="_kind 708494" />
<Node Id="10354:[3546..3587).1" Label="_symbolList = new ArrayBuilder$Symbol$(); 708495" />
<Node Id="10354:[3546..3557).1" Label="_symbolList 708496" />
<Node Id="10354:[3601..3615).1" Label="_error = null; 708497" />
<Node Id="10354:[3601..3607).1" Label="_error 708498" />
<Node Id="10354:[11244..11285).4" Label="var instance = s_poolInstance.Allocate(); 708499" />
<Node Id="10354:[11312..11328).1" Label="instance.IsClear 708500" />
<Node Id="10354:[3684..3818).1" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 708501" />
<Node Id="10354:[3720..3803).1" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708502" />
<Node Id="10354:[3720..3803).2" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708503" />
<Node Id="10354:[3720..3803).3" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708504" />
<Node Id="10354:[11299..11330).1" Label="Debug.Assert(instance.IsClear); 708505" />
<Node Id="10354:[11344..11360).1" Label="return instance; 708506" />
<Node Id="10319:[43095..43135).1" Label="var result = LookupResult.GetInstance(); 708507" />
<Node Id="10319:[43149..43246).1" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 708508" />
<Node Id="10319:[43149..43246).2" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 708509" />
<Node Id="10319:[43173..43245).1" Label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 708510" />
<Node Id="10319:[50313..50328).1" Label="param GetSimpleNameLookupOptions(NameSyntax node) 708511" />
<Node Id="10319:[50330..50355).1" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 708512" />
<Node Id="10319:[50381..51340).1" Label="if (SyntaxFacts.IsAttributeName(node))
            {
                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.
                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.
                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity
                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled
                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only
                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.

                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;
            }
            else
            {
                return LookupOptions.NamespacesOrTypesOnly;
            } 708513" />
<Node Id="10319:[51282..51325).1" Label="return LookupOptions.NamespacesOrTypesOnly; 708514" />
<Node Id="10319:[43262..43312).1" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 708515" />
<Node Id="10319:[43326..43490).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708516" />
<Node Id="10319:[43326..43490).2" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708517" />
<Node Id="10319:[43326..43490).3" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708518" />
<Node Id="10319:[43326..43490).4" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708519" />
<Node Id="10319:[43326..43490).6" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708520" />
<Node Id="10319:[43326..43490).7" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708521" />
<Node Id="10319:[43326..43490).10" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 708522" />
<Node Id="10319:[43326..43489).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 708523" />
<Node Id="10312:[994..1013).1" Label="param LookupSymbolsSimpleName(LookupResult result) 708524" />
<Node Id="10312:[1028..1062).1" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 708525" />
<Node Id="10312:[1077..1093).1" Label="param LookupSymbolsSimpleName(string plainName) 708526" />
<Node Id="10312:[1108..1117).1" Label="param LookupSymbolsSimpleName(int arity) 708527" />
<Node Id="10312:[1132..1171).1" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 708528" />
<Node Id="10312:[1186..1207).1" Label="param LookupSymbolsSimpleName(LookupOptions options) 708529" />
<Node Id="10312:[1222..1235).1" Label="param LookupSymbolsSimpleName(bool diagnose) 708530" />
<Node Id="10312:[1250..1296).1" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708531" />
<Node Id="10312:[942..1750).1" Label="param LookupSymbolsSimpleName(this) 708532" />
<Node Id="10312:[1322..1739).1" Label="if (options.IsAttributeTypeLookup())
            {
                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 708533" />
<Node Id="10312:[1326..1357).1" Label="options.IsAttributeTypeLookup() 708534" />
<Node Id="10353:[7504..7530).1" Label="param IsAttributeTypeLookup(this LookupOptions options) 708535" />
<Node Id="10353:[7556..7642).1" Label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 708536" />
<Node Id="10312:[1585..1724).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708537" />
<Node Id="10312:[1585..1724).2" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708538" />
<Node Id="10312:[1585..1724).3" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708539" />
<Node Id="10312:[1585..1724).4" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708540" />
<Node Id="10312:[1585..1724).5" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708541" />
<Node Id="10312:[1585..1724).6" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708542" />
<Node Id="10312:[1585..1724).7" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708543" />
<Node Id="10312:[1585..1724).8" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708544" />
<Node Id="10312:[1585..1723).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 708545" />
<Node Id="10312:[5721..5740).1" Label="param LookupSymbolsOrMembersInternal(LookupResult result) 708546" />
<Node Id="10312:[5755..5789).1" Label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 708547" />
<Node Id="10312:[5804..5815).1" Label="param LookupSymbolsOrMembersInternal(string name) 708548" />
<Node Id="10312:[5830..5839).1" Label="param LookupSymbolsOrMembersInternal(int arity) 708549" />
<Node Id="10312:[5854..5893).1" Label="param LookupSymbolsOrMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 708550" />
<Node Id="10312:[5908..5929).1" Label="param LookupSymbolsOrMembersInternal(LookupOptions options) 708551" />
<Node Id="10312:[5944..5957).1" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 708552" />
<Node Id="10312:[5972..6018).1" Label="param LookupSymbolsOrMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708553" />
<Node Id="10312:[5663..6444).1" Label="param LookupSymbolsOrMembersInternal(this) 708554" />
<Node Id="10312:[6044..6433).1" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 708555" />
<Node Id="10312:[6044..6433).2" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 708556" />
<Node Id="10312:[6110..6221).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708557" />
<Node Id="10312:[6110..6221).2" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708558" />
<Node Id="10312:[6110..6221).3" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708559" />
<Node Id="10312:[6110..6221).4" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708560" />
<Node Id="10312:[6110..6221).5" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708561" />
<Node Id="10312:[6110..6221).6" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708562" />
<Node Id="10312:[6110..6221).7" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708563" />
<Node Id="10312:[6110..6220).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 708564" />
<Node Id="10312:[3696..3715).1" Label="param LookupSymbolsInternal(LookupResult result) 708565" />
<Node Id="10312:[3717..3728).1" Label="param LookupSymbolsInternal(string name) 708566" />
<Node Id="10312:[3730..3739).1" Label="param LookupSymbolsInternal(int arity) 708567" />
<Node Id="10312:[3741..3780).1" Label="param LookupSymbolsInternal(ConsList$TypeSymbol$ basesBeingResolved) 708568" />
<Node Id="10312:[3782..3803).1" Label="param LookupSymbolsInternal(LookupOptions options) 708569" />
<Node Id="10312:[3805..3818).1" Label="param LookupSymbolsInternal(bool diagnose) 708570" />
<Node Id="10312:[3820..3866).1" Label="param LookupSymbolsInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708571" />
<Node Id="10312:[3645..5112).1" Label="param LookupSymbolsInternal(this) 708572" />
<Node Id="10312:[3905..3919).1" Label="result.IsClear 708573" />
<Node Id="10354:[3684..3818).2" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 708574" />
<Node Id="10354:[3720..3803).9" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708575" />
<Node Id="10354:[3720..3803).10" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708576" />
<Node Id="10354:[3720..3803).11" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708577" />
<Node Id="10312:[3892..3921).1" Label="Debug.Assert(result.IsClear); 708578" />
<Node Id="10312:[3935..3968).1" Label="Debug.Assert(options.AreValid()); 708579" />
<Node Id="10312:[3948..3966).1" Label="options.AreValid() 708580" />
<Node Id="10353:[4698..4724).1" Label="param AreValid(this LookupOptions options) 708581" />
<Node Id="10353:[4750..4847).1" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 708582" />
<Node Id="10353:[4863..5000).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 708583" />
<Node Id="10353:[4863..5000).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 708584" />
<Node Id="10353:[5079..5183).1" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 708585" />
<Node Id="10353:[5197..5323).1" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 708586" />
<Node Id="10353:[5485..5759).1" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 708587" />
<Node Id="10353:[5485..5759).2" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 708588" />
<Node Id="10353:[5485..5759).3" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 708589" />
<Node Id="10353:[5775..5979).1" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 708590" />
<Node Id="10353:[5775..5979).3" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 708591" />
<Node Id="10353:[5995..6029).1" Label="return OnlyOneBitSet(onlyOptions); 708592" />
<Node Id="10353:[6002..6028).1" Label="OnlyOneBitSet(onlyOptions) 708593" />
<Node Id="10353:[6343..6358).1" Label="param OnlyOneBitSet(LookupOptions o) 708594" />
<Node Id="10353:[6384..6410).1" Label="return (o & (o - 1)) == 0; 708595" />
<Node Id="10353:[6384..6410).2" Label="return (o & (o - 1)) == 0; 708596" />
<Node Id="10312:[3984..4005).1" Label="Binder binder = null; 708597" />
<Node Id="10312:[4019..5073).1" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 708598" />
<Node Id="10312:[4019..5073).2" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 708599" />
<Node Id="10312:[4060..4080).1" Label="result.IsMultiViable 708600" />
<Node Id="10354:[4919..5009).1" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 708601" />
<Node Id="10354:[4962..4966).1" Label="Kind 708602" />
<Node Id="10354:[4058..4122).1" Label="get
            {
                return _kind;
            } 708603" />
<Node Id="10354:[4094..4107).1" Label="return _kind; 708604" />
<Node Id="10354:[4955..4994).1" Label="return Kind == LookupResultKind.Viable; 708605" />
<Node Id="10312:[4019..5073).4" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 708606" />
<Node Id="10312:[4019..5073).5" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 708607" />
<Node Id="10312:[4134..4806).1" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 708608" />
<Node Id="10312:[4134..4806).2" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 708609" />
<Node Id="10312:[4534..4658).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708610" />
<Node Id="10312:[4534..4658).2" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708611" />
<Node Id="10312:[4534..4658).3" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708612" />
<Node Id="10312:[4534..4658).4" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708613" />
<Node Id="10312:[4534..4658).5" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708614" />
<Node Id="10312:[4534..4658).6" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708615" />
<Node Id="10312:[4534..4658).7" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708616" />
<Node Id="10312:[4534..4658).8" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708617" />
<Node Id="10312:[4534..4657).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 708618" />
<Node Id="10312:[5188..5207).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 708619" />
<Node Id="10312:[5209..5220).1" Label="param LookupSymbolsInSingleBinder(string name) 708620" />
<Node Id="10312:[5222..5231).1" Label="param LookupSymbolsInSingleBinder(int arity) 708621" />
<Node Id="10312:[5233..5272).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 708622" />
<Node Id="10312:[5274..5295).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 708623" />
<Node Id="10312:[5297..5318).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 708624" />
<Node Id="10312:[5320..5333).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 708625" />
<Node Id="10312:[5335..5381).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708626" />
<Node Id="10312:[5124..5404).1" Label="param LookupSymbolsInSingleBinder(this) 708627" />
<Node Id="10312:[4534..4658).9" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 708628" />
<Node Id="10312:[4685..4699).1" Label="result.IsClear 708629" />
<Node Id="10354:[3684..3818).3" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 708630" />
<Node Id="10354:[3720..3803).17" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708631" />
<Node Id="10354:[3720..3803).18" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708632" />
<Node Id="10354:[3720..3803).19" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708633" />
<Node Id="10312:[4680..4787).1" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 708634" />
<Node Id="10312:[4826..5058).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 708635" />
<Node Id="10312:[4826..5058).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 708636" />
<Node Id="10346:[10629..10648).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 708637" />
<Node Id="10346:[10650..10661).1" Label="param LookupSymbolsInSingleBinder(string name) 708638" />
<Node Id="10346:[10663..10672).1" Label="param LookupSymbolsInSingleBinder(int arity) 708639" />
<Node Id="10346:[10674..10713).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 708640" />
<Node Id="10346:[10715..10736).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 708641" />
<Node Id="10346:[10738..10759).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 708642" />
<Node Id="10346:[10761..10774).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 708643" />
<Node Id="10346:[10776..10822).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708644" />
<Node Id="10346:[10564..12467).1" Label="param LookupSymbolsInSingleBinder(this) 708645" />
<Node Id="10346:[10861..10875).1" Label="result.IsClear 708646" />
<Node Id="10354:[3684..3818).4" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 708647" />
<Node Id="10354:[3720..3803).25" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708648" />
<Node Id="10354:[3720..3803).26" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708649" />
<Node Id="10354:[3720..3803).27" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708650" />
<Node Id="10346:[10848..10877).1" Label="Debug.Assert(result.IsClear); 708651" />
<Node Id="10346:[10897..10914).1" Label="IsSubmissionClass 708652" />
<Node Id="10346:[7666..7775).1" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 708653" />
<Node Id="10346:[7672..7773).1" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 708654" />
<Node Id="10346:[10893..11127).1" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 708655" />
<Node Id="10346:[11143..11188).1" Label="var imports = GetImports(basesBeingResolved); 708656" />
<Node Id="10346:[11157..11187).1" Label="GetImports(basesBeingResolved) 708657" />
<Node Id="10346:[3460..3499).1" Label="param GetImports(ConsList$TypeSymbol$ basesBeingResolved) 708658" />
<Node Id="10346:[3423..3863).1" Label="param GetImports(this) 708659" />
<Node Id="10346:[3525..3638).1" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 708660" />
<Node Id="10346:[3525..3638).2" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 708661" />
<Node Id="10346:[3654..3816).1" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 708662" />
<Node Id="10346:[3654..3816).2" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 708663" />
<Node Id="10346:[3832..3852).1" Label="return _lazyImports; 708664" />
<Node Id="10346:[11143..11188).2" Label="var imports = GetImports(basesBeingResolved); 708665" />
<Node Id="10346:[11258..12246).1" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 708666" />
<Node Id="10346:[11258..12246).2" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 708667" />
<Node Id="10346:[11258..12246).5" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 708668" />
<Node Id="10346:[11258..12246).6" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 708669" />
<Node Id="10346:[11369..11508).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708670" />
<Node Id="10346:[11369..11508).2" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708671" />
<Node Id="10346:[11369..11508).3" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708672" />
<Node Id="10346:[11369..11508).4" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708673" />
<Node Id="10346:[11369..11508).5" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708674" />
<Node Id="10346:[11369..11508).6" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708675" />
<Node Id="10346:[11369..11508).7" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708676" />
<Node Id="10346:[11369..11508).8" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708677" />
<Node Id="10346:[11369..11508).9" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708678" />
<Node Id="10346:[11369..11507).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 708679" />
<Node Id="10312:[7652..7671).1" Label="param LookupMembersInternal(LookupResult result) 708680" />
<Node Id="10312:[7673..7703).1" Label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 708681" />
<Node Id="10312:[7705..7716).1" Label="param LookupMembersInternal(string name) 708682" />
<Node Id="10312:[7718..7727).1" Label="param LookupMembersInternal(int arity) 708683" />
<Node Id="10312:[7729..7768).1" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 708684" />
<Node Id="10312:[7770..7791).1" Label="param LookupMembersInternal(LookupOptions options) 708685" />
<Node Id="10312:[7793..7814).1" Label="param LookupMembersInternal(Binder originalBinder) 708686" />
<Node Id="10312:[7816..7829).1" Label="param LookupMembersInternal(bool diagnose) 708687" />
<Node Id="10312:[7831..7877).1" Label="param LookupMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708688" />
<Node Id="10312:[7615..8420).1" Label="param LookupMembersInternal(this) 708689" />
<Node Id="10312:[7903..7936).1" Label="Debug.Assert(options.AreValid()); 708690" />
<Node Id="10312:[7916..7934).1" Label="options.AreValid() 708691" />
<Node Id="10353:[4698..4724).2" Label="param AreValid(this LookupOptions options) 708692" />
<Node Id="10353:[4750..4847).3" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 708693" />
<Node Id="10353:[4863..5000).5" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 708694" />
<Node Id="10353:[4863..5000).6" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 708695" />
<Node Id="10353:[5079..5183).3" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 708696" />
<Node Id="10353:[5197..5323).4" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 708697" />
<Node Id="10353:[5485..5759).7" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 708698" />
<Node Id="10353:[5485..5759).8" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 708699" />
<Node Id="10353:[5485..5759).9" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 708700" />
<Node Id="10353:[5775..5979).5" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 708701" />
<Node Id="10353:[5775..5979).7" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 708702" />
<Node Id="10353:[5995..6029).4" Label="return OnlyOneBitSet(onlyOptions); 708703" />
<Node Id="10353:[6002..6028).2" Label="OnlyOneBitSet(onlyOptions) 708704" />
<Node Id="10353:[6343..6358).2" Label="param OnlyOneBitSet(LookupOptions o) 708705" />
<Node Id="10353:[6384..6410).7" Label="return (o & (o - 1)) == 0; 708706" />
<Node Id="10353:[6384..6410).8" Label="return (o & (o - 1)) == 0; 708707" />
<Node Id="10312:[7952..7977).1" Label="Debug.Assert(arity $= 0); 708708" />
<Node Id="10312:[7952..7977).2" Label="Debug.Assert(arity $= 0); 708709" />
<Node Id="10312:[7991..8409).1" Label="if (nsOrType.IsNamespace)
            {
                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
            } 708710" />
<Node Id="10312:[8247..8394).1" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708711" />
<Node Id="10312:[8247..8394).2" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708712" />
<Node Id="10312:[8247..8394).3" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708713" />
<Node Id="10312:[8247..8394).4" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708714" />
<Node Id="10312:[8247..8394).5" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708715" />
<Node Id="10312:[8247..8394).6" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708716" />
<Node Id="10312:[8247..8394).7" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708717" />
<Node Id="10312:[8247..8394).8" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708718" />
<Node Id="10312:[8247..8394).9" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708719" />
<Node Id="10312:[8247..8393).1" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 708720" />
<Node Id="10312:[8543..8562).1" Label="param LookupMembersInType(LookupResult result) 708721" />
<Node Id="10312:[8564..8579).1" Label="param LookupMembersInType(TypeSymbol type) 708722" />
<Node Id="10312:[8581..8592).1" Label="param LookupMembersInType(string name) 708723" />
<Node Id="10312:[8594..8603).1" Label="param LookupMembersInType(int arity) 708724" />
<Node Id="10312:[8605..8644).1" Label="param LookupMembersInType(ConsList$TypeSymbol$ basesBeingResolved) 708725" />
<Node Id="10312:[8646..8667).1" Label="param LookupMembersInType(LookupOptions options) 708726" />
<Node Id="10312:[8669..8690).1" Label="param LookupMembersInType(Binder originalBinder) 708727" />
<Node Id="10312:[8692..8705).1" Label="param LookupMembersInType(bool diagnose) 708728" />
<Node Id="10312:[8707..8753).1" Label="param LookupMembersInType(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708729" />
<Node Id="10312:[8508..10685).1" Label="param LookupMembersInType(this) 708730" />
<Node Id="10312:[8779..10524).1" Label="switch (type.TypeKind)
            {
                case TypeKind.TypeParameter:
                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Interface:
                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Class:
                case TypeKind.Struct:
                case TypeKind.Enum:
                case TypeKind.Delegate:
                case TypeKind.Array:
                case TypeKind.Dynamic:
                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Submission:
                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Error:
                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Pointer:
                case TypeKind.FunctionPointer:
                    result.Clear();
                    break;

                case TypeKind.Unknown:
                default:
                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);
            } 708731" />
<Node Id="10312:[9577..9709).1" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708732" />
<Node Id="10312:[9577..9709).2" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708733" />
<Node Id="10312:[9577..9709).3" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708734" />
<Node Id="10312:[9577..9709).4" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708735" />
<Node Id="10312:[9577..9709).5" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708736" />
<Node Id="10312:[9577..9709).6" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708737" />
<Node Id="10312:[9577..9709).7" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708738" />
<Node Id="10312:[9577..9709).8" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708739" />
<Node Id="10312:[9577..9709).9" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708740" />
<Node Id="10312:[9577..9708).1" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 708741" />
<Node Id="10312:[34707..34726).1" Label="param LookupMembersInClass(LookupResult result) 708742" />
<Node Id="10312:[34741..34756).1" Label="param LookupMembersInClass(TypeSymbol type) 708743" />
<Node Id="10312:[34771..34782).1" Label="param LookupMembersInClass(string name) 708744" />
<Node Id="10312:[34797..34806).1" Label="param LookupMembersInClass(int arity) 708745" />
<Node Id="10312:[34821..34860).1" Label="param LookupMembersInClass(ConsList$TypeSymbol$ basesBeingResolved) 708746" />
<Node Id="10312:[34875..34896).1" Label="param LookupMembersInClass(LookupOptions options) 708747" />
<Node Id="10312:[34911..34932).1" Label="param LookupMembersInClass(Binder originalBinder) 708748" />
<Node Id="10312:[34947..34960).1" Label="param LookupMembersInClass(bool diagnose) 708749" />
<Node Id="10312:[34975..35021).1" Label="param LookupMembersInClass(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708750" />
<Node Id="10312:[34659..35191).1" Label="param LookupMembersInClass(this) 708751" />
<Node Id="10312:[35047..35180).1" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708752" />
<Node Id="10312:[35047..35180).2" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708753" />
<Node Id="10312:[35047..35180).3" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708754" />
<Node Id="10312:[35047..35180).4" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708755" />
<Node Id="10312:[35047..35180).5" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708756" />
<Node Id="10312:[35047..35180).6" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708757" />
<Node Id="10312:[35047..35180).7" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708758" />
<Node Id="10312:[35047..35180).9" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708759" />
<Node Id="10312:[35047..35180).10" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708760" />
<Node Id="10312:[35047..35179).1" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 708761" />
<Node Id="10312:[35313..35332).1" Label="param LookupMembersInClass(LookupResult result) 708762" />
<Node Id="10312:[35347..35362).1" Label="param LookupMembersInClass(TypeSymbol type) 708763" />
<Node Id="10312:[35377..35388).1" Label="param LookupMembersInClass(string name) 708764" />
<Node Id="10312:[35403..35412).1" Label="param LookupMembersInClass(int arity) 708765" />
<Node Id="10312:[35427..35466).1" Label="param LookupMembersInClass(ConsList$TypeSymbol$ basesBeingResolved) 708766" />
<Node Id="10312:[35481..35502).1" Label="param LookupMembersInClass(LookupOptions options) 708767" />
<Node Id="10312:[35517..35538).1" Label="param LookupMembersInClass(Binder originalBinder) 708768" />
<Node Id="10312:[35553..35581).1" Label="param LookupMembersInClass(TypeSymbol accessThroughType) 708769" />
<Node Id="10312:[35596..35609).1" Label="param LookupMembersInClass(bool diagnose) 708770" />
<Node Id="10312:[35624..35670).1" Label="param LookupMembersInClass(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708771" />
<Node Id="10312:[35265..38808).1" Label="param LookupMembersInClass(this) 708772" />
<Node Id="10312:[35696..35731).1" Label="Debug.Assert((object)type != null); 708773" />
<Node Id="10312:[35696..35731).2" Label="Debug.Assert((object)type != null); 708774" />
<Node Id="10312:[35745..35826).1" Label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 708775" />
<Node Id="10312:[35842..35872).1" Label="TypeSymbol currentType = type; 708776" />
<Node Id="10312:[35898..35924).1" Label="LookupResult.GetInstance() 708777" />
<Node Id="10354:[3068..3073).2" Label="_kind 708778" />
<Node Id="10354:[3200..3211).2" Label="_symbolList 708779" />
<Node Id="10354:[3319..3325).2" Label="_error 708780" />
<Node Id="10354:[3380..3385).2" Label="_pool 708781" />
<Node Id="10354:[11312..11328).2" Label="instance.IsClear 708782" />
<Node Id="10354:[3684..3818).5" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 708783" />
<Node Id="10354:[3720..3803).33" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708784" />
<Node Id="10354:[3720..3803).34" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708785" />
<Node Id="10354:[3720..3803).35" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 708786" />
<Node Id="10354:[11299..11330).4" Label="Debug.Assert(instance.IsClear); 708787" />
<Node Id="10312:[35888..35925).1" Label="var tmp = LookupResult.GetInstance(); 708788" />
<Node Id="10312:[35939..35985).1" Label="PooledHashSet$NamedTypeSymbol$ visited = null; 708789" />
<Node Id="10312:[35999..38740).1" Label="while ((object)currentType != null)
            {
                tmp.Clear();
                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);

                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);

                // If the type is from a winmd and implements any of the special WinRT collection
                // projections then we may need to add underlying interface members. 
                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;
                if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                }

                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes
                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);

                // short circuit looking up bases if we already have a viable result and we won't be adding on more
                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                }

                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                }

                // As in dev11, we don't consider inherited members within crefs.
                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,
                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.
                if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                }

                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);
                if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                }
            } 708790" />
<Node Id="10312:[35999..38740).2" Label="while ((object)currentType != null)
            {
                tmp.Clear();
                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);

                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);

                // If the type is from a winmd and implements any of the special WinRT collection
                // projections then we may need to add underlying interface members. 
                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;
                if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                }

                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes
                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);

                // short circuit looking up bases if we already have a viable result and we won't be adding on more
                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                }

                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                }

                // As in dev11, we don't consider inherited members within crefs.
                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,
                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.
                if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                }

                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);
                if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                }
            } 708791" />
<Node Id="10312:[36067..36078).1" Label="tmp.Clear() 708792" />
<Node Id="10354:[3841..3991).1" Label="param Clear(this) 708793" />
<Node Id="10354:[3887..3892).1" Label="_kind 708794" />
<Node Id="10354:[3932..3952).1" Label="_symbolList.Clear(); 708795" />
<Node Id="10354:[3966..3980).1" Label="_error = null; 708796" />
<Node Id="10354:[3966..3972).1" Label="_error 708797" />
<Node Id="10312:[36067..36079).1" Label="tmp.Clear(); 708798" />
<Node Id="10312:[36097..36258).1" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708799" />
<Node Id="10312:[36097..36258).2" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708800" />
<Node Id="10312:[36097..36258).3" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708801" />
<Node Id="10312:[36097..36258).4" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708802" />
<Node Id="10312:[36097..36258).5" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708803" />
<Node Id="10312:[36097..36258).6" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708804" />
<Node Id="10312:[36097..36258).7" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708805" />
<Node Id="10312:[36097..36258).8" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708806" />
<Node Id="10312:[36097..36258).9" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708807" />
<Node Id="10312:[36097..36258).10" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708808" />
<Node Id="10312:[36097..36257).1" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 708809" />
<Node Id="10312:[33656..33675).1" Label="param LookupMembersWithoutInheritance(LookupResult result) 708810" />
<Node Id="10312:[33677..33692).1" Label="param LookupMembersWithoutInheritance(TypeSymbol type) 708811" />
<Node Id="10312:[33694..33705).1" Label="param LookupMembersWithoutInheritance(string name) 708812" />
<Node Id="10312:[33707..33716).1" Label="param LookupMembersWithoutInheritance(int arity) 708813" />
<Node Id="10312:[33731..33752).1" Label="param LookupMembersWithoutInheritance(LookupOptions options) 708814" />
<Node Id="10312:[33754..33775).1" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 708815" />
<Node Id="10312:[33777..33805).1" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 708816" />
<Node Id="10312:[33807..33820).1" Label="param LookupMembersWithoutInheritance(bool diagnose) 708817" />
<Node Id="10312:[33822..33868).1" Label="param LookupMembersWithoutInheritance(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708818" />
<Node Id="10312:[33870..33909).1" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 708819" />
<Node Id="10312:[33935..34006).1" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 708820" />
<Node Id="10312:[33935..34006).2" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 708821" />
<Node Id="10312:[33935..34006).3" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 708822" />
<Node Id="10312:[33935..34006).4" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 708823" />
<Node Id="10312:[33949..34005).1" Label="GetCandidateMembers(type, name, options, originalBinder) 708824" />
<Node Id="10312:[61540..61570).1" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 708825" />
<Node Id="10312:[61572..61583).1" Label="param GetCandidateMembers(string name) 708826" />
<Node Id="10312:[61585..61606).1" Label="param GetCandidateMembers(LookupOptions options) 708827" />
<Node Id="10312:[61608..61629).1" Label="param GetCandidateMembers(Binder originalBinder) 708828" />
<Node Id="10312:[61655..62327).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 708829" />
<Node Id="10312:[61655..62327).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 708830" />
<Node Id="10312:[61655..62327).4" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 708831" />
<Node Id="10312:[61771..61840).1" Label="return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$(); 708832" />
<Node Id="10312:[61771..61840).2" Label="return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$(); 708833" />
<Node Id="10312:[34022..34574).1" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 708834" />
<Node Id="10312:[36097..36258).11" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708835" />
<Node Id="10312:[36278..36360).1" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708836" />
<Node Id="10312:[36278..36360).2" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708837" />
<Node Id="10312:[36278..36360).3" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708838" />
<Node Id="10312:[36278..36360).4" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708839" />
<Node Id="10312:[36278..36360).5" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708840" />
<Node Id="10312:[36278..36360).6" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 708841" />
<Node Id="10354:[9012..9030).1" Label="param MergePrioritized(LookupResult other) 708842" />
<Node Id="10354:[8981..9152).1" Label="param MergePrioritized(this) 708843" />
<Node Id="10354:[9060..9070).1" Label="other.Kind 708844" />
<Node Id="10354:[4058..4122).4" Label="get
            {
                return _kind;
            } 708845" />
<Node Id="10354:[9056..9141).1" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 708846" />
<Node Id="10354:[9073..9077).1" Label="Kind 708847" />
<Node Id="10354:[4058..4122).5" Label="get
            {
                return _kind;
            } 708848" />
<Node Id="10354:[9056..9141).2" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 708849" />
<Node Id="10354:[9056..9141).3" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 708850" />
<Node Id="10312:[36566..36625).1" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 708851" />
<Node Id="10312:[36643..36855).1" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 708852" />
<Node Id="10312:[36643..36855).2" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 708853" />
<Node Id="10312:[37061..37078).1" Label="tmp.IsMultiViable 708854" />
<Node Id="10354:[4919..5009).4" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 708855" />
<Node Id="10354:[4094..4107).6" Label="return _kind; 708856" />
<Node Id="10312:[37029..37117).1" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 708857" />
<Node Id="10312:[37258..37278).1" Label="result.IsMultiViable 708858" />
<Node Id="10354:[4919..5009).5" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 708859" />
<Node Id="10354:[4094..4107).7" Label="return _kind; 708860" />
<Node Id="10312:[37254..37416).1" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 708861" />
<Node Id="10312:[37436..37988).1" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 708862" />
<Node Id="10312:[37436..37988).2" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 708863" />
<Node Id="10312:[38290..38338).1" Label="originalBinder.InCrefButNotParameterOrReturnType 708864" />
<Node Id="10306:[3345..3430).1" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 708865" />
<Node Id="10306:[3358..3364).1" Label="InCref 708866" />
<Node Id="10306:[3196..3249).1" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 708867" />
<Node Id="10306:[3202..3247).1" Label="return this.Flags.Includes(BinderFlags.Cref); 708868" />
<Node Id="10306:[3202..3247).2" Label="return this.Flags.Includes(BinderFlags.Cref); 708869" />
<Node Id="10306:[3209..3246).1" Label="this.Flags.Includes(BinderFlags.Cref) 708870" />
<Node Id="10298:[471..492).15" Label="param Includes(this BinderFlags self) 708871" />
<Node Id="10298:[494..511).15" Label="param Includes(BinderFlags other) 708872" />
<Node Id="10306:[3351..3428).1" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 708873" />
<Node Id="10312:[38286..38405).1" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 708874" />
<Node Id="10312:[38425..38538).1" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 708875" />
<Node Id="10312:[38425..38538).2" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 708876" />
<Node Id="10312:[38425..38538).3" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 708877" />
<Node Id="10312:[38425..38538).4" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 708878" />
<Node Id="10312:[38425..38538).5" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 708879" />
<Node Id="10312:[38556..38725).1" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 708880" />
<Node Id="10312:[38556..38725).2" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 708881" />
<Node Id="10312:[38629..38706).1" Label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 708882" />
<Node Id="10312:[38629..38706).2" Label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 708883" />
<Node Id="10312:[36067..36079).2" Label="tmp.Clear(); 708884" />
<Node Id="10312:[36097..36258).15" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708885" />
<Node Id="10312:[36097..36258).17" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708886" />
<Node Id="10312:[36097..36258).18" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708887" />
<Node Id="10312:[36097..36258).19" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 708888" />
<Node Id="10312:[33656..33675).2" Label="param LookupMembersWithoutInheritance(LookupResult result) 708889" />
<Node Id="10312:[33707..33716).2" Label="param LookupMembersWithoutInheritance(int arity) 708890" />
<Node Id="10312:[33754..33775).2" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 708891" />
<Node Id="10312:[33777..33805).2" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 708892" />
<Node Id="10312:[33807..33820).2" Label="param LookupMembersWithoutInheritance(bool diagnose) 708893" />
<Node Id="10312:[33870..33909).2" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 708894" />
<Node Id="10312:[61608..61629).2" Label="param GetCandidateMembers(Binder originalBinder) 708895" />
<Node Id="10312:[34022..34574).4" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 708896" />
<Node Id="10354:[9012..9030).2" Label="param MergePrioritized(LookupResult other) 708897" />
<Node Id="10354:[8981..9152).2" Label="param MergePrioritized(this) 708898" />
<Node Id="10354:[9060..9070).2" Label="other.Kind 708899" />
<Node Id="10354:[4058..4122).9" Label="get
            {
                return _kind;
            } 708900" />
<Node Id="10354:[9056..9141).5" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 708901" />
<Node Id="10354:[9073..9077).2" Label="Kind 708902" />
<Node Id="10354:[4058..4122).10" Label="get
            {
                return _kind;
            } 708903" />
<Node Id="10354:[9056..9141).6" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 708904" />
<Node Id="10354:[9056..9141).7" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 708905" />
<Node Id="10312:[36566..36625).2" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 708906" />
<Node Id="10312:[36643..36855).4" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 708907" />
<Node Id="10312:[36643..36855).5" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 708908" />
<Node Id="10312:[37061..37078).2" Label="tmp.IsMultiViable 708909" />
<Node Id="10354:[4094..4107).11" Label="return _kind; 708910" />
<Node Id="10312:[37029..37117).4" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 708911" />
<Node Id="10312:[37258..37278).2" Label="result.IsMultiViable 708912" />
<Node Id="10354:[4094..4107).12" Label="return _kind; 708913" />
<Node Id="10312:[37254..37416).4" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 708914" />
<Node Id="10312:[37436..37988).5" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 708915" />
<Node Id="10312:[38290..38338).2" Label="originalBinder.InCrefButNotParameterOrReturnType 708916" />
<Node Id="10306:[3345..3430).2" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 708917" />
<Node Id="10306:[3358..3364).2" Label="InCref 708918" />
<Node Id="10306:[3196..3249).2" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 708919" />
<Node Id="10306:[3202..3247).5" Label="return this.Flags.Includes(BinderFlags.Cref); 708920" />
<Node Id="10306:[3202..3247).6" Label="return this.Flags.Includes(BinderFlags.Cref); 708921" />
<Node Id="10306:[3209..3246).2" Label="this.Flags.Includes(BinderFlags.Cref) 708922" />
<Node Id="10298:[471..492).16" Label="param Includes(this BinderFlags self) 708923" />
<Node Id="10298:[494..511).16" Label="param Includes(BinderFlags other) 708924" />
<Node Id="10306:[3351..3428).4" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 708925" />
<Node Id="10312:[38286..38405).3" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 708926" />
<Node Id="10312:[38556..38725).4" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 708927" />
<Node Id="10312:[38756..38772).1" Label="visited?.Free(); 708928" />
<Node Id="10312:[38786..38796).1" Label="tmp.Free() 708929" />
<Node Id="10354:[11383..11549).1" Label="param Free(this) 708930" />
<Node Id="10354:[11428..11440).1" Label="this.Clear() 708931" />
<Node Id="10354:[3841..3991).3" Label="param Clear(this) 708932" />
<Node Id="10354:[3887..3892).3" Label="_kind 708933" />
<Node Id="10354:[3932..3952).3" Label="_symbolList.Clear(); 708934" />
<Node Id="10354:[3966..3980).3" Label="_error = null; 708935" />
<Node Id="10354:[3966..3972).3" Label="_error 708936" />
<Node Id="10354:[11428..11441).1" Label="this.Clear(); 708937" />
<Node Id="10354:[11455..11538).1" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 708938" />
<Node Id="10354:[11455..11538).2" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 708939" />
<Node Id="10354:[11506..11523).1" Label="_pool.Free(this); 708940" />
<Node Id="10312:[38786..38797).1" Label="tmp.Free(); 708941" />
<Node Id="10312:[35047..35180).11" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 708942" />
<Node Id="10312:[9577..9709).10" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708943" />
<Node Id="10312:[8247..8394).10" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708944" />
<Node Id="10346:[11369..11508).10" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 708945" />
<Node Id="10346:[11532..11552).1" Label="result.IsMultiViable 708946" />
<Node Id="10354:[4919..5009).9" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 708947" />
<Node Id="10354:[4094..4107).13" Label="return _kind; 708948" />
<Node Id="10346:[11528..12231).1" Label="if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                } 708949" />
<Node Id="10346:[12335..12456).1" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708950" />
<Node Id="10346:[12335..12456).2" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708951" />
<Node Id="10346:[12335..12456).3" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708952" />
<Node Id="10346:[12335..12456).4" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708953" />
<Node Id="10346:[12335..12456).5" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708954" />
<Node Id="10346:[12335..12456).6" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708955" />
<Node Id="10346:[12335..12456).7" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708956" />
<Node Id="10346:[12335..12456).8" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708957" />
<Node Id="10346:[12335..12455).1" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 708958" />
<Node Id="10345:[29004..29025).1" Label="param LookupSymbol(Binder originalBinder) 708959" />
<Node Id="10345:[29040..29059).1" Label="param LookupSymbol(LookupResult result) 708960" />
<Node Id="10345:[29074..29085).1" Label="param LookupSymbol(string name) 708961" />
<Node Id="10345:[29100..29109).1" Label="param LookupSymbol(int arity) 708962" />
<Node Id="10345:[29124..29163).1" Label="param LookupSymbol(ConsList$TypeSymbol$ basesBeingResolved) 708963" />
<Node Id="10345:[29178..29199).1" Label="param LookupSymbol(LookupOptions options) 708964" />
<Node Id="10345:[29214..29227).1" Label="param LookupSymbol(bool diagnose) 708965" />
<Node Id="10345:[29242..29288).1" Label="param LookupSymbol(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708966" />
<Node Id="10345:[28963..29726).1" Label="param LookupSymbol(this) 708967" />
<Node Id="10345:[29314..29436).1" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708968" />
<Node Id="10345:[29314..29436).2" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708969" />
<Node Id="10345:[29314..29436).3" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708970" />
<Node Id="10345:[29314..29436).4" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708971" />
<Node Id="10345:[29314..29436).5" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708972" />
<Node Id="10345:[29314..29436).6" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708973" />
<Node Id="10345:[29314..29436).7" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708974" />
<Node Id="10345:[29314..29436).8" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 708975" />
<Node Id="10345:[29314..29435).1" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 708976" />
<Node Id="10345:[29788..29809).1" Label="param LookupSymbolInAliases(Binder originalBinder) 708977" />
<Node Id="10345:[29824..29843).1" Label="param LookupSymbolInAliases(LookupResult result) 708978" />
<Node Id="10345:[29858..29869).1" Label="param LookupSymbolInAliases(string name) 708979" />
<Node Id="10345:[29884..29893).1" Label="param LookupSymbolInAliases(int arity) 708980" />
<Node Id="10345:[29908..29947).1" Label="param LookupSymbolInAliases(ConsList$TypeSymbol$ basesBeingResolved) 708981" />
<Node Id="10345:[29962..29983).1" Label="param LookupSymbolInAliases(LookupOptions options) 708982" />
<Node Id="10345:[29998..30011).1" Label="param LookupSymbolInAliases(bool diagnose) 708983" />
<Node Id="10345:[30026..30072).1" Label="param LookupSymbolInAliases(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 708984" />
<Node Id="10345:[29738..31666).1" Label="param LookupSymbolInAliases(this) 708985" />
<Node Id="10345:[30127..30163).1" Label="originalBinder.IsSemanticModelBinder 708986" />
<Node Id="10286:[2155..2260).1" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 708987" />
<Node Id="10286:[2191..2245).1" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 708988" />
<Node Id="10286:[2191..2245).2" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 708989" />
<Node Id="10286:[2198..2244).1" Label="this.Flags.Includes(BinderFlags.SemanticModel) 708990" />
<Node Id="10298:[471..492).17" Label="param Includes(this BinderFlags self) 708991" />
<Node Id="10298:[494..511).17" Label="param Includes(BinderFlags other) 708992" />
<Node Id="10345:[30098..30164).1" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 708993" />
<Node Id="10345:[30180..30209).1" Label="AliasAndUsingDirective alias; 708994" />
<Node Id="10345:[30203..30208).1" Label="alias 708995" />
<Node Id="10345:[30223..30867).1" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 708996" />
<Node Id="10345:[30223..30867).2" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 708997" />
<Node Id="10345:[30223..30867).3" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 708998" />
<Node Id="10345:[30883..31655).1" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 708999" />
<Node Id="10345:[29314..29436).9" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709000" />
<Node Id="10345:[29457..29477).1" Label="result.IsMultiViable 709001" />
<Node Id="10354:[4919..5009).10" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 709002" />
<Node Id="10354:[4094..4107).14" Label="return _kind; 709003" />
<Node Id="10345:[29452..29715).1" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 709004" />
<Node Id="10345:[29452..29715).2" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 709005" />
<Node Id="10345:[29452..29715).3" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 709006" />
<Node Id="10345:[29452..29715).5" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 709007" />
<Node Id="10345:[29566..29700).1" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709008" />
<Node Id="10345:[29566..29700).2" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709009" />
<Node Id="10345:[29566..29700).3" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709010" />
<Node Id="10345:[29566..29700).4" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709011" />
<Node Id="10345:[29566..29700).5" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709012" />
<Node Id="10345:[29566..29700).6" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709013" />
<Node Id="10345:[29566..29700).7" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709014" />
<Node Id="10345:[29566..29700).8" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709015" />
<Node Id="10345:[29566..29700).9" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709016" />
<Node Id="10345:[29566..29699).1" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 709017" />
<Node Id="10345:[31734..31789).1" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 709018" />
<Node Id="10345:[31804..31825).1" Label="param LookupSymbolInUsings(Binder originalBinder) 709019" />
<Node Id="10345:[31840..31859).1" Label="param LookupSymbolInUsings(LookupResult result) 709020" />
<Node Id="10345:[31874..31885).1" Label="param LookupSymbolInUsings(string name) 709021" />
<Node Id="10345:[31900..31909).1" Label="param LookupSymbolInUsings(int arity) 709022" />
<Node Id="10345:[31924..31963).1" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 709023" />
<Node Id="10345:[31978..31999).1" Label="param LookupSymbolInUsings(LookupOptions options) 709024" />
<Node Id="10345:[32014..32027).1" Label="param LookupSymbolInUsings(bool diagnose) 709025" />
<Node Id="10345:[32042..32088).1" Label="param LookupSymbolInUsings(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709026" />
<Node Id="10345:[32114..32230).1" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 709027" />
<Node Id="10345:[32114..32230).2" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 709028" />
<Node Id="10345:[32118..32174).1" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 709029" />
<Node Id="10298:[471..492).18" Label="param Includes(this BinderFlags self) 709030" />
<Node Id="10298:[494..511).18" Label="param Includes(BinderFlags other) 709031" />
<Node Id="10345:[32275..32311).1" Label="originalBinder.IsSemanticModelBinder 709032" />
<Node Id="10286:[2155..2260).2" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 709033" />
<Node Id="10286:[2191..2245).5" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 709034" />
<Node Id="10286:[2191..2245).6" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 709035" />
<Node Id="10286:[2198..2244).2" Label="this.Flags.Includes(BinderFlags.SemanticModel) 709036" />
<Node Id="10298:[471..492).19" Label="param Includes(this BinderFlags self) 709037" />
<Node Id="10298:[494..511).19" Label="param Includes(BinderFlags other) 709038" />
<Node Id="10345:[32246..32312).1" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 709039" />
<Node Id="10345:[32328..33465).1" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 709040" />
<Node Id="10345:[29566..29700).10" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709041" />
<Node Id="10346:[12335..12456).9" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709042" />
<Node Id="10354:[3720..3803).41" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709043" />
<Node Id="10354:[3720..3803).43" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709044" />
<Node Id="10312:[4680..4787).3" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 709045" />
<Node Id="10312:[4534..4658).21" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709046" />
<Node Id="10312:[4534..4658).25" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709047" />
<Node Id="10346:[10663..10672).2" Label="param LookupSymbolsInSingleBinder(int arity) 709048" />
<Node Id="10346:[10738..10759).2" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 709049" />
<Node Id="10346:[10761..10774).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 709050" />
<Node Id="10346:[10861..10875).2" Label="result.IsClear 709051" />
<Node Id="10354:[3684..3818).7" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 709052" />
<Node Id="10354:[3720..3803).49" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709053" />
<Node Id="10354:[3720..3803).50" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709054" />
<Node Id="10354:[3720..3803).51" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709055" />
<Node Id="10346:[10848..10877).4" Label="Debug.Assert(result.IsClear); 709056" />
<Node Id="10346:[10897..10914).2" Label="IsSubmissionClass 709057" />
<Node Id="10346:[7666..7775).2" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 709058" />
<Node Id="10346:[7672..7773).4" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 709059" />
<Node Id="10346:[10893..11127).3" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 709060" />
<Node Id="10346:[3460..3499).2" Label="param GetImports(ConsList$TypeSymbol$ basesBeingResolved) 709061" />
<Node Id="10346:[3525..3638).8" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 709062" />
<Node Id="10346:[3654..3816).4" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 709063" />
<Node Id="10346:[3712..3801).1" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 709064" />
<Node Id="10346:[3712..3801).2" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 709065" />
<Node Id="10346:[3712..3801).4" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 709066" />
<Node Id="10345:[2889..2923).1" Label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 709067" />
<Node Id="10345:[2938..2962).1" Label="param FromSyntax(InContainerBinder binder) 709068" />
<Node Id="10345:[2977..3016).1" Label="param FromSyntax(ConsList$TypeSymbol$ basesBeingResolved) 709069" />
<Node Id="10345:[3031..3043).1" Label="param FromSyntax(bool inUsing) 709070" />
<Node Id="10345:[3069..3118).1" Label="SyntaxList$UsingDirectiveSyntax$ usingDirectives; 709071" />
<Node Id="10345:[3102..3117).1" Label="usingDirectives 709072" />
<Node Id="10345:[3132..3193).1" Label="SyntaxList$ExternAliasDirectiveSyntax$ externAliasDirectives; 709073" />
<Node Id="10345:[3171..3192).1" Label="externAliasDirectives 709074" />
<Node Id="10345:[3207..4163).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
            {
                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings;
                externAliasDirectives = compilationUnit.Externs;
            }
            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
            {
                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : namespaceDecl.Usings;
                externAliasDirectives = namespaceDecl.Externs;
            }
            else
            {
                return Empty;
            } 709075" />
<Node Id="10345:[3299..3362).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 709076" />
<Node Id="10345:[3476..3483).1" Label="inUsing 709077" />
<Node Id="10345:[3530..3552).1" Label="compilationUnit.Usings 709078" />
<Node Id="10345:[3458..3553).1" Label="usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings; 709079" />
<Node Id="10345:[3571..3619).1" Label="externAliasDirectives = compilationUnit.Externs; 709080" />
<Node Id="10345:[4179..4307).1" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 709081" />
<Node Id="10345:[4179..4307).2" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 709082" />
<Node Id="10345:[4179..4307).4" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 709083" />
<Node Id="10345:[4179..4307).5" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 709084" />
<Node Id="10345:[4279..4292).1" Label="return Empty; 709085" />
<Node Id="10346:[11369..11508).14" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 709086" />
<Node Id="10346:[11369..11508).17" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 709087" />
<Node Id="10346:[11369..11508).18" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 709088" />
<Node Id="10346:[11369..11508).19" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 709089" />
<Node Id="10312:[7718..7727).2" Label="param LookupMembersInternal(int arity) 709090" />
<Node Id="10312:[7793..7814).2" Label="param LookupMembersInternal(Binder originalBinder) 709091" />
<Node Id="10312:[7816..7829).2" Label="param LookupMembersInternal(bool diagnose) 709092" />
<Node Id="10312:[7903..7936).5" Label="Debug.Assert(options.AreValid()); 709093" />
<Node Id="10312:[7916..7934).2" Label="options.AreValid() 709094" />
<Node Id="10353:[4698..4724).3" Label="param AreValid(this LookupOptions options) 709095" />
<Node Id="10353:[4750..4847).5" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 709096" />
<Node Id="10353:[4863..5000).9" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 709097" />
<Node Id="10353:[4863..5000).10" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 709098" />
<Node Id="10353:[5079..5183).5" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 709099" />
<Node Id="10353:[5197..5323).7" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 709100" />
<Node Id="10353:[5485..5759).13" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 709101" />
<Node Id="10353:[5485..5759).14" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 709102" />
<Node Id="10353:[5485..5759).15" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 709103" />
<Node Id="10353:[5775..5979).9" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 709104" />
<Node Id="10353:[5775..5979).11" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 709105" />
<Node Id="10353:[5995..6029).7" Label="return OnlyOneBitSet(onlyOptions); 709106" />
<Node Id="10353:[6002..6028).3" Label="OnlyOneBitSet(onlyOptions) 709107" />
<Node Id="10353:[6343..6358).3" Label="param OnlyOneBitSet(LookupOptions o) 709108" />
<Node Id="10353:[6384..6410).13" Label="return (o & (o - 1)) == 0; 709109" />
<Node Id="10353:[6384..6410).14" Label="return (o & (o - 1)) == 0; 709110" />
<Node Id="10312:[7952..7977).5" Label="Debug.Assert(arity $= 0); 709111" />
<Node Id="10312:[7952..7977).6" Label="Debug.Assert(arity $= 0); 709112" />
<Node Id="10312:[8049..8181).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709113" />
<Node Id="10312:[8049..8181).4" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709114" />
<Node Id="10312:[8049..8181).6" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709115" />
<Node Id="10312:[8049..8181).7" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709116" />
<Node Id="10312:[8049..8181).8" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709117" />
<Node Id="10312:[8049..8180).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 709118" />
<Node Id="10312:[18976..18995).1" Label="param LookupMembersInNamespace(LookupResult result) 709119" />
<Node Id="10312:[18997..19015).1" Label="param LookupMembersInNamespace(NamespaceSymbol ns) 709120" />
<Node Id="10312:[19017..19028).1" Label="param LookupMembersInNamespace(string name) 709121" />
<Node Id="10312:[19030..19039).1" Label="param LookupMembersInNamespace(int arity) 709122" />
<Node Id="10312:[19041..19062).1" Label="param LookupMembersInNamespace(LookupOptions options) 709123" />
<Node Id="10312:[19064..19085).1" Label="param LookupMembersInNamespace(Binder originalBinder) 709124" />
<Node Id="10312:[19087..19100).1" Label="param LookupMembersInNamespace(bool diagnose) 709125" />
<Node Id="10312:[19102..19148).1" Label="param LookupMembersInNamespace(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709126" />
<Node Id="10312:[19174..19243).1" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 709127" />
<Node Id="10312:[19174..19243).2" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 709128" />
<Node Id="10312:[19174..19243).3" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 709129" />
<Node Id="10312:[19174..19243).4" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 709130" />
<Node Id="10312:[19188..19242).1" Label="GetCandidateMembers(ns, name, options, originalBinder) 709131" />
<Node Id="10312:[61540..61570).3" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 709132" />
<Node Id="10312:[61572..61583).3" Label="param GetCandidateMembers(string name) 709133" />
<Node Id="10312:[61585..61606).3" Label="param GetCandidateMembers(LookupOptions options) 709134" />
<Node Id="10312:[61608..61629).3" Label="param GetCandidateMembers(Binder originalBinder) 709135" />
<Node Id="10312:[61655..62327).14" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 709136" />
<Node Id="10312:[61874..62327).1" Label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 709137" />
<Node Id="10312:[62098..62327).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 709138" />
<Node Id="10312:[62098..62327).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 709139" />
<Node Id="10312:[62279..62312).1" Label="return nsOrType.GetMembers(name); 709140" />
<Node Id="10312:[19259..19531).1" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 709141" />
<Node Id="10312:[19326..19460).1" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709142" />
<Node Id="10312:[19326..19460).2" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709143" />
<Node Id="10312:[19326..19460).3" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709144" />
<Node Id="10312:[19326..19460).6" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709145" />
<Node Id="10312:[19326..19460).7" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709146" />
<Node Id="10312:[19366..19459).1" Label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 709147" />
<Node Id="10312:[63424..63437).1" Label="param CheckViability(Symbol symbol) 709148" />
<Node Id="10312:[63439..63448).1" Label="param CheckViability(int arity) 709149" />
<Node Id="10312:[63450..63471).1" Label="param CheckViability(LookupOptions options) 709150" />
<Node Id="10312:[63473..63501).1" Label="param CheckViability(TypeSymbol accessThroughType) 709151" />
<Node Id="10312:[63503..63516).1" Label="param CheckViability(bool diagnose) 709152" />
<Node Id="10312:[63518..63564).1" Label="param CheckViability(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709153" />
<Node Id="10312:[63566..63612).1" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 709154" />
<Node Id="10312:[63381..70761).1" Label="param CheckViability(this) 709155" />
<Node Id="10312:[63638..63668).1" Label="bool inaccessibleViaQualifier; 709156" />
<Node Id="10312:[63682..63706).1" Label="DiagnosticInfo diagInfo; 709157" />
<Node Id="10312:[63859..64015).1" Label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias
                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)
                : symbol; 709158" />
<Node Id="10312:[63881..63912).1" Label="symbol.Kind == SymbolKind.Alias 709159" />
<Node Id="10312:[64121..69285).1" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709160" />
<Node Id="10312:[64121..69285).2" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709161" />
<Node Id="10312:[64121..69285).3" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709162" />
<Node Id="10312:[64353..69285).1" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709163" />
<Node Id="10312:[64353..69285).2" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709164" />
<Node Id="10312:[64353..69285).3" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709165" />
<Node Id="10312:[64353..69285).4" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709166" />
<Node Id="10312:[64353..69285).5" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709167" />
<Node Id="10312:[64357..64415).1" Label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 709168" />
<Node Id="10312:[80978..80991).1" Label="param WrongArity(Symbol symbol) 709169" />
<Node Id="10312:[80993..81002).1" Label="param WrongArity(int arity) 709170" />
<Node Id="10312:[81004..81017).1" Label="param WrongArity(bool diagnose) 709171" />
<Node Id="10312:[81019..81040).1" Label="param WrongArity(LookupOptions options) 709172" />
<Node Id="10312:[81042..81069).1" Label="param WrongArity(out DiagnosticInfo diagInfo) 709173" />
<Node Id="10312:[81095..84034).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 709174" />
<Node Id="10312:[83750..83991).1" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 709175" />
<Node Id="10312:[83750..83991).2" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 709176" />
<Node Id="10312:[84050..84066).1" Label="diagInfo = null; 709177" />
<Node Id="10312:[84080..84093).1" Label="return false; 709178" />
<Node Id="10312:[64353..69285).6" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709179" />
<Node Id="10312:[64537..64543).1" Label="InCref 709180" />
<Node Id="10306:[3196..3249).3" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 709181" />
<Node Id="10306:[3202..3247).9" Label="return this.Flags.Includes(BinderFlags.Cref); 709182" />
<Node Id="10306:[3202..3247).10" Label="return this.Flags.Includes(BinderFlags.Cref); 709183" />
<Node Id="10306:[3209..3246).3" Label="this.Flags.Includes(BinderFlags.Cref) 709184" />
<Node Id="10298:[471..492).20" Label="param Includes(this BinderFlags self) 709185" />
<Node Id="10298:[494..511).20" Label="param Includes(BinderFlags other) 709186" />
<Node Id="10312:[64532..69285).1" Label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709187" />
<Node Id="10312:[65229..69285).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709188" />
<Node Id="10312:[65229..69285).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709189" />
<Node Id="10312:[65474..69285).1" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709190" />
<Node Id="10312:[65474..69285).2" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709191" />
<Node Id="10312:[65730..65736).1" Label="InCref 709192" />
<Node Id="10312:[65726..69285).1" Label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709193" />
<Node Id="10312:[66182..66188).1" Label="InCref 709194" />
<Node Id="10312:[66177..69285).1" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709195" />
<Node Id="10312:[66177..69285).2" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709196" />
<Node Id="10312:[66177..69285).3" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709197" />
<Node Id="10312:[66177..69285).4" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709198" />
<Node Id="10312:[66291..66342).1" Label="RefineAccessThroughType(options, accessThroughType) 709199" />
<Node Id="10312:[75301..75322).1" Label="param RefineAccessThroughType(LookupOptions options) 709200" />
<Node Id="10312:[75324..75352).1" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 709201" />
<Node Id="10312:[75735..75866).1" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 709202" />
<Node Id="10312:[75735..75866).2" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 709203" />
<Node Id="10312:[75742..75804).1" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 709204" />
<Node Id="10312:[75735..75866).4" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 709205" />
<Node Id="10312:[66177..69285).7" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709206" />
<Node Id="10312:[66177..69285).8" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709207" />
<Node Id="10312:[66177..69285).9" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709208" />
<Node Id="10312:[66215..66540).1" Label="this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved) 709209" />
<Node Id="10312:[77528..77541).1" Label="param IsAccessible(Symbol symbol) 709210" />
<Node Id="10312:[77543..77571).1" Label="param IsAccessible(TypeSymbol accessThroughType) 709211" />
<Node Id="10312:[77573..77604).1" Label="param IsAccessible(out bool failedThroughTypeCheck) 709212" />
<Node Id="10312:[77606..77652).1" Label="param IsAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709213" />
<Node Id="10312:[77654..77700).1" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 709214" />
<Node Id="10312:[77501..78044).1" Label="param IsAccessible(this) 709215" />
<Node Id="10312:[77726..77892).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 709216" />
<Node Id="10312:[77726..77892).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 709217" />
<Node Id="10312:[77730..77782).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 709218" />
<Node Id="10298:[471..492).23" Label="param Includes(this BinderFlags self) 709219" />
<Node Id="10298:[494..511).23" Label="param Includes(BinderFlags other) 709220" />
<Node Id="10312:[77908..78033).1" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709221" />
<Node Id="10312:[77908..78033).2" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709222" />
<Node Id="10312:[77908..78033).3" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709223" />
<Node Id="10312:[77908..78033).4" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709224" />
<Node Id="10312:[77908..78033).5" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709225" />
<Node Id="10312:[77915..78032).1" Label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 709226" />
<Node Id="10312:[78387..78400).1" Label="param IsAccessibleHelper(Symbol symbol) 709227" />
<Node Id="10312:[78402..78430).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 709228" />
<Node Id="10312:[78432..78463).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 709229" />
<Node Id="10312:[78465..78511).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709230" />
<Node Id="10312:[78513..78552).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 709231" />
<Node Id="10312:[78346..78783).1" Label="param IsAccessibleHelper(this) 709232" />
<Node Id="10312:[78642..78772).1" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709233" />
<Node Id="10312:[78642..78772).2" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709234" />
<Node Id="10312:[78642..78772).3" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709235" />
<Node Id="10312:[78642..78772).4" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709236" />
<Node Id="10312:[78642..78772).5" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709237" />
<Node Id="10312:[78649..78771).1" Label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 709238" />
<Node Id="10346:[8019..8032).1" Label="param IsAccessibleHelper(Symbol symbol) 709239" />
<Node Id="10346:[8034..8062).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 709240" />
<Node Id="10346:[8064..8095).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 709241" />
<Node Id="10346:[8097..8143).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709242" />
<Node Id="10346:[8145..8184).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 709243" />
<Node Id="10346:[7977..8737).1" Label="param IsAccessibleHelper(this) 709244" />
<Node Id="10346:[8210..8251).1" Label="var type = _container as NamedTypeSymbol; 709245" />
<Node Id="10346:[8265..8726).1" Label="if ((object)type != null)
            {
                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);
            }
            else
            {
                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.
            } 709246" />
<Node Id="10346:[8265..8726).2" Label="if ((object)type != null)
            {
                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);
            }
            else
            {
                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.
            } 709247" />
<Node Id="10346:[8323..8450).1" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709248" />
<Node Id="10346:[8323..8450).2" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709249" />
<Node Id="10346:[8323..8450).3" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709250" />
<Node Id="10346:[8323..8450).4" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709251" />
<Node Id="10346:[8323..8450).5" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709252" />
<Node Id="10346:[8323..8450).6" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 709253" />
<Node Id="10346:[8330..8449).1" Label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 709254" />
<Node Id="10286:[30070..30083).1" Label="param IsSymbolAccessibleConditional(Symbol symbol) 709255" />
<Node Id="10286:[30098..30120).1" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 709256" />
<Node Id="10286:[30135..30160).1" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 709257" />
<Node Id="10286:[30175..30206).1" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 709258" />
<Node Id="10286:[30221..30268).1" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 709259" />
<Node Id="10286:[30283..30330).1" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 709260" />
<Node Id="10286:[30012..30691).1" Label="param IsSymbolAccessibleConditional(this) 709261" />
<Node Id="10286:[30356..30522).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 709262" />
<Node Id="10286:[30356..30522).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 709263" />
<Node Id="10286:[30360..30412).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 709264" />
<Node Id="10298:[471..492).24" Label="param Includes(this BinderFlags self) 709265" />
<Node Id="10298:[494..511).24" Label="param Includes(BinderFlags other) 709266" />
<Node Id="10286:[30538..30680).1" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709267" />
<Node Id="10286:[30538..30680).2" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709268" />
<Node Id="10286:[30538..30680).3" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709269" />
<Node Id="10286:[30538..30680).4" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709270" />
<Node Id="10286:[30538..30680).5" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709271" />
<Node Id="10286:[30538..30680).6" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 709272" />
<Node Id="10286:[30545..30679).1" Label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 709273" />
<Node Id="10060:[2108..2121).1" Label="param IsSymbolAccessible(Symbol symbol) 709274" />
<Node Id="10060:[2136..2158).1" Label="param IsSymbolAccessible(NamedTypeSymbol within) 709275" />
<Node Id="10060:[2173..2198).1" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 709276" />
<Node Id="10060:[2213..2244).1" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 709277" />
<Node Id="10060:[2259..2305).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709278" />
<Node Id="10060:[2320..2366).1" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 709279" />
<Node Id="10060:[2392..2555).1" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709280" />
<Node Id="10060:[2392..2555).2" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709281" />
<Node Id="10060:[2392..2555).3" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709282" />
<Node Id="10060:[2392..2555).4" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709283" />
<Node Id="10060:[2392..2555).5" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709284" />
<Node Id="10060:[2392..2555).6" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709285" />
<Node Id="10060:[2392..2555).7" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 709286" />
<Node Id="10060:[2399..2554).1" Label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 709287" />
<Node Id="10060:[5593..5606).1" Label="param IsSymbolAccessibleCore(Symbol symbol) 709288" />
<Node Id="10060:[5621..5634).1" Label="param IsSymbolAccessibleCore(Symbol within) 709289" />
<Node Id="10060:[5691..5716).1" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 709290" />
<Node Id="10060:[5731..5762).1" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 709291" />
<Node Id="10060:[5777..5806).1" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 709292" />
<Node Id="10060:[5821..5867).1" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709293" />
<Node Id="10060:[5882..5928).1" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 709294" />
<Node Id="10060:[5954..5991).1" Label="Debug.Assert((object)symbol != null); 709295" />
<Node Id="10060:[5954..5991).2" Label="Debug.Assert((object)symbol != null); 709296" />
<Node Id="10060:[6005..6042).1" Label="Debug.Assert((object)within != null); 709297" />
<Node Id="10060:[6005..6042).2" Label="Debug.Assert((object)within != null); 709298" />
<Node Id="10060:[6056..6090).1" Label="Debug.Assert(within.IsDefinition); 709299" />
<Node Id="10060:[6104..6172).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 709300" />
<Node Id="10060:[6188..6219).1" Label="failedThroughTypeCheck = false; 709301" />
<Node Id="10060:[6235..9907).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.ArrayType:
                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.PointerType:
                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.NamedType:
                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Alias:
                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Discard:
                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.FunctionPointerType:
                    var funcPtr = (FunctionPointerTypeSymbol)symbol;
                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }

                    foreach (var param in funcPtr.Signature.Parameters)
                    {
                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                        {
                            return false;
                        }
                    }

                    return true;

                case SymbolKind.ErrorType:
                    // Always assume that error types are accessible.
                    return true;

                case SymbolKind.TypeParameter:
                case SymbolKind.Parameter:
                case SymbolKind.Local:
                case SymbolKind.Label:
                case SymbolKind.Namespace:
                case SymbolKind.DynamicType:
                case SymbolKind.Assembly:
                case SymbolKind.NetModule:
                case SymbolKind.RangeVariable:
                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:
                    // These types of symbols are always accessible (if visible).
                    return true;

                case SymbolKind.Method:
                case SymbolKind.Property:
                case SymbolKind.Event:
                case SymbolKind.Field:
                    if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    }

                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);

                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 709302" />
<Node Id="10060:[8992..9004).1" Label="return true; 709303" />
<Node Id="10312:[66177..69285).11" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709304" />
<Node Id="10312:[67587..67593).1" Label="InCref 709305" />
<Node Id="10312:[67582..69285).1" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709306" />
<Node Id="10312:[67582..69285).2" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709307" />
<Node Id="10312:[67858..69285).1" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709308" />
<Node Id="10312:[67858..69285).2" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709309" />
<Node Id="10312:[68183..69285).1" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709310" />
<Node Id="10312:[68183..69285).2" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709311" />
<Node Id="10312:[68512..69285).1" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709312" />
<Node Id="10312:[68512..69285).2" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709313" />
<Node Id="10312:[68882..69285).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709314" />
<Node Id="10312:[68882..69285).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709315" />
<Node Id="10312:[69237..69270).1" Label="return LookupResult.Good(symbol); 709316" />
<Node Id="10312:[69244..69269).1" Label="LookupResult.Good(symbol) 709317" />
<Node Id="10354:[5400..5413).1" Label="param Good(Symbol symbol) 709318" />
<Node Id="10354:[5439..5508).1" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 709319" />
<Node Id="10354:[5439..5508).2" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 709320" />
<Node Id="10354:[5439..5508).3" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 709321" />
<Node Id="10354:[5446..5507).1" Label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 709322" />
<Node Id="10368:[1076..1097).1" Label="param SingleLookupResult(LookupResultKind kind) 709323" />
<Node Id="10368:[1099..1112).1" Label="param SingleLookupResult(Symbol symbol) 709324" />
<Node Id="10368:[1114..1134).1" Label="param SingleLookupResult(DiagnosticInfo error) 709325" />
<Node Id="10368:[1048..1256).1" Label="param SingleLookupResult(this) 709326" />
<Node Id="10368:[1160..1169).1" Label="this.Kind 709327" />
<Node Id="10368:[1191..1202).1" Label="this.Symbol 709328" />
<Node Id="10368:[1226..1236).1" Label="this.Error 709329" />
<Node Id="10312:[69237..69270).2" Label="return LookupResult.Good(symbol); 709330" />
<Node Id="10312:[19478..19516).1" Label="result.MergeEqual(resultOfThisMember); 709331" />
<Node Id="10312:[19478..19515).1" Label="result.MergeEqual(resultOfThisMember) 709332" />
<Node Id="10354:[10217..10242).1" Label="param MergeEqual(SingleLookupResult result) 709333" />
<Node Id="10354:[10192..10676).1" Label="param MergeEqual(this) 709334" />
<Node Id="10354:[10272..10276).1" Label="Kind 709335" />
<Node Id="10354:[4058..4122).16" Label="get
            {
                return _kind;
            } 709336" />
<Node Id="10354:[4094..4107).16" Label="return _kind; 709337" />
<Node Id="10354:[10268..10665).1" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 709338" />
<Node Id="10354:[10268..10665).2" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 709339" />
<Node Id="10354:[10404..10408).1" Label="Kind 709340" />
<Node Id="10354:[10386..10665).1" Label="if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 709341" />
<Node Id="10354:[10442..10463).1" Label="this.SetFrom(result); 709342" />
<Node Id="10354:[10442..10462).1" Label="this.SetFrom(result) 709343" />
<Node Id="10354:[8131..8155).1" Label="param SetFrom(SingleLookupResult other) 709344" />
<Node Id="10354:[8109..8324).1" Label="param SetFrom(this) 709345" />
<Node Id="10354:[8181..8186).1" Label="_kind 709346" />
<Node Id="10354:[8214..8234).1" Label="_symbolList.Clear(); 709347" />
<Node Id="10354:[8248..8278).1" Label="_symbolList.Add(other.Symbol); 709348" />
<Node Id="10354:[8248..8278).2" Label="_symbolList.Add(other.Symbol); 709349" />
<Node Id="10354:[8292..8298).1" Label="_error 709350" />
<Node Id="10354:[10442..10463).2" Label="this.SetFrom(result); 709351" />
<Node Id="10312:[19478..19516).2" Label="result.MergeEqual(resultOfThisMember); 709352" />
<Node Id="10312:[19259..19531).4" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 709353" />
<Node Id="10346:[11532..11552).2" Label="result.IsMultiViable 709354" />
<Node Id="10354:[4094..4107).18" Label="return _kind; 709355" />
<Node Id="10346:[11528..12231).3" Label="if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                } 709356" />
<Node Id="10346:[11665..12181).1" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 709357" />
<Node Id="10346:[11665..12181).2" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 709358" />
<Node Id="10346:[11665..12181).3" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 709359" />
<Node Id="10346:[11710..11746).1" Label="originalBinder.IsSemanticModelBinder 709360" />
<Node Id="10286:[2155..2260).3" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 709361" />
<Node Id="10286:[2191..2245).9" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 709362" />
<Node Id="10286:[2191..2245).10" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 709363" />
<Node Id="10286:[2198..2244).3" Label="this.Flags.Includes(BinderFlags.SemanticModel) 709364" />
<Node Id="10298:[471..492).26" Label="param Includes(this BinderFlags self) 709365" />
<Node Id="10298:[494..511).26" Label="param Includes(BinderFlags other) 709366" />
<Node Id="10346:[11665..12181).4" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 709367" />
<Node Id="10346:[11683..11747).1" Label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 709368" />
<Node Id="10345:[28212..28223).1" Label="param IsUsingAlias(string name) 709369" />
<Node Id="10345:[28225..28251).1" Label="param IsUsingAlias(bool callerIsSemanticModel) 709370" />
<Node Id="10345:[28185..28951).1" Label="param IsUsingAlias(this) 709371" />
<Node Id="10345:[28277..28305).1" Label="AliasAndUsingDirective node; 709372" />
<Node Id="10345:[28300..28304).1" Label="node 709373" />
<Node Id="10345:[28319..28911).1" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 709374" />
<Node Id="10345:[28319..28911).2" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 709375" />
<Node Id="10345:[28319..28911).3" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 709376" />
<Node Id="10345:[28927..28940).1" Label="return false; 709377" />
<Node Id="10346:[11665..12181).6" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 709378" />
<Node Id="10346:[11665..12181).7" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 709379" />
<Node Id="10346:[12205..12212).1" Label="return; 709380" />
<Node Id="10312:[4685..4699).3" Label="result.IsClear 709381" />
<Node Id="10354:[3684..3818).8" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 709382" />
<Node Id="10354:[3720..3803).57" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709383" />
<Node Id="10312:[4680..4787).5" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 709384" />
<Node Id="10312:[4749..4764).1" Label="binder = scope; 709385" />
<Node Id="10312:[4826..5058).11" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 709386" />
<Node Id="10312:[4826..5058).12" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 709387" />
<Node Id="10312:[5087..5101).1" Label="return binder; 709388" />
<Node Id="10312:[1585..1724).9" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709389" />
<Node Id="10319:[43504..43546).1" Label="diagnostics.Add(node, useSiteDiagnostics); 709390" />
<Node Id="10319:[43504..43546).2" Label="diagnostics.Add(node, useSiteDiagnostics); 709391" />
<Node Id="10319:[43504..43546).3" Label="diagnostics.Add(node, useSiteDiagnostics); 709392" />
<Node Id="10319:[43504..43546).4" Label="diagnostics.Add(node, useSiteDiagnostics); 709393" />
<Node Id="10319:[43562..43590).1" Label="Symbol bindingResult = null; 709394" />
<Node Id="10319:[43799..44676).1" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 709395" />
<Node Id="10319:[43799..44676).2" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 709396" />
<Node Id="10319:[43799..44676).3" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 709397" />
<Node Id="10319:[43853..43873).1" Label="IsViableType(result) 709398" />
<Node Id="10319:[41088..41107).1" Label="param IsViableType(LookupResult result) 709399" />
<Node Id="10319:[41138..41158).1" Label="result.IsMultiViable 709400" />
<Node Id="10354:[4919..5009).14" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 709401" />
<Node Id="10354:[4962..4966).14" Label="Kind 709402" />
<Node Id="10354:[4058..4122).20" Label="get
            {
                return _kind;
            } 709403" />
<Node Id="10354:[4094..4107).20" Label="return _kind; 709404" />
<Node Id="10319:[41133..41220).1" Label="if (!result.IsMultiViable)
            {
                return false;
            } 709405" />
<Node Id="10319:[41254..41268).1" Label="result.Symbols 709406" />
<Node Id="10354:[4525..4595).1" Label="get
            {
                return _symbolList;
            } 709407" />
<Node Id="10354:[4561..4580).1" Label="return _symbolList; 709408" />
<Node Id="10319:[41236..41680).1" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 709409" />
<Node Id="10319:[41302..41665).1" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 709410" />
<Node Id="10319:[41696..41709).1" Label="return false; 709411" />
<Node Id="10319:[43799..44676).4" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 709412" />
<Node Id="10319:[43799..44676).5" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 709413" />
<Node Id="10319:[43907..44661).1" Label="if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                } 709414" />
<Node Id="10319:[43907..44661).2" Label="if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                } 709415" />
<Node Id="10319:[44578..44642).1" Label="bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics); 709416" />
<Node Id="10319:[44578..44642).2" Label="bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics); 709417" />
<Node Id="10319:[44594..44641).1" Label="BindNativeIntegerSymbolIfAny(node, diagnostics) 709418" />
<Node Id="10319:[45850..45875).1" Label="param BindNativeIntegerSymbolIfAny(IdentifierNameSyntax node) 709419" />
<Node Id="10319:[45877..45902).1" Label="param BindNativeIntegerSymbolIfAny(DiagnosticBag diagnostics) 709420" />
<Node Id="10319:[45797..47405).1" Label="param BindNativeIntegerSymbolIfAny(this) 709421" />
<Node Id="10319:[45928..45952).1" Label="SpecialType specialType; 709422" />
<Node Id="10319:[45966..46327).1" Label="switch (node.Identifier.Text)
            {
                case 'nint':
                    specialType = SpecialType.System_IntPtr;
                    break;
                case 'nuint':
                    specialType = SpecialType.System_UIntPtr;
                    break;
                default:
                    return null;
            } 709423" />
<Node Id="10319:[46300..46312).1" Label="return null; 709424" />
<Node Id="10319:[44692..45392).1" Label="if (bindingResult is null)
            {
                bool wasError;

                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);
                if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
            } 709425" />
<Node Id="10319:[44751..44765).1" Label="bool wasError; 709426" />
<Node Id="10319:[44785..44930).1" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709427" />
<Node Id="10319:[44785..44930).2" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709428" />
<Node Id="10319:[44785..44930).3" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709429" />
<Node Id="10319:[44785..44930).5" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709430" />
<Node Id="10319:[44785..44930).6" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709431" />
<Node Id="10319:[44785..44930).7" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709432" />
<Node Id="10319:[44785..44930).8" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709433" />
<Node Id="10319:[44785..44930).9" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709434" />
<Node Id="10319:[44785..44930).10" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709435" />
<Node Id="10319:[44801..44929).1" Label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 709436" />
<Node Id="10319:[84167..84186).1" Label="param ResultSymbol(LookupResult result) 709437" />
<Node Id="10319:[84201..84218).1" Label="param ResultSymbol(string simpleName) 709438" />
<Node Id="10319:[84233..84242).1" Label="param ResultSymbol(int arity) 709439" />
<Node Id="10319:[84257..84273).1" Label="param ResultSymbol(SyntaxNode where) 709440" />
<Node Id="10319:[84288..84313).1" Label="param ResultSymbol(DiagnosticBag diagnostics) 709441" />
<Node Id="10319:[84328..84359).1" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 709442" />
<Node Id="10319:[84374..84391).1" Label="param ResultSymbol(out bool wasError) 709443" />
<Node Id="10319:[84406..84447).1" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 709444" />
<Node Id="10319:[84462..84508).1" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 709445" />
<Node Id="10319:[84124..109887).1" Label="param ResultSymbol(this) 709446" />
<Node Id="10319:[84534..84675).1" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709447" />
<Node Id="10319:[84534..84675).2" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709448" />
<Node Id="10319:[84534..84675).3" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709449" />
<Node Id="10319:[84534..84675).4" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709450" />
<Node Id="10319:[84534..84675).5" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709451" />
<Node Id="10319:[84534..84675).6" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709452" />
<Node Id="10319:[84534..84675).7" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709453" />
<Node Id="10319:[84534..84675).8" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709454" />
<Node Id="10319:[84534..84675).9" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 709455" />
<Node Id="10319:[84550..84674).1" Label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 709456" />
<Node Id="10319:[84907..109876).1" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 709457" />
<Node Id="10319:[84907..109876).2" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 709458" />
<Node Id="10319:[84907..109876).3" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 709459" />
<Node Id="10319:[84907..109876).4" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 709460" />
<Node Id="10319:[84907..109876).5" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 709461" />
<Node Id="10319:[84907..109876).6" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 709462" />
<Node Id="10319:[84907..109876).7" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 709463" />
<Node Id="10319:[84907..109876).8" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 709464" />
<Node Id="10319:[84907..109876).9" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 709465" />
<Node Id="10319:[84907..109876).10" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 709466" />
<Node Id="10319:[85320..85348).1" Label="Debug.Assert(where != null); 709467" />
<Node Id="10319:[85320..85348).2" Label="Debug.Assert(where != null); 709468" />
<Node Id="10319:[85366..85400).1" Label="Debug.Assert(diagnostics != null); 709469" />
<Node Id="10319:[85366..85400).2" Label="Debug.Assert(diagnostics != null); 709470" />
<Node Id="10319:[85434..85448).1" Label="result.Symbols 709471" />
<Node Id="10354:[4525..4595).2" Label="get
            {
                return _symbolList;
            } 709472" />
<Node Id="10354:[4561..4580).2" Label="return _symbolList; 709473" />
<Node Id="10319:[85420..85449).1" Label="var symbols = result.Symbols; 709474" />
<Node Id="10319:[85467..85484).1" Label="wasError = false; 709475" />
<Node Id="10319:[85508..85528).1" Label="result.IsMultiViable 709476" />
<Node Id="10354:[4919..5009).15" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 709477" />
<Node Id="10319:[85504..106825).1" Label="if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                } 709478" />
<Node Id="10319:[85570..106806).1" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 709479" />
<Node Id="10319:[85570..106806).2" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 709480" />
<Node Id="10319:[103953..103983).1" Label="var singleResult = symbols[0]; 709481" />
<Node Id="10319:[104078..104122).1" Label="var singleType = singleResult as TypeSymbol; 709482" />
<Node Id="10319:[104148..106735).1" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 709483" />
<Node Id="10319:[104148..106735).2" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 709484" />
<Node Id="10319:[104874..105336).1" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 709485" />
<Node Id="10319:[105368..106708).1" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 709486" />
<Node Id="10319:[105465..105535).1" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 709487" />
<Node Id="10319:[105465..105535).2" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 709488" />
<Node Id="10319:[105465..105535).3" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 709489" />
<Node Id="10319:[105476..105534).1" Label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 709490" />
<Node Id="10319:[76345..76358).2" Label="param ReportUseSiteDiagnostics(Symbol symbol) 709491" />
<Node Id="10319:[76360..76385).2" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 709492" />
<Node Id="10319:[76387..76402).2" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 709493" />
<Node Id="10319:[76494..76582).5" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 709494" />
<Node Id="10319:[76494..76582).6" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 709495" />
<Node Id="10319:[106763..106783).1" Label="return singleResult; 709496" />
<Node Id="10319:[84691..84861).1" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 709497" />
<Node Id="10319:[84877..84891).1" Label="return symbol; 709498" />
<Node Id="10319:[44948..45377).1" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 709499" />
<Node Id="10319:[45408..45421).1" Label="result.Free() 709500" />
<Node Id="10354:[11383..11549).2" Label="param Free(this) 709501" />
<Node Id="10354:[11428..11440).2" Label="this.Clear() 709502" />
<Node Id="10354:[3841..3991).4" Label="param Clear(this) 709503" />
<Node Id="10354:[3887..3892).4" Label="_kind 709504" />
<Node Id="10354:[3932..3952).4" Label="_symbolList.Clear(); 709505" />
<Node Id="10354:[3966..3980).4" Label="_error = null; 709506" />
<Node Id="10354:[3966..3972).4" Label="_error 709507" />
<Node Id="10354:[11428..11441).2" Label="this.Clear(); 709508" />
<Node Id="10354:[11455..11538).4" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 709509" />
<Node Id="10319:[45408..45422).1" Label="result.Free(); 709510" />
<Node Id="10319:[45436..45568).1" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 709511" />
<Node Id="10319:[45505..45551).1" Label="AreNullableAnnotationsEnabled(node.Identifier) 709512" />
<Node Id="10286:[10010..10027).2" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 709513" />
<Node Id="10286:[9966..10197).2" Label="param AreNullableAnnotationsEnabled(this) 709514" />
<Node Id="10319:[45436..45568).4" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 709515" />
<Node Id="10319:[45443..45567).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 709516" />
<Node Id="10287:[2306..2328).1" Label="param CreateUnannotated(bool isNullableEnabled) 709517" />
<Node Id="10287:[2330..2343).1" Label="param CreateUnannotated(Symbol symbol) 709518" />
<Node Id="10287:[2377..2471).1" Label="if (symbol is null)
                {
                    return default;
                } 709519" />
<Node Id="10287:[2489..2521).1" Label="var type = symbol as TypeSymbol; 709520" />
<Node Id="10287:[2539..2781).1" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 709521" />
<Node Id="10287:[2546..2558).1" Label="type is null 709522" />
<Node Id="10287:[2539..2781).3" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 709523" />
<Node Id="10287:[2582..2656).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) 709524" />
<Node Id="10287:[1144..1157).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(Symbol symbol) 709525" />
<Node Id="10287:[1159..1181).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(bool isNullableEnabled) 709526" />
<Node Id="10287:[1092..1409).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 709527" />
<Node Id="10287:[1215..1253).1" Label="Debug.Assert(!(symbol is TypeSymbol)); 709528" />
<Node Id="10287:[1271..1302).1" Label="_typeWithAnnotations = default; 709529" />
<Node Id="10287:[1271..1291).1" Label="_typeWithAnnotations 709530" />
<Node Id="10287:[1320..1327).1" Label="_symbol 709531" />
<Node Id="10287:[1355..1373).1" Label="_isNullableEnabled 709532" />
<Node Id="10319:[18724..18740).1" Label="result.IsDefault 709533" />
<Node Id="10287:[1857..1908).1" Label="=$ !_typeWithAnnotations.HasType && _symbol is null 709534" />
<Node Id="10287:[1893..1908).1" Label="_symbol is null 709535" />
<Node Id="10287:[1860..1908).1" Label="!_typeWithAnnotations.HasType && _symbol is null 709536" />
<Node Id="10319:[18710..18742).1" Label="Debug.Assert(!result.IsDefault); 709537" />
<Node Id="10319:[18758..18826).1" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 709538" />
<Node Id="10319:[18758..18826).2" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 709539" />
<Node Id="10319:[18758..18826).3" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 709540" />
<Node Id="10319:[18758..18826).4" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 709541" />
<Node Id="10319:[18765..18825).1" Label="UnwrapAlias(result, diagnostics, syntax, basesBeingResolved) 709542" />
<Node Id="10319:[51762..51815).2" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 709543" />
<Node Id="10319:[51817..51842).2" Label="param UnwrapAlias(DiagnosticBag diagnostics) 709544" />
<Node Id="10319:[51844..51861).2" Label="param UnwrapAlias(SyntaxNode syntax) 709545" />
<Node Id="10319:[51863..51909).2" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 709546" />
<Node Id="10319:[51698..52285).2" Label="param UnwrapAlias(this) 709547" />
<Node Id="10319:[51939..51953).2" Label="symbol.IsAlias 709548" />
<Node Id="10287:[1680..1716).2" Label="=$ _symbol?.Kind == SymbolKind.Alias 709549" />
<Node Id="10287:[1683..1716).3" Label="_symbol?.Kind == SymbolKind.Alias 709550" />
<Node Id="10319:[51935..52244).3" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 709551" />
<Node Id="10319:[71457..71582).1" Label="BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol 709552" />
<Node Id="10287:[1784..1818).1" Label="=$ Symbol as NamespaceOrTypeSymbol 709553" />
<Node Id="10287:[1787..1793).1" Label="Symbol 709554" />
<Node Id="10287:[1535..1573).1" Label="=$ _symbol ?? TypeWithAnnotations.Type 709555" />
<Node Id="10287:[1538..1573).1" Label="_symbol ?? TypeWithAnnotations.Type 709556" />
<Node Id="10287:[1787..1818).1" Label="Symbol as NamespaceOrTypeSymbol 709557" />
<Node Id="10319:[71597..71678).1" Label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 709558" />
<Node Id="10319:[71597..71678).2" Label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 709559" />
<Node Id="10319:[71597..71678).3" Label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 709560" />
<Node Id="10319:[71597..71678).4" Label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 709561" />
<Node Id="10319:[71597..71677).1" Label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false) 709562" />
<Node Id="10286:[21504..21529).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 709563" />
<Node Id="10286:[21531..21544).2" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 709564" />
<Node Id="10286:[21546..21561).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 709565" />
<Node Id="10286:[21563..21583).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 709566" />
<Node Id="10286:[21462..21711).2" Label="param ReportDiagnosticsIfObsolete(this) 709567" />
<Node Id="10286:[22044..22069).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 709568" />
<Node Id="10286:[22086..22108).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 709569" />
<Node Id="10286:[22110..22130).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 709570" />
<Node Id="10286:[22156..22600).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Event:
                case SymbolKind.Property:
                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);
                    break;
            } 709571" />
<Node Id="10319:[71694..71825).1" Label="bool isLeftUnboundGenericType = left.Kind == SymbolKind.NamedType &&
                ((NamedTypeSymbol)left).IsUnboundGenericType; 709572" />
<Node Id="10319:[71841..72158).1" Label="if (isLeftUnboundGenericType)
            {
                // If left name bound to an unbound generic type,
                // we want to perform right name lookup within
                // left's original named type definition.
                left = ((NamedTypeSymbol)left).OriginalDefinition;
            } 709573" />
<Node Id="10319:[72286..72420).1" Label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 709574" />
<Node Id="10319:[72286..72420).2" Label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 709575" />
<Node Id="10319:[72286..72420).3" Label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 709576" />
<Node Id="10319:[72286..72420).4" Label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 709577" />
<Node Id="10319:[72286..72420).5" Label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 709578" />
<Node Id="10319:[72298..72419).1" Label="this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left) 709579" />
<Node Id="10319:[39524..39547).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(SimpleNameSyntax syntax) 709580" />
<Node Id="10319:[39562..39587).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 709581" />
<Node Id="10319:[39602..39641).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 709582" />
<Node Id="10319:[39656..39687).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 709583" />
<Node Id="10319:[39702..39743).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 709584" />
<Node Id="10319:[39419..41043).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(this) 709585" />
<Node Id="10319:[40338..41032).1" Label="switch (syntax.Kind())
            {
                default:
                    return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(qualifierOpt ?? this.Compilation.Assembly.GlobalNamespace, string.Empty, arity: 0, errorInfo: null));

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt);
            } 709586" />
<Node Id="10319:[40890..41017).1" Label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt); 709587" />
<Node Id="10319:[40890..41017).2" Label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt); 709588" />
<Node Id="10319:[40890..41017).3" Label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt); 709589" />
<Node Id="10319:[40890..41017).4" Label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt); 709590" />
<Node Id="10319:[40897..41016).1" Label="BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt) 709591" />
<Node Id="10319:[54444..54466).1" Label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(GenericNameSyntax node) 709592" />
<Node Id="10319:[54481..54506).1" Label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 709593" />
<Node Id="10319:[54521..54560).1" Label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 709594" />
<Node Id="10319:[54575..54609).1" Label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 709595" />
<Node Id="10319:[54356..60744).1" Label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 709596" />
<Node Id="10319:[57602..57644).1" Label="var plainName = node.Identifier.ValueText; 709597" />
<Node Id="10319:[57660..57740).1" Label="SeparatedSyntaxList$TypeSyntax$ typeArguments = node.TypeArgumentList.Arguments; 709598" />
<Node Id="10319:[57756..57807).1" Label="bool isUnboundTypeExpr = node.IsUnboundGenericName; 709599" />
<Node Id="10319:[57821..57907).1" Label="LookupOptions options = GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false); 709600" />
<Node Id="10319:[57821..57907).2" Label="LookupOptions options = GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false); 709601" />
<Node Id="10319:[57845..57906).1" Label="GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false) 709602" />
<Node Id="10319:[50313..50328).2" Label="param GetSimpleNameLookupOptions(NameSyntax node) 709603" />
<Node Id="10319:[50330..50355).2" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 709604" />
<Node Id="10319:[57923..58084).1" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709605" />
<Node Id="10319:[57923..58084).2" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709606" />
<Node Id="10319:[57923..58084).3" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709607" />
<Node Id="10319:[57923..58084).4" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709608" />
<Node Id="10319:[57923..58084).5" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709609" />
<Node Id="10319:[57923..58084).6" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709610" />
<Node Id="10319:[57923..58084).7" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 709611" />
<Node Id="10319:[57959..58083).1" Label="LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options) 709612" />
<Node Id="10319:[60816..60841).1" Label="param LookupGenericTypeName(DiagnosticBag diagnostics) 709613" />
<Node Id="10319:[60856..60895).1" Label="param LookupGenericTypeName(ConsList$TypeSymbol$ basesBeingResolved) 709614" />
<Node Id="10319:[60910..60944).1" Label="param LookupGenericTypeName(NamespaceOrTypeSymbol qualifierOpt) 709615" />
<Node Id="10319:[60959..60981).1" Label="param LookupGenericTypeName(GenericNameSyntax node) 709616" />
<Node Id="10319:[60996..61012).1" Label="param LookupGenericTypeName(string plainName) 709617" />
<Node Id="10319:[61027..61036).1" Label="param LookupGenericTypeName(int arity) 709618" />
<Node Id="10319:[61051..61072).1" Label="param LookupGenericTypeName(LookupOptions options) 709619" />
<Node Id="10319:[60756..63756).1" Label="param LookupGenericTypeName(this) 709620" />
<Node Id="10319:[61098..61209).1" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709621" />
<Node Id="10319:[61098..61209).2" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709622" />
<Node Id="10319:[61098..61209).3" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709623" />
<Node Id="10319:[61098..61209).4" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709624" />
<Node Id="10319:[61098..61209).5" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709625" />
<Node Id="10319:[61116..61208).1" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics) 709626" />
<Node Id="10319:[63849..63870).2" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 709627" />
<Node Id="10319:[63885..63919).2" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 709628" />
<Node Id="10319:[63934..63945).2" Label="param CreateErrorIfLookupOnTypeParameter(string name) 709629" />
<Node Id="10319:[63960..63969).2" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 709630" />
<Node Id="10319:[63984..64009).2" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 709631" />
<Node Id="10319:[63768..64484).2" Label="param CreateErrorIfLookupOnTypeParameter(this) 709632" />
<Node Id="10319:[64035..64445).5" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 709633" />
<Node Id="10319:[64035..64445).6" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 709634" />
<Node Id="10319:[64035..64445).7" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 709635" />
<Node Id="10319:[64461..64473).3" Label="return null; 709636" />
<Node Id="10319:[61098..61209).6" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 709637" />
<Node Id="10319:[61223..61322).1" Label="if ((object)errorResult != null)
            {
                return errorResult;
            } 709638" />
<Node Id="10319:[61223..61322).2" Label="if ((object)errorResult != null)
            {
                return errorResult;
            } 709639" />
<Node Id="10319:[61357..61383).1" Label="LookupResult.GetInstance() 709640" />
<Node Id="10354:[11244..11285).13" Label="var instance = s_poolInstance.Allocate(); 709641" />
<Node Id="10354:[11312..11328).3" Label="instance.IsClear 709642" />
<Node Id="10354:[3684..3818).9" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 709643" />
<Node Id="10354:[3720..3803).61" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709644" />
<Node Id="10354:[3720..3803).62" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709645" />
<Node Id="10354:[3720..3803).63" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 709646" />
<Node Id="10354:[11299..11330).7" Label="Debug.Assert(instance.IsClear); 709647" />
<Node Id="10319:[61338..61384).1" Label="var lookupResult = LookupResult.GetInstance(); 709648" />
<Node Id="10319:[61398..61448).1" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 709649" />
<Node Id="10319:[61462..61626).1" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709650" />
<Node Id="10319:[61462..61626).2" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709651" />
<Node Id="10319:[61462..61626).3" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709652" />
<Node Id="10319:[61462..61626).4" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709653" />
<Node Id="10319:[61462..61626).5" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709654" />
<Node Id="10319:[61462..61626).6" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709655" />
<Node Id="10319:[61462..61626).7" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709656" />
<Node Id="10319:[61462..61626).9" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 709657" />
<Node Id="10319:[61462..61625).1" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 709658" />
<Node Id="10312:[994..1013).2" Label="param LookupSymbolsSimpleName(LookupResult result) 709659" />
<Node Id="10312:[1028..1062).2" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 709660" />
<Node Id="10312:[1077..1093).2" Label="param LookupSymbolsSimpleName(string plainName) 709661" />
<Node Id="10312:[1108..1117).2" Label="param LookupSymbolsSimpleName(int arity) 709662" />
<Node Id="10312:[1132..1171).2" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 709663" />
<Node Id="10312:[1186..1207).2" Label="param LookupSymbolsSimpleName(LookupOptions options) 709664" />
<Node Id="10312:[1222..1235).2" Label="param LookupSymbolsSimpleName(bool diagnose) 709665" />
<Node Id="10312:[1250..1296).2" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709666" />
<Node Id="10312:[942..1750).2" Label="param LookupSymbolsSimpleName(this) 709667" />
<Node Id="10312:[1585..1724).10" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709668" />
<Node Id="10312:[1585..1724).11" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709669" />
<Node Id="10312:[1585..1724).12" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709670" />
<Node Id="10312:[1585..1724).13" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709671" />
<Node Id="10312:[1585..1724).14" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709672" />
<Node Id="10312:[1585..1724).16" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709673" />
<Node Id="10312:[1585..1724).17" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 709674" />
<Node Id="10312:[5830..5839).2" Label="param LookupSymbolsOrMembersInternal(int arity) 709675" />
<Node Id="10312:[5944..5957).2" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 709676" />
<Node Id="10312:[5663..6444).2" Label="param LookupSymbolsOrMembersInternal(this) 709677" />
<Node Id="10312:[6287..6418).1" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709678" />
<Node Id="10312:[6287..6418).2" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709679" />
<Node Id="10312:[6287..6418).3" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709680" />
<Node Id="10312:[6287..6418).4" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709681" />
<Node Id="10312:[6287..6418).5" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709682" />
<Node Id="10312:[6287..6418).6" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709683" />
<Node Id="10312:[6287..6418).7" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709684" />
<Node Id="10312:[6287..6418).8" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709685" />
<Node Id="10312:[6287..6418).9" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 709686" />
<Node Id="10312:[6287..6417).1" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 709687" />
<Node Id="10312:[7652..7671).3" Label="param LookupMembersInternal(LookupResult result) 709688" />
<Node Id="10312:[7673..7703).3" Label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 709689" />
<Node Id="10312:[7705..7716).3" Label="param LookupMembersInternal(string name) 709690" />
<Node Id="10312:[7718..7727).3" Label="param LookupMembersInternal(int arity) 709691" />
<Node Id="10312:[7729..7768).3" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 709692" />
<Node Id="10312:[7770..7791).3" Label="param LookupMembersInternal(LookupOptions options) 709693" />
<Node Id="10312:[7793..7814).3" Label="param LookupMembersInternal(Binder originalBinder) 709694" />
<Node Id="10312:[7816..7829).3" Label="param LookupMembersInternal(bool diagnose) 709695" />
<Node Id="10312:[7831..7877).3" Label="param LookupMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709696" />
<Node Id="10312:[7615..8420).3" Label="param LookupMembersInternal(this) 709697" />
<Node Id="10312:[7903..7936).9" Label="Debug.Assert(options.AreValid()); 709698" />
<Node Id="10312:[7916..7934).3" Label="options.AreValid() 709699" />
<Node Id="10353:[4698..4724).4" Label="param AreValid(this LookupOptions options) 709700" />
<Node Id="10353:[4750..4847).7" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 709701" />
<Node Id="10353:[4863..5000).13" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 709702" />
<Node Id="10353:[4863..5000).14" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 709703" />
<Node Id="10353:[5079..5183).7" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 709704" />
<Node Id="10353:[5197..5323).10" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 709705" />
<Node Id="10353:[5485..5759).19" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 709706" />
<Node Id="10353:[5485..5759).20" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 709707" />
<Node Id="10353:[5485..5759).21" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 709708" />
<Node Id="10353:[5775..5979).13" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 709709" />
<Node Id="10353:[5775..5979).15" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 709710" />
<Node Id="10353:[5995..6029).10" Label="return OnlyOneBitSet(onlyOptions); 709711" />
<Node Id="10353:[6002..6028).4" Label="OnlyOneBitSet(onlyOptions) 709712" />
<Node Id="10353:[6343..6358).4" Label="param OnlyOneBitSet(LookupOptions o) 709713" />
<Node Id="10353:[6384..6410).19" Label="return (o & (o - 1)) == 0; 709714" />
<Node Id="10353:[6384..6410).20" Label="return (o & (o - 1)) == 0; 709715" />
<Node Id="10312:[7952..7977).9" Label="Debug.Assert(arity $= 0); 709716" />
<Node Id="10312:[7952..7977).10" Label="Debug.Assert(arity $= 0); 709717" />
<Node Id="10312:[7991..8409).3" Label="if (nsOrType.IsNamespace)
            {
                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
            } 709718" />
<Node Id="10312:[8049..8181).12" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709719" />
<Node Id="10312:[8049..8181).13" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709720" />
<Node Id="10312:[8049..8181).15" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709721" />
<Node Id="10312:[8049..8181).16" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709722" />
<Node Id="10312:[8049..8181).17" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 709723" />
<Node Id="10312:[19030..19039).2" Label="param LookupMembersInNamespace(int arity) 709724" />
<Node Id="10312:[19087..19100).2" Label="param LookupMembersInNamespace(bool diagnose) 709725" />
<Node Id="10312:[61608..61629).4" Label="param GetCandidateMembers(Binder originalBinder) 709726" />
<Node Id="10312:[19326..19460).13" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709727" />
<Node Id="10312:[19326..19460).17" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709728" />
<Node Id="10312:[19326..19460).18" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709729" />
<Node Id="10312:[63439..63448).2" Label="param CheckViability(int arity) 709730" />
<Node Id="10312:[63473..63501).2" Label="param CheckViability(TypeSymbol accessThroughType) 709731" />
<Node Id="10312:[63503..63516).2" Label="param CheckViability(bool diagnose) 709732" />
<Node Id="10312:[63566..63612).2" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 709733" />
<Node Id="10312:[63381..70761).2" Label="param CheckViability(this) 709734" />
<Node Id="10312:[63638..63668).2" Label="bool inaccessibleViaQualifier; 709735" />
<Node Id="10312:[63682..63706).2" Label="DiagnosticInfo diagInfo; 709736" />
<Node Id="10312:[64353..69285).9" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709737" />
<Node Id="10312:[64353..69285).10" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709738" />
<Node Id="10312:[64353..69285).12" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709739" />
<Node Id="10312:[80978..80991).2" Label="param WrongArity(Symbol symbol) 709740" />
<Node Id="10312:[80993..81002).2" Label="param WrongArity(int arity) 709741" />
<Node Id="10312:[81004..81017).2" Label="param WrongArity(bool diagnose) 709742" />
<Node Id="10312:[81019..81040).2" Label="param WrongArity(LookupOptions options) 709743" />
<Node Id="10312:[81042..81069).2" Label="param WrongArity(out DiagnosticInfo diagInfo) 709744" />
<Node Id="10312:[81095..84034).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 709745" />
<Node Id="10312:[81196..82523).1" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 709746" />
<Node Id="10312:[81196..82523).2" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 709747" />
<Node Id="10312:[81319..81371).1" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 709748" />
<Node Id="10312:[81495..81570).1" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709749" />
<Node Id="10312:[81495..81570).2" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709750" />
<Node Id="10312:[81596..82500).1" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 709751" />
<Node Id="10312:[81596..82500).2" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 709752" />
<Node Id="10312:[81628..81659).1" Label="options.IsAttributeTypeLookup() 709753" />
<Node Id="10353:[7504..7530).3" Label="param IsAttributeTypeLookup(this LookupOptions options) 709754" />
<Node Id="10312:[81596..82500).5" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 709755" />
<Node Id="10312:[84050..84066).3" Label="diagInfo = null; 709756" />
<Node Id="10312:[66177..69285).16" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709757" />
<Node Id="10312:[66291..66342).2" Label="RefineAccessThroughType(options, accessThroughType) 709758" />
<Node Id="10312:[75301..75322).2" Label="param RefineAccessThroughType(LookupOptions options) 709759" />
<Node Id="10312:[75324..75352).2" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 709760" />
<Node Id="10312:[75735..75866).6" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 709761" />
<Node Id="10312:[75735..75866).7" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 709762" />
<Node Id="10312:[75742..75804).2" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 709763" />
<Node Id="10312:[75735..75866).9" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 709764" />
<Node Id="10312:[66177..69285).19" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709765" />
<Node Id="10312:[66177..69285).20" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709766" />
<Node Id="10312:[66177..69285).21" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 709767" />
<Node Id="10312:[77543..77571).2" Label="param IsAccessible(TypeSymbol accessThroughType) 709768" />
<Node Id="10312:[77573..77604).2" Label="param IsAccessible(out bool failedThroughTypeCheck) 709769" />
<Node Id="10312:[77654..77700).2" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 709770" />
<Node Id="10312:[77726..77892).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 709771" />
<Node Id="10312:[77726..77892).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 709772" />
<Node Id="10312:[77730..77782).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 709773" />
<Node Id="10298:[471..492).30" Label="param Includes(this BinderFlags self) 709774" />
<Node Id="10298:[494..511).30" Label="param Includes(BinderFlags other) 709775" />
<Node Id="10312:[78402..78430).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 709776" />
<Node Id="10312:[78432..78463).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 709777" />
<Node Id="10312:[78513..78552).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 709778" />
<Node Id="10346:[8034..8062).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 709779" />
<Node Id="10346:[8064..8095).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 709780" />
<Node Id="10346:[8145..8184).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 709781" />
<Node Id="10286:[30098..30120).2" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 709782" />
<Node Id="10286:[30135..30160).2" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 709783" />
<Node Id="10286:[30175..30206).2" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 709784" />
<Node Id="10286:[30283..30330).2" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 709785" />
<Node Id="10286:[30012..30691).2" Label="param IsSymbolAccessibleConditional(this) 709786" />
<Node Id="10286:[30356..30522).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 709787" />
<Node Id="10286:[30356..30522).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 709788" />
<Node Id="10286:[30360..30412).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 709789" />
<Node Id="10298:[471..492).31" Label="param Includes(this BinderFlags self) 709790" />
<Node Id="10298:[494..511).31" Label="param Includes(BinderFlags other) 709791" />
<Node Id="10060:[2136..2158).2" Label="param IsSymbolAccessible(NamedTypeSymbol within) 709792" />
<Node Id="10060:[2173..2198).2" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 709793" />
<Node Id="10060:[2213..2244).2" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 709794" />
<Node Id="10060:[2320..2366).2" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 709795" />
<Node Id="10060:[5621..5634).2" Label="param IsSymbolAccessibleCore(Symbol within) 709796" />
<Node Id="10060:[5691..5716).2" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 709797" />
<Node Id="10060:[5731..5762).2" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 709798" />
<Node Id="10060:[5777..5806).2" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 709799" />
<Node Id="10060:[5882..5928).2" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 709800" />
<Node Id="10060:[5954..5991).5" Label="Debug.Assert((object)symbol != null); 709801" />
<Node Id="10060:[6005..6042).5" Label="Debug.Assert((object)within != null); 709802" />
<Node Id="10060:[6005..6042).6" Label="Debug.Assert((object)within != null); 709803" />
<Node Id="10060:[6056..6090).3" Label="Debug.Assert(within.IsDefinition); 709804" />
<Node Id="10060:[6104..6172).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 709805" />
<Node Id="10060:[6188..6219).3" Label="failedThroughTypeCheck = false; 709806" />
<Node Id="10060:[6814..6920).1" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 709807" />
<Node Id="10060:[6814..6920).2" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 709808" />
<Node Id="10060:[6814..6920).3" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 709809" />
<Node Id="10060:[6814..6920).4" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 709810" />
<Node Id="10060:[6821..6919).1" Label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 709811" />
<Node Id="10060:[10180..10200).1" Label="param IsNamedTypeAccessible(NamedTypeSymbol type) 709812" />
<Node Id="10060:[10202..10215).1" Label="param IsNamedTypeAccessible(Symbol within) 709813" />
<Node Id="10060:[10217..10263).1" Label="param IsNamedTypeAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 709814" />
<Node Id="10060:[10265..10311).1" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 709815" />
<Node Id="10060:[10337..10405).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 709816" />
<Node Id="10060:[10419..10454).1" Label="Debug.Assert((object)type != null); 709817" />
<Node Id="10060:[10419..10454).2" Label="Debug.Assert((object)type != null); 709818" />
<Node Id="10060:[10470..10516).1" Label="var compilation = within.DeclaringCompilation; 709819" />
<Node Id="10060:[10532..10544).1" Label="bool unused; 709820" />
<Node Id="10060:[10558..11295).1" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 709821" />
<Node Id="10060:[11311..11352).1" Label="var containingType = type.ContainingType; 709822" />
<Node Id="10060:[11366..11675).1" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 709823" />
<Node Id="10060:[11366..11675).2" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 709824" />
<Node Id="10060:[11373..11403).1" Label="(object)containingType == null 709825" />
<Node Id="10060:[11366..11675).5" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 709826" />
<Node Id="10060:[11423..11509).1" Label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 709827" />
<Node Id="10060:[11990..12013).1" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 709828" />
<Node Id="10060:[12028..12063).1" Label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 709829" />
<Node Id="10060:[12078..12091).1" Label="param IsNonNestedTypeAccessible(Symbol within) 709830" />
<Node Id="10060:[12117..12185).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 709831" />
<Node Id="10060:[12199..12238).1" Label="Debug.Assert((object)assembly != null); 709832" />
<Node Id="10060:[12199..12238).2" Label="Debug.Assert((object)assembly != null); 709833" />
<Node Id="10060:[12254..13527).1" Label="switch (declaredAccessibility)
            {
                case Accessibility.NotApplicable:
                case Accessibility.Public:
                    // Public symbols are always accessible from any context
                    return true;

                case Accessibility.Private:
                case Accessibility.Protected:
                case Accessibility.ProtectedAndInternal:
                    // Shouldn't happen except in error cases.
                    return false;

                case Accessibility.Internal:
                case Accessibility.ProtectedOrInternal:

                    // within is typically a type
                    var withinType = within as NamedTypeSymbol;
                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;

                    // An internal type is accessible if we're in the same assembly or we have
                    // friend access to the assembly it was defined in.
                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);

                default:
                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);
            } 709834" />
<Node Id="10060:[12494..12506).1" Label="return true; 709835" />
<Node Id="10354:[10192..10676).2" Label="param MergeEqual(this) 709836" />
<Node Id="10354:[4094..4107).22" Label="return _kind; 709837" />
<Node Id="10312:[19326..19460).24" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709838" />
<Node Id="10312:[19326..19460).28" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709839" />
<Node Id="10312:[19326..19460).29" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709840" />
<Node Id="10312:[63439..63448).3" Label="param CheckViability(int arity) 709841" />
<Node Id="10312:[63473..63501).3" Label="param CheckViability(TypeSymbol accessThroughType) 709842" />
<Node Id="10312:[63503..63516).3" Label="param CheckViability(bool diagnose) 709843" />
<Node Id="10312:[63566..63612).3" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 709844" />
<Node Id="10312:[63638..63668).3" Label="bool inaccessibleViaQualifier; 709845" />
<Node Id="10312:[63682..63706).3" Label="DiagnosticInfo diagInfo; 709846" />
<Node Id="10312:[80978..80991).3" Label="param WrongArity(Symbol symbol) 709847" />
<Node Id="10312:[80993..81002).3" Label="param WrongArity(int arity) 709848" />
<Node Id="10312:[81004..81017).3" Label="param WrongArity(bool diagnose) 709849" />
<Node Id="10312:[81019..81040).3" Label="param WrongArity(LookupOptions options) 709850" />
<Node Id="10312:[81042..81069).3" Label="param WrongArity(out DiagnosticInfo diagInfo) 709851" />
<Node Id="10312:[81095..84034).3" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 709852" />
<Node Id="10312:[81196..82523).5" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 709853" />
<Node Id="10312:[81196..82523).6" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 709854" />
<Node Id="10312:[81319..81371).2" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 709855" />
<Node Id="10312:[81495..81570).6" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709856" />
<Node Id="10312:[81495..81570).7" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709857" />
<Node Id="10312:[81596..82500).7" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 709858" />
<Node Id="10312:[81731..82431).1" Label="if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            } 709859" />
<Node Id="10312:[81929..81937).1" Label="diagnose 709860" />
<Node Id="10312:[81918..82042).1" Label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null; 709861" />
<Node Id="10312:[81918..82042).2" Label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null; 709862" />
<Node Id="10312:[81940..82034).1" Label="new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) 709863" />
<Node Id="10312:[81940..82034).2" Label="new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) 709864" />
<Node Id="10312:[82461..82473).1" Label="return true; 709865" />
<Node Id="10312:[64449..64498).1" Label="return LookupResult.WrongArity(symbol, diagInfo); 709866" />
<Node Id="10312:[64449..64498).2" Label="return LookupResult.WrongArity(symbol, diagInfo); 709867" />
<Node Id="10312:[64456..64497).1" Label="LookupResult.WrongArity(symbol, diagInfo) 709868" />
<Node Id="10354:[5577..5590).1" Label="param WrongArity(Symbol symbol) 709869" />
<Node Id="10354:[5592..5612).1" Label="param WrongArity(DiagnosticInfo error) 709870" />
<Node Id="10354:[5638..5712).1" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709871" />
<Node Id="10354:[5638..5712).2" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709872" />
<Node Id="10354:[5638..5712).3" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709873" />
<Node Id="10354:[5638..5712).4" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709874" />
<Node Id="10354:[5645..5711).1" Label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 709875" />
<Node Id="10368:[1076..1097).3" Label="param SingleLookupResult(LookupResultKind kind) 709876" />
<Node Id="10368:[1099..1112).3" Label="param SingleLookupResult(Symbol symbol) 709877" />
<Node Id="10368:[1114..1134).3" Label="param SingleLookupResult(DiagnosticInfo error) 709878" />
<Node Id="10368:[1048..1256).3" Label="param SingleLookupResult(this) 709879" />
<Node Id="10312:[64449..64498).3" Label="return LookupResult.WrongArity(symbol, diagInfo); 709880" />
<Node Id="10354:[10268..10665).8" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 709881" />
<Node Id="10312:[19326..19460).40" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709882" />
<Node Id="10312:[63473..63501).4" Label="param CheckViability(TypeSymbol accessThroughType) 709883" />
<Node Id="10312:[63566..63612).4" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 709884" />
<Node Id="10312:[63638..63668).4" Label="bool inaccessibleViaQualifier; 709885" />
<Node Id="10312:[63682..63706).4" Label="DiagnosticInfo diagInfo; 709886" />
<Node Id="10312:[81019..81040).4" Label="param WrongArity(LookupOptions options) 709887" />
<Node Id="10312:[81042..81069).4" Label="param WrongArity(out DiagnosticInfo diagInfo) 709888" />
<Node Id="10312:[81495..81570).11" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709889" />
<Node Id="10312:[82275..82283).1" Label="diagnose 709890" />
<Node Id="10312:[82264..82400).1" Label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null; 709891" />
<Node Id="10312:[82264..82400).2" Label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null; 709892" />
<Node Id="10312:[82286..82392).1" Label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 709893" />
<Node Id="10312:[82286..82392).2" Label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 709894" />
<Node Id="10312:[82461..82473).3" Label="return true; 709895" />
<Node Id="10312:[64449..64498).5" Label="return LookupResult.WrongArity(symbol, diagInfo); 709896" />
<Node Id="10312:[64449..64498).6" Label="return LookupResult.WrongArity(symbol, diagInfo); 709897" />
<Node Id="10312:[64456..64497).2" Label="LookupResult.WrongArity(symbol, diagInfo) 709898" />
<Node Id="10354:[5577..5590).2" Label="param WrongArity(Symbol symbol) 709899" />
<Node Id="10354:[5592..5612).2" Label="param WrongArity(DiagnosticInfo error) 709900" />
<Node Id="10354:[5638..5712).6" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709901" />
<Node Id="10354:[5638..5712).7" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709902" />
<Node Id="10354:[5638..5712).8" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709903" />
<Node Id="10354:[5638..5712).9" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709904" />
<Node Id="10354:[5645..5711).2" Label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 709905" />
<Node Id="10368:[1076..1097).4" Label="param SingleLookupResult(LookupResultKind kind) 709906" />
<Node Id="10368:[1099..1112).4" Label="param SingleLookupResult(Symbol symbol) 709907" />
<Node Id="10368:[1114..1134).4" Label="param SingleLookupResult(DiagnosticInfo error) 709908" />
<Node Id="10368:[1048..1256).4" Label="param SingleLookupResult(this) 709909" />
<Node Id="10312:[64449..64498).7" Label="return LookupResult.WrongArity(symbol, diagInfo); 709910" />
<Node Id="10354:[10268..10665).11" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 709911" />
<Node Id="10312:[19326..19460).51" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709912" />
<Node Id="10312:[63473..63501).5" Label="param CheckViability(TypeSymbol accessThroughType) 709913" />
<Node Id="10312:[63566..63612).5" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 709914" />
<Node Id="10312:[63638..63668).5" Label="bool inaccessibleViaQualifier; 709915" />
<Node Id="10312:[63682..63706).5" Label="DiagnosticInfo diagInfo; 709916" />
<Node Id="10312:[81019..81040).5" Label="param WrongArity(LookupOptions options) 709917" />
<Node Id="10312:[81042..81069).5" Label="param WrongArity(out DiagnosticInfo diagInfo) 709918" />
<Node Id="10312:[81495..81570).16" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709919" />
<Node Id="10312:[82461..82473).5" Label="return true; 709920" />
<Node Id="10312:[64449..64498).9" Label="return LookupResult.WrongArity(symbol, diagInfo); 709921" />
<Node Id="10312:[64456..64497).3" Label="LookupResult.WrongArity(symbol, diagInfo) 709922" />
<Node Id="10354:[5577..5590).3" Label="param WrongArity(Symbol symbol) 709923" />
<Node Id="10354:[5592..5612).3" Label="param WrongArity(DiagnosticInfo error) 709924" />
<Node Id="10354:[5638..5712).11" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709925" />
<Node Id="10354:[5638..5712).12" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709926" />
<Node Id="10354:[5638..5712).13" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709927" />
<Node Id="10354:[5638..5712).14" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709928" />
<Node Id="10354:[5645..5711).3" Label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 709929" />
<Node Id="10368:[1076..1097).5" Label="param SingleLookupResult(LookupResultKind kind) 709930" />
<Node Id="10368:[1099..1112).5" Label="param SingleLookupResult(Symbol symbol) 709931" />
<Node Id="10368:[1114..1134).5" Label="param SingleLookupResult(DiagnosticInfo error) 709932" />
<Node Id="10368:[1048..1256).5" Label="param SingleLookupResult(this) 709933" />
<Node Id="10312:[64449..64498).11" Label="return LookupResult.WrongArity(symbol, diagInfo); 709934" />
<Node Id="10354:[10268..10665).14" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 709935" />
<Node Id="10312:[81019..81040).6" Label="param WrongArity(LookupOptions options) 709936" />
<Node Id="10312:[81495..81570).21" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709937" />
<Node Id="10312:[81495..81570).22" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709938" />
<Node Id="10312:[82461..82473).7" Label="return true; 709939" />
<Node Id="10312:[64449..64498).13" Label="return LookupResult.WrongArity(symbol, diagInfo); 709940" />
<Node Id="10312:[64449..64498).14" Label="return LookupResult.WrongArity(symbol, diagInfo); 709941" />
<Node Id="10312:[64456..64497).4" Label="LookupResult.WrongArity(symbol, diagInfo) 709942" />
<Node Id="10354:[5577..5590).4" Label="param WrongArity(Symbol symbol) 709943" />
<Node Id="10354:[5592..5612).4" Label="param WrongArity(DiagnosticInfo error) 709944" />
<Node Id="10354:[5638..5712).16" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709945" />
<Node Id="10354:[5638..5712).17" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709946" />
<Node Id="10354:[5638..5712).18" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709947" />
<Node Id="10354:[5638..5712).19" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709948" />
<Node Id="10354:[5645..5711).4" Label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 709949" />
<Node Id="10368:[1076..1097).6" Label="param SingleLookupResult(LookupResultKind kind) 709950" />
<Node Id="10368:[1099..1112).6" Label="param SingleLookupResult(Symbol symbol) 709951" />
<Node Id="10368:[1114..1134).6" Label="param SingleLookupResult(DiagnosticInfo error) 709952" />
<Node Id="10368:[1048..1256).6" Label="param SingleLookupResult(this) 709953" />
<Node Id="10312:[64449..64498).15" Label="return LookupResult.WrongArity(symbol, diagInfo); 709954" />
<Node Id="10354:[10268..10665).17" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 709955" />
<Node Id="10312:[19326..19460).73" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709956" />
<Node Id="10312:[63473..63501).7" Label="param CheckViability(TypeSymbol accessThroughType) 709957" />
<Node Id="10312:[63566..63612).7" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 709958" />
<Node Id="10312:[63638..63668).7" Label="bool inaccessibleViaQualifier; 709959" />
<Node Id="10312:[81019..81040).7" Label="param WrongArity(LookupOptions options) 709960" />
<Node Id="10312:[81042..81069).7" Label="param WrongArity(out DiagnosticInfo diagInfo) 709961" />
<Node Id="10312:[81495..81570).26" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709962" />
<Node Id="10312:[81495..81570).27" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 709963" />
<Node Id="10312:[64449..64498).18" Label="return LookupResult.WrongArity(symbol, diagInfo); 709964" />
<Node Id="10354:[5577..5590).5" Label="param WrongArity(Symbol symbol) 709965" />
<Node Id="10354:[5592..5612).5" Label="param WrongArity(DiagnosticInfo error) 709966" />
<Node Id="10354:[5638..5712).22" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709967" />
<Node Id="10354:[5638..5712).23" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709968" />
<Node Id="10368:[1099..1112).7" Label="param SingleLookupResult(Symbol symbol) 709969" />
<Node Id="10368:[1114..1134).7" Label="param SingleLookupResult(DiagnosticInfo error) 709970" />
<Node Id="10354:[10268..10665).20" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 709971" />
<Node Id="10312:[19326..19460).84" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 709972" />
<Node Id="10312:[63473..63501).8" Label="param CheckViability(TypeSymbol accessThroughType) 709973" />
<Node Id="10312:[63566..63612).8" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 709974" />
<Node Id="10312:[63638..63668).8" Label="bool inaccessibleViaQualifier; 709975" />
<Node Id="10312:[81019..81040).8" Label="param WrongArity(LookupOptions options) 709976" />
<Node Id="10312:[81042..81069).8" Label="param WrongArity(out DiagnosticInfo diagInfo) 709977" />
<Node Id="10354:[5577..5590).6" Label="param WrongArity(Symbol symbol) 709978" />
<Node Id="10354:[5638..5712).27" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 709979" />
<Node Id="10368:[1099..1112).8" Label="param SingleLookupResult(Symbol symbol) 709980" />
<Node Id="10354:[10268..10665).23" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 709981" />
<Node Id="10319:[61640..61682).1" Label="diagnostics.Add(node, useSiteDiagnostics); 709982" />
<Node Id="10319:[61640..61682).2" Label="diagnostics.Add(node, useSiteDiagnostics); 709983" />
<Node Id="10319:[61640..61682).3" Label="diagnostics.Add(node, useSiteDiagnostics); 709984" />
<Node Id="10319:[61640..61682).4" Label="diagnostics.Add(node, useSiteDiagnostics); 709985" />
<Node Id="10319:[61698..61712).1" Label="bool wasError; 709986" />
<Node Id="10319:[61726..61885).1" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709987" />
<Node Id="10319:[61726..61885).2" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709988" />
<Node Id="10319:[61726..61885).3" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709989" />
<Node Id="10319:[61726..61885).4" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709990" />
<Node Id="10319:[61726..61885).5" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709991" />
<Node Id="10319:[61726..61885).6" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709992" />
<Node Id="10319:[61726..61885).7" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709993" />
<Node Id="10319:[61726..61885).9" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709994" />
<Node Id="10319:[61726..61885).10" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709995" />
<Node Id="10319:[61726..61885).11" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 709996" />
<Node Id="10319:[61754..61884).1" Label="ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options) 709997" />
<Node Id="10319:[84167..84186).2" Label="param ResultSymbol(LookupResult result) 709998" />
<Node Id="10319:[84201..84218).2" Label="param ResultSymbol(string simpleName) 709999" />
<Node Id="10319:[84233..84242).2" Label="param ResultSymbol(int arity) 710000" />
<Node Id="10319:[84257..84273).2" Label="param ResultSymbol(SyntaxNode where) 710001" />
<Node Id="10319:[84288..84313).2" Label="param ResultSymbol(DiagnosticBag diagnostics) 710002" />
<Node Id="10319:[84328..84359).2" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 710003" />
<Node Id="10319:[84374..84391).2" Label="param ResultSymbol(out bool wasError) 710004" />
<Node Id="10319:[84406..84447).2" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 710005" />
<Node Id="10319:[84462..84508).2" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 710006" />
<Node Id="10319:[84124..109887).2" Label="param ResultSymbol(this) 710007" />
<Node Id="10319:[85320..85348).5" Label="Debug.Assert(where != null); 710008" />
<Node Id="10319:[85320..85348).6" Label="Debug.Assert(where != null); 710009" />
<Node Id="10319:[85366..85400).5" Label="Debug.Assert(diagnostics != null); 710010" />
<Node Id="10319:[85366..85400).6" Label="Debug.Assert(diagnostics != null); 710011" />
<Node Id="10354:[4561..4580).3" Label="return _symbolList; 710012" />
<Node Id="10319:[85467..85484).3" Label="wasError = false; 710013" />
<Node Id="10354:[4094..4107).40" Label="return _kind; 710014" />
<Node Id="10319:[104874..105336).4" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 710015" />
<Node Id="10319:[104874..105336).5" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 710016" />
<Node Id="10319:[105368..106708).2" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 710017" />
<Node Id="10319:[105465..105535).7" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 710018" />
<Node Id="10319:[105465..105535).8" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 710019" />
<Node Id="10319:[76360..76385).3" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 710020" />
<Node Id="10319:[76387..76402).3" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 710021" />
<Node Id="10060:[2841..2854).12" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 710022" />
<Node Id="10060:[2856..2875).12" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 710023" />
<Node Id="10060:[2901..2932).23" Label="Debug.Assert(symbol is object); 710024" />
<Node Id="10060:[2948..3467).12" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 710025" />
<Node Id="10060:[3553..4223).14" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 710026" />
<Node Id="10060:[4243..4274).14" Label="symbol = symbol.ContainingType; 710027" />
<Node Id="10060:[3518..4328).14" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 710028" />
<Node Id="10319:[76494..76582).9" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 710029" />
<Node Id="10319:[84691..84861).3" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 710030" />
<Node Id="10319:[84764..84846).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 710031" />
<Node Id="10319:[84764..84846).2" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 710032" />
<Node Id="10319:[84764..84846).4" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 710033" />
<Node Id="10319:[84764..84846).5" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 710034" />
<Node Id="10319:[84764..84845).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 710035" />
<Node Id="10306:[358886..358901).1" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 710036" />
<Node Id="10306:[358903..358930).1" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 710037" />
<Node Id="10306:[358932..358945).1" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 710038" />
<Node Id="10306:[358947..358972).1" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 710039" />
<Node Id="10306:[358838..360009).1" Label="param CheckRuntimeSupportForSymbolAccess(this) 710040" />
<Node Id="10306:[358998..359998).1" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 710041" />
<Node Id="10306:[358998..359998).2" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 710042" />
<Node Id="10319:[62966..63027).1" Label="NamedTypeSymbol type = lookupResultSymbol as NamedTypeSymbol; 710043" />
<Node Id="10319:[63043..63681).1" Label="if ((object)type == null)
            {
                // We did a lookup with a generic arity, filtered to types and namespaces. If
                // we got back something other than a type, there had better be an error info
                // for us.
                Debug.Assert(lookupResult.Error != null);
                type = new ExtendedErrorTypeSymbol(
                    GetContainingNamespaceOrType(lookupResultSymbol),
                    ImmutableArray.Create$Symbol$(lookupResultSymbol),
                    lookupResult.Kind,
                    lookupResult.Error,
                    arity);
            } 710044" />
<Node Id="10319:[63043..63681).2" Label="if ((object)type == null)
            {
                // We did a lookup with a generic arity, filtered to types and namespaces. If
                // we got back something other than a type, there had better be an error info
                // for us.
                Debug.Assert(lookupResult.Error != null);
                type = new ExtendedErrorTypeSymbol(
                    GetContainingNamespaceOrType(lookupResultSymbol),
                    ImmutableArray.Create$Symbol$(lookupResultSymbol),
                    lookupResult.Kind,
                    lookupResult.Error,
                    arity);
            } 710045" />
<Node Id="10319:[63697..63716).1" Label="lookupResult.Free() 710046" />
<Node Id="10354:[11383..11549).3" Label="param Free(this) 710047" />
<Node Id="10354:[3932..3952).5" Label="_symbolList.Clear(); 710048" />
<Node Id="10354:[11428..11441).3" Label="this.Clear(); 710049" />
<Node Id="10319:[63697..63717).1" Label="lookupResult.Free(); 710050" />
<Node Id="10319:[63733..63745).1" Label="return type; 710051" />
<Node Id="10319:[58098..58125).1" Label="NamedTypeSymbol resultType; 710052" />
<Node Id="10319:[58141..60037).1" Label="if (isUnboundTypeExpr)
            {
                if (!IsUnboundTypeAllowed(node))
                {
                    // If we already have an error type then skip reporting that the unbound type is illegal.
                    if (!unconstructedType.IsErrorType())
                    {
                        // error CS7003: Unexpected use of an unbound generic name
                        diagnostics.Add(ErrorCode.ERR_UnexpectedUnboundGenericName, node.Location);
                    }

                    resultType = unconstructedType.Construct(
                        UnboundArgumentErrorTypeSymbol.CreateTypeArguments(
                            unconstructedType.TypeParameters,
                            node.Arity,
                            errorInfo: null),
                        unbound: false);
                }
                else
                {
                    resultType = unconstructedType.AsUnboundGenericType();
                }
            }
            else if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)
            {
                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));
            }
            else
            {
                // It's not an unbound type expression, so we must have type arguments, and we have a
                // generic type of the correct arity in hand (possibly an error type). Bind the type
                // arguments and construct the final result.
                resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics);
            } 710053" />
<Node Id="10319:[59172..60037).1" Label="if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)
            {
                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));
            }
            else
            {
                // It's not an unbound type expression, so we must have type arguments, and we have a
                // generic type of the correct arity in hand (possibly an error type). Bind the type
                // arguments and construct the final result.
                resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics);
            } 710054" />
<Node Id="10319:[59172..60037).2" Label="if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)
            {
                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));
            }
            else
            {
                // It's not an unbound type expression, so we must have type arguments, and we have a
                // generic type of the correct arity in hand (possibly an error type). Bind the type
                // arguments and construct the final result.
                resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics);
            } 710055" />
<Node Id="10319:[59723..60022).1" Label="resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics); 710056" />
<Node Id="10319:[59723..60022).2" Label="resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics); 710057" />
<Node Id="10319:[59723..60022).3" Label="resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics); 710058" />
<Node Id="10319:[59723..60022).5" Label="resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics); 710059" />
<Node Id="10319:[59723..60022).6" Label="resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics); 710060" />
<Node Id="10319:[59880..59945).1" Label="BindTypeArguments(typeArguments, diagnostics, basesBeingResolved) 710061" />
<Node Id="10319:[64558..64603).1" Label="param BindTypeArguments(SeparatedSyntaxList$TypeSyntax$ typeArguments) 710062" />
<Node Id="10319:[64605..64630).1" Label="param BindTypeArguments(DiagnosticBag diagnostics) 710063" />
<Node Id="10319:[64632..64678).1" Label="param BindTypeArguments(ConsList$TypeSymbol$ basesBeingResolved = null) 710064" />
<Node Id="10319:[64496..65048).1" Label="param BindTypeArguments(this) 710065" />
<Node Id="10319:[64704..64742).1" Label="Debug.Assert(typeArguments.Count $ 0); 710066" />
<Node Id="10319:[64704..64742).2" Label="Debug.Assert(typeArguments.Count $ 0); 710067" />
<Node Id="10319:[64756..64815).1" Label="var args = ArrayBuilder$TypeWithAnnotations$.GetInstance(); 710068" />
<Node Id="10319:[64829..64988).1" Label="foreach (var argSyntax in typeArguments)
            {
                args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved));
            } 710069" />
<Node Id="10319:[64902..64973).1" Label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 710070" />
<Node Id="10319:[64902..64973).2" Label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 710071" />
<Node Id="10319:[64902..64973).3" Label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 710072" />
<Node Id="10319:[64911..64971).1" Label="BindTypeArgument(argSyntax, diagnostics, basesBeingResolved) 710073" />
<Node Id="10319:[65105..65128).1" Label="param BindTypeArgument(TypeSyntax typeArgument) 710074" />
<Node Id="10319:[65130..65155).1" Label="param BindTypeArgument(DiagnosticBag diagnostics) 710075" />
<Node Id="10319:[65157..65203).1" Label="param BindTypeArgument(ConsList$TypeSymbol$ basesBeingResolved = null) 710076" />
<Node Id="10319:[65060..65694).1" Label="param BindTypeArgument(this) 710077" />
<Node Id="10319:[65330..65407).1" Label="var binder = this.WithAdditionalFlags(BinderFlags.SuppressUnsafeDiagnostics); 710078" />
<Node Id="10319:[65343..65406).1" Label="this.WithAdditionalFlags(BinderFlags.SuppressUnsafeDiagnostics) 710079" />
<Node Id="10307:[2552..2569).1" Label="param WithAdditionalFlags(BinderFlags flags) 710080" />
<Node Id="10307:[2516..2720).1" Label="param WithAdditionalFlags(this) 710081" />
<Node Id="10307:[2595..2709).1" Label="return this.Flags.Includes(flags)
                ? this
                : new Binder(this, this.Flags | flags); 710082" />
<Node Id="10307:[2595..2709).2" Label="return this.Flags.Includes(flags)
                ? this
                : new Binder(this, this.Flags | flags); 710083" />
<Node Id="10307:[2602..2628).1" Label="this.Flags.Includes(flags) 710084" />
<Node Id="10298:[471..492).33" Label="param Includes(this BinderFlags self) 710085" />
<Node Id="10298:[494..511).33" Label="param Includes(BinderFlags other) 710086" />
<Node Id="10298:[537..568).97" Label="return (self & other) == other; 710087" />
<Node Id="10307:[2672..2708).1" Label="new Binder(this, this.Flags | flags) 710088" />
<Node Id="10286:[1605..1638).9" Label="RoslynDebug.Assert(next != null); 710089" />
<Node Id="10286:[1688..1781).13" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 710090" />
<Node Id="10286:[1688..1781).14" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 710091" />
<Node Id="10286:[1708..1779).3" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 710092" />
<Node Id="10298:[471..492).34" Label="param Includes(this BinderFlags self) 710093" />
<Node Id="10298:[494..511).34" Label="param Includes(BinderFlags other) 710094" />
<Node Id="10286:[1820..1963).13" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 710095" />
<Node Id="10286:[1820..1963).14" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 710096" />
<Node Id="10286:[1840..1888).3" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 710097" />
<Node Id="10298:[471..492).35" Label="param Includes(this BinderFlags self) 710098" />
<Node Id="10298:[494..511).35" Label="param Includes(BinderFlags other) 710099" />
<Node Id="10319:[65423..65656).1" Label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument
                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)
                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 710100" />
<Node Id="10319:[65433..65486).1" Label="typeArgument.Kind() == SyntaxKind.OmittedTypeArgument 710101" />
<Node Id="10319:[65423..65656).4" Label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument
                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)
                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 710102" />
<Node Id="10319:[65423..65656).5" Label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument
                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)
                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 710103" />
<Node Id="10319:[65593..65655).1" Label="binder.BindType(typeArgument, diagnostics, basesBeingResolved) 710104" />
<Node Id="10319:[13710..13735).3" Label="param BindType(DiagnosticBag diagnostics) 710105" />
<Node Id="10319:[13737..13783).3" Label="param BindType(ConsList$TypeSymbol$ basesBeingResolved = null) 710106" />
<Node Id="10319:[13785..13824).3" Label="param BindType(bool suppressUseSiteDiagnostics = false) 710107" />
<Node Id="10319:[13647..14061).3" Label="param BindType(this) 710108" />
<Node Id="10319:[15031..15070).3" Label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 710109" />
<Node Id="10319:[15096..15130).9" Label="Debug.Assert(diagnostics != null); 710110" />
<Node Id="10319:[15096..15130).10" Label="Debug.Assert(diagnostics != null); 710111" />
<Node Id="10319:[15146..15291).22" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 710112" />
<Node Id="10319:[39138..39163).2" Label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 710113" />
<Node Id="10319:[73480..73505).2" Label="param GetSpecialType(DiagnosticBag diagnostics) 710114" />
<Node Id="10319:[73507..73522).2" Label="param GetSpecialType(SyntaxNode node) 710115" />
<Node Id="10319:[73548..73615).7" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 710116" />
<Node Id="10319:[73736..73751).2" Label="param GetSpecialType(SyntaxNode node) 710117" />
<Node Id="10319:[73753..73778).2" Label="param GetSpecialType(DiagnosticBag diagnostics) 710118" />
<Node Id="10319:[73882..73975).7" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 710119" />
<Node Id="10319:[73882..73975).8" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 710120" />
<Node Id="10319:[76360..76385).4" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 710121" />
<Node Id="10319:[76387..76402).4" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 710122" />
<Node Id="10319:[76494..76582).13" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 710123" />
<Node Id="10319:[76494..76582).14" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 710124" />
<Node Id="10287:[791..833).3" Label="Debug.Assert(typeWithAnnotations.HasType); 710125" />
<Node Id="10319:[15783..15865).11" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 710126" />
<Node Id="10286:[21504..21529).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 710127" />
<Node Id="10286:[21546..21561).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 710128" />
<Node Id="10286:[21563..21583).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710129" />
<Node Id="10286:[22044..22069).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 710130" />
<Node Id="10286:[22086..22108).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 710131" />
<Node Id="10286:[22110..22130).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710132" />
<Node Id="10286:[22421..22557).13" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 710133" />
<Node Id="10286:[22421..22557).14" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 710134" />
<Node Id="10286:[8725..8866).1" Label="get
            {
                RoslynDebug.Assert(Next is object);
                return Next.ContainingMemberOrLambda;
            } 710135" />
<Node Id="10286:[8761..8796).1" Label="RoslynDebug.Assert(Next is object); 710136" />
<Node Id="10286:[8821..8850).1" Label="Next.ContainingMemberOrLambda 710137" />
<Node Id="10307:[1439..1480).3" Label="get { return _containingMemberOrLambda; } 710138" />
<Node Id="10286:[8814..8851).1" Label="return Next.ContainingMemberOrLambda; 710139" />
<Node Id="10286:[8725..8866).2" Label="get
            {
                RoslynDebug.Assert(Next is object);
                return Next.ContainingMemberOrLambda;
            } 710140" />
<Node Id="10307:[1439..1480).4" Label="get { return _containingMemberOrLambda; } 710141" />
<Node Id="10286:[8814..8851).3" Label="return Next.ContainingMemberOrLambda; 710142" />
<Node Id="10286:[15616..15690).6" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 710143" />
<Node Id="10286:[15616..15690).7" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 710144" />
<Node Id="10286:[15715..15910).2" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 710145" />
<Node Id="10286:[23056..23081).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 710146" />
<Node Id="10286:[23124..23146).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 710147" />
<Node Id="10286:[23161..23181).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710148" />
<Node Id="10286:[23281..23301).2" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 710149" />
<Node Id="10286:[23380..23684).8" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 710150" />
<Node Id="10286:[23893..24026).3" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 710151" />
<Node Id="10286:[24545..24641).3" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 710152" />
<Node Id="10286:[24655..25349).2" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 710153" />
<Node Id="10286:[26910..26935).2" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 710154" />
<Node Id="10286:[26952..26974).2" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 710155" />
<Node Id="10286:[27002..27022).2" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 710156" />
<Node Id="10286:[27048..27088).5" Label="RoslynDebug.Assert(diagnostics != null); 710157" />
<Node Id="10286:[27048..27088).6" Label="RoslynDebug.Assert(diagnostics != null); 710158" />
<Node Id="10286:[27208..27236).3" Label="DiagnosticInfo? info = null; 710159" />
<Node Id="10286:[27250..27722).2" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 710160" />
<Node Id="10286:[27738..27845).4" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 710161" />
<Node Id="10286:[27738..27845).5" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 710162" />
<Node Id="10286:[27861..27873).2" Label="return kind; 710163" />
<Node Id="10286:[26281..26812).2" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 710164" />
<Node Id="10286:[26450..26769).2" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 710165" />
<Node Id="10319:[51817..51842).3" Label="param UnwrapAlias(DiagnosticBag diagnostics) 710166" />
<Node Id="10319:[51844..51861).3" Label="param UnwrapAlias(SyntaxNode syntax) 710167" />
<Node Id="10319:[51863..51909).3" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 710168" />
<Node Id="10319:[51698..52285).3" Label="param UnwrapAlias(this) 710169" />
<Node Id="10319:[51939..51953).3" Label="symbol.IsAlias 710170" />
<Node Id="10287:[1680..1716).3" Label="=$ _symbol?.Kind == SymbolKind.Alias 710171" />
<Node Id="10287:[1683..1690).2" Label="_symbol 710172" />
<Node Id="10287:[1683..1716).5" Label="_symbol?.Kind == SymbolKind.Alias 710173" />
<Node Id="10319:[51935..52244).5" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 710174" />
<Node Id="10319:[65672..65683).1" Label="return arg; 710175" />
<Node Id="10319:[64902..64973).6" Label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 710176" />
<Node Id="10319:[65004..65037).1" Label="return args.ToImmutableAndFree(); 710177" />
<Node Id="10319:[59736..60021).1" Label="ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics) 710178" />
<Node Id="10319:[69844..69864).1" Label="param ConstructNamedType(NamedTypeSymbol type) 710179" />
<Node Id="10319:[69879..69900).1" Label="param ConstructNamedType(SyntaxNode typeSyntax) 710180" />
<Node Id="10319:[69915..69966).1" Label="param ConstructNamedType(SeparatedSyntaxList$TypeSyntax$ typeArgumentsSyntax) 710181" />
<Node Id="10319:[69981..70030).1" Label="param ConstructNamedType(ImmutableArray$TypeWithAnnotations$ typeArguments) 710182" />
<Node Id="10319:[70045..70084).1" Label="param ConstructNamedType(ConsList$TypeSymbol$ basesBeingResolved) 710183" />
<Node Id="10319:[70099..70124).1" Label="param ConstructNamedType(DiagnosticBag diagnostics) 710184" />
<Node Id="10319:[69787..70686).1" Label="param ConstructNamedType(this) 710185" />
<Node Id="10319:[70150..70187).1" Label="Debug.Assert(!typeArguments.IsEmpty); 710186" />
<Node Id="10319:[70201..70238).1" Label="type = type.Construct(typeArguments); 710187" />
<Node Id="10319:[70201..70238).2" Label="type = type.Construct(typeArguments); 710188" />
<Node Id="10319:[70258..70280).1" Label="ShouldCheckConstraints 710189" />
<Node Id="10319:[70990..71107).1" Label="get
            {
                return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks);
            } 710190" />
<Node Id="10319:[71026..71092).1" Label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 710191" />
<Node Id="10319:[71026..71092).2" Label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 710192" />
<Node Id="10319:[71034..71091).1" Label="this.Flags.Includes(BinderFlags.SuppressConstraintChecks) 710193" />
<Node Id="10298:[471..492).36" Label="param Includes(this BinderFlags self) 710194" />
<Node Id="10298:[494..511).36" Label="param Includes(BinderFlags other) 710195" />
<Node Id="10319:[70254..70647).1" Label="if (ShouldCheckConstraints && ConstraintsHelper.RequiresChecking(type))
            {
                bool includeNullability = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes);
                type.CheckConstraintsForNamedType(this.Conversions, includeNullability, typeSyntax, typeArgumentsSyntax, this.Compilation, basesBeingResolved, diagnostics);
            } 710196" />
<Node Id="10319:[70663..70675).1" Label="return type; 710197" />
<Node Id="10319:[60053..60600).1" Label="if (options.IsAttributeTypeLookup())
            {
                // Generic type cannot be an attribute type.
                // Parser error has already been reported, just wrap the result type with error type symbol.
                Debug.Assert(unconstructedType.IsErrorType());
                Debug.Assert(resultType.IsErrorType());
                resultType = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(resultType), resultType,
                    LookupResultKind.NotAnAttributeType, errorInfo: null);
            } 710198" />
<Node Id="10319:[60057..60088).1" Label="options.IsAttributeTypeLookup() 710199" />
<Node Id="10353:[7504..7530).4" Label="param IsAttributeTypeLookup(this LookupOptions options) 710200" />
<Node Id="10319:[60616..60733).1" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 710201" />
<Node Id="10319:[60650..60719).1" Label="AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken) 710202" />
<Node Id="10286:[10010..10027).4" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 710203" />
<Node Id="10286:[9966..10197).4" Label="param AreNullableAnnotationsEnabled(this) 710204" />
<Node Id="10319:[60616..60733).4" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 710205" />
<Node Id="10319:[60616..60733).5" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 710206" />
<Node Id="10319:[60616..60733).7" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 710207" />
<Node Id="10287:[791..833).5" Label="Debug.Assert(typeWithAnnotations.HasType); 710208" />
<Node Id="10319:[40890..41017).7" Label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt); 710209" />
<Node Id="10319:[72620..72734).1" Label="if (isLeftUnboundGenericType)
            {
                return convertToUnboundGenericType();
            } 710210" />
<Node Id="10319:[72750..72763).1" Label="return right; 710211" />
<Node Id="10287:[1612..1643).5" Label="!_typeWithAnnotations.IsDefault 710212" />
<Node Id="10286:[21546..21561).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 710213" />
<Node Id="10286:[21563..21583).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710214" />
<Node Id="10286:[22044..22069).4" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 710215" />
<Node Id="10286:[22086..22108).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 710216" />
<Node Id="10286:[22110..22130).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710217" />
<Node Id="10286:[15616..15690).11" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 710218" />
<Node Id="10286:[15616..15690).12" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 710219" />
<Node Id="10286:[15715..15910).3" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 710220" />
<Node Id="10286:[23056..23081).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 710221" />
<Node Id="10286:[23124..23146).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 710222" />
<Node Id="10286:[23161..23181).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 710223" />
<Node Id="10286:[23281..23301).3" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 710224" />
<Node Id="10286:[23380..23684).15" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 710225" />
<Node Id="10286:[23893..24026).5" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 710226" />
<Node Id="10286:[24545..24641).5" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 710227" />
<Node Id="10286:[24655..25349).3" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 710228" />
<Node Id="10286:[26910..26935).3" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 710229" />
<Node Id="10286:[26952..26974).3" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 710230" />
<Node Id="10286:[27002..27022).3" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 710231" />
<Node Id="10286:[27048..27088).9" Label="RoslynDebug.Assert(diagnostics != null); 710232" />
<Node Id="10286:[27048..27088).10" Label="RoslynDebug.Assert(diagnostics != null); 710233" />
<Node Id="10286:[27208..27236).5" Label="DiagnosticInfo? info = null; 710234" />
<Node Id="10286:[27250..27722).3" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 710235" />
<Node Id="10286:[27738..27845).7" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 710236" />
<Node Id="10286:[27738..27845).8" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 710237" />
<Node Id="10286:[27861..27873).3" Label="return kind; 710238" />
<Node Id="10286:[26281..26812).3" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 710239" />
<Node Id="10286:[26450..26769).3" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 710240" />
<Node Id="10287:[1680..1716).4" Label="=$ _symbol?.Kind == SymbolKind.Alias 710241" />
<Node Id="10287:[1683..1690).3" Label="_symbol 710242" />
<Node Id="10287:[1683..1716).7" Label="_symbol?.Kind == SymbolKind.Alias 710243" />
<Node Id="10319:[51935..52244).7" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 710244" />
<Node Id="10327:[945..949).1" Label="null 710245" />
<Node Id="10327:[951..955).1" Label="null 710246" />
<Node Id="10327:[916..956).1" Label="new ConstantFieldsInProgress(null, null) 710247" />
<Node Id="10327:[1017..1043).1" Label="param ConstantFieldsInProgress(SourceFieldSymbol fieldOpt) 710248" />
<Node Id="10327:[1058..1116).1" Label="param ConstantFieldsInProgress(HashSet$SourceFieldSymbolWithSyntaxReference$ dependencies) 710249" />
<Node Id="10327:[969..1217).1" Label="param ConstantFieldsInProgress(this) 710250" />
<Node Id="10327:[749..758).1" Label="_fieldOpt 710251" />
<Node Id="10327:[832..845).1" Label="_dependencies 710252" />
<Node Id="10327:[1142..1151).1" Label="_fieldOpt 710253" />
<Node Id="10327:[1177..1190).1" Label="_dependencies 710254" />
<Node Id="10327:[908..956).1" Label="Empty = new ConstantFieldsInProgress(null, null) 710255" />
<Node Id="10327:[1273..1314).1" Label="get { return (object)_fieldOpt == null; } 710256" />
<Node Id="10327:[1279..1312).1" Label="return (object)_fieldOpt == null; 710257" />
<Node Id="10327:[1279..1312).2" Label="return (object)_fieldOpt == null; 710258" />
<Node Id="25002:[4446..4475).1" Label="diagnostics.Verify(expected); 710259" />
<Node Id="25002:[4446..4475).2" Label="diagnostics.Verify(expected); 710260" />
<Node Id="25002:[4446..4474).1" Label="diagnostics.Verify(expected) 710261" />
<Node Id="25002:[2296..2334).1" Label="param Verify(this ImmutableArray$Diagnostic$ actual) 710262" />
<Node Id="25002:[2336..2375).1" Label="param Verify(params DiagnosticDescription[] expected) 710263" />
<Node Id="25002:[2401..2451).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 710264" />
<Node Id="25002:[2401..2451).2" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 710265" />
<Node Id="25002:[2401..2450).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected) 710266" />
<Node Id="25002:[1554..1589).1" Label="param Verify(this IEnumerable$Diagnostic$ actual) 710267" />
<Node Id="25002:[1591..1630).1" Label="param Verify(params DiagnosticDescription[] expected) 710268" />
<Node Id="25002:[1656..1703).1" Label="Verify(actual, expected, errorCodeOnly: false); 710269" />
<Node Id="25002:[1656..1703).2" Label="Verify(actual, expected, errorCodeOnly: false); 710270" />
<Node Id="25002:[1656..1703).3" Label="Verify(actual, expected, errorCodeOnly: false); 710271" />
<Node Id="25002:[1656..1702).1" Label="Verify(actual, expected, errorCodeOnly: false) 710272" />
<Node Id="25002:[2501..2531).1" Label="param Verify(IEnumerable$Diagnostic$ actual) 710273" />
<Node Id="25002:[2533..2565).1" Label="param Verify(DiagnosticDescription[] expected) 710274" />
<Node Id="25002:[2567..2585).1" Label="param Verify(bool errorCodeOnly) 710275" />
<Node Id="25002:[2611..2759).1" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 710276" />
<Node Id="25002:[2611..2759).2" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 710277" />
<Node Id="25002:[2775..2867).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 710278" />
<Node Id="25002:[2775..2867).2" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 710279" />
<Node Id="25002:[2775..2867).4" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 710280" />
<Node Id="25002:[2775..2867).6" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 710281" />
<Node Id="25003:[10448..10470).1" Label="=$ _defaultSeverityOpt 710282" />
<Node Id="25003:[10451..10470).1" Label="_defaultSeverityOpt 710283" />
<Node Id="25002:[2881..2977).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 710284" />
<Node Id="25002:[2881..2977).2" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 710285" />
<Node Id="25002:[2881..2977).4" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 710286" />
<Node Id="25002:[2881..2977).6" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 710287" />
<Node Id="25003:[10526..10550).1" Label="=$ _effectiveSeverityOpt 710288" />
<Node Id="25003:[10529..10550).1" Label="_effectiveSeverityOpt 710289" />
<Node Id="25002:[2991..3166).1" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 710290" />
<Node Id="25002:[2991..3166).2" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 710291" />
<Node Id="25002:[2991..3166).4" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 710292" />
<Node Id="25002:[2991..3166).8" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 710293" />
<Node Id="25003:[4933..4945).1" Label="param DiagnosticDescription(Diagnostic d) 710294" />
<Node Id="25003:[4947..4965).1" Label="param DiagnosticDescription(bool errorCodeOnly) 710295" />
<Node Id="25003:[4967..5002).1" Label="param DiagnosticDescription(bool includeDefaultSeverity = false) 710296" />
<Node Id="25003:[5004..5041).1" Label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 710297" />
<Node Id="25003:[4904..7352).1" Label="param DiagnosticDescription(this) 710298" />
<Node Id="25003:[912..917).4" Label="_code 710299" />
<Node Id="25003:[950..967).4" Label="_isWarningAsError 710300" />
<Node Id="25003:[1000..1013).4" Label="_isSuppressed 710301" />
<Node Id="25003:[1048..1062).4" Label="_squiggledText 710302" />
<Node Id="25003:[1099..1109).4" Label="_arguments 710303" />
<Node Id="25003:[1151..1165).10" Label="_startPosition 710304" />
<Node Id="25003:[1276..1303).4" Label="_argumentOrderDoesNotMatter 710305" />
<Node Id="25003:[1336..1350).4" Label="_errorCodeType 710306" />
<Node Id="25003:[1460..1479).4" Label="_defaultSeverityOpt 710307" />
<Node Id="25003:[1527..1548).4" Label="_effectiveSeverityOpt 710308" />
<Node Id="25003:[1673..1689).4" Label="_syntaxPredicate 710309" />
<Node Id="25003:[5067..5072).1" Label="_code 710310" />
<Node Id="25003:[5096..5113).1" Label="_isWarningAsError 710311" />
<Node Id="25003:[5149..5162).1" Label="_isSuppressed 710312" />
<Node Id="25003:[5194..5203).1" Label="_location 710313" />
<Node Id="25003:[5253..5275).1" Label="includeDefaultSeverity 710314" />
<Node Id="25003:[5231..5324).1" Label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 710315" />
<Node Id="25003:[5231..5250).1" Label="_defaultSeverityOpt 710316" />
<Node Id="25003:[5362..5386).1" Label="includeEffectiveSeverity 710317" />
<Node Id="25003:[5338..5428).1" Label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 710318" />
<Node Id="25003:[5338..5359).1" Label="_effectiveSeverityOpt 710319" />
<Node Id="25003:[5444..5476).1" Label="DiagnosticWithInfo dinfo = null; 710320" />
<Node Id="25003:[5490..6130).1" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 710321" />
<Node Id="25003:[5490..6130).2" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 710322" />
<Node Id="25003:[5490..6130).3" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 710323" />
<Node Id="25003:[5490..6130).4" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 710324" />
<Node Id="25003:[5744..5776).1" Label="dinfo = d as DiagnosticWithInfo; 710325" />
<Node Id="25003:[5794..6115).1" Label="if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                } 710326" />
<Node Id="25003:[5794..6115).2" Label="if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                } 710327" />
<Node Id="25003:[6001..6015).1" Label="_errorCodeType 710328" />
<Node Id="25003:[6081..6086).1" Label="_code 710329" />
<Node Id="25003:[6146..6175).1" Label="_ignoreArgumentsWhenComparing 710330" />
<Node Id="25003:[6208..7260).1" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_location.IsInSource)
                {
                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API
                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);
                }

                if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                }

                if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                }
            } 710331" />
<Node Id="25003:[6276..6580).1" Label="if (_location.IsInSource)
                {
                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API
                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);
                } 710332" />
<Node Id="25003:[6482..6561).1" Label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 710333" />
<Node Id="25003:[6482..6496).1" Label="_squiggledText 710334" />
<Node Id="25003:[6600..7098).1" Label="if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                } 710335" />
<Node Id="25003:[6600..7098).2" Label="if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                } 710336" />
<Node Id="25003:[6659..6669).1" Label="_arguments 710337" />
<Node Id="25003:[7118..7245).1" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 710338" />
<Node Id="25003:[7118..7245).2" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 710339" />
<Node Id="25003:[7118..7245).4" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 710340" />
<Node Id="25003:[7276..7341).1" Label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 710341" />
<Node Id="25003:[7276..7290).1" Label="_startPosition 710342" />
<Node Id="25002:[2991..3166).9" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 710343" />
<Node Id="25002:[3341..3730).1" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 710344" />
<Node Id="25002:[3341..3730).2" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 710345" />
<Node Id="25002:[3401..3434).1" Label="int index = unmatched.IndexOf(d); 710346" />
<Node Id="25002:[3401..3434).2" Label="int index = unmatched.IndexOf(d); 710347" />
<Node Id="25003:[10591..10601).1" Label="param Equals(object obj) 710348" />
<Node Id="25003:[10563..13732).1" Label="param Equals(this) 710349" />
<Node Id="25003:[10627..10664).1" Label="var d = obj as DiagnosticDescription; 710350" />
<Node Id="25003:[10680..10725).1" Label="if (d == null)
                return false; 710351" />
<Node Id="25003:[10680..10725).2" Label="if (d == null)
                return false; 710352" />
<Node Id="25003:[10741..10799).1" Label="if (!_code.Equals(d._code))
                return false; 710353" />
<Node Id="25003:[10741..10799).2" Label="if (!_code.Equals(d._code))
                return false; 710354" />
<Node Id="25003:[10815..10891).1" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 710355" />
<Node Id="25003:[10907..10975).1" Label="if (_isSuppressed != d._isSuppressed)
                return false; 710356" />
<Node Id="25003:[10991..11148).1" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 710357" />
<Node Id="25003:[11059..11133).1" Label="if (_squiggledText != d._squiggledText)
                    return false; 710358" />
<Node Id="25003:[11164..11464).1" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 710359" />
<Node Id="25003:[11164..11464).2" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 710360" />
<Node Id="25003:[11224..11449).1" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 710361" />
<Node Id="25003:[11294..11430).1" Label="if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    } 710362" />
<Node Id="25003:[11480..11903).1" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 710363" />
<Node Id="25003:[11480..11903).2" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 710364" />
<Node Id="25003:[11917..12344).1" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 710365" />
<Node Id="25003:[11917..12344).2" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 710366" />
<Node Id="25003:[12436..12535).1" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 710367" />
<Node Id="25003:[12651..13498).1" Label="if (_arguments == null)
            {
                if (d._arguments != null)
                    return false;
            }
            else // _arguments != null
            {
                if (d._arguments == null)
                    return false;

                // we'll compare the arguments as strings
                var args1 = GetArgumentsAsStrings();
                var args2 = d.GetArgumentsAsStrings();
                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                }
            } 710368" />
<Node Id="25003:[12651..13498).2" Label="if (_arguments == null)
            {
                if (d._arguments != null)
                    return false;
            }
            else // _arguments != null
            {
                if (d._arguments == null)
                    return false;

                // we'll compare the arguments as strings
                var args1 = GetArgumentsAsStrings();
                var args2 = d.GetArgumentsAsStrings();
                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                }
            } 710369" />
<Node Id="25003:[12855..12915).1" Label="if (d._arguments == null)
                    return false; 710370" />
<Node Id="25003:[13006..13029).1" Label="GetArgumentsAsStrings() 710371" />
<Node Id="25003:[1971..2761).1" Label="param GetArgumentsAsStrings(this) 710372" />
<Node Id="25003:[2047..2709).1" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 710373" />
<Node Id="25003:[2047..2709).2" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 710374" />
<Node Id="25003:[2321..2694).1" Label="_argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                }); 710375" />
<Node Id="25003:[2321..2694).2" Label="_argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                }); 710376" />
<Node Id="25003:[2321..2340).1" Label="_argumentsAsStrings 710377" />
<Node Id="25003:[2723..2750).1" Label="return _argumentsAsStrings; 710378" />
<Node Id="25003:[12994..13030).1" Label="var args1 = GetArgumentsAsStrings(); 710379" />
<Node Id="25003:[13060..13085).1" Label="d.GetArgumentsAsStrings() 710380" />
<Node Id="25003:[1971..2761).2" Label="param GetArgumentsAsStrings(this) 710381" />
<Node Id="25003:[2047..2709).4" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 710382" />
<Node Id="25003:[2047..2709).5" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 710383" />
<Node Id="25003:[2723..2750).2" Label="return _argumentsAsStrings; 710384" />
<Node Id="25003:[13048..13086).1" Label="var args2 = d.GetArgumentsAsStrings(); 710385" />
<Node Id="25003:[13104..13483).1" Label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                } 710386" />
<Node Id="25003:[13393..13464).1" Label="if (!args1.SequenceEqual(args2))
                        return false; 710387" />
<Node Id="25003:[13393..13464).2" Label="if (!args1.SequenceEqual(args2))
                        return false; 710388" />
<Node Id="25003:[13393..13464).3" Label="if (!args1.SequenceEqual(args2))
                        return false; 710389" />
<Node Id="25003:[13514..13693).1" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 710390" />
<Node Id="25003:[13709..13721).1" Label="return true; 710391" />
<Node Id="25002:[3401..3434).5" Label="int index = unmatched.IndexOf(d); 710392" />
<Node Id="25002:[3452..3715).1" Label="if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                } 710393" />
<Node Id="25002:[3452..3715).2" Label="if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                } 710394" />
<Node Id="25002:[3508..3534).1" Label="unmatched.RemoveAt(index); 710395" />
<Node Id="25002:[3840..3992).1" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 710396" />
<Node Id="25002:[3840..3992).2" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 710397" />
<Node Id="25002:[4102..4181).1" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 710398" />
<Node Id="25002:[4102..4181).3" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 710399" />
<Node Id="25002:[4102..4181).4" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 710400" />
<Node Id="25002:[4126..4179).1" Label="DiagnosticDescription.GetAssertText(expected, actual) 710401" />
<Node Id="25003:[17577..17609).1" Label="param GetAssertText(DiagnosticDescription[] expected) 710402" />
<Node Id="25003:[17611..17641).1" Label="param GetAssertText(IEnumerable$Diagnostic$ actual) 710403" />
<Node Id="25003:[17667..17688).1" Label="const int CSharp = 1; 710404" />
<Node Id="25003:[17702..17728).1" Label="const int VisualBasic = 2; 710405" />
<Node Id="25003:[17742..17827).1" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 710406" />
<Node Id="25003:[17742..17827).2" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 710407" />
<Node Id="25003:[17742..17827).4" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 710408" />
<Node Id="25003:[17757..17803).1" Label="actual.Any() && actual.First() is CSDiagnostic 710409" />
<Node Id="25003:[17742..17827).6" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 710410" />
<Node Id="25003:[17841..17904).1" Label="var includeDiagnosticMessagesAsComments = (language == CSharp); 710411" />
<Node Id="25003:[17918..17965).1" Label="int indentDepth = (language == CSharp) ? 4 : 1; 710412" />
<Node Id="25003:[17936..17956).1" Label="(language == CSharp) 710413" />
<Node Id="25003:[17979..18071).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 710414" />
<Node Id="25003:[17979..18071).2" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 710415" />
<Node Id="25003:[17979..18071).4" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 710416" />
<Node Id="25003:[17979..18071).6" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 710417" />
<Node Id="25003:[18085..18181).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 710418" />
<Node Id="25003:[18085..18181).2" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 710419" />
<Node Id="25003:[18085..18181).4" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 710420" />
<Node Id="25003:[18085..18181).6" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 710421" />
<Node Id="25003:[18197..18490).1" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 710422" />
<Node Id="25003:[18201..18226).1" Label="IsSortedOrEmpty(expected) 710423" />
<Node Id="25003:[21605..21640).1" Label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 710424" />
<Node Id="25003:[23096..23122).1" Label="new LinePositionComparer() 710425" />
<Node Id="25003:[22962..23812).1" Label="param LinePositionComparer(this) 710426" />
<Node Id="25003:[23085..23122).1" Label="Instance = new LinePositionComparer() 710427" />
<Node Id="25003:[21666..21711).1" Label="var comparer = LinePositionComparer.Instance; 710428" />
<Node Id="25003:[21725..21759).1" Label="DiagnosticDescription last = null; 710429" />
<Node Id="25003:[21773..22187).1" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 710430" />
<Node Id="25003:[21773..22187).2" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 710431" />
<Node Id="25003:[21845..21956).1" Label="if (diagnostic._startPosition == null)
                {
                    return false;
                } 710432" />
<Node Id="25003:[21974..22136).1" Label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                } 710433" />
<Node Id="25003:[21974..22136).2" Label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                } 710434" />
<Node Id="25003:[22154..22172).1" Label="last = diagnostic; 710435" />
<Node Id="25003:[22201..22213).1" Label="return true; 710436" />
<Node Id="25003:[18197..18490).2" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 710437" />
<Node Id="25003:[18453..18475).1" Label="actual = Sort(actual); 710438" />
<Node Id="25003:[18462..18474).1" Label="Sort(actual) 710439" />
<Node Id="25003:[21372..21407).1" Label="param Sort(IEnumerable$Diagnostic$ diagnostics) 710440" />
<Node Id="25003:[21433..21546).1" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 710441" />
<Node Id="25003:[21433..21546).2" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 710442" />
<Node Id="25003:[21433..21546).4" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 710443" />
<Node Id="25003:[21433..21546).5" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 710444" />
<Node Id="25003:[18506..18543).1" Label="var assertText = new StringBuilder(); 710445" />
<Node Id="25003:[18557..18581).1" Label="assertText.AppendLine(); 710446" />
<Node Id="25003:[18658..18664).1" Label="int i; 710447" />
<Node Id="25003:[18678..18713).1" Label="assertText.AppendLine('Expected:'); 710448" />
<Node Id="25003:[18678..18713).3" Label="assertText.AppendLine('Expected:'); 710449" />
<Node Id="25003:[18727..18781).1" Label="var expectedText = ArrayBuilder$string$.GetInstance(); 710450" />
<Node Id="25003:[18795..18929).1" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 710451" />
<Node Id="25003:[18795..18929).2" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 710452" />
<Node Id="25003:[18855..18914).1" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 710453" />
<Node Id="25003:[18855..18914).2" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 710454" />
<Node Id="25003:[18872..18912).1" Label="GetDiagnosticDescription(d, indentDepth) 710455" />
<Node Id="25003:[22283..22306).1" Label="param GetDiagnosticDescription(DiagnosticDescription d) 710456" />
<Node Id="25003:[22308..22323).1" Label="param GetDiagnosticDescription(int indentDepth) 710457" />
<Node Id="25003:[22349..22404).1" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710458" />
<Node Id="25003:[22349..22404).4" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710459" />
<Node Id="25003:[22391..22403).1" Label="d.ToString() 710460" />
<Node Id="25003:[14779..17530).1" Label="param ToString(this) 710461" />
<Node Id="25003:[14837..14866).1" Label="var sb = new StringBuilder(); 710462" />
<Node Id="25003:[14882..14907).1" Label="sb.Append('Diagnostic('); 710463" />
<Node Id="25003:[14882..14907).3" Label="sb.Append('Diagnostic('); 710464" />
<Node Id="25003:[14921..15244).1" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 710465" />
<Node Id="25003:[14921..15244).2" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 710466" />
<Node Id="25003:[15100..15131).1" Label="sb.Append(_errorCodeType.Name); 710467" />
<Node Id="25003:[15100..15131).2" Label="sb.Append(_errorCodeType.Name); 710468" />
<Node Id="25003:[15149..15164).1" Label="sb.Append('.'); 710469" />
<Node Id="25003:[15149..15164).3" Label="sb.Append('.'); 710470" />
<Node Id="25003:[15182..15229).1" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710471" />
<Node Id="25003:[15182..15229).5" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710472" />
<Node Id="25003:[15260..15767).1" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 710473" />
<Node Id="25003:[15260..15767).2" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 710474" />
<Node Id="25003:[15320..15717).1" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 710475" />
<Node Id="25003:[15632..15650).1" Label="sb.Append(', \''); 710476" />
<Node Id="25003:[15632..15650).3" Label="sb.Append(', \''); 710477" />
<Node Id="25003:[15672..15698).1" Label="sb.Append(_squiggledText); 710478" />
<Node Id="25003:[15672..15698).2" Label="sb.Append(_squiggledText); 710479" />
<Node Id="25003:[15737..15752).1" Label="sb.Append('''); 710480" />
<Node Id="25003:[15737..15752).3" Label="sb.Append('''); 710481" />
<Node Id="25003:[15783..15883).1" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 710482" />
<Node Id="25003:[15899..15914).1" Label="sb.Append(')'); 710483" />
<Node Id="25003:[15899..15914).3" Label="sb.Append(')'); 710484" />
<Node Id="25003:[15930..16520).1" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 710485" />
<Node Id="25003:[15930..16520).2" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 710486" />
<Node Id="25003:[15986..16015).1" Label="sb.Append('.WithArguments('); 710487" />
<Node Id="25003:[15986..16015).3" Label="sb.Append('.WithArguments('); 710488" />
<Node Id="25003:[16055..16078).1" Label="GetArgumentsAsStrings() 710489" />
<Node Id="25003:[16033..16095).1" Label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 710490" />
<Node Id="25003:[16113..16472).1" Label="for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                } 710491" />
<Node Id="25003:[16113..16472).3" Label="for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                } 710492" />
<Node Id="25003:[16202..16218).1" Label="sb.Append('\''); 710493" />
<Node Id="25003:[16202..16218).3" Label="sb.Append('\''); 710494" />
<Node Id="25003:[16240..16275).1" Label="sb.Append(argumentStrings.Current); 710495" />
<Node Id="25003:[16240..16275).2" Label="sb.Append(argumentStrings.Current); 710496" />
<Node Id="25003:[16297..16313).1" Label="sb.Append('\''); 710497" />
<Node Id="25003:[16297..16313).3" Label="sb.Append('\''); 710498" />
<Node Id="25003:[16335..16453).1" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 710499" />
<Node Id="25003:[16414..16430).1" Label="sb.Append(', '); 710500" />
<Node Id="25003:[16414..16430).3" Label="sb.Append(', '); 710501" />
<Node Id="25003:[16490..16505).1" Label="sb.Append(')'); 710502" />
<Node Id="25003:[16490..16505).3" Label="sb.Append(')'); 710503" />
<Node Id="25003:[16536..16829).1" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 710504" />
<Node Id="25003:[16536..16829).2" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 710505" />
<Node Id="25003:[16596..16624).1" Label="sb.Append('.WithLocation('); 710506" />
<Node Id="25003:[16596..16624).3" Label="sb.Append('.WithLocation('); 710507" />
<Node Id="25003:[16642..16683).1" Label="sb.Append(_startPosition.Value.Line + 1); 710508" />
<Node Id="25003:[16642..16683).4" Label="sb.Append(_startPosition.Value.Line + 1); 710509" />
<Node Id="25003:[16701..16717).1" Label="sb.Append(', '); 710510" />
<Node Id="25003:[16701..16717).3" Label="sb.Append(', '); 710511" />
<Node Id="25003:[16735..16781).1" Label="sb.Append(_startPosition.Value.Character + 1); 710512" />
<Node Id="25003:[16735..16781).4" Label="sb.Append(_startPosition.Value.Character + 1); 710513" />
<Node Id="25003:[16799..16814).1" Label="sb.Append(')'); 710514" />
<Node Id="25003:[16799..16814).3" Label="sb.Append(')'); 710515" />
<Node Id="25003:[16845..16954).1" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 710516" />
<Node Id="25003:[16970..17144).1" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 710517" />
<Node Id="25003:[16970..17144).2" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 710518" />
<Node Id="25003:[17160..17340).1" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 710519" />
<Node Id="25003:[17160..17340).2" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 710520" />
<Node Id="25003:[17356..17482).1" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 710521" />
<Node Id="25003:[17356..17482).2" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 710522" />
<Node Id="25003:[17498..17519).1" Label="return sb.ToString(); 710523" />
<Node Id="25003:[22349..22404).7" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710524" />
<Node Id="25003:[22349..22404).8" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710525" />
<Node Id="25003:[18855..18914).5" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 710526" />
<Node Id="25003:[18943..18992).1" Label="GetCommaSeparatedLines(assertText, expectedText); 710527" />
<Node Id="25003:[18943..18992).2" Label="GetCommaSeparatedLines(assertText, expectedText); 710528" />
<Node Id="25003:[18943..18991).1" Label="GetCommaSeparatedLines(assertText, expectedText) 710529" />
<Node Id="25003:[22599..22615).1" Label="param GetCommaSeparatedLines(StringBuilder sb) 710530" />
<Node Id="25003:[22617..22643).1" Label="param GetCommaSeparatedLines(ArrayBuilder$string$ lines) 710531" />
<Node Id="25003:[22669..22689).1" Label="int n = lines.Count; 710532" />
<Node Id="25003:[22703..22939).1" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 710533" />
<Node Id="25003:[22703..22939).3" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 710534" />
<Node Id="25003:[22763..22783).1" Label="sb.Append(lines[i]); 710535" />
<Node Id="25003:[22763..22783).3" Label="sb.Append(lines[i]); 710536" />
<Node Id="25003:[22801..22890).1" Label="if (i $ n - 1)
                {
                    sb.Append(',');
                } 710537" />
<Node Id="25003:[22908..22924).1" Label="sb.AppendLine(); 710538" />
<Node Id="25003:[18943..18992).3" Label="GetCommaSeparatedLines(assertText, expectedText); 710539" />
<Node Id="25003:[19106..19139).1" Label="assertText.AppendLine('Actual:'); 710540" />
<Node Id="25003:[19106..19139).3" Label="assertText.AppendLine('Actual:'); 710541" />
<Node Id="25003:[19153..19205).1" Label="var actualText = ArrayBuilder$string$.GetInstance(); 710542" />
<Node Id="25003:[19219..19250).1" Label="var e = actual.GetEnumerator(); 710543" />
<Node Id="25003:[19264..20938).1" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 710544" />
<Node Id="25003:[19264..20938).3" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 710545" />
<Node Id="25003:[23158..23173).1" Label="param Compare(LinePosition? x) 710546" />
<Node Id="25003:[23175..23190).1" Label="param Compare(LinePosition? y) 710547" />
<Node Id="25003:[23139..23801).1" Label="param Compare(this) 710548" />
<Node Id="25003:[23224..23425).1" Label="if (x == null)
                {
                    if (y == null)
                    {
                        return 0;
                    }
                    return -1;
                } 710549" />
<Node Id="25003:[23224..23425).2" Label="if (x == null)
                {
                    if (y == null)
                    {
                        return 0;
                    }
                    return -1;
                } 710550" />
<Node Id="25003:[23445..23528).1" Label="if (y == null)
                {
                    return 1;
                } 710551" />
<Node Id="25003:[23445..23528).2" Label="if (y == null)
                {
                    return 1;
                } 710552" />
<Node Id="25003:[23548..23600).1" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 710553" />
<Node Id="25003:[23548..23600).2" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 710554" />
<Node Id="25003:[23618..23712).1" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 710555" />
<Node Id="25003:[23618..23712).2" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 710556" />
<Node Id="25003:[23732..23786).1" Label="return x.Value.Character.CompareTo(y.Value.Character); 710557" />
<Node Id="25003:[23732..23786).2" Label="return x.Value.Character.CompareTo(y.Value.Character); 710558" />
<Node Id="25003:[23548..23600).4" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 710559" />
<Node Id="25003:[23618..23712).5" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 710560" />
<Node Id="25003:[19327..19352).1" Label="Diagnostic d = e.Current; 710561" />
<Node Id="25003:[19370..19400).1" Label="string message = d.ToString(); 710562" />
<Node Id="25003:[19418..19628).1" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 710563" />
<Node Id="25003:[19418..19628).2" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 710564" />
<Node Id="25003:[19648..19745).1" Label="if (i $ 0)
                {
                    assertText.AppendLine(',');
                } 710565" />
<Node Id="25003:[19765..20366).1" Label="if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                } 710566" />
<Node Id="25003:[19846..19878).1" Label="Indent(assertText, indentDepth); 710567" />
<Node Id="25003:[19846..19878).2" Label="Indent(assertText, indentDepth); 710568" />
<Node Id="25003:[19846..19877).1" Label="Indent(assertText, indentDepth) 710569" />
<Node Id="25003:[22454..22470).1" Label="param Indent(StringBuilder sb) 710570" />
<Node Id="25003:[22472..22481).1" Label="param Indent(int count) 710571" />
<Node Id="25003:[22507..22533).1" Label="sb.Append(' ', 4 * count); 710572" />
<Node Id="25003:[22507..22533).4" Label="sb.Append(' ', 4 * count); 710573" />
<Node Id="25003:[22507..22533).6" Label="sb.Append(' ', 4 * count); 710574" />
<Node Id="25003:[19846..19878).3" Label="Indent(assertText, indentDepth); 710575" />
<Node Id="25003:[19900..19925).1" Label="assertText.Append('// '); 710576" />
<Node Id="25003:[19900..19925).3" Label="assertText.Append('// '); 710577" />
<Node Id="25003:[19947..19983).1" Label="assertText.AppendLine(d.ToString()); 710578" />
<Node Id="25003:[19947..19983).3" Label="assertText.AppendLine(d.ToString()); 710579" />
<Node Id="25003:[20005..20024).1" Label="var l = d.Location; 710580" />
<Node Id="25003:[20046..20347).1" Label="if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    } 710581" />
<Node Id="25003:[20112..20144).1" Label="Indent(assertText, indentDepth); 710582" />
<Node Id="25003:[20112..20144).2" Label="Indent(assertText, indentDepth); 710583" />
<Node Id="25003:[20112..20143).1" Label="Indent(assertText, indentDepth) 710584" />
<Node Id="25003:[22454..22470).2" Label="param Indent(StringBuilder sb) 710585" />
<Node Id="25003:[22472..22481).2" Label="param Indent(int count) 710586" />
<Node Id="25003:[22507..22533).7" Label="sb.Append(' ', 4 * count); 710587" />
<Node Id="25003:[22507..22533).10" Label="sb.Append(' ', 4 * count); 710588" />
<Node Id="25003:[22507..22533).12" Label="sb.Append(' ', 4 * count); 710589" />
<Node Id="25003:[20112..20144).3" Label="Indent(assertText, indentDepth); 710590" />
<Node Id="25003:[20170..20195).1" Label="assertText.Append('// '); 710591" />
<Node Id="25003:[20170..20195).3" Label="assertText.Append('// '); 710592" />
<Node Id="25003:[20221..20324).1" Label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 710593" />
<Node Id="25003:[20221..20324).8" Label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 710594" />
<Node Id="25003:[20386..20505).1" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 710595" />
<Node Id="25003:[20386..20505).2" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 710596" />
<Node Id="25003:[20386..20505).4" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 710597" />
<Node Id="25003:[20386..20505).5" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 710598" />
<Node Id="25003:[20404..20504).1" Label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 710599" />
<Node Id="25003:[4933..4945).2" Label="param DiagnosticDescription(Diagnostic d) 710600" />
<Node Id="25003:[4947..4965).2" Label="param DiagnosticDescription(bool errorCodeOnly) 710601" />
<Node Id="25003:[4967..5002).2" Label="param DiagnosticDescription(bool includeDefaultSeverity = false) 710602" />
<Node Id="25003:[5004..5041).2" Label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 710603" />
<Node Id="25003:[4904..7352).2" Label="param DiagnosticDescription(this) 710604" />
<Node Id="25003:[912..917).5" Label="_code 710605" />
<Node Id="25003:[950..967).5" Label="_isWarningAsError 710606" />
<Node Id="25003:[1000..1013).5" Label="_isSuppressed 710607" />
<Node Id="25003:[1048..1062).5" Label="_squiggledText 710608" />
<Node Id="25003:[1099..1109).5" Label="_arguments 710609" />
<Node Id="25003:[1151..1165).13" Label="_startPosition 710610" />
<Node Id="25003:[1336..1350).5" Label="_errorCodeType 710611" />
<Node Id="25003:[1460..1479).5" Label="_defaultSeverityOpt 710612" />
<Node Id="25003:[1527..1548).5" Label="_effectiveSeverityOpt 710613" />
<Node Id="25003:[5067..5072).2" Label="_code 710614" />
<Node Id="25003:[5096..5113).2" Label="_isWarningAsError 710615" />
<Node Id="25003:[5149..5162).2" Label="_isSuppressed 710616" />
<Node Id="25003:[5194..5203).2" Label="_location 710617" />
<Node Id="25003:[5444..5476).3" Label="DiagnosticWithInfo dinfo = null; 710618" />
<Node Id="25003:[5490..6130).9" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 710619" />
<Node Id="25003:[7118..7245).7" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 710620" />
<Node Id="25003:[7118..7245).8" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 710621" />
<Node Id="25003:[7118..7245).10" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 710622" />
<Node Id="25003:[20523..20557).1" Label="var diffDescription = description; 710623" />
<Node Id="25003:[20575..20622).1" Label="var idx = Array.IndexOf(expected, description); 710624" />
<Node Id="25003:[20575..20622).2" Label="var idx = Array.IndexOf(expected, description); 710625" />
<Node Id="25003:[20575..20622).3" Label="var idx = Array.IndexOf(expected, description); 710626" />
<Node Id="25003:[20575..20622).4" Label="var idx = Array.IndexOf(expected, description); 710627" />
<Node Id="25003:[10680..10725).4" Label="if (d == null)
                return false; 710628" />
<Node Id="25003:[10680..10725).5" Label="if (d == null)
                return false; 710629" />
<Node Id="25003:[10815..10891).3" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 710630" />
<Node Id="25003:[10907..10975).3" Label="if (_isSuppressed != d._isSuppressed)
                return false; 710631" />
<Node Id="25003:[10991..11148).2" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 710632" />
<Node Id="25003:[11059..11133).3" Label="if (_squiggledText != d._squiggledText)
                    return false; 710633" />
<Node Id="25003:[11164..11464).4" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 710634" />
<Node Id="25003:[11164..11464).5" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 710635" />
<Node Id="25003:[11224..11449).4" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 710636" />
<Node Id="25003:[11294..11430).3" Label="if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    } 710637" />
<Node Id="25003:[11480..11903).4" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 710638" />
<Node Id="25003:[11480..11903).5" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 710639" />
<Node Id="25003:[11917..12344).4" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 710640" />
<Node Id="25003:[11917..12344).5" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 710641" />
<Node Id="25003:[12436..12535).3" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 710642" />
<Node Id="25003:[12855..12915).4" Label="if (d._arguments == null)
                    return false; 710643" />
<Node Id="25003:[13514..13693).5" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 710644" />
<Node Id="25003:[20640..20746).1" Label="if (idx != -1)
                {
                    diffDescription = expected[idx];
                } 710645" />
<Node Id="25003:[20640..20746).2" Label="if (idx != -1)
                {
                    diffDescription = expected[idx];
                } 710646" />
<Node Id="25003:[20695..20727).1" Label="diffDescription = expected[idx]; 710647" />
<Node Id="25003:[20764..20834).1" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 710648" />
<Node Id="25003:[20764..20834).2" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 710649" />
<Node Id="25003:[20782..20832).1" Label="GetDiagnosticDescription(description, indentDepth) 710650" />
<Node Id="25003:[22283..22306).2" Label="param GetDiagnosticDescription(DiagnosticDescription d) 710651" />
<Node Id="25003:[22308..22323).2" Label="param GetDiagnosticDescription(int indentDepth) 710652" />
<Node Id="25003:[22349..22404).10" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710653" />
<Node Id="25003:[22349..22404).13" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710654" />
<Node Id="25003:[14837..14866).3" Label="var sb = new StringBuilder(); 710655" />
<Node Id="25003:[14882..14907).4" Label="sb.Append('Diagnostic('); 710656" />
<Node Id="25003:[14882..14907).6" Label="sb.Append('Diagnostic('); 710657" />
<Node Id="25003:[14921..15244).4" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 710658" />
<Node Id="25003:[14921..15244).5" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 710659" />
<Node Id="25003:[15100..15131).3" Label="sb.Append(_errorCodeType.Name); 710660" />
<Node Id="25003:[15100..15131).4" Label="sb.Append(_errorCodeType.Name); 710661" />
<Node Id="25003:[15149..15164).4" Label="sb.Append('.'); 710662" />
<Node Id="25003:[15149..15164).6" Label="sb.Append('.'); 710663" />
<Node Id="25003:[15182..15229).6" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710664" />
<Node Id="25003:[15182..15229).10" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710665" />
<Node Id="25003:[15260..15767).4" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 710666" />
<Node Id="25003:[15260..15767).5" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 710667" />
<Node Id="25003:[15320..15717).13" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 710668" />
<Node Id="25003:[15632..15650).4" Label="sb.Append(', \''); 710669" />
<Node Id="25003:[15632..15650).6" Label="sb.Append(', \''); 710670" />
<Node Id="25003:[15672..15698).3" Label="sb.Append(_squiggledText); 710671" />
<Node Id="25003:[15672..15698).4" Label="sb.Append(_squiggledText); 710672" />
<Node Id="25003:[15737..15752).4" Label="sb.Append('''); 710673" />
<Node Id="25003:[15737..15752).6" Label="sb.Append('''); 710674" />
<Node Id="25003:[15783..15883).2" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 710675" />
<Node Id="25003:[15899..15914).4" Label="sb.Append(')'); 710676" />
<Node Id="25003:[15899..15914).6" Label="sb.Append(')'); 710677" />
<Node Id="25003:[15930..16520).5" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 710678" />
<Node Id="25003:[15986..16015).4" Label="sb.Append('.WithArguments('); 710679" />
<Node Id="25003:[15986..16015).6" Label="sb.Append('.WithArguments('); 710680" />
<Node Id="25003:[16202..16218).7" Label="sb.Append('\''); 710681" />
<Node Id="25003:[16202..16218).9" Label="sb.Append('\''); 710682" />
<Node Id="25003:[16240..16275).5" Label="sb.Append(argumentStrings.Current); 710683" />
<Node Id="25003:[16240..16275).6" Label="sb.Append(argumentStrings.Current); 710684" />
<Node Id="25003:[16297..16313).7" Label="sb.Append('\''); 710685" />
<Node Id="25003:[16297..16313).9" Label="sb.Append('\''); 710686" />
<Node Id="25003:[16335..16453).9" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 710687" />
<Node Id="25003:[16414..16430).4" Label="sb.Append(', '); 710688" />
<Node Id="25003:[16414..16430).6" Label="sb.Append(', '); 710689" />
<Node Id="25003:[16490..16505).4" Label="sb.Append(')'); 710690" />
<Node Id="25003:[16490..16505).6" Label="sb.Append(')'); 710691" />
<Node Id="25003:[16536..16829).4" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 710692" />
<Node Id="25003:[16536..16829).5" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 710693" />
<Node Id="25003:[16596..16624).4" Label="sb.Append('.WithLocation('); 710694" />
<Node Id="25003:[16596..16624).6" Label="sb.Append('.WithLocation('); 710695" />
<Node Id="25003:[16642..16683).5" Label="sb.Append(_startPosition.Value.Line + 1); 710696" />
<Node Id="25003:[16642..16683).8" Label="sb.Append(_startPosition.Value.Line + 1); 710697" />
<Node Id="25003:[16701..16717).4" Label="sb.Append(', '); 710698" />
<Node Id="25003:[16701..16717).6" Label="sb.Append(', '); 710699" />
<Node Id="25003:[16735..16781).5" Label="sb.Append(_startPosition.Value.Character + 1); 710700" />
<Node Id="25003:[16735..16781).8" Label="sb.Append(_startPosition.Value.Character + 1); 710701" />
<Node Id="25003:[16799..16814).4" Label="sb.Append(')'); 710702" />
<Node Id="25003:[16799..16814).6" Label="sb.Append(')'); 710703" />
<Node Id="25003:[16845..16954).2" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 710704" />
<Node Id="25003:[16970..17144).4" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 710705" />
<Node Id="25003:[16970..17144).5" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 710706" />
<Node Id="25003:[17160..17340).4" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 710707" />
<Node Id="25003:[17160..17340).5" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 710708" />
<Node Id="25003:[17356..17482).5" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 710709" />
<Node Id="25003:[17356..17482).6" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 710710" />
<Node Id="25003:[17498..17519).3" Label="return sb.ToString(); 710711" />
<Node Id="25003:[22349..22404).16" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710712" />
<Node Id="25003:[22349..22404).17" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710713" />
<Node Id="25003:[20764..20834).5" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 710714" />
<Node Id="25003:[20852..20923).1" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 710715" />
<Node Id="25003:[20852..20923).2" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 710716" />
<Node Id="25003:[20867..20921).1" Label="GetDiagnosticDescription(diffDescription, indentDepth) 710717" />
<Node Id="25003:[22283..22306).3" Label="param GetDiagnosticDescription(DiagnosticDescription d) 710718" />
<Node Id="25003:[22308..22323).3" Label="param GetDiagnosticDescription(int indentDepth) 710719" />
<Node Id="25003:[22349..22404).19" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710720" />
<Node Id="25003:[22349..22404).22" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710721" />
<Node Id="25003:[14837..14866).5" Label="var sb = new StringBuilder(); 710722" />
<Node Id="25003:[14882..14907).7" Label="sb.Append('Diagnostic('); 710723" />
<Node Id="25003:[14882..14907).9" Label="sb.Append('Diagnostic('); 710724" />
<Node Id="25003:[14921..15244).7" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 710725" />
<Node Id="25003:[14921..15244).8" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 710726" />
<Node Id="25003:[15100..15131).5" Label="sb.Append(_errorCodeType.Name); 710727" />
<Node Id="25003:[15100..15131).6" Label="sb.Append(_errorCodeType.Name); 710728" />
<Node Id="25003:[15149..15164).7" Label="sb.Append('.'); 710729" />
<Node Id="25003:[15149..15164).9" Label="sb.Append('.'); 710730" />
<Node Id="25003:[15182..15229).11" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710731" />
<Node Id="25003:[15182..15229).15" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 710732" />
<Node Id="25003:[15260..15767).7" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 710733" />
<Node Id="25003:[15260..15767).8" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 710734" />
<Node Id="25003:[15320..15717).25" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 710735" />
<Node Id="25003:[15632..15650).7" Label="sb.Append(', \''); 710736" />
<Node Id="25003:[15632..15650).9" Label="sb.Append(', \''); 710737" />
<Node Id="25003:[15672..15698).5" Label="sb.Append(_squiggledText); 710738" />
<Node Id="25003:[15672..15698).6" Label="sb.Append(_squiggledText); 710739" />
<Node Id="25003:[15737..15752).7" Label="sb.Append('''); 710740" />
<Node Id="25003:[15737..15752).9" Label="sb.Append('''); 710741" />
<Node Id="25003:[15783..15883).3" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 710742" />
<Node Id="25003:[15899..15914).7" Label="sb.Append(')'); 710743" />
<Node Id="25003:[15899..15914).9" Label="sb.Append(')'); 710744" />
<Node Id="25003:[15930..16520).8" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 710745" />
<Node Id="25003:[15986..16015).7" Label="sb.Append('.WithArguments('); 710746" />
<Node Id="25003:[15986..16015).9" Label="sb.Append('.WithArguments('); 710747" />
<Node Id="25003:[16202..16218).13" Label="sb.Append('\''); 710748" />
<Node Id="25003:[16202..16218).15" Label="sb.Append('\''); 710749" />
<Node Id="25003:[16240..16275).9" Label="sb.Append(argumentStrings.Current); 710750" />
<Node Id="25003:[16240..16275).10" Label="sb.Append(argumentStrings.Current); 710751" />
<Node Id="25003:[16297..16313).13" Label="sb.Append('\''); 710752" />
<Node Id="25003:[16297..16313).15" Label="sb.Append('\''); 710753" />
<Node Id="25003:[16335..16453).17" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 710754" />
<Node Id="25003:[16414..16430).7" Label="sb.Append(', '); 710755" />
<Node Id="25003:[16414..16430).9" Label="sb.Append(', '); 710756" />
<Node Id="25003:[16490..16505).7" Label="sb.Append(')'); 710757" />
<Node Id="25003:[16490..16505).9" Label="sb.Append(')'); 710758" />
<Node Id="25003:[16536..16829).7" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 710759" />
<Node Id="25003:[16536..16829).8" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 710760" />
<Node Id="25003:[16596..16624).7" Label="sb.Append('.WithLocation('); 710761" />
<Node Id="25003:[16596..16624).9" Label="sb.Append('.WithLocation('); 710762" />
<Node Id="25003:[16642..16683).9" Label="sb.Append(_startPosition.Value.Line + 1); 710763" />
<Node Id="25003:[16642..16683).12" Label="sb.Append(_startPosition.Value.Line + 1); 710764" />
<Node Id="25003:[16701..16717).7" Label="sb.Append(', '); 710765" />
<Node Id="25003:[16701..16717).9" Label="sb.Append(', '); 710766" />
<Node Id="25003:[16735..16781).9" Label="sb.Append(_startPosition.Value.Character + 1); 710767" />
<Node Id="25003:[16735..16781).12" Label="sb.Append(_startPosition.Value.Character + 1); 710768" />
<Node Id="25003:[16799..16814).7" Label="sb.Append(')'); 710769" />
<Node Id="25003:[16799..16814).9" Label="sb.Append(')'); 710770" />
<Node Id="25003:[16845..16954).3" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 710771" />
<Node Id="25003:[16970..17144).7" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 710772" />
<Node Id="25003:[16970..17144).8" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 710773" />
<Node Id="25003:[17160..17340).7" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 710774" />
<Node Id="25003:[17160..17340).8" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 710775" />
<Node Id="25003:[17356..17482).9" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 710776" />
<Node Id="25003:[17356..17482).10" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 710777" />
<Node Id="25003:[17498..17519).5" Label="return sb.ToString(); 710778" />
<Node Id="25003:[22349..22404).25" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710779" />
<Node Id="25003:[22349..22404).26" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 710780" />
<Node Id="25003:[20852..20923).5" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 710781" />
<Node Id="25003:[20952..21034).1" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 710782" />
<Node Id="25003:[20952..21034).2" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 710783" />
<Node Id="25003:[20995..21019).1" Label="assertText.AppendLine(); 710784" />
<Node Id="25003:[21050..21081).1" Label="assertText.AppendLine('Diff:'); 710785" />
<Node Id="25003:[21050..21081).3" Label="assertText.AppendLine('Diff:'); 710786" />
<Node Id="25003:[21095..21192).1" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 710787" />
<Node Id="25003:[21095..21192).2" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 710788" />
<Node Id="25012:[3121..3141).1" Label="new[] { '\r', '\n' } 710789" />
<Node Id="25012:[3129..3133).1" Label="'\r' 710790" />
<Node Id="25012:[3135..3139).1" Label="'\n' 710791" />
<Node Id="25012:[3121..3141).4" Label="new[] { '\r', '\n' } 710792" />
<Node Id="25012:[3121..3141).5" Label="new[] { '\r', '\n' } 710793" />
<Node Id="25012:[3102..3141).1" Label="s_lineSplitChars = new[] { '\r', '\n' } 710794" />
<Node Id="25003:[21095..21192).3" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 710795" />
<Node Id="25003:[21095..21192).4" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 710796" />
<Node Id="25003:[21113..21190).1" Label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 710797" />
<Node Id="25012:[2473..2496).1" Label="param DiffReport(IEnumerable$T$ expected) 710798" />
<Node Id="25012:[2498..2519).1" Label="param DiffReport(IEnumerable$T$ actual) 710799" />
<Node Id="25012:[2521..2537).1" Label="param DiffReport(string separator) 710800" />
<Node Id="25012:[2539..2575).1" Label="param DiffReport(IEqualityComparer$T$ comparer = null) 710801" />
<Node Id="25012:[2577..2608).1" Label="param DiffReport(Func$T, string$ toString = null) 710802" />
<Node Id="25012:[2634..2703).1" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 710803" />
<Node Id="25012:[2634..2703).2" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 710804" />
<Node Id="25012:[2644..2662).1" Label="(comparer != null) 710805" />
<Node Id="25012:[1074..1101).1" Label="EqualityComparer$T$.Default 710806" />
<Node Id="25012:[1063..1102).1" Label="new LCS$T$(EqualityComparer$T$.Default) 710807" />
<Node Id="25012:[1194..1223).1" Label="param LCS(IEqualityComparer$T$ comparer) 710808" />
<Node Id="25012:[1183..1293).1" Label="param LCS(this) 710809" />
<Node Id="25012:[4230..4231).1" Label="1 710810" />
<Node Id="25012:[4217..4231).1" Label="DeleteCost = 1 710811" />
<Node Id="25012:[4277..4278).1" Label="1 710812" />
<Node Id="25012:[4264..4278).1" Label="InsertCost = 1 710813" />
<Node Id="25012:[4324..4325).1" Label="2 710814" />
<Node Id="25012:[4311..4325).1" Label="UpdateCost = 2 710815" />
<Node Id="25012:[3676..10647).1" Label="param LongestCommonSubsequence(this) 710816" />
<Node Id="25012:[1157..1166).1" Label="_comparer 710817" />
<Node Id="25012:[1257..1266).1" Label="_comparer 710818" />
<Node Id="25012:[1053..1102).1" Label="Default = new LCS$T$(EqualityComparer$T$.Default) 710819" />
<Node Id="25012:[2717..2783).1" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 710820" />
<Node Id="25012:[2717..2783).3" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 710821" />
<Node Id="25012:[2799..2869).1" Label="IList$T$ expectedList = expected as IList$T$ ?? new List$T$(expected); 710822" />
<Node Id="25012:[2883..2947).1" Label="IList$T$ actualList = actual as IList$T$ ?? new List$T$(actual); 710823" />
<Node Id="25012:[2963..3048).1" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 710824" />
<Node Id="25012:[2963..3048).2" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 710825" />
<Node Id="25012:[2963..3048).3" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 710826" />
<Node Id="25012:[2963..3048).4" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 710827" />
<Node Id="25012:[2993..3046).1" Label="lcs.CalculateDiff(expectedList, actualList, toString) 710828" />
<Node Id="25012:[1574..1592).1" Label="param CalculateDiff(IList$T$ sequenceA) 710829" />
<Node Id="25012:[1594..1612).1" Label="param CalculateDiff(IList$T$ sequenceB) 710830" />
<Node Id="25012:[1614..1638).1" Label="param CalculateDiff(Func$T, string$ toString) 710831" />
<Node Id="25012:[1533..2415).1" Label="param CalculateDiff(this) 710832" />
<Node Id="25012:[1672..2400).1" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 710833" />
<Node Id="25012:[1672..2400).2" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 710834" />
<Node Id="25012:[1672..2400).3" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 710835" />
<Node Id="25012:[1672..2400).4" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 710836" />
<Node Id="25012:[1693..1757).1" Label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 710837" />
<Node Id="25012:[5394..5413).1" Label="param GetEdits(TSequence sequenceA) 710838" />
<Node Id="25012:[5415..5426).1" Label="param GetEdits(int lengthA) 710839" />
<Node Id="25012:[5428..5447).1" Label="param GetEdits(TSequence sequenceB) 710840" />
<Node Id="25012:[5449..5460).1" Label="param GetEdits(int lengthB) 710841" />
<Node Id="25012:[5357..6686).1" Label="param GetEdits(this) 710842" />
<Node Id="25012:[5494..5563).1" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 710843" />
<Node Id="25012:[5494..5563).2" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 710844" />
<Node Id="25012:[5494..5563).3" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 710845" />
<Node Id="25012:[5494..5563).4" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 710846" />
<Node Id="25012:[5505..5562).1" Label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 710847" />
<Node Id="25012:[9402..9421).1" Label="param ComputeCostMatrix(TSequence sequenceA) 710848" />
<Node Id="25012:[9423..9434).1" Label="param ComputeCostMatrix(int lengthA) 710849" />
<Node Id="25012:[9436..9455).1" Label="param ComputeCostMatrix(TSequence sequenceB) 710850" />
<Node Id="25012:[9457..9468).1" Label="param ComputeCostMatrix(int lengthB) 710851" />
<Node Id="25012:[9369..10636).1" Label="param ComputeCostMatrix(this) 710852" />
<Node Id="25012:[9502..9523).1" Label="var la = lengthA + 1; 710853" />
<Node Id="25012:[9502..9523).2" Label="var la = lengthA + 1; 710854" />
<Node Id="25012:[9541..9562).1" Label="var lb = lengthB + 1; 710855" />
<Node Id="25012:[9541..9562).2" Label="var lb = lengthB + 1; 710856" />
<Node Id="25012:[9740..9764).1" Label="var d = new int[la, lb]; 710857" />
<Node Id="25012:[9784..9796).1" Label="d[0, 0] = 0; 710858" />
<Node Id="25012:[9784..9791).1" Label="d[0, 0] 710859" />
<Node Id="25012:[9814..9943).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 710860" />
<Node Id="25012:[9814..9943).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 710861" />
<Node Id="25012:[9889..9924).1" Label="d[i, 0] = d[i - 1, 0] + DeleteCost; 710862" />
<Node Id="25012:[9889..9924).5" Label="d[i, 0] = d[i - 1, 0] + DeleteCost; 710863" />
<Node Id="25012:[9889..9896).1" Label="d[i, 0] 710864" />
<Node Id="25012:[9963..10092).1" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 710865" />
<Node Id="25012:[9963..10092).3" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 710866" />
<Node Id="25012:[10038..10073).1" Label="d[0, j] = d[0, j - 1] + InsertCost; 710867" />
<Node Id="25012:[10038..10073).5" Label="d[0, j] = d[0, j - 1] + InsertCost; 710868" />
<Node Id="25012:[10038..10045).1" Label="d[0, j] 710869" />
<Node Id="25012:[10112..10592).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 710870" />
<Node Id="25012:[10112..10592).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 710871" />
<Node Id="25012:[10187..10573).1" Label="for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    } 710872" />
<Node Id="25012:[10187..10573).3" Label="for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    } 710873" />
<Node Id="25012:[10270..10363).1" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 710874" />
<Node Id="25012:[10270..10363).5" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 710875" />
<Node Id="25012:[10270..10363).6" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 710876" />
<Node Id="25012:[10270..10363).10" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 710877" />
<Node Id="25012:[10298..10344).1" Label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 710878" />
<Node Id="25012:[1344..1362).1" Label="param ItemsEqual(IList$T$ sequenceA) 710879" />
<Node Id="25012:[1364..1374).1" Label="param ItemsEqual(int indexA) 710880" />
<Node Id="25012:[1376..1394).1" Label="param ItemsEqual(IList$T$ sequenceB) 710881" />
<Node Id="25012:[1396..1406).1" Label="param ItemsEqual(int indexB) 710882" />
<Node Id="25012:[1309..1517).1" Label="param ItemsEqual(this) 710883" />
<Node Id="25012:[1440..1502).1" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 710884" />
<Node Id="25012:[1440..1502).3" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 710885" />
<Node Id="25012:[1440..1502).5" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 710886" />
<Node Id="25012:[10270..10363).17" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 710887" />
<Node Id="25012:[10389..10423).1" Label="int m2 = d[i - 1, j] + DeleteCost; 710888" />
<Node Id="25012:[10389..10423).3" Label="int m2 = d[i - 1, j] + DeleteCost; 710889" />
<Node Id="25012:[10449..10483).1" Label="int m3 = d[i, j - 1] + InsertCost; 710890" />
<Node Id="25012:[10449..10483).3" Label="int m3 = d[i, j - 1] + InsertCost; 710891" />
<Node Id="25012:[10509..10550).1" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 710892" />
<Node Id="25012:[10509..10550).2" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 710893" />
<Node Id="25012:[10509..10550).3" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 710894" />
<Node Id="25012:[10509..10550).5" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 710895" />
<Node Id="25012:[10509..10550).6" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 710896" />
<Node Id="25012:[10509..10516).1" Label="d[i, j] 710897" />
<Node Id="25012:[10612..10621).1" Label="return d; 710898" />
<Node Id="25012:[5581..5597).1" Label="int i = lengthA; 710899" />
<Node Id="25012:[5615..5631).1" Label="int j = lengthB; 710900" />
<Node Id="25012:[5651..6341).1" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 710901" />
<Node Id="25012:[5651..6341).2" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 710902" />
<Node Id="25012:[5651..6341).4" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 710903" />
<Node Id="25012:[5651..6341).5" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 710904" />
<Node Id="25012:[5716..6322).1" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 710905" />
<Node Id="25012:[5716..6322).2" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 710906" />
<Node Id="25012:[5716..6322).4" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 710907" />
<Node Id="25012:[5931..6322).1" Label="if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 710908" />
<Node Id="25012:[5931..6322).2" Label="if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 710909" />
<Node Id="25012:[6194..6198).1" Label="i--; 710910" />
<Node Id="25012:[6224..6228).1" Label="j--; 710911" />
<Node Id="25012:[6254..6299).1" Label="yield return new Edit(EditKind.Update, i, j); 710912" />
<Node Id="25012:[6254..6299).2" Label="yield return new Edit(EditKind.Update, i, j); 710913" />
<Node Id="25012:[6254..6299).3" Label="yield return new Edit(EditKind.Update, i, j); 710914" />
<Node Id="25012:[6254..6299).4" Label="yield return new Edit(EditKind.Update, i, j); 710915" />
<Node Id="25012:[6267..6298).1" Label="new Edit(EditKind.Update, i, j) 710916" />
<Node Id="25012:[3967..3980).1" Label="param Edit(EditKind kind) 710917" />
<Node Id="25012:[3982..3992).1" Label="param Edit(int indexA) 710918" />
<Node Id="25012:[3994..4004).1" Label="param Edit(int indexB) 710919" />
<Node Id="25012:[3953..4168).1" Label="param Edit(this) 710920" />
<Node Id="25012:[4046..4055).1" Label="this.Kind 710921" />
<Node Id="25012:[4085..4096).1" Label="this.IndexA 710922" />
<Node Id="25012:[4128..4139).1" Label="this.IndexB 710923" />
<Node Id="25012:[6361..6506).1" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 710924" />
<Node Id="25012:[6361..6506).2" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 710925" />
<Node Id="25012:[6526..6671).1" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 710926" />
<Node Id="25012:[6526..6671).2" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 710927" />
<Node Id="25012:[1672..2400).7" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 710928" />
<Node Id="25012:[1809..2381).1" Label="switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    } 710929" />
<Node Id="25012:[2267..2322).1" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 710930" />
<Node Id="25012:[2267..2322).3" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 710931" />
<Node Id="25012:[2267..2322).5" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 710932" />
<Node Id="25012:[2963..3048).7" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 710933" />
<Node Id="25003:[21095..21192).10" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 710934" />
<Node Id="25003:[21208..21226).1" Label="actualText.Free(); 710935" />
<Node Id="25003:[21240..21260).1" Label="expectedText.Free(); 710936" />
<Node Id="25003:[21276..21305).1" Label="return assertText.ToString(); 710937" />
<Node Id="25002:[2401..2451).3" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 710938" />
<Node Id="25002:[4446..4475).3" Label="diagnostics.Verify(expected); 710939" />
<Node Id="25002:[4489..4523).1" Label="VerifyAssemblyIds(c, diagnostics); 710940" />
<Node Id="25002:[4489..4523).2" Label="VerifyAssemblyIds(c, diagnostics); 710941" />
<Node Id="25002:[4489..4522).1" Label="VerifyAssemblyIds(c, diagnostics) 710942" />
<Node Id="25002:[4637..4651).1" Label="param VerifyAssemblyIds(TCompilation c) 710943" />
<Node Id="25002:[4653..4691).1" Label="param VerifyAssemblyIds(ImmutableArray$Diagnostic$ diagnostics) 710944" />
<Node Id="25002:[4750..5836).1" Label="foreach (var diagnostic in diagnostics)
            {
                // If this is a diagnostic about a missing assembly, make sure that we can get back
                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about
                // a missing assembly, make sure we get no results back.
                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                }
            } 710945" />
<Node Id="25002:[5097..5821).1" Label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                } 710946" />
<Node Id="25002:[5097..5821).2" Label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                } 710947" />
<Node Id="25002:[5675..5741).1" Label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 710948" />
<Node Id="25002:[5763..5802).1" Label="CustomAssert.True(assemblyIds.IsEmpty); 710949" />
<Node Id="25002:[4489..4523).3" Label="VerifyAssemblyIds(c, diagnostics); 710950" />
<Node Id="25002:[4539..4548).1" Label="return c; 710951" />
</Nodes>
<Links>
<Link Source="25014:[390..448).1" Target="EXTERNAL" />
<Link Source="25014:[390..448).1" Target="25014:[387..448).1" />
<Link Source="28001:[588..156578).1" Target="25014:[387..448).1" />
<Link Source="21002:[772..793).1" Target="21002:[790..793).1" />
<Link Source="21002:[825..848).1" Target="21002:[845..848).1" />
<Link Source="21002:[3098..25375).1" Target="21002:[3243..25375).1" />
<Link Source="21002:[678..25421).1" Target="28001:[588..156578).1" />
<Link Source="21003:[1308..2835).1" Target="21003:[1338..2835).1" />
<Link Source="21003:[2871..3440).1" Target="21003:[2908..3440).1" />
<Link Source="21003:[3476..3915).1" Target="21003:[3516..3915).1" />
<Link Source="21003:[4192..4448).1" Target="21003:[4223..4448).1" />
<Link Source="21003:[4484..4746).1" Target="21003:[4518..4746).1" />
<Link Source="21003:[4782..5071).1" Target="21003:[4813..5071).1" />
<Link Source="21003:[5107..5397).1" Target="21003:[5142..5397).1" />
<Link Source="21003:[5433..5718).1" Target="21003:[5462..5718).1" />
<Link Source="21003:[5754..6038).1" Target="21003:[5787..6038).1" />
<Link Source="21003:[6074..6460).1" Target="21003:[6109..6460).1" />
<Link Source="21003:[6496..6920).1" Target="21003:[6535..6920).1" />
<Link Source="21003:[6956..7250).1" Target="21003:[6993..7250).1" />
<Link Source="21003:[7286..7557).1" Target="21003:[7321..7557).1" />
<Link Source="21003:[7593..7980).1" Target="21003:[7631..7980).1" />
<Link Source="21003:[8016..8155).1" Target="21003:[8047..8155).1" />
<Link Source="21003:[8191..8359).1" Target="21003:[8220..8359).1" />
<Link Source="21003:[8395..20279).1" Target="21003:[8415..20279).1" />
<Link Source="21003:[20315..20617).1" Target="21003:[20353..20617).1" />
<Link Source="21003:[20653..21473).1" Target="21003:[20689..21473).1" />
<Link Source="25004:[2227..2317).1" Target="EXTERNAL" />
<Link Source="25004:[2332..2368).1" Target="EXTERNAL" />
<Link Source="25004:[2183..2369).1" Target="25004:[2227..2317).1" />
<Link Source="25004:[2183..2369).1" Target="25004:[2332..2368).1" />
<Link Source="25004:[2183..2369).1" Target="EXTERNAL" />
<Link Source="25004:[2155..2369).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2602..2696).1" Target="EXTERNAL" />
<Link Source="25004:[2711..2747).1" Target="EXTERNAL" />
<Link Source="25004:[2558..2748).1" Target="25004:[2602..2696).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2711..2747).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2531..2748).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[2914..2947).1" Target="EXTERNAL" />
<Link Source="25004:[3094..3171).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[3094..3171).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[2894..3172).1" Target="25004:[3077..3172).1" />
<Link Source="25004:[5182..5218).1" Target="EXTERNAL" />
<Link Source="25004:[3446..5219).1" Target="25004:[3490..5167).1" />
<Link Source="25004:[3446..5219).1" Target="25004:[5182..5218).1" />
<Link Source="25004:[3432..5219).1" Target="25004:[3446..5219).1" />
<Link Source="25004:[5576..5645).1" Target="EXTERNAL" />
<Link Source="25004:[5660..5696).1" Target="EXTERNAL" />
<Link Source="25004:[5532..5697).1" Target="25004:[5576..5645).1" />
<Link Source="25004:[5532..5697).1" Target="25004:[5660..5696).1" />
<Link Source="25004:[5532..5697).1" Target="EXTERNAL" />
<Link Source="25004:[5508..5697).1" Target="25004:[5532..5697).1" />
<Link Source="25004:[6321..6439).1" Target="EXTERNAL" />
<Link Source="25004:[6458..6494).1" Target="EXTERNAL" />
<Link Source="25004:[6275..6495).1" Target="25004:[6321..6439).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[6458..6494).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[6244..6495).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6714..6838).1" Target="EXTERNAL" />
<Link Source="25004:[6853..6889).1" Target="EXTERNAL" />
<Link Source="25004:[6672..6890).1" Target="25004:[6714..6838).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6853..6889).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6637..6890).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7130..7249).1" Target="EXTERNAL" />
<Link Source="25004:[7264..7300).1" Target="EXTERNAL" />
<Link Source="25004:[7088..7301).1" Target="25004:[7130..7249).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[7264..7300).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7066..7301).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[7532..7667).1" Target="EXTERNAL" />
<Link Source="25004:[7682..7718).1" Target="EXTERNAL" />
<Link Source="25004:[7490..7719).1" Target="25004:[7532..7667).1" />
<Link Source="25004:[7490..7719).1" Target="25004:[7682..7718).1" />
<Link Source="25004:[7490..7719).1" Target="EXTERNAL" />
<Link Source="25004:[7464..7719).1" Target="25004:[7490..7719).1" />
<Link Source="25004:[7940..8064).1" Target="EXTERNAL" />
<Link Source="25004:[8079..8115).1" Target="EXTERNAL" />
<Link Source="25004:[7898..8116).1" Target="25004:[7940..8064).1" />
<Link Source="25004:[7898..8116).1" Target="25004:[8079..8115).1" />
<Link Source="25004:[7898..8116).1" Target="EXTERNAL" />
<Link Source="25004:[7877..8116).1" Target="25004:[7898..8116).1" />
<Link Source="25004:[8324..8442).1" Target="EXTERNAL" />
<Link Source="25004:[8457..8493).1" Target="EXTERNAL" />
<Link Source="25004:[8282..8494).1" Target="25004:[8324..8442).1" />
<Link Source="25004:[8282..8494).1" Target="25004:[8457..8493).1" />
<Link Source="25004:[8282..8494).1" Target="EXTERNAL" />
<Link Source="25004:[8264..8494).1" Target="25004:[8282..8494).1" />
<Link Source="25004:[8694..8807).1" Target="EXTERNAL" />
<Link Source="25004:[8822..8858).1" Target="EXTERNAL" />
<Link Source="25004:[8652..8859).1" Target="25004:[8694..8807).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[8822..8858).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[8636..8859).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[9063..9214).1" Target="EXTERNAL" />
<Link Source="25004:[9229..9265).1" Target="EXTERNAL" />
<Link Source="25004:[9021..9266).1" Target="25004:[9063..9214).1" />
<Link Source="25004:[9021..9266).1" Target="25004:[9229..9265).1" />
<Link Source="25004:[9021..9266).1" Target="EXTERNAL" />
<Link Source="25004:[8997..9266).1" Target="25004:[9021..9266).1" />
<Link Source="25004:[10404..10440).1" Target="EXTERNAL" />
<Link Source="25004:[9436..10441).1" Target="25004:[9478..10389).1" />
<Link Source="25004:[9436..10441).1" Target="25004:[10404..10440).1" />
<Link Source="25004:[9420..10441).1" Target="25004:[9436..10441).1" />
<Link Source="25004:[10811..10967).1" Target="EXTERNAL" />
<Link Source="25004:[10982..11018).1" Target="EXTERNAL" />
<Link Source="25004:[10769..11019).1" Target="25004:[10811..10967).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[10982..11018).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[10749..11019).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[11415..11589).1" Target="EXTERNAL" />
<Link Source="25004:[11604..11640).1" Target="EXTERNAL" />
<Link Source="25004:[11373..11641).1" Target="25004:[11415..11589).1" />
<Link Source="25004:[11373..11641).1" Target="25004:[11604..11640).1" />
<Link Source="25004:[11373..11641).1" Target="EXTERNAL" />
<Link Source="25004:[11345..11641).1" Target="25004:[11373..11641).1" />
<Link Source="25004:[12432..12560).1" Target="EXTERNAL" />
<Link Source="25004:[12575..12611).1" Target="EXTERNAL" />
<Link Source="25004:[12390..12612).1" Target="25004:[12432..12560).1" />
<Link Source="25004:[12390..12612).1" Target="25004:[12575..12611).1" />
<Link Source="25004:[12390..12612).1" Target="EXTERNAL" />
<Link Source="25004:[12369..12612).1" Target="25004:[12390..12612).1" />
<Link Source="25004:[12815..12944).1" Target="EXTERNAL" />
<Link Source="25004:[12959..12995).1" Target="EXTERNAL" />
<Link Source="25004:[12773..12996).1" Target="25004:[12815..12944).1" />
<Link Source="25004:[12773..12996).1" Target="25004:[12959..12995).1" />
<Link Source="25004:[12773..12996).1" Target="EXTERNAL" />
<Link Source="25004:[12760..12996).1" Target="25004:[12773..12996).1" />
<Link Source="25004:[13204..13343).1" Target="EXTERNAL" />
<Link Source="25004:[13358..13394).1" Target="EXTERNAL" />
<Link Source="25004:[13162..13395).1" Target="25004:[13204..13343).1" />
<Link Source="25004:[13162..13395).1" Target="25004:[13358..13394).1" />
<Link Source="25004:[13162..13395).1" Target="EXTERNAL" />
<Link Source="25004:[13138..13395).1" Target="25004:[13162..13395).1" />
<Link Source="25004:[13621..13796).1" Target="EXTERNAL" />
<Link Source="25004:[13811..13847).1" Target="EXTERNAL" />
<Link Source="25004:[13579..13848).1" Target="25004:[13621..13796).1" />
<Link Source="25004:[13579..13848).1" Target="25004:[13811..13847).1" />
<Link Source="25004:[13579..13848).1" Target="EXTERNAL" />
<Link Source="25004:[13551..13848).1" Target="25004:[13579..13848).1" />
<Link Source="25004:[14066..14175).1" Target="EXTERNAL" />
<Link Source="25004:[14190..14226).1" Target="EXTERNAL" />
<Link Source="25004:[14024..14227).1" Target="25004:[14066..14175).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[14190..14226).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[14010..14227).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14421..14531).1" Target="EXTERNAL" />
<Link Source="25004:[14546..14582).1" Target="EXTERNAL" />
<Link Source="25004:[14379..14583).1" Target="25004:[14421..14531).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14546..14582).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14361..14583).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14798..14913).1" Target="EXTERNAL" />
<Link Source="25004:[14928..14964).1" Target="EXTERNAL" />
<Link Source="25004:[14756..14965).1" Target="25004:[14798..14913).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14928..14964).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14725..14965).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15193..15301).1" Target="EXTERNAL" />
<Link Source="25004:[15316..15352).1" Target="EXTERNAL" />
<Link Source="25004:[15151..15353).1" Target="25004:[15193..15301).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[15316..15352).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15133..15353).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[15554..15670).1" Target="EXTERNAL" />
<Link Source="25004:[15685..15721).1" Target="EXTERNAL" />
<Link Source="25004:[15512..15722).1" Target="25004:[15554..15670).1" />
<Link Source="25004:[15512..15722).1" Target="25004:[15685..15721).1" />
<Link Source="25004:[15512..15722).1" Target="EXTERNAL" />
<Link Source="25004:[15495..15722).1" Target="25004:[15512..15722).1" />
<Link Source="25004:[15925..16050).1" Target="EXTERNAL" />
<Link Source="25004:[16065..16101).1" Target="EXTERNAL" />
<Link Source="25004:[15883..16102).1" Target="25004:[15925..16050).1" />
<Link Source="25004:[15883..16102).1" Target="25004:[16065..16101).1" />
<Link Source="25004:[15883..16102).1" Target="EXTERNAL" />
<Link Source="25004:[15862..16102).1" Target="25004:[15883..16102).1" />
<Link Source="25004:[16314..16416).1" Target="EXTERNAL" />
<Link Source="25004:[16431..16467).1" Target="EXTERNAL" />
<Link Source="25004:[16272..16468).1" Target="25004:[16314..16416).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[16431..16467).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[16250..16468).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[16687..16800).1" Target="EXTERNAL" />
<Link Source="25004:[16815..16851).1" Target="EXTERNAL" />
<Link Source="25004:[16645..16852).1" Target="25004:[16687..16800).1" />
<Link Source="25004:[16645..16852).1" Target="25004:[16815..16851).1" />
<Link Source="25004:[16645..16852).1" Target="EXTERNAL" />
<Link Source="25004:[16618..16852).1" Target="25004:[16645..16852).1" />
<Link Source="25004:[17083..17200).1" Target="EXTERNAL" />
<Link Source="25004:[17215..17251).1" Target="EXTERNAL" />
<Link Source="25004:[17041..17252).1" Target="25004:[17083..17200).1" />
<Link Source="25004:[17041..17252).1" Target="25004:[17215..17251).1" />
<Link Source="25004:[17041..17252).1" Target="EXTERNAL" />
<Link Source="25004:[17012..17252).1" Target="25004:[17041..17252).1" />
<Link Source="25004:[17497..17625).1" Target="EXTERNAL" />
<Link Source="25004:[17640..17676).1" Target="EXTERNAL" />
<Link Source="25004:[17455..17677).1" Target="25004:[17497..17625).1" />
<Link Source="25004:[17455..17677).1" Target="25004:[17640..17676).1" />
<Link Source="25004:[17455..17677).1" Target="EXTERNAL" />
<Link Source="25004:[17421..17677).1" Target="25004:[17455..17677).1" />
<Link Source="25004:[17911..18059).1" Target="EXTERNAL" />
<Link Source="25004:[18074..18110).1" Target="EXTERNAL" />
<Link Source="25004:[17869..18111).1" Target="25004:[17911..18059).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[18074..18110).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[17850..18111).1" Target="25004:[17869..18111).1" />
<Link Source="25004:[18321..18481).1" Target="EXTERNAL" />
<Link Source="25004:[18496..18532).1" Target="EXTERNAL" />
<Link Source="25004:[18279..18533).1" Target="25004:[18321..18481).1" />
<Link Source="25004:[18279..18533).1" Target="25004:[18496..18532).1" />
<Link Source="25004:[18279..18533).1" Target="EXTERNAL" />
<Link Source="25004:[18255..18533).1" Target="25004:[18279..18533).1" />
<Link Source="25004:[18754..18880).1" Target="EXTERNAL" />
<Link Source="25004:[18895..18931).1" Target="EXTERNAL" />
<Link Source="25004:[18712..18932).1" Target="25004:[18754..18880).1" />
<Link Source="25004:[18712..18932).1" Target="25004:[18895..18931).1" />
<Link Source="25004:[18712..18932).1" Target="EXTERNAL" />
<Link Source="25004:[18687..18932).1" Target="25004:[18712..18932).1" />
<Link Source="25004:[19120..19147).1" Target="25004:[19130..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19120..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19094..19148).1" />
<Link Source="25004:[19081..19148).1" Target="25004:[19094..19148).5" />
<Link Source="25004:[10673..10688).1" Target="EXTERNAL" />
<Link Source="25004:[10673..10688).1" Target="21003:[51329..51357).1" />
<Link Source="21003:[51307..51358).1" Target="25004:[10673..10688).1" />
<Link Source="21003:[51307..51358).1" Target="EXTERNAL" />
<Link Source="21003:[51292..51358).1" Target="21003:[51307..51358).1" />
<Link Source="21003:[56524..56550).1" Target="21003:[56538..56550).1" />
<Link Source="21003:[56584..56609).1" Target="21003:[56596..56609).1" />
<Link Source="21003:[92381..99056).1" Target="21003:[92394..99056).1" />
<Link Source="21003:[101743..102290).1" Target="21003:[101764..102290).1" />
<Link Source="21003:[1215..102298).1" Target="21002:[678..25421).1" />
<Link Source="25015:[917..26825).1" Target="21003:[1215..102298).1" />
<Link Source="25004:[926..968).1" Target="25015:[917..26825).1" />
<Link Source="25004:[908..913).1" Target="25004:[926..968).1" />
<Link Source="25004:[908..913).1" Target="25015:[917..26825).1" />
<Link Source="25014:[387..448).372" Target="25014:[387..448).1" />
<Link Source="25014:[387..448).372" Target="25014:[390..448).1" />
<Link Source="25014:[387..448).372" Target="25004:[908..913).1" />
<Link Source="28001:[14383..14823).1" Target="25014:[387..448).1" />
<Link Source="28001:[14459..14616).1" Target="25014:[387..448).1" />
<Link Source="28001:[14630..14812).1" Target="28001:[14459..14616).1" />
<Link Source="28001:[14630..14812).1" Target="25014:[387..448).1" />
<Link Source="28001:[14648..14654).1" Target="25014:[387..448).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[14630..14812).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[14648..14654).1" />
<Link Source="21004:[2290..2296).1" Target="21004:[2251..2264).1" />
<Link Source="21004:[2290..2296).1" Target="28001:[14648..14654).1" />
<Link Source="21004:[2269..2297).1" Target="28001:[14648..14654).1" />
<Link Source="21004:[839..851).1" Target="21004:[2290..2296).1" />
<Link Source="21004:[839..851).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[814..902).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[877..882).1" Target="21004:[839..851).1" />
<Link Source="21004:[877..882).1" Target="21004:[814..902).1" />
<Link Source="21004:[877..882).1" Target="21004:[2269..2297).1" />
<Link Source="28001:[14630..14812).2" Target="21004:[2269..2297).1" />
<Link Source="28001:[14630..14812).2" Target="25014:[387..448).1" />
<Link Source="28001:[14630..14812).4" Target="25014:[387..448).1" />
<Link Source="28001:[14630..14655).1" Target="25014:[387..448).1" />
<Link Source="21003:[44736..44759).1" Target="28001:[14630..14812).2" />
<Link Source="21003:[44736..44759).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[44774..44822).1" Target="28001:[14630..14812).4" />
<Link Source="21003:[44774..44822).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[44837..44876).1" Target="28001:[14630..14812).4" />
<Link Source="21003:[44837..44876).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[44891..44929).1" Target="28001:[14630..14812).4" />
<Link Source="21003:[44891..44929).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[44944..45002).1" Target="28001:[14630..14812).4" />
<Link Source="21003:[44944..45002).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45017..45041).1" Target="28001:[14630..14812).4" />
<Link Source="21003:[45017..45041).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45056..45082).1" Target="28001:[14630..14812).4" />
<Link Source="21003:[45056..45082).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45097..45128).1" Target="28001:[14630..14812).4" />
<Link Source="21003:[45097..45128).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45156..45162).1" Target="21003:[44736..44759).1" />
<Link Source="21003:[45156..45162).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45198..45213).1" Target="21003:[44944..45002).1" />
<Link Source="21003:[45198..45213).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45215..45225).1" Target="21003:[44774..44822).1" />
<Link Source="21003:[45215..45225).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45164..45226).1" Target="28001:[14630..14655).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45198..45213).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45215..45225).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9697..9732).1" Target="25005:[9600..9618).1" />
<Link Source="25005:[9697..9732).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9714..9731).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9697..9732).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[7569..7600).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[8889..8907).1" Target="25005:[7605..9525).1" />
<Link Source="25005:[6208..6241).1" Target="EXTERNAL" />
<Link Source="25005:[6208..6241).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[6270..6298).1" Target="25005:[6208..6241).1" />
<Link Source="25005:[4543..4693).1" Target="25005:[6270..6298).1" />
<Link Source="25005:[4648..4670).1" Target="25005:[6270..6298).1" />
<Link Source="25004:[12011..12051).1" Target="EXTERNAL" />
<Link Source="25004:[12011..12051).1" Target="25005:[4648..4670).1" />
<Link Source="25005:[4543..4693).7" Target="25004:[12011..12051).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[4543..4693).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[6270..6298).1" />
<Link Source="25005:[6208..6298).1" Target="25005:[4543..4693).7" />
<Link Source="25005:[6208..6298).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[9746..9845).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9620..9671).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9746..9845).1" />
<Link Source="25005:[9746..9845).2" Target="21003:[45164..45226).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[6208..6298).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[9746..9845).2" />
<Link Source="21003:[45228..45235).1" Target="21003:[44837..44876).1" />
<Link Source="21003:[45228..45235).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45237..45249).1" Target="21003:[44891..44929).1" />
<Link Source="21003:[45237..45249).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45251..45263).1" Target="21003:[45017..45041).1" />
<Link Source="21003:[45251..45263).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45265..45279).1" Target="21003:[45056..45082).1" />
<Link Source="21003:[45265..45279).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45281..45299).1" Target="21003:[45097..45128).1" />
<Link Source="21003:[45281..45299).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45133..45300).1" Target="28001:[14630..14655).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45156..45162).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45420..45468).1" Target="25005:[9812..9830).1" />
<Link Source="21003:[45420..45468).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45228..45235).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45237..45249).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45251..45263).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45265..45279).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45281..45299).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45382..45405).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45420..45468).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45483..45522).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45537..45575).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45590..45614).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45629..45655).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45670..45701).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45842..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45842..45846).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45706..45847).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45728..45734).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45736..45746).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45748..45755).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45757..45769).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45771..45783).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45785..45799).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45801..45819).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45821..45846).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[46070..46101).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[46150..46171).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46298..46349).1" Target="21003:[45706..45847).1" />
<Link Source="21004:[949..980).1" Target="21003:[46280..46350).1" />
<Link Source="21004:[949..980).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[982..1008).1" Target="21003:[46280..46350).2" />
<Link Source="21004:[982..1008).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[914..2190).1" Target="21003:[45929..45952).1" />
<Link Source="21004:[914..2190).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[914..2190).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[877..882).1" />
<Link Source="21004:[1034..2179).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1122..1208).1" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[982..1008).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[949..980).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[1034..2179).1" />
<Link Source="21004:[1137..1205).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34091..34111).1" Target="21004:[1122..1208).3" />
<Link Source="21003:[34091..34111).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34113..34146).1" Target="21004:[1122..1208).4" />
<Link Source="21003:[34113..34146).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34113..34146).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34198..34304).1" />
<Link Source="21003:[34198..34304).2" Target="21004:[1137..1205).1" />
<Link Source="21010:[590..618).1" Target="EXTERNAL" />
<Link Source="21010:[620..662).1" Target="EXTERNAL" />
<Link Source="21010:[567..663).5" Target="21010:[590..618).1" />
<Link Source="21010:[567..663).5" Target="21010:[620..662).1" />
<Link Source="21010:[567..663).5" Target="21010:[567..663).1" />
<Link Source="21010:[557..663).1" Target="21010:[567..663).5" />
<Link Source="21010:[742..763).1" Target="EXTERNAL" />
<Link Source="21010:[725..764).1" Target="21010:[557..663).1" />
<Link Source="21010:[725..764).1" Target="21010:[567..663).5" />
<Link Source="21010:[725..764).1" Target="21010:[742..763).1" />
<Link Source="21010:[716..764).1" Target="21010:[725..764).1" />
<Link Source="21010:[856..879).1" Target="EXTERNAL" />
<Link Source="21010:[828..880).1" Target="21010:[557..663).1" />
<Link Source="21010:[828..880).1" Target="21010:[567..663).5" />
<Link Source="21010:[828..880).1" Target="21010:[856..879).1" />
<Link Source="21010:[817..880).1" Target="21010:[828..880).1" />
<Link Source="21010:[972..995).1" Target="EXTERNAL" />
<Link Source="21010:[944..996).1" Target="21010:[557..663).1" />
<Link Source="21010:[944..996).1" Target="21010:[567..663).5" />
<Link Source="21010:[944..996).1" Target="21010:[972..995).1" />
<Link Source="21010:[933..996).1" Target="21010:[944..996).1" />
<Link Source="21010:[1090..1115).1" Target="EXTERNAL" />
<Link Source="21010:[1062..1116).1" Target="21010:[557..663).1" />
<Link Source="21010:[1062..1116).1" Target="21010:[567..663).5" />
<Link Source="21010:[1062..1116).1" Target="21010:[1090..1115).1" />
<Link Source="21010:[1049..1116).1" Target="21010:[1062..1116).1" />
<Link Source="21010:[1210..1235).1" Target="EXTERNAL" />
<Link Source="21010:[1182..1236).1" Target="21010:[557..663).1" />
<Link Source="21010:[1182..1236).1" Target="21010:[567..663).5" />
<Link Source="21010:[1182..1236).1" Target="21010:[1210..1235).1" />
<Link Source="21010:[1169..1236).1" Target="21010:[1182..1236).1" />
<Link Source="21010:[1330..1355).1" Target="EXTERNAL" />
<Link Source="21010:[1302..1356).1" Target="21010:[557..663).1" />
<Link Source="21010:[1302..1356).1" Target="21010:[567..663).5" />
<Link Source="21010:[1302..1356).1" Target="21010:[1330..1355).1" />
<Link Source="21010:[1289..1356).1" Target="21010:[1302..1356).1" />
<Link Source="21010:[1454..1477).1" Target="EXTERNAL" />
<Link Source="21010:[1426..1478).1" Target="21010:[557..663).1" />
<Link Source="21010:[1426..1478).1" Target="21010:[567..663).5" />
<Link Source="21010:[1426..1478).1" Target="21010:[1454..1477).1" />
<Link Source="21010:[1409..1478).1" Target="21010:[1426..1478).1" />
<Link Source="21010:[1576..1599).1" Target="EXTERNAL" />
<Link Source="21010:[1548..1600).1" Target="21010:[557..663).1" />
<Link Source="21010:[1548..1600).1" Target="21010:[567..663).5" />
<Link Source="21010:[1548..1600).1" Target="21010:[1576..1599).1" />
<Link Source="21010:[1531..1600).1" Target="21010:[1548..1600).1" />
<Link Source="21010:[1692..1715).1" Target="EXTERNAL" />
<Link Source="21010:[1664..1716).1" Target="21010:[557..663).1" />
<Link Source="21010:[1664..1716).1" Target="21010:[567..663).5" />
<Link Source="21010:[1664..1716).1" Target="21010:[1692..1715).1" />
<Link Source="21010:[1653..1716).1" Target="21010:[1664..1716).1" />
<Link Source="21010:[1808..1831).1" Target="EXTERNAL" />
<Link Source="21010:[1780..1832).1" Target="21010:[557..663).1" />
<Link Source="21010:[1780..1832).1" Target="21010:[567..663).5" />
<Link Source="21010:[1780..1832).1" Target="21010:[1808..1831).1" />
<Link Source="21010:[1769..1832).1" Target="21010:[1780..1832).1" />
<Link Source="21010:[1950..1976).1" Target="EXTERNAL" />
<Link Source="21010:[1920..1977).1" Target="21010:[557..663).1" />
<Link Source="21010:[1920..1977).1" Target="21010:[567..663).5" />
<Link Source="21010:[1920..1977).1" Target="21010:[1950..1976).1" />
<Link Source="21010:[1885..1977).1" Target="21010:[1920..1977).1" />
<Link Source="21010:[2060..2067).1" Target="21010:[557..663).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2067).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2080..2109).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7832..7853).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[7783..7814).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).2" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[7816..7830).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[7832..7853).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).3" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).4" />
<Link Source="21010:[7879..7992).5" Target="21010:[2060..2110).1" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).5" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).2" />
<Link Source="21010:[7931..7989).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).2" />
<Link Source="21010:[7879..7992).9" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[7931..7989).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[2060..2110).1" />
<Link Source="21010:[2030..2110).1" Target="21010:[7879..7992).9" />
<Link Source="21010:[2227..2274).1" Target="EXTERNAL" />
<Link Source="21010:[2227..2292).1" Target="21010:[2227..2274).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2227..2292).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2295..2296).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[557..663).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[567..663).5" />
<Link Source="21010:[2199..2297).1" Target="21010:[2227..2296).1" />
<Link Source="21010:[2163..2297).1" Target="21010:[2199..2297).1" />
<Link Source="21010:[2401..2450).1" Target="EXTERNAL" />
<Link Source="21010:[2401..2468).1" Target="21010:[2401..2450).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[557..663).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[567..663).5" />
<Link Source="21010:[2373..2469).1" Target="21010:[2401..2468).1" />
<Link Source="21010:[2350..2469).1" Target="21010:[2373..2469).1" />
<Link Source="21010:[2576..2599).1" Target="EXTERNAL" />
<Link Source="21010:[2548..2600).1" Target="21010:[557..663).1" />
<Link Source="21010:[2548..2600).1" Target="21010:[567..663).5" />
<Link Source="21010:[2548..2600).1" Target="21010:[2576..2599).1" />
<Link Source="21010:[2522..2600).1" Target="21010:[2548..2600).1" />
<Link Source="21010:[2655..2705).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[2774..2838).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2954..2982).1" Target="EXTERNAL" />
<Link Source="21010:[2984..3025).1" Target="EXTERNAL" />
<Link Source="21010:[3027..3067).1" Target="EXTERNAL" />
<Link Source="21010:[2931..3068).3" Target="21010:[2954..2982).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2984..3025).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[3027..3067).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2931..3068).1" />
<Link Source="21010:[3082..3104).1" Target="21010:[2774..2838).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2931..3068).3" />
<Link Source="21010:[2931..3105).1" Target="21010:[3082..3104).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2891..3105).1" Target="21010:[2931..3105).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3487..3556).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3524..3544).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3546..3552).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[817..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[567..663).5" />
<Link Source="21010:[3465..3557).1" Target="21010:[828..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).2" />
<Link Source="21010:[3436..3557).1" Target="21010:[3465..3557).1" />
<Link Source="21010:[3612..3656).1" Target="21010:[1289..1356).1" />
<Link Source="21010:[3709..3748).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3801..3844).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3897..3943).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[4035..4070).1" Target="EXTERNAL" />
<Link Source="21010:[4072..4097).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).1" Target="21010:[4035..4070).1" />
<Link Source="21010:[10204..10225).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4072..4097).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10264..10288).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[10204..10225).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[10227..10262).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10385..10425).1" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[10264..10288).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10335..10345).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10347..10383).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10385..10425).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10427..10451).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10306..10452).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[4017..4098).1" />
<Link Source="21010:[4004..4098).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4188..4217).1" Target="EXTERNAL" />
<Link Source="21010:[4219..4244).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).2" Target="21010:[4188..4217).1" />
<Link Source="21010:[10204..10225).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4219..4244).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10264..10288).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10335..10345).2" Target="21010:[10204..10225).2" />
<Link Source="21010:[10335..10345).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10347..10383).2" Target="21010:[10227..10262).2" />
<Link Source="21010:[10347..10383).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10385..10425).2" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10427..10451).2" Target="21010:[10264..10288).2" />
<Link Source="21010:[10427..10451).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).49" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).95" Target="21010:[10335..10345).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10347..10383).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10385..10425).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10427..10451).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10306..10452).49" />
<Link Source="21010:[10306..10452).95" Target="21010:[4170..4245).1" />
<Link Source="21010:[4157..4245).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4324..4358).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[4324..4358).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4324..4358).1" Target="21010:[4353..4357).1" />
<Link Source="21010:[4306..4358).1" Target="21010:[4324..4358).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4437..4471).1" Target="21010:[4466..4470).1" />
<Link Source="21010:[4419..4471).1" Target="21010:[4437..4471).1" />
<Link Source="21010:[4561..4596).1" Target="EXTERNAL" />
<Link Source="21010:[4598..4621).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).3" Target="21010:[4561..4596).1" />
<Link Source="21010:[10204..10225).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4598..4621).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10264..10288).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10335..10345).3" Target="21010:[10204..10225).3" />
<Link Source="21010:[10335..10345).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10347..10383).3" Target="21010:[10227..10262).3" />
<Link Source="21010:[10347..10383).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10385..10425).3" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10427..10451).3" Target="21010:[10264..10288).3" />
<Link Source="21010:[10427..10451).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).97" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).143" Target="21010:[10335..10345).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10347..10383).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10385..10425).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10427..10451).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10306..10452).97" />
<Link Source="21010:[10306..10452).143" Target="21010:[4543..4622).1" />
<Link Source="21010:[4532..4622).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[4710..4739).1" Target="EXTERNAL" />
<Link Source="21010:[4741..4764).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).4" Target="21010:[4710..4739).1" />
<Link Source="21010:[10204..10225).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4741..4764).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10264..10288).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10335..10345).4" Target="21010:[10204..10225).4" />
<Link Source="21010:[10335..10345).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10347..10383).4" Target="21010:[10227..10262).4" />
<Link Source="21010:[10347..10383).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10385..10425).4" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10427..10451).4" Target="21010:[10264..10288).4" />
<Link Source="21010:[10427..10451).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).145" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).191" Target="21010:[10335..10345).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10347..10383).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10385..10425).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10427..10451).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10306..10452).145" />
<Link Source="21010:[10306..10452).191" Target="21010:[4692..4765).1" />
<Link Source="21010:[4681..4765).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[4859..4892).1" Target="EXTERNAL" />
<Link Source="21010:[4894..4919).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).5" Target="21010:[4859..4892).1" />
<Link Source="21010:[10204..10225).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4894..4919).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10264..10288).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10335..10345).5" Target="21010:[10204..10225).5" />
<Link Source="21010:[10335..10345).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10347..10383).5" Target="21010:[10227..10262).5" />
<Link Source="21010:[10347..10383).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10385..10425).5" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10427..10451).5" Target="21010:[10264..10288).5" />
<Link Source="21010:[10427..10451).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).193" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).239" Target="21010:[10335..10345).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10347..10383).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10385..10425).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10427..10451).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10306..10452).193" />
<Link Source="21010:[10306..10452).239" Target="21010:[4841..4920).1" />
<Link Source="21010:[4826..4920).1" Target="21010:[10306..10452).239" />
<Link Source="21010:[5010..5043).1" Target="EXTERNAL" />
<Link Source="21010:[5045..5068).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).6" Target="21010:[5010..5043).1" />
<Link Source="21010:[10204..10225).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[5045..5068).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10264..10288).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10335..10345).6" Target="21010:[10204..10225).6" />
<Link Source="21010:[10335..10345).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10347..10383).6" Target="21010:[10227..10262).6" />
<Link Source="21010:[10347..10383).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10385..10425).6" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10427..10451).6" Target="21010:[10264..10288).6" />
<Link Source="21010:[10427..10451).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).241" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).287" Target="21010:[10335..10345).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10347..10383).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10385..10425).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10427..10451).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10306..10452).241" />
<Link Source="21010:[10306..10452).287" Target="21010:[4992..5069).1" />
<Link Source="21010:[4979..5069).1" Target="21010:[10306..10452).287" />
<Link Source="21010:[5164..5184).1" Target="EXTERNAL" />
<Link Source="21010:[5186..5211).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).7" Target="21010:[5164..5184).1" />
<Link Source="21010:[10204..10225).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5186..5211).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10264..10288).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10335..10345).7" Target="21010:[10204..10225).7" />
<Link Source="21010:[10335..10345).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10347..10383).7" Target="21010:[10227..10262).7" />
<Link Source="21010:[10347..10383).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10385..10425).7" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10427..10451).7" Target="21010:[10264..10288).7" />
<Link Source="21010:[10427..10451).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).289" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).335" Target="21010:[10335..10345).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10347..10383).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10385..10425).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10427..10451).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10306..10452).289" />
<Link Source="21010:[10306..10452).335" Target="21010:[5146..5212).1" />
<Link Source="21010:[5130..5212).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[5303..5323).1" Target="EXTERNAL" />
<Link Source="21010:[5325..5348).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).8" Target="21010:[5303..5323).1" />
<Link Source="21010:[10204..10225).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5325..5348).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10264..10288).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10335..10345).8" Target="21010:[10204..10225).8" />
<Link Source="21010:[10335..10345).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10347..10383).8" Target="21010:[10227..10262).8" />
<Link Source="21010:[10347..10383).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10385..10425).8" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10427..10451).8" Target="21010:[10264..10288).8" />
<Link Source="21010:[10427..10451).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).337" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).383" Target="21010:[10335..10345).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10347..10383).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10385..10425).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10427..10451).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10306..10452).337" />
<Link Source="21010:[10306..10452).383" Target="21010:[5285..5349).1" />
<Link Source="21010:[5271..5349).1" Target="21010:[10306..10452).383" />
<Link Source="21010:[5429..5461).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5429..5461).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5429..5461).1" Target="21010:[5456..5460).1" />
<Link Source="21010:[5410..5461).1" Target="21010:[5429..5461).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[5539..5571).1" Target="21010:[5566..5570).1" />
<Link Source="21010:[5520..5571).1" Target="21010:[5539..5571).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[5649..5679).1" Target="21010:[5674..5678).1" />
<Link Source="21010:[5632..5679).1" Target="21010:[5649..5679).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[4681..4765).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[5755..5785).1" Target="21010:[5780..5784).1" />
<Link Source="21010:[5738..5785).1" Target="21010:[5755..5785).1" />
<Link Source="21010:[5900..5951).1" Target="EXTERNAL" />
<Link Source="21010:[5866..5952).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5866..5952).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5866..5952).1" Target="21010:[5900..5951).1" />
<Link Source="21010:[5866..5952).1" Target="EXTERNAL" />
<Link Source="21010:[5846..5952).1" Target="21010:[5866..5952).1" />
<Link Source="21010:[6065..6116).1" Target="EXTERNAL" />
<Link Source="21010:[6031..6117).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[6031..6117).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[6031..6117).1" Target="21010:[6065..6116).1" />
<Link Source="21010:[6031..6117).1" Target="EXTERNAL" />
<Link Source="21010:[6011..6117).1" Target="21010:[6031..6117).1" />
<Link Source="21010:[6236..6287).1" Target="EXTERNAL" />
<Link Source="21010:[6199..6288).1" Target="21010:[5130..5212).1" />
<Link Source="21010:[6199..6288).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[6199..6288).1" Target="21010:[6236..6287).1" />
<Link Source="21010:[6199..6288).1" Target="EXTERNAL" />
<Link Source="21010:[6176..6288).1" Target="21010:[6199..6288).1" />
<Link Source="21010:[6397..6448).1" Target="EXTERNAL" />
<Link Source="21010:[6365..6449).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[6365..6449).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[6365..6449).1" Target="21010:[6397..6448).1" />
<Link Source="21010:[6365..6449).1" Target="EXTERNAL" />
<Link Source="21010:[6347..6449).1" Target="21010:[6365..6449).1" />
<Link Source="21010:[6560..6586).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="21010:[6560..6586).1" />
<Link Source="21010:[6497..6587).1" Target="21010:[6513..6587).1" />
<Link Source="21003:[34259..34289).1" Target="21010:[557..663).1" />
<Link Source="21003:[34259..34289).1" Target="21003:[34198..34304).2" />
<Link Source="21003:[34320..34386).1" Target="21003:[34078..34089).1" />
<Link Source="21003:[34320..34386).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).2" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).3" Target="21003:[34320..34386).2" />
<Link Source="21003:[34320..34386).3" Target="21003:[34148..34172).1" />
<Link Source="21003:[34320..34386).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).5" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).3" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).5" />
<Link Source="21003:[34320..34386).7" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).7" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).1" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).2" Target="21003:[34259..34289).1" />
<Link Source="21003:[34400..34487).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).3" Target="21003:[34091..34111).1" />
<Link Source="21003:[34400..34487).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).4" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).2" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).3" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).4" />
<Link Source="21003:[34400..34487).6" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).6" Target="21010:[567..663).5" />
<Link Source="21003:[34400..34487).6" Target="21004:[1137..1205).1" />
<Link Source="21003:[34407..34486).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34554..34569).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[34554..34569).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34595..34627).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34554..34569).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34400..34487).6" />
<Link Source="21003:[34641..34667).3" Target="21003:[34641..34667).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).3" />
<Link Source="21003:[34681..34706).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).2" />
<Link Source="21003:[34681..34706).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34740).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34720..34740).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).2" />
<Link Source="21003:[34754..34818).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34720..34735).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34554..34569).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34407..34486).1" />
<Link Source="21004:[1129..1207).1" Target="21003:[34832..34844).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1122..1208).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[46280..46350).3" Target="21004:[1122..1208).1" />
<Link Source="21003:[46280..46350).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46023..46055).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46366..46650).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46419..46533).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[46419..46533).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).2" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).2" />
<Link Source="21003:[46419..46533).4" Target="21004:[1122..1208).1" />
<Link Source="21003:[46419..46533).4" Target="21004:[1129..1207).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[46419..46533).4" Target="21003:[46366..46650).2" />
<Link Source="21003:[46563..46584).1" Target="21003:[46419..46533).4" />
<Link Source="21003:[46563..46584).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46553..46635).1" Target="21010:[4004..4098).1" />
<Link Source="21003:[46553..46635).1" Target="21003:[46563..46584).1" />
<Link Source="21003:[46755..46872).1" Target="EXTERNAL" />
<Link Source="21003:[46755..46872).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[46224..46254).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46116..46135).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[47082..47319).1" Target="21003:[45967..46008).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46553..46635).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47399).1" Target="21003:[45706..45847).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47400).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11613..11696).1" Target="EXTERNAL" />
<Link Source="25006:[11613..11696).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11674..11681).1" Target="25006:[11613..11696).1" />
<Link Source="21003:[47333..47400).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1129..1207).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).7" />
<Link Source="21003:[47414..47458).1" Target="EXTERNAL" />
<Link Source="21003:[47414..47458).1" Target="21010:[10306..10452).47" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).2" Target="21003:[45706..45847).1" />
<Link Source="25004:[1041..1077).1" Target="21003:[47414..47458).2" />
<Link Source="21003:[47414..47458).4" Target="21003:[47414..47458).1" />
<Link Source="21003:[47414..47458).4" Target="25004:[1041..1077).1" />
<Link Source="21003:[47414..47458).4" Target="21003:[45706..45847).1" />
<Link Source="21003:[47689..47930).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47689..47930).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47717..47747).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47689..47930).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[48025..48054).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48175..48211).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[48175..48211).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48225..48313).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48175..48211).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48327..48378).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[47414..47458).4" />
<Link Source="21003:[48327..48378).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).1" Target="EXTERNAL" />
<Link Source="21003:[48392..48469).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[48327..48378).2" />
<Link Source="21003:[48392..48469).2" Target="21003:[48392..48469).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[46186..46209).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[48392..48469).2" />
<Link Source="21003:[47689..47930).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[47944..47963).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47944..47963).1" Target="21003:[45706..45847).1" />
<Link Source="28001:[14630..14812).21" Target="EXTERNAL" />
<Link Source="28001:[14630..14812).21" Target="25014:[387..448).1" />
<Link Source="28001:[14692..14747).1" Target="25014:[387..448).1" />
<Link Source="25004:[19277..19288).1" Target="28001:[14630..14812).21" />
<Link Source="25004:[19277..19288).1" Target="28001:[14692..14747).1" />
<Link Source="25004:[19303..19330).1" Target="28001:[14630..14812).4" />
<Link Source="25004:[19303..19330).1" Target="28001:[14692..14747).1" />
<Link Source="25004:[19345..19370).1" Target="28001:[14630..14812).4" />
<Link Source="25004:[19345..19370).1" Target="28001:[14692..14747).1" />
<Link Source="25004:[19385..19419).1" Target="28001:[14630..14812).4" />
<Link Source="25004:[19385..19419).1" Target="28001:[14692..14747).1" />
<Link Source="25004:[19434..19483).1" Target="28001:[14630..14812).4" />
<Link Source="25004:[19434..19483).1" Target="28001:[14692..14747).1" />
<Link Source="25004:[19498..19537).1" Target="28001:[14630..14812).4" />
<Link Source="25004:[19498..19537).1" Target="28001:[14692..14747).1" />
<Link Source="25004:[19552..19577).1" Target="28001:[14630..14812).4" />
<Link Source="25004:[19552..19577).1" Target="28001:[14692..14747).1" />
<Link Source="25004:[19603..19877).1" Target="25004:[19277..19288).1" />
<Link Source="25004:[19603..19877).1" Target="28001:[14692..14747).1" />
<Link Source="25004:[19603..19877).2" Target="25004:[19303..19330).1" />
<Link Source="25004:[19603..19877).2" Target="28001:[14692..14747).1" />
<Link Source="25004:[19603..19877).3" Target="25004:[19345..19370).1" />
<Link Source="25004:[19603..19877).3" Target="28001:[14692..14747).1" />
<Link Source="25004:[19603..19877).4" Target="25004:[19385..19419).1" />
<Link Source="25004:[19603..19877).4" Target="28001:[14692..14747).1" />
<Link Source="25004:[19603..19877).5" Target="25004:[19434..19483).1" />
<Link Source="25004:[19603..19877).5" Target="28001:[14692..14747).1" />
<Link Source="25004:[19603..19877).6" Target="25004:[19498..19537).1" />
<Link Source="25004:[19603..19877).6" Target="28001:[14692..14747).1" />
<Link Source="25004:[19603..19877).7" Target="25004:[19552..19577).1" />
<Link Source="25004:[19603..19877).7" Target="28001:[14692..14747).1" />
<Link Source="25004:[19610..19876).1" Target="28001:[14692..14747).1" />
<Link Source="25007:[3334..3345).1" Target="25004:[19603..19877).1" />
<Link Source="25007:[3334..3345).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3360..3387).1" Target="25004:[19603..19877).2" />
<Link Source="25007:[3360..3387).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3402..3427).1" Target="25004:[19603..19877).3" />
<Link Source="25007:[3402..3427).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3442..3476).1" Target="25004:[19603..19877).4" />
<Link Source="25007:[3442..3476).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3491..3540).1" Target="25004:[19603..19877).5" />
<Link Source="25007:[3491..3540).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3555..3594).1" Target="25004:[19603..19877).6" />
<Link Source="25007:[3555..3594).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3609..3634).1" Target="25004:[19603..19877).7" />
<Link Source="25007:[3609..3634).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3660..3885).1" Target="25007:[3334..3345).1" />
<Link Source="25007:[3660..3885).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).1" Target="25007:[3334..3345).1" />
<Link Source="25007:[3901..4266).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).4" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).6" Target="25007:[3360..3387).1" />
<Link Source="25007:[3901..4266).6" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).7" Target="25007:[3402..3427).1" />
<Link Source="25007:[3901..4266).7" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).8" Target="25007:[3442..3476).1" />
<Link Source="25007:[3901..4266).8" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).9" Target="25007:[3491..3540).1" />
<Link Source="25007:[3901..4266).9" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).10" Target="25007:[3555..3594).1" />
<Link Source="25007:[3901..4266).10" Target="25004:[19610..19876).1" />
<Link Source="25003:[740..750).1" Target="25003:[747..750).1" />
<Link Source="25003:[808..818).1" Target="25003:[814..818).1" />
<Link Source="25007:[3901..4266).13" Target="25007:[3609..3634).1" />
<Link Source="25007:[3901..4266).13" Target="25004:[19610..19876).1" />
<Link Source="25007:[3908..4265).1" Target="25004:[19610..19876).1" />
<Link Source="25003:[2816..2827).1" Target="25007:[3901..4266).1" />
<Link Source="25003:[2816..2827).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2842..2863).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[2842..2863).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2878..2898).1" Target="25007:[3901..4266).6" />
<Link Source="25003:[2878..2898).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2913..2931).1" Target="25007:[3901..4266).7" />
<Link Source="25003:[2913..2931).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2946..2973).1" Target="25007:[3901..4266).8" />
<Link Source="25003:[2946..2973).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2988..3030).1" Target="25007:[3901..4266).9" />
<Link Source="25003:[2988..3030).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3045..3076).1" Target="25007:[3901..4266).10" />
<Link Source="25003:[3045..3076).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3091..3116).1" Target="25007:[3901..4266).1" />
<Link Source="25003:[3091..3116).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3131..3176).1" Target="25007:[3901..4266).13" />
<Link Source="25003:[3131..3176).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3191..3238).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[3191..3238).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3253..3278).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[3253..3278).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2773..3850).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[2773..3850).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[912..917).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[912..917).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[950..967).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[950..967).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1000..1013).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1000..1013).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1048..1062).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1048..1062).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1099..1109).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1099..1109).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1151..1165).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1151..1165).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1276..1303).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1276..1303).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1336..1350).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1336..1350).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1383..1412).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1383..1412).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1460..1479).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1460..1479).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1527..1548).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1527..1548).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1673..1689).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1673..1689).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1713..1727).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1713..1727).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1891..1900).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1891..1900).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1941..1960).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1941..1960).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3304..3309).1" Target="25003:[2816..2827).1" />
<Link Source="25003:[3304..3309).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3304..3309).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3331..3348).1" Target="25003:[2842..2863).1" />
<Link Source="25003:[3331..3348).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3331..3348).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3382..3396).1" Target="25003:[2878..2898).1" />
<Link Source="25003:[3382..3396).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3382..3396).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3427..3437).1" Target="25003:[2913..2931).1" />
<Link Source="25003:[3427..3437).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3427..3437).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3464..3478).1" Target="25003:[2946..2973).1" />
<Link Source="25003:[3464..3478).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3464..3478).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3509..3525).1" Target="25003:[2988..3030).1" />
<Link Source="25003:[3509..3525).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3509..3525).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3562..3589).1" Target="25003:[3045..3076).1" />
<Link Source="25003:[3562..3589).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3562..3589).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3633..3682).1" Target="25003:[3091..3116).1" />
<Link Source="25003:[3633..3682).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3633..3647).1" Target="25003:[3633..3682).1" />
<Link Source="25003:[3633..3647).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3633..3647).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3696..3715).1" Target="25003:[3131..3176).1" />
<Link Source="25003:[3696..3715).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3696..3715).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3751..3772).1" Target="25003:[3191..3238).1" />
<Link Source="25003:[3751..3772).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3751..3772).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3810..3823).1" Target="25003:[3253..3278).1" />
<Link Source="25003:[3810..3823).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3810..3823).1" Target="25007:[3908..4265).1" />
<Link Source="25004:[19603..19877).8" Target="25007:[3901..4266).4" />
<Link Source="25004:[19603..19877).8" Target="28001:[14692..14747).1" />
<Link Source="28001:[14630..14812).34" Target="25004:[19603..19877).8" />
<Link Source="28001:[14630..14812).34" Target="25014:[387..448).1" />
<Link Source="28001:[14692..14791).1" Target="28001:[14630..14812).4" />
<Link Source="28001:[14692..14791).1" Target="25014:[387..448).1" />
<Link Source="28001:[14692..14791).3" Target="25014:[387..448).1" />
<Link Source="25003:[7407..7432).1" Target="28001:[14630..14812).4" />
<Link Source="25003:[7407..7432).1" Target="28001:[14692..14791).3" />
<Link Source="25003:[7364..7671).1" Target="28001:[14630..14812).34" />
<Link Source="25003:[7364..7671).1" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).1" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).1" Target="25003:[3304..3309).1" />
<Link Source="25003:[7458..7660).1" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).2" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).2" Target="25003:[3331..3348).1" />
<Link Source="25003:[7458..7660).2" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).3" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).3" Target="25003:[3382..3396).1" />
<Link Source="25003:[7458..7660).3" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).4" Target="25003:[7407..7432).1" />
<Link Source="25003:[7458..7660).4" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).5" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).5" Target="25003:[3464..3478).1" />
<Link Source="25003:[7458..7660).5" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).6" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).6" Target="25003:[3509..3525).1" />
<Link Source="25003:[7458..7660).6" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).7" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).9" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).9" Target="25003:[3633..3647).1" />
<Link Source="25003:[7458..7660).9" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).10" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).10" Target="25003:[3696..3715).1" />
<Link Source="25003:[7458..7660).10" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).11" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).11" Target="25003:[3751..3772).1" />
<Link Source="25003:[7458..7660).11" Target="28001:[14692..14791).3" />
<Link Source="25003:[7458..7660).12" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).12" Target="25003:[3810..3823).1" />
<Link Source="25003:[7458..7660).12" Target="28001:[14692..14791).3" />
<Link Source="25003:[7465..7659).1" Target="28001:[14692..14791).3" />
<Link Source="25003:[2816..2827).2" Target="25003:[7458..7660).1" />
<Link Source="25003:[2816..2827).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2842..2863).2" Target="25003:[7458..7660).2" />
<Link Source="25003:[2842..2863).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2878..2898).2" Target="25003:[7458..7660).3" />
<Link Source="25003:[2878..2898).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2913..2931).2" Target="25003:[7458..7660).4" />
<Link Source="25003:[2913..2931).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2946..2973).2" Target="25003:[7458..7660).5" />
<Link Source="25003:[2946..2973).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2988..3030).2" Target="25003:[7458..7660).6" />
<Link Source="25003:[2988..3030).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3045..3076).2" Target="25003:[7458..7660).7" />
<Link Source="25003:[3045..3076).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3091..3116).2" Target="25003:[7458..7660).9" />
<Link Source="25003:[3091..3116).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3131..3176).2" Target="25003:[7458..7660).10" />
<Link Source="25003:[3131..3176).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3191..3238).2" Target="25003:[7458..7660).11" />
<Link Source="25003:[3191..3238).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3253..3278).2" Target="25003:[7458..7660).12" />
<Link Source="25003:[3253..3278).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2773..3850).2" Target="25003:[7458..7660).7" />
<Link Source="25003:[2773..3850).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[912..917).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[912..917).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[950..967).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[950..967).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1000..1013).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1000..1013).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1048..1062).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1048..1062).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1099..1109).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1099..1109).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1151..1165).4" Target="25003:[2773..3850).2" />
<Link Source="25003:[1151..1165).4" Target="25003:[7465..7659).1" />
<Link Source="25003:[1276..1303).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1276..1303).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1336..1350).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1336..1350).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1383..1412).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1383..1412).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1460..1479).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1460..1479).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1527..1548).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1527..1548).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1673..1689).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1673..1689).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1713..1727).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1713..1727).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1891..1900).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1891..1900).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1941..1960).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1941..1960).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3427..3437).2" Target="25003:[2913..2931).2" />
<Link Source="25003:[3427..3437).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[3427..3437).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3562..3589).2" Target="25003:[3045..3076).2" />
<Link Source="25003:[3562..3589).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[3562..3589).2" Target="25003:[7465..7659).1" />
<Link Source="28001:[14630..14812).41" Target="25003:[7458..7660).7" />
<Link Source="28001:[14630..14812).41" Target="25014:[387..448).1" />
<Link Source="28001:[14692..14810).1" Target="25014:[387..448).1" />
<Link Source="25003:[9181..9189).1" Target="28001:[14630..14812).4" />
<Link Source="25003:[9181..9189).1" Target="28001:[14692..14810).1" />
<Link Source="25003:[9191..9201).1" Target="28001:[14630..14812).4" />
<Link Source="25003:[9191..9201).1" Target="28001:[14692..14810).1" />
<Link Source="25003:[9139..9487).1" Target="28001:[14630..14812).41" />
<Link Source="25003:[9139..9487).1" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).1" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).1" Target="25003:[2816..2827).2" />
<Link Source="25003:[9227..9476).1" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).2" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).2" Target="25003:[2842..2863).2" />
<Link Source="25003:[9227..9476).2" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).3" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).3" Target="25003:[2878..2898).2" />
<Link Source="25003:[9227..9476).3" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).4" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).4" Target="25003:[3427..3437).2" />
<Link Source="25003:[9227..9476).4" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).5" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).6" Target="25003:[9181..9189).1" />
<Link Source="25003:[9227..9476).6" Target="25003:[9227..9476).5" />
<Link Source="25003:[9227..9476).6" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).9" Target="25003:[9191..9201).1" />
<Link Source="25003:[9227..9476).9" Target="25003:[9227..9476).5" />
<Link Source="25003:[9227..9476).9" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).11" Target="25003:[9227..9476).6" />
<Link Source="25003:[9227..9476).11" Target="25003:[9227..9476).9" />
<Link Source="25003:[9227..9476).11" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).13" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).13" Target="25003:[2988..3030).2" />
<Link Source="25003:[9227..9476).13" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).14" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).14" Target="25003:[3562..3589).2" />
<Link Source="25003:[9227..9476).14" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).15" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).15" Target="25003:[3091..3116).2" />
<Link Source="25003:[9227..9476).15" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).16" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).16" Target="25003:[3131..3176).2" />
<Link Source="25003:[9227..9476).16" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).17" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).17" Target="25003:[3191..3238).2" />
<Link Source="25003:[9227..9476).17" Target="28001:[14692..14810).1" />
<Link Source="25003:[9227..9476).18" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).18" Target="25003:[3253..3278).2" />
<Link Source="25003:[9227..9476).18" Target="28001:[14692..14810).1" />
<Link Source="25003:[9234..9475).1" Target="28001:[14692..14810).1" />
<Link Source="25003:[2816..2827).3" Target="25003:[9227..9476).1" />
<Link Source="25003:[2816..2827).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2842..2863).3" Target="25003:[9227..9476).2" />
<Link Source="25003:[2842..2863).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2878..2898).3" Target="25003:[9227..9476).3" />
<Link Source="25003:[2878..2898).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2913..2931).3" Target="25003:[9227..9476).4" />
<Link Source="25003:[2913..2931).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2946..2973).3" Target="25003:[9227..9476).11" />
<Link Source="25003:[2946..2973).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2988..3030).3" Target="25003:[9227..9476).13" />
<Link Source="25003:[2988..3030).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3045..3076).3" Target="25003:[9227..9476).14" />
<Link Source="25003:[3045..3076).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3091..3116).3" Target="25003:[9227..9476).15" />
<Link Source="25003:[3091..3116).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3131..3176).3" Target="25003:[9227..9476).16" />
<Link Source="25003:[3131..3176).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3191..3238).3" Target="25003:[9227..9476).17" />
<Link Source="25003:[3191..3238).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3253..3278).3" Target="25003:[9227..9476).18" />
<Link Source="25003:[3253..3278).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2773..3850).3" Target="25003:[9227..9476).5" />
<Link Source="25003:[2773..3850).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[912..917).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[912..917).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[950..967).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[950..967).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1000..1013).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1000..1013).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1048..1062).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1048..1062).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1099..1109).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1099..1109).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1151..1165).7" Target="25003:[2773..3850).3" />
<Link Source="25003:[1151..1165).7" Target="25003:[9234..9475).1" />
<Link Source="25003:[1276..1303).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1276..1303).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1336..1350).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1336..1350).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1383..1412).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1383..1412).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1460..1479).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1460..1479).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1527..1548).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1527..1548).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1673..1689).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1673..1689).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1713..1727).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1713..1727).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1891..1900).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1891..1900).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1941..1960).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1941..1960).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3464..3478).3" Target="25003:[2946..2973).3" />
<Link Source="25003:[3464..3478).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3464..3478).3" Target="25003:[9234..9475).1" />
<Link Source="28001:[14630..14812).46" Target="25003:[9227..9476).5" />
<Link Source="28001:[14630..14812).46" Target="25014:[387..448).1" />
<Link Source="28001:[14630..14811).1" Target="28001:[14630..14812).46" />
<Link Source="28001:[14630..14811).1" Target="28001:[14630..14812).4" />
<Link Source="28001:[14630..14811).1" Target="25014:[387..448).1" />
<Link Source="28001:[14630..14811).2" Target="25014:[387..448).1" />
<Link Source="25002:[4263..4282).1" Target="21003:[47944..47963).1" />
<Link Source="25002:[4263..4282).1" Target="28001:[14630..14811).2" />
<Link Source="25002:[4284..4323).1" Target="28001:[14630..14812).4" />
<Link Source="25002:[4284..4323).1" Target="28001:[14630..14811).2" />
<Link Source="25002:[4395..4432).1" Target="28001:[14630..14811).2" />
<Link Source="10345:[975..1032).1" Target="EXTERNAL" />
<Link Source="10345:[1047..1101).1" Target="EXTERNAL" />
<Link Source="10345:[1116..1166).1" Target="EXTERNAL" />
<Link Source="10345:[1753..1782).1" Target="10345:[956..960).1" />
<Link Source="10345:[1753..1782).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[975..1032).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[1047..1101).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[1116..1166).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[1181..1185).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1723..2412).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[1797..1861).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[2064..2099).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[930..1186).1" />
<Link Source="10345:[2113..2145).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2113..2145).1" Target="EXTERNAL" />
<Link Source="10345:[2113..2145).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2159..2192).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2159..2192).1" Target="EXTERNAL" />
<Link Source="10345:[2159..2192).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1753..1782).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1797..1861).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[2013..2038).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[930..1186).1" />
<Link Source="10345:[922..1186).1" Target="10345:[930..1186).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4263..4282).1" />
<Link Source="25002:[4395..4432).3" Target="21003:[48392..48469).2" />
<Link Source="25002:[4395..4432).3" Target="28001:[14630..14811).2" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13144..13184).1" Target="10345:[13089..13118).1" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).2" Target="10345:[13144..13184).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).2" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).4" Target="10345:[13089..13118).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).4" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[922..1186).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[13200..13326).2" />
<Link Source="25002:[4395..4432).6" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).6" Target="10345:[13298..13311).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2208..2220).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2331..2343).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2249..2266).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2296..2307).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2372..2390).1" />
<Link Source="25002:[4395..4432).6" Target="EXTERNAL" />
<Link Source="25002:[4395..4432).6" Target="28001:[14630..14811).2" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24591..26243).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24636..24685).1" Target="10345:[24530..24565).1" />
<Link Source="10345:[24636..24685).1" Target="25002:[4395..4432).6" />
<Link Source="10345:[24636..24685).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24636..24685).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26025..26098).1" Target="EXTERNAL" />
<Link Source="10345:[26025..26098).1" Target="10345:[24768..26149).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24530..24565).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[24507..26254).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26025..26098).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).2" />
<Link Source="10345:[26169..26228).3" Target="10345:[24591..26243).1" />
<Link Source="10345:[24932..25204).1" Target="EXTERNAL" />
<Link Source="10345:[24932..25204).1" Target="10345:[26169..26228).3" />
<Link Source="10345:[25064..25074).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[26266..28173).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[922..1186).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26365..26372).1" Target="10345:[26314..26387).1" />
<Link Source="10345:[25064..25075).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25109..25173).1" Target="EXTERNAL" />
<Link Source="10345:[25109..25173).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25858..25865).1" Target="10345:[25109..25173).1" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[537..568).1" Target="10298:[471..492).1" />
<Link Source="10298:[537..568).1" Target="10298:[494..511).1" />
<Link Source="10298:[537..568).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).10" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).10" Target="10298:[537..568).1" />
<Link Source="25002:[4395..4432).10" Target="10345:[25109..25173).1" />
<Link Source="25002:[4395..4432).10" Target="28001:[14630..14811).2" />
<Link Source="10292:[1704..1721).1" Target="10292:[1720..1721).1" />
<Link Source="10292:[1752..1769).1" Target="10292:[1768..1769).1" />
<Link Source="10292:[1963..1993).1" Target="10292:[1992..1993).1" />
<Link Source="10306:[388923..389344).1" Target="10306:[388969..389344).1" />
<Link Source="10306:[389480..389543).1" Target="EXTERNAL" />
<Link Source="10306:[389562..389646).1" Target="EXTERNAL" />
<Link Source="10306:[389708..389839).1" Target="EXTERNAL" />
<Link Source="10306:[389665..389839).1" Target="10306:[389708..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389480..389543).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389562..389646).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389665..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389438..389840).1" />
<Link Source="10306:[389401..389840).1" Target="10306:[389438..389840).17" />
<Link Source="10310:[84458..84496).1" Target="10310:[84494..84496).1" />
<Link Source="10316:[772..830).1" Target="10316:[802..830).1" />
<Link Source="10319:[69620..69663).1" Target="10319:[69643..69663).1" />
<Link Source="10319:[69727..69774).1" Target="10319:[69752..69774).1" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31055..31080).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31095..31126).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).2" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).4" />
<Link Source="10286:[31152..31210).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31515..31598).1" Target="10286:[30969..31000).1" />
<Link Source="10286:[31515..31598).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).1" Target="10286:[30925..30954).1" />
<Link Source="10286:[31614..31710).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).2" Target="10286:[30969..31000).1" />
<Link Source="10286:[31614..31710).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).3" Target="10286:[31015..31040).1" />
<Link Source="10286:[31614..31710).3" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).4" Target="10286:[31055..31080).1" />
<Link Source="10286:[31614..31710).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).5" Target="10286:[31095..31126).1" />
<Link Source="10286:[31614..31710).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).6" Target="10286:[31515..31598).1" />
<Link Source="10286:[31614..31710).6" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31709).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31710).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31710).2" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31710).3" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31710).4" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31710).5" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31710).6" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80188..80212).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80162..80186).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).2" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).4" />
<Link Source="10319:[80263..80315).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80331..80364).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).1" Target="10319:[80080..80109).1" />
<Link Source="10319:[80378..80479).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).2" Target="10319:[80111..80133).1" />
<Link Source="10319:[80378..80479).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).3" Target="10319:[80331..80364).1" />
<Link Source="10319:[80378..80479).3" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).4" Target="10319:[80214..80237).1" />
<Link Source="10319:[80378..80479).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80400..80478).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80378..80479).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80874..80896).1" Target="10319:[80378..80479).2" />
<Link Source="10319:[80874..80896).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80898..80931).1" Target="10319:[80378..80479).3" />
<Link Source="10319:[80898..80931).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80933..80956).1" Target="10319:[80378..80479).4" />
<Link Source="10319:[80933..80956).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80874..80896).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).2" Target="25002:[4395..4432).10" />
<Link Source="10319:[80982..81047).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).3" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2901..2932).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3483..3502).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).1" Target="10060:[4243..4274).1" />
<Link Source="10060:[3518..4328).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4344..4356).1" Target="10319:[80982..81047).3" />
<Link Source="10319:[80982..81047).8" Target="10060:[3483..3502).1" />
<Link Source="10319:[80982..81047).8" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).8" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2841..2854).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2856..2875).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).3" Target="10060:[2841..2854).2" />
<Link Source="10060:[2901..2932).3" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[2948..3467).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[3553..4223).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[4243..4274).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).2" Target="10060:[4243..4274).2" />
<Link Source="10060:[3518..4328).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).3" Target="10060:[4243..4274).2" />
<Link Source="10060:[3553..4223).3" Target="10060:[3518..4328).2" />
<Link Source="10319:[80982..81047).15" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).2" />
<Link Source="10319:[80982..81047).15" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80982..81047).15" />
<Link Source="10319:[81063..82500).2" Target="10319:[81063..82500).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[81129..81207).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[81129..81207).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81129..81207).2" Target="10319:[81063..82500).2" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).7" Target="10060:[2841..2854).4" />
<Link Source="10060:[2901..2932).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).4" Target="10060:[2841..2854).4" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[3483..3502).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).6" Target="10060:[4243..4274).6" />
<Link Source="10060:[3518..4328).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2841..2854).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).9" Target="10060:[2841..2854).5" />
<Link Source="10060:[2901..2932).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).5" Target="10060:[2841..2854).5" />
<Link Source="10060:[2948..3467).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[3553..4223).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[4243..4274).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).7" Target="10060:[4243..4274).7" />
<Link Source="10060:[3518..4328).7" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81225..82039).1" />
<Link Source="10319:[81225..82039).2" Target="10319:[81063..82500).2" />
<Link Source="10319:[82516..82536).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[82516..82536).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80495..80738).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[80495..80738).2" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).1" Target="10319:[82516..82536).1" />
<Link Source="10319:[80754..80774).1" Target="10286:[31614..31709).1" />
<Link Source="10060:[2841..2854).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).17" Target="10060:[2841..2854).9" />
<Link Source="10060:[2901..2932).17" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).9" Target="10060:[2841..2854).9" />
<Link Source="10060:[2948..3467).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[3553..4223).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[4243..4274).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).11" Target="10060:[4243..4274).11" />
<Link Source="10060:[3518..4328).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[2841..2854).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2901..2932).19" Target="10060:[2841..2854).10" />
<Link Source="10060:[2901..2932).19" Target="10060:[3483..3502).7" />
<Link Source="10060:[2948..3467).10" Target="10060:[2841..2854).10" />
<Link Source="10060:[2948..3467).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[3553..4223).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[3553..4223).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[4243..4274).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[4243..4274).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[3518..4328).12" Target="10060:[4243..4274).12" />
<Link Source="10060:[3518..4328).12" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).4" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).5" Target="10319:[81225..82039).4" />
<Link Source="10319:[81225..82039).5" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[80495..80738).5" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).2" Target="10319:[82516..82536).2" />
<Link Source="10319:[80754..80774).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[81225..82039).7" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10319:[80400..80478).1" />
<Link Source="10319:[80754..80774).3" Target="10319:[82516..82536).3" />
<Link Source="10319:[80754..80774).3" Target="10286:[31614..31709).1" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1715..1727).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1715..1727).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1773..1785).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1773..1785).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1824..1835).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1824..1835).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1883..1903).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1883..1903).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1936..1956).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1936..1956).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2247..2272).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2247..2272).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2412..2424).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2339..2360).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2453..2464).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2362..2386).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2492..2512).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2658).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).3" />
<Link Source="10076:[2551..2658).5" Target="10076:[1715..1727).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2412..2424).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2453..2464).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[1883..1903).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2492..2512).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2247..2272).1" />
<Link Source="10076:[2551..2658).5" Target="10060:[3483..3502).7" />
<Link Source="10076:[2551..2658).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2576).1" Target="10076:[2551..2658).5" />
<Link Source="10076:[2551..2576).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2576).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3299).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[3236..3299).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3236..3248).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[3315..3375).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[3338..3374).1" Target="25002:[4395..4432).1" />
<Link Source="10325:[645..674).1" Target="10076:[3315..3375).1" />
<Link Source="10325:[645..674).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).1" Target="10076:[3315..3375).2" />
<Link Source="10325:[616..730).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[696..707).1" Target="10325:[645..674).1" />
<Link Source="10325:[696..707).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).2" Target="10076:[3338..3374).1" />
<Link Source="10286:[939..968).1" Target="10325:[696..707).1" />
<Link Source="10286:[939..968).1" Target="10325:[616..730).2" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).1" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).2" />
<Link Source="10286:[726..773).1" Target="10286:[923..1219).1" />
<Link Source="10286:[726..773).1" Target="10325:[616..730).2" />
<Link Source="10286:[815..820).1" Target="10286:[923..1219).1" />
<Link Source="10286:[815..820).1" Target="10325:[616..730).2" />
<Link Source="10286:[2975..3015).1" Target="10286:[923..1219).1" />
<Link Source="10286:[2975..3015).1" Target="10325:[616..730).2" />
<Link Source="10286:[17802..17818).1" Target="10286:[923..1219).1" />
<Link Source="10286:[17802..17818).1" Target="10325:[616..730).2" />
<Link Source="10286:[18200..18223).1" Target="10286:[923..1219).1" />
<Link Source="10286:[18200..18223).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).2" Target="10286:[939..968).1" />
<Link Source="10286:[994..1034).2" Target="10286:[994..1034).1" />
<Link Source="10286:[994..1034).2" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1048..1096).1" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).2" Target="10286:[1048..1096).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[726..773).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[815..820).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[2975..3015).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[17802..17818).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[18200..18223).1" />
<Link Source="10286:[1048..1096).2" Target="10325:[616..730).2" />
<Link Source="10286:[1110..1120).1" Target="10286:[939..968).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2658).5" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2576).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[3236..3248).1" />
<Link Source="10286:[1110..1120).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1110..1120).1" Target="10325:[616..730).2" />
<Link Source="10286:[1177..1193).1" Target="10286:[939..968).1" />
<Link Source="10286:[1177..1193).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1177..1193).1" Target="10325:[616..730).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[3315..3375).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3315..3335).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).19" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2658).5" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2576).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3248).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3315..3335).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3299).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1048..1096).2" />
<Link Source="25002:[4395..4432).19" Target="10286:[1110..1120).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1177..1193).1" />
<Link Source="25002:[4395..4432).19" Target="28001:[14630..14811).2" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4549..4579).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4821..4829).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[3628..3685).1" Target="10076:[3592..3700).1" />
<Link Source="10076:[3628..3685).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[3628..3685).1" Target="EXTERNAL" />
<Link Source="10076:[3628..3685).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[4815..4966).1" Target="10076:[3628..3685).1" />
<Link Source="10076:[4815..4966).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).4" Target="10076:[4437..4452).1" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).19" />
<Link Source="10076:[4815..4966).4" Target="10076:[4815..4966).3" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).4" />
<Link Source="10076:[4815..4966).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[4932..4951).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4932..4951).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[4932..4951).1" Target="10076:[4815..4966).5" />
<Link Source="10076:[4982..5048).1" Target="10076:[4932..4951).1" />
<Link Source="10076:[4982..5048).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).2" Target="10076:[4549..4579).1" />
<Link Source="10076:[4982..5048).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).3" Target="10076:[4454..4498).1" />
<Link Source="10076:[4982..5048).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).4" Target="10076:[4500..4523).1" />
<Link Source="10076:[4982..5048).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4989..5047).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4982..5048).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5114..5126).1" Target="10076:[4982..5048).2" />
<Link Source="10076:[5114..5126).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5128..5172).1" Target="10076:[4982..5048).3" />
<Link Source="10076:[5128..5172).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5174..5197).1" Target="10076:[4982..5048).4" />
<Link Source="10076:[5174..5197).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5097..5112).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).2" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).2" Target="25002:[4395..4432).19" />
<Link Source="10076:[5277..5448).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).1" Target="10076:[5071..5759).1" />
<Link Source="10076:[5470..5538).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[5470..5538).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).3" Target="10076:[4989..5047).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).2" Target="10076:[5470..5538).3" />
<Link Source="10077:[698..707).1" Target="10077:[879..998).2" />
<Link Source="10077:[698..707).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[747..768).1" Target="10077:[879..998).2" />
<Link Source="10077:[747..768).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[798..808).1" Target="10077:[879..998).2" />
<Link Source="10077:[798..808).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[854..862).1" Target="10077:[879..998).2" />
<Link Source="10077:[854..862).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[964..972).1" Target="10077:[909..930).1" />
<Link Source="10077:[964..972).1" Target="10077:[879..998).2" />
<Link Source="10077:[964..972).1" Target="10076:[5470..5538).3" />
<Link Source="10076:[5470..5538).4" Target="10076:[5470..5538).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[879..998).2" />
<Link Source="10076:[5470..5538).4" Target="10077:[698..707).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[747..768).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[798..808).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[854..862).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[964..972).1" />
<Link Source="10076:[5470..5538).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[5114..5126).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[5128..5172).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[5174..5197).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5613).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5614).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5614).2" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5614).3" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1014..1370).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[1014..1370).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1053..1090).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1092..1108).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).4" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).2" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).4" />
<Link Source="10077:[1142..1210).5" Target="10076:[5552..5613).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1039..1051).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1230..1239).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1053..1090).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1269..1290).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1092..1108).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1332..1342).1" Target="10076:[5552..5613).1" />
<Link Source="10076:[5552..5614).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[5097..5112).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5644..5663).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5628..5664).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2664..2780).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[2664..2780).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2742..2765).1" Target="10077:[2693..2708).1" />
<Link Source="10077:[2742..2765).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2749..2764).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2742..2765).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2664..2780).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2852..2986).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2926..2971).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2877..2892).1" />
<Link Source="10077:[2926..2971).2" Target="10076:[5470..5538).4" />
<Link Source="10077:[2926..2971).2" Target="10077:[1230..1239).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1269..1290).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1332..1342).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).3" Target="10077:[2749..2764).1" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34678..34716).1" Target="10077:[34617..34644).1" />
<Link Source="10077:[34678..34716).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34685..34715).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[31025..31053).1" Target="10077:[34678..34716).1" />
<Link Source="10077:[31025..31053).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34572..34731).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[34685..34715).1" />
<Link Source="10077:[31258..31297).1" Target="EXTERNAL" />
<Link Source="10077:[31258..31297).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).2" Target="10077:[31490..32331).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[30985..32417).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).6" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).7" Target="10077:[34685..34715).1" />
<Link Source="10077:[31842..31894).1" Target="EXTERNAL" />
<Link Source="10077:[31842..31894).1" Target="10077:[31490..32331).2" />
<Link Source="10077:[32351..32402).1" Target="10077:[31025..31053).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[32358..32401).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32351..32402).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32504..32523).1" Target="10077:[32351..32402).2" />
<Link Source="10077:[32504..32523).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32504..32523).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32567..32606).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32557..32607).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44182..44197).1" Target="10077:[32557..32607).2" />
<Link Source="10077:[44182..44197).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[44182..44197).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[44159..44180).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[44182..44197).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44342..44373).1" Target="10077:[32567..32606).1" />
<Link Source="10076:[875..902).1" Target="10077:[44335..44374).1" />
<Link Source="10076:[875..902).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[904..919).1" Target="10077:[44335..44374).2" />
<Link Source="10076:[904..919).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[853..1034).1" Target="10077:[44335..44374).3" />
<Link Source="10076:[853..1034).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[953..968).1" Target="10076:[875..902).1" />
<Link Source="10076:[953..968).1" Target="10076:[853..1034).1" />
<Link Source="10076:[953..968).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[904..919).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[853..1034).1" />
<Link Source="10076:[1000..1010).1" Target="10077:[44342..44373).1" />
<Link Source="10077:[32557..32607).3" Target="10077:[44335..44374).3" />
<Link Source="10077:[32557..32607).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32627..32647).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32670..32681).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32433..34556).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[2066..2158).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[31490..32331).6" />
<Link Source="10077:[2110..2139).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[2110..2139).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[32665..34501).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32627..32647).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).3" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[953..968).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[31490..32331).6" />
<Link Source="10077:[32665..34501).4" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).5" Target="10077:[32358..32401).1" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).5" />
<Link Source="10076:[1307..1365).1" Target="10076:[1241..1380).1" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).5" />
<Link Source="10077:[33226..33266).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[33226..33266).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33241..33265).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[33226..33266).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[39020..39048).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[39020..39048).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[38976..39245).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[38976..39245).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[39020..39048).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39170..39187).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44888..44934).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44954..44972).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[44954..44972).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44990..45616).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44888..44934).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[45553..45597).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[45331..45616).1" />
<Link Source="10077:[45553..45597).2" Target="10077:[45331..45616).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[45553..45597).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45678..46310).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[44823..44854).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[39170..39187).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46088..46248).2" Target="EXTERNAL" />
<Link Source="10077:[46088..46248).2" Target="10077:[45678..46310).2" />
<Link Source="10077:[46272..46291).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[46088..46248).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46328..46341).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[46328..46341).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[39220..39228).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[2294..2311).1" Target="10077:[39220..39228).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[2243..2331).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[46272..46291).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[2294..2311).1" />
<Link Source="10077:[2287..2312).1" Target="10076:[3592..3700).2" />
<Link Source="10077:[2287..2312).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[39089..39229).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39337..39349).1" Target="10077:[39082..39230).3" />
<Link Source="10077:[39337..39349).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39351..39364).1" Target="10077:[2287..2312).1" />
<Link Source="10077:[39351..39364).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39421..39431).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1641..1732).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[46272..46291).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[1685..1713).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39298..39335).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39398..39590).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39337..39349).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39626..39633).1" />
<Link Source="10077:[39610..39829).1" Target="EXTERNAL" />
<Link Source="10077:[39610..39829).1" Target="10077:[39766..39774).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39298..39335).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39887..39935).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[39877..39936).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[39887..39935).1" />
<Link Source="10077:[44182..44197).2" Target="10077:[39877..39936).2" />
<Link Source="10077:[44182..44197).2" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).9" Target="10077:[44182..44197).2" />
<Link Source="10077:[44231..44317).9" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).11" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39956..39970).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39993..40004).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[39993..40004).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[2066..2158).2" />
<Link Source="10077:[2110..2139).2" Target="10077:[46272..46291).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[39993..40004).1" />
<Link Source="10077:[39988..44042).1" Target="10077:[2110..2139).2" />
<Link Source="10077:[39988..44042).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[39988..44042).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39956..39970).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[46272..46291).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[40084..40108).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1843..1943).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1843..1943).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[1843..1943).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1887..1924).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[1887..1924).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[40133..43967).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[40133..43967).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43302..43313).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[1456..1548).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1500..1529).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[1500..1529).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40075..40109).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[39298..39335).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[39337..39349).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).6" Target="10077:[40133..43967).1" />
<Link Source="10077:[43280..43373).1" Target="10077:[40133..43967).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43271..43374).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1459..1470).1" Target="10077:[43271..43374).3" />
<Link Source="10346:[1459..1470).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1472..1506).1" Target="10077:[43271..43374).4" />
<Link Source="10346:[1472..1506).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1508..1520).1" Target="10077:[43271..43374).5" />
<Link Source="10346:[1508..1520).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).1" Target="10077:[43271..43374).6" />
<Link Source="10346:[1399..2435).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1542..1546).1" Target="10346:[1459..1470).1" />
<Link Source="10346:[1542..1546).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).2" Target="10077:[43280..43373).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1542..1546).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).1" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1260..1291).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).2" Target="10286:[1247..1258).1" />
<Link Source="10286:[1317..1350).2" Target="10286:[1317..1350).1" />
<Link Source="10286:[1317..1350).2" Target="10346:[1399..2435).2" />
<Link Source="10286:[1364..1368).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1364..1368).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1364..1368).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1390..1400).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1390..1400).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1390..1400).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1390..1400).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1428..1444).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1428..1444).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1428..1444).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1428..1444).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1478..1494).1" Target="10286:[1260..1291).1" />
<Link Source="10286:[1478..1494).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1478..1494).1" Target="10346:[1399..2435).2" />
<Link Source="10346:[858..868).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[858..868).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[932..947).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[932..947).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[974..986).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[974..986).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1017..1033).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1017..1033).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1074..1100).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1074..1100).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1426..1457).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1572..1612).1" />
<Link Source="10346:[1572..1612).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1472..1506).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1626..1666).1" />
<Link Source="10346:[1626..1666).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1426..1457).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1682..1692).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1719..1832).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1719..1832).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1734).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1848..2424).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1848..2424).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1894..2409).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1894..2409).1" Target="10077:[39988..44042).4" />
<Link Source="10346:[1894..2409).1" Target="10346:[1848..2424).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1994..2057).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1399..2435).1" />
<Link Source="10077:[43503..43514).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[1456..1548).2" />
<Link Source="10077:[1500..1529).2" Target="10346:[1894..2409).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[43402..43944).1" Target="10077:[1500..1529).2" />
<Link Source="10077:[43402..43944).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[39298..39335).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43991..44002).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[2110..2139).3" Target="10077:[43991..44002).1" />
<Link Source="10077:[2110..2139).3" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).1" Target="10077:[2110..2139).3" />
<Link Source="10077:[43991..44023).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[43991..44023).2" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).3" Target="10077:[43271..43374).6" />
<Link Source="10077:[43991..44023).3" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).3" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[43991..44023).4" Target="10286:[1428..1444).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1390..1400).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1364..1368).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1478..1494).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1231..1520).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1682..1692).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1734).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[974..986).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1017..1033).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1074..1100).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[2079..2092).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1832).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1894..2409).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).5" Target="10077:[39988..44042).4" />
<Link Source="10077:[44062..44076).1" Target="10077:[43271..43374).6" />
<Link Source="10077:[44062..44076).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2926..2971).8" Target="10077:[2877..2892).2" />
<Link Source="10077:[2926..2971).8" Target="10077:[44062..44076).1" />
<Link Source="10077:[2926..2971).8" Target="10077:[43991..44023).4" />
<Link Source="10077:[2926..2971).8" Target="10077:[33241..33265).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[39610..39829).1" />
<Link Source="10077:[33290..34322).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33414..33451).1" Target="10077:[33290..34322).1" />
<Link Source="10346:[7369..7588).1" Target="10077:[2926..2971).8" />
<Link Source="10346:[7369..7588).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7405..7454).1" Target="10346:[7369..7588).1" />
<Link Source="10346:[7405..7454).1" Target="10077:[2926..2971).8" />
<Link Source="10346:[7405..7454).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7405..7454).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7472..7573).1" />
<Link Source="10346:[7472..7573).2" Target="10077:[33414..33451).1" />
<Link Source="10346:[7479..7503).1" Target="10346:[7472..7573).2" />
<Link Source="10346:[7479..7503).1" Target="10077:[33414..33451).1" />
<Link Source="10077:[33373..33481).1" Target="10346:[7479..7503).1" />
<Link Source="10077:[33373..33481).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[33290..34322).1" />
<Link Source="10077:[33509..34299).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33509..34299).1" Target="EXTERNAL" />
<Link Source="10077:[33509..34299).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).2" Target="10077:[2926..2971).8" />
<Link Source="10077:[33969..34032).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).3" Target="10077:[33509..34299).1" />
<Link Source="10077:[33984..34031).1" Target="10077:[33509..34299).1" />
<Link Source="10346:[2571..2602).1" Target="10077:[33969..34032).1" />
<Link Source="10346:[2571..2602).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2604..2615).1" Target="10077:[33969..34032).2" />
<Link Source="10346:[2604..2615).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2617..2639).1" Target="10077:[33969..34032).3" />
<Link Source="10346:[2617..2639).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).1" Target="10077:[33969..34032).3" />
<Link Source="10346:[2544..2854).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2661..2665).1" Target="10346:[2604..2615).1" />
<Link Source="10346:[2661..2665).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).2" Target="10077:[33984..34031).1" />
<Link Source="10286:[1247..1258).2" Target="10346:[2661..2665).1" />
<Link Source="10286:[1247..1258).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1231..1520).2" Target="10346:[2544..2854).1" />
<Link Source="10286:[1231..1520).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1260..1291).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).5" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1247..1258).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1317..1350).5" />
<Link Source="10286:[1317..1350).6" Target="10346:[2544..2854).2" />
<Link Source="10286:[1390..1400).2" Target="10286:[1247..1258).2" />
<Link Source="10286:[1390..1400).2" Target="10077:[33373..33481).1" />
<Link Source="10286:[1390..1400).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1390..1400).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1428..1444).2" Target="10286:[1247..1258).2" />
<Link Source="10286:[1428..1444).2" Target="10077:[33373..33481).1" />
<Link Source="10286:[1428..1444).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1428..1444).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1478..1494).2" Target="10286:[1260..1291).2" />
<Link Source="10286:[1478..1494).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1478..1494).2" Target="10346:[2544..2854).2" />
<Link Source="10346:[858..868).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[858..868).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[932..947).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[932..947).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[974..986).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[974..986).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[1017..1033).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[1017..1033).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[1074..1100).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[1074..1100).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2571..2602).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2691..2750).1" />
<Link Source="10346:[2691..2750).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2571..2602).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2766..2776).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2843).1" Target="10345:[922..1186).1" />
<Link Source="10346:[2803..2843).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2843).2" Target="10346:[2803..2843).1" />
<Link Source="10346:[2803..2843).2" Target="10346:[2617..2639).1" />
<Link Source="10346:[2803..2843).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2815).1" Target="10346:[2803..2843).2" />
<Link Source="10346:[2803..2815).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2803..2815).1" Target="10077:[33984..34031).1" />
<Link Source="10077:[34064..34272).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33373..33481).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[34064..34272).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[34346..34420).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34361..34419).1" Target="10076:[1307..1365).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34346..34420).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3452..3756).1" Target="10077:[33969..34032).3" />
<Link Source="10307:[3452..3756).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).1" Target="10307:[3452..3756).1" />
<Link Source="10307:[3547..3745).1" Target="10286:[1390..1400).2" />
<Link Source="10307:[3547..3745).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).2" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).2" Target="10077:[34361..34419).1" />
<Link Source="10307:[3555..3600).1" Target="10077:[34361..34419).1" />
<Link Source="10298:[471..492).6" Target="10307:[3547..3745).1" />
<Link Source="10298:[471..492).6" Target="10307:[3555..3600).1" />
<Link Source="10298:[494..511).6" Target="10307:[3547..3745).2" />
<Link Source="10298:[494..511).6" Target="10307:[3555..3600).1" />
<Link Source="10307:[3547..3745).4" Target="10307:[3496..3521).1" />
<Link Source="10307:[3547..3745).4" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).7" Target="10298:[471..492).6" />
<Link Source="10307:[3547..3745).7" Target="10307:[3547..3745).4" />
<Link Source="10307:[3547..3745).7" Target="10077:[34361..34419).1" />
<Link Source="10307:[3554..3645).1" Target="10307:[3547..3745).7" />
<Link Source="10307:[3554..3645).1" Target="10077:[34361..34419).1" />
<Link Source="10077:[34444..34455).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2110..2139).4" Target="10077:[34444..34455).1" />
<Link Source="10077:[2110..2139).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).1" Target="10077:[2110..2139).4" />
<Link Source="10077:[34444..34482).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[34444..34482).2" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).3" Target="10307:[3554..3645).1" />
<Link Source="10077:[34444..34482).3" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).2" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).3" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[953..968).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[34444..34482).4" Target="10286:[1428..1444).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1390..1400).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1247..1258).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1478..1494).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1231..1520).2" />
<Link Source="10077:[34444..34482).4" Target="10346:[2766..2776).1" />
<Link Source="10077:[34444..34482).4" Target="10346:[932..947).2" />
<Link Source="10077:[34444..34482).4" Target="10346:[2803..2815).1" />
<Link Source="10077:[34444..34482).4" Target="10346:[1017..1033).2" />
<Link Source="10077:[34444..34482).4" Target="10346:[1074..1100).2" />
<Link Source="10077:[34444..34482).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).4" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).5" Target="10076:[1307..1365).1" />
<Link Source="10077:[34521..34541).1" Target="10307:[3554..3645).1" />
<Link Source="10077:[34521..34541).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[2926..2971).2" />
<Link Source="10077:[2926..2971).12" Target="10077:[34521..34541).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[34444..34482).4" />
<Link Source="10077:[2926..2971).12" Target="10077:[2749..2764).1" />
<Link Source="10076:[5678..5718).1" Target="10076:[5470..5538).4" />
<Link Source="10076:[5678..5718).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[5071..5759).1" />
<Link Source="10076:[5678..5718).2" Target="10077:[2926..2971).12" />
<Link Source="10076:[5678..5718).2" Target="10076:[5678..5718).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5734..5748).1" Target="10077:[2926..2971).12" />
<Link Source="10076:[5734..5748).1" Target="10076:[4989..5047).1" />
<Link Source="25002:[4395..4432).22" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).22" Target="10076:[5734..5748).1" />
<Link Source="25002:[4395..4432).22" Target="10076:[5678..5718).2" />
<Link Source="25002:[4395..4432).22" Target="28001:[14630..14811).2" />
<Link Source="10076:[5223..5250).6" Target="25002:[4395..4432).22" />
<Link Source="10076:[5223..5250).6" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).6" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).6" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).6" Target="25002:[4395..4432).22" />
<Link Source="10076:[5277..5448).6" Target="10076:[4989..5047).1" />
<Link Source="10076:[5391..5433).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5391..5433).1" Target="10076:[5277..5448).6" />
<Link Source="10076:[5391..5433).2" Target="10076:[5277..5448).6" />
<Link Source="10077:[4637..4671).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4637..4671).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4591..7075).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4591..7075).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[4705..4866).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4705..4866).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[4705..4866).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).3" Target="10077:[4705..4866).1" />
<Link Source="10077:[4705..4866).3" Target="10077:[4705..4866).2" />
<Link Source="10077:[4705..4866).3" Target="10076:[5391..5433).1" />
<Link Source="10077:[4705..4866).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[4886..4902).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4920..5555).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[4920..5555).1" Target="10077:[4705..4866).3" />
<Link Source="10077:[4920..5555).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4920..5555).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[4920..5555).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5083..5555).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[5083..5555).1" Target="10077:[4920..5555).1" />
<Link Source="10077:[5083..5555).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[5083..5555).2" Target="10077:[4920..5555).1" />
<Link Source="10077:[5511..5536).1" Target="10077:[39610..39829).1" />
<Link Source="10077:[5511..5536).1" Target="10077:[5083..5555).1" />
<Link Source="10077:[5575..5625).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[5575..5625).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5575..5625).2" Target="10077:[5511..5536).1" />
<Link Source="10077:[5575..5625).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5585..5624).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[44159..44180).3" Target="10077:[5575..5625).1" />
<Link Source="10077:[44159..44180).3" Target="10077:[5585..5624).1" />
<Link Source="10077:[44182..44197).3" Target="10077:[5575..5625).2" />
<Link Source="10077:[44182..44197).3" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).17" Target="10077:[44182..44197).3" />
<Link Source="10077:[44231..44317).17" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).19" Target="10077:[5585..5624).1" />
<Link Source="10077:[44335..44374).11" Target="10077:[5585..5624).1" />
<Link Source="10077:[44342..44373).3" Target="10077:[5585..5624).1" />
<Link Source="10076:[853..1034).3" Target="10077:[44335..44374).11" />
<Link Source="10076:[853..1034).3" Target="10077:[44342..44373).3" />
<Link Source="10077:[5575..5625).3" Target="10077:[44335..44374).11" />
<Link Source="10077:[5575..5625).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[5645..5665).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5688..5699).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2066..2158).5" Target="10077:[4591..7075).1" />
<Link Source="10077:[2066..2158).5" Target="10077:[5688..5699).1" />
<Link Source="10077:[2110..2139).5" Target="10077:[2066..2158).5" />
<Link Source="10077:[2110..2139).5" Target="10077:[5083..5555).1" />
<Link Source="10077:[2110..2139).5" Target="10077:[5688..5699).1" />
<Link Source="10077:[5683..7020).1" Target="10077:[2110..2139).5" />
<Link Source="10077:[5683..7020).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).2" Target="10077:[5575..5625).3" />
<Link Source="10077:[5683..7020).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).3" Target="10077:[5645..5665).1" />
<Link Source="10077:[5683..7020).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).2" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).1" />
<Link Source="10077:[5683..7020).4" Target="10077:[44159..44180).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[44182..44197).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5083..5555).1" />
<Link Source="10077:[5683..7020).4" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).5" Target="10077:[2926..2971).3" />
<Link Source="10077:[5776..5836).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[5776..5836).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[5858..6188).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[5858..6188).2" Target="10077:[5776..5836).1" />
<Link Source="10077:[5858..6188).2" Target="10077:[5858..6188).1" />
<Link Source="10077:[5858..6188).2" Target="10077:[5683..7020).4" />
<Link Source="10077:[5930..6023).1" Target="10077:[5776..5836).1" />
<Link Source="10077:[5930..6023).1" Target="10077:[5858..6188).2" />
<Link Source="10077:[5930..6023).2" Target="EXTERNAL" />
<Link Source="10077:[5930..6023).2" Target="10077:[5858..6188).2" />
<Link Source="10077:[5945..6022).1" Target="10077:[5858..6188).2" />
<Link Source="10077:[32474..32502).2" Target="10077:[5930..6023).1" />
<Link Source="10077:[32474..32502).2" Target="10077:[5945..6022).1" />
<Link Source="10077:[32504..32523).2" Target="10077:[5930..6023).2" />
<Link Source="10077:[32504..32523).2" Target="10077:[5945..6022).1" />
<Link Source="10077:[44231..44317).25" Target="10077:[32504..32523).2" />
<Link Source="10077:[44231..44317).25" Target="10077:[5945..6022).1" />
<Link Source="10077:[44231..44317).27" Target="10077:[5945..6022).1" />
<Link Source="10077:[44954..44972).2" Target="10077:[32474..32502).2" />
<Link Source="10077:[44966..44971).34" Target="10077:[44954..44972).2" />
<Link Source="10077:[44966..44971).34" Target="10077:[32474..32502).2" />
<Link Source="10077:[39421..39431).2" Target="10077:[32474..32502).2" />
<Link Source="10077:[1641..1732).2" Target="10077:[32474..32502).2" />
<Link Source="10077:[1641..1732).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[1641..1732).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[32474..32502).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[1685..1713).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[32474..32502).2" />
<Link Source="10077:[39398..39590).8" Target="10077:[32474..32502).2" />
<Link Source="10077:[44231..44317).33" Target="10077:[32474..32502).2" />
<Link Source="10286:[1317..1350).9" Target="10077:[32474..32502).2" />
<Link Source="10346:[858..868).3" Target="10077:[32474..32502).2" />
<Link Source="10346:[1572..1612).5" Target="10077:[32474..32502).2" />
<Link Source="10346:[1626..1666).5" Target="10077:[32474..32502).2" />
<Link Source="10286:[1317..1350).13" Target="10077:[32504..32523).2" />
<Link Source="10346:[858..868).4" Target="10077:[32504..32523).2" />
<Link Source="10346:[2691..2750).6" Target="10077:[32504..32523).2" />
<Link Source="10077:[34064..34272).4" Target="10077:[32504..32523).2" />
<Link Source="10077:[6212..6251).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6275..6566).1" Target="10077:[5511..5536).1" />
<Link Source="10077:[6275..6566).1" Target="10077:[32474..32502).2" />
<Link Source="10077:[6275..6566).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6590..6839).1" Target="10077:[5511..5536).1" />
<Link Source="10077:[6590..6839).1" Target="EXTERNAL" />
<Link Source="10077:[6590..6839).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6863..6941).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[6863..6941).1" Target="10077:[32474..32502).2" />
<Link Source="10077:[6863..6941).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6878..6940).1" Target="10077:[5683..7020).4" />
<Link Source="10307:[3496..3521).3" Target="10077:[6863..6941).1" />
<Link Source="10307:[3496..3521).3" Target="10077:[6878..6940).1" />
<Link Source="10307:[3452..3756).3" Target="10077:[32504..32523).2" />
<Link Source="10307:[3452..3756).3" Target="10077:[6878..6940).1" />
<Link Source="10077:[6963..6974).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[2110..2139).10" Target="10077:[6963..6974).1" />
<Link Source="10077:[2110..2139).10" Target="10307:[3496..3521).3" />
<Link Source="10077:[6963..7001).1" Target="10077:[2110..2139).10" />
<Link Source="10077:[6963..7001).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).2" Target="10077:[5575..5625).3" />
<Link Source="10077:[6963..7001).2" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).3" Target="10307:[3496..3521).3" />
<Link Source="10077:[6963..7001).3" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).5" Target="10077:[5683..7020).4" />
<Link Source="10077:[7040..7060).1" Target="10307:[3496..3521).3" />
<Link Source="10077:[7040..7060).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2926..2971).26" Target="10076:[5391..5433).1" />
<Link Source="10077:[2926..2971).26" Target="10077:[7040..7060).1" />
<Link Source="10077:[2926..2971).26" Target="10077:[6963..7001).1" />
<Link Source="10077:[2926..2971).26" Target="10077:[2749..2764).1" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3247..3264).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3290..3331).1" />
<Link Source="10307:[3290..3331).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).1" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).2" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).2" Target="10077:[2926..2971).26" />
<Link Source="10307:[3345..3429).2" Target="10307:[3228..3245).1" />
<Link Source="10307:[3345..3429).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).4" Target="10307:[3247..3264).1" />
<Link Source="10307:[3345..3429).4" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).5" Target="25002:[4395..4432).1" />
<Link Source="10307:[3352..3428).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3345..3429).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1085..1102).1" Target="10307:[3345..3429).2" />
<Link Source="10307:[1085..1102).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1104..1135).1" Target="10307:[3345..3429).4" />
<Link Source="10307:[1104..1135).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).1" Target="10307:[3345..3429).5" />
<Link Source="10307:[1028..1341).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[1072..1083).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[1085..1102).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).2" Target="10307:[3352..3428).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1161..1165).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1562..1579).1" Target="10307:[1167..1172).1" />
<Link Source="10286:[1562..1579).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).1" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[726..773).7" Target="10286:[1532..2083).1" />
<Link Source="10286:[726..773).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[815..820).7" Target="10286:[1532..2083).1" />
<Link Source="10286:[815..820).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[2975..3015).7" Target="10286:[1532..2083).1" />
<Link Source="10286:[2975..3015).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[17802..17818).7" Target="10286:[1532..2083).1" />
<Link Source="10286:[17802..17818).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[18200..18223).7" Target="10286:[1532..2083).1" />
<Link Source="10286:[18200..18223).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).2" Target="10286:[1549..1560).1" />
<Link Source="10286:[1605..1638).2" Target="10286:[1605..1638).1" />
<Link Source="10286:[1605..1638).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1688..1781).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).2" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1708..1779).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).9" Target="10286:[1688..1781).1" />
<Link Source="10298:[471..492).9" Target="10286:[1708..1779).1" />
<Link Source="10298:[494..511).9" Target="10286:[1688..1781).2" />
<Link Source="10298:[494..511).9" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1820..1963).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1820..1963).2" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1840..1888).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).10" Target="10286:[1820..1963).1" />
<Link Source="10298:[471..492).10" Target="10286:[1840..1888).1" />
<Link Source="10298:[494..511).10" Target="10286:[1820..1963).2" />
<Link Source="10298:[494..511).10" Target="10286:[1840..1888).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[1977..1981).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2003..2013).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[2003..2013).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2003..2013).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2036..2052).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[2036..2052).1" Target="10077:[2926..2971).26" />
<Link Source="10286:[2036..2052).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2036..2052).1" Target="10307:[1028..1341).2" />
<Link Source="10307:[683..708).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[683..708).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1104..1135).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1206..1253).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[3352..3428).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1104..1135).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[3352..3428).1" />
<Link Source="25002:[4395..4432).31" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).31" Target="10307:[3345..3429).5" />
<Link Source="25002:[4395..4432).31" Target="10077:[2926..2971).26" />
<Link Source="25002:[4395..4432).31" Target="10286:[2036..2052).1" />
<Link Source="25002:[4395..4432).31" Target="10286:[2003..2013).1" />
<Link Source="25002:[4395..4432).31" Target="10286:[1977..1981).1" />
<Link Source="25002:[4395..4432).31" Target="10286:[17802..17818).7" />
<Link Source="25002:[4395..4432).31" Target="10286:[18200..18223).7" />
<Link Source="25002:[4395..4432).31" Target="10307:[1273..1298).1" />
<Link Source="25002:[4395..4432).31" Target="28001:[14630..14811).2" />
<Link Source="10313:[1230..1280).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1230..1280).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1295..1337).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1295..1337).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1352..1376).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1352..1376).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1391..1416).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1391..1416).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1171..3563).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1171..3563).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1442..1480).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1494..2257).1" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).1" Target="25002:[4395..4432).31" />
<Link Source="10313:[1494..2257).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2273..2310).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2324..3491).1" Target="10313:[1295..1337).1" />
<Link Source="10313:[2324..3491).1" Target="25002:[4395..4432).31" />
<Link Source="10313:[2324..3491).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[3507..3523).1" Target="10313:[1442..1480).1" />
<Link Source="10313:[3507..3523).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[3537..3552).1" Target="10313:[2273..2310).1" />
<Link Source="10313:[3537..3552).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).1" Target="10319:[13685..13708).1" />
<Link Source="10319:[13850..13948).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13850..13948).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).3" Target="10319:[13737..13783).1" />
<Link Source="10319:[13850..13948).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).4" Target="10319:[13785..13824).1" />
<Link Source="10319:[13850..13948).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13863..13947).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13850..13948).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14956..14981).1" Target="10319:[13850..13948).2" />
<Link Source="10319:[14956..14981).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14983..15029).1" Target="10319:[13850..13948).3" />
<Link Source="10319:[14983..15029).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15031..15070).1" Target="10319:[13850..13948).4" />
<Link Source="10319:[15031..15070).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[15096..15130).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[14931..14954).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).4" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[15146..15291).4" />
<Link Source="10319:[15146..15291).5" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[15146..15291).5" />
<Link Source="10319:[15146..15291).6" Target="10319:[15031..15070).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[13863..13947).1" />
<Link Source="10319:[15159..15290).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15146..15291).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20027..20052).1" Target="10319:[15146..15291).2" />
<Link Source="10319:[20027..20052).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20054..20093).1" Target="10319:[15146..15291).3" />
<Link Source="10319:[20054..20093).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20095..20126).1" Target="10319:[15146..15291).6" />
<Link Source="10319:[20095..20126).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[14862..16302).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20152..24647).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20152..24647).1" Target="25002:[4395..4432).31" />
<Link Source="10319:[20152..24647).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20392..20435).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20392..20435).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[20392..20435).2" Target="10319:[20027..20052).1" />
<Link Source="10319:[20392..20435).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[20399..20434).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[27647..28051).1" Target="10319:[20392..20435).1" />
<Link Source="10319:[27647..28051).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27647..28051).2" Target="10319:[20392..20435).2" />
<Link Source="10319:[27647..28051).2" Target="10319:[20399..20434).1" />
<Link Source="10319:[27647..28051).3" Target="10319:[19916..30085).1" />
<Link Source="10319:[27647..28051).3" Target="10319:[20399..20434).1" />
<Link Source="10319:[27790..27840).1" Target="10319:[27647..28051).1" />
<Link Source="10319:[27790..27840).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27858..27923).1" Target="10319:[27790..27840).1" />
<Link Source="10319:[27858..27923).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27858..27923).2" Target="10319:[27647..28051).2" />
<Link Source="10319:[27858..27923).2" Target="10319:[20399..20434).1" />
<Link Source="10319:[27869..27922).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[39111..39136).1" Target="10319:[27858..27923).1" />
<Link Source="10319:[39111..39136).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39138..39163).1" Target="10319:[27858..27923).2" />
<Link Source="10319:[39138..39163).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39062..39279).1" Target="10319:[27647..28051).3" />
<Link Source="10319:[39062..39279).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).1" Target="10319:[39111..39136).1" />
<Link Source="10319:[39189..39268).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[39189..39268).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).6" Target="10319:[39138..39163).1" />
<Link Source="10319:[39189..39268).6" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).7" Target="10319:[39111..39136).1" />
<Link Source="10319:[39189..39268).7" Target="10319:[27869..27922).1" />
<Link Source="10319:[39196..39267).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[73460..73478).1" Target="10319:[39189..39268).1" />
<Link Source="10319:[73460..73478).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73480..73505).1" Target="10319:[39189..39268).6" />
<Link Source="10319:[73480..73505).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73507..73522).1" Target="10319:[39189..39268).7" />
<Link Source="10319:[73507..73522).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73420..73626).1" Target="10319:[39062..39279).1" />
<Link Source="10319:[73420..73626).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[73420..73626).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[39189..39268).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).2" Target="10319:[73460..73478).1" />
<Link Source="10319:[73548..73615).2" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).3" Target="10319:[73507..73522).1" />
<Link Source="10319:[73548..73615).3" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).4" Target="10319:[73480..73505).1" />
<Link Source="10319:[73548..73615).4" Target="10319:[39196..39267).1" />
<Link Source="10319:[73555..73614).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73685..73714).1" Target="10319:[73548..73615).1" />
<Link Source="10319:[73685..73714).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73716..73734).1" Target="10319:[73548..73615).2" />
<Link Source="10319:[73716..73734).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73736..73751).1" Target="10319:[73548..73615).3" />
<Link Source="10319:[73736..73751).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73753..73778).1" Target="10319:[73548..73615).4" />
<Link Source="10319:[73753..73778).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73804..73868).1" Target="10319:[73716..73734).1" />
<Link Source="10319:[73804..73868).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73685..73714).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73804..73868).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[39189..39268).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73882..73975).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73882..73975).2" Target="10319:[73804..73868).2" />
<Link Source="10319:[73882..73975).2" Target="10319:[73882..73975).1" />
<Link Source="10319:[73882..73975).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[73989..74045).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).2" Target="10319:[73753..73778).1" />
<Link Source="10319:[73989..74045).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).3" Target="10319:[73736..73751).1" />
<Link Source="10319:[73989..74045).3" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74044).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[73989..74045).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[73989..74044).1" />
<Link Source="10319:[76360..76385).1" Target="10319:[73989..74045).2" />
<Link Source="10319:[76360..76385).1" Target="10319:[73989..74044).1" />
<Link Source="10319:[76387..76402).1" Target="10319:[73989..74045).3" />
<Link Source="10319:[76387..76402).1" Target="10319:[73989..74044).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[76345..76358).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[76428..76480).1" Target="10319:[73989..74044).1" />
<Link Source="10319:[76494..76582).1" Target="10319:[73989..74044).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76494..76582).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[73989..74044).1" />
<Link Source="10319:[74059..74077).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[74059..74077).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[27790..27840).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[76428..76480).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27975..28028).1" Target="10319:[20399..20434).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[27941..28036).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[27975..28028).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[27647..28051).3" />
<Link Source="10286:[9966..10197).1" Target="10319:[27975..28028).1" />
<Link Source="10286:[10053..10100).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10053..10100).1" Target="10319:[76428..76480).1" />
<Link Source="10286:[10053..10100).1" Target="10319:[27975..28028).1" />
<Link Source="10286:[10114..10186).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10114..10186).1" Target="10319:[76428..76480).1" />
<Link Source="10286:[10114..10186).1" Target="10319:[27975..28028).1" />
<Link Source="10286:[10121..10185).1" Target="10319:[27975..28028).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[9966..10197).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[9073..9094).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[9096..9108).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9134..9189).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9203..9282).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10053..10100).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10121..10185).1" />
<Link Source="10286:[9305..9942).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9305..9942).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9298..9943).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[9298..9943).2" Target="EXTERNAL" />
<Link Source="10286:[9298..9943).2" Target="10286:[9305..9942).1" />
<Link Source="10286:[9798..9837).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[10465..10663).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9298..9943).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10607..10651).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10465..10663).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10551..10586).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10607..10651).1" />
<Link Source="10325:[4462..4594).1" Target="10286:[10465..10663).2" />
<Link Source="10325:[4462..4594).1" Target="10286:[10607..10651).1" />
<Link Source="10325:[4556..4582).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4462..4594).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10675..11259).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10465..10663).2" />
<Link Source="10286:[10741..11248).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[11085..11098).1" Target="10286:[10741..11248).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[11085..11098).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10600..10652).1" Target="10325:[4549..4583).1" />
<Link Source="10286:[10600..10652).1" Target="10286:[10607..10651).1" />
<Link Source="10319:[27941..28036).4" Target="10319:[74059..74077).1" />
<Link Source="10319:[27941..28036).4" Target="10319:[20399..20434).1" />
<Link Source="10319:[28030..28034).1" Target="10319:[20399..20434).1" />
<Link Source="10287:[2888..2927).1" Target="10319:[27941..28036).4" />
<Link Source="10287:[2888..2927).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[2961..3037).1" Target="10287:[2888..2927).1" />
<Link Source="10287:[2961..3037).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[2961..3037).2" Target="10319:[28030..28034).1" />
<Link Source="10287:[2968..3036).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[718..757).1" Target="10287:[2961..3037).1" />
<Link Source="10287:[718..757).1" Target="10287:[2968..3036).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2961..3037).2" />
<Link Source="10287:[666..1076).1" Target="10287:[2968..3036).1" />
<Link Source="10287:[791..833).1" Target="10287:[718..757).1" />
<Link Source="10287:[791..833).1" Target="10287:[2968..3036).1" />
<Link Source="10287:[851..871).1" Target="10287:[718..757).1" />
<Link Source="10287:[851..871).1" Target="10287:[666..1076).1" />
<Link Source="10287:[851..871).1" Target="10287:[2968..3036).1" />
<Link Source="10287:[912..927).1" Target="10287:[2968..3036).1" />
<Link Source="10287:[912..919).1" Target="10287:[912..927).1" />
<Link Source="10287:[912..919).1" Target="10287:[666..1076).1" />
<Link Source="10287:[912..919).1" Target="10287:[2968..3036).1" />
<Link Source="10287:[945..972).1" Target="10287:[2968..3036).1" />
<Link Source="10287:[945..963).1" Target="10287:[945..972).1" />
<Link Source="10287:[945..963).1" Target="10287:[666..1076).1" />
<Link Source="10287:[945..963).1" Target="10287:[2968..3036).1" />
<Link Source="10319:[27941..28036).5" Target="10287:[2961..3037).2" />
<Link Source="10319:[27941..28036).5" Target="10319:[20399..20434).1" />
<Link Source="10319:[27941..28036).7" Target="10319:[20399..20434).1" />
<Link Source="10319:[27941..28036).9" Target="10286:[10600..10652).1" />
<Link Source="10319:[27941..28036).9" Target="10319:[27941..28036).5" />
<Link Source="10319:[27941..28036).9" Target="10319:[27941..28036).7" />
<Link Source="10319:[27941..28036).9" Target="10287:[851..871).1" />
<Link Source="10319:[27941..28036).9" Target="10287:[912..919).1" />
<Link Source="10319:[27941..28036).9" Target="10287:[945..963).1" />
<Link Source="10319:[27941..28036).9" Target="10319:[20399..20434).1" />
<Link Source="10319:[15383..15396).1" Target="10319:[13863..13947).1" />
<Link Source="10287:[1609..1643).1" Target="10319:[27941..28036).9" />
<Link Source="10287:[1609..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[1609..1643).1" />
<Link Source="10287:[1612..1643).1" Target="10319:[27941..28036).9" />
<Link Source="10287:[1612..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10319:[15379..15933).1" Target="10287:[1612..1643).1" />
<Link Source="10319:[15379..15933).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15548..15561).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15548..15561).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15783..15809).1" Target="10319:[15544..15884).1" />
<Link Source="10287:[1474..1497).1" Target="10319:[27941..28036).9" />
<Link Source="10287:[1474..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[1474..1497).1" />
<Link Source="10287:[1477..1497).1" Target="10319:[27941..28036).9" />
<Link Source="10287:[1477..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10319:[15783..15865).1" Target="10287:[1477..1497).1" />
<Link Source="10319:[15783..15865).1" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[14862..16302).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[14931..14954).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[14956..14981).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).5" Target="10319:[15783..15865).2" />
<Link Source="10319:[15783..15865).5" Target="10319:[15783..15865).3" />
<Link Source="10319:[15783..15865).5" Target="10319:[15783..15865).4" />
<Link Source="10319:[15783..15865).5" Target="10319:[15783..15865).1" />
<Link Source="10319:[15783..15865).5" Target="10286:[10465..10663).2" />
<Link Source="10319:[15783..15865).5" Target="10319:[27941..28036).9" />
<Link Source="10319:[15783..15865).5" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).6" Target="10319:[15544..15884).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).5" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).5" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).5" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).5" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).5" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).1" Target="10286:[21504..21529).1" />
<Link Source="10286:[21609..21700).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).2" Target="10286:[21531..21544).1" />
<Link Source="10286:[21609..21700).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).3" Target="10286:[21546..21561).1" />
<Link Source="10286:[21609..21700).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).4" Target="10286:[21563..21583).1" />
<Link Source="10286:[21609..21700).4" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21699).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21700).1" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21700).2" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21700).3" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21700).4" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21462..21711).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[22071..22084).1" />
<Link Source="10286:[22156..22600).1" Target="10319:[15783..15865).5" />
<Link Source="10286:[22156..22600).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22421..22557).1" Target="10286:[22044..22069).1" />
<Link Source="10286:[22421..22557).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).2" Target="10286:[22071..22084).1" />
<Link Source="10286:[22421..22557).2" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).3" Target="10286:[22086..22108).1" />
<Link Source="10286:[22421..22557).3" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).4" Target="10286:[22110..22130).1" />
<Link Source="10286:[22421..22557).4" Target="10286:[22156..22600).1" />
<Link Source="10286:[22493..22522).1" Target="10286:[22156..22600).1" />
<Link Source="10307:[1439..1480).1" Target="10286:[22002..22611).1" />
<Link Source="10307:[1439..1480).1" Target="10286:[22493..22522).1" />
<Link Source="10307:[1445..1478).1" Target="10307:[1439..1480).1" />
<Link Source="10307:[1445..1478).1" Target="10319:[15783..15865).5" />
<Link Source="10307:[1445..1478).1" Target="10286:[22493..22522).1" />
<Link Source="10286:[22421..22557).5" Target="10307:[1445..1478).1" />
<Link Source="10286:[22421..22557).5" Target="10286:[22156..22600).1" />
<Link Source="10286:[22524..22543).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[15519..15926).1" Target="10286:[22002..22611).1" />
<Link Source="10286:[15519..15926).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15568..15597).1" Target="10286:[22524..22543).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15519..15926).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15568..15597).1" />
<Link Source="10307:[1445..1478).2" Target="10307:[1439..1480).2" />
<Link Source="10307:[1445..1478).2" Target="10319:[15783..15865).5" />
<Link Source="10307:[1445..1478).2" Target="10286:[15568..15597).1" />
<Link Source="10286:[15555..15598).1" Target="10307:[1445..1478).2" />
<Link Source="10286:[15555..15598).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).2" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).2" Target="10319:[15783..15865).5" />
<Link Source="10286:[15616..15690).2" Target="EXTERNAL" />
<Link Source="10286:[15616..15690).2" Target="10286:[22524..22543).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15708..15911).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15708..15911).1" Target="10319:[15783..15865).5" />
<Link Source="10286:[15708..15911).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[15708..15911).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).9" Target="10286:[22002..22611).1" />
<Link Source="10286:[22421..22557).9" Target="10319:[15783..15865).5" />
<Link Source="10286:[22421..22557).9" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22556).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22557).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22557).2" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22557).3" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22557).4" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22557).5" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22557).7" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22557).9" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23380..23684).1" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23893..24026).1" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[23235..23266).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).2" />
<Link Source="10286:[24450..24529).3" Target="10286:[23327..23364).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[23161..23181).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[23056..23081).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).2" Target="10286:[24450..24529).3" />
<Link Source="10286:[25365..25492).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[23124..23146).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[23196..23220).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[23281..23301).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[22421..22556).1" />
<Link Source="10286:[25386..25491).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25365..25492).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26937..26950).1" Target="10286:[25365..25492).2" />
<Link Source="10286:[26937..26950).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26952..26974).1" Target="10286:[25365..25492).3" />
<Link Source="10286:[26952..26974).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26976..27000).1" Target="10286:[25365..25492).4" />
<Link Source="10286:[26976..27000).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27002..27022).1" Target="10286:[25365..25492).5" />
<Link Source="10286:[27002..27022).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[26910..26935).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[27048..27088).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[26937..26950).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[26976..27000).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).3" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).2" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[24450..24529).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[25386..25491).1" />
<Link Source="10286:[27208..27236).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27250..27722).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27250..27722).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27208..27236).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27738..27845).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27861..27873).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27861..27873).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[27861..27873).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[26281..26812).1" />
<Link Source="10286:[22421..22557).10" Target="10286:[22156..22600).1" />
<Link Source="10286:[21609..21700).5" Target="10319:[15783..15865).6" />
<Link Source="10319:[15904..15918).1" Target="10319:[27941..28036).9" />
<Link Source="10319:[15904..15918).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[13962..14050).1" Target="10319:[15904..15918).1" />
<Link Source="10319:[13962..14050).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13962..14050).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).3" Target="10319:[13685..13708).1" />
<Link Source="10319:[13962..14050).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).4" Target="10319:[13737..13783).1" />
<Link Source="10319:[13962..14050).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13969..14029).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[13962..14050).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51817..51842).1" Target="10319:[13962..14050).2" />
<Link Source="10319:[51817..51842).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51844..51861).1" Target="10319:[13962..14050).3" />
<Link Source="10319:[51844..51861).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51863..51909).1" Target="10319:[13962..14050).4" />
<Link Source="10319:[51863..51909).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51939..51953).1" Target="10319:[13969..14029).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51762..51815).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[1680..1716).1" />
<Link Source="10287:[1683..1690).1" Target="10319:[27941..28036).9" />
<Link Source="10287:[1683..1690).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).1" Target="10287:[1683..1690).1" />
<Link Source="10287:[1683..1716).1" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).1" Target="10287:[1683..1716).1" />
<Link Source="10319:[51935..52244).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[51762..51815).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[13969..14049).1" Target="25002:[4395..4432).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[52260..52274).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[13969..14049).1" />
<Link Source="10287:[1477..1497).2" Target="10287:[1474..1497).2" />
<Link Source="10287:[1477..1497).2" Target="10319:[27941..28036).9" />
<Link Source="10287:[1477..1497).2" Target="10319:[13969..14049).1" />
<Link Source="25002:[4395..4432).35" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).35" Target="10287:[1477..1497).2" />
<Link Source="25002:[4395..4432).35" Target="10286:[27104..27192).5" />
<Link Source="25002:[4395..4432).35" Target="28001:[14630..14811).2" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[602..612).1" Target="10845:[522..547).1" />
<Link Source="10845:[602..612).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[637..638).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[660..678).1" Target="10845:[549..580).1" />
<Link Source="10845:[660..678).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[701..705).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).2" Target="25002:[4395..4432).1" />
<Link Source="10845:[764..789).1" Target="10845:[602..612).1" />
<Link Source="10845:[764..789).1" Target="10845:[499..728).2" />
<Link Source="10845:[791..816).1" Target="10845:[637..638).1" />
<Link Source="10845:[791..816).1" Target="10845:[499..728).2" />
<Link Source="10845:[818..841).1" Target="10845:[660..678).1" />
<Link Source="10845:[818..841).1" Target="10845:[499..728).2" />
<Link Source="10845:[843..878).1" Target="10845:[701..705).1" />
<Link Source="10845:[843..878).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).1" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).2" />
<Link Source="10843:[661..687).1" Target="10843:[685..687).1" />
<Link Source="10843:[82071..82080).1" Target="10843:[82075..82080).1" />
<Link Source="10843:[82110..82118).1" Target="10843:[82114..82118).1" />
<Link Source="10843:[82447..82485).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82447..82485).2" Target="10843:[82447..82485).1" />
<Link Source="10843:[82447..82485).4" Target="10843:[82110..82118).1" />
<Link Source="10843:[82447..82485).4" Target="10843:[82447..82485).1" />
<Link Source="10843:[82519..82557).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82519..82557).2" Target="10843:[82519..82557).1" />
<Link Source="10843:[82519..82557).4" Target="10843:[82110..82118).1" />
<Link Source="10843:[82519..82557).4" Target="10843:[82519..82557).1" />
<Link Source="10843:[82591..82629).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82591..82629).2" Target="10843:[82591..82629).1" />
<Link Source="10843:[82591..82629).6" Target="10843:[82110..82118).1" />
<Link Source="10843:[82591..82629).6" Target="10843:[82591..82629).1" />
<Link Source="10843:[82663..82701).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82663..82701).2" Target="10843:[82663..82701).1" />
<Link Source="10843:[82663..82701).6" Target="10843:[82110..82118).1" />
<Link Source="10843:[82663..82701).6" Target="10843:[82663..82701).1" />
<Link Source="10843:[82735..82773).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82735..82773).2" Target="10843:[82735..82773).1" />
<Link Source="10843:[82735..82773).8" Target="10843:[82110..82118).1" />
<Link Source="10843:[82735..82773).8" Target="10843:[82735..82773).1" />
<Link Source="10843:[82807..82845).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82807..82845).2" Target="10843:[82807..82845).1" />
<Link Source="10843:[82807..82845).8" Target="10843:[82110..82118).1" />
<Link Source="10843:[82807..82845).8" Target="10843:[82807..82845).1" />
<Link Source="10843:[82879..82917).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82879..82917).2" Target="10843:[82879..82917).1" />
<Link Source="10843:[82879..82917).11" Target="10843:[82110..82118).1" />
<Link Source="10843:[82879..82917).11" Target="10843:[82879..82917).1" />
<Link Source="10843:[82951..82989).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82951..82989).2" Target="10843:[82951..82989).1" />
<Link Source="10843:[82951..82989).11" Target="10843:[82110..82118).1" />
<Link Source="10843:[82951..82989).11" Target="10843:[82951..82989).1" />
<Link Source="10843:[83023..83061).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83023..83061).2" Target="10843:[83023..83061).1" />
<Link Source="10843:[83023..83061).5" Target="10843:[82110..82118).1" />
<Link Source="10843:[83023..83061).5" Target="10843:[83023..83061).1" />
<Link Source="10843:[83095..83133).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83095..83133).2" Target="10843:[83095..83133).1" />
<Link Source="10843:[83095..83133).12" Target="10843:[82110..82118).1" />
<Link Source="10843:[83095..83133).12" Target="10843:[83095..83133).1" />
<Link Source="10843:[83167..83205).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83167..83205).2" Target="10843:[83167..83205).1" />
<Link Source="10843:[83239..83277).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83239..83277).2" Target="10843:[83239..83277).1" />
<Link Source="10843:[82333..83288).2" Target="10843:[82447..82485).1" />
<Link Source="10843:[82333..83288).2" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).3" Target="10843:[82519..82557).1" />
<Link Source="10843:[82333..83288).3" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).4" Target="10843:[82591..82629).1" />
<Link Source="10843:[82333..83288).4" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).5" Target="10843:[82663..82701).1" />
<Link Source="10843:[82333..83288).5" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).6" Target="10843:[82735..82773).1" />
<Link Source="10843:[82333..83288).6" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).7" Target="10843:[82807..82845).1" />
<Link Source="10843:[82333..83288).7" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).8" Target="10843:[82879..82917).1" />
<Link Source="10843:[82333..83288).8" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).9" Target="10843:[82951..82989).1" />
<Link Source="10843:[82333..83288).9" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).10" Target="10843:[83023..83061).1" />
<Link Source="10843:[82333..83288).10" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).11" Target="10843:[83095..83133).1" />
<Link Source="10843:[82333..83288).11" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).12" Target="10843:[83167..83205).1" />
<Link Source="10843:[82333..83288).12" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).13" Target="10843:[83239..83277).1" />
<Link Source="10843:[82333..83288).13" Target="10843:[82333..83288).1" />
<Link Source="10843:[82293..83288).1" Target="10843:[82333..83288).1" />
<Link Source="10843:[83487..83525).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83487..83525).2" Target="10843:[83487..83525).1" />
<Link Source="10843:[83487..83525).3" Target="10843:[82110..82118).1" />
<Link Source="10843:[83487..83525).3" Target="10843:[83487..83525).1" />
<Link Source="10843:[83559..83597).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83559..83597).2" Target="10843:[83559..83597).1" />
<Link Source="10843:[83559..83597).3" Target="10843:[82071..82080).1" />
<Link Source="10843:[83559..83597).3" Target="10843:[83559..83597).1" />
<Link Source="10843:[83631..83669).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83631..83669).2" Target="10843:[83631..83669).1" />
<Link Source="10843:[83631..83669).4" Target="10843:[82071..82080).1" />
<Link Source="10843:[83631..83669).4" Target="10843:[83631..83669).1" />
<Link Source="10843:[83703..83741).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83703..83741).2" Target="10843:[83703..83741).1" />
<Link Source="10843:[83703..83741).5" Target="10843:[82071..82080).1" />
<Link Source="10843:[83703..83741).5" Target="10843:[83703..83741).1" />
<Link Source="10843:[83775..83813).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83775..83813).2" Target="10843:[83775..83813).1" />
<Link Source="10843:[83775..83813).6" Target="10843:[82071..82080).1" />
<Link Source="10843:[83775..83813).6" Target="10843:[83775..83813).1" />
<Link Source="10843:[83847..83885).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83847..83885).2" Target="10843:[83847..83885).1" />
<Link Source="10843:[83847..83885).7" Target="10843:[82071..82080).1" />
<Link Source="10843:[83847..83885).7" Target="10843:[83847..83885).1" />
<Link Source="10843:[83919..83957).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83919..83957).2" Target="10843:[83919..83957).1" />
<Link Source="10843:[83919..83957).8" Target="10843:[82071..82080).1" />
<Link Source="10843:[83919..83957).8" Target="10843:[83919..83957).1" />
<Link Source="10843:[83991..84029).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83991..84029).2" Target="10843:[83991..84029).1" />
<Link Source="10843:[83991..84029).9" Target="10843:[82071..82080).1" />
<Link Source="10843:[83991..84029).9" Target="10843:[83991..84029).1" />
<Link Source="10843:[84063..84101).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84063..84101).2" Target="10843:[84063..84101).1" />
<Link Source="10843:[84063..84101).5" Target="10843:[82071..82080).1" />
<Link Source="10843:[84063..84101).5" Target="10843:[84063..84101).1" />
<Link Source="10843:[84135..84173).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84135..84173).2" Target="10843:[84135..84173).1" />
<Link Source="10843:[84135..84173).11" Target="10843:[82071..82080).1" />
<Link Source="10843:[84135..84173).11" Target="10843:[84135..84173).1" />
<Link Source="10843:[84207..84245).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84207..84245).2" Target="10843:[84207..84245).1" />
<Link Source="10843:[84207..84245).12" Target="10843:[82071..82080).1" />
<Link Source="10843:[84207..84245).12" Target="10843:[84207..84245).1" />
<Link Source="10843:[84279..84317).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84279..84317).2" Target="10843:[84279..84317).1" />
<Link Source="10843:[84279..84317).13" Target="10843:[82071..82080).1" />
<Link Source="10843:[84279..84317).13" Target="10843:[84279..84317).1" />
<Link Source="10843:[83373..84328).2" Target="10843:[83487..83525).1" />
<Link Source="10843:[83373..84328).2" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).3" Target="10843:[83559..83597).1" />
<Link Source="10843:[83373..84328).3" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).4" Target="10843:[83631..83669).1" />
<Link Source="10843:[83373..84328).4" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).5" Target="10843:[83703..83741).1" />
<Link Source="10843:[83373..84328).5" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).6" Target="10843:[83775..83813).1" />
<Link Source="10843:[83373..84328).6" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).7" Target="10843:[83847..83885).1" />
<Link Source="10843:[83373..84328).7" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).8" Target="10843:[83919..83957).1" />
<Link Source="10843:[83373..84328).8" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).9" Target="10843:[83991..84029).1" />
<Link Source="10843:[83373..84328).9" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).10" Target="10843:[84063..84101).1" />
<Link Source="10843:[83373..84328).10" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).11" Target="10843:[84135..84173).1" />
<Link Source="10843:[83373..84328).11" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).12" Target="10843:[84207..84245).1" />
<Link Source="10843:[83373..84328).12" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).13" Target="10843:[84279..84317).1" />
<Link Source="10843:[83373..84328).13" Target="10843:[83373..84328).1" />
<Link Source="10843:[83333..84328).1" Target="10843:[83373..84328).1" />
<Link Source="10845:[900..910).1" Target="10845:[764..789).1" />
<Link Source="10845:[900..910).1" Target="10845:[499..728).2" />
<Link Source="10845:[912..933).1" Target="10845:[791..816).1" />
<Link Source="10845:[912..933).1" Target="10845:[499..728).2" />
<Link Source="10845:[935..953).1" Target="10845:[818..841).1" />
<Link Source="10845:[935..953).1" Target="10845:[499..728).2" />
<Link Source="10845:[955..974).1" Target="10845:[843..878).1" />
<Link Source="10845:[955..974).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).2" Target="10845:[499..728).2" />
<Link Source="10843:[1173..1198).1" Target="10845:[900..910).1" />
<Link Source="10843:[1173..1198).1" Target="10845:[740..997).2" />
<Link Source="10843:[1200..1225).1" Target="10845:[912..933).1" />
<Link Source="10843:[1200..1225).1" Target="10845:[740..997).2" />
<Link Source="10843:[1227..1250).1" Target="10845:[935..953).1" />
<Link Source="10843:[1227..1250).1" Target="10845:[740..997).2" />
<Link Source="10843:[1252..1287).1" Target="10845:[955..974).1" />
<Link Source="10843:[1252..1287).1" Target="10845:[740..997).2" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).1" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).2" />
<Link Source="10843:[734..744).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[734..744).1" Target="10845:[740..997).2" />
<Link Source="10843:[778..799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[778..799).1" Target="10845:[740..997).2" />
<Link Source="10843:[835..853).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[835..853).1" Target="10845:[740..997).2" />
<Link Source="10843:[1113..1134).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1113..1134).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).2" Target="10843:[1173..1198).1" />
<Link Source="10843:[1313..1354).2" Target="10843:[1313..1354).1" />
<Link Source="10843:[1313..1354).2" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).1" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1368..1474).2" Target="10843:[1368..1474).1" />
<Link Source="10843:[1368..1474).2" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).1" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1488..1600).2" Target="10843:[1488..1600).1" />
<Link Source="10843:[1488..1600).2" Target="10845:[740..997).2" />
<Link Source="10843:[1616..1631).1" Target="10843:[1173..1198).1" />
<Link Source="10843:[1616..1631).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1616..1631).1" Target="10845:[740..997).2" />
<Link Source="10843:[1659..1685).1" Target="10843:[1200..1225).1" />
<Link Source="10843:[1659..1685).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1659..1685).1" Target="10845:[740..997).2" />
<Link Source="10843:[1724..1742).1" Target="10843:[1227..1250).1" />
<Link Source="10843:[1724..1742).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1724..1742).1" Target="10845:[740..997).2" />
<Link Source="10843:[1778..1799).1" Target="10843:[1252..1287).1" />
<Link Source="10843:[1778..1799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1778..1799).1" Target="10845:[740..997).2" />
<Link Source="25002:[4395..4432).38" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).38" Target="25002:[4395..4432).35" />
<Link Source="25002:[4395..4432).38" Target="10843:[1616..1631).1" />
<Link Source="25002:[4395..4432).38" Target="10843:[1659..1685).1" />
<Link Source="25002:[4395..4432).38" Target="10843:[1724..1742).1" />
<Link Source="25002:[4395..4432).38" Target="10843:[1778..1799).1" />
<Link Source="25002:[4395..4432).38" Target="28001:[14630..14811).2" />
<Link Source="10076:[5223..5250).10" Target="25002:[4395..4432).38" />
<Link Source="10076:[5223..5250).10" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).10" Target="10076:[4989..5047).1" />
<Link Source="10077:[2398..2415).1" Target="25002:[4395..4432).38" />
<Link Source="10077:[2398..2415).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2362..2496).1" Target="25002:[4395..4432).38" />
<Link Source="10077:[2362..2496).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2449..2481).1" Target="10077:[2398..2415).1" />
<Link Source="10077:[2449..2481).1" Target="25002:[4395..4432).38" />
<Link Source="10077:[2449..2481).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2456..2480).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2877..2892).6" Target="10077:[2449..2481).1" />
<Link Source="10077:[2877..2892).6" Target="10077:[2456..2480).1" />
<Link Source="10077:[2852..2986).6" Target="10077:[2362..2496).1" />
<Link Source="10077:[2852..2986).6" Target="10077:[2456..2480).1" />
<Link Source="10077:[2926..2971).33" Target="10077:[2852..2986).6" />
<Link Source="10077:[2926..2971).33" Target="10077:[2877..2892).6" />
<Link Source="10077:[2926..2971).33" Target="25002:[4395..4432).38" />
<Link Source="10077:[2926..2971).33" Target="10077:[2456..2480).1" />
<Link Source="10077:[15216..15245).1" Target="10077:[2926..2971).33" />
<Link Source="10077:[15216..15245).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15171..15372).1" Target="10077:[2926..2971).33" />
<Link Source="10077:[15171..15372).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15279..15357).1" Target="10077:[15216..15245).1" />
<Link Source="10077:[15279..15357).1" Target="10077:[2926..2971).33" />
<Link Source="10077:[15279..15357).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15286..15310).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[2877..2892).7" Target="10077:[15279..15357).1" />
<Link Source="10077:[2877..2892).7" Target="10077:[15286..15310).1" />
<Link Source="10077:[2852..2986).7" Target="10077:[15171..15372).1" />
<Link Source="10077:[2852..2986).7" Target="10077:[15286..15310).1" />
<Link Source="10077:[2926..2971).36" Target="10077:[2852..2986).7" />
<Link Source="10077:[2926..2971).36" Target="10077:[2877..2892).7" />
<Link Source="10077:[2926..2971).36" Target="10077:[2926..2971).33" />
<Link Source="10077:[2926..2971).36" Target="10077:[15286..15310).1" />
<Link Source="10077:[34685..34715).2" Target="10077:[15286..15310).1" />
<Link Source="10077:[31258..31297).2" Target="10077:[32474..32502).2" />
<Link Source="10077:[31258..31297).2" Target="10077:[34685..34715).2" />
<Link Source="10077:[31490..32331).13" Target="10077:[34685..34715).2" />
<Link Source="10077:[32358..32401).2" Target="10077:[34685..34715).2" />
<Link Source="10077:[32567..32606).3" Target="10077:[32358..32401).2" />
<Link Source="10077:[44231..44317).41" Target="10077:[2926..2971).36" />
<Link Source="10077:[44231..44317).41" Target="10077:[32567..32606).3" />
<Link Source="10077:[44231..44317).43" Target="10077:[32567..32606).3" />
<Link Source="10077:[44335..44374).23" Target="10077:[32567..32606).3" />
<Link Source="10077:[44342..44373).6" Target="10077:[32567..32606).3" />
<Link Source="10076:[853..1034).6" Target="10077:[44335..44374).23" />
<Link Source="10076:[853..1034).6" Target="10077:[44342..44373).6" />
<Link Source="10077:[32557..32607).11" Target="10077:[44335..44374).23" />
<Link Source="10077:[32557..32607).11" Target="10077:[32358..32401).2" />
<Link Source="10077:[32627..32647).3" Target="10077:[32358..32401).2" />
<Link Source="10077:[32670..32681).3" Target="10077:[32358..32401).2" />
<Link Source="10077:[32665..34501).20" Target="10077:[32557..32607).11" />
<Link Source="10077:[32665..34501).20" Target="10077:[32358..32401).2" />
<Link Source="10077:[32665..34501).21" Target="10077:[32627..32647).3" />
<Link Source="10077:[32665..34501).21" Target="10077:[32358..32401).2" />
<Link Source="10077:[32665..34501).23" Target="10077:[32358..32401).2" />
<Link Source="10077:[44954..44972).3" Target="10077:[2926..2971).36" />
<Link Source="10077:[44966..44971).67" Target="10077:[44954..44972).3" />
<Link Source="10077:[44966..44971).67" Target="10077:[2926..2971).36" />
<Link Source="10077:[39421..39431).3" Target="10077:[2926..2971).36" />
<Link Source="10077:[1641..1732).3" Target="10077:[2926..2971).36" />
<Link Source="10077:[1641..1732).3" Target="10077:[39421..39431).3" />
<Link Source="10077:[1685..1713).3" Target="10077:[1641..1732).3" />
<Link Source="10077:[1685..1713).3" Target="10077:[2926..2971).36" />
<Link Source="10077:[1685..1713).3" Target="10077:[39421..39431).3" />
<Link Source="10077:[39398..39590).13" Target="10077:[1685..1713).3" />
<Link Source="10077:[39398..39590).13" Target="10077:[2926..2971).36" />
<Link Source="10077:[39398..39590).14" Target="10077:[2926..2971).36" />
<Link Source="10077:[44231..44317).49" Target="10077:[2926..2971).36" />
<Link Source="10286:[1317..1350).17" Target="10077:[2926..2971).36" />
<Link Source="10346:[858..868).5" Target="10077:[2926..2971).36" />
<Link Source="10346:[1572..1612).9" Target="10077:[2926..2971).36" />
<Link Source="10346:[1626..1666).9" Target="10077:[2926..2971).36" />
<Link Source="10346:[2691..2750).11" Target="10077:[2926..2971).36" />
<Link Source="10077:[34064..34272).7" Target="10077:[2926..2971).36" />
<Link Source="10077:[15286..15356).1" Target="10077:[2456..2480).1" />
<Link Source="10307:[3496..3521).5" Target="10077:[2926..2971).36" />
<Link Source="10307:[3496..3521).5" Target="10077:[15286..15356).1" />
<Link Source="10307:[3452..3756).5" Target="10077:[2926..2971).36" />
<Link Source="10307:[3452..3756).5" Target="10077:[15286..15356).1" />
<Link Source="10307:[3547..3745).38" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).38" Target="10077:[15286..15356).1" />
<Link Source="10307:[3555..3600).5" Target="10077:[15286..15356).1" />
<Link Source="10298:[494..511).12" Target="10307:[3547..3745).38" />
<Link Source="10298:[494..511).12" Target="10307:[3555..3600).5" />
<Link Source="10286:[1688..1781).7" Target="10307:[3452..3756).5" />
<Link Source="10286:[1688..1781).7" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).13" Target="10286:[1688..1781).7" />
<Link Source="10298:[471..492).13" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).7" Target="10307:[3452..3756).5" />
<Link Source="10286:[1820..1963).7" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).14" Target="10286:[1820..1963).7" />
<Link Source="10298:[471..492).14" Target="10286:[1840..1888).1" />
<Link Source="10319:[21140..21179).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[21140..21179).1" Target="10307:[3452..3756).5" />
<Link Source="10319:[21205..21314).1" Target="10319:[21140..21179).1" />
<Link Source="10319:[21205..21314).1" Target="10307:[3452..3756).5" />
<Link Source="10319:[21205..21314).3" Target="10319:[20027..20052).1" />
<Link Source="10319:[21205..21314).3" Target="10307:[3452..3756).5" />
<Link Source="10319:[21205..21314).4" Target="10319:[20054..20093).1" />
<Link Source="10319:[21205..21314).4" Target="10307:[3452..3756).5" />
<Link Source="10319:[21205..21314).5" Target="10319:[20095..20126).1" />
<Link Source="10319:[21205..21314).5" Target="10307:[3452..3756).5" />
<Link Source="10319:[21212..21313).1" Target="10307:[3452..3756).5" />
<Link Source="10319:[71214..71239).1" Target="10319:[21205..21314).1" />
<Link Source="10319:[71214..71239).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71254..71280).1" Target="10319:[21205..21314).1" />
<Link Source="10319:[71254..71280).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71295..71320).1" Target="10319:[21205..21314).3" />
<Link Source="10319:[71295..71320).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71335..71374).1" Target="10319:[21205..21314).4" />
<Link Source="10319:[71335..71374).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71389..71420).1" Target="10319:[21205..21314).5" />
<Link Source="10319:[71389..71420).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71130..73408).1" Target="10319:[19916..30085).1" />
<Link Source="10319:[71130..73408).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71446..71583).1" Target="10319:[71214..71239).1" />
<Link Source="10319:[71446..71583).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71446..71583).2" Target="10319:[71295..71320).1" />
<Link Source="10319:[71446..71583).2" Target="10319:[21212..21313).1" />
<Link Source="10319:[71446..71583).3" Target="10319:[71335..71374).1" />
<Link Source="10319:[71446..71583).3" Target="10319:[21212..21313).1" />
<Link Source="10319:[71446..71583).4" Target="10319:[21212..21313).1" />
<Link Source="10319:[71457..71560).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[18431..18454).1" Target="10319:[71446..71583).1" />
<Link Source="10319:[18431..18454).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18456..18481).1" Target="10319:[71446..71583).2" />
<Link Source="10319:[18456..18481).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18483..18522).1" Target="10319:[71446..71583).3" />
<Link Source="10319:[18483..18522).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18524..18555).1" Target="10319:[71446..71583).4" />
<Link Source="10319:[18524..18555).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18300..18837).1" Target="10319:[71130..73408).1" />
<Link Source="10319:[18300..18837).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18581..18696).1" Target="10319:[18431..18454).1" />
<Link Source="10319:[18581..18696).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18581..18696).2" Target="10319:[18456..18481).1" />
<Link Source="10319:[18581..18696).2" Target="10319:[71457..71560).1" />
<Link Source="10319:[18581..18696).3" Target="10319:[18483..18522).1" />
<Link Source="10319:[18581..18696).3" Target="10319:[71457..71560).1" />
<Link Source="10319:[18581..18696).4" Target="10319:[18524..18555).1" />
<Link Source="10319:[18581..18696).4" Target="10319:[71457..71560).1" />
<Link Source="10319:[18594..18695).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[20002..20025).3" Target="10319:[18581..18696).1" />
<Link Source="10319:[20002..20025).3" Target="10319:[18594..18695).1" />
<Link Source="10319:[20027..20052).3" Target="10319:[18581..18696).2" />
<Link Source="10319:[20027..20052).3" Target="10319:[18594..18695).1" />
<Link Source="10319:[20054..20093).3" Target="10319:[18581..18696).3" />
<Link Source="10319:[20054..20093).3" Target="10319:[18594..18695).1" />
<Link Source="10319:[20095..20126).3" Target="10319:[18581..18696).4" />
<Link Source="10319:[20095..20126).3" Target="10319:[18594..18695).1" />
<Link Source="10319:[19916..30085).3" Target="10319:[18300..18837).1" />
<Link Source="10319:[19916..30085).3" Target="10319:[18594..18695).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20002..20025).3" />
<Link Source="10319:[20508..20675).2" Target="10319:[20027..20052).3" />
<Link Source="10319:[20508..20675).2" Target="10319:[20002..20025).3" />
<Link Source="10319:[20508..20675).3" Target="10319:[20054..20093).3" />
<Link Source="10319:[20508..20675).3" Target="10319:[20002..20025).3" />
<Link Source="10319:[20508..20675).4" Target="10319:[20095..20126).3" />
<Link Source="10319:[20508..20675).4" Target="10319:[20002..20025).3" />
<Link Source="10319:[20515..20674).1" Target="10319:[20002..20025).3" />
<Link Source="10319:[41849..41874).1" Target="10319:[20508..20675).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41889..41914).1" Target="10319:[20508..20675).2" />
<Link Source="10319:[41889..41914).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41929..41968).1" Target="10319:[20508..20675).3" />
<Link Source="10319:[41929..41968).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41983..42014).1" Target="10319:[20508..20675).4" />
<Link Source="10319:[41983..42014).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42029..42063).1" Target="10319:[20508..20675).1" />
<Link Source="10319:[42029..42063).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[19916..30085).3" />
<Link Source="10319:[41732..45579).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20002..20025).3" />
<Link Source="10319:[42089..42141).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[42089..42141).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20002..20025).3" />
<Link Source="10319:[42821..42938).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[42839..42937).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42821..42938).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63885..63919).1" Target="10319:[42821..42938).2" />
<Link Source="10319:[63885..63919).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63934..63945).1" Target="10319:[42821..42938).3" />
<Link Source="10319:[63934..63945).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63960..63969).1" Target="10319:[42821..42938).4" />
<Link Source="10319:[63960..63969).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63984..64009).1" Target="10319:[42821..42938).6" />
<Link Source="10319:[63984..64009).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[63885..63919).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[64035..64445).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[42839..42937).1" />
<Link Source="10319:[64461..64473).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[64461..64473).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[42821..42938).7" />
<Link Source="10319:[42952..43079).2" Target="10319:[42952..43079).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[20515..20674).1" />
<Link Source="10354:[10975..11012).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10975..11012).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).3" Target="10354:[10826..10838).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[11026..11097).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[10809..10838).1" Target="10354:[11142..11154).1" />
<Link Source="10319:[43108..43134).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11244..11285).1" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[11026..11097).1" />
<Link Source="10354:[11244..11285).2" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).3" Target="10319:[43108..43134).1" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).2" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).1" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3068..3073).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3068..3073).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3200..3211).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3200..3211).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3319..3325).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3319..3325).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3380..3385).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3380..3385).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3474..3479).1" Target="10354:[3419..3448).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3501..3506).1" Target="EXTERNAL" />
<Link Source="10354:[3501..3506).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3501..3506).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3587).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3557).1" Target="10354:[3546..3587).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3615).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3607).1" Target="10354:[3601..3615).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).2" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3501..3506).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3557).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3601..3607).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3474..3479).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3587).1" />
<Link Source="10354:[11244..11285).4" Target="10319:[43108..43134).1" />
<Link Source="10354:[11312..11328).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[3684..3818).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3684..3818).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).1" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).2" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).3" Target="10354:[3720..3803).2" />
<Link Source="10354:[3720..3803).3" Target="10354:[11312..11328).1" />
<Link Source="10354:[11299..11330).1" Target="10354:[3720..3803).1" />
<Link Source="10354:[11299..11330).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11344..11360).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[11344..11360).1" Target="10319:[43108..43134).1" />
<Link Source="10319:[43095..43135).1" Target="10354:[11344..11360).1" />
<Link Source="10319:[43095..43135).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20002..20025).3" />
<Link Source="10319:[43149..43246).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43173..43245).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43149..43246).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50330..50355).1" Target="10319:[43149..43246).2" />
<Link Source="10319:[50330..50355).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[50313..50328).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[51282..51325).1" Target="EXTERNAL" />
<Link Source="10319:[51282..51325).1" Target="10319:[50381..51340).1" />
<Link Source="10319:[43262..43312).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[41929..41968).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[51282..51325).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[43262..43312).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43489).1" Target="10319:[20515..20674).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43490).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43490).2" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43490).3" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43490).6" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43490).7" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43490).10" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[942..1750).1" Target="10319:[41732..45579).1" />
<Link Source="10312:[942..1750).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1322..1739).1" Target="10312:[1186..1207).1" />
<Link Source="10312:[1322..1739).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1326..1357).1" Target="10319:[43326..43489).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1322..1739).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1326..1357).1" />
<Link Source="10353:[7556..7642).1" Target="10353:[7504..7530).1" />
<Link Source="10353:[7556..7642).1" Target="EXTERNAL" />
<Link Source="10353:[7556..7642).1" Target="10312:[1326..1357).1" />
<Link Source="10312:[1585..1724).1" Target="10312:[994..1013).1" />
<Link Source="10312:[1585..1724).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).2" Target="10312:[1028..1062).1" />
<Link Source="10312:[1585..1724).2" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).3" Target="10312:[1077..1093).1" />
<Link Source="10312:[1585..1724).3" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).4" Target="10312:[1108..1117).1" />
<Link Source="10312:[1585..1724).4" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).5" Target="10312:[1132..1171).1" />
<Link Source="10312:[1585..1724).5" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).6" Target="10312:[1186..1207).1" />
<Link Source="10312:[1585..1724).6" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).7" Target="10312:[1222..1235).1" />
<Link Source="10312:[1585..1724).7" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).8" Target="10312:[1250..1296).1" />
<Link Source="10312:[1585..1724).8" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1723).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1724).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1724).2" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1724).3" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1724).4" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1724).5" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1724).6" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1724).7" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1724).8" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[942..1750).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[5755..5789).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[6044..6433).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[1585..1723).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[5721..5740).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).2" Target="10312:[5804..5815).1" />
<Link Source="10312:[6110..6221).2" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).3" Target="10312:[5830..5839).1" />
<Link Source="10312:[6110..6221).3" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).4" Target="10312:[5854..5893).1" />
<Link Source="10312:[6110..6221).4" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).5" Target="10312:[5908..5929).1" />
<Link Source="10312:[6110..6221).5" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).6" Target="10312:[5944..5957).1" />
<Link Source="10312:[6110..6221).6" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).7" Target="10312:[5972..6018).1" />
<Link Source="10312:[6110..6221).7" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6220).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6221).1" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6221).2" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6221).3" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6221).4" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6221).5" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6221).6" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6221).7" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[5663..6444).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3905..3919).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).9" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).9" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).9" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).9" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).10" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).11" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).11" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).11" Target="10354:[3720..3803).10" />
<Link Source="10354:[3720..3803).11" Target="10312:[3905..3919).1" />
<Link Source="10312:[3892..3921).1" Target="10354:[3720..3803).9" />
<Link Source="10312:[3892..3921).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3948..3966).1" Target="10312:[6110..6220).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3935..3968).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4750..4847).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4750..4847).1" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4863..5000).1" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5079..5183).1" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[5079..5183).1" />
<Link Source="10353:[5197..5323).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).1" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[4698..4724).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[5485..5759).1" />
<Link Source="10353:[5485..5759).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).1" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[4698..4724).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[5775..5979).1" />
<Link Source="10353:[5775..5979).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5995..6029).1" Target="10353:[5775..5979).3" />
<Link Source="10353:[5995..6029).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6002..6028).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[5995..6029).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6343..6358).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6384..6410).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6002..6028).1" />
<Link Source="10312:[3984..4005).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[3645..5112).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).2" Target="10312:[6110..6220).1" />
<Link Source="10312:[4060..4080).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[3696..3715).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4962..4966).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4919..5009).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[4058..4122).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[4094..4107).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4955..4994).1" Target="10354:[4094..4107).1" />
<Link Source="10354:[4955..4994).1" Target="10312:[4060..4080).1" />
<Link Source="10312:[4019..5073).4" Target="10354:[4955..4994).1" />
<Link Source="10312:[4019..5073).4" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).4" />
<Link Source="10312:[4019..5073).5" Target="10312:[6110..6220).1" />
<Link Source="10312:[4134..4806).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4134..4806).2" Target="10312:[3984..4005).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4134..4806).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4019..5073).5" />
<Link Source="10312:[4534..4658).1" Target="10312:[3696..3715).1" />
<Link Source="10312:[4534..4658).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).2" Target="10312:[3717..3728).1" />
<Link Source="10312:[4534..4658).2" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).3" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).4" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).4" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).5" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).5" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).6" Target="10312:[3645..5112).1" />
<Link Source="10312:[4534..4658).6" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).7" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).7" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).8" Target="10312:[3820..3866).1" />
<Link Source="10312:[4534..4658).8" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4657).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4658).1" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4658).2" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4658).3" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4658).4" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4658).5" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4658).6" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4658).7" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4658).8" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4019..5073).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[4534..4658).9" Target="10312:[4134..4806).2" />
<Link Source="10312:[4685..4699).1" Target="10312:[4134..4806).2" />
<Link Source="10354:[3684..3818).3" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).3" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).17" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).17" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).17" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).17" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).18" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).19" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).19" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).19" Target="10354:[3720..3803).18" />
<Link Source="10354:[3720..3803).19" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).1" Target="10354:[3720..3803).17" />
<Link Source="10312:[4680..4787).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4826..5058).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).1" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4826..5058).2" Target="10312:[4019..5073).5" />
<Link Source="10346:[10629..10648).1" Target="10312:[4534..4658).1" />
<Link Source="10346:[10629..10648).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10650..10661).1" Target="10312:[4534..4658).2" />
<Link Source="10346:[10650..10661).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10663..10672).1" Target="10312:[4534..4658).3" />
<Link Source="10346:[10663..10672).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10674..10713).1" Target="10312:[4534..4658).4" />
<Link Source="10346:[10674..10713).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10715..10736).1" Target="10312:[4534..4658).5" />
<Link Source="10346:[10715..10736).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10738..10759).1" Target="10312:[4534..4658).6" />
<Link Source="10346:[10738..10759).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10761..10774).1" Target="10312:[4534..4658).7" />
<Link Source="10346:[10761..10774).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10776..10822).1" Target="10312:[5335..5381).1" />
<Link Source="10346:[10776..10822).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10564..12467).1" Target="10312:[4019..5073).5" />
<Link Source="10346:[10564..12467).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10861..10875).1" Target="10312:[4534..4657).1" />
<Link Source="10354:[3684..3818).4" Target="10346:[10629..10648).1" />
<Link Source="10354:[3684..3818).4" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).25" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).25" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).25" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).25" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).26" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).27" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[3720..3803).26" />
<Link Source="10354:[3720..3803).27" Target="10346:[10861..10875).1" />
<Link Source="10346:[10848..10877).1" Target="10354:[3720..3803).25" />
<Link Source="10346:[10848..10877).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10897..10914).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[7666..7775).1" Target="10346:[10564..12467).1" />
<Link Source="10346:[7666..7775).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[7672..7773).1" Target="10346:[7666..7775).1" />
<Link Source="10346:[7672..7773).1" Target="10319:[50381..51340).1" />
<Link Source="10346:[7672..7773).1" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[10893..11127).1" Target="10346:[7672..7773).1" />
<Link Source="10346:[10893..11127).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[11143..11188).1" Target="10346:[10674..10713).1" />
<Link Source="10346:[11143..11188).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[11157..11187).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[3460..3499).1" Target="10346:[11143..11188).1" />
<Link Source="10346:[3460..3499).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3423..3863).1" Target="10346:[10564..12467).1" />
<Link Source="10346:[3423..3863).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3525..3638).2" Target="10319:[50381..51340).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[3525..3638).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3654..3816).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3654..3816).2" Target="10319:[50381..51340).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[3654..3816).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3832..3852).1" Target="10346:[3423..3863).1" />
<Link Source="10346:[3832..3852).1" Target="10319:[50381..51340).1" />
<Link Source="10346:[3832..3852).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[11143..11188).2" Target="10346:[3832..3852).1" />
<Link Source="10346:[11143..11188).2" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).1" Target="10346:[10715..10736).1" />
<Link Source="10346:[11258..12246).1" Target="EXTERNAL" />
<Link Source="10346:[11258..12246).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).2" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).5" Target="10346:[10564..12467).1" />
<Link Source="10346:[11258..12246).5" Target="10319:[50381..51340).1" />
<Link Source="10346:[11258..12246).5" Target="10346:[11258..12246).2" />
<Link Source="10346:[11258..12246).5" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).1" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).5" />
<Link Source="10346:[11258..12246).6" Target="10312:[4534..4657).1" />
<Link Source="10346:[11369..11508).1" Target="10346:[10629..10648).1" />
<Link Source="10346:[11369..11508).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).2" Target="10346:[10564..12467).1" />
<Link Source="10346:[11369..11508).2" Target="10319:[50381..51340).1" />
<Link Source="10346:[11369..11508).2" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[11369..11508).3" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).4" Target="10346:[10663..10672).1" />
<Link Source="10346:[11369..11508).4" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).5" Target="10346:[10674..10713).1" />
<Link Source="10346:[11369..11508).5" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).6" Target="10346:[10715..10736).1" />
<Link Source="10346:[11369..11508).6" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).7" Target="10346:[10738..10759).1" />
<Link Source="10346:[11369..11508).7" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).8" Target="10346:[10761..10774).1" />
<Link Source="10346:[11369..11508).8" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).9" Target="10346:[10776..10822).1" />
<Link Source="10346:[11369..11508).9" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11507).1" Target="10346:[11258..12246).6" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11508).1" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11508).2" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11508).3" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11508).4" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11508).5" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11508).6" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11508).7" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11508).8" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11508).9" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[10564..12467).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7903..7936).1" Target="10312:[7770..7791).1" />
<Link Source="10312:[7903..7936).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7916..7934).1" Target="10346:[11369..11507).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7903..7936).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[4750..4847).3" Target="10353:[4698..4724).2" />
<Link Source="10353:[4750..4847).3" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).5" Target="10353:[4698..4724).2" />
<Link Source="10353:[4863..5000).5" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).6" Target="10312:[7916..7934).1" />
<Link Source="10353:[5079..5183).3" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[5197..5323).4" Target="10353:[4698..4724).2" />
<Link Source="10353:[5197..5323).4" Target="10353:[5079..5183).3" />
<Link Source="10353:[5197..5323).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).7" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).8" Target="10353:[4698..4724).2" />
<Link Source="10353:[5485..5759).8" Target="10353:[5485..5759).7" />
<Link Source="10353:[5485..5759).8" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).9" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).5" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).7" Target="10353:[4698..4724).2" />
<Link Source="10353:[5775..5979).7" Target="10353:[5775..5979).5" />
<Link Source="10353:[5775..5979).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5995..6029).4" Target="10353:[5775..5979).7" />
<Link Source="10353:[5995..6029).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[6002..6028).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[6343..6358).2" Target="10353:[5995..6029).4" />
<Link Source="10353:[6343..6358).2" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).7" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6343..6358).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6384..6410).7" />
<Link Source="10353:[6384..6410).8" Target="10353:[6002..6028).2" />
<Link Source="10312:[7952..7977).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7718..7727).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7952..7977).1" />
<Link Source="10312:[7952..7977).2" Target="10346:[11369..11507).1" />
<Link Source="10312:[7991..8409).1" Target="10312:[7673..7703).1" />
<Link Source="10312:[7991..8409).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[7991..8409).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[8247..8394).1" Target="10312:[7652..7671).1" />
<Link Source="10312:[8247..8394).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).2" Target="10312:[7673..7703).1" />
<Link Source="10312:[8247..8394).2" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).3" Target="10312:[7705..7716).1" />
<Link Source="10312:[8247..8394).3" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).4" Target="10312:[7718..7727).1" />
<Link Source="10312:[8247..8394).4" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).5" Target="10312:[7729..7768).1" />
<Link Source="10312:[8247..8394).5" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).6" Target="10312:[7770..7791).1" />
<Link Source="10312:[8247..8394).6" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).7" Target="10312:[7793..7814).1" />
<Link Source="10312:[8247..8394).7" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).8" Target="10312:[7816..7829).1" />
<Link Source="10312:[8247..8394).8" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).9" Target="10312:[7831..7877).1" />
<Link Source="10312:[8247..8394).9" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8393).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[8543..8562).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8543..8562).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8564..8579).1" Target="10312:[8247..8394).2" />
<Link Source="10312:[8564..8579).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8581..8592).1" Target="10312:[8247..8394).3" />
<Link Source="10312:[8581..8592).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8594..8603).1" Target="10312:[8247..8394).4" />
<Link Source="10312:[8594..8603).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8605..8644).1" Target="10312:[8247..8394).5" />
<Link Source="10312:[8605..8644).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8646..8667).1" Target="10312:[8247..8394).6" />
<Link Source="10312:[8646..8667).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8669..8690).1" Target="10312:[8247..8394).7" />
<Link Source="10312:[8669..8690).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8692..8705).1" Target="10312:[8247..8394).8" />
<Link Source="10312:[8692..8705).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8707..8753).1" Target="10312:[8247..8394).9" />
<Link Source="10312:[8707..8753).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8508..10685).1" Target="10312:[7615..8420).1" />
<Link Source="10312:[8508..10685).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8779..10524).1" Target="10312:[8564..8579).1" />
<Link Source="10312:[8779..10524).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[8779..10524).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[9577..9709).1" Target="10312:[8543..8562).1" />
<Link Source="10312:[9577..9709).1" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).2" Target="10312:[8564..8579).1" />
<Link Source="10312:[9577..9709).2" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).3" Target="10312:[8581..8592).1" />
<Link Source="10312:[9577..9709).3" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).4" Target="10312:[8594..8603).1" />
<Link Source="10312:[9577..9709).4" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).5" Target="10312:[8605..8644).1" />
<Link Source="10312:[9577..9709).5" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).6" Target="10312:[8646..8667).1" />
<Link Source="10312:[9577..9709).6" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).7" Target="10312:[8669..8690).1" />
<Link Source="10312:[9577..9709).7" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).8" Target="10312:[8692..8705).1" />
<Link Source="10312:[9577..9709).8" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).9" Target="10312:[8707..8753).1" />
<Link Source="10312:[9577..9709).9" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9708).1" Target="10312:[8779..10524).1" />
<Link Source="10312:[34707..34726).1" Target="10312:[9577..9709).1" />
<Link Source="10312:[34707..34726).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34741..34756).1" Target="10312:[9577..9709).2" />
<Link Source="10312:[34741..34756).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34771..34782).1" Target="10312:[9577..9709).3" />
<Link Source="10312:[34771..34782).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34797..34806).1" Target="10312:[9577..9709).4" />
<Link Source="10312:[34797..34806).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34821..34860).1" Target="10312:[9577..9709).5" />
<Link Source="10312:[34821..34860).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34875..34896).1" Target="10312:[9577..9709).6" />
<Link Source="10312:[34875..34896).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34911..34932).1" Target="10312:[9577..9709).7" />
<Link Source="10312:[34911..34932).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34947..34960).1" Target="10312:[9577..9709).8" />
<Link Source="10312:[34947..34960).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34975..35021).1" Target="10312:[9577..9709).9" />
<Link Source="10312:[34975..35021).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34659..35191).1" Target="10312:[8508..10685).1" />
<Link Source="10312:[34659..35191).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).1" Target="10312:[34707..34726).1" />
<Link Source="10312:[35047..35180).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).2" Target="10312:[34741..34756).1" />
<Link Source="10312:[35047..35180).2" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).3" Target="10312:[34771..34782).1" />
<Link Source="10312:[35047..35180).3" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).4" Target="10312:[34797..34806).1" />
<Link Source="10312:[35047..35180).4" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).5" Target="10312:[34821..34860).1" />
<Link Source="10312:[35047..35180).5" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).6" Target="10312:[34875..34896).1" />
<Link Source="10312:[35047..35180).6" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).7" Target="10312:[34911..34932).1" />
<Link Source="10312:[35047..35180).7" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).9" Target="10312:[34947..34960).1" />
<Link Source="10312:[35047..35180).9" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).10" Target="10312:[34975..35021).1" />
<Link Source="10312:[35047..35180).10" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35179).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35313..35332).1" Target="10312:[35047..35180).1" />
<Link Source="10312:[35313..35332).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35347..35362).1" Target="10312:[35047..35180).2" />
<Link Source="10312:[35347..35362).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35377..35388).1" Target="10312:[35047..35180).3" />
<Link Source="10312:[35377..35388).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35403..35412).1" Target="10312:[35047..35180).4" />
<Link Source="10312:[35403..35412).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35427..35466).1" Target="10312:[35047..35180).5" />
<Link Source="10312:[35427..35466).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35481..35502).1" Target="10312:[35047..35180).6" />
<Link Source="10312:[35481..35502).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35517..35538).1" Target="10312:[35047..35180).7" />
<Link Source="10312:[35517..35538).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35553..35581).1" Target="10312:[35047..35180).2" />
<Link Source="10312:[35553..35581).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35596..35609).1" Target="10312:[35047..35180).9" />
<Link Source="10312:[35596..35609).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35624..35670).1" Target="10312:[35047..35180).10" />
<Link Source="10312:[35624..35670).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35265..38808).1" Target="10312:[34659..35191).1" />
<Link Source="10312:[35265..38808).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35696..35731).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35347..35362).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35696..35731).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35047..35179).1" />
<Link Source="10312:[35745..35826).1" Target="10312:[35347..35362).1" />
<Link Source="10312:[35745..35826).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35842..35872).1" Target="10312:[35347..35362).1" />
<Link Source="10312:[35842..35872).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35898..35924).1" Target="10312:[35047..35179).1" />
<Link Source="10354:[3068..3073).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3200..3211).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3319..3325).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3380..3385).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[11312..11328).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3684..3818).5" Target="10312:[35898..35924).1" />
<Link Source="10354:[3684..3818).5" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).33" Target="10354:[3684..3818).5" />
<Link Source="10354:[3720..3803).33" Target="10312:[35898..35924).1" />
<Link Source="10354:[3720..3803).33" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).33" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).34" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).35" Target="10354:[3684..3818).5" />
<Link Source="10354:[3720..3803).35" Target="10312:[35898..35924).1" />
<Link Source="10354:[3720..3803).35" Target="10354:[3720..3803).34" />
<Link Source="10354:[3720..3803).35" Target="10354:[11312..11328).2" />
<Link Source="10354:[11299..11330).4" Target="10354:[3720..3803).33" />
<Link Source="10354:[11299..11330).4" Target="10312:[35898..35924).1" />
<Link Source="10312:[35888..35925).1" Target="10312:[35898..35924).1" />
<Link Source="10312:[35888..35925).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35939..35985).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35999..38740).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35842..35872).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35999..38740).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35047..35179).1" />
<Link Source="10312:[36067..36078).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[3841..3991).1" Target="10312:[35888..35925).1" />
<Link Source="10354:[3841..3991).1" Target="10312:[36067..36078).1" />
<Link Source="10354:[3887..3892).1" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3887..3892).1" Target="10312:[36067..36078).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3932..3952).1" Target="10312:[35898..35924).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3887..3892).1" />
<Link Source="10354:[3932..3952).1" Target="10312:[36067..36078).1" />
<Link Source="10354:[3966..3980).1" Target="10312:[36067..36078).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3966..3980).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3966..3972).1" Target="10312:[36067..36078).1" />
<Link Source="10312:[36067..36079).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).1" Target="10312:[35888..35925).1" />
<Link Source="10312:[36097..36258).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).2" Target="10312:[35842..35872).1" />
<Link Source="10312:[36097..36258).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).3" Target="10312:[35377..35388).1" />
<Link Source="10312:[36097..36258).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).4" Target="10312:[35403..35412).1" />
<Link Source="10312:[36097..36258).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).5" Target="10312:[35481..35502).1" />
<Link Source="10312:[36097..36258).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).6" Target="10312:[35517..35538).1" />
<Link Source="10312:[36097..36258).6" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).7" Target="10312:[35553..35581).1" />
<Link Source="10312:[36097..36258).7" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).8" Target="10312:[35596..35609).1" />
<Link Source="10312:[36097..36258).8" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).9" Target="10312:[35624..35670).1" />
<Link Source="10312:[36097..36258).9" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).10" Target="10312:[35427..35466).1" />
<Link Source="10312:[36097..36258).10" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36257).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[33656..33675).1" Target="10312:[36097..36258).1" />
<Link Source="10312:[33656..33675).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33677..33692).1" Target="10312:[36097..36258).2" />
<Link Source="10312:[33677..33692).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33694..33705).1" Target="10312:[36097..36258).3" />
<Link Source="10312:[33694..33705).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33707..33716).1" Target="10312:[36097..36258).4" />
<Link Source="10312:[33707..33716).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33731..33752).1" Target="10312:[36097..36258).5" />
<Link Source="10312:[33731..33752).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33754..33775).1" Target="10312:[36097..36258).6" />
<Link Source="10312:[33754..33775).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33777..33805).1" Target="10312:[36097..36258).7" />
<Link Source="10312:[33777..33805).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33807..33820).1" Target="10312:[36097..36258).8" />
<Link Source="10312:[33807..33820).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33822..33868).1" Target="10312:[36097..36258).9" />
<Link Source="10312:[33822..33868).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33870..33909).1" Target="10312:[36097..36258).10" />
<Link Source="10312:[33870..33909).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).1" Target="10312:[33677..33692).1" />
<Link Source="10312:[33935..34006).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).2" Target="10312:[33694..33705).1" />
<Link Source="10312:[33935..34006).2" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).3" Target="10312:[33731..33752).1" />
<Link Source="10312:[33935..34006).3" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).4" Target="10312:[33754..33775).1" />
<Link Source="10312:[33935..34006).4" Target="10312:[36097..36257).1" />
<Link Source="10312:[33949..34005).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[33935..34006).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[33949..34005).1" />
<Link Source="10312:[61572..61583).1" Target="10312:[33935..34006).2" />
<Link Source="10312:[61572..61583).1" Target="10312:[33949..34005).1" />
<Link Source="10312:[61585..61606).1" Target="10312:[33935..34006).3" />
<Link Source="10312:[61585..61606).1" Target="10312:[33949..34005).1" />
<Link Source="10312:[61608..61629).1" Target="10312:[33935..34006).4" />
<Link Source="10312:[61608..61629).1" Target="10312:[33949..34005).1" />
<Link Source="10312:[61655..62327).1" Target="10312:[61585..61606).1" />
<Link Source="10312:[61655..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61655..62327).1" Target="10312:[33949..34005).1" />
<Link Source="10312:[61655..62327).2" Target="10312:[33949..34005).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61655..62327).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61540..61570).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[33949..34005).1" />
<Link Source="10312:[61771..61840).1" Target="10312:[61572..61583).1" />
<Link Source="10312:[61771..61840).1" Target="10312:[61655..62327).4" />
<Link Source="10312:[61771..61840).2" Target="10312:[61540..61570).1" />
<Link Source="10312:[61771..61840).2" Target="10312:[61771..61840).1" />
<Link Source="10312:[61771..61840).2" Target="10312:[35745..35826).1" />
<Link Source="10312:[61771..61840).2" Target="10312:[61655..62327).4" />
<Link Source="10312:[34022..34574).1" Target="10312:[61771..61840).2" />
<Link Source="10312:[34022..34574).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[36097..36258).11" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).1" Target="10312:[35313..35332).1" />
<Link Source="10312:[36278..36360).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).2" Target="10312:[35888..35925).1" />
<Link Source="10312:[36278..36360).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).3" Target="10312:[35427..35466).1" />
<Link Source="10312:[36278..36360).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).4" Target="10312:[33822..33868).1" />
<Link Source="10312:[36278..36360).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).1" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).3" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).4" />
<Link Source="10312:[36278..36360).5" Target="10354:[3932..3952).1" />
<Link Source="10312:[36278..36360).5" Target="10354:[3966..3972).1" />
<Link Source="10312:[36278..36360).5" Target="10312:[61771..61840).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).6" Target="10312:[35999..38740).2" />
<Link Source="10354:[9012..9030).1" Target="10312:[36278..36360).5" />
<Link Source="10354:[9012..9030).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[8981..9152).1" Target="10312:[36278..36360).5" />
<Link Source="10354:[8981..9152).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[9060..9070).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[4058..4122).4" Target="10354:[9012..9030).1" />
<Link Source="10354:[4058..4122).4" Target="10354:[9060..9070).1" />
<Link Source="10354:[9056..9141).1" Target="10354:[4058..4122).4" />
<Link Source="10354:[9056..9141).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[9073..9077).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[4058..4122).5" Target="10354:[8981..9152).1" />
<Link Source="10354:[4058..4122).5" Target="10354:[9073..9077).1" />
<Link Source="10354:[9056..9141).2" Target="10354:[4058..4122).5" />
<Link Source="10354:[9056..9141).2" Target="10312:[36278..36360).6" />
<Link Source="10354:[9056..9141).3" Target="10354:[9056..9141).1" />
<Link Source="10354:[9056..9141).3" Target="10354:[9056..9141).2" />
<Link Source="10354:[9056..9141).3" Target="10312:[36278..36360).6" />
<Link Source="10312:[36566..36625).1" Target="10312:[35842..35872).1" />
<Link Source="10312:[36566..36625).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36643..36855).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36643..36855).2" Target="10312:[36566..36625).1" />
<Link Source="10312:[36643..36855).2" Target="10312:[36278..36360).5" />
<Link Source="10312:[36643..36855).2" Target="10312:[36643..36855).1" />
<Link Source="10312:[36643..36855).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[37061..37078).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[4919..5009).4" Target="10312:[35888..35925).1" />
<Link Source="10354:[4919..5009).4" Target="10312:[37061..37078).1" />
<Link Source="10354:[4094..4107).6" Target="10354:[4919..5009).4" />
<Link Source="10354:[4094..4107).6" Target="10312:[36278..36360).5" />
<Link Source="10354:[4094..4107).6" Target="10312:[37061..37078).1" />
<Link Source="10312:[37029..37117).1" Target="10354:[4094..4107).6" />
<Link Source="10312:[37029..37117).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37258..37278).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[4919..5009).5" Target="10312:[35313..35332).1" />
<Link Source="10354:[4919..5009).5" Target="10312:[37258..37278).1" />
<Link Source="10354:[4094..4107).7" Target="10354:[4919..5009).5" />
<Link Source="10354:[4094..4107).7" Target="10312:[36278..36360).5" />
<Link Source="10354:[4094..4107).7" Target="10312:[37258..37278).1" />
<Link Source="10312:[37254..37416).1" Target="10354:[4094..4107).7" />
<Link Source="10312:[37254..37416).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37436..37988).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37436..37988).2" Target="10312:[35427..35466).1" />
<Link Source="10312:[37436..37988).2" Target="10312:[37436..37988).1" />
<Link Source="10312:[37436..37988).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38290..38338).1" Target="10312:[35999..38740).2" />
<Link Source="10306:[3345..3430).1" Target="10312:[35517..35538).1" />
<Link Source="10306:[3345..3430).1" Target="10312:[38290..38338).1" />
<Link Source="10306:[3358..3364).1" Target="10312:[38290..38338).1" />
<Link Source="10306:[3196..3249).1" Target="10306:[3345..3430).1" />
<Link Source="10306:[3196..3249).1" Target="10306:[3358..3364).1" />
<Link Source="10306:[3202..3247).1" Target="10306:[3196..3249).1" />
<Link Source="10306:[3202..3247).1" Target="10312:[36278..36360).5" />
<Link Source="10306:[3202..3247).1" Target="10306:[3358..3364).1" />
<Link Source="10306:[3202..3247).2" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).2" Target="10306:[3358..3364).1" />
<Link Source="10306:[3209..3246).1" Target="10306:[3358..3364).1" />
<Link Source="10298:[471..492).15" Target="10306:[3202..3247).1" />
<Link Source="10298:[471..492).15" Target="10306:[3209..3246).1" />
<Link Source="10298:[494..511).15" Target="10306:[3202..3247).2" />
<Link Source="10298:[494..511).15" Target="10306:[3209..3246).1" />
<Link Source="10306:[3351..3428).1" Target="10298:[471..492).15" />
<Link Source="10306:[3351..3428).1" Target="10312:[38290..38338).1" />
<Link Source="10312:[38286..38405).1" Target="10306:[3351..3428).1" />
<Link Source="10312:[38286..38405).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).1" Target="10312:[35842..35872).1" />
<Link Source="10312:[38425..38538).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).2" Target="10312:[35427..35466).1" />
<Link Source="10312:[38425..38538).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).3" Target="10312:[35265..38808).1" />
<Link Source="10312:[38425..38538).3" Target="10312:[36278..36360).5" />
<Link Source="10312:[38425..38538).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).4" Target="10312:[35939..35985).1" />
<Link Source="10312:[38425..38538).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).1" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).2" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).3" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).4" />
<Link Source="10312:[38425..38538).5" Target="10312:[36278..36360).5" />
<Link Source="10312:[38425..38538).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[38556..38725).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38556..38725).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[38556..38725).2" Target="10312:[38556..38725).1" />
<Link Source="10312:[38556..38725).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38629..38706).1" Target="10312:[38425..38538).5" />
<Link Source="10312:[38629..38706).1" Target="10312:[38556..38725).2" />
<Link Source="10312:[38629..38706).2" Target="10312:[36278..36360).5" />
<Link Source="10312:[38629..38706).2" Target="10312:[38556..38725).2" />
<Link Source="10312:[36067..36079).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).15" Target="10312:[35403..35412).1" />
<Link Source="10312:[36097..36258).15" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).17" Target="10312:[35517..35538).1" />
<Link Source="10312:[36097..36258).17" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).18" Target="10312:[35553..35581).1" />
<Link Source="10312:[36097..36258).18" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).19" Target="10312:[35596..35609).1" />
<Link Source="10312:[36097..36258).19" Target="10312:[38425..38538).5" />
<Link Source="10312:[33656..33675).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33707..33716).2" Target="10312:[36097..36258).15" />
<Link Source="10312:[33707..33716).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33754..33775).2" Target="10312:[36097..36258).17" />
<Link Source="10312:[33754..33775).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33777..33805).2" Target="10312:[36097..36258).18" />
<Link Source="10312:[33777..33805).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33807..33820).2" Target="10312:[36097..36258).19" />
<Link Source="10312:[33807..33820).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33870..33909).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[61608..61629).2" Target="10312:[33754..33775).2" />
<Link Source="10312:[61608..61629).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[34022..34574).4" Target="10312:[38629..38706).1" />
<Link Source="10312:[34022..34574).4" Target="10312:[38425..38538).5" />
<Link Source="10354:[9012..9030).2" Target="10312:[38629..38706).1" />
<Link Source="10354:[9012..9030).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[8981..9152).2" Target="10312:[38629..38706).1" />
<Link Source="10354:[8981..9152).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[9060..9070).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4058..4122).9" Target="10354:[9012..9030).2" />
<Link Source="10354:[4058..4122).9" Target="10354:[9060..9070).2" />
<Link Source="10354:[9056..9141).5" Target="10354:[4058..4122).9" />
<Link Source="10354:[9056..9141).5" Target="10312:[38425..38538).5" />
<Link Source="10354:[9073..9077).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4058..4122).10" Target="10354:[8981..9152).2" />
<Link Source="10354:[4058..4122).10" Target="10354:[9073..9077).2" />
<Link Source="10354:[9056..9141).6" Target="10354:[4058..4122).10" />
<Link Source="10354:[9056..9141).6" Target="10312:[38425..38538).5" />
<Link Source="10354:[9056..9141).7" Target="10354:[9056..9141).5" />
<Link Source="10354:[9056..9141).7" Target="10354:[9056..9141).6" />
<Link Source="10354:[9056..9141).7" Target="10312:[38425..38538).5" />
<Link Source="10312:[36566..36625).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[36643..36855).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[36643..36855).5" Target="10312:[36566..36625).2" />
<Link Source="10312:[36643..36855).5" Target="10312:[38629..38706).1" />
<Link Source="10312:[36643..36855).5" Target="10312:[36643..36855).4" />
<Link Source="10312:[36643..36855).5" Target="10312:[38425..38538).5" />
<Link Source="10312:[37061..37078).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4094..4107).11" Target="10312:[37061..37078).2" />
<Link Source="10354:[4094..4107).11" Target="10312:[38629..38706).1" />
<Link Source="10312:[37029..37117).4" Target="10354:[4094..4107).11" />
<Link Source="10312:[37029..37117).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[37258..37278).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4094..4107).12" Target="10312:[37258..37278).2" />
<Link Source="10354:[4094..4107).12" Target="10312:[38629..38706).1" />
<Link Source="10312:[37254..37416).4" Target="10354:[4094..4107).12" />
<Link Source="10312:[37254..37416).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[37436..37988).5" Target="10312:[38425..38538).5" />
<Link Source="10312:[38290..38338).2" Target="10312:[38425..38538).5" />
<Link Source="10306:[3345..3430).2" Target="10312:[35517..35538).1" />
<Link Source="10306:[3345..3430).2" Target="10312:[38290..38338).2" />
<Link Source="10306:[3358..3364).2" Target="10312:[38290..38338).2" />
<Link Source="10306:[3196..3249).2" Target="10306:[3345..3430).2" />
<Link Source="10306:[3196..3249).2" Target="10306:[3358..3364).2" />
<Link Source="10306:[3202..3247).5" Target="10306:[3196..3249).2" />
<Link Source="10306:[3202..3247).5" Target="10312:[38629..38706).1" />
<Link Source="10306:[3202..3247).5" Target="10306:[3358..3364).2" />
<Link Source="10306:[3202..3247).6" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).6" Target="10306:[3358..3364).2" />
<Link Source="10306:[3209..3246).2" Target="10306:[3358..3364).2" />
<Link Source="10298:[471..492).16" Target="10306:[3202..3247).5" />
<Link Source="10298:[471..492).16" Target="10306:[3209..3246).2" />
<Link Source="10298:[494..511).16" Target="10306:[3202..3247).6" />
<Link Source="10298:[494..511).16" Target="10306:[3209..3246).2" />
<Link Source="10306:[3351..3428).4" Target="10298:[471..492).16" />
<Link Source="10306:[3351..3428).4" Target="10312:[38290..38338).2" />
<Link Source="10312:[38286..38405).3" Target="10306:[3351..3428).4" />
<Link Source="10312:[38286..38405).3" Target="10312:[38425..38538).5" />
<Link Source="10312:[38556..38725).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[38756..38772).1" Target="10312:[38629..38706).1" />
<Link Source="10312:[38756..38772).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[38786..38796).1" Target="10312:[35047..35179).1" />
<Link Source="10354:[11383..11549).1" Target="10312:[35888..35925).1" />
<Link Source="10354:[11383..11549).1" Target="10312:[38786..38796).1" />
<Link Source="10354:[11428..11440).1" Target="10312:[38786..38796).1" />
<Link Source="10354:[3841..3991).3" Target="10354:[11383..11549).1" />
<Link Source="10354:[3841..3991).3" Target="10354:[11428..11440).1" />
<Link Source="10354:[3887..3892).3" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).3" Target="10354:[3841..3991).3" />
<Link Source="10354:[3887..3892).3" Target="10354:[11428..11440).1" />
<Link Source="10354:[3932..3952).3" Target="10354:[3841..3991).3" />
<Link Source="10354:[3932..3952).3" Target="10312:[38629..38706).1" />
<Link Source="10354:[3932..3952).3" Target="10354:[3887..3892).3" />
<Link Source="10354:[3932..3952).3" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3980).3" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3972).3" Target="10354:[3966..3980).3" />
<Link Source="10354:[3966..3972).3" Target="10354:[3841..3991).3" />
<Link Source="10354:[3966..3972).3" Target="10354:[11428..11440).1" />
<Link Source="10354:[11428..11441).1" Target="10312:[38786..38796).1" />
<Link Source="10354:[11455..11538).1" Target="10312:[38786..38796).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[3932..3952).3" />
<Link Source="10354:[11455..11538).2" Target="10354:[11455..11538).1" />
<Link Source="10354:[11455..11538).2" Target="10312:[38786..38796).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11455..11538).2" />
<Link Source="10312:[38786..38797).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35047..35180).11" Target="10312:[9577..9708).1" />
<Link Source="10312:[9577..9709).10" Target="10312:[8779..10524).1" />
<Link Source="10312:[8247..8394).10" Target="10312:[7991..8409).1" />
<Link Source="10346:[11369..11508).10" Target="10346:[11258..12246).6" />
<Link Source="10346:[11532..11552).1" Target="10346:[11258..12246).6" />
<Link Source="10354:[4919..5009).9" Target="10346:[10629..10648).1" />
<Link Source="10354:[4919..5009).9" Target="10346:[11532..11552).1" />
<Link Source="10354:[4094..4107).13" Target="10354:[4919..5009).9" />
<Link Source="10354:[4094..4107).13" Target="10354:[11506..11523).1" />
<Link Source="10354:[4094..4107).13" Target="10346:[11532..11552).1" />
<Link Source="10346:[11528..12231).1" Target="10354:[4094..4107).13" />
<Link Source="10346:[11528..12231).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[12335..12456).1" Target="10346:[10738..10759).1" />
<Link Source="10346:[12335..12456).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).2" Target="10346:[10629..10648).1" />
<Link Source="10346:[12335..12456).2" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[12335..12456).3" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).4" Target="10346:[10663..10672).1" />
<Link Source="10346:[12335..12456).4" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).5" Target="10346:[10674..10713).1" />
<Link Source="10346:[12335..12456).5" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).6" Target="10346:[10715..10736).1" />
<Link Source="10346:[12335..12456).6" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).7" Target="10346:[10761..10774).1" />
<Link Source="10346:[12335..12456).7" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).8" Target="10312:[38629..38706).1" />
<Link Source="10346:[12335..12456).8" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12455).1" Target="10312:[4534..4657).1" />
<Link Source="10345:[29004..29025).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29004..29025).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29040..29059).1" Target="10346:[12335..12456).2" />
<Link Source="10345:[29040..29059).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29074..29085).1" Target="10346:[12335..12456).3" />
<Link Source="10345:[29074..29085).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29100..29109).1" Target="10346:[12335..12456).4" />
<Link Source="10345:[29100..29109).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29124..29163).1" Target="10346:[12335..12456).5" />
<Link Source="10345:[29124..29163).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29178..29199).1" Target="10346:[12335..12456).6" />
<Link Source="10345:[29178..29199).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29214..29227).1" Target="10346:[12335..12456).7" />
<Link Source="10345:[29214..29227).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29242..29288).1" Target="10346:[12335..12456).8" />
<Link Source="10345:[29242..29288).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[28963..29726).1" Target="10346:[11143..11188).2" />
<Link Source="10345:[28963..29726).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).1" Target="10345:[29004..29025).1" />
<Link Source="10345:[29314..29436).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).2" Target="10345:[29040..29059).1" />
<Link Source="10345:[29314..29436).2" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).3" Target="10345:[29074..29085).1" />
<Link Source="10345:[29314..29436).3" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).4" Target="10345:[29100..29109).1" />
<Link Source="10345:[29314..29436).4" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).5" Target="10345:[29124..29163).1" />
<Link Source="10345:[29314..29436).5" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).6" Target="10345:[29178..29199).1" />
<Link Source="10345:[29314..29436).6" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).7" Target="10345:[29214..29227).1" />
<Link Source="10345:[29314..29436).7" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).8" Target="10345:[29242..29288).1" />
<Link Source="10345:[29314..29436).8" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29435).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29788..29809).1" Target="10345:[29314..29436).1" />
<Link Source="10345:[29788..29809).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29824..29843).1" Target="10345:[29314..29436).2" />
<Link Source="10345:[29824..29843).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29858..29869).1" Target="10345:[29314..29436).3" />
<Link Source="10345:[29858..29869).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29884..29893).1" Target="10345:[29314..29436).4" />
<Link Source="10345:[29884..29893).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29908..29947).1" Target="10345:[29314..29436).5" />
<Link Source="10345:[29908..29947).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29962..29983).1" Target="10345:[29314..29436).6" />
<Link Source="10345:[29962..29983).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29998..30011).1" Target="10345:[29314..29436).7" />
<Link Source="10345:[29998..30011).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30026..30072).1" Target="10345:[29314..29436).8" />
<Link Source="10345:[30026..30072).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29738..31666).1" Target="10345:[28963..29726).1" />
<Link Source="10345:[29738..31666).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30127..30163).1" Target="10345:[29314..29435).1" />
<Link Source="10286:[2155..2260).1" Target="10345:[29788..29809).1" />
<Link Source="10286:[2155..2260).1" Target="10345:[30127..30163).1" />
<Link Source="10286:[2191..2245).1" Target="10286:[2155..2260).1" />
<Link Source="10286:[2191..2245).1" Target="10354:[11506..11523).1" />
<Link Source="10286:[2191..2245).1" Target="10345:[30127..30163).1" />
<Link Source="10286:[2191..2245).2" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).2" Target="10345:[30127..30163).1" />
<Link Source="10286:[2198..2244).1" Target="10345:[30127..30163).1" />
<Link Source="10298:[471..492).17" Target="10286:[2191..2245).1" />
<Link Source="10298:[471..492).17" Target="10286:[2198..2244).1" />
<Link Source="10298:[494..511).17" Target="10286:[2191..2245).2" />
<Link Source="10298:[494..511).17" Target="10286:[2198..2244).1" />
<Link Source="10345:[30098..30164).1" Target="10298:[471..492).17" />
<Link Source="10345:[30098..30164).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30180..30209).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30203..30208).1" Target="10345:[30180..30209).1" />
<Link Source="10345:[30203..30208).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).1" Target="10345:[29858..29869).1" />
<Link Source="10345:[30223..30867).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).2" Target="10345:[30180..30209).1" />
<Link Source="10345:[30223..30867).2" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[29738..31666).1" />
<Link Source="10345:[30223..30867).3" Target="10354:[11506..11523).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[30223..30867).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[30223..30867).2" />
<Link Source="10345:[30223..30867).3" Target="10345:[30203..30208).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[29314..29435).1" />
<Link Source="10345:[30883..31655).1" Target="10345:[29738..31666).1" />
<Link Source="10345:[30883..31655).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[30883..31655).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29314..29436).9" Target="10346:[12335..12455).1" />
<Link Source="10345:[29457..29477).1" Target="10346:[12335..12455).1" />
<Link Source="10354:[4919..5009).10" Target="10345:[29040..29059).1" />
<Link Source="10354:[4919..5009).10" Target="10345:[29457..29477).1" />
<Link Source="10354:[4094..4107).14" Target="10354:[4919..5009).10" />
<Link Source="10354:[4094..4107).14" Target="10345:[30223..30867).3" />
<Link Source="10354:[4094..4107).14" Target="10345:[29457..29477).1" />
<Link Source="10345:[29452..29715).1" Target="10354:[4094..4107).14" />
<Link Source="10345:[29452..29715).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).2" Target="10345:[29178..29199).1" />
<Link Source="10345:[29452..29715).2" Target="EXTERNAL" />
<Link Source="10345:[29452..29715).2" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).3" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).5" Target="10345:[29452..29715).1" />
<Link Source="10345:[29452..29715).5" Target="10345:[29452..29715).2" />
<Link Source="10345:[29452..29715).5" Target="10346:[12335..12455).1" />
<Link Source="10345:[29566..29700).1" Target="10345:[28963..29726).1" />
<Link Source="10345:[29566..29700).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[29566..29700).1" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).2" Target="10345:[29004..29025).1" />
<Link Source="10345:[29566..29700).2" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).3" Target="10345:[29040..29059).1" />
<Link Source="10345:[29566..29700).3" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).4" Target="10345:[29074..29085).1" />
<Link Source="10345:[29566..29700).4" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).5" Target="10345:[29100..29109).1" />
<Link Source="10345:[29566..29700).5" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).6" Target="10345:[29124..29163).1" />
<Link Source="10345:[29566..29700).6" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).7" Target="10345:[29178..29199).1" />
<Link Source="10345:[29566..29700).7" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).8" Target="10345:[29214..29227).1" />
<Link Source="10345:[29566..29700).8" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).9" Target="10345:[30026..30072).1" />
<Link Source="10345:[29566..29700).9" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29699).1" Target="10345:[29452..29715).5" />
<Link Source="10345:[31734..31789).1" Target="10345:[29566..29700).1" />
<Link Source="10345:[31734..31789).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31804..31825).1" Target="10345:[29566..29700).2" />
<Link Source="10345:[31804..31825).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31840..31859).1" Target="10345:[29566..29700).3" />
<Link Source="10345:[31840..31859).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31874..31885).1" Target="10345:[29566..29700).4" />
<Link Source="10345:[31874..31885).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31900..31909).1" Target="10345:[29566..29700).5" />
<Link Source="10345:[31900..31909).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31924..31963).1" Target="10345:[29566..29700).6" />
<Link Source="10345:[31924..31963).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31978..31999).1" Target="10345:[29566..29700).7" />
<Link Source="10345:[31978..31999).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32014..32027).1" Target="10345:[29566..29700).8" />
<Link Source="10345:[32014..32027).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32042..32088).1" Target="10345:[29566..29700).9" />
<Link Source="10345:[32042..32088).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32114..32230).1" Target="10345:[31804..31825).1" />
<Link Source="10345:[32114..32230).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[32114..32230).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32114..32230).2" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).2" Target="10345:[29566..29699).1" />
<Link Source="10345:[32118..32174).1" Target="10345:[29566..29699).1" />
<Link Source="10298:[471..492).18" Target="10345:[32114..32230).1" />
<Link Source="10298:[471..492).18" Target="10345:[32118..32174).1" />
<Link Source="10298:[494..511).18" Target="10345:[32114..32230).2" />
<Link Source="10298:[494..511).18" Target="10345:[32118..32174).1" />
<Link Source="10345:[32275..32311).1" Target="10345:[29566..29699).1" />
<Link Source="10286:[2155..2260).2" Target="10345:[31804..31825).1" />
<Link Source="10286:[2155..2260).2" Target="10345:[32275..32311).1" />
<Link Source="10286:[2191..2245).5" Target="10286:[2155..2260).2" />
<Link Source="10286:[2191..2245).5" Target="10345:[30223..30867).3" />
<Link Source="10286:[2191..2245).5" Target="10345:[32275..32311).1" />
<Link Source="10286:[2191..2245).6" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).6" Target="10345:[32275..32311).1" />
<Link Source="10286:[2198..2244).2" Target="10345:[32275..32311).1" />
<Link Source="10298:[471..492).19" Target="10286:[2191..2245).5" />
<Link Source="10298:[471..492).19" Target="10286:[2198..2244).2" />
<Link Source="10298:[494..511).19" Target="10286:[2191..2245).6" />
<Link Source="10298:[494..511).19" Target="10286:[2198..2244).2" />
<Link Source="10345:[32246..32312).1" Target="10298:[471..492).19" />
<Link Source="10345:[32246..32312).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32328..33465).1" Target="10345:[31734..31789).1" />
<Link Source="10345:[32328..33465).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[29566..29700).10" Target="10345:[29452..29715).5" />
<Link Source="10346:[12335..12456).9" Target="10312:[4534..4657).1" />
<Link Source="10354:[3720..3803).41" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).41" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).41" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).41" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).43" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).43" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).43" Target="10354:[3720..3803).18" />
<Link Source="10354:[3720..3803).43" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).3" Target="10354:[3720..3803).41" />
<Link Source="10312:[4680..4787).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).21" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).21" Target="10345:[30223..30867).3" />
<Link Source="10312:[4534..4658).25" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).25" Target="10345:[30223..30867).3" />
<Link Source="10346:[10663..10672).2" Target="10312:[4534..4658).21" />
<Link Source="10346:[10663..10672).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[10738..10759).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[10761..10774).2" Target="10312:[4534..4658).25" />
<Link Source="10346:[10761..10774).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[10861..10875).2" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).7" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).7" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).49" Target="10354:[3684..3818).7" />
<Link Source="10354:[3720..3803).49" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).49" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).49" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).50" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).51" Target="10354:[3684..3818).7" />
<Link Source="10354:[3720..3803).51" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).51" Target="10354:[3720..3803).50" />
<Link Source="10354:[3720..3803).51" Target="10346:[10861..10875).2" />
<Link Source="10346:[10848..10877).4" Target="10354:[3720..3803).49" />
<Link Source="10346:[10848..10877).4" Target="10345:[30223..30867).3" />
<Link Source="10346:[10897..10914).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[7666..7775).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[7666..7775).2" Target="10346:[10897..10914).2" />
<Link Source="10346:[7672..7773).4" Target="10346:[7666..7775).2" />
<Link Source="10346:[7672..7773).4" Target="10345:[30223..30867).3" />
<Link Source="10346:[7672..7773).4" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).4" Target="10346:[10897..10914).2" />
<Link Source="10346:[10893..11127).3" Target="10346:[7672..7773).4" />
<Link Source="10346:[10893..11127).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[3460..3499).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[3525..3638).8" Target="10345:[30223..30867).3" />
<Link Source="10346:[3654..3816).4" Target="10345:[30223..30867).3" />
<Link Source="10346:[3712..3801).1" Target="10345:[30223..30867).3" />
<Link Source="10346:[3712..3801).1" Target="10346:[3654..3816).4" />
<Link Source="10346:[3712..3801).2" Target="10346:[3460..3499).2" />
<Link Source="10346:[3712..3801).2" Target="10346:[3654..3816).4" />
<Link Source="10346:[3712..3801).4" Target="10346:[3654..3816).4" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3069..3118).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3102..3117).1" Target="10345:[3069..3118).1" />
<Link Source="10345:[3102..3117).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3132..3193).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3171..3192).1" Target="10345:[3132..3193).1" />
<Link Source="10345:[3171..3192).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3207..4163).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3299..3362).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3299..3362).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3031..3043).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3476..3483).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3530..3552).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).2" Target="10345:[3458..3553).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[4179..4307).1" />
<Link Source="10345:[4179..4307).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).4" Target="10345:[3571..3619).1" />
<Link Source="10345:[4179..4307).4" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).4" Target="10345:[4179..4307).1" />
<Link Source="10345:[4179..4307).4" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).5" Target="10345:[4179..4307).2" />
<Link Source="10345:[4179..4307).5" Target="10345:[4179..4307).4" />
<Link Source="10345:[4179..4307).5" Target="10346:[3712..3801).4" />
<Link Source="10345:[4279..4292).1" Target="10345:[922..1186).1" />
<Link Source="10345:[4279..4292).1" Target="10345:[4179..4307).5" />
<Link Source="10346:[11369..11508).14" Target="10346:[10663..10672).2" />
<Link Source="10346:[11369..11508).14" Target="10345:[4279..4292).1" />
<Link Source="10346:[11369..11508).17" Target="10346:[10738..10759).2" />
<Link Source="10346:[11369..11508).17" Target="10345:[4279..4292).1" />
<Link Source="10346:[11369..11508).18" Target="10346:[10761..10774).2" />
<Link Source="10346:[11369..11508).18" Target="10345:[4279..4292).1" />
<Link Source="10346:[11369..11508).19" Target="10345:[32042..32088).1" />
<Link Source="10346:[11369..11508).19" Target="10345:[4279..4292).1" />
<Link Source="10312:[7718..7727).2" Target="10346:[11369..11508).14" />
<Link Source="10312:[7718..7727).2" Target="10345:[4279..4292).1" />
<Link Source="10312:[7793..7814).2" Target="10346:[11369..11508).17" />
<Link Source="10312:[7793..7814).2" Target="10345:[4279..4292).1" />
<Link Source="10312:[7816..7829).2" Target="10346:[11369..11508).18" />
<Link Source="10312:[7816..7829).2" Target="10345:[4279..4292).1" />
<Link Source="10312:[7903..7936).5" Target="10345:[4279..4292).1" />
<Link Source="10312:[7916..7934).2" Target="10345:[4279..4292).1" />
<Link Source="10353:[4698..4724).3" Target="10312:[7903..7936).5" />
<Link Source="10353:[4698..4724).3" Target="10312:[7916..7934).2" />
<Link Source="10353:[4750..4847).5" Target="10353:[4698..4724).3" />
<Link Source="10353:[4750..4847).5" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).5" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).9" Target="10353:[4698..4724).3" />
<Link Source="10353:[4863..5000).9" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).9" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).10" Target="10312:[7916..7934).2" />
<Link Source="10353:[5079..5183).5" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).5" Target="10312:[7916..7934).2" />
<Link Source="10353:[5197..5323).7" Target="10353:[4698..4724).3" />
<Link Source="10353:[5197..5323).7" Target="10353:[5079..5183).5" />
<Link Source="10353:[5197..5323).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).13" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).13" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).14" Target="10353:[4698..4724).3" />
<Link Source="10353:[5485..5759).14" Target="10353:[5485..5759).13" />
<Link Source="10353:[5485..5759).14" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).15" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).9" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).9" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).11" Target="10353:[4698..4724).3" />
<Link Source="10353:[5775..5979).11" Target="10353:[5775..5979).9" />
<Link Source="10353:[5775..5979).11" Target="10312:[7916..7934).2" />
<Link Source="10353:[5995..6029).7" Target="10353:[5775..5979).11" />
<Link Source="10353:[5995..6029).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[6002..6028).3" Target="10312:[7916..7934).2" />
<Link Source="10353:[6343..6358).3" Target="10353:[5995..6029).7" />
<Link Source="10353:[6343..6358).3" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).13" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6343..6358).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6384..6410).13" />
<Link Source="10353:[6384..6410).14" Target="10353:[6002..6028).3" />
<Link Source="10312:[7952..7977).5" Target="10345:[4279..4292).1" />
<Link Source="10312:[7952..7977).6" Target="10312:[7718..7727).2" />
<Link Source="10312:[7952..7977).6" Target="10312:[7952..7977).5" />
<Link Source="10312:[7952..7977).6" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8181).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8181).4" Target="10312:[7718..7727).2" />
<Link Source="10312:[8049..8181).4" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8181).6" Target="10312:[7793..7814).2" />
<Link Source="10312:[8049..8181).6" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8181).7" Target="10312:[7816..7829).2" />
<Link Source="10312:[8049..8181).7" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8181).8" Target="10346:[11369..11508).19" />
<Link Source="10312:[8049..8181).8" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8180).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8181).4" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8181).6" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8181).7" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8181).8" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[18997..19015).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[19017..19028).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[19064..19085).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[8049..8180).1" />
<Link Source="10312:[19188..19242).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[61540..61570).3" Target="10312:[19174..19243).1" />
<Link Source="10312:[61540..61570).3" Target="10312:[19188..19242).1" />
<Link Source="10312:[61572..61583).3" Target="10312:[19174..19243).2" />
<Link Source="10312:[61572..61583).3" Target="10312:[19188..19242).1" />
<Link Source="10312:[61585..61606).3" Target="10312:[19174..19243).3" />
<Link Source="10312:[61585..61606).3" Target="10312:[19188..19242).1" />
<Link Source="10312:[61608..61629).3" Target="10312:[19174..19243).4" />
<Link Source="10312:[61608..61629).3" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).14" Target="10312:[61585..61606).3" />
<Link Source="10312:[61655..62327).14" Target="10312:[61540..61570).3" />
<Link Source="10312:[61655..62327).14" Target="10312:[19188..19242).1" />
<Link Source="10312:[61874..62327).1" Target="10312:[61540..61570).3" />
<Link Source="10312:[61874..62327).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[61874..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61874..62327).1" Target="10312:[61655..62327).14" />
<Link Source="10312:[62098..62327).1" Target="10312:[61585..61606).3" />
<Link Source="10312:[62098..62327).1" Target="EXTERNAL" />
<Link Source="10312:[62098..62327).1" Target="10312:[61874..62327).1" />
<Link Source="10312:[62098..62327).2" Target="10312:[61874..62327).1" />
<Link Source="10312:[62279..62312).1" Target="10312:[61572..61583).3" />
<Link Source="10312:[62279..62312).1" Target="10312:[62098..62327).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19326..19460).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19030..19039).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19087..19100).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19102..19148).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19259..19531).1" />
<Link Source="10312:[19366..19459).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63439..63448).1" Target="10312:[19326..19460).2" />
<Link Source="10312:[63439..63448).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63450..63471).1" Target="10312:[19326..19460).3" />
<Link Source="10312:[63450..63471).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63503..63516).1" Target="10312:[19326..19460).6" />
<Link Source="10312:[63503..63516).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63518..63564).1" Target="10312:[19326..19460).7" />
<Link Source="10312:[63518..63564).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19064..19085).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63638..63668).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63682..63706).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[63424..63437).1" />
<Link Source="10312:[63859..64015).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[63859..64015).1" Target="EXTERNAL" />
<Link Source="10312:[63859..64015).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[63859..64015).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[63381..70761).1" />
<Link Source="10312:[64121..69285).2" Target="10345:[4279..4292).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[64121..69285).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).3" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).3" Target="10312:[19366..19459).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).2" Target="10312:[63439..63448).1" />
<Link Source="10312:[64353..69285).2" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).3" Target="10312:[63503..63516).1" />
<Link Source="10312:[64353..69285).3" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).4" Target="10312:[63450..63471).1" />
<Link Source="10312:[64353..69285).4" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).5" Target="10312:[63682..63706).1" />
<Link Source="10312:[64353..69285).5" Target="10312:[64121..69285).2" />
<Link Source="10312:[64357..64415).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[80978..80991).1" Target="10312:[64353..69285).1" />
<Link Source="10312:[80978..80991).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[80993..81002).1" Target="10312:[64353..69285).2" />
<Link Source="10312:[80993..81002).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81004..81017).1" Target="10312:[64353..69285).3" />
<Link Source="10312:[81004..81017).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81019..81040).1" Target="10312:[64353..69285).4" />
<Link Source="10312:[81019..81040).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81042..81069).1" Target="10312:[64353..69285).5" />
<Link Source="10312:[81042..81069).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81095..84034).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[83750..83991).1" Target="10312:[81095..84034).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[80993..81002).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[83750..83991).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[81095..84034).1" />
<Link Source="10312:[84050..84066).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[84080..84093).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[84080..84093).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[64121..69285).2" />
<Link Source="10312:[64537..64543).1" Target="10312:[64353..69285).6" />
<Link Source="10306:[3196..3249).3" Target="10312:[63381..70761).1" />
<Link Source="10306:[3196..3249).3" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).9" Target="10306:[3196..3249).3" />
<Link Source="10306:[3202..3247).9" Target="10312:[64121..69285).2" />
<Link Source="10306:[3202..3247).9" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).10" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).10" Target="10312:[64537..64543).1" />
<Link Source="10306:[3209..3246).3" Target="10312:[64537..64543).1" />
<Link Source="10298:[471..492).20" Target="10306:[3202..3247).9" />
<Link Source="10298:[471..492).20" Target="10306:[3209..3246).3" />
<Link Source="10298:[494..511).20" Target="10306:[3202..3247).10" />
<Link Source="10298:[494..511).20" Target="10306:[3209..3246).3" />
<Link Source="10312:[64532..69285).1" Target="10298:[471..492).20" />
<Link Source="10312:[64532..69285).1" Target="10312:[64353..69285).6" />
<Link Source="10312:[65229..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65229..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65229..69285).1" Target="10312:[64532..69285).1" />
<Link Source="10312:[65229..69285).2" Target="10312:[64532..69285).1" />
<Link Source="10312:[65474..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65474..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65474..69285).1" Target="10312:[65229..69285).1" />
<Link Source="10312:[65474..69285).2" Target="10312:[65229..69285).1" />
<Link Source="10312:[65730..65736).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65730..65736).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[66182..66188).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[66182..66188).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[63450..63471).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[63473..63501).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[65726..69285).1" />
<Link Source="10312:[66291..66342).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[75301..75322).1" Target="10312:[66177..69285).3" />
<Link Source="10312:[75301..75322).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75324..75352).1" Target="10312:[66177..69285).4" />
<Link Source="10312:[75324..75352).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).1" Target="10312:[75301..75322).1" />
<Link Source="10312:[75735..75866).1" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).2" Target="10312:[66291..66342).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[75735..75866).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75324..75352).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75742..75804).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[63638..63668).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[63518..63564).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[63566..63612).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[65726..69285).1" />
<Link Source="10312:[66215..66540).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[77528..77541).1" Target="10312:[66177..69285).2" />
<Link Source="10312:[77528..77541).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77543..77571).1" Target="10312:[75735..75866).4" />
<Link Source="10312:[77543..77571).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77573..77604).1" Target="10312:[66177..69285).7" />
<Link Source="10312:[77573..77604).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77606..77652).1" Target="10312:[66177..69285).8" />
<Link Source="10312:[77606..77652).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77654..77700).1" Target="10312:[66177..69285).9" />
<Link Source="10312:[77654..77700).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[63381..70761).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[77726..77892).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).2" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77730..77782).1" Target="10312:[66215..66540).1" />
<Link Source="10298:[471..492).23" Target="10312:[77726..77892).1" />
<Link Source="10298:[471..492).23" Target="10312:[77730..77782).1" />
<Link Source="10298:[494..511).23" Target="10312:[77726..77892).2" />
<Link Source="10298:[494..511).23" Target="10312:[77730..77782).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[77528..77541).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[77543..77571).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[77573..77604).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[77606..77652).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[77654..77700).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[66215..66540).1" />
<Link Source="10312:[77915..78032).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77908..78033).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78402..78430).1" Target="10312:[77908..78033).2" />
<Link Source="10312:[78402..78430).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78432..78463).1" Target="10312:[77908..78033).3" />
<Link Source="10312:[78432..78463).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78465..78511).1" Target="10312:[77908..78033).4" />
<Link Source="10312:[78465..78511).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78513..78552).1" Target="10312:[77908..78033).5" />
<Link Source="10312:[78513..78552).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[78387..78400).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[78402..78430).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[78432..78463).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[78465..78511).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[78513..78552).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[77915..78032).1" />
<Link Source="10312:[78649..78771).1" Target="10312:[77915..78032).1" />
<Link Source="10346:[8019..8032).1" Target="10312:[78642..78772).1" />
<Link Source="10346:[8019..8032).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8034..8062).1" Target="10312:[78642..78772).2" />
<Link Source="10346:[8034..8062).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8064..8095).1" Target="10312:[78642..78772).3" />
<Link Source="10346:[8064..8095).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8097..8143).1" Target="10312:[78642..78772).4" />
<Link Source="10346:[8097..8143).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8145..8184).1" Target="10312:[78642..78772).5" />
<Link Source="10346:[8145..8184).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[7977..8737).1" Target="10312:[78346..78783).1" />
<Link Source="10346:[7977..8737).1" Target="10312:[64121..69285).2" />
<Link Source="10346:[7977..8737).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8210..8251).1" Target="10346:[7977..8737).1" />
<Link Source="10346:[8210..8251).1" Target="10312:[64121..69285).2" />
<Link Source="10346:[8210..8251).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8265..8726).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8265..8726).2" Target="10346:[8210..8251).1" />
<Link Source="10346:[8265..8726).2" Target="10346:[8265..8726).1" />
<Link Source="10346:[8265..8726).2" Target="10312:[78649..78771).1" />
<Link Source="10346:[8323..8450).1" Target="10346:[8019..8032).1" />
<Link Source="10346:[8323..8450).1" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).2" Target="10346:[8210..8251).1" />
<Link Source="10346:[8323..8450).2" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).3" Target="10346:[8034..8062).1" />
<Link Source="10346:[8323..8450).3" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).4" Target="10346:[8064..8095).1" />
<Link Source="10346:[8323..8450).4" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).5" Target="10346:[8097..8143).1" />
<Link Source="10346:[8323..8450).5" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).6" Target="10346:[8265..8726).2" />
<Link Source="10346:[8330..8449).1" Target="10346:[8265..8726).2" />
<Link Source="10286:[30070..30083).1" Target="10346:[8323..8450).1" />
<Link Source="10286:[30070..30083).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30098..30120).1" Target="10346:[8323..8450).2" />
<Link Source="10286:[30098..30120).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30135..30160).1" Target="10346:[8323..8450).3" />
<Link Source="10286:[30135..30160).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30175..30206).1" Target="10346:[8323..8450).4" />
<Link Source="10286:[30175..30206).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30221..30268).1" Target="10346:[8323..8450).5" />
<Link Source="10286:[30221..30268).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30283..30330).1" Target="10346:[8323..8450).6" />
<Link Source="10286:[30283..30330).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30012..30691).1" Target="10346:[7977..8737).1" />
<Link Source="10286:[30012..30691).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30356..30522).1" Target="10286:[30012..30691).1" />
<Link Source="10286:[30356..30522).1" Target="10312:[64121..69285).2" />
<Link Source="10286:[30356..30522).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30356..30522).2" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).2" Target="10346:[8330..8449).1" />
<Link Source="10286:[30360..30412).1" Target="10346:[8330..8449).1" />
<Link Source="10298:[471..492).24" Target="10286:[30356..30522).1" />
<Link Source="10298:[471..492).24" Target="10286:[30360..30412).1" />
<Link Source="10298:[494..511).24" Target="10286:[30356..30522).2" />
<Link Source="10298:[494..511).24" Target="10286:[30360..30412).1" />
<Link Source="10286:[30538..30680).1" Target="10286:[30070..30083).1" />
<Link Source="10286:[30538..30680).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).2" Target="10286:[30098..30120).1" />
<Link Source="10286:[30538..30680).2" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).3" Target="10286:[30135..30160).1" />
<Link Source="10286:[30538..30680).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).4" Target="10286:[30175..30206).1" />
<Link Source="10286:[30538..30680).4" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).5" Target="10286:[30221..30268).1" />
<Link Source="10286:[30538..30680).5" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).6" Target="10286:[30283..30330).1" />
<Link Source="10286:[30538..30680).6" Target="10346:[8330..8449).1" />
<Link Source="10286:[30545..30679).1" Target="10346:[8330..8449).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30538..30680).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2136..2158).1" Target="10286:[30538..30680).2" />
<Link Source="10060:[2136..2158).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2173..2198).1" Target="10286:[30538..30680).3" />
<Link Source="10060:[2173..2198).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2213..2244).1" Target="10286:[30538..30680).4" />
<Link Source="10060:[2213..2244).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2259..2305).1" Target="10286:[30538..30680).5" />
<Link Source="10060:[2259..2305).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2320..2366).1" Target="10286:[30538..30680).6" />
<Link Source="10060:[2320..2366).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).1" Target="10060:[2108..2121).1" />
<Link Source="10060:[2392..2555).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).2" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).2" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).3" Target="10060:[2173..2198).1" />
<Link Source="10060:[2392..2555).3" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).4" Target="10060:[2213..2244).1" />
<Link Source="10060:[2392..2555).4" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).5" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).5" Target="10312:[64121..69285).2" />
<Link Source="10060:[2392..2555).5" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).6" Target="10060:[2259..2305).1" />
<Link Source="10060:[2392..2555).6" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).7" Target="10060:[2320..2366).1" />
<Link Source="10060:[2392..2555).7" Target="10286:[30545..30679).1" />
<Link Source="10060:[2399..2554).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2392..2555).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5621..5634).1" Target="10060:[2392..2555).2" />
<Link Source="10060:[5621..5634).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5691..5716).1" Target="10060:[2392..2555).3" />
<Link Source="10060:[5691..5716).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5731..5762).1" Target="10060:[2392..2555).4" />
<Link Source="10060:[5731..5762).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5777..5806).1" Target="10060:[2392..2555).5" />
<Link Source="10060:[5777..5806).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5821..5867).1" Target="10060:[2392..2555).6" />
<Link Source="10060:[5821..5867).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5882..5928).1" Target="10060:[2392..2555).7" />
<Link Source="10060:[5882..5928).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5593..5606).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5954..5991).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[6005..6042).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6056..6090).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6056..6090).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6056..6090).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6188..6219).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6235..9907).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6235..9907).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6235..9907).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[8992..9004).1" Target="10060:[6235..9907).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[66177..69285).1" />
<Link Source="10312:[66177..69285).11" Target="10060:[8992..9004).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[65726..69285).1" />
<Link Source="10312:[67587..67593).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).1" Target="10312:[67587..67593).1" />
<Link Source="10312:[67582..69285).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[67582..69285).2" Target="10312:[66177..69285).11" />
<Link Source="10312:[67858..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[67858..69285).1" Target="EXTERNAL" />
<Link Source="10312:[67858..69285).1" Target="10312:[67582..69285).1" />
<Link Source="10312:[67858..69285).2" Target="10312:[67582..69285).1" />
<Link Source="10312:[68183..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68183..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68183..69285).1" Target="10312:[67858..69285).1" />
<Link Source="10312:[68183..69285).2" Target="10312:[67858..69285).1" />
<Link Source="10312:[68512..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68512..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68512..69285).1" Target="10312:[68183..69285).1" />
<Link Source="10312:[68512..69285).2" Target="10312:[68183..69285).1" />
<Link Source="10312:[68882..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68882..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68882..69285).1" Target="10312:[68512..69285).1" />
<Link Source="10312:[68882..69285).2" Target="10312:[68512..69285).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[68882..69285).1" />
<Link Source="10312:[69244..69269).1" Target="10312:[68882..69285).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69237..69270).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).1" Target="EXTERNAL" />
<Link Source="10354:[5439..5508).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).2" Target="10354:[5400..5413).1" />
<Link Source="10354:[5439..5508).2" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).3" Target="10312:[69244..69269).1" />
<Link Source="10354:[5446..5507).1" Target="10312:[69244..69269).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5439..5508).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1099..1112).1" Target="10354:[5439..5508).2" />
<Link Source="10368:[1099..1112).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1114..1134).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1114..1134).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1048..1256).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1048..1256).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1076..1097).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1160..1169).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1099..1112).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1191..1202).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1114..1134).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1226..1236).1" Target="10354:[5446..5507).1" />
<Link Source="10312:[69237..69270).2" Target="10354:[5439..5508).3" />
<Link Source="10312:[69237..69270).2" Target="10312:[68882..69285).1" />
<Link Source="10312:[19478..19516).1" Target="10312:[69237..69270).2" />
<Link Source="10312:[19478..19516).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19478..19515).1" Target="10312:[19259..19531).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19516).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[18976..18995).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10272..10276).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[4058..4122).16" Target="10354:[10192..10676).1" />
<Link Source="10354:[4058..4122).16" Target="10354:[10272..10276).1" />
<Link Source="10354:[4094..4107).16" Target="10354:[4058..4122).16" />
<Link Source="10354:[4094..4107).16" Target="10312:[67582..69285).2" />
<Link Source="10354:[4094..4107).16" Target="10354:[10272..10276).1" />
<Link Source="10354:[10268..10665).1" Target="10354:[4094..4107).16" />
<Link Source="10354:[10268..10665).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10268..10665).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10217..10242).1" />
<Link Source="10354:[10268..10665).2" Target="10368:[1160..1169).1" />
<Link Source="10354:[10268..10665).2" Target="10312:[19478..19515).1" />
<Link Source="10354:[10404..10408).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10386..10665).1" Target="10354:[10404..10408).1" />
<Link Source="10354:[10386..10665).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10442..10463).1" Target="10354:[10217..10242).1" />
<Link Source="10354:[10442..10463).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[10442..10462).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10463).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10192..10676).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8181..8186).1" Target="10368:[1160..1169).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8214..8234).1" Target="10312:[67582..69285).2" />
<Link Source="10354:[8214..8234).1" Target="10354:[8181..8186).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8248..8278).1" Target="10368:[1191..1202).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8109..8324).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8214..8234).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8248..8278).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[10442..10462).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8292..8298).1" Target="10368:[1226..1236).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[10442..10463).2" Target="10354:[10386..10665).1" />
<Link Source="10312:[19478..19516).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10354:[8248..8278).2" />
<Link Source="10312:[19259..19531).4" Target="10354:[8292..8298).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[8049..8180).1" />
<Link Source="10346:[11532..11552).2" Target="10345:[4279..4292).1" />
<Link Source="10354:[4094..4107).18" Target="10346:[11532..11552).2" />
<Link Source="10354:[4094..4107).18" Target="10354:[8248..8278).2" />
<Link Source="10346:[11528..12231).3" Target="10354:[4094..4107).18" />
<Link Source="10346:[11528..12231).3" Target="10345:[4279..4292).1" />
<Link Source="10346:[11665..12181).1" Target="10346:[11528..12231).3" />
<Link Source="10346:[11665..12181).2" Target="10346:[10663..10672).2" />
<Link Source="10346:[11665..12181).2" Target="10346:[11665..12181).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[11528..12231).3" />
<Link Source="10346:[11665..12181).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[11665..12181).3" Target="10346:[11528..12231).3" />
<Link Source="10346:[11710..11746).1" Target="10346:[11528..12231).3" />
<Link Source="10286:[2155..2260).3" Target="10346:[10738..10759).2" />
<Link Source="10286:[2155..2260).3" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).9" Target="10286:[2155..2260).3" />
<Link Source="10286:[2191..2245).9" Target="10354:[8248..8278).2" />
<Link Source="10286:[2191..2245).9" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).10" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).10" Target="10346:[11710..11746).1" />
<Link Source="10286:[2198..2244).3" Target="10346:[11710..11746).1" />
<Link Source="10298:[471..492).26" Target="10286:[2191..2245).9" />
<Link Source="10298:[471..492).26" Target="10286:[2198..2244).3" />
<Link Source="10298:[494..511).26" Target="10286:[2191..2245).10" />
<Link Source="10298:[494..511).26" Target="10286:[2198..2244).3" />
<Link Source="10346:[11665..12181).4" Target="10298:[471..492).26" />
<Link Source="10346:[11665..12181).4" Target="10346:[11528..12231).3" />
<Link Source="10346:[11683..11747).1" Target="10346:[11528..12231).3" />
<Link Source="10345:[28212..28223).1" Target="10346:[11665..12181).3" />
<Link Source="10345:[28212..28223).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28225..28251).1" Target="10346:[11665..12181).4" />
<Link Source="10345:[28225..28251).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28185..28951).1" Target="10345:[4279..4292).1" />
<Link Source="10345:[28185..28951).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28277..28305).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28300..28304).1" Target="10345:[28277..28305).1" />
<Link Source="10345:[28300..28304).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).1" Target="10345:[28212..28223).1" />
<Link Source="10345:[28319..28911).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).2" Target="10345:[28277..28305).1" />
<Link Source="10345:[28319..28911).2" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28185..28951).1" />
<Link Source="10345:[28319..28911).3" Target="10354:[8248..8278).2" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).2" />
<Link Source="10345:[28319..28911).3" Target="10354:[8292..8298).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28300..28304).1" />
<Link Source="10345:[28319..28911).3" Target="10346:[11683..11747).1" />
<Link Source="10345:[28927..28940).1" Target="10346:[11683..11747).1" />
<Link Source="10346:[11665..12181).6" Target="10345:[28927..28940).1" />
<Link Source="10346:[11665..12181).6" Target="10346:[11528..12231).3" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).2" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).6" />
<Link Source="10346:[11665..12181).7" Target="10346:[11528..12231).3" />
<Link Source="10346:[12205..12212).1" Target="10346:[11528..12231).3" />
<Link Source="10312:[4685..4699).3" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).8" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).8" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).57" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).57" Target="10345:[28319..28911).3" />
<Link Source="10354:[3720..3803).57" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).57" Target="10312:[4685..4699).3" />
<Link Source="10312:[4680..4787).5" Target="10354:[3720..3803).57" />
<Link Source="10312:[4680..4787).5" Target="10345:[30223..30867).3" />
<Link Source="10312:[4749..4764).1" Target="10345:[30223..30867).3" />
<Link Source="10312:[4749..4764).1" Target="10312:[4680..4787).5" />
<Link Source="10312:[4826..5058).11" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).11" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).11" Target="10345:[30223..30867).3" />
<Link Source="10312:[4826..5058).12" Target="10345:[30223..30867).3" />
<Link Source="10312:[5087..5101).1" Target="10312:[4749..4764).1" />
<Link Source="10312:[5087..5101).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[1585..1724).9" Target="10353:[7556..7642).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[41889..41914).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).3" Target="10060:[5821..5867).1" />
<Link Source="10319:[43504..43546).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).2" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).3" />
<Link Source="10319:[43504..43546).4" Target="10345:[28319..28911).3" />
<Link Source="10319:[43504..43546).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43562..43590).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[43799..44676).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[43095..43135).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43853..43873).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41088..41107).1" Target="10319:[43799..44676).3" />
<Link Source="10319:[41088..41107).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41138..41158).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4919..5009).14" Target="10319:[41088..41107).1" />
<Link Source="10354:[4919..5009).14" Target="10319:[41138..41158).1" />
<Link Source="10354:[4962..4966).14" Target="10319:[41138..41158).1" />
<Link Source="10354:[4058..4122).20" Target="10354:[4919..5009).14" />
<Link Source="10354:[4058..4122).20" Target="10354:[4962..4966).14" />
<Link Source="10354:[4094..4107).20" Target="10354:[4058..4122).20" />
<Link Source="10354:[4094..4107).20" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).20" Target="10354:[4962..4966).14" />
<Link Source="10319:[41133..41220).1" Target="10354:[4094..4107).20" />
<Link Source="10319:[41133..41220).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41254..41268).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41088..41107).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41254..41268).1" />
<Link Source="10354:[4561..4580).1" Target="10354:[4525..4595).1" />
<Link Source="10354:[4561..4580).1" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).1" Target="10319:[41254..41268).1" />
<Link Source="10319:[41236..41680).1" Target="10354:[4561..4580).1" />
<Link Source="10319:[41236..41680).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[41236..41680).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[41696..41709).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[43799..44676).4" Target="10319:[41696..41709).1" />
<Link Source="10319:[43799..44676).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).5" Target="10319:[43799..44676).2" />
<Link Source="10319:[43799..44676).5" Target="10319:[43799..44676).4" />
<Link Source="10319:[43799..44676).5" Target="10319:[20515..20674).1" />
<Link Source="10319:[43907..44661).1" Target="10319:[43799..44676).5" />
<Link Source="10319:[43907..44661).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43907..44661).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[43907..44661).2" Target="10319:[43907..44661).1" />
<Link Source="10319:[43907..44661).2" Target="10319:[43799..44676).5" />
<Link Source="10319:[44578..44642).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[44578..44642).1" Target="10319:[43907..44661).2" />
<Link Source="10319:[44578..44642).2" Target="10319:[41889..41914).1" />
<Link Source="10319:[44578..44642).2" Target="10319:[43907..44661).2" />
<Link Source="10319:[44594..44641).1" Target="10319:[43907..44661).2" />
<Link Source="10319:[45850..45875).1" Target="10319:[44578..44642).1" />
<Link Source="10319:[45850..45875).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45877..45902).1" Target="10319:[44578..44642).2" />
<Link Source="10319:[45877..45902).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45797..47405).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[45797..47405).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45928..45952).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45966..46327).1" Target="10319:[45850..45875).1" />
<Link Source="10319:[45966..46327).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[45966..46327).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[46300..46312).1" Target="10319:[45966..46327).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[46300..46312).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[44751..44765).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[42089..42141).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).3" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[41849..41874).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[41983..42014).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44751..44765).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[42029..42063).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[51282..51325).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[44692..45392).1" />
<Link Source="10319:[44801..44929).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44785..44930).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84201..84218).1" Target="10319:[44785..44930).2" />
<Link Source="10319:[84201..84218).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84233..84242).1" Target="10319:[44785..44930).3" />
<Link Source="10319:[84233..84242).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84257..84273).1" Target="10319:[44785..44930).5" />
<Link Source="10319:[84257..84273).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84288..84313).1" Target="10319:[44785..44930).6" />
<Link Source="10319:[84288..84313).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84328..84359).1" Target="10319:[44785..44930).7" />
<Link Source="10319:[84328..84359).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84374..84391).1" Target="10319:[44785..44930).8" />
<Link Source="10319:[84374..84391).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84406..84447).1" Target="10319:[44785..44930).9" />
<Link Source="10319:[84406..84447).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84462..84508).1" Target="10319:[44785..44930).10" />
<Link Source="10319:[84462..84508).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[84167..84186).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[84201..84218).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[84233..84242).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[84257..84273).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[84328..84359).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[84374..84391).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[84406..84447).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[84462..84508).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[44801..44929).1" />
<Link Source="10319:[84550..84674).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84534..84675).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).2" Target="10319:[84534..84675).2" />
<Link Source="10319:[84907..109876).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).3" Target="10319:[84534..84675).3" />
<Link Source="10319:[84907..109876).3" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).4" Target="10319:[84534..84675).4" />
<Link Source="10319:[84907..109876).4" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).5" Target="10319:[84534..84675).5" />
<Link Source="10319:[84907..109876).5" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).6" Target="10319:[84534..84675).6" />
<Link Source="10319:[84907..109876).6" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).7" Target="10319:[84534..84675).7" />
<Link Source="10319:[84907..109876).7" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).8" Target="10319:[84534..84675).8" />
<Link Source="10319:[84907..109876).8" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).9" Target="10319:[84534..84675).9" />
<Link Source="10319:[84907..109876).9" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84124..109887).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84907..109876).4" />
<Link Source="10319:[85320..85348).2" Target="10319:[85320..85348).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[85366..85400).2" Target="10319:[85366..85400).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85434..85448).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[84907..109876).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[85434..85448).1" />
<Link Source="10354:[4561..4580).2" Target="10354:[4525..4595).2" />
<Link Source="10354:[4561..4580).2" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).2" Target="10319:[85434..85448).1" />
<Link Source="10319:[85420..85449).1" Target="10354:[4561..4580).2" />
<Link Source="10319:[85420..85449).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85467..85484).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85508..85528).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4919..5009).15" Target="10319:[84907..109876).1" />
<Link Source="10354:[4919..5009).15" Target="10319:[85508..85528).1" />
<Link Source="10319:[85504..106825).1" Target="10354:[4919..5009).15" />
<Link Source="10319:[85504..106825).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85570..106806).1" Target="10319:[85504..106825).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85420..85449).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[85570..106806).2" Target="10319:[85570..106806).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85504..106825).1" />
<Link Source="10319:[103953..103983).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104078..104122).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104078..104122).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).2" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[104148..106735).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[85570..106806).2" />
<Link Source="10319:[104874..105336).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).1" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105368..106708).1" Target="10319:[84907..109876).6" />
<Link Source="10319:[105368..106708).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105465..105535).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[105465..105535).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[105465..105535).2" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).3" Target="10319:[84907..109876).4" />
<Link Source="10319:[105465..105535).3" Target="10319:[105368..106708).1" />
<Link Source="10319:[105476..105534).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[76345..76358).2" Target="10319:[105465..105535).1" />
<Link Source="10319:[76345..76358).2" Target="10319:[105476..105534).1" />
<Link Source="10319:[76360..76385).2" Target="10319:[105465..105535).2" />
<Link Source="10319:[76360..76385).2" Target="10319:[105476..105534).1" />
<Link Source="10319:[76387..76402).2" Target="10319:[105465..105535).3" />
<Link Source="10319:[76387..76402).2" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).5" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).6" Target="10319:[76345..76358).2" />
<Link Source="10319:[76494..76582).6" Target="10319:[76494..76582).5" />
<Link Source="10319:[76494..76582).6" Target="10319:[105476..105534).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[84691..84861).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84691..84861).1" Target="10319:[76345..76358).2" />
<Link Source="10319:[84691..84861).1" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[84877..84891).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[76345..76358).2" />
<Link Source="10319:[44948..45377).1" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[45408..45421).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11383..11549).2" Target="10319:[43095..43135).1" />
<Link Source="10354:[11383..11549).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[11428..11440).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[3841..3991).4" Target="10354:[11383..11549).2" />
<Link Source="10354:[3841..3991).4" Target="10354:[11428..11440).2" />
<Link Source="10354:[3887..3892).4" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).4" Target="10354:[3841..3991).4" />
<Link Source="10354:[3887..3892).4" Target="10354:[11428..11440).2" />
<Link Source="10354:[3932..3952).4" Target="10354:[3841..3991).4" />
<Link Source="10354:[3932..3952).4" Target="10319:[76345..76358).2" />
<Link Source="10354:[3932..3952).4" Target="10354:[3887..3892).4" />
<Link Source="10354:[3932..3952).4" Target="10354:[11428..11440).2" />
<Link Source="10354:[3966..3980).4" Target="10354:[11428..11440).2" />
<Link Source="10354:[3966..3972).4" Target="10354:[3966..3980).4" />
<Link Source="10354:[3966..3972).4" Target="10354:[3841..3991).4" />
<Link Source="10354:[3966..3972).4" Target="10354:[11428..11440).2" />
<Link Source="10354:[11428..11441).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).4" Target="10319:[45408..45421).1" />
<Link Source="10319:[45408..45422).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45436..45568).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[45436..45568).1" Target="10354:[3932..3952).4" />
<Link Source="10319:[45436..45568).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45505..45551).1" Target="10319:[20515..20674).1" />
<Link Source="10286:[10010..10027).2" Target="10319:[45436..45568).1" />
<Link Source="10286:[10010..10027).2" Target="10319:[45505..45551).1" />
<Link Source="10286:[9966..10197).2" Target="10319:[41732..45579).1" />
<Link Source="10286:[9966..10197).2" Target="10319:[45505..45551).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[84877..84891).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[45443..45567).1" Target="10319:[20515..20674).1" />
<Link Source="10287:[2306..2328).1" Target="10286:[10010..10027).2" />
<Link Source="10287:[2306..2328).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2330..2343).1" Target="10319:[45436..45568).4" />
<Link Source="10287:[2330..2343).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2377..2471).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2377..2471).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2489..2521).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2489..2521).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).1" Target="10287:[2489..2521).1" />
<Link Source="10287:[2539..2781).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2546..2558).1" Target="10287:[2539..2781).1" />
<Link Source="10287:[2546..2558).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).3" Target="10287:[2306..2328).1" />
<Link Source="10287:[2539..2781).3" Target="10287:[2546..2558).1" />
<Link Source="10287:[2582..2656).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1144..1157).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1144..1157).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1159..1181).1" Target="10287:[2539..2781).3" />
<Link Source="10287:[1159..1181).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1092..1409).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1092..1409).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1215..1253).1" Target="10287:[1144..1157).1" />
<Link Source="10287:[1215..1253).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1271..1302).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[1271..1302).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[1144..1157).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[1159..1181).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[2582..2656).1" />
<Link Source="10319:[18724..18740).1" Target="10319:[71457..71560).1" />
<Link Source="10287:[1857..1908).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1857..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10287:[1893..1908).1" Target="10287:[1857..1908).1" />
<Link Source="10287:[1893..1908).1" Target="10287:[1320..1327).1" />
<Link Source="10287:[1893..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1857..1908).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1271..1291).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1271..1302).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1893..1908).1" />
<Link Source="10287:[1860..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10319:[18710..18742).1" Target="10287:[1860..1908).1" />
<Link Source="10319:[18710..18742).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18758..18826).1" Target="10287:[2546..2558).1" />
<Link Source="10319:[18758..18826).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18758..18826).2" Target="10319:[18456..18481).1" />
<Link Source="10319:[18758..18826).2" Target="10319:[71457..71560).1" />
<Link Source="10319:[18758..18826).3" Target="10319:[18431..18454).1" />
<Link Source="10319:[18758..18826).3" Target="10319:[71457..71560).1" />
<Link Source="10319:[18758..18826).4" Target="10319:[18483..18522).1" />
<Link Source="10319:[18758..18826).4" Target="10319:[71457..71560).1" />
<Link Source="10319:[18765..18825).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[51762..51815).2" Target="10319:[18758..18826).1" />
<Link Source="10319:[51762..51815).2" Target="10319:[18765..18825).1" />
<Link Source="10319:[51817..51842).2" Target="10319:[18758..18826).2" />
<Link Source="10319:[51817..51842).2" Target="10319:[18765..18825).1" />
<Link Source="10319:[51844..51861).2" Target="10319:[18758..18826).3" />
<Link Source="10319:[51844..51861).2" Target="10319:[18765..18825).1" />
<Link Source="10319:[51863..51909).2" Target="10319:[18758..18826).4" />
<Link Source="10319:[51863..51909).2" Target="10319:[18765..18825).1" />
<Link Source="10319:[51698..52285).2" Target="10319:[18300..18837).1" />
<Link Source="10319:[51698..52285).2" Target="10319:[18765..18825).1" />
<Link Source="10319:[51939..51953).2" Target="10319:[18765..18825).1" />
<Link Source="10287:[1680..1716).2" Target="10319:[51762..51815).2" />
<Link Source="10287:[1680..1716).2" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).3" Target="10287:[1680..1716).2" />
<Link Source="10287:[1683..1716).3" Target="10287:[1320..1327).1" />
<Link Source="10287:[1683..1716).3" Target="10286:[10010..10027).2" />
<Link Source="10287:[1683..1716).3" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).3" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).3" Target="10287:[1683..1716).3" />
<Link Source="10319:[51935..52244).3" Target="10319:[18765..18825).1" />
<Link Source="10319:[71457..71582).1" Target="10319:[21212..21313).1" />
<Link Source="10287:[1784..1818).1" Target="10319:[51762..51815).2" />
<Link Source="10287:[1784..1818).1" Target="10319:[71457..71582).1" />
<Link Source="10287:[1787..1793).1" Target="10319:[71457..71582).1" />
<Link Source="10287:[1535..1573).1" Target="10287:[1784..1818).1" />
<Link Source="10287:[1535..1573).1" Target="10287:[1787..1793).1" />
<Link Source="10287:[1538..1573).1" Target="10287:[1535..1573).1" />
<Link Source="10287:[1538..1573).1" Target="10287:[1320..1327).1" />
<Link Source="10287:[1538..1573).1" Target="10287:[1787..1793).1" />
<Link Source="10287:[1787..1818).1" Target="10287:[1538..1573).1" />
<Link Source="10287:[1787..1818).1" Target="10319:[71457..71582).1" />
<Link Source="10319:[71597..71678).1" Target="10319:[71295..71320).1" />
<Link Source="10319:[71597..71678).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71597..71678).2" Target="10287:[1787..1818).1" />
<Link Source="10319:[71597..71678).2" Target="10319:[21212..21313).1" />
<Link Source="10319:[71597..71678).3" Target="10319:[71214..71239).1" />
<Link Source="10319:[71597..71678).3" Target="10319:[21212..21313).1" />
<Link Source="10319:[71597..71678).4" Target="10319:[21212..21313).1" />
<Link Source="10319:[71597..71677).1" Target="10319:[21212..21313).1" />
<Link Source="10286:[21504..21529).2" Target="10319:[71597..71678).1" />
<Link Source="10286:[21504..21529).2" Target="10319:[71597..71677).1" />
<Link Source="10286:[21531..21544).2" Target="10319:[71597..71678).2" />
<Link Source="10286:[21531..21544).2" Target="10319:[71597..71677).1" />
<Link Source="10286:[21546..21561).2" Target="10319:[71597..71678).3" />
<Link Source="10286:[21546..21561).2" Target="10319:[71597..71677).1" />
<Link Source="10286:[21563..21583).2" Target="10319:[71597..71678).4" />
<Link Source="10286:[21563..21583).2" Target="10319:[71597..71677).1" />
<Link Source="10286:[21462..21711).2" Target="10319:[71130..73408).1" />
<Link Source="10286:[21462..21711).2" Target="10319:[71597..71677).1" />
<Link Source="10286:[22044..22069).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[22044..22069).2" Target="10319:[71597..71677).1" />
<Link Source="10286:[22086..22108).2" Target="10286:[21546..21561).2" />
<Link Source="10286:[22086..22108).2" Target="10319:[71597..71677).1" />
<Link Source="10286:[22110..22130).2" Target="10286:[21563..21583).2" />
<Link Source="10286:[22110..22130).2" Target="10319:[71597..71677).1" />
<Link Source="10286:[22156..22600).2" Target="10286:[21531..21544).2" />
<Link Source="10286:[22156..22600).2" Target="10286:[10010..10027).2" />
<Link Source="10286:[22156..22600).2" Target="10319:[71597..71677).1" />
<Link Source="10319:[71694..71825).1" Target="10287:[1787..1818).1" />
<Link Source="10319:[71694..71825).1" Target="10286:[10010..10027).2" />
<Link Source="10319:[71694..71825).1" Target="EXTERNAL" />
<Link Source="10319:[71694..71825).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71841..72158).1" Target="10319:[71694..71825).1" />
<Link Source="10319:[71841..72158).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[72286..72420).1" Target="10319:[71254..71280).1" />
<Link Source="10319:[72286..72420).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[72286..72420).2" Target="10319:[71295..71320).1" />
<Link Source="10319:[72286..72420).2" Target="10319:[21212..21313).1" />
<Link Source="10319:[72286..72420).3" Target="10319:[71335..71374).1" />
<Link Source="10319:[72286..72420).3" Target="10319:[21212..21313).1" />
<Link Source="10319:[72286..72420).4" Target="10319:[71389..71420).1" />
<Link Source="10319:[72286..72420).4" Target="10319:[21212..21313).1" />
<Link Source="10319:[72286..72420).5" Target="10287:[1787..1818).1" />
<Link Source="10319:[72286..72420).5" Target="10319:[21212..21313).1" />
<Link Source="10319:[72298..72419).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[39524..39547).1" Target="10319:[72286..72420).1" />
<Link Source="10319:[39524..39547).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[39562..39587).1" Target="10319:[72286..72420).2" />
<Link Source="10319:[39562..39587).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[39602..39641).1" Target="10319:[72286..72420).3" />
<Link Source="10319:[39602..39641).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[39656..39687).1" Target="10319:[72286..72420).4" />
<Link Source="10319:[39656..39687).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[39702..39743).1" Target="10319:[72286..72420).5" />
<Link Source="10319:[39702..39743).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[39419..41043).1" Target="10319:[71130..73408).1" />
<Link Source="10319:[39419..41043).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[40338..41032).1" Target="10319:[39524..39547).1" />
<Link Source="10319:[40338..41032).1" Target="10286:[10010..10027).2" />
<Link Source="10319:[40338..41032).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[40890..41017).1" Target="10319:[39524..39547).1" />
<Link Source="10319:[40890..41017).1" Target="10319:[40338..41032).1" />
<Link Source="10319:[40890..41017).2" Target="10319:[39562..39587).1" />
<Link Source="10319:[40890..41017).2" Target="10319:[40338..41032).1" />
<Link Source="10319:[40890..41017).3" Target="10319:[39602..39641).1" />
<Link Source="10319:[40890..41017).3" Target="10319:[40338..41032).1" />
<Link Source="10319:[40890..41017).4" Target="10319:[39702..39743).1" />
<Link Source="10319:[40890..41017).4" Target="10319:[40338..41032).1" />
<Link Source="10319:[40897..41016).1" Target="10319:[40338..41032).1" />
<Link Source="10319:[54444..54466).1" Target="10319:[40890..41017).1" />
<Link Source="10319:[54444..54466).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[54481..54506).1" Target="10319:[40890..41017).2" />
<Link Source="10319:[54481..54506).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[54521..54560).1" Target="10319:[40890..41017).3" />
<Link Source="10319:[54521..54560).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[54575..54609).1" Target="10319:[40890..41017).4" />
<Link Source="10319:[54575..54609).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[54356..60744).1" Target="10319:[39419..41043).1" />
<Link Source="10319:[54356..60744).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[57602..57644).1" Target="10319:[54444..54466).1" />
<Link Source="10319:[57602..57644).1" Target="10319:[40338..41032).1" />
<Link Source="10319:[57602..57644).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[57660..57740).1" Target="10319:[54444..54466).1" />
<Link Source="10319:[57660..57740).1" Target="10319:[40338..41032).1" />
<Link Source="10319:[57660..57740).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[57756..57807).1" Target="10319:[54444..54466).1" />
<Link Source="10319:[57756..57807).1" Target="10319:[40338..41032).1" />
<Link Source="10319:[57756..57807).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[57821..57907).1" Target="10319:[54444..54466).1" />
<Link Source="10319:[57821..57907).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[57821..57907).2" Target="10319:[40897..41016).1" />
<Link Source="10319:[57845..57906).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[50313..50328).2" Target="10319:[57821..57907).1" />
<Link Source="10319:[50313..50328).2" Target="10319:[57845..57906).1" />
<Link Source="10319:[50330..50355).2" Target="10319:[57821..57907).2" />
<Link Source="10319:[50330..50355).2" Target="10319:[57845..57906).1" />
<Link Source="10319:[57923..58084).1" Target="10319:[54481..54506).1" />
<Link Source="10319:[57923..58084).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[57923..58084).2" Target="10319:[54521..54560).1" />
<Link Source="10319:[57923..58084).2" Target="10319:[40897..41016).1" />
<Link Source="10319:[57923..58084).3" Target="10319:[54575..54609).1" />
<Link Source="10319:[57923..58084).3" Target="10319:[40897..41016).1" />
<Link Source="10319:[57923..58084).4" Target="10319:[54444..54466).1" />
<Link Source="10319:[57923..58084).4" Target="10319:[40897..41016).1" />
<Link Source="10319:[57923..58084).5" Target="10319:[57602..57644).1" />
<Link Source="10319:[57923..58084).5" Target="10319:[40897..41016).1" />
<Link Source="10319:[57923..58084).6" Target="10319:[54444..54466).1" />
<Link Source="10319:[57923..58084).6" Target="10319:[50313..50328).2" />
<Link Source="10319:[57923..58084).6" Target="10319:[40897..41016).1" />
<Link Source="10319:[57923..58084).7" Target="10319:[50313..50328).2" />
<Link Source="10319:[57923..58084).7" Target="10319:[40897..41016).1" />
<Link Source="10319:[57959..58083).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[60816..60841).1" Target="10319:[57923..58084).1" />
<Link Source="10319:[60816..60841).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[60856..60895).1" Target="10319:[57923..58084).2" />
<Link Source="10319:[60856..60895).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[60910..60944).1" Target="10319:[57923..58084).3" />
<Link Source="10319:[60910..60944).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[60959..60981).1" Target="10319:[57923..58084).4" />
<Link Source="10319:[60959..60981).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[60996..61012).1" Target="10319:[57923..58084).5" />
<Link Source="10319:[60996..61012).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61027..61036).1" Target="10319:[57923..58084).6" />
<Link Source="10319:[61027..61036).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61051..61072).1" Target="10319:[57923..58084).7" />
<Link Source="10319:[61051..61072).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[60756..63756).1" Target="10319:[54356..60744).1" />
<Link Source="10319:[60756..63756).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61098..61209).1" Target="10319:[60959..60981).1" />
<Link Source="10319:[61098..61209).1" Target="10319:[50313..50328).2" />
<Link Source="10319:[61098..61209).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61098..61209).2" Target="10319:[60910..60944).1" />
<Link Source="10319:[61098..61209).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[61098..61209).3" Target="10319:[60996..61012).1" />
<Link Source="10319:[61098..61209).3" Target="10319:[57959..58083).1" />
<Link Source="10319:[61098..61209).4" Target="10319:[61027..61036).1" />
<Link Source="10319:[61098..61209).4" Target="10319:[57959..58083).1" />
<Link Source="10319:[61098..61209).5" Target="10319:[60816..60841).1" />
<Link Source="10319:[61098..61209).5" Target="10319:[57959..58083).1" />
<Link Source="10319:[61116..61208).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[63849..63870).2" Target="10319:[61098..61209).1" />
<Link Source="10319:[63849..63870).2" Target="10319:[61116..61208).1" />
<Link Source="10319:[63885..63919).2" Target="10319:[61098..61209).2" />
<Link Source="10319:[63885..63919).2" Target="10319:[61116..61208).1" />
<Link Source="10319:[63934..63945).2" Target="10319:[61098..61209).3" />
<Link Source="10319:[63934..63945).2" Target="10319:[61116..61208).1" />
<Link Source="10319:[63960..63969).2" Target="10319:[61098..61209).4" />
<Link Source="10319:[63960..63969).2" Target="10319:[61116..61208).1" />
<Link Source="10319:[63984..64009).2" Target="10319:[61098..61209).5" />
<Link Source="10319:[63984..64009).2" Target="10319:[61116..61208).1" />
<Link Source="10319:[63768..64484).2" Target="10319:[60756..63756).1" />
<Link Source="10319:[63768..64484).2" Target="10319:[61116..61208).1" />
<Link Source="10319:[64035..64445).5" Target="10319:[61116..61208).1" />
<Link Source="10319:[64035..64445).6" Target="10319:[63885..63919).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[64035..64445).5" />
<Link Source="10319:[64035..64445).6" Target="10319:[61116..61208).1" />
<Link Source="10319:[64035..64445).7" Target="10319:[63885..63919).2" />
<Link Source="10319:[64035..64445).7" Target="10319:[50313..50328).2" />
<Link Source="10319:[64035..64445).7" Target="EXTERNAL" />
<Link Source="10319:[64035..64445).7" Target="10319:[61116..61208).1" />
<Link Source="10319:[64461..64473).3" Target="10319:[61116..61208).1" />
<Link Source="10319:[61098..61209).6" Target="10319:[64461..64473).3" />
<Link Source="10319:[61098..61209).6" Target="10319:[57959..58083).1" />
<Link Source="10319:[61223..61322).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61223..61322).2" Target="10319:[61098..61209).6" />
<Link Source="10319:[61223..61322).2" Target="10319:[61223..61322).1" />
<Link Source="10319:[61223..61322).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[61357..61383).1" Target="10319:[57959..58083).1" />
<Link Source="10354:[11244..11285).13" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).13" Target="10319:[50313..50328).2" />
<Link Source="10354:[11244..11285).13" Target="10319:[61357..61383).1" />
<Link Source="10354:[11312..11328).3" Target="10319:[61357..61383).1" />
<Link Source="10354:[3684..3818).9" Target="10354:[11244..11285).13" />
<Link Source="10354:[3684..3818).9" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).61" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).61" Target="10354:[11244..11285).13" />
<Link Source="10354:[3720..3803).61" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).61" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).62" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).63" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).63" Target="10354:[11244..11285).13" />
<Link Source="10354:[3720..3803).63" Target="10354:[3720..3803).62" />
<Link Source="10354:[3720..3803).63" Target="10354:[11312..11328).3" />
<Link Source="10354:[11299..11330).7" Target="10354:[3720..3803).61" />
<Link Source="10354:[11299..11330).7" Target="10319:[61357..61383).1" />
<Link Source="10319:[61338..61384).1" Target="10354:[11244..11285).13" />
<Link Source="10319:[61338..61384).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61398..61448).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).1" Target="10319:[61338..61384).1" />
<Link Source="10319:[61462..61626).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).2" Target="10319:[60910..60944).1" />
<Link Source="10319:[61462..61626).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).3" Target="10319:[60996..61012).1" />
<Link Source="10319:[61462..61626).3" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).4" Target="10319:[61027..61036).1" />
<Link Source="10319:[61462..61626).4" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).5" Target="10319:[60856..60895).1" />
<Link Source="10319:[61462..61626).5" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).6" Target="10319:[61051..61072).1" />
<Link Source="10319:[61462..61626).6" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).7" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).9" Target="10319:[61398..61448).1" />
<Link Source="10319:[61462..61626).9" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61625).1" Target="10319:[57959..58083).1" />
<Link Source="10312:[994..1013).2" Target="10319:[61462..61626).1" />
<Link Source="10312:[994..1013).2" Target="10319:[61462..61625).1" />
<Link Source="10312:[1028..1062).2" Target="10319:[61462..61626).2" />
<Link Source="10312:[1028..1062).2" Target="10319:[61462..61625).1" />
<Link Source="10312:[1077..1093).2" Target="10319:[61462..61626).3" />
<Link Source="10312:[1077..1093).2" Target="10319:[61462..61625).1" />
<Link Source="10312:[1108..1117).2" Target="10319:[61462..61626).4" />
<Link Source="10312:[1108..1117).2" Target="10319:[61462..61625).1" />
<Link Source="10312:[1132..1171).2" Target="10319:[61462..61626).5" />
<Link Source="10312:[1132..1171).2" Target="10319:[61462..61625).1" />
<Link Source="10312:[1186..1207).2" Target="10319:[61462..61626).6" />
<Link Source="10312:[1186..1207).2" Target="10319:[61462..61625).1" />
<Link Source="10312:[1222..1235).2" Target="10319:[61462..61626).7" />
<Link Source="10312:[1222..1235).2" Target="10319:[61462..61625).1" />
<Link Source="10312:[1250..1296).2" Target="10319:[61462..61626).9" />
<Link Source="10312:[1250..1296).2" Target="10319:[61462..61625).1" />
<Link Source="10312:[942..1750).2" Target="10319:[60756..63756).1" />
<Link Source="10312:[942..1750).2" Target="10319:[61462..61625).1" />
<Link Source="10312:[1585..1724).10" Target="10312:[994..1013).2" />
<Link Source="10312:[1585..1724).10" Target="10312:[1186..1207).2" />
<Link Source="10312:[1585..1724).11" Target="10312:[1028..1062).2" />
<Link Source="10312:[1585..1724).11" Target="10312:[1186..1207).2" />
<Link Source="10312:[1585..1724).12" Target="10312:[1077..1093).2" />
<Link Source="10312:[1585..1724).12" Target="10312:[1186..1207).2" />
<Link Source="10312:[1585..1724).13" Target="10312:[1108..1117).2" />
<Link Source="10312:[1585..1724).13" Target="10312:[1186..1207).2" />
<Link Source="10312:[1585..1724).14" Target="10312:[1132..1171).2" />
<Link Source="10312:[1585..1724).14" Target="10312:[1186..1207).2" />
<Link Source="10312:[1585..1724).16" Target="10312:[1222..1235).2" />
<Link Source="10312:[1585..1724).16" Target="10312:[1186..1207).2" />
<Link Source="10312:[1585..1724).17" Target="10312:[1250..1296).2" />
<Link Source="10312:[1585..1724).17" Target="10312:[1186..1207).2" />
<Link Source="10312:[5830..5839).2" Target="10312:[1585..1724).13" />
<Link Source="10312:[5830..5839).2" Target="10312:[1186..1207).2" />
<Link Source="10312:[5944..5957).2" Target="10312:[1585..1724).16" />
<Link Source="10312:[5944..5957).2" Target="10312:[1186..1207).2" />
<Link Source="10312:[5663..6444).2" Target="10312:[942..1750).2" />
<Link Source="10312:[5663..6444).2" Target="10312:[1186..1207).2" />
<Link Source="10312:[6287..6418).1" Target="10312:[1585..1724).10" />
<Link Source="10312:[6287..6418).1" Target="10312:[1585..1724).11" />
<Link Source="10312:[6287..6418).2" Target="10312:[1585..1724).11" />
<Link Source="10312:[6287..6418).3" Target="10312:[1585..1724).12" />
<Link Source="10312:[6287..6418).3" Target="10312:[1585..1724).11" />
<Link Source="10312:[6287..6418).4" Target="10312:[5830..5839).2" />
<Link Source="10312:[6287..6418).4" Target="10312:[1585..1724).11" />
<Link Source="10312:[6287..6418).5" Target="10312:[1585..1724).14" />
<Link Source="10312:[6287..6418).5" Target="10312:[1585..1724).11" />
<Link Source="10312:[6287..6418).6" Target="10312:[1186..1207).2" />
<Link Source="10312:[6287..6418).6" Target="10312:[1585..1724).11" />
<Link Source="10312:[6287..6418).7" Target="10312:[5663..6444).2" />
<Link Source="10312:[6287..6418).7" Target="10312:[1585..1724).11" />
<Link Source="10312:[6287..6418).8" Target="10312:[5944..5957).2" />
<Link Source="10312:[6287..6418).8" Target="10312:[1585..1724).11" />
<Link Source="10312:[6287..6418).9" Target="10312:[1585..1724).17" />
<Link Source="10312:[6287..6418).9" Target="10312:[1585..1724).11" />
<Link Source="10312:[6287..6417).1" Target="10312:[1585..1724).11" />
<Link Source="10312:[7652..7671).3" Target="10312:[6287..6418).1" />
<Link Source="10312:[7652..7671).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7673..7703).3" Target="10312:[6287..6418).2" />
<Link Source="10312:[7673..7703).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7705..7716).3" Target="10312:[6287..6418).3" />
<Link Source="10312:[7705..7716).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7718..7727).3" Target="10312:[6287..6418).4" />
<Link Source="10312:[7718..7727).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7729..7768).3" Target="10312:[6287..6418).5" />
<Link Source="10312:[7729..7768).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7770..7791).3" Target="10312:[6287..6418).6" />
<Link Source="10312:[7770..7791).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7793..7814).3" Target="10312:[6287..6418).7" />
<Link Source="10312:[7793..7814).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7816..7829).3" Target="10312:[6287..6418).8" />
<Link Source="10312:[7816..7829).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7831..7877).3" Target="10312:[6287..6418).9" />
<Link Source="10312:[7831..7877).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7615..8420).3" Target="10312:[5663..6444).2" />
<Link Source="10312:[7615..8420).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7903..7936).9" Target="10312:[7770..7791).3" />
<Link Source="10312:[7903..7936).9" Target="10312:[6287..6417).1" />
<Link Source="10312:[7916..7934).3" Target="10312:[6287..6417).1" />
<Link Source="10353:[4698..4724).4" Target="10312:[7903..7936).9" />
<Link Source="10353:[4698..4724).4" Target="10312:[7916..7934).3" />
<Link Source="10353:[4750..4847).7" Target="10353:[4698..4724).4" />
<Link Source="10353:[4750..4847).7" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).7" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).13" Target="10353:[4698..4724).4" />
<Link Source="10353:[4863..5000).13" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).13" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).14" Target="10312:[7916..7934).3" />
<Link Source="10353:[5079..5183).7" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).7" Target="10312:[7916..7934).3" />
<Link Source="10353:[5197..5323).10" Target="10353:[4698..4724).4" />
<Link Source="10353:[5197..5323).10" Target="10353:[5079..5183).7" />
<Link Source="10353:[5197..5323).10" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).19" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).19" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).20" Target="10353:[4698..4724).4" />
<Link Source="10353:[5485..5759).20" Target="10353:[5485..5759).19" />
<Link Source="10353:[5485..5759).20" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).21" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).13" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).13" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).15" Target="10353:[4698..4724).4" />
<Link Source="10353:[5775..5979).15" Target="10353:[5775..5979).13" />
<Link Source="10353:[5775..5979).15" Target="10312:[7916..7934).3" />
<Link Source="10353:[5995..6029).10" Target="10353:[5775..5979).15" />
<Link Source="10353:[5995..6029).10" Target="10312:[7916..7934).3" />
<Link Source="10353:[6002..6028).4" Target="10312:[7916..7934).3" />
<Link Source="10353:[6343..6358).4" Target="10353:[5995..6029).10" />
<Link Source="10353:[6343..6358).4" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).19" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6343..6358).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6384..6410).19" />
<Link Source="10353:[6384..6410).20" Target="10353:[6002..6028).4" />
<Link Source="10312:[7952..7977).9" Target="10312:[6287..6417).1" />
<Link Source="10312:[7952..7977).10" Target="10312:[7718..7727).3" />
<Link Source="10312:[7952..7977).10" Target="10312:[7952..7977).9" />
<Link Source="10312:[7952..7977).10" Target="10312:[6287..6417).1" />
<Link Source="10312:[7991..8409).3" Target="10312:[7673..7703).3" />
<Link Source="10312:[7991..8409).3" Target="10354:[11244..11285).13" />
<Link Source="10312:[7991..8409).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[8049..8181).12" Target="10312:[7705..7716).3" />
<Link Source="10312:[8049..8181).12" Target="10312:[7991..8409).3" />
<Link Source="10312:[8049..8181).13" Target="10312:[7718..7727).3" />
<Link Source="10312:[8049..8181).13" Target="10312:[7991..8409).3" />
<Link Source="10312:[8049..8181).15" Target="10312:[7793..7814).3" />
<Link Source="10312:[8049..8181).15" Target="10312:[7991..8409).3" />
<Link Source="10312:[8049..8181).16" Target="10312:[7816..7829).3" />
<Link Source="10312:[8049..8181).16" Target="10312:[7991..8409).3" />
<Link Source="10312:[8049..8181).17" Target="10312:[7831..7877).3" />
<Link Source="10312:[8049..8181).17" Target="10312:[7991..8409).3" />
<Link Source="10312:[19030..19039).2" Target="10312:[8049..8181).13" />
<Link Source="10312:[19030..19039).2" Target="10312:[7991..8409).3" />
<Link Source="10312:[19087..19100).2" Target="10312:[8049..8181).16" />
<Link Source="10312:[19087..19100).2" Target="10312:[7991..8409).3" />
<Link Source="10312:[61608..61629).4" Target="10312:[8049..8181).15" />
<Link Source="10312:[61608..61629).4" Target="10312:[7991..8409).3" />
<Link Source="10312:[19326..19460).13" Target="10312:[19030..19039).2" />
<Link Source="10312:[19326..19460).13" Target="10312:[8049..8181).12" />
<Link Source="10312:[19326..19460).17" Target="10312:[19087..19100).2" />
<Link Source="10312:[19326..19460).17" Target="10312:[8049..8181).12" />
<Link Source="10312:[19326..19460).18" Target="10312:[8049..8181).17" />
<Link Source="10312:[19326..19460).18" Target="10312:[8049..8181).12" />
<Link Source="10312:[63439..63448).2" Target="10312:[19326..19460).13" />
<Link Source="10312:[63439..63448).2" Target="10312:[8049..8181).12" />
<Link Source="10312:[63473..63501).2" Target="10312:[8049..8181).12" />
<Link Source="10312:[63503..63516).2" Target="10312:[19326..19460).17" />
<Link Source="10312:[63503..63516).2" Target="10312:[8049..8181).12" />
<Link Source="10312:[63566..63612).2" Target="10312:[8049..8181).12" />
<Link Source="10312:[63381..70761).2" Target="10312:[8049..8181).15" />
<Link Source="10312:[63381..70761).2" Target="10312:[8049..8181).12" />
<Link Source="10312:[63638..63668).2" Target="10312:[8049..8181).12" />
<Link Source="10312:[63682..63706).2" Target="10312:[8049..8181).12" />
<Link Source="10312:[64353..69285).9" Target="10312:[63439..63448).2" />
<Link Source="10312:[64353..69285).9" Target="10312:[63381..70761).2" />
<Link Source="10312:[64353..69285).10" Target="10312:[63503..63516).2" />
<Link Source="10312:[64353..69285).10" Target="10312:[63381..70761).2" />
<Link Source="10312:[64353..69285).12" Target="10312:[63682..63706).2" />
<Link Source="10312:[64353..69285).12" Target="10312:[63381..70761).2" />
<Link Source="10312:[80978..80991).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[80993..81002).2" Target="10312:[64353..69285).9" />
<Link Source="10312:[80993..81002).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[81004..81017).2" Target="10312:[64353..69285).10" />
<Link Source="10312:[81004..81017).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[81019..81040).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[81042..81069).2" Target="10312:[64353..69285).12" />
<Link Source="10312:[81042..81069).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[81095..84034).2" Target="10312:[80978..80991).2" />
<Link Source="10312:[81095..84034).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[81196..82523).1" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).2" Target="10312:[80993..81002).2" />
<Link Source="10312:[81196..82523).2" Target="10312:[81196..82523).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[81095..84034).2" />
<Link Source="10312:[81319..81371).1" Target="10312:[80978..80991).2" />
<Link Source="10312:[81319..81371).1" Target="10312:[81196..82523).2" />
<Link Source="10312:[81495..81570).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).1" Target="10312:[63381..70761).2" />
<Link Source="10312:[81495..81570).1" Target="10312:[81196..82523).2" />
<Link Source="10312:[81495..81570).2" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).2" Target="10312:[81196..82523).2" />
<Link Source="10312:[81596..82500).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81596..82500).1" Target="10312:[63381..70761).2" />
<Link Source="10312:[81596..82500).1" Target="10312:[80993..81002).2" />
<Link Source="10312:[81596..82500).1" Target="10312:[81196..82523).2" />
<Link Source="10312:[81596..82500).2" Target="10312:[81019..81040).2" />
<Link Source="10312:[81596..82500).2" Target="10312:[81196..82523).2" />
<Link Source="10312:[81628..81659).1" Target="10312:[81196..82523).2" />
<Link Source="10353:[7504..7530).3" Target="10312:[81596..82500).2" />
<Link Source="10353:[7504..7530).3" Target="10312:[81628..81659).1" />
<Link Source="10312:[81596..82500).5" Target="10312:[81596..82500).1" />
<Link Source="10312:[81596..82500).5" Target="10353:[7504..7530).3" />
<Link Source="10312:[81596..82500).5" Target="10312:[81196..82523).2" />
<Link Source="10312:[84050..84066).3" Target="10312:[63381..70761).2" />
<Link Source="10312:[66177..69285).16" Target="10312:[63473..63501).2" />
<Link Source="10312:[66177..69285).16" Target="10312:[63381..70761).2" />
<Link Source="10312:[66291..66342).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[75301..75322).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[75301..75322).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75324..75352).2" Target="10312:[66177..69285).16" />
<Link Source="10312:[75324..75352).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).6" Target="10312:[75301..75322).2" />
<Link Source="10312:[75735..75866).6" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).6" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).7" Target="10312:[66291..66342).2" />
<Link Source="10312:[75742..75804).2" Target="10312:[75735..75866).6" />
<Link Source="10312:[75742..75804).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75324..75352).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75742..75804).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[63638..63668).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[63381..70761).2" />
<Link Source="10312:[66177..69285).20" Target="10312:[19326..19460).18" />
<Link Source="10312:[66177..69285).20" Target="10312:[63381..70761).2" />
<Link Source="10312:[66177..69285).21" Target="10312:[63566..63612).2" />
<Link Source="10312:[66177..69285).21" Target="10312:[63381..70761).2" />
<Link Source="10312:[77543..77571).2" Target="10312:[75735..75866).9" />
<Link Source="10312:[77543..77571).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[77573..77604).2" Target="10312:[66177..69285).19" />
<Link Source="10312:[77573..77604).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[77654..77700).2" Target="10312:[66177..69285).21" />
<Link Source="10312:[77654..77700).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[77726..77892).5" Target="10312:[63381..70761).2" />
<Link Source="10312:[77726..77892).6" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).6" Target="10312:[63381..70761).2" />
<Link Source="10312:[77730..77782).2" Target="10312:[63381..70761).2" />
<Link Source="10298:[471..492).30" Target="10312:[77726..77892).5" />
<Link Source="10298:[471..492).30" Target="10312:[77730..77782).2" />
<Link Source="10298:[494..511).30" Target="10312:[77726..77892).6" />
<Link Source="10298:[494..511).30" Target="10312:[77730..77782).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[77543..77571).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[78432..78463).2" Target="10312:[77573..77604).2" />
<Link Source="10312:[78432..78463).2" Target="10312:[63381..70761).2" />
<Link Source="10312:[78513..78552).2" Target="10312:[77654..77700).2" />
<Link Source="10312:[78513..78552).2" Target="10312:[63381..70761).2" />
<Link Source="10346:[8034..8062).2" Target="10312:[78402..78430).2" />
<Link Source="10346:[8034..8062).2" Target="10312:[63381..70761).2" />
<Link Source="10346:[8064..8095).2" Target="10312:[78432..78463).2" />
<Link Source="10346:[8064..8095).2" Target="10312:[63381..70761).2" />
<Link Source="10346:[8145..8184).2" Target="10312:[78513..78552).2" />
<Link Source="10346:[8145..8184).2" Target="10312:[63381..70761).2" />
<Link Source="10286:[30098..30120).2" Target="10312:[63381..70761).2" />
<Link Source="10286:[30135..30160).2" Target="10346:[8034..8062).2" />
<Link Source="10286:[30135..30160).2" Target="10312:[63381..70761).2" />
<Link Source="10286:[30175..30206).2" Target="10346:[8064..8095).2" />
<Link Source="10286:[30175..30206).2" Target="10312:[63381..70761).2" />
<Link Source="10286:[30283..30330).2" Target="10312:[63381..70761).2" />
<Link Source="10286:[30012..30691).2" Target="10312:[63381..70761).2" />
<Link Source="10286:[30356..30522).5" Target="10286:[30012..30691).2" />
<Link Source="10286:[30356..30522).5" Target="10312:[63381..70761).2" />
<Link Source="10286:[30356..30522).6" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).6" Target="10312:[63381..70761).2" />
<Link Source="10286:[30360..30412).2" Target="10312:[63381..70761).2" />
<Link Source="10298:[471..492).31" Target="10286:[30356..30522).5" />
<Link Source="10298:[471..492).31" Target="10286:[30360..30412).2" />
<Link Source="10298:[494..511).31" Target="10286:[30356..30522).6" />
<Link Source="10298:[494..511).31" Target="10286:[30360..30412).2" />
<Link Source="10060:[2136..2158).2" Target="10286:[30098..30120).2" />
<Link Source="10060:[2136..2158).2" Target="10312:[63381..70761).2" />
<Link Source="10060:[2173..2198).2" Target="10286:[30135..30160).2" />
<Link Source="10060:[2173..2198).2" Target="10312:[63381..70761).2" />
<Link Source="10060:[2213..2244).2" Target="10286:[30175..30206).2" />
<Link Source="10060:[2213..2244).2" Target="10312:[63381..70761).2" />
<Link Source="10060:[2320..2366).2" Target="10286:[30283..30330).2" />
<Link Source="10060:[2320..2366).2" Target="10312:[63381..70761).2" />
<Link Source="10060:[5621..5634).2" Target="10060:[2136..2158).2" />
<Link Source="10060:[5621..5634).2" Target="10312:[63381..70761).2" />
<Link Source="10060:[5691..5716).2" Target="10060:[2173..2198).2" />
<Link Source="10060:[5691..5716).2" Target="10312:[63381..70761).2" />
<Link Source="10060:[5731..5762).2" Target="10060:[2213..2244).2" />
<Link Source="10060:[5731..5762).2" Target="10312:[63381..70761).2" />
<Link Source="10060:[5777..5806).2" Target="10060:[2136..2158).2" />
<Link Source="10060:[5777..5806).2" Target="10312:[63381..70761).2" />
<Link Source="10060:[5882..5928).2" Target="10060:[2320..2366).2" />
<Link Source="10060:[5882..5928).2" Target="10312:[63381..70761).2" />
<Link Source="10060:[5954..5991).5" Target="10312:[63381..70761).2" />
<Link Source="10060:[6005..6042).5" Target="10312:[63381..70761).2" />
<Link Source="10060:[6005..6042).6" Target="10060:[5621..5634).2" />
<Link Source="10060:[6005..6042).6" Target="10060:[6005..6042).5" />
<Link Source="10060:[6005..6042).6" Target="10312:[63381..70761).2" />
<Link Source="10060:[6056..6090).3" Target="10060:[5621..5634).2" />
<Link Source="10060:[6056..6090).3" Target="10312:[63381..70761).2" />
<Link Source="10060:[6104..6172).4" Target="10060:[5621..5634).2" />
<Link Source="10060:[6104..6172).4" Target="10312:[63381..70761).2" />
<Link Source="10060:[6188..6219).3" Target="10312:[63381..70761).2" />
<Link Source="10060:[6814..6920).1" Target="10312:[63381..70761).2" />
<Link Source="10060:[6814..6920).2" Target="10060:[5621..5634).2" />
<Link Source="10060:[6814..6920).2" Target="10312:[63381..70761).2" />
<Link Source="10060:[6814..6920).3" Target="10312:[66177..69285).20" />
<Link Source="10060:[6814..6920).3" Target="10312:[63381..70761).2" />
<Link Source="10060:[6814..6920).4" Target="10060:[5882..5928).2" />
<Link Source="10060:[6814..6920).4" Target="10312:[63381..70761).2" />
<Link Source="10060:[6821..6919).1" Target="10312:[63381..70761).2" />
<Link Source="10060:[10180..10200).1" Target="10060:[6814..6920).1" />
<Link Source="10060:[10180..10200).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10202..10215).1" Target="10060:[6814..6920).2" />
<Link Source="10060:[10202..10215).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10217..10263).1" Target="10060:[6814..6920).3" />
<Link Source="10060:[10217..10263).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10265..10311).1" Target="10060:[6814..6920).4" />
<Link Source="10060:[10265..10311).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10180..10200).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10419..10454).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[10470..10516).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10470..10516).1" Target="10312:[63381..70761).2" />
<Link Source="10060:[10470..10516).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10532..10544).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10558..11295).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[10558..11295).1" Target="10312:[63381..70761).2" />
<Link Source="10060:[10558..11295).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11311..11352).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[11311..11352).1" Target="10312:[63381..70761).2" />
<Link Source="10060:[11311..11352).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11311..11352).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11366..11675).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[11373..11403).1" Target="10060:[11366..11675).2" />
<Link Source="10060:[11373..11403).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[10202..10215).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[11373..11403).1" />
<Link Source="10060:[11423..11509).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12078..12091).1" Target="10060:[11366..11675).5" />
<Link Source="10060:[12078..12091).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[12078..12091).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11990..12013).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[12199..12238).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11423..11509).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[12028..12063).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12494..12506).1" Target="10060:[12254..13527).1" />
<Link Source="10354:[10192..10676).2" Target="10312:[7652..7671).3" />
<Link Source="10354:[10192..10676).2" Target="10312:[8049..8181).12" />
<Link Source="10354:[4094..4107).22" Target="10354:[10192..10676).2" />
<Link Source="10354:[4094..4107).22" Target="10060:[12494..12506).1" />
<Link Source="10354:[4094..4107).22" Target="10312:[8049..8181).12" />
<Link Source="10312:[19326..19460).24" Target="10312:[19030..19039).2" />
<Link Source="10312:[19326..19460).24" Target="10354:[4094..4107).22" />
<Link Source="10312:[19326..19460).28" Target="10312:[19087..19100).2" />
<Link Source="10312:[19326..19460).28" Target="10354:[4094..4107).22" />
<Link Source="10312:[19326..19460).29" Target="10060:[10217..10263).1" />
<Link Source="10312:[19326..19460).29" Target="10354:[4094..4107).22" />
<Link Source="10312:[63439..63448).3" Target="10312:[19326..19460).24" />
<Link Source="10312:[63439..63448).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[63473..63501).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[63503..63516).3" Target="10312:[19326..19460).28" />
<Link Source="10312:[63503..63516).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[63566..63612).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[63638..63668).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[63682..63706).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[80978..80991).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[80993..81002).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[80993..81002).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[81004..81017).3" Target="10312:[63503..63516).3" />
<Link Source="10312:[81004..81017).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[81019..81040).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[81042..81069).3" Target="10312:[63682..63706).3" />
<Link Source="10312:[81042..81069).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[81095..84034).3" Target="10312:[80978..80991).3" />
<Link Source="10312:[81095..84034).3" Target="10354:[4094..4107).22" />
<Link Source="10312:[81196..82523).5" Target="10312:[81095..84034).3" />
<Link Source="10312:[81196..82523).6" Target="10312:[80993..81002).3" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).5" />
<Link Source="10312:[81196..82523).6" Target="10312:[81095..84034).3" />
<Link Source="10312:[81319..81371).2" Target="10312:[80978..80991).3" />
<Link Source="10312:[81319..81371).2" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).6" Target="10312:[81319..81371).2" />
<Link Source="10312:[81495..81570).6" Target="10354:[4094..4107).22" />
<Link Source="10312:[81495..81570).6" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).7" Target="10312:[81319..81371).2" />
<Link Source="10312:[81495..81570).7" Target="10312:[81196..82523).6" />
<Link Source="10312:[81596..82500).7" Target="10312:[81319..81371).2" />
<Link Source="10312:[81596..82500).7" Target="10354:[4094..4107).22" />
<Link Source="10312:[81596..82500).7" Target="10312:[80993..81002).3" />
<Link Source="10312:[81596..82500).7" Target="10312:[81196..82523).6" />
<Link Source="10312:[81731..82431).1" Target="10312:[81596..82500).7" />
<Link Source="10312:[81929..81937).1" Target="10312:[81004..81017).3" />
<Link Source="10312:[81929..81937).1" Target="10312:[81731..82431).1" />
<Link Source="10312:[81918..82042).1" Target="EXTERNAL" />
<Link Source="10312:[81918..82042).1" Target="10312:[81929..81937).1" />
<Link Source="10312:[81918..82042).2" Target="10312:[81929..81937).1" />
<Link Source="10312:[81940..82034).1" Target="10312:[81319..81371).2" />
<Link Source="10312:[81940..82034).1" Target="10312:[81918..82042).2" />
<Link Source="10312:[81940..82034).1" Target="10312:[81929..81937).1" />
<Link Source="10312:[81940..82034).2" Target="10312:[81918..82042).1" />
<Link Source="10312:[81940..82034).2" Target="10312:[81918..82042).2" />
<Link Source="10312:[81940..82034).2" Target="10312:[81929..81937).1" />
<Link Source="10312:[82461..82473).1" Target="10312:[81596..82500).7" />
<Link Source="10312:[64449..64498).1" Target="10354:[4094..4107).22" />
<Link Source="10312:[64449..64498).1" Target="10312:[82461..82473).1" />
<Link Source="10312:[64449..64498).2" Target="10312:[81940..82034).1" />
<Link Source="10312:[64449..64498).2" Target="10312:[82461..82473).1" />
<Link Source="10312:[64456..64497).1" Target="10312:[82461..82473).1" />
<Link Source="10354:[5577..5590).1" Target="10312:[64449..64498).1" />
<Link Source="10354:[5577..5590).1" Target="10312:[64456..64497).1" />
<Link Source="10354:[5592..5612).1" Target="10312:[64449..64498).2" />
<Link Source="10354:[5592..5612).1" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).1" Target="EXTERNAL" />
<Link Source="10354:[5638..5712).1" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).2" Target="10354:[5577..5590).1" />
<Link Source="10354:[5638..5712).2" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).3" Target="10354:[5592..5612).1" />
<Link Source="10354:[5638..5712).3" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).4" Target="10312:[64456..64497).1" />
<Link Source="10354:[5645..5711).1" Target="10312:[64456..64497).1" />
<Link Source="10368:[1076..1097).3" Target="10354:[5638..5712).1" />
<Link Source="10368:[1076..1097).3" Target="10354:[5645..5711).1" />
<Link Source="10368:[1099..1112).3" Target="10354:[5638..5712).2" />
<Link Source="10368:[1099..1112).3" Target="10354:[5645..5711).1" />
<Link Source="10368:[1114..1134).3" Target="10354:[5638..5712).3" />
<Link Source="10368:[1114..1134).3" Target="10354:[5645..5711).1" />
<Link Source="10368:[1048..1256).3" Target="10354:[5638..5712).4" />
<Link Source="10368:[1048..1256).3" Target="10354:[5645..5711).1" />
<Link Source="10312:[64449..64498).3" Target="10354:[5638..5712).4" />
<Link Source="10312:[64449..64498).3" Target="10312:[82461..82473).1" />
<Link Source="10354:[10268..10665).8" Target="10312:[81940..82034).1" />
<Link Source="10354:[10268..10665).8" Target="10312:[64449..64498).3" />
<Link Source="10354:[10268..10665).8" Target="10368:[1076..1097).3" />
<Link Source="10354:[10268..10665).8" Target="10354:[4094..4107).22" />
<Link Source="10312:[19326..19460).40" Target="10312:[19326..19460).29" />
<Link Source="10312:[19326..19460).40" Target="10312:[81940..82034).1" />
<Link Source="10312:[63473..63501).4" Target="10312:[81940..82034).1" />
<Link Source="10312:[63566..63612).4" Target="10312:[81940..82034).1" />
<Link Source="10312:[63638..63668).4" Target="10312:[81940..82034).1" />
<Link Source="10312:[63682..63706).4" Target="10312:[81940..82034).1" />
<Link Source="10312:[81019..81040).4" Target="10312:[81940..82034).1" />
<Link Source="10312:[81042..81069).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[81042..81069).4" Target="10312:[81940..82034).1" />
<Link Source="10312:[81495..81570).11" Target="10312:[81940..82034).1" />
<Link Source="10312:[82275..82283).1" Target="10312:[81940..82034).1" />
<Link Source="10312:[82264..82400).1" Target="EXTERNAL" />
<Link Source="10312:[82264..82400).1" Target="10312:[82275..82283).1" />
<Link Source="10312:[82264..82400).2" Target="10312:[82275..82283).1" />
<Link Source="10312:[82286..82392).1" Target="10312:[81940..82034).1" />
<Link Source="10312:[82286..82392).1" Target="10312:[82264..82400).2" />
<Link Source="10312:[82286..82392).1" Target="10312:[82275..82283).1" />
<Link Source="10312:[82286..82392).2" Target="10312:[82264..82400).1" />
<Link Source="10312:[82286..82392).2" Target="10312:[82264..82400).2" />
<Link Source="10312:[82286..82392).2" Target="10312:[82275..82283).1" />
<Link Source="10312:[82461..82473).3" Target="10312:[81940..82034).1" />
<Link Source="10312:[64449..64498).5" Target="10312:[81940..82034).1" />
<Link Source="10312:[64449..64498).5" Target="10312:[82461..82473).3" />
<Link Source="10312:[64449..64498).6" Target="10312:[82286..82392).1" />
<Link Source="10312:[64449..64498).6" Target="10312:[82461..82473).3" />
<Link Source="10312:[64456..64497).2" Target="10312:[82461..82473).3" />
<Link Source="10354:[5577..5590).2" Target="10312:[64449..64498).5" />
<Link Source="10354:[5577..5590).2" Target="10312:[64456..64497).2" />
<Link Source="10354:[5592..5612).2" Target="10312:[64449..64498).6" />
<Link Source="10354:[5592..5612).2" Target="10312:[64456..64497).2" />
<Link Source="10354:[5638..5712).6" Target="EXTERNAL" />
<Link Source="10354:[5638..5712).6" Target="10312:[64456..64497).2" />
<Link Source="10354:[5638..5712).7" Target="10354:[5577..5590).2" />
<Link Source="10354:[5638..5712).7" Target="10312:[64456..64497).2" />
<Link Source="10354:[5638..5712).8" Target="10354:[5592..5612).2" />
<Link Source="10354:[5638..5712).8" Target="10312:[64456..64497).2" />
<Link Source="10354:[5638..5712).9" Target="10312:[64456..64497).2" />
<Link Source="10354:[5645..5711).2" Target="10312:[64456..64497).2" />
<Link Source="10368:[1076..1097).4" Target="10354:[5638..5712).6" />
<Link Source="10368:[1076..1097).4" Target="10354:[5645..5711).2" />
<Link Source="10368:[1099..1112).4" Target="10354:[5638..5712).7" />
<Link Source="10368:[1099..1112).4" Target="10354:[5645..5711).2" />
<Link Source="10368:[1114..1134).4" Target="10354:[5638..5712).8" />
<Link Source="10368:[1114..1134).4" Target="10354:[5645..5711).2" />
<Link Source="10368:[1048..1256).4" Target="10354:[5638..5712).9" />
<Link Source="10368:[1048..1256).4" Target="10354:[5645..5711).2" />
<Link Source="10312:[64449..64498).7" Target="10354:[5638..5712).9" />
<Link Source="10312:[64449..64498).7" Target="10312:[82461..82473).3" />
<Link Source="10354:[10268..10665).11" Target="10312:[82286..82392).1" />
<Link Source="10354:[10268..10665).11" Target="10312:[64449..64498).7" />
<Link Source="10354:[10268..10665).11" Target="10368:[1076..1097).4" />
<Link Source="10354:[10268..10665).11" Target="10312:[81940..82034).1" />
<Link Source="10312:[19326..19460).51" Target="10312:[19326..19460).40" />
<Link Source="10312:[19326..19460).51" Target="10312:[82286..82392).1" />
<Link Source="10312:[63473..63501).5" Target="10312:[82286..82392).1" />
<Link Source="10312:[63566..63612).5" Target="10312:[82286..82392).1" />
<Link Source="10312:[63638..63668).5" Target="10312:[82286..82392).1" />
<Link Source="10312:[63682..63706).5" Target="10312:[82286..82392).1" />
<Link Source="10312:[81019..81040).5" Target="10312:[82286..82392).1" />
<Link Source="10312:[81042..81069).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[81042..81069).5" Target="10312:[82286..82392).1" />
<Link Source="10312:[81495..81570).16" Target="10312:[82286..82392).1" />
<Link Source="10312:[82461..82473).5" Target="10312:[82286..82392).1" />
<Link Source="10312:[64449..64498).9" Target="10312:[82286..82392).1" />
<Link Source="10312:[64449..64498).9" Target="10312:[82461..82473).5" />
<Link Source="10312:[64456..64497).3" Target="10312:[82461..82473).5" />
<Link Source="10354:[5577..5590).3" Target="10312:[64449..64498).9" />
<Link Source="10354:[5577..5590).3" Target="10312:[64456..64497).3" />
<Link Source="10354:[5592..5612).3" Target="10312:[64449..64498).9" />
<Link Source="10354:[5592..5612).3" Target="10312:[64456..64497).3" />
<Link Source="10354:[5638..5712).11" Target="EXTERNAL" />
<Link Source="10354:[5638..5712).11" Target="10312:[64456..64497).3" />
<Link Source="10354:[5638..5712).12" Target="10354:[5577..5590).3" />
<Link Source="10354:[5638..5712).12" Target="10312:[64456..64497).3" />
<Link Source="10354:[5638..5712).13" Target="10354:[5592..5612).3" />
<Link Source="10354:[5638..5712).13" Target="10312:[64456..64497).3" />
<Link Source="10354:[5638..5712).14" Target="10312:[64456..64497).3" />
<Link Source="10354:[5645..5711).3" Target="10312:[64456..64497).3" />
<Link Source="10368:[1076..1097).5" Target="10354:[5638..5712).11" />
<Link Source="10368:[1076..1097).5" Target="10354:[5645..5711).3" />
<Link Source="10368:[1099..1112).5" Target="10354:[5638..5712).12" />
<Link Source="10368:[1099..1112).5" Target="10354:[5645..5711).3" />
<Link Source="10368:[1114..1134).5" Target="10354:[5638..5712).13" />
<Link Source="10368:[1114..1134).5" Target="10354:[5645..5711).3" />
<Link Source="10368:[1048..1256).5" Target="10354:[5638..5712).14" />
<Link Source="10368:[1048..1256).5" Target="10354:[5645..5711).3" />
<Link Source="10312:[64449..64498).11" Target="10354:[5638..5712).14" />
<Link Source="10312:[64449..64498).11" Target="10312:[82461..82473).5" />
<Link Source="10354:[10268..10665).14" Target="10312:[82286..82392).1" />
<Link Source="10354:[10268..10665).14" Target="10312:[64449..64498).11" />
<Link Source="10354:[10268..10665).14" Target="10368:[1076..1097).5" />
<Link Source="10312:[81019..81040).6" Target="10312:[63682..63706).5" />
<Link Source="10312:[81019..81040).6" Target="10312:[82286..82392).1" />
<Link Source="10312:[81495..81570).21" Target="10312:[63682..63706).5" />
<Link Source="10312:[81495..81570).21" Target="10312:[82286..82392).1" />
<Link Source="10312:[81495..81570).22" Target="10312:[63682..63706).5" />
<Link Source="10312:[82461..82473).7" Target="10312:[63682..63706).5" />
<Link Source="10312:[64449..64498).13" Target="10312:[82286..82392).1" />
<Link Source="10312:[64449..64498).13" Target="10312:[82461..82473).7" />
<Link Source="10312:[64449..64498).14" Target="10312:[63682..63706).5" />
<Link Source="10312:[64449..64498).14" Target="10312:[82461..82473).7" />
<Link Source="10312:[64456..64497).4" Target="10312:[82461..82473).7" />
<Link Source="10354:[5577..5590).4" Target="10312:[64449..64498).13" />
<Link Source="10354:[5577..5590).4" Target="10312:[64456..64497).4" />
<Link Source="10354:[5592..5612).4" Target="10312:[64449..64498).14" />
<Link Source="10354:[5592..5612).4" Target="10312:[64456..64497).4" />
<Link Source="10354:[5638..5712).16" Target="EXTERNAL" />
<Link Source="10354:[5638..5712).16" Target="10312:[64456..64497).4" />
<Link Source="10354:[5638..5712).17" Target="10354:[5577..5590).4" />
<Link Source="10354:[5638..5712).17" Target="10312:[64456..64497).4" />
<Link Source="10354:[5638..5712).18" Target="10354:[5592..5612).4" />
<Link Source="10354:[5638..5712).18" Target="10312:[64456..64497).4" />
<Link Source="10354:[5638..5712).19" Target="10312:[64456..64497).4" />
<Link Source="10354:[5645..5711).4" Target="10312:[64456..64497).4" />
<Link Source="10368:[1076..1097).6" Target="10354:[5638..5712).16" />
<Link Source="10368:[1076..1097).6" Target="10354:[5645..5711).4" />
<Link Source="10368:[1099..1112).6" Target="10354:[5638..5712).17" />
<Link Source="10368:[1099..1112).6" Target="10354:[5645..5711).4" />
<Link Source="10368:[1114..1134).6" Target="10354:[5638..5712).18" />
<Link Source="10368:[1114..1134).6" Target="10354:[5645..5711).4" />
<Link Source="10368:[1048..1256).6" Target="10354:[5638..5712).19" />
<Link Source="10368:[1048..1256).6" Target="10354:[5645..5711).4" />
<Link Source="10312:[64449..64498).15" Target="10354:[5638..5712).19" />
<Link Source="10312:[64449..64498).15" Target="10312:[82461..82473).7" />
<Link Source="10354:[10268..10665).17" Target="10312:[63682..63706).5" />
<Link Source="10354:[10268..10665).17" Target="10312:[64449..64498).15" />
<Link Source="10354:[10268..10665).17" Target="10368:[1076..1097).6" />
<Link Source="10354:[10268..10665).17" Target="10312:[82286..82392).1" />
<Link Source="10312:[19326..19460).73" Target="10312:[19326..19460).51" />
<Link Source="10312:[19326..19460).73" Target="10312:[63682..63706).5" />
<Link Source="10312:[63473..63501).7" Target="10312:[63682..63706).5" />
<Link Source="10312:[63566..63612).7" Target="10312:[63682..63706).5" />
<Link Source="10312:[63638..63668).7" Target="10312:[63682..63706).5" />
<Link Source="10312:[81019..81040).7" Target="10312:[82461..82473).7" />
<Link Source="10312:[81019..81040).7" Target="10312:[63682..63706).5" />
<Link Source="10312:[81042..81069).7" Target="10312:[82461..82473).7" />
<Link Source="10312:[81042..81069).7" Target="10312:[63682..63706).5" />
<Link Source="10312:[81495..81570).26" Target="10312:[82461..82473).7" />
<Link Source="10312:[81495..81570).26" Target="10312:[63682..63706).5" />
<Link Source="10312:[81495..81570).27" Target="10312:[82461..82473).7" />
<Link Source="10312:[64449..64498).18" Target="10312:[82461..82473).7" />
<Link Source="10354:[5577..5590).5" Target="10312:[64449..64498).14" />
<Link Source="10354:[5577..5590).5" Target="10312:[64456..64497).4" />
<Link Source="10354:[5592..5612).5" Target="10312:[64449..64498).18" />
<Link Source="10354:[5592..5612).5" Target="10312:[64456..64497).4" />
<Link Source="10354:[5638..5712).22" Target="10354:[5577..5590).5" />
<Link Source="10354:[5638..5712).22" Target="10312:[64456..64497).4" />
<Link Source="10354:[5638..5712).23" Target="10354:[5592..5612).5" />
<Link Source="10354:[5638..5712).23" Target="10312:[64456..64497).4" />
<Link Source="10368:[1099..1112).7" Target="10354:[5638..5712).22" />
<Link Source="10368:[1099..1112).7" Target="10354:[5645..5711).4" />
<Link Source="10368:[1114..1134).7" Target="10354:[5638..5712).23" />
<Link Source="10368:[1114..1134).7" Target="10354:[5645..5711).4" />
<Link Source="10354:[10268..10665).20" Target="10312:[82461..82473).7" />
<Link Source="10354:[10268..10665).20" Target="10312:[64449..64498).15" />
<Link Source="10354:[10268..10665).20" Target="10368:[1076..1097).6" />
<Link Source="10354:[10268..10665).20" Target="10312:[63682..63706).5" />
<Link Source="10312:[19326..19460).84" Target="10312:[19326..19460).73" />
<Link Source="10312:[19326..19460).84" Target="10312:[82461..82473).7" />
<Link Source="10312:[63473..63501).8" Target="10312:[82461..82473).7" />
<Link Source="10312:[63566..63612).8" Target="10312:[82461..82473).7" />
<Link Source="10312:[63638..63668).8" Target="10312:[82461..82473).7" />
<Link Source="10312:[81019..81040).8" Target="10312:[82461..82473).7" />
<Link Source="10312:[81042..81069).8" Target="10312:[82461..82473).7" />
<Link Source="10354:[5577..5590).6" Target="10312:[64449..64498).18" />
<Link Source="10354:[5577..5590).6" Target="10312:[64456..64497).4" />
<Link Source="10354:[5638..5712).27" Target="10354:[5577..5590).6" />
<Link Source="10354:[5638..5712).27" Target="10312:[64456..64497).4" />
<Link Source="10368:[1099..1112).8" Target="10354:[5638..5712).27" />
<Link Source="10368:[1099..1112).8" Target="10354:[5645..5711).4" />
<Link Source="10354:[10268..10665).23" Target="10312:[82461..82473).7" />
<Link Source="10354:[10268..10665).23" Target="10312:[64449..64498).15" />
<Link Source="10354:[10268..10665).23" Target="10368:[1076..1097).6" />
<Link Source="10319:[61640..61682).1" Target="10319:[60816..60841).1" />
<Link Source="10319:[61640..61682).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61640..61682).2" Target="10319:[60959..60981).1" />
<Link Source="10319:[61640..61682).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[61640..61682).3" Target="10312:[19326..19460).84" />
<Link Source="10319:[61640..61682).3" Target="10319:[57959..58083).1" />
<Link Source="10319:[61640..61682).4" Target="10319:[61640..61682).1" />
<Link Source="10319:[61640..61682).4" Target="10319:[61640..61682).2" />
<Link Source="10319:[61640..61682).4" Target="10319:[61640..61682).3" />
<Link Source="10319:[61640..61682).4" Target="10312:[82461..82473).7" />
<Link Source="10319:[61640..61682).4" Target="10319:[57959..58083).1" />
<Link Source="10319:[61698..61712).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).1" Target="10319:[61338..61384).1" />
<Link Source="10319:[61726..61885).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).2" Target="10319:[60996..61012).1" />
<Link Source="10319:[61726..61885).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).3" Target="10319:[61027..61036).1" />
<Link Source="10319:[61726..61885).3" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).4" Target="10319:[60959..60981).1" />
<Link Source="10319:[61726..61885).4" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).5" Target="10319:[60816..60841).1" />
<Link Source="10319:[61726..61885).5" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).6" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).7" Target="10319:[60856..60895).1" />
<Link Source="10319:[61726..61885).7" Target="10319:[61726..61885).6" />
<Link Source="10319:[61726..61885).7" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).9" Target="10319:[61698..61712).1" />
<Link Source="10319:[61726..61885).9" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).10" Target="10319:[60910..60944).1" />
<Link Source="10319:[61726..61885).10" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).11" Target="10319:[61051..61072).1" />
<Link Source="10319:[61726..61885).11" Target="10319:[57959..58083).1" />
<Link Source="10319:[61754..61884).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[84167..84186).2" Target="10319:[61726..61885).1" />
<Link Source="10319:[84167..84186).2" Target="10319:[61754..61884).1" />
<Link Source="10319:[84201..84218).2" Target="10319:[61726..61885).2" />
<Link Source="10319:[84201..84218).2" Target="10319:[61754..61884).1" />
<Link Source="10319:[84233..84242).2" Target="10319:[61726..61885).3" />
<Link Source="10319:[84233..84242).2" Target="10319:[61754..61884).1" />
<Link Source="10319:[84257..84273).2" Target="10319:[61726..61885).4" />
<Link Source="10319:[84257..84273).2" Target="10319:[61754..61884).1" />
<Link Source="10319:[84288..84313).2" Target="10319:[61726..61885).5" />
<Link Source="10319:[84288..84313).2" Target="10319:[61754..61884).1" />
<Link Source="10319:[84328..84359).2" Target="10319:[61726..61885).7" />
<Link Source="10319:[84328..84359).2" Target="10319:[61754..61884).1" />
<Link Source="10319:[84374..84391).2" Target="10319:[61726..61885).9" />
<Link Source="10319:[84374..84391).2" Target="10319:[61754..61884).1" />
<Link Source="10319:[84406..84447).2" Target="10319:[61726..61885).10" />
<Link Source="10319:[84406..84447).2" Target="10319:[61754..61884).1" />
<Link Source="10319:[84462..84508).2" Target="10319:[61726..61885).11" />
<Link Source="10319:[84462..84508).2" Target="10319:[61754..61884).1" />
<Link Source="10319:[84124..109887).2" Target="10319:[60756..63756).1" />
<Link Source="10319:[84124..109887).2" Target="10319:[61754..61884).1" />
<Link Source="10319:[85320..85348).5" Target="10319:[61754..61884).1" />
<Link Source="10319:[85320..85348).6" Target="10319:[84257..84273).2" />
<Link Source="10319:[85320..85348).6" Target="10319:[85320..85348).5" />
<Link Source="10319:[85320..85348).6" Target="10319:[61754..61884).1" />
<Link Source="10319:[85366..85400).5" Target="10319:[61754..61884).1" />
<Link Source="10319:[85366..85400).6" Target="10319:[84288..84313).2" />
<Link Source="10319:[85366..85400).6" Target="10319:[85366..85400).5" />
<Link Source="10319:[85366..85400).6" Target="10319:[61754..61884).1" />
<Link Source="10354:[4561..4580).3" Target="10319:[84167..84186).2" />
<Link Source="10354:[4561..4580).3" Target="10319:[61640..61682).4" />
<Link Source="10354:[4561..4580).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[85467..85484).3" Target="10319:[61754..61884).1" />
<Link Source="10354:[4094..4107).40" Target="10319:[84167..84186).2" />
<Link Source="10354:[4094..4107).40" Target="10319:[61640..61682).4" />
<Link Source="10354:[4094..4107).40" Target="10319:[61754..61884).1" />
<Link Source="10319:[104874..105336).4" Target="10354:[4561..4580).3" />
<Link Source="10319:[104874..105336).4" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).5" Target="10319:[104874..105336).4" />
<Link Source="10319:[104874..105336).5" Target="10319:[84124..109887).2" />
<Link Source="10319:[104874..105336).5" Target="10354:[4561..4580).3" />
<Link Source="10319:[105368..106708).2" Target="10319:[84328..84359).2" />
<Link Source="10319:[105368..106708).2" Target="10354:[4561..4580).3" />
<Link Source="10319:[105465..105535).7" Target="10319:[84288..84313).2" />
<Link Source="10319:[105465..105535).7" Target="10319:[105368..106708).2" />
<Link Source="10319:[105465..105535).8" Target="10319:[84257..84273).2" />
<Link Source="10319:[105465..105535).8" Target="10319:[105368..106708).2" />
<Link Source="10319:[76360..76385).3" Target="10319:[105465..105535).7" />
<Link Source="10319:[76360..76385).3" Target="10319:[105368..106708).2" />
<Link Source="10319:[76387..76402).3" Target="10319:[105465..105535).8" />
<Link Source="10319:[76387..76402).3" Target="10319:[105368..106708).2" />
<Link Source="10060:[2841..2854).12" Target="10319:[105368..106708).2" />
<Link Source="10060:[2856..2875).12" Target="10319:[105368..106708).2" />
<Link Source="10060:[2901..2932).23" Target="10060:[2841..2854).12" />
<Link Source="10060:[2901..2932).23" Target="10319:[105368..106708).2" />
<Link Source="10060:[2948..3467).12" Target="10060:[2841..2854).12" />
<Link Source="10060:[2948..3467).12" Target="10319:[105368..106708).2" />
<Link Source="10060:[3553..4223).14" Target="10060:[2841..2854).12" />
<Link Source="10060:[3553..4223).14" Target="10319:[105368..106708).2" />
<Link Source="10060:[4243..4274).14" Target="10060:[2841..2854).12" />
<Link Source="10060:[4243..4274).14" Target="10319:[105368..106708).2" />
<Link Source="10060:[3518..4328).14" Target="10060:[4243..4274).14" />
<Link Source="10060:[3518..4328).14" Target="10319:[105368..106708).2" />
<Link Source="10319:[76494..76582).9" Target="10319:[105368..106708).2" />
<Link Source="10319:[84691..84861).3" Target="10354:[4561..4580).3" />
<Link Source="10319:[84691..84861).3" Target="10319:[105368..106708).2" />
<Link Source="10319:[84691..84861).3" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[84764..84846).1" Target="10319:[84257..84273).2" />
<Link Source="10319:[84764..84846).1" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).2" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).4" Target="10354:[4561..4580).3" />
<Link Source="10319:[84764..84846).4" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).5" Target="10319:[84288..84313).2" />
<Link Source="10319:[84764..84846).5" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84845).1" Target="10319:[84691..84861).3" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84846).1" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84846).2" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84846).4" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84846).5" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358838..360009).1" Target="10319:[84124..109887).2" />
<Link Source="10306:[358838..360009).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).1" Target="10306:[358932..358945).1" />
<Link Source="10306:[358998..359998).1" Target="10319:[105368..106708).2" />
<Link Source="10306:[358998..359998).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).2" Target="10319:[84764..84845).1" />
<Link Source="10319:[62966..63027).1" Target="10354:[4561..4580).3" />
<Link Source="10319:[62966..63027).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[63043..63681).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[63043..63681).2" Target="10319:[62966..63027).1" />
<Link Source="10319:[63043..63681).2" Target="10319:[63043..63681).1" />
<Link Source="10319:[63043..63681).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[63697..63716).1" Target="10319:[57959..58083).1" />
<Link Source="10354:[11383..11549).3" Target="10319:[61338..61384).1" />
<Link Source="10354:[11383..11549).3" Target="10319:[63697..63716).1" />
<Link Source="10354:[3932..3952).5" Target="10354:[11383..11549).3" />
<Link Source="10354:[3932..3952).5" Target="10319:[105368..106708).2" />
<Link Source="10354:[3932..3952).5" Target="10319:[63697..63716).1" />
<Link Source="10354:[11428..11441).3" Target="10319:[63697..63716).1" />
<Link Source="10319:[63697..63717).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[63733..63745).1" Target="10319:[62966..63027).1" />
<Link Source="10319:[63733..63745).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[58098..58125).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[58141..60037).1" Target="10319:[57756..57807).1" />
<Link Source="10319:[58141..60037).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[59172..60037).1" Target="10319:[54356..60744).1" />
<Link Source="10319:[59172..60037).1" Target="10354:[3932..3952).5" />
<Link Source="10319:[59172..60037).1" Target="EXTERNAL" />
<Link Source="10319:[59172..60037).1" Target="10319:[58141..60037).1" />
<Link Source="10319:[59172..60037).2" Target="10319:[58141..60037).1" />
<Link Source="10319:[59723..60022).1" Target="10319:[63733..63745).1" />
<Link Source="10319:[59723..60022).1" Target="10319:[59172..60037).1" />
<Link Source="10319:[59723..60022).2" Target="10319:[54444..54466).1" />
<Link Source="10319:[59723..60022).2" Target="10319:[59172..60037).1" />
<Link Source="10319:[59723..60022).3" Target="10319:[57660..57740).1" />
<Link Source="10319:[59723..60022).3" Target="10319:[59172..60037).1" />
<Link Source="10319:[59723..60022).5" Target="10319:[54481..54506).1" />
<Link Source="10319:[59723..60022).5" Target="10319:[59172..60037).1" />
<Link Source="10319:[59723..60022).6" Target="10319:[54521..54560).1" />
<Link Source="10319:[59723..60022).6" Target="10319:[59172..60037).1" />
<Link Source="10319:[59880..59945).1" Target="10319:[59172..60037).1" />
<Link Source="10319:[64558..64603).1" Target="10319:[59723..60022).3" />
<Link Source="10319:[64558..64603).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64605..64630).1" Target="10319:[59723..60022).5" />
<Link Source="10319:[64605..64630).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64632..64678).1" Target="10319:[59723..60022).6" />
<Link Source="10319:[64632..64678).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64496..65048).1" Target="10319:[54356..60744).1" />
<Link Source="10319:[64496..65048).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64704..64742).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64704..64742).2" Target="10319:[64558..64603).1" />
<Link Source="10319:[64704..64742).2" Target="10319:[40338..41032).1" />
<Link Source="10319:[64704..64742).2" Target="10319:[64704..64742).1" />
<Link Source="10319:[64704..64742).2" Target="10319:[59880..59945).1" />
<Link Source="10319:[64756..64815).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64829..64988).1" Target="10319:[64558..64603).1" />
<Link Source="10319:[64829..64988).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64902..64973).1" Target="10319:[64829..64988).1" />
<Link Source="10319:[64902..64973).2" Target="10319:[64605..64630).1" />
<Link Source="10319:[64902..64973).2" Target="10319:[64829..64988).1" />
<Link Source="10319:[64902..64973).3" Target="10319:[64632..64678).1" />
<Link Source="10319:[64902..64973).3" Target="10319:[64829..64988).1" />
<Link Source="10319:[64911..64971).1" Target="10319:[64829..64988).1" />
<Link Source="10319:[65105..65128).1" Target="10319:[64902..64973).1" />
<Link Source="10319:[65105..65128).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65130..65155).1" Target="10319:[64902..64973).2" />
<Link Source="10319:[65130..65155).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65157..65203).1" Target="10319:[64902..64973).3" />
<Link Source="10319:[65157..65203).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65060..65694).1" Target="10319:[64496..65048).1" />
<Link Source="10319:[65060..65694).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65330..65407).1" Target="EXTERNAL" />
<Link Source="10319:[65330..65407).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65343..65406).1" Target="10319:[64911..64971).1" />
<Link Source="10307:[2552..2569).1" Target="10319:[65330..65407).1" />
<Link Source="10307:[2552..2569).1" Target="10319:[65343..65406).1" />
<Link Source="10307:[2516..2720).1" Target="10319:[65060..65694).1" />
<Link Source="10307:[2516..2720).1" Target="10319:[65343..65406).1" />
<Link Source="10307:[2595..2709).1" Target="10307:[2516..2720).1" />
<Link Source="10307:[2595..2709).1" Target="10354:[3932..3952).5" />
<Link Source="10307:[2595..2709).1" Target="10319:[65343..65406).1" />
<Link Source="10307:[2595..2709).2" Target="10307:[2552..2569).1" />
<Link Source="10307:[2595..2709).2" Target="10319:[65343..65406).1" />
<Link Source="10307:[2602..2628).1" Target="10319:[65343..65406).1" />
<Link Source="10298:[471..492).33" Target="10307:[2595..2709).1" />
<Link Source="10298:[471..492).33" Target="10307:[2602..2628).1" />
<Link Source="10298:[494..511).33" Target="10307:[2595..2709).2" />
<Link Source="10298:[494..511).33" Target="10307:[2602..2628).1" />
<Link Source="10298:[537..568).97" Target="10298:[471..492).33" />
<Link Source="10298:[537..568).97" Target="10298:[494..511).33" />
<Link Source="10298:[537..568).97" Target="10307:[2602..2628).1" />
<Link Source="10307:[2672..2708).1" Target="10298:[537..568).97" />
<Link Source="10286:[1605..1638).9" Target="10307:[2672..2708).1" />
<Link Source="10286:[1688..1781).13" Target="10307:[2672..2708).1" />
<Link Source="10286:[1688..1781).14" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).14" Target="10307:[2672..2708).1" />
<Link Source="10286:[1708..1779).3" Target="10307:[2672..2708).1" />
<Link Source="10298:[471..492).34" Target="10286:[1688..1781).13" />
<Link Source="10298:[471..492).34" Target="10286:[1708..1779).3" />
<Link Source="10298:[494..511).34" Target="10286:[1688..1781).14" />
<Link Source="10298:[494..511).34" Target="10286:[1708..1779).3" />
<Link Source="10286:[1820..1963).13" Target="10307:[2672..2708).1" />
<Link Source="10286:[1820..1963).14" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).14" Target="10307:[2672..2708).1" />
<Link Source="10286:[1840..1888).3" Target="10307:[2672..2708).1" />
<Link Source="10298:[471..492).35" Target="10286:[1820..1963).13" />
<Link Source="10298:[471..492).35" Target="10286:[1840..1888).3" />
<Link Source="10298:[494..511).35" Target="10286:[1820..1963).14" />
<Link Source="10298:[494..511).35" Target="10286:[1840..1888).3" />
<Link Source="10319:[65423..65656).1" Target="10319:[65105..65128).1" />
<Link Source="10319:[65423..65656).1" Target="10319:[40338..41032).1" />
<Link Source="10319:[65423..65656).1" Target="10354:[3932..3952).5" />
<Link Source="10319:[65423..65656).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65433..65486).1" Target="10319:[65423..65656).1" />
<Link Source="10319:[65433..65486).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65423..65656).4" Target="10319:[65130..65155).1" />
<Link Source="10319:[65423..65656).4" Target="10319:[65433..65486).1" />
<Link Source="10319:[65423..65656).5" Target="10319:[65157..65203).1" />
<Link Source="10319:[65423..65656).5" Target="10319:[65433..65486).1" />
<Link Source="10319:[65593..65655).1" Target="10319:[65433..65486).1" />
<Link Source="10319:[13710..13735).3" Target="10319:[65423..65656).4" />
<Link Source="10319:[13710..13735).3" Target="10319:[65593..65655).1" />
<Link Source="10319:[13737..13783).3" Target="10319:[65423..65656).5" />
<Link Source="10319:[13737..13783).3" Target="10319:[65593..65655).1" />
<Link Source="10319:[13785..13824).3" Target="10319:[65433..65486).1" />
<Link Source="10319:[13785..13824).3" Target="10319:[65593..65655).1" />
<Link Source="10319:[13647..14061).3" Target="10298:[537..568).97" />
<Link Source="10319:[13647..14061).3" Target="10319:[65593..65655).1" />
<Link Source="10319:[15031..15070).3" Target="10319:[13785..13824).3" />
<Link Source="10319:[15031..15070).3" Target="10319:[65593..65655).1" />
<Link Source="10319:[15096..15130).9" Target="10319:[65593..65655).1" />
<Link Source="10319:[15096..15130).10" Target="10319:[13710..13735).3" />
<Link Source="10319:[15096..15130).10" Target="10319:[15096..15130).9" />
<Link Source="10319:[15096..15130).10" Target="10319:[65593..65655).1" />
<Link Source="10319:[15146..15291).22" Target="10319:[13737..13783).3" />
<Link Source="10319:[15146..15291).22" Target="10319:[15031..15070).3" />
<Link Source="10319:[15146..15291).22" Target="10319:[65593..65655).1" />
<Link Source="10319:[39138..39163).2" Target="10319:[13710..13735).3" />
<Link Source="10319:[39138..39163).2" Target="10319:[65593..65655).1" />
<Link Source="10319:[73480..73505).2" Target="10319:[39138..39163).2" />
<Link Source="10319:[73480..73505).2" Target="10319:[65593..65655).1" />
<Link Source="10319:[73507..73522).2" Target="10319:[65593..65655).1" />
<Link Source="10319:[73548..73615).7" Target="10319:[13647..14061).3" />
<Link Source="10319:[73548..73615).7" Target="10307:[2672..2708).1" />
<Link Source="10319:[73548..73615).7" Target="10319:[65593..65655).1" />
<Link Source="10319:[73736..73751).2" Target="10319:[73507..73522).2" />
<Link Source="10319:[73736..73751).2" Target="10319:[65593..65655).1" />
<Link Source="10319:[73753..73778).2" Target="10319:[73480..73505).2" />
<Link Source="10319:[73753..73778).2" Target="10319:[65593..65655).1" />
<Link Source="10319:[73882..73975).7" Target="10319:[65593..65655).1" />
<Link Source="10319:[73882..73975).8" Target="10319:[73548..73615).7" />
<Link Source="10319:[73882..73975).8" Target="10319:[73882..73975).7" />
<Link Source="10319:[73882..73975).8" Target="10319:[65593..65655).1" />
<Link Source="10319:[76360..76385).4" Target="10319:[73753..73778).2" />
<Link Source="10319:[76360..76385).4" Target="10319:[65593..65655).1" />
<Link Source="10319:[76387..76402).4" Target="10319:[73736..73751).2" />
<Link Source="10319:[76387..76402).4" Target="10319:[65593..65655).1" />
<Link Source="10319:[76494..76582).13" Target="10319:[65593..65655).1" />
<Link Source="10319:[76494..76582).14" Target="10319:[73548..73615).7" />
<Link Source="10319:[76494..76582).14" Target="10319:[76494..76582).13" />
<Link Source="10319:[76494..76582).14" Target="10319:[65593..65655).1" />
<Link Source="10287:[791..833).3" Target="10319:[73548..73615).7" />
<Link Source="10287:[791..833).3" Target="10319:[65593..65655).1" />
<Link Source="10319:[15783..15865).11" Target="10319:[13710..13735).3" />
<Link Source="10319:[15783..15865).11" Target="10319:[73548..73615).7" />
<Link Source="10286:[21504..21529).3" Target="10319:[15783..15865).11" />
<Link Source="10286:[21504..21529).3" Target="10319:[73548..73615).7" />
<Link Source="10286:[21546..21561).3" Target="10319:[15783..15865).11" />
<Link Source="10286:[21546..21561).3" Target="10319:[73548..73615).7" />
<Link Source="10286:[21563..21583).3" Target="10319:[15783..15865).11" />
<Link Source="10286:[21563..21583).3" Target="10319:[73548..73615).7" />
<Link Source="10286:[22044..22069).3" Target="10286:[21504..21529).3" />
<Link Source="10286:[22044..22069).3" Target="10319:[73548..73615).7" />
<Link Source="10286:[22086..22108).3" Target="10286:[21546..21561).3" />
<Link Source="10286:[22086..22108).3" Target="10319:[73548..73615).7" />
<Link Source="10286:[22110..22130).3" Target="10286:[21563..21583).3" />
<Link Source="10286:[22110..22130).3" Target="10319:[73548..73615).7" />
<Link Source="10286:[22421..22557).13" Target="10286:[22086..22108).3" />
<Link Source="10286:[22421..22557).13" Target="10286:[21504..21529).3" />
<Link Source="10286:[22421..22557).14" Target="10286:[22110..22130).3" />
<Link Source="10286:[22421..22557).14" Target="10286:[21504..21529).3" />
<Link Source="10286:[8725..8866).1" Target="10319:[15783..15865).11" />
<Link Source="10286:[8725..8866).1" Target="10286:[21504..21529).3" />
<Link Source="10286:[8761..8796).1" Target="10286:[8725..8866).1" />
<Link Source="10286:[8761..8796).1" Target="10319:[15783..15865).11" />
<Link Source="10286:[8761..8796).1" Target="10286:[21504..21529).3" />
<Link Source="10286:[8821..8850).1" Target="10286:[21504..21529).3" />
<Link Source="10307:[1439..1480).3" Target="10286:[8725..8866).1" />
<Link Source="10307:[1439..1480).3" Target="10286:[8761..8796).1" />
<Link Source="10307:[1439..1480).3" Target="10286:[8821..8850).1" />
<Link Source="10286:[8814..8851).1" Target="10307:[1439..1480).3" />
<Link Source="10286:[8814..8851).1" Target="10286:[21504..21529).3" />
<Link Source="10286:[8725..8866).2" Target="10286:[21504..21529).3" />
<Link Source="10307:[1439..1480).4" Target="10286:[8725..8866).2" />
<Link Source="10307:[1439..1480).4" Target="10286:[8761..8796).1" />
<Link Source="10307:[1439..1480).4" Target="10286:[8821..8850).1" />
<Link Source="10286:[8814..8851).3" Target="10307:[1439..1480).4" />
<Link Source="10286:[8814..8851).3" Target="10286:[21504..21529).3" />
<Link Source="10286:[15616..15690).6" Target="10286:[8814..8851).3" />
<Link Source="10286:[15616..15690).6" Target="10286:[21504..21529).3" />
<Link Source="10286:[15616..15690).7" Target="10286:[8814..8851).3" />
<Link Source="10286:[15616..15690).7" Target="10286:[8761..8796).1" />
<Link Source="10286:[15616..15690).7" Target="EXTERNAL" />
<Link Source="10286:[15616..15690).7" Target="10286:[21504..21529).3" />
<Link Source="10286:[15715..15910).2" Target="10286:[8814..8851).3" />
<Link Source="10286:[15715..15910).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[23056..23081).2" Target="10286:[22044..22069).3" />
<Link Source="10286:[23056..23081).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[23124..23146).2" Target="10286:[22421..22557).13" />
<Link Source="10286:[23124..23146).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[23161..23181).2" Target="10286:[22421..22557).14" />
<Link Source="10286:[23161..23181).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[23281..23301).2" Target="10286:[8761..8796).1" />
<Link Source="10286:[23281..23301).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[23380..23684).8" Target="10286:[21504..21529).3" />
<Link Source="10286:[23380..23684).8" Target="10286:[8761..8796).1" />
<Link Source="10286:[23380..23684).8" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).3" Target="10286:[21504..21529).3" />
<Link Source="10286:[23893..24026).3" Target="10286:[8761..8796).1" />
<Link Source="10286:[23893..24026).3" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).3" Target="10286:[23161..23181).2" />
<Link Source="10286:[24545..24641).3" Target="10286:[21504..21529).3" />
<Link Source="10286:[24655..25349).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[24655..25349).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[26910..26935).2" Target="10286:[23056..23081).2" />
<Link Source="10286:[26910..26935).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[26952..26974).2" Target="10286:[23124..23146).2" />
<Link Source="10286:[26952..26974).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[27002..27022).2" Target="10286:[23281..23301).2" />
<Link Source="10286:[27002..27022).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[27048..27088).5" Target="10286:[21504..21529).3" />
<Link Source="10286:[27048..27088).6" Target="10286:[26910..26935).2" />
<Link Source="10286:[27048..27088).6" Target="10286:[27048..27088).5" />
<Link Source="10286:[27048..27088).6" Target="10286:[21504..21529).3" />
<Link Source="10286:[27208..27236).3" Target="10286:[21504..21529).3" />
<Link Source="10286:[27250..27722).2" Target="10286:[8814..8851).3" />
<Link Source="10286:[27250..27722).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[27738..27845).4" Target="10286:[21504..21529).3" />
<Link Source="10286:[27738..27845).5" Target="10286:[27208..27236).3" />
<Link Source="10286:[27738..27845).5" Target="10286:[27738..27845).4" />
<Link Source="10286:[27738..27845).5" Target="10286:[21504..21529).3" />
<Link Source="10286:[27861..27873).2" Target="10286:[8814..8851).3" />
<Link Source="10286:[27861..27873).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[26281..26812).2" Target="10286:[27861..27873).2" />
<Link Source="10286:[26281..26812).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[26450..26769).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[26450..26769).2" Target="10286:[26281..26812).2" />
<Link Source="10319:[51817..51842).3" Target="10319:[13710..13735).3" />
<Link Source="10319:[51817..51842).3" Target="10319:[65593..65655).1" />
<Link Source="10319:[51844..51861).3" Target="10319:[65593..65655).1" />
<Link Source="10319:[51863..51909).3" Target="10319:[13737..13783).3" />
<Link Source="10319:[51863..51909).3" Target="10319:[65593..65655).1" />
<Link Source="10319:[51698..52285).3" Target="10319:[13647..14061).3" />
<Link Source="10319:[51698..52285).3" Target="10319:[65593..65655).1" />
<Link Source="10319:[51939..51953).3" Target="10319:[65593..65655).1" />
<Link Source="10287:[1680..1716).3" Target="10319:[73548..73615).7" />
<Link Source="10287:[1680..1716).3" Target="10319:[51939..51953).3" />
<Link Source="10287:[1683..1690).2" Target="10287:[1680..1716).3" />
<Link Source="10287:[1683..1690).2" Target="10319:[73548..73615).7" />
<Link Source="10287:[1683..1690).2" Target="10319:[51939..51953).3" />
<Link Source="10287:[1683..1716).5" Target="10287:[1683..1690).2" />
<Link Source="10287:[1683..1716).5" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).5" Target="10319:[51939..51953).3" />
<Link Source="10319:[51935..52244).5" Target="10287:[1683..1716).5" />
<Link Source="10319:[51935..52244).5" Target="10319:[65593..65655).1" />
<Link Source="10319:[65672..65683).1" Target="10319:[73548..73615).7" />
<Link Source="10319:[65672..65683).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[64902..64973).6" Target="10319:[64756..64815).1" />
<Link Source="10319:[64902..64973).6" Target="10319:[65672..65683).1" />
<Link Source="10319:[64902..64973).6" Target="10286:[8814..8851).3" />
<Link Source="10319:[64902..64973).6" Target="10319:[64829..64988).1" />
<Link Source="10319:[65004..65037).1" Target="10319:[64756..64815).1" />
<Link Source="10319:[65004..65037).1" Target="10319:[64902..64973).6" />
<Link Source="10319:[65004..65037).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[59736..60021).1" Target="10319:[59172..60037).1" />
<Link Source="10319:[69844..69864).1" Target="10319:[59723..60022).1" />
<Link Source="10319:[69844..69864).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[69879..69900).1" Target="10319:[59723..60022).2" />
<Link Source="10319:[69879..69900).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[69915..69966).1" Target="10319:[59723..60022).3" />
<Link Source="10319:[69915..69966).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[69981..70030).1" Target="10319:[65004..65037).1" />
<Link Source="10319:[69981..70030).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70045..70084).1" Target="10319:[59723..60022).6" />
<Link Source="10319:[70045..70084).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70099..70124).1" Target="10319:[59723..60022).5" />
<Link Source="10319:[70099..70124).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[69787..70686).1" Target="10319:[54356..60744).1" />
<Link Source="10319:[69787..70686).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70150..70187).1" Target="10319:[69981..70030).1" />
<Link Source="10319:[70150..70187).1" Target="10319:[65004..65037).1" />
<Link Source="10319:[70150..70187).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70201..70238).1" Target="10319:[69981..70030).1" />
<Link Source="10319:[70201..70238).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70201..70238).2" Target="10319:[69844..69864).1" />
<Link Source="10319:[70201..70238).2" Target="10319:[70201..70238).1" />
<Link Source="10319:[70201..70238).2" Target="10319:[64902..64973).6" />
<Link Source="10319:[70201..70238).2" Target="10319:[65004..65037).1" />
<Link Source="10319:[70201..70238).2" Target="10319:[59736..60021).1" />
<Link Source="10319:[70258..70280).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70990..71107).1" Target="10319:[69787..70686).1" />
<Link Source="10319:[70990..71107).1" Target="10319:[70258..70280).1" />
<Link Source="10319:[71026..71092).1" Target="10319:[70990..71107).1" />
<Link Source="10319:[71026..71092).1" Target="10319:[70201..70238).2" />
<Link Source="10319:[71026..71092).1" Target="10319:[70258..70280).1" />
<Link Source="10319:[71026..71092).2" Target="EXTERNAL" />
<Link Source="10319:[71026..71092).2" Target="10319:[70258..70280).1" />
<Link Source="10319:[71034..71091).1" Target="10319:[70258..70280).1" />
<Link Source="10298:[471..492).36" Target="10319:[71026..71092).1" />
<Link Source="10298:[471..492).36" Target="10319:[71034..71091).1" />
<Link Source="10298:[494..511).36" Target="10319:[71026..71092).2" />
<Link Source="10298:[494..511).36" Target="10319:[71034..71091).1" />
<Link Source="10319:[70254..70647).1" Target="10298:[471..492).36" />
<Link Source="10319:[70254..70647).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70663..70675).1" Target="10319:[70201..70238).2" />
<Link Source="10319:[70663..70675).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[60053..60600).1" Target="10319:[50313..50328).2" />
<Link Source="10319:[60053..60600).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[60057..60088).1" Target="10319:[40897..41016).1" />
<Link Source="10353:[7504..7530).4" Target="10319:[60053..60600).1" />
<Link Source="10353:[7504..7530).4" Target="10319:[60057..60088).1" />
<Link Source="10319:[60616..60733).1" Target="10319:[54444..54466).1" />
<Link Source="10319:[60616..60733).1" Target="10319:[70201..70238).2" />
<Link Source="10319:[60616..60733).1" Target="10319:[40897..41016).1" />
<Link Source="10319:[60650..60719).1" Target="10319:[40897..41016).1" />
<Link Source="10286:[10010..10027).4" Target="10319:[60616..60733).1" />
<Link Source="10286:[10010..10027).4" Target="10319:[60650..60719).1" />
<Link Source="10286:[9966..10197).4" Target="10319:[54356..60744).1" />
<Link Source="10286:[9966..10197).4" Target="10319:[60650..60719).1" />
<Link Source="10319:[60616..60733).4" Target="10319:[70663..70675).1" />
<Link Source="10319:[60616..60733).4" Target="10319:[40897..41016).1" />
<Link Source="10319:[60616..60733).5" Target="10319:[40897..41016).1" />
<Link Source="10319:[60616..60733).7" Target="10286:[10010..10027).4" />
<Link Source="10319:[60616..60733).7" Target="10319:[60616..60733).4" />
<Link Source="10319:[60616..60733).7" Target="10319:[60616..60733).5" />
<Link Source="10319:[60616..60733).7" Target="10319:[40897..41016).1" />
<Link Source="10287:[791..833).5" Target="10319:[60616..60733).7" />
<Link Source="10287:[791..833).5" Target="10319:[40897..41016).1" />
<Link Source="10319:[40890..41017).7" Target="10319:[40897..41016).1" />
<Link Source="10319:[40890..41017).7" Target="10319:[40338..41032).1" />
<Link Source="10319:[72620..72734).1" Target="10319:[71694..71825).1" />
<Link Source="10319:[72620..72734).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[72750..72763).1" Target="10319:[40890..41017).7" />
<Link Source="10319:[72750..72763).1" Target="10319:[21212..21313).1" />
<Link Source="10287:[1612..1643).5" Target="10319:[72750..72763).1" />
<Link Source="10287:[1612..1643).5" Target="10319:[60616..60733).7" />
<Link Source="10287:[1612..1643).5" Target="10319:[15383..15396).1" />
<Link Source="10286:[21546..21561).4" Target="10287:[1612..1643).5" />
<Link Source="10286:[21563..21583).4" Target="10287:[1612..1643).5" />
<Link Source="10286:[22044..22069).4" Target="10287:[1612..1643).5" />
<Link Source="10286:[22086..22108).4" Target="10286:[21546..21561).4" />
<Link Source="10286:[22086..22108).4" Target="10287:[1612..1643).5" />
<Link Source="10286:[22110..22130).4" Target="10286:[21563..21583).4" />
<Link Source="10286:[22110..22130).4" Target="10287:[1612..1643).5" />
<Link Source="10286:[15616..15690).11" Target="10287:[1612..1643).5" />
<Link Source="10286:[15616..15690).12" Target="10287:[1612..1643).5" />
<Link Source="10286:[15616..15690).12" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[23056..23081).3" Target="10286:[22044..22069).4" />
<Link Source="10286:[23056..23081).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[23124..23146).3" Target="10286:[22086..22108).4" />
<Link Source="10286:[23124..23146).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[23161..23181).3" Target="10286:[22110..22130).4" />
<Link Source="10286:[23161..23181).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[23281..23301).3" Target="10286:[22044..22069).4" />
<Link Source="10286:[23281..23301).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[23380..23684).15" Target="10286:[22044..22069).4" />
<Link Source="10286:[23380..23684).15" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).15" Target="10287:[1612..1643).5" />
<Link Source="10286:[23893..24026).5" Target="10286:[22044..22069).4" />
<Link Source="10286:[23893..24026).5" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).5" Target="10287:[1612..1643).5" />
<Link Source="10286:[24545..24641).5" Target="10286:[23161..23181).3" />
<Link Source="10286:[24545..24641).5" Target="10287:[1612..1643).5" />
<Link Source="10286:[24655..25349).3" Target="10286:[24545..24641).5" />
<Link Source="10286:[24655..25349).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[26910..26935).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[26910..26935).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[26952..26974).3" Target="10286:[23124..23146).3" />
<Link Source="10286:[26952..26974).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[27002..27022).3" Target="10286:[23281..23301).3" />
<Link Source="10286:[27002..27022).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[27048..27088).9" Target="10287:[1612..1643).5" />
<Link Source="10286:[27048..27088).10" Target="10286:[26910..26935).3" />
<Link Source="10286:[27048..27088).10" Target="10286:[27048..27088).9" />
<Link Source="10286:[27048..27088).10" Target="10287:[1612..1643).5" />
<Link Source="10286:[27208..27236).5" Target="10287:[1612..1643).5" />
<Link Source="10286:[27250..27722).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[27250..27722).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[27738..27845).7" Target="10287:[1612..1643).5" />
<Link Source="10286:[27738..27845).8" Target="10286:[27208..27236).5" />
<Link Source="10286:[27738..27845).8" Target="10286:[27738..27845).7" />
<Link Source="10286:[27738..27845).8" Target="10287:[1612..1643).5" />
<Link Source="10286:[27861..27873).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[27861..27873).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[26281..26812).3" Target="10286:[27861..27873).3" />
<Link Source="10286:[26281..26812).3" Target="10287:[1612..1643).5" />
<Link Source="10286:[26450..26769).3" Target="10286:[24545..24641).5" />
<Link Source="10286:[26450..26769).3" Target="10286:[26281..26812).3" />
<Link Source="10287:[1680..1716).4" Target="10287:[1612..1643).5" />
<Link Source="10287:[1680..1716).4" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).3" Target="10287:[1680..1716).4" />
<Link Source="10287:[1683..1690).3" Target="10319:[40897..41016).1" />
<Link Source="10287:[1683..1690).3" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).7" Target="10287:[1683..1690).3" />
<Link Source="10287:[1683..1716).7" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).7" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).7" Target="10287:[1683..1716).7" />
<Link Source="10319:[51935..52244).7" Target="10319:[13969..14029).1" />
<Link Source="10327:[1017..1043).1" Target="10327:[945..949).1" />
<Link Source="10327:[1017..1043).1" Target="10327:[916..956).1" />
<Link Source="10327:[1058..1116).1" Target="10327:[951..955).1" />
<Link Source="10327:[1058..1116).1" Target="10327:[916..956).1" />
<Link Source="10327:[969..1217).1" Target="10327:[916..956).1" />
<Link Source="10327:[749..758).1" Target="10327:[969..1217).1" />
<Link Source="10327:[749..758).1" Target="10327:[916..956).1" />
<Link Source="10327:[832..845).1" Target="10327:[969..1217).1" />
<Link Source="10327:[832..845).1" Target="10327:[916..956).1" />
<Link Source="10327:[1142..1151).1" Target="10327:[1017..1043).1" />
<Link Source="10327:[1142..1151).1" Target="10327:[969..1217).1" />
<Link Source="10327:[1142..1151).1" Target="10327:[916..956).1" />
<Link Source="10327:[1177..1190).1" Target="10327:[1058..1116).1" />
<Link Source="10327:[1177..1190).1" Target="10327:[969..1217).1" />
<Link Source="10327:[1177..1190).1" Target="10327:[916..956).1" />
<Link Source="10327:[908..956).1" Target="10327:[916..956).1" />
<Link Source="10327:[1273..1314).1" Target="25002:[4395..4432).3" />
<Link Source="10327:[1273..1314).1" Target="25002:[4395..4432).1" />
<Link Source="10327:[1279..1312).1" Target="25002:[4395..4432).1" />
<Link Source="10327:[1279..1312).2" Target="10327:[1273..1314).1" />
<Link Source="10327:[1279..1312).2" Target="10286:[23056..23081).3" />
<Link Source="10327:[1279..1312).2" Target="10327:[1279..1312).1" />
<Link Source="10327:[1279..1312).2" Target="25002:[4395..4432).1" />
<Link Source="25002:[4446..4475).1" Target="10327:[1279..1312).2" />
<Link Source="25002:[4446..4475).1" Target="28001:[14630..14811).2" />
<Link Source="25002:[4446..4475).2" Target="25002:[4284..4323).1" />
<Link Source="25002:[4446..4475).2" Target="28001:[14630..14811).2" />
<Link Source="25002:[4446..4474).1" Target="28001:[14630..14811).2" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4475).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4475).2" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[2296..2334).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[2336..2375).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2450).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2451).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2451).2" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[1554..1589).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[1591..1630).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).3" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1702).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1703).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1703).2" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1703).3" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2533..2565).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2611..2759).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).2" Target="25002:[2775..2867).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[14630..14812).4" />
<Link Source="25002:[2775..2867).2" Target="28001:[14630..14811).1" />
<Link Source="25002:[2775..2867).2" Target="25003:[2816..2827).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2842..2863).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3253..3278).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2878..2898).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2913..2931).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3464..3478).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3045..3076).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3091..3116).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1383..1412).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3131..3176).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3191..3238).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2988..3030).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1713..1727).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1891..1900).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1941..1960).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[9227..9476).11" />
<Link Source="25002:[2775..2867).2" Target="28001:[14692..14791).1" />
<Link Source="25002:[2775..2867).2" Target="25007:[3901..4266).1" />
<Link Source="25002:[2775..2867).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[2775..2867).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[2775..2867).4" />
<Link Source="25002:[2775..2867).6" Target="28001:[14630..14812).4" />
<Link Source="25002:[2775..2867).6" Target="28001:[14630..14811).1" />
<Link Source="25002:[2775..2867).6" Target="25003:[2816..2827).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2842..2863).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3253..3278).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2878..2898).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2913..2931).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3464..3478).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3045..3076).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3091..3116).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1383..1412).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3131..3176).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3191..3238).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2988..3030).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1713..1727).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1891..1900).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1941..1960).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[9227..9476).11" />
<Link Source="25002:[2775..2867).6" Target="28001:[14692..14791).1" />
<Link Source="25002:[2775..2867).6" Target="25007:[3901..4266).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[1656..1702).1" />
<Link Source="25003:[10448..10470).1" Target="25002:[2775..2867).6" />
<Link Source="25003:[10448..10470).1" Target="25002:[2775..2867).4" />
<Link Source="25003:[10451..10470).1" Target="25003:[10448..10470).1" />
<Link Source="25003:[10451..10470).1" Target="25002:[2775..2867).6" />
<Link Source="25003:[10451..10470).1" Target="25002:[2775..2867).4" />
<Link Source="25002:[2881..2977).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).2" Target="25002:[2881..2977).1" />
<Link Source="25002:[2881..2977).2" Target="25003:[10451..10470).1" />
<Link Source="25002:[2881..2977).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[2881..2977).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[2881..2977).4" />
<Link Source="25002:[2881..2977).6" Target="25003:[10451..10470).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[1656..1702).1" />
<Link Source="25003:[10526..10550).1" Target="25002:[2881..2977).6" />
<Link Source="25003:[10526..10550).1" Target="25002:[2881..2977).4" />
<Link Source="25003:[10529..10550).1" Target="25003:[10526..10550).1" />
<Link Source="25003:[10529..10550).1" Target="25002:[2881..2977).6" />
<Link Source="25003:[10529..10550).1" Target="25002:[2881..2977).4" />
<Link Source="25002:[2991..3166).1" Target="25002:[2501..2531).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2567..2585).1" />
<Link Source="25002:[2991..3166).2" Target="25003:[10451..10470).1" />
<Link Source="25002:[2991..3166).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).2" />
<Link Source="25002:[2991..3166).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).8" Target="25002:[1656..1702).1" />
<Link Source="25003:[4933..4945).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4933..4945).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4947..4965).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4947..4965).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4967..5002).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4967..5002).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5004..5041).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5004..5041).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4904..7352).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4904..7352).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[912..917).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[912..917).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[950..967).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[950..967).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1000..1013).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1000..1013).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1048..1062).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1048..1062).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1099..1109).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1099..1109).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1151..1165).10" Target="25003:[4904..7352).1" />
<Link Source="25003:[1151..1165).10" Target="25002:[2991..3166).8" />
<Link Source="25003:[1276..1303).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1276..1303).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1336..1350).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1336..1350).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1460..1479).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1460..1479).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1527..1548).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1527..1548).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1673..1689).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1673..1689).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[5067..5072).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5067..5072).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5067..5072).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5067..5072).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5096..5113).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5096..5113).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5096..5113).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5096..5113).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5149..5162).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5149..5162).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5149..5162).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5149..5162).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5194..5203).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5194..5203).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5194..5203).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5194..5203).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5253..5275).1" Target="25003:[4967..5002).1" />
<Link Source="25003:[5253..5275).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5231..5324).1" Target="25003:[5253..5275).1" />
<Link Source="25003:[5231..5250).1" Target="25003:[5231..5324).1" />
<Link Source="25003:[5231..5250).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5231..5250).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5362..5386).1" Target="25003:[5004..5041).1" />
<Link Source="25003:[5362..5386).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5338..5428).1" Target="25003:[5362..5386).1" />
<Link Source="25003:[5338..5359).1" Target="25003:[5338..5428).1" />
<Link Source="25003:[5338..5359).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5338..5359).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5444..5476).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).2" Target="25003:[4933..4945).1" />
<Link Source="25003:[5490..6130).2" Target="25002:[2991..3166).4" />
<Link Source="25003:[5490..6130).2" Target="25003:[5490..6130).1" />
<Link Source="25003:[5490..6130).2" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).3" Target="25003:[4933..4945).1" />
<Link Source="25003:[5490..6130).3" Target="25002:[2991..3166).4" />
<Link Source="25003:[5490..6130).3" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).4" Target="EXTERNAL" />
<Link Source="25003:[5490..6130).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[5744..5776).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5744..5776).1" Target="25003:[5490..6130).2" />
<Link Source="25003:[5794..6115).1" Target="25003:[5490..6130).2" />
<Link Source="25003:[5794..6115).2" Target="25003:[5744..5776).1" />
<Link Source="25003:[5794..6115).2" Target="25003:[5794..6115).1" />
<Link Source="25003:[5794..6115).2" Target="25003:[5490..6130).2" />
<Link Source="25003:[6001..6015).1" Target="25003:[5744..5776).1" />
<Link Source="25003:[6001..6015).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6001..6015).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6001..6015).1" Target="25003:[5794..6115).2" />
<Link Source="25003:[6081..6086).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[6081..6086).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6081..6086).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6081..6086).1" Target="25003:[5794..6115).2" />
<Link Source="25003:[6146..6175).1" Target="25003:[4947..4965).1" />
<Link Source="25003:[6146..6175).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6146..6175).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[6208..7260).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6208..7260).1" Target="25003:[6146..6175).1" />
<Link Source="25003:[6208..7260).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[6276..6580).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6276..6580).1" Target="25003:[5194..5203).1" />
<Link Source="25003:[6276..6580).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6276..6580).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[6482..6561).1" Target="25003:[6276..6580).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[6276..6580).1" />
<Link Source="25003:[6600..7098).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[5744..5776).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[6600..7098).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[6208..7260).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[5744..5776).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[6600..7098).2" />
<Link Source="25003:[7118..7245).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[6659..6669).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[6208..7260).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6659..6669).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6482..6561).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6208..7260).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[5194..5203).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[7276..7341).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[7276..7290).1" Target="25003:[7276..7341).1" />
<Link Source="25003:[7276..7290).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[7276..7290).1" Target="25002:[2991..3166).8" />
<Link Source="25002:[2991..3166).9" Target="25002:[2991..3166).4" />
<Link Source="25002:[2991..3166).9" Target="25003:[7276..7341).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6081..6086).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5096..5113).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5149..5162).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6482..6496).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6659..6669).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[7276..7290).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[1276..1303).4" />
<Link Source="25002:[2991..3166).9" Target="25003:[6001..6015).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6146..6175).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5231..5250).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5338..5359).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[1673..1689).4" />
<Link Source="25002:[2991..3166).9" Target="25003:[4904..7352).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5194..5203).1" />
<Link Source="25002:[2991..3166).9" Target="25002:[1656..1702).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3341..3730).2" Target="25002:[3341..3730).1" />
<Link Source="25002:[3341..3730).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[3341..3730).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[3401..3434).1" Target="25002:[3341..3730).2" />
<Link Source="25002:[3401..3434).2" Target="25002:[3401..3434).1" />
<Link Source="25002:[3401..3434).2" Target="25002:[2991..3166).9" />
<Link Source="25002:[3401..3434).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[3401..3434).2" Target="25002:[3341..3730).2" />
<Link Source="25003:[10591..10601).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10591..10601).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10563..13732).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10563..13732).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10627..10664).1" Target="25003:[10591..10601).1" />
<Link Source="25003:[10627..10664).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10680..10725).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10680..10725).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[10680..10725).2" Target="25003:[10680..10725).1" />
<Link Source="25003:[10680..10725).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[10741..10799).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10741..10799).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10741..10799).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10741..10799).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[10741..10799).2" Target="25002:[3401..3434).2" />
<Link Source="25003:[10741..10799).2" Target="25003:[10741..10799).1" />
<Link Source="25003:[10741..10799).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[10815..10891).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10815..10891).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10815..10891).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10815..10891).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10907..10975).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10907..10975).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10907..10975).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10907..10975).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10991..11148).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10991..11148).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10991..11148).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[11059..11133).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10991..11148).1" />
<Link Source="25003:[11164..11464).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11164..11464).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[11164..11464).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11164..11464).2" Target="25003:[11164..11464).1" />
<Link Source="25003:[11164..11464).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[11224..11449).1" Target="25003:[11164..11464).2" />
<Link Source="25003:[11294..11430).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[11294..11430).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[11294..11430).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[11294..11430).1" Target="25003:[11224..11449).1" />
<Link Source="25003:[11480..11903).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11480..11903).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[11480..11903).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11480..11903).2" Target="25003:[11480..11903).1" />
<Link Source="25003:[11480..11903).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[11917..12344).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11917..12344).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[11917..12344).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11917..12344).2" Target="25003:[11917..12344).1" />
<Link Source="25003:[11917..12344).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[12436..12535).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[12436..12535).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[12436..12535).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[12436..12535).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[12651..13498).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[12651..13498).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[12651..13498).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[12651..13498).2" Target="25003:[12651..13498).1" />
<Link Source="25003:[12651..13498).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[12855..12915).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13006..13029).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[1971..2761).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[1971..2761).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[2047..2709).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[1971..2761).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[2047..2709).2" Target="25003:[2047..2709).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[13006..13029).1" />
<Link Source="25003:[2321..2694).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2321..2694).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[2321..2694).1" Target="25003:[2047..2709).2" />
<Link Source="25003:[2321..2694).2" Target="25003:[2047..2709).2" />
<Link Source="25003:[2321..2340).1" Target="25003:[2321..2694).1" />
<Link Source="25003:[2321..2340).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2321..2340).1" Target="25003:[2047..2709).2" />
<Link Source="25003:[2723..2750).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2723..2750).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[2723..2750).1" Target="25003:[2321..2340).1" />
<Link Source="25003:[2723..2750).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[12994..13030).1" Target="25003:[2723..2750).1" />
<Link Source="25003:[12994..13030).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13060..13085).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[1971..2761).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[1971..2761).2" Target="25003:[13060..13085).1" />
<Link Source="25003:[2047..2709).4" Target="25003:[13060..13085).1" />
<Link Source="25003:[2047..2709).5" Target="25003:[1971..2761).2" />
<Link Source="25003:[2047..2709).5" Target="25003:[10741..10799).2" />
<Link Source="25003:[2047..2709).5" Target="25003:[2321..2340).1" />
<Link Source="25003:[2047..2709).5" Target="25003:[2047..2709).4" />
<Link Source="25003:[2047..2709).5" Target="25003:[13060..13085).1" />
<Link Source="25003:[2723..2750).2" Target="25003:[1971..2761).2" />
<Link Source="25003:[2723..2750).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[2723..2750).2" Target="25003:[2321..2340).1" />
<Link Source="25003:[2723..2750).2" Target="25003:[2047..2709).5" />
<Link Source="25003:[2723..2750).2" Target="25003:[13060..13085).1" />
<Link Source="25003:[13048..13086).1" Target="25003:[2723..2750).2" />
<Link Source="25003:[13048..13086).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13104..13483).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[13104..13483).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[13104..13483).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[13104..13483).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13393..13464).1" Target="25003:[12994..13030).1" />
<Link Source="25003:[13393..13464).1" Target="25003:[13104..13483).1" />
<Link Source="25003:[13393..13464).2" Target="25003:[13048..13086).1" />
<Link Source="25003:[13393..13464).2" Target="25003:[13104..13483).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[13393..13464).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[13393..13464).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[10741..10799).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2340).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[2047..2709).5" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2694).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2694).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[13104..13483).1" />
<Link Source="25003:[13514..13693).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[13514..13693).1" Target="25003:[13393..13464).3" />
<Link Source="25003:[13514..13693).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[13514..13693).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[13709..13721).1" Target="25002:[3401..3434).1" />
<Link Source="25002:[3401..3434).5" Target="25002:[3401..3434).2" />
<Link Source="25002:[3401..3434).5" Target="25003:[13709..13721).1" />
<Link Source="25002:[3401..3434).5" Target="25003:[13393..13464).3" />
<Link Source="25002:[3401..3434).5" Target="25002:[3341..3730).2" />
<Link Source="25002:[3452..3715).1" Target="25002:[3341..3730).2" />
<Link Source="25002:[3452..3715).2" Target="25002:[3401..3434).5" />
<Link Source="25002:[3452..3715).2" Target="25002:[3452..3715).1" />
<Link Source="25002:[3452..3715).2" Target="25002:[3341..3730).2" />
<Link Source="25002:[3508..3534).1" Target="25002:[3401..3434).5" />
<Link Source="25002:[3508..3534).1" Target="25002:[3452..3715).2" />
<Link Source="25002:[3840..3992).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[2991..3166).9" />
<Link Source="25002:[3840..3992).2" Target="25002:[3508..3534).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[3840..3992).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[2533..2565).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[2501..2531).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[4126..4179).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[17577..17609).1" Target="25002:[4102..4181).3" />
<Link Source="25003:[17577..17609).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17611..17641).1" Target="25002:[4102..4181).4" />
<Link Source="25003:[17611..17641).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17667..17688).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17702..17728).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[17742..17827).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).2" Target="25003:[17742..17827).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[17742..17827).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[17757..17803).1" Target="25003:[17742..17827).2" />
<Link Source="25003:[17757..17803).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).6" Target="25003:[17667..17688).1" />
<Link Source="25003:[17742..17827).6" Target="25003:[17757..17803).1" />
<Link Source="25003:[17841..17904).1" Target="25003:[17742..17827).6" />
<Link Source="25003:[17841..17904).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17918..17965).1" Target="25003:[17742..17827).6" />
<Link Source="25003:[17918..17965).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17936..17956).1" Target="25003:[17918..17965).1" />
<Link Source="25003:[17936..17956).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[17979..18071).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).2" Target="25003:[17979..18071).1" />
<Link Source="25003:[17979..18071).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[17979..18071).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).6" Target="25003:[17979..18071).1" />
<Link Source="25003:[17979..18071).6" Target="25003:[17979..18071).4" />
<Link Source="25003:[17979..18071).6" Target="25002:[3508..3534).1" />
<Link Source="25003:[17979..18071).6" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18085..18181).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).2" Target="25003:[18085..18181).1" />
<Link Source="25003:[18085..18181).2" Target="25003:[17979..18071).6" />
<Link Source="25003:[18085..18181).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).6" Target="25003:[18085..18181).1" />
<Link Source="25003:[18085..18181).6" Target="25003:[18085..18181).4" />
<Link Source="25003:[18085..18181).6" Target="25003:[17979..18071).6" />
<Link Source="25003:[18085..18181).6" Target="25002:[4126..4179).1" />
<Link Source="25003:[18197..18490).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18197..18490).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18201..18226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18197..18490).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22962..23812).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[23085..23122).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[23085..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21725..21759).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[21605..21640).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).2" Target="25003:[21773..22187).1" />
<Link Source="25003:[21773..22187).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[21773..22187).2" Target="25003:[18201..18226).1" />
<Link Source="25003:[21845..21956).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[21974..22136).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[21974..22136).2" Target="25003:[21725..21759).1" />
<Link Source="25003:[21974..22136).2" Target="25003:[21974..22136).1" />
<Link Source="25003:[21974..22136).2" Target="25003:[21773..22187).2" />
<Link Source="25003:[22154..22172).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[22201..22213).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[18197..18490).2" Target="25003:[22201..22213).1" />
<Link Source="25003:[18197..18490).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[18462..18474).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[21372..21407).1" Target="25003:[18453..18475).1" />
<Link Source="25003:[21372..21407).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[21372..21407).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).2" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[23085..23122).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).2" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).4" />
<Link Source="25003:[21433..21546).5" Target="25003:[18085..18181).6" />
<Link Source="25003:[21433..21546).5" Target="25003:[18462..18474).1" />
<Link Source="25003:[18506..18543).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18557..18581).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18557..18581).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18658..18664).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18678..18713).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18557..18581).1" />
<Link Source="25003:[18678..18713).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[18727..18781).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18795..18929).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).2" Target="25003:[18795..18929).1" />
<Link Source="25003:[18795..18929).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[18795..18929).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18855..18914).1" Target="25003:[18795..18929).2" />
<Link Source="25003:[18855..18914).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[18855..18914).2" Target="25003:[18795..18929).2" />
<Link Source="25003:[18872..18912).1" Target="25003:[18795..18929).2" />
<Link Source="25003:[22283..22306).1" Target="25003:[18855..18914).1" />
<Link Source="25003:[22283..22306).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22308..22323).1" Target="25003:[18855..18914).2" />
<Link Source="25003:[22308..22323).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[22349..22404).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[22308..22323).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[18872..18912).1" />
<Link Source="25003:[22391..22403).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[14779..17530).1" Target="25003:[22283..22306).1" />
<Link Source="25003:[14779..17530).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14837..14866).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14882..14907).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[14882..14907).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[22391..22403).1" />
<Link Source="25003:[14921..15244).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[14921..15244).2" Target="25003:[14921..15244).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15100..15131).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15100..15131).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15100..15131).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15100..15131).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[15100..15131).2" Target="25003:[15100..15131).1" />
<Link Source="25003:[15100..15131).2" Target="25003:[14882..14907).3" />
<Link Source="25003:[15100..15131).2" Target="25003:[14921..15244).2" />
<Link Source="25003:[15149..15164).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15149..15164).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15149..15164).3" Target="25003:[15149..15164).1" />
<Link Source="25003:[15149..15164).3" Target="25003:[15100..15131).2" />
<Link Source="25003:[15149..15164).3" Target="25003:[14921..15244).2" />
<Link Source="25003:[15182..15229).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15182..15229).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15182..15229).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15182..15229).5" Target="25003:[14837..14866).1" />
<Link Source="25003:[15182..15229).5" Target="25003:[15182..15229).1" />
<Link Source="25003:[15182..15229).5" Target="25003:[15149..15164).3" />
<Link Source="25003:[15182..15229).5" Target="25003:[14921..15244).2" />
<Link Source="25003:[15260..15767).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[15260..15767).2" Target="25003:[15260..15767).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15320..15717).1" Target="25003:[15260..15767).2" />
<Link Source="25003:[15632..15650).1" Target="25003:[15320..15717).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[15632..15650).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[15182..15229).5" />
<Link Source="25003:[15632..15650).3" Target="25003:[15320..15717).1" />
<Link Source="25003:[15672..15698).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15672..15698).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15672..15698).1" Target="25003:[15320..15717).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[15672..15698).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[15632..15650).3" />
<Link Source="25003:[15672..15698).2" Target="25003:[15320..15717).1" />
<Link Source="25003:[15737..15752).1" Target="25003:[15260..15767).2" />
<Link Source="25003:[15737..15752).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15737..15752).3" Target="25003:[15737..15752).1" />
<Link Source="25003:[15737..15752).3" Target="25003:[15672..15698).2" />
<Link Source="25003:[15737..15752).3" Target="25003:[15260..15767).2" />
<Link Source="25003:[15783..15883).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15783..15883).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15783..15883).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15899..15914).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[15899..15914).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[15737..15752).3" />
<Link Source="25003:[15899..15914).3" Target="25003:[22391..22403).1" />
<Link Source="25003:[15930..16520).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[15930..16520).2" Target="25003:[15930..16520).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15986..16015).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[15986..16015).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15986..16015).3" Target="25003:[15986..16015).1" />
<Link Source="25003:[15986..16015).3" Target="25003:[15899..15914).3" />
<Link Source="25003:[15986..16015).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16055..16078).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16033..16095).1" Target="25003:[16055..16078).1" />
<Link Source="25003:[16033..16095).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16113..16472).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16113..16472).3" Target="25003:[16033..16095).1" />
<Link Source="25003:[16113..16472).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16202..16218).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16202..16218).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16202..16218).3" Target="25003:[16202..16218).1" />
<Link Source="25003:[16202..16218).3" Target="25003:[15986..16015).3" />
<Link Source="25003:[16202..16218).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).1" Target="25003:[16033..16095).1" />
<Link Source="25003:[16240..16275).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[16240..16275).2" Target="25003:[16240..16275).1" />
<Link Source="25003:[16240..16275).2" Target="25003:[16202..16218).3" />
<Link Source="25003:[16240..16275).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16297..16313).3" Target="25003:[16297..16313).1" />
<Link Source="25003:[16297..16313).3" Target="25003:[16240..16275).2" />
<Link Source="25003:[16297..16313).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[16335..16453).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16414..16430).1" Target="25003:[16335..16453).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[16414..16430).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[16297..16313).3" />
<Link Source="25003:[16414..16430).3" Target="25003:[16335..16453).1" />
<Link Source="25003:[16490..16505).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16490..16505).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16490..16505).3" Target="25003:[16490..16505).1" />
<Link Source="25003:[16490..16505).3" Target="25003:[16414..16430).3" />
<Link Source="25003:[16490..16505).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16536..16829).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16536..16829).2" Target="25003:[16536..16829).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[16596..16624).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16596..16624).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16596..16624).3" Target="25003:[16596..16624).1" />
<Link Source="25003:[16596..16624).3" Target="25003:[16490..16505).3" />
<Link Source="25003:[16596..16624).3" Target="25003:[16536..16829).2" />
<Link Source="25003:[16642..16683).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16642..16683).4" Target="25003:[14837..14866).1" />
<Link Source="25003:[16642..16683).4" Target="25003:[16642..16683).1" />
<Link Source="25003:[16642..16683).4" Target="25003:[16596..16624).3" />
<Link Source="25003:[16642..16683).4" Target="25003:[16536..16829).2" />
<Link Source="25003:[16701..16717).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16701..16717).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16701..16717).3" Target="25003:[16701..16717).1" />
<Link Source="25003:[16701..16717).3" Target="25003:[16642..16683).4" />
<Link Source="25003:[16701..16717).3" Target="25003:[16536..16829).2" />
<Link Source="25003:[16735..16781).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16735..16781).4" Target="25003:[14837..14866).1" />
<Link Source="25003:[16735..16781).4" Target="25003:[16735..16781).1" />
<Link Source="25003:[16735..16781).4" Target="25003:[16701..16717).3" />
<Link Source="25003:[16735..16781).4" Target="25003:[16536..16829).2" />
<Link Source="25003:[16799..16814).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16799..16814).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16799..16814).3" Target="25003:[16799..16814).1" />
<Link Source="25003:[16799..16814).3" Target="25003:[16735..16781).4" />
<Link Source="25003:[16799..16814).3" Target="25003:[16536..16829).2" />
<Link Source="25003:[16845..16954).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[16845..16954).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16845..16954).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16970..17144).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16970..17144).2" Target="25003:[16970..17144).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17160..17340).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[17160..17340).2" Target="25003:[17160..17340).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17356..17482).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[17356..17482).2" Target="25003:[17356..17482).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17498..17519).1" Target="25003:[14837..14866).1" />
<Link Source="25003:[17498..17519).1" Target="25003:[16799..16814).3" />
<Link Source="25003:[17498..17519).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[22349..22404).7" Target="25003:[17498..17519).1" />
<Link Source="25003:[22349..22404).7" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).8" Target="25003:[22349..22404).4" />
<Link Source="25003:[22349..22404).8" Target="25003:[22349..22404).7" />
<Link Source="25003:[22349..22404).8" Target="25003:[18872..18912).1" />
<Link Source="25003:[18855..18914).5" Target="25003:[18727..18781).1" />
<Link Source="25003:[18855..18914).5" Target="25003:[22349..22404).8" />
<Link Source="25003:[18855..18914).5" Target="25003:[18795..18929).2" />
<Link Source="25003:[18943..18992).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18943..18992).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).2" Target="25003:[18727..18781).1" />
<Link Source="25003:[18943..18992).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18991).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18992).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18992).2" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18855..18914).5" />
<Link Source="25003:[22669..22689).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22703..22939).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22669..22689).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[18943..18991).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[22703..22939).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[18855..18914).5" />
<Link Source="25003:[22763..22783).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[22763..22783).3" Target="25003:[22599..22615).1" />
<Link Source="25003:[22763..22783).3" Target="25003:[22763..22783).1" />
<Link Source="25003:[22763..22783).3" Target="25003:[18678..18713).3" />
<Link Source="25003:[22763..22783).3" Target="25003:[22703..22939).3" />
<Link Source="25003:[22801..22890).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[22908..22924).1" Target="25003:[22599..22615).1" />
<Link Source="25003:[22908..22924).1" Target="25003:[22763..22783).3" />
<Link Source="25003:[22908..22924).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[18943..18992).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[19106..19139).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[22908..22924).1" />
<Link Source="25003:[19106..19139).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19153..19205).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19219..19250).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[19219..19250).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[19219..19250).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).3" Target="25003:[19219..19250).1" />
<Link Source="25003:[19264..20938).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[23158..23173).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23158..23173).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23175..23190).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23175..23190).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23139..23801).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23139..23801).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23224..23425).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23224..23425).2" Target="25003:[23158..23173).1" />
<Link Source="25003:[23224..23425).2" Target="25003:[23224..23425).1" />
<Link Source="25003:[23224..23425).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23445..23528).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23445..23528).2" Target="25003:[23175..23190).1" />
<Link Source="25003:[23445..23528).2" Target="25003:[23445..23528).1" />
<Link Source="25003:[23445..23528).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23548..23600).1" Target="25003:[23175..23190).1" />
<Link Source="25003:[23548..23600).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23548..23600).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23548..23600).2" Target="25003:[23158..23173).1" />
<Link Source="25003:[23548..23600).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[23548..23600).2" Target="25003:[23548..23600).1" />
<Link Source="25003:[23548..23600).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23618..23712).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23618..23712).2" Target="25003:[23548..23600).2" />
<Link Source="25003:[23618..23712).2" Target="25003:[23618..23712).1" />
<Link Source="25003:[23618..23712).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23732..23786).1" Target="25003:[23175..23190).1" />
<Link Source="25003:[23732..23786).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23732..23786).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23732..23786).2" Target="25003:[23158..23173).1" />
<Link Source="25003:[23732..23786).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[23732..23786).2" Target="25003:[23732..23786).1" />
<Link Source="25003:[23732..23786).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23548..23600).4" Target="25003:[23175..23190).1" />
<Link Source="25003:[23548..23600).4" Target="25003:[23732..23786).2" />
<Link Source="25003:[23548..23600).4" Target="25003:[19264..20938).1" />
<Link Source="25003:[23618..23712).5" Target="25003:[23548..23600).4" />
<Link Source="25003:[23618..23712).5" Target="25003:[23618..23712).1" />
<Link Source="25003:[23618..23712).5" Target="25003:[19264..20938).1" />
<Link Source="25003:[19327..19352).1" Target="25003:[19219..19250).1" />
<Link Source="25003:[19327..19352).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[19370..19400).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[19370..19400).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[19418..19628).1" Target="25003:[19370..19400).1" />
<Link Source="25003:[19418..19628).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[19418..19628).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[19648..19745).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[19765..20366).1" Target="25003:[17841..17904).1" />
<Link Source="25003:[19765..20366).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[19846..19878).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[19846..19878).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19846..19878).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[19846..19878).2" Target="25003:[19765..20366).1" />
<Link Source="25003:[19846..19877).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[22454..22470).1" Target="25003:[19846..19878).1" />
<Link Source="25003:[22454..22470).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22472..22481).1" Target="25003:[19846..19878).2" />
<Link Source="25003:[22472..22481).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[22507..22533).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[22472..22481).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22454..22470).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22507..22533).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22507..22533).4" />
<Link Source="25003:[22507..22533).6" Target="25003:[19106..19139).3" />
<Link Source="25003:[22507..22533).6" Target="25003:[19846..19877).1" />
<Link Source="25003:[19846..19878).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[19900..19925).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[19900..19925).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[22507..22533).6" />
<Link Source="25003:[19900..19925).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19370..19400).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[19947..19983).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[19900..19925).3" />
<Link Source="25003:[19947..19983).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19947..19983).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[20005..20024).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[19947..19983).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[20112..20144).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[20112..20144).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20112..20144).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20112..20144).2" Target="25003:[20046..20347).1" />
<Link Source="25003:[20112..20143).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[22454..22470).2" Target="25003:[20112..20144).1" />
<Link Source="25003:[22454..22470).2" Target="25003:[20112..20143).1" />
<Link Source="25003:[22472..22481).2" Target="25003:[20112..20144).2" />
<Link Source="25003:[22472..22481).2" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).7" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).10" Target="25003:[22507..22533).7" />
<Link Source="25003:[22507..22533).10" Target="25003:[22472..22481).2" />
<Link Source="25003:[22507..22533).10" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).12" Target="25003:[22454..22470).2" />
<Link Source="25003:[22507..22533).12" Target="25003:[22507..22533).7" />
<Link Source="25003:[22507..22533).12" Target="25003:[22507..22533).10" />
<Link Source="25003:[22507..22533).12" Target="25003:[19947..19983).3" />
<Link Source="25003:[22507..22533).12" Target="25003:[20112..20143).1" />
<Link Source="25003:[20112..20144).3" Target="25003:[20046..20347).1" />
<Link Source="25003:[20170..20195).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[20170..20195).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[22507..22533).12" />
<Link Source="25003:[20170..20195).3" Target="25003:[20046..20347).1" />
<Link Source="25003:[20221..20324).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[18506..18543).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[20221..20324).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[20170..20195).3" />
<Link Source="25003:[20221..20324).8" Target="25003:[20046..20347).1" />
<Link Source="25003:[20386..20505).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[20386..20505).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20386..20505).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20386..20505).4" Target="25003:[17979..18071).2" />
<Link Source="25003:[20386..20505).4" Target="25003:[23732..23786).2" />
<Link Source="25003:[20386..20505).5" Target="25003:[18085..18181).2" />
<Link Source="25003:[20386..20505).5" Target="25003:[23732..23786).2" />
<Link Source="25003:[20404..20504).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[4933..4945).2" Target="25003:[20386..20505).1" />
<Link Source="25003:[4933..4945).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[4947..4965).2" Target="25003:[20386..20505).2" />
<Link Source="25003:[4947..4965).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[4967..5002).2" Target="25003:[20386..20505).4" />
<Link Source="25003:[4967..5002).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[5004..5041).2" Target="25003:[20386..20505).5" />
<Link Source="25003:[5004..5041).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[4904..7352).2" Target="25003:[20386..20505).2" />
<Link Source="25003:[4904..7352).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[912..917).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[912..917).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[950..967).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[950..967).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1000..1013).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1000..1013).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1048..1062).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1048..1062).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1099..1109).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1099..1109).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1151..1165).13" Target="25003:[4904..7352).2" />
<Link Source="25003:[1151..1165).13" Target="25003:[20404..20504).1" />
<Link Source="25003:[1336..1350).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1336..1350).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1460..1479).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1460..1479).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1527..1548).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1527..1548).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[5067..5072).2" Target="25003:[4933..4945).2" />
<Link Source="25003:[5067..5072).2" Target="25003:[20221..20324).1" />
<Link Source="25003:[5067..5072).2" Target="25003:[4904..7352).2" />
<Link Source="25003:[5067..5072).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[5096..5113).2" Target="25003:[4933..4945).2" />
<Link Source="25003:[5096..5113).2" Target="25003:[20221..20324).1" />
<Link Source="25003:[5096..5113).2" Target="25003:[4904..7352).2" />
<Link Source="25003:[5096..5113).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[5149..5162).2" Target="25003:[4933..4945).2" />
<Link Source="25003:[5149..5162).2" Target="25003:[20221..20324).1" />
<Link Source="25003:[5149..5162).2" Target="25003:[4904..7352).2" />
<Link Source="25003:[5149..5162).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[5194..5203).2" Target="25003:[4933..4945).2" />
<Link Source="25003:[5194..5203).2" Target="25003:[20221..20324).1" />
<Link Source="25003:[5194..5203).2" Target="25003:[4904..7352).2" />
<Link Source="25003:[5194..5203).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[5444..5476).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[5490..6130).9" Target="25003:[4933..4945).2" />
<Link Source="25003:[5490..6130).9" Target="25003:[20221..20324).1" />
<Link Source="25003:[5490..6130).9" Target="25003:[20404..20504).1" />
<Link Source="25003:[7118..7245).7" Target="25003:[4904..7352).2" />
<Link Source="25003:[7118..7245).8" Target="25003:[4904..7352).2" />
<Link Source="25003:[7118..7245).8" Target="25003:[5490..6130).9" />
<Link Source="25003:[7118..7245).8" Target="25003:[7118..7245).7" />
<Link Source="25003:[7118..7245).10" Target="25003:[4904..7352).2" />
<Link Source="25003:[7118..7245).10" Target="25003:[5490..6130).9" />
<Link Source="25003:[7118..7245).10" Target="25003:[5194..5203).2" />
<Link Source="25003:[7118..7245).10" Target="25003:[7118..7245).7" />
<Link Source="25003:[20523..20557).1" Target="25003:[20386..20505).2" />
<Link Source="25003:[20523..20557).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20575..20622).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[20575..20622).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20575..20622).2" Target="25003:[20386..20505).2" />
<Link Source="25003:[20575..20622).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[20575..20622).1" />
<Link Source="25003:[20575..20622).3" Target="25003:[20575..20622).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5194..5203).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5490..6130).9" />
<Link Source="25003:[20575..20622).3" Target="25003:[5096..5113).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5149..5162).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[4904..7352).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[4947..4965).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[4967..5002).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5004..5041).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[23732..23786).2" />
<Link Source="25003:[20575..20622).4" Target="25003:[23732..23786).2" />
<Link Source="25003:[10680..10725).4" Target="25003:[20575..20622).4" />
<Link Source="25003:[10680..10725).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[10680..10725).5" Target="25003:[10680..10725).4" />
<Link Source="25003:[10680..10725).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[10815..10891).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[10815..10891).3" Target="25003:[20575..20622).4" />
<Link Source="25003:[10907..10975).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[10907..10975).3" Target="25003:[20575..20622).4" />
<Link Source="25003:[10991..11148).2" Target="25003:[20575..20622).3" />
<Link Source="25003:[10991..11148).2" Target="25003:[20575..20622).4" />
<Link Source="25003:[11059..11133).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[11059..11133).3" Target="25003:[10991..11148).2" />
<Link Source="25003:[11164..11464).4" Target="25003:[20575..20622).4" />
<Link Source="25003:[11164..11464).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[11164..11464).5" Target="25003:[11164..11464).4" />
<Link Source="25003:[11164..11464).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[11224..11449).4" Target="25003:[11164..11464).5" />
<Link Source="25003:[11294..11430).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[11294..11430).3" Target="25003:[11224..11449).4" />
<Link Source="25003:[11480..11903).4" Target="25003:[20575..20622).4" />
<Link Source="25003:[11480..11903).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[11480..11903).5" Target="25003:[11480..11903).4" />
<Link Source="25003:[11480..11903).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[11917..12344).4" Target="25003:[20575..20622).4" />
<Link Source="25003:[11917..12344).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[11917..12344).5" Target="25003:[11917..12344).4" />
<Link Source="25003:[11917..12344).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[12436..12535).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[12436..12535).3" Target="25003:[20575..20622).4" />
<Link Source="25003:[12855..12915).4" Target="25003:[20575..20622).3" />
<Link Source="25003:[13514..13693).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[13514..13693).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[20640..20746).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20640..20746).2" Target="25003:[20575..20622).3" />
<Link Source="25003:[20640..20746).2" Target="25003:[20640..20746).1" />
<Link Source="25003:[20640..20746).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20695..20727).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[20695..20727).1" Target="25003:[20575..20622).3" />
<Link Source="25003:[20695..20727).1" Target="25003:[20640..20746).2" />
<Link Source="25003:[20764..20834).1" Target="25003:[20386..20505).2" />
<Link Source="25003:[20764..20834).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20764..20834).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20764..20834).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20782..20832).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[22283..22306).2" Target="25003:[20764..20834).1" />
<Link Source="25003:[22283..22306).2" Target="25003:[20782..20832).1" />
<Link Source="25003:[22308..22323).2" Target="25003:[20764..20834).2" />
<Link Source="25003:[22308..22323).2" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).13" Target="25003:[22349..22404).10" />
<Link Source="25003:[22349..22404).13" Target="25003:[22308..22323).2" />
<Link Source="25003:[22349..22404).13" Target="25003:[20782..20832).1" />
<Link Source="25003:[14837..14866).3" Target="25003:[20782..20832).1" />
<Link Source="25003:[14882..14907).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[14882..14907).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[14882..14907).6" Target="25003:[14882..14907).4" />
<Link Source="25003:[14882..14907).6" Target="25003:[20782..20832).1" />
<Link Source="25003:[14921..15244).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[14921..15244).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[14921..15244).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[14921..15244).5" Target="25003:[14921..15244).4" />
<Link Source="25003:[14921..15244).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[15100..15131).3" Target="25003:[22283..22306).2" />
<Link Source="25003:[15100..15131).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[15100..15131).3" Target="25003:[14921..15244).5" />
<Link Source="25003:[15100..15131).4" Target="25003:[14837..14866).3" />
<Link Source="25003:[15100..15131).4" Target="25003:[15100..15131).3" />
<Link Source="25003:[15100..15131).4" Target="25003:[14882..14907).6" />
<Link Source="25003:[15100..15131).4" Target="25003:[14921..15244).5" />
<Link Source="25003:[15149..15164).4" Target="25003:[14921..15244).5" />
<Link Source="25003:[15149..15164).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15149..15164).6" Target="25003:[15149..15164).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[15100..15131).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[14921..15244).5" />
<Link Source="25003:[15182..15229).6" Target="25003:[22283..22306).2" />
<Link Source="25003:[15182..15229).6" Target="25003:[20575..20622).3" />
<Link Source="25003:[15182..15229).6" Target="25003:[14921..15244).5" />
<Link Source="25003:[15182..15229).10" Target="25003:[14837..14866).3" />
<Link Source="25003:[15182..15229).10" Target="25003:[15182..15229).6" />
<Link Source="25003:[15182..15229).10" Target="25003:[15149..15164).6" />
<Link Source="25003:[15182..15229).10" Target="25003:[14921..15244).5" />
<Link Source="25003:[15260..15767).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[15260..15767).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[15260..15767).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[15260..15767).5" Target="25003:[15260..15767).4" />
<Link Source="25003:[15260..15767).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[15320..15717).13" Target="25003:[15260..15767).5" />
<Link Source="25003:[15632..15650).4" Target="25003:[15320..15717).13" />
<Link Source="25003:[15632..15650).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15632..15650).6" Target="25003:[15632..15650).4" />
<Link Source="25003:[15632..15650).6" Target="25003:[15182..15229).10" />
<Link Source="25003:[15632..15650).6" Target="25003:[15320..15717).13" />
<Link Source="25003:[15672..15698).3" Target="25003:[22283..22306).2" />
<Link Source="25003:[15672..15698).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[15672..15698).3" Target="25003:[15320..15717).13" />
<Link Source="25003:[15672..15698).4" Target="25003:[14837..14866).3" />
<Link Source="25003:[15672..15698).4" Target="25003:[15672..15698).3" />
<Link Source="25003:[15672..15698).4" Target="25003:[15632..15650).6" />
<Link Source="25003:[15672..15698).4" Target="25003:[15320..15717).13" />
<Link Source="25003:[15737..15752).4" Target="25003:[15260..15767).5" />
<Link Source="25003:[15737..15752).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15737..15752).6" Target="25003:[15737..15752).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[15672..15698).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[15260..15767).5" />
<Link Source="25003:[15783..15883).2" Target="25003:[22283..22306).2" />
<Link Source="25003:[15783..15883).2" Target="25003:[20575..20622).3" />
<Link Source="25003:[15783..15883).2" Target="25003:[20782..20832).1" />
<Link Source="25003:[15899..15914).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[15899..15914).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15899..15914).6" Target="25003:[15899..15914).4" />
<Link Source="25003:[15899..15914).6" Target="25003:[15737..15752).6" />
<Link Source="25003:[15899..15914).6" Target="25003:[20782..20832).1" />
<Link Source="25003:[15930..16520).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[15930..16520).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[15930..16520).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[15986..16015).4" Target="25003:[15930..16520).5" />
<Link Source="25003:[15986..16015).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15986..16015).6" Target="25003:[15986..16015).4" />
<Link Source="25003:[15986..16015).6" Target="25003:[15899..15914).6" />
<Link Source="25003:[15986..16015).6" Target="25003:[15930..16520).5" />
<Link Source="25003:[16202..16218).7" Target="25003:[15930..16520).5" />
<Link Source="25003:[16202..16218).9" Target="25003:[14837..14866).3" />
<Link Source="25003:[16202..16218).9" Target="25003:[16202..16218).7" />
<Link Source="25003:[16202..16218).9" Target="25003:[15986..16015).6" />
<Link Source="25003:[16202..16218).9" Target="25003:[15930..16520).5" />
<Link Source="25003:[16240..16275).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[16240..16275).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16240..16275).6" Target="25003:[16240..16275).5" />
<Link Source="25003:[16240..16275).6" Target="25003:[16202..16218).9" />
<Link Source="25003:[16240..16275).6" Target="25003:[15930..16520).5" />
<Link Source="25003:[16297..16313).7" Target="25003:[15930..16520).5" />
<Link Source="25003:[16297..16313).9" Target="25003:[14837..14866).3" />
<Link Source="25003:[16297..16313).9" Target="25003:[16297..16313).7" />
<Link Source="25003:[16297..16313).9" Target="25003:[16240..16275).6" />
<Link Source="25003:[16297..16313).9" Target="25003:[15930..16520).5" />
<Link Source="25003:[16335..16453).9" Target="25003:[15930..16520).5" />
<Link Source="25003:[16414..16430).4" Target="25003:[16335..16453).9" />
<Link Source="25003:[16414..16430).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16414..16430).6" Target="25003:[16414..16430).4" />
<Link Source="25003:[16414..16430).6" Target="25003:[16297..16313).9" />
<Link Source="25003:[16414..16430).6" Target="25003:[16335..16453).9" />
<Link Source="25003:[16490..16505).4" Target="25003:[15930..16520).5" />
<Link Source="25003:[16490..16505).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16490..16505).6" Target="25003:[16490..16505).4" />
<Link Source="25003:[16490..16505).6" Target="25003:[16414..16430).6" />
<Link Source="25003:[16490..16505).6" Target="25003:[15930..16520).5" />
<Link Source="25003:[16536..16829).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[16536..16829).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[16536..16829).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[16536..16829).5" Target="25003:[16536..16829).4" />
<Link Source="25003:[16536..16829).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[16596..16624).4" Target="25003:[16536..16829).5" />
<Link Source="25003:[16596..16624).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16596..16624).6" Target="25003:[16596..16624).4" />
<Link Source="25003:[16596..16624).6" Target="25003:[16490..16505).6" />
<Link Source="25003:[16596..16624).6" Target="25003:[16536..16829).5" />
<Link Source="25003:[16642..16683).5" Target="25003:[16536..16829).5" />
<Link Source="25003:[16642..16683).8" Target="25003:[14837..14866).3" />
<Link Source="25003:[16642..16683).8" Target="25003:[16642..16683).5" />
<Link Source="25003:[16642..16683).8" Target="25003:[16596..16624).6" />
<Link Source="25003:[16642..16683).8" Target="25003:[16536..16829).5" />
<Link Source="25003:[16701..16717).4" Target="25003:[16536..16829).5" />
<Link Source="25003:[16701..16717).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16701..16717).6" Target="25003:[16701..16717).4" />
<Link Source="25003:[16701..16717).6" Target="25003:[16642..16683).8" />
<Link Source="25003:[16701..16717).6" Target="25003:[16536..16829).5" />
<Link Source="25003:[16735..16781).5" Target="25003:[16536..16829).5" />
<Link Source="25003:[16735..16781).8" Target="25003:[14837..14866).3" />
<Link Source="25003:[16735..16781).8" Target="25003:[16735..16781).5" />
<Link Source="25003:[16735..16781).8" Target="25003:[16701..16717).6" />
<Link Source="25003:[16735..16781).8" Target="25003:[16536..16829).5" />
<Link Source="25003:[16799..16814).4" Target="25003:[16536..16829).5" />
<Link Source="25003:[16799..16814).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16799..16814).6" Target="25003:[16799..16814).4" />
<Link Source="25003:[16799..16814).6" Target="25003:[16735..16781).8" />
<Link Source="25003:[16799..16814).6" Target="25003:[16536..16829).5" />
<Link Source="25003:[16845..16954).2" Target="25003:[22283..22306).2" />
<Link Source="25003:[16845..16954).2" Target="25003:[15930..16520).5" />
<Link Source="25003:[16845..16954).2" Target="25003:[20782..20832).1" />
<Link Source="25003:[16970..17144).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[16970..17144).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[16970..17144).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[16970..17144).5" Target="25003:[16970..17144).4" />
<Link Source="25003:[16970..17144).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[17160..17340).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[17160..17340).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[17160..17340).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[17160..17340).5" Target="25003:[17160..17340).4" />
<Link Source="25003:[17160..17340).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[17356..17482).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[17356..17482).6" Target="25003:[22283..22306).2" />
<Link Source="25003:[17356..17482).6" Target="25003:[15930..16520).5" />
<Link Source="25003:[17356..17482).6" Target="25003:[17356..17482).5" />
<Link Source="25003:[17356..17482).6" Target="25003:[20782..20832).1" />
<Link Source="25003:[17498..17519).3" Target="25003:[14837..14866).3" />
<Link Source="25003:[17498..17519).3" Target="25003:[16799..16814).6" />
<Link Source="25003:[17498..17519).3" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).16" Target="25003:[17498..17519).3" />
<Link Source="25003:[22349..22404).16" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).17" Target="25003:[22349..22404).13" />
<Link Source="25003:[22349..22404).17" Target="25003:[22349..22404).16" />
<Link Source="25003:[22349..22404).17" Target="25003:[20782..20832).1" />
<Link Source="25003:[20764..20834).5" Target="25003:[18506..18543).1" />
<Link Source="25003:[20764..20834).5" Target="25003:[22349..22404).17" />
<Link Source="25003:[20764..20834).5" Target="25003:[20221..20324).8" />
<Link Source="25003:[20764..20834).5" Target="25003:[23732..23786).2" />
<Link Source="25003:[20852..20923).1" Target="25003:[20695..20727).1" />
<Link Source="25003:[20852..20923).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20852..20923).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20852..20923).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20867..20921).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[22283..22306).3" Target="25003:[20852..20923).1" />
<Link Source="25003:[22283..22306).3" Target="25003:[20867..20921).1" />
<Link Source="25003:[22308..22323).3" Target="25003:[20852..20923).2" />
<Link Source="25003:[22308..22323).3" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).19" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).22" Target="25003:[22349..22404).19" />
<Link Source="25003:[22349..22404).22" Target="25003:[22308..22323).3" />
<Link Source="25003:[22349..22404).22" Target="25003:[20867..20921).1" />
<Link Source="25003:[14837..14866).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[14882..14907).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[14882..14907).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[14882..14907).9" Target="25003:[14882..14907).7" />
<Link Source="25003:[14882..14907).9" Target="25003:[20867..20921).1" />
<Link Source="25003:[14921..15244).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[14921..15244).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[14921..15244).8" Target="25003:[15930..16520).5" />
<Link Source="25003:[14921..15244).8" Target="25003:[14921..15244).7" />
<Link Source="25003:[14921..15244).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[15100..15131).5" Target="25003:[22283..22306).3" />
<Link Source="25003:[15100..15131).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[15100..15131).5" Target="25003:[14921..15244).8" />
<Link Source="25003:[15100..15131).6" Target="25003:[14837..14866).5" />
<Link Source="25003:[15100..15131).6" Target="25003:[15100..15131).5" />
<Link Source="25003:[15100..15131).6" Target="25003:[14882..14907).9" />
<Link Source="25003:[15100..15131).6" Target="25003:[14921..15244).8" />
<Link Source="25003:[15149..15164).7" Target="25003:[14921..15244).8" />
<Link Source="25003:[15149..15164).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15149..15164).9" Target="25003:[15149..15164).7" />
<Link Source="25003:[15149..15164).9" Target="25003:[15100..15131).6" />
<Link Source="25003:[15149..15164).9" Target="25003:[14921..15244).8" />
<Link Source="25003:[15182..15229).11" Target="25003:[22283..22306).3" />
<Link Source="25003:[15182..15229).11" Target="25003:[15930..16520).5" />
<Link Source="25003:[15182..15229).11" Target="25003:[14921..15244).8" />
<Link Source="25003:[15182..15229).15" Target="25003:[14837..14866).5" />
<Link Source="25003:[15182..15229).15" Target="25003:[15182..15229).11" />
<Link Source="25003:[15182..15229).15" Target="25003:[15149..15164).9" />
<Link Source="25003:[15182..15229).15" Target="25003:[14921..15244).8" />
<Link Source="25003:[15260..15767).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[15260..15767).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[15260..15767).8" Target="25003:[15930..16520).5" />
<Link Source="25003:[15260..15767).8" Target="25003:[15260..15767).7" />
<Link Source="25003:[15260..15767).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[15320..15717).25" Target="25003:[15260..15767).8" />
<Link Source="25003:[15632..15650).7" Target="25003:[15320..15717).25" />
<Link Source="25003:[15632..15650).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15632..15650).9" Target="25003:[15632..15650).7" />
<Link Source="25003:[15632..15650).9" Target="25003:[15182..15229).15" />
<Link Source="25003:[15632..15650).9" Target="25003:[15320..15717).25" />
<Link Source="25003:[15672..15698).5" Target="25003:[22283..22306).3" />
<Link Source="25003:[15672..15698).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[15672..15698).5" Target="25003:[15320..15717).25" />
<Link Source="25003:[15672..15698).6" Target="25003:[14837..14866).5" />
<Link Source="25003:[15672..15698).6" Target="25003:[15672..15698).5" />
<Link Source="25003:[15672..15698).6" Target="25003:[15632..15650).9" />
<Link Source="25003:[15672..15698).6" Target="25003:[15320..15717).25" />
<Link Source="25003:[15737..15752).7" Target="25003:[15260..15767).8" />
<Link Source="25003:[15737..15752).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15737..15752).9" Target="25003:[15737..15752).7" />
<Link Source="25003:[15737..15752).9" Target="25003:[15672..15698).6" />
<Link Source="25003:[15737..15752).9" Target="25003:[15260..15767).8" />
<Link Source="25003:[15783..15883).3" Target="25003:[22283..22306).3" />
<Link Source="25003:[15783..15883).3" Target="25003:[15930..16520).5" />
<Link Source="25003:[15783..15883).3" Target="25003:[20867..20921).1" />
<Link Source="25003:[15899..15914).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[15899..15914).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15899..15914).9" Target="25003:[15899..15914).7" />
<Link Source="25003:[15899..15914).9" Target="25003:[15737..15752).9" />
<Link Source="25003:[15899..15914).9" Target="25003:[20867..20921).1" />
<Link Source="25003:[15930..16520).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[15930..16520).8" Target="25003:[15930..16520).5" />
<Link Source="25003:[15930..16520).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[15986..16015).7" Target="25003:[15930..16520).8" />
<Link Source="25003:[15986..16015).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15986..16015).9" Target="25003:[15986..16015).7" />
<Link Source="25003:[15986..16015).9" Target="25003:[15899..15914).9" />
<Link Source="25003:[15986..16015).9" Target="25003:[15930..16520).8" />
<Link Source="25003:[16202..16218).13" Target="25003:[15930..16520).8" />
<Link Source="25003:[16202..16218).15" Target="25003:[14837..14866).5" />
<Link Source="25003:[16202..16218).15" Target="25003:[16202..16218).13" />
<Link Source="25003:[16202..16218).15" Target="25003:[15986..16015).9" />
<Link Source="25003:[16202..16218).15" Target="25003:[15930..16520).8" />
<Link Source="25003:[16240..16275).9" Target="25003:[15930..16520).8" />
<Link Source="25003:[16240..16275).10" Target="25003:[14837..14866).5" />
<Link Source="25003:[16240..16275).10" Target="25003:[16240..16275).9" />
<Link Source="25003:[16240..16275).10" Target="25003:[16202..16218).15" />
<Link Source="25003:[16240..16275).10" Target="25003:[15930..16520).8" />
<Link Source="25003:[16297..16313).13" Target="25003:[15930..16520).8" />
<Link Source="25003:[16297..16313).15" Target="25003:[14837..14866).5" />
<Link Source="25003:[16297..16313).15" Target="25003:[16297..16313).13" />
<Link Source="25003:[16297..16313).15" Target="25003:[16240..16275).10" />
<Link Source="25003:[16297..16313).15" Target="25003:[15930..16520).8" />
<Link Source="25003:[16335..16453).17" Target="25003:[15930..16520).8" />
<Link Source="25003:[16414..16430).7" Target="25003:[16335..16453).17" />
<Link Source="25003:[16414..16430).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16414..16430).9" Target="25003:[16414..16430).7" />
<Link Source="25003:[16414..16430).9" Target="25003:[16297..16313).15" />
<Link Source="25003:[16414..16430).9" Target="25003:[16335..16453).17" />
<Link Source="25003:[16490..16505).7" Target="25003:[15930..16520).8" />
<Link Source="25003:[16490..16505).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16490..16505).9" Target="25003:[16490..16505).7" />
<Link Source="25003:[16490..16505).9" Target="25003:[16414..16430).9" />
<Link Source="25003:[16490..16505).9" Target="25003:[15930..16520).8" />
<Link Source="25003:[16536..16829).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[16536..16829).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[16536..16829).8" Target="25003:[15930..16520).8" />
<Link Source="25003:[16536..16829).8" Target="25003:[16536..16829).7" />
<Link Source="25003:[16536..16829).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[16596..16624).7" Target="25003:[16536..16829).8" />
<Link Source="25003:[16596..16624).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16596..16624).9" Target="25003:[16596..16624).7" />
<Link Source="25003:[16596..16624).9" Target="25003:[16490..16505).9" />
<Link Source="25003:[16596..16624).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16642..16683).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16642..16683).12" Target="25003:[14837..14866).5" />
<Link Source="25003:[16642..16683).12" Target="25003:[16642..16683).9" />
<Link Source="25003:[16642..16683).12" Target="25003:[16596..16624).9" />
<Link Source="25003:[16642..16683).12" Target="25003:[16536..16829).8" />
<Link Source="25003:[16701..16717).7" Target="25003:[16536..16829).8" />
<Link Source="25003:[16701..16717).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16701..16717).9" Target="25003:[16701..16717).7" />
<Link Source="25003:[16701..16717).9" Target="25003:[16642..16683).12" />
<Link Source="25003:[16701..16717).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16735..16781).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16735..16781).12" Target="25003:[14837..14866).5" />
<Link Source="25003:[16735..16781).12" Target="25003:[16735..16781).9" />
<Link Source="25003:[16735..16781).12" Target="25003:[16701..16717).9" />
<Link Source="25003:[16735..16781).12" Target="25003:[16536..16829).8" />
<Link Source="25003:[16799..16814).7" Target="25003:[16536..16829).8" />
<Link Source="25003:[16799..16814).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16799..16814).9" Target="25003:[16799..16814).7" />
<Link Source="25003:[16799..16814).9" Target="25003:[16735..16781).12" />
<Link Source="25003:[16799..16814).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16845..16954).3" Target="25003:[22283..22306).3" />
<Link Source="25003:[16845..16954).3" Target="25003:[15930..16520).8" />
<Link Source="25003:[16845..16954).3" Target="25003:[20867..20921).1" />
<Link Source="25003:[16970..17144).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[16970..17144).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[16970..17144).8" Target="25003:[15930..16520).8" />
<Link Source="25003:[16970..17144).8" Target="25003:[16970..17144).7" />
<Link Source="25003:[16970..17144).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[17160..17340).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[17160..17340).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[17160..17340).8" Target="25003:[15930..16520).8" />
<Link Source="25003:[17160..17340).8" Target="25003:[17160..17340).7" />
<Link Source="25003:[17160..17340).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[17356..17482).9" Target="25003:[20867..20921).1" />
<Link Source="25003:[17356..17482).10" Target="25003:[22283..22306).3" />
<Link Source="25003:[17356..17482).10" Target="25003:[15930..16520).8" />
<Link Source="25003:[17356..17482).10" Target="25003:[17356..17482).9" />
<Link Source="25003:[17356..17482).10" Target="25003:[20867..20921).1" />
<Link Source="25003:[17498..17519).5" Target="25003:[14837..14866).5" />
<Link Source="25003:[17498..17519).5" Target="25003:[16799..16814).9" />
<Link Source="25003:[17498..17519).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).25" Target="25003:[17498..17519).5" />
<Link Source="25003:[22349..22404).25" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).26" Target="25003:[22349..22404).22" />
<Link Source="25003:[22349..22404).26" Target="25003:[22349..22404).25" />
<Link Source="25003:[22349..22404).26" Target="25003:[20867..20921).1" />
<Link Source="25003:[20852..20923).5" Target="25003:[19153..19205).1" />
<Link Source="25003:[20852..20923).5" Target="25003:[22349..22404).26" />
<Link Source="25003:[20852..20923).5" Target="25003:[23732..23786).2" />
<Link Source="25003:[20952..21034).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20952..21034).2" Target="25003:[20952..21034).1" />
<Link Source="25003:[20952..21034).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[20995..21019).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[20995..21019).1" Target="25003:[20764..20834).5" />
<Link Source="25003:[20995..21019).1" Target="25003:[20952..21034).2" />
<Link Source="25003:[21050..21081).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[21050..21081).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[20995..21019).1" />
<Link Source="25003:[21050..21081).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21095..21192).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).2" Target="25003:[19153..19205).1" />
<Link Source="25003:[21095..21192).2" Target="25002:[4126..4179).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3129..3133).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3121..3141).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3135..3139).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3121..3141).1" />
<Link Source="25012:[3102..3141).1" Target="25012:[3121..3141).1" />
<Link Source="25003:[21095..21192).3" Target="EXTERNAL" />
<Link Source="25003:[21095..21192).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[21113..21190).1" Target="25002:[4126..4179).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21095..21192).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2498..2519).1" Target="25003:[21095..21192).2" />
<Link Source="25012:[2498..2519).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2521..2537).1" Target="25003:[21095..21192).3" />
<Link Source="25012:[2521..2537).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2539..2575).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2539..2575).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2577..2608).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2577..2608).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2539..2575).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2634..2703).1" />
<Link Source="25012:[2634..2703).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2644..2662).1" Target="25012:[2634..2703).2" />
<Link Source="25012:[2644..2662).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1074..1101).1" Target="EXTERNAL" />
<Link Source="25012:[1194..1223).1" Target="25012:[1074..1101).1" />
<Link Source="25012:[1194..1223).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1183..1293).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[4217..4231).1" Target="25012:[4230..4231).1" />
<Link Source="25012:[4264..4278).1" Target="25012:[4277..4278).1" />
<Link Source="25012:[4311..4325).1" Target="25012:[4324..4325).1" />
<Link Source="25012:[3676..10647).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1194..1223).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1053..1102).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[2717..2783).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2717..2783).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2577..2608).1" />
<Link Source="25012:[2717..2783).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2799..2869).1" Target="25012:[2473..2496).1" />
<Link Source="25012:[2799..2869).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2883..2947).1" Target="25012:[2498..2519).1" />
<Link Source="25012:[2883..2947).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).1" Target="25012:[2521..2537).1" />
<Link Source="25012:[2963..3048).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[2963..3048).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2963..3048).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).4" Target="25012:[2717..2783).3" />
<Link Source="25012:[2963..3048).4" Target="25003:[21113..21190).1" />
<Link Source="25012:[2993..3046).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1574..1592).1" Target="25012:[2963..3048).2" />
<Link Source="25012:[1574..1592).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1594..1612).1" Target="25012:[2963..3048).3" />
<Link Source="25012:[1594..1612).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1614..1638).1" Target="25012:[2963..3048).4" />
<Link Source="25012:[1614..1638).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2644..2662).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2883..2947).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2993..3046).1" />
<Link Source="25012:[1693..1757).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1672..2400).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5415..5426).1" Target="25012:[1672..2400).2" />
<Link Source="25012:[5415..5426).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5428..5447).1" Target="25012:[1672..2400).3" />
<Link Source="25012:[5428..5447).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5449..5460).1" Target="25012:[1672..2400).4" />
<Link Source="25012:[5449..5460).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1533..2415).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[5394..5413).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[5415..5426).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[5428..5447).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[5449..5460).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5505..5562).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5494..5563).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9423..9434).1" Target="25012:[5494..5563).2" />
<Link Source="25012:[9423..9434).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9436..9455).1" Target="25012:[5494..5563).3" />
<Link Source="25012:[9436..9455).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9457..9468).1" Target="25012:[5494..5563).4" />
<Link Source="25012:[9457..9468).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5357..6686).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9423..9434).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9502..9523).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9457..9468).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9541..9562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9740..9764).1" Target="25012:[9502..9523).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[9541..9562).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9796).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9784..9796).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9814..9943).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[9889..9924).1" Target="25012:[9814..9943).3" />
<Link Source="25012:[9889..9924).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9889..9924).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9814..9943).3" />
<Link Source="25012:[9889..9896).1" Target="25012:[9889..9924).5" />
<Link Source="25012:[9889..9896).1" Target="25012:[9814..9943).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9889..9924).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9814..9943).3" />
<Link Source="25012:[9963..10092).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9963..10092).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10038..10073).1" Target="25012:[9963..10092).3" />
<Link Source="25012:[10038..10073).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9889..9896).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[10038..10073).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9963..10092).3" />
<Link Source="25012:[10038..10045).1" Target="25012:[10038..10073).5" />
<Link Source="25012:[10038..10045).1" Target="25012:[10038..10073).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9963..10092).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9963..10092).3" />
<Link Source="25012:[10112..10592).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10187..10573).1" Target="25012:[10112..10592).3" />
<Link Source="25012:[10187..10573).3" Target="25012:[10187..10573).1" />
<Link Source="25012:[10187..10573).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[10187..10573).3" Target="25012:[10112..10592).3" />
<Link Source="25012:[10270..10363).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[9889..9896).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10038..10045).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10270..10363).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).6" Target="25012:[9402..9421).1" />
<Link Source="25012:[10270..10363).6" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).10" Target="25012:[9436..9455).1" />
<Link Source="25012:[10270..10363).10" Target="25012:[10187..10573).3" />
<Link Source="25012:[10298..10344).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[1344..1362).1" Target="25012:[10270..10363).6" />
<Link Source="25012:[1344..1362).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1364..1374).1" Target="25012:[10270..10363).1" />
<Link Source="25012:[1364..1374).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1376..1394).1" Target="25012:[10270..10363).10" />
<Link Source="25012:[1376..1394).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1396..1406).1" Target="25012:[10270..10363).1" />
<Link Source="25012:[1396..1406).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1309..1517).1" Target="25012:[9369..10636).1" />
<Link Source="25012:[1309..1517).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[1344..1362).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[2799..2869).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[1364..1374).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[1376..1394).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[1396..1406).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[1309..1517).1" />
<Link Source="25012:[1440..1502).5" Target="EXTERNAL" />
<Link Source="25012:[1440..1502).5" Target="25012:[1440..1502).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[1440..1502).3" />
<Link Source="25012:[1440..1502).5" Target="25012:[2799..2869).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[2883..2947).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[10298..10344).1" />
<Link Source="25012:[10270..10363).17" Target="25012:[10270..10363).5" />
<Link Source="25012:[10270..10363).17" Target="25012:[1440..1502).5" />
<Link Source="25012:[10270..10363).17" Target="25012:[10187..10573).3" />
<Link Source="25012:[10389..10423).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10389..10423).3" Target="25012:[9740..9764).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[9784..9791).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[9889..9896).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10038..10045).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10389..10423).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10187..10573).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10449..10483).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10449..10483).3" Target="25012:[9740..9764).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[9784..9791).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[9889..9896).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10038..10045).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10449..10483).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).1" Target="25012:[10270..10363).17" />
<Link Source="25012:[10509..10550).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).2" Target="25012:[10389..10423).3" />
<Link Source="25012:[10509..10550).2" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).3" Target="25012:[10509..10550).1" />
<Link Source="25012:[10509..10550).3" Target="25012:[10509..10550).2" />
<Link Source="25012:[10509..10550).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).5" Target="25012:[10449..10483).3" />
<Link Source="25012:[10509..10550).5" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).6" Target="25012:[10509..10550).3" />
<Link Source="25012:[10509..10550).6" Target="25012:[10509..10550).5" />
<Link Source="25012:[10509..10550).6" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10516).1" Target="25012:[10509..10550).6" />
<Link Source="25012:[10509..10516).1" Target="25012:[10112..10592).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[10187..10573).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10612..10621).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[5415..5426).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[5449..5460).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[5615..5631).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).5" Target="25012:[5651..6341).2" />
<Link Source="25012:[5651..6341).5" Target="25012:[5651..6341).4" />
<Link Source="25012:[5651..6341).5" Target="25012:[1693..1757).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10612..10621).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9784..9791).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9889..9896).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10038..10045).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10509..10516).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5651..6341).5" />
<Link Source="25012:[5716..6322).2" Target="25012:[5651..6341).5" />
<Link Source="25012:[5716..6322).4" Target="25012:[10612..10621).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9740..9764).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9784..9791).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9889..9896).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[10038..10045).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[10509..10516).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[5716..6322).2" />
<Link Source="25012:[5716..6322).4" Target="25012:[5615..5631).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[5651..6341).5" />
<Link Source="25012:[5931..6322).1" Target="25012:[10612..10621).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9784..9791).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9889..9896).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[10038..10045).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[10509..10516).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5716..6322).4" />
<Link Source="25012:[5931..6322).2" Target="25012:[5716..6322).4" />
<Link Source="25012:[6194..6198).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[6194..6198).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6224..6228).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[6224..6228).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).2" Target="EXTERNAL" />
<Link Source="25012:[6254..6299).2" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).3" Target="25012:[6194..6198).1" />
<Link Source="25012:[6254..6299).3" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).4" Target="25012:[6224..6228).1" />
<Link Source="25012:[6254..6299).4" Target="25012:[5931..6322).2" />
<Link Source="25012:[6267..6298).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[3967..3980).1" Target="25012:[6254..6299).2" />
<Link Source="25012:[3967..3980).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3982..3992).1" Target="25012:[6254..6299).3" />
<Link Source="25012:[3982..3992).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3994..4004).1" Target="25012:[6254..6299).4" />
<Link Source="25012:[3994..4004).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3953..4168).1" Target="25012:[6254..6299).1" />
<Link Source="25012:[3953..4168).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[3967..3980).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[3982..3992).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[3994..4004).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[6361..6506).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[6194..6198).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[6361..6506).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[6224..6228).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[6526..6671).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[6254..6299).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4046..4055).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4085..4096).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4128..4139).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[2993..3046).1" />
<Link Source="25012:[1809..2381).1" Target="25012:[1672..2400).7" />
<Link Source="25012:[2267..2322).1" Target="25012:[1809..2381).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[1440..1502).5" />
<Link Source="25012:[2267..2322).3" Target="25012:[1672..2400).7" />
<Link Source="25012:[2267..2322).3" Target="25012:[1809..2381).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[1614..1638).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[2267..2322).3" />
<Link Source="25012:[2267..2322).5" Target="25012:[2717..2783).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[1809..2381).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2267..2322).1" />
<Link Source="25012:[2963..3048).7" Target="25003:[21113..21190).1" />
<Link Source="25003:[21095..21192).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[21095..21192).10" Target="25012:[2963..3048).7" />
<Link Source="25003:[21095..21192).10" Target="25003:[21050..21081).3" />
<Link Source="25003:[21095..21192).10" Target="25002:[4126..4179).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[19153..19205).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[20852..20923).5" />
<Link Source="25003:[21208..21226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[22763..22783).1" />
<Link Source="25003:[21240..21260).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[21095..21192).10" />
<Link Source="25003:[21276..21305).1" Target="25002:[4126..4179).1" />
<Link Source="25002:[2401..2451).3" Target="25002:[4446..4474).1" />
<Link Source="25002:[4446..4475).3" Target="28001:[14630..14811).2" />
<Link Source="25002:[4489..4523).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4489..4523).1" Target="28001:[14630..14811).2" />
<Link Source="25002:[4489..4523).2" Target="10327:[1279..1312).2" />
<Link Source="25002:[4489..4523).2" Target="28001:[14630..14811).2" />
<Link Source="25002:[4489..4522).1" Target="28001:[14630..14811).2" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4523).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4523).2" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4653..4691).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[5097..5821).1" Target="25002:[4750..5836).1" />
<Link Source="25002:[5097..5821).1" Target="10327:[1279..1312).2" />
<Link Source="25002:[5097..5821).1" Target="25003:[15930..16520).8" />
<Link Source="25002:[5097..5821).2" Target="25002:[4637..4651).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[5097..5821).1" />
<Link Source="25002:[5097..5821).2" Target="25003:[15930..16520).8" />
<Link Source="25002:[5097..5821).2" Target="25002:[4750..5836).1" />
<Link Source="25002:[5675..5741).1" Target="25002:[4750..5836).1" />
<Link Source="25002:[5675..5741).1" Target="25002:[5097..5821).2" />
<Link Source="25002:[5763..5802).1" Target="25002:[5675..5741).1" />
<Link Source="25002:[5763..5802).1" Target="25002:[5097..5821).2" />
<Link Source="25002:[4489..4523).3" Target="28001:[14630..14811).2" />
<Link Source="25002:[4539..4548).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4539..4548).1" Target="28001:[14630..14811).2" />
</Links>
</DirectedGraph>
