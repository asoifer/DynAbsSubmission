digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 769382"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 769383"];
3 [label="param CompilationEmitTests(this) 769384"];
4 [label="param EmitMetadataTestBase(this) 769385"];
5 [label="param CSharpTestBase(this) 769386"];
6 [label="param CommonTestBase(this) 769387"];
7 [label="param TestBase(this) 769388"];
8 [label="_temp 769389"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 769390"];
10 [label="param Bug769741(this) 769391"];
11 [label="var comp = CreateEmptyCompilation('', new[] { TestReferences.SymbolsTests.netModule.x64COFF }, options: TestOptions.DebugDll); 769392"];
12 [label="new[] { TestReferences.SymbolsTests.netModule.x64COFF } 769393"];
13 [label="new[] { TestReferences.SymbolsTests.netModule.x64COFF } 769394"];
14 [label="param operator(string source) 769395"];
15 [label="source 769396"];
16 [label="new CSharpTestSource(source) 769397"];
17 [label="param CSharpTestSource(object value) 769398"];
18 [label="param CSharpTestSource(this) 769399"];
19 [label="Value 769400"];
20 [label="var comp = CreateEmptyCompilation('', new[] { TestReferences.SymbolsTests.netModule.x64COFF }, options: TestOptions.DebugDll); 769401"];
21 [label="var comp = CreateEmptyCompilation('', new[] { TestReferences.SymbolsTests.netModule.x64COFF }, options: TestOptions.DebugDll); 769402"];
22 [label="CreateEmptyCompilation('', new[] { TestReferences.SymbolsTests.netModule.x64COFF }, options: TestOptions.DebugDll) 769403"];
23 [label="param CreateEmptyCompilation(CSharpTestSource source) 769404"];
24 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 769405"];
25 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 769406"];
26 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 769407"];
27 [label="param CreateEmptyCompilation(string assemblyName = '') 769408"];
28 [label="param CreateEmptyCompilation(string sourceFileName = '') 769409"];
29 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 769410"];
30 [label="source 769411"];
31 [label="references 769412"];
32 [label="options 769413"];
33 [label="parseOptions 769414"];
34 [label="assemblyName 769415"];
35 [label="sourceFileName 769416"];
36 [label="skipUsesIsNullable 769417"];
37 [label="null 769418"];
38 [label="experimentalFeature: null 769419"];
39 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 769420"];
40 [label="param CreateCompilationCore(CSharpTestSource source) 769421"];
41 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 769422"];
42 [label="param CreateCompilationCore(CSharpCompilationOptions options) 769423"];
43 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 769424"];
44 [label="param CreateCompilationCore(string assemblyName) 769425"];
45 [label="param CreateCompilationCore(string sourceFileName) 769426"];
46 [label="param CreateCompilationCore(bool skipUsesIsNullable) 769427"];
47 [label="param CreateCompilationCore(MessageID? experimentalFeature) 769428"];
48 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 769429"];
49 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 769430"];
50 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 769431"];
51 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 769432"];
52 [label="param GetSyntaxTrees(string sourceFileName = '') 769433"];
53 [label="param GetSyntaxTrees(this) 769434"];
54 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 769435"];
55 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 769436"];
56 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 769437"];
57 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 769438"];
58 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 769439"];
59 [label="param Parse(string text) 769440"];
60 [label="param Parse(string filename = '') 769441"];
61 [label="param Parse(CSharpParseOptions options = null) 769442"];
62 [label="param Parse(Encoding encoding = null) 769443"];
63 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 769444"];
64 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 769445"];
65 [label="options = TestOptions.Regular; 769446"];
66 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 769447"];
67 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 769448"];
68 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 769449"];
69 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 769450"];
70 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 769451"];
71 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 769452"];
72 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 769453"];
73 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 769454"];
74 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 769455"];
75 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 769456"];
76 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 769457"];
77 [label="param CheckSerializable(SyntaxTree tree) 769458"];
78 [label="var stream = new MemoryStream(); 769459"];
79 [label="var root = tree.GetRoot(); 769460"];
80 [label="var root = tree.GetRoot(); 769461"];
81 [label="root.SerializeTo(stream); 769462"];
82 [label="root.SerializeTo(stream); 769463"];
83 [label="root.SerializeTo(stream); 769464"];
84 [label="stream.Position = 0; 769465"];
85 [label="stream.Position 769466"];
86 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 769467"];
87 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 769468"];
88 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 769469"];
89 [label="return tree; 769470"];
90 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 769471"];
91 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 769472"];
92 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 769473"];
93 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 769474"];
94 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 769475"];
95 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 769476"];
96 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 769477"];
97 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 769478"];
98 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 769479"];
99 [label="param ValidateIOperations(Func<Compilation> createCompilation) 769480"];
100 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 769481"];
101 [label="return; 769482"];
102 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 769483"];
103 [label="var compilation = createCompilationLambda(); 769484"];
104 [label="var compilation = createCompilationLambda(); 769485"];
105 [label="return Guid.NewGuid().ToString('D'); 769486"];
106 [label="var compilation = createCompilationLambda(); 769487"];
107 [label="OutputKind.ConsoleApplication 769488"];
108 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 769489"];
109 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 769490"];
110 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 769491"];
111 [label="OutputKind.DynamicallyLinkedLibrary 769492"];
112 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 769493"];
113 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 769494"];
114 [label="true 769495"];
115 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 769496"];
116 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 769497"];
117 [label="param Create(string? assemblyName) 769498"];
118 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 769499"];
119 [label="param Create(IEnumerable<MetadataReference>? references = null) 769500"];
120 [label="param Create(CSharpCompilationOptions? options = null) 769501"];
121 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 769502"];
122 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 769503"];
123 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 769504"];
124 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 769505"];
125 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 769506"];
126 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 769507"];
127 [label="param Create(string? assemblyName) 769508"];
128 [label="param Create(CSharpCompilationOptions options) 769509"];
129 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 769510"];
130 [label="param Create(IEnumerable<MetadataReference>? references) 769511"];
131 [label="param Create(CSharpCompilation? previousSubmission) 769512"];
132 [label="param Create(Type? returnType) 769513"];
133 [label="param Create(Type? hostObjectType) 769514"];
134 [label="param Create(bool isSubmission) 769515"];
135 [label="RoslynDebug.Assert(options != null); 769516"];
136 [label="RoslynDebug.Assert(options != null); 769517"];
137 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 769518"];
138 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 769519"];
139 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 769520"];
140 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 769521"];
141 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 769522"];
142 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 769523"];
143 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 769524"];
144 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 769525"];
145 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 769526"];
146 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 769527"];
147 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 769528"];
148 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 769529"];
149 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 769530"];
150 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 769531"];
151 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 769532"];
152 [label="param SyntaxAndDeclarationManager(string scriptClassName) 769533"];
153 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 769534"];
154 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 769535"];
155 [label="param SyntaxAndDeclarationManager(bool isSubmission) 769536"];
156 [label="param SyntaxAndDeclarationManager(State state) 769537"];
157 [label="param SyntaxAndDeclarationManager(this) 769538"];
158 [label="externalSyntaxTrees 769539"];
159 [label="scriptClassName 769540"];
160 [label="resolver 769541"];
161 [label="messageProvider 769542"];
162 [label="isSubmission 769543"];
163 [label="param SyntaxAndDeclarationManager(this) 769544"];
164 [label="param SyntaxAndDeclarationManager(this) 769545"];
165 [label="_lazyState 769546"];
166 [label="_lazyState 769547"];
167 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 769548"];
168 [label="param CSharpCompilation(string? assemblyName) 769549"];
169 [label="param CSharpCompilation(CSharpCompilationOptions options) 769550"];
170 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 769551"];
171 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 769552"];
172 [label="param CSharpCompilation(Type? submissionReturnType) 769553"];
173 [label="param CSharpCompilation(Type? hostObjectType) 769554"];
174 [label="param CSharpCompilation(bool isSubmission) 769555"];
175 [label="param CSharpCompilation(ReferenceManager? referenceManager) 769556"];
176 [label="param CSharpCompilation(bool reuseReferenceManager) 769557"];
177 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 769558"];
178 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 769559"];
179 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 769560"];
180 [label="param CSharpCompilation(this) 769561"];
181 [label="assemblyName 769562"];
182 [label="options 769563"];
183 [label="references 769564"];
184 [label="previousSubmission 769565"];
185 [label="submissionReturnType 769566"];
186 [label="hostObjectType 769567"];
187 [label="isSubmission 769568"];
188 [label="referenceManager 769569"];
189 [label="reuseReferenceManager 769570"];
190 [label="syntaxAndDeclarations 769571"];
191 [label="syntaxAndDeclarations.ExternalSyntaxTrees 769572"];
192 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 769573"];
193 [label="semanticModelProvider 769574"];
194 [label="eventQueue 769575"];
195 [label="param CSharpCompilation(this) 769576"];
196 [label="param CSharpCompilation(string? assemblyName) 769577"];
197 [label="param CSharpCompilation(CSharpCompilationOptions options) 769578"];
198 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 769579"];
199 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 769580"];
200 [label="param CSharpCompilation(Type? submissionReturnType) 769581"];
201 [label="param CSharpCompilation(Type? hostObjectType) 769582"];
202 [label="param CSharpCompilation(bool isSubmission) 769583"];
203 [label="param CSharpCompilation(ReferenceManager? referenceManager) 769584"];
204 [label="param CSharpCompilation(bool reuseReferenceManager) 769585"];
205 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 769586"];
206 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 769587"];
207 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 769588"];
208 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 769589"];
209 [label="param CSharpCompilation(this) 769590"];
210 [label="assemblyName 769591"];
211 [label="references 769592"];
212 [label="features 769593"];
213 [label="isSubmission 769594"];
214 [label="semanticModelProvider 769595"];
215 [label="eventQueue 769596"];
216 [label="param CSharpCompilation(this) 769597"];
217 [label="param CSharpCompilation(this) 769598"];
218 [label="_options 769599"];
219 [label="_globalImports 769600"];
220 [label="_previousSubmissionImports 769601"];
221 [label="_globalNamespaceAlias 769602"];
222 [label="_scriptClass 769603"];
223 [label="_lazyHostObjectTypeSymbol 769604"];
224 [label="_lazyImportInfos 769605"];
225 [label="_conversions 769606"];
226 [label="_anonymousTypeManager 769607"];
227 [label="_lazyGlobalNamespace 769608"];
228 [label="builtInOperators 769609"];
229 [label="_lazyAssemblySymbol 769610"];
230 [label="_referenceManager 769611"];
231 [label="_syntaxAndDeclarations 769612"];
232 [label="_lazyEntryPoint 769613"];
233 [label="_lazyEmitNullablePublicOnly 769614"];
234 [label="_lazyCompilationUnitCompletedTrees 769615"];
235 [label="NullableAnalysisData 769616"];
236 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 769617"];
237 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 769618"];
238 [label="_externAliasTargets 769619"];
239 [label="_moduleInitializerMethods 769620"];
240 [label="_binderFactories 769621"];
241 [label="_ignoreAccessibilityBinderFactories 769622"];
242 [label="_lazyDeclarationDiagnostics 769623"];
243 [label="_declarationDiagnosticsFrozen 769624"];
244 [label="new DiagnosticBag() 769625"];
245 [label="_additionalCodegenWarnings = new DiagnosticBag() 769626"];
246 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 769627"];
247 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 769628"];
248 [label="WellKnownMemberSignatureComparer 769629"];
249 [label="_options 769630"];
250 [label="this.builtInOperators = new BuiltInOperators(this); 769631"];
251 [label="this.builtInOperators = new BuiltInOperators(this); 769632"];
252 [label="new BuiltInOperators(this) 769633"];
253 [label="param BuiltInOperators(CSharpCompilation compilation) 769634"];
254 [label="param BuiltInOperators(this) 769635"];
255 [label="_compilation 769636"];
256 [label="_builtInUnaryOperators 769637"];
257 [label="_builtInOperators 769638"];
258 [label="_compilation 769639"];
259 [label="this.builtInOperators 769640"];
260 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 769641"];
261 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 769642"];
262 [label="_scriptClass 769643"];
263 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 769644"];
264 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 769645"];
265 [label="_globalImports 769646"];
266 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 769647"];
267 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 769648"];
268 [label="_previousSubmissionImports 769649"];
269 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 769650"];
270 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 769651"];
271 [label="_globalNamespaceAlias 769652"];
272 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 769653"];
273 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 769654"];
274 [label="_anonymousTypeManager 769655"];
275 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 769656"];
276 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 769657"];
277 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 769658"];
278 [label="LanguageVersion? result = null; 769659"];
279 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 769660"];
280 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 769661"];
281 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 769662"];
282 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 769663"];
283 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 769664"];
284 [label="this.LanguageVersion 769665"];
285 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 769666"];
286 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769667"];
287 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769668"];
288 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769669"];
289 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769670"];
290 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769671"];
291 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769672"];
292 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 769673"];
293 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 769674"];
294 [label="this.Options 769675"];
295 [label="get\n            {\n                return _options;\n            } 769676"];
296 [label="return _options; 769677"];
297 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 769678"];
298 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 769679"];
299 [label="_referenceManager 769680"];
300 [label="_syntaxAndDeclarations 769681"];
301 [label="Debug.Assert(_lazyAssemblySymbol is null); 769682"];
302 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 769683"];
303 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 769684"];
304 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 769685"];
305 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 769686"];
306 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 769687"];
307 [label="compilation.AddSyntaxTrees(syntaxTrees) 769688"];
308 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 769689"];
309 [label="param AddSyntaxTrees(this) 769690"];
310 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 769691"];
311 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 769692"];
312 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 769693"];
313 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 769694"];
314 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 769695"];
315 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 769696"];
316 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 769697"];
317 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 769698"];
318 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 769699"];
319 [label="bool reuseReferenceManager = true; 769700"];
320 [label="int i = 0; 769701"];
321 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 769702"];
322 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 769703"];
323 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 769704"];
324 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 769705"];
325 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 769706"];
326 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 769707"];
327 [label="externalSyntaxTrees.Add(tree); 769708"];
328 [label="externalSyntaxTrees.Add(tree); 769709"];
329 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 769710"];
330 [label="i++; 769711"];
331 [label="externalSyntaxTrees.Free(); 769712"];
332 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 769713"];
333 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 769714"];
334 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 769715"];
335 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 769716"];
336 [label="param AddSyntaxTrees(this) 769717"];
337 [label="var scriptClassName = this.ScriptClassName; 769718"];
338 [label="var resolver = this.Resolver; 769719"];
339 [label="var messageProvider = this.MessageProvider; 769720"];
340 [label="var isSubmission = this.IsSubmission; 769721"];
341 [label="var state = _lazyState; 769722"];
342 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 769723"];
343 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 769724"];
344 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 769725"];
345 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 769726"];
346 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 769727"];
347 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 769728"];
348 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 769729"];
349 [label="param WithExternalSyntaxTrees(this) 769730"];
350 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 769731"];
351 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 769732"];
352 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 769733"];
353 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 769734"];
354 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 769735"];
355 [label="param SyntaxAndDeclarationManager(string scriptClassName) 769736"];
356 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 769737"];
357 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 769738"];
358 [label="param SyntaxAndDeclarationManager(bool isSubmission) 769739"];
359 [label="param SyntaxAndDeclarationManager(State state) 769740"];
360 [label="param SyntaxAndDeclarationManager(this) 769741"];
361 [label="param SyntaxAndDeclarationManager(this) 769742"];
362 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 769743"];
363 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 769744"];
364 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 769745"];
365 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 769746"];
366 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 769747"];
367 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 769748"];
368 [label="param Update(ReferenceManager referenceManager) 769749"];
369 [label="param Update(bool reuseReferenceManager) 769750"];
370 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 769751"];
371 [label="param Update(this) 769752"];
372 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 769753"];
373 [label="this.PreviousSubmission 769754"];
374 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 769755"];
375 [label="ScriptCompilationInfo 769756"];
376 [label="ScriptCompilationInfo?.PreviousScriptCompilation 769757"];
377 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 769758"];
378 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 769759"];
379 [label="this.SubmissionReturnType 769760"];
380 [label="=> ScriptCompilationInfo 769761"];
381 [label="ScriptCompilationInfo 769762"];
382 [label="this.HostObjectType 769763"];
383 [label="=> ScriptCompilationInfo 769764"];
384 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 769765"];
385 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 769766"];
386 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 769767"];
387 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 769768"];
388 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 769769"];
389 [label="param CSharpCompilation(string? assemblyName) 769770"];
390 [label="param CSharpCompilation(CSharpCompilationOptions options) 769771"];
391 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 769772"];
392 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 769773"];
393 [label="param CSharpCompilation(Type? submissionReturnType) 769774"];
394 [label="param CSharpCompilation(Type? hostObjectType) 769775"];
395 [label="param CSharpCompilation(bool isSubmission) 769776"];
396 [label="param CSharpCompilation(ReferenceManager? referenceManager) 769777"];
397 [label="param CSharpCompilation(bool reuseReferenceManager) 769778"];
398 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 769779"];
399 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 769780"];
400 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 769781"];
401 [label="param CSharpCompilation(this) 769782"];
402 [label="previousSubmission 769783"];
403 [label="submissionReturnType 769784"];
404 [label="hostObjectType 769785"];
405 [label="syntaxAndDeclarations.ExternalSyntaxTrees 769786"];
406 [label="eventQueue 769787"];
407 [label="param CSharpCompilation(this) 769788"];
408 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 769789"];
409 [label="param CSharpCompilation(Type? submissionReturnType) 769790"];
410 [label="param CSharpCompilation(Type? hostObjectType) 769791"];
411 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 769792"];
412 [label="param CSharpCompilation(this) 769793"];
413 [label="eventQueue 769794"];
414 [label="param CSharpCompilation(this) 769795"];
415 [label="_options 769796"];
416 [label="_globalImports 769797"];
417 [label="_previousSubmissionImports 769798"];
418 [label="_globalNamespaceAlias 769799"];
419 [label="_scriptClass 769800"];
420 [label="_lazyHostObjectTypeSymbol 769801"];
421 [label="_lazyImportInfos 769802"];
422 [label="_conversions 769803"];
423 [label="_anonymousTypeManager 769804"];
424 [label="_lazyGlobalNamespace 769805"];
425 [label="builtInOperators 769806"];
426 [label="_lazyAssemblySymbol 769807"];
427 [label="_referenceManager 769808"];
428 [label="_syntaxAndDeclarations 769809"];
429 [label="_lazyEntryPoint 769810"];
430 [label="_lazyEmitNullablePublicOnly 769811"];
431 [label="_lazyCompilationUnitCompletedTrees 769812"];
432 [label="NullableAnalysisData 769813"];
433 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 769814"];
434 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 769815"];
435 [label="_externAliasTargets 769816"];
436 [label="_moduleInitializerMethods 769817"];
437 [label="_binderFactories 769818"];
438 [label="_ignoreAccessibilityBinderFactories 769819"];
439 [label="_lazyDeclarationDiagnostics 769820"];
440 [label="_declarationDiagnosticsFrozen 769821"];
441 [label="new DiagnosticBag() 769822"];
442 [label="_additionalCodegenWarnings = new DiagnosticBag() 769823"];
443 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 769824"];
444 [label="this.builtInOperators = new BuiltInOperators(this); 769825"];
445 [label="this.builtInOperators = new BuiltInOperators(this); 769826"];
446 [label="new BuiltInOperators(this) 769827"];
447 [label="param BuiltInOperators(CSharpCompilation compilation) 769828"];
448 [label="param BuiltInOperators(this) 769829"];
449 [label="_compilation 769830"];
450 [label="_builtInUnaryOperators 769831"];
451 [label="_builtInOperators 769832"];
452 [label="_compilation 769833"];
453 [label="this.builtInOperators 769834"];
454 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 769835"];
455 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 769836"];
456 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 769837"];
457 [label="LanguageVersion? result = null; 769838"];
458 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 769839"];
459 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 769840"];
460 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 769841"];
461 [label="result = version; 769842"];
462 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 769843"];
463 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769844"];
464 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769845"];
465 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769846"];
466 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769847"];
467 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769848"];
468 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 769849"];
469 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 769850"];
470 [label="referenceManager.AssertCanReuseForCompilation(this); 769851"];
471 [label="referenceManager.AssertCanReuseForCompilation(this); 769852"];
472 [label="_referenceManager 769853"];
473 [label="Debug.Assert(_lazyAssemblySymbol is null); 769854"];
474 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 769855"];
475 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 769856"];
476 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 769857"];
477 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 769858"];
478 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 769859"];
479 [label="return compilation; 769860"];
480 [label="var compilation = createCompilationLambda(); 769861"];
481 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 769862"];
482 [label="IsNullableEnabled(compilation) 769863"];
483 [label="param IsNullableEnabled(CSharpCompilation compilation) 769864"];
484 [label="compilation.SyntaxTrees 769865"];
485 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 769866"];
486 [label="_syntaxAndDeclarations.GetLazyState() 769867"];
487 [label="param GetLazyState(this) 769868"];
488 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 769869"];
489 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 769870"];
490 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 769871"];
491 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 769872"];
492 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 769873"];
493 [label="param CreateState(string scriptClassName) 769874"];
494 [label="param CreateState(SourceReferenceResolver resolver) 769875"];
495 [label="param CreateState(CommonMessageProvider messageProvider) 769876"];
496 [label="param CreateState(bool isSubmission) 769877"];
497 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 769878"];
498 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 769879"];
499 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 769880"];
500 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 769881"];
501 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 769882"];
502 [label="var declTable = DeclarationTable.Empty; 769883"];
503 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 769884"];
504 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769885"];
505 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769886"];
506 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769887"];
507 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769888"];
508 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769889"];
509 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769890"];
510 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769891"];
511 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769892"];
512 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769893"];
513 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769894"];
514 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 769895"];
515 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 769896"];
516 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 769897"];
517 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 769898"];
518 [label="param AppendAllSyntaxTrees(string scriptClassName) 769899"];
519 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 769900"];
520 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 769901"];
521 [label="param AppendAllSyntaxTrees(bool isSubmission) 769902"];
522 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 769903"];
523 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 769904"];
524 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 769905"];
525 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 769906"];
526 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 769907"];
527 [label="var sourceCodeKind = tree.Options.Kind; 769908"];
528 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 769909"];
529 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 769910"];
530 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 769911"];
531 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 769912"];
532 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 769913"];
533 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 769914"];
534 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 769915"];
535 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 769916"];
536 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 769917"];
537 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 769918"];
538 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 769919"];
539 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 769920"];
540 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 769921"];
541 [label="declMapBuilder.Add(tree, lazyRoot); 769922"];
542 [label="declMapBuilder.Add(tree, lazyRoot); 769923"];
543 [label="declMapBuilder.Add(tree, lazyRoot); 769924"];
544 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 769925"];
545 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 769926"];
546 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 769927"];
547 [label="treesBuilder.Add(tree); 769928"];
548 [label="treesBuilder.Add(tree); 769929"];
549 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 769930"];
550 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 769931"];
551 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 769932"];
552 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 769933"];
553 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 769934"];
554 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 769935"];
555 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 769936"];
556 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 769937"];
557 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 769938"];
558 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 769939"];
559 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 769940"];
560 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 769941"];
561 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 769942"];
562 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 769943"];
563 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 769944"];
564 [label="param State(DeclarationTable declarationTable) 769945"];
565 [label="param State(this) 769946"];
566 [label="OrdinalMap 769947"];
567 [label="LoadDirectiveMap 769948"];
568 [label="LoadedSyntaxTreeMap 769949"];
569 [label="RootNamespaces 769950"];
570 [label="DeclarationTable 769951"];
571 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 769952"];
572 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 769953"];
573 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 769954"];
574 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 769955"];
575 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 769956"];
576 [label="this.SyntaxTrees 769957"];
577 [label="this.OrdinalMap 769958"];
578 [label="this.LoadDirectiveMap 769959"];
579 [label="this.LoadedSyntaxTreeMap 769960"];
580 [label="this.RootNamespaces 769961"];
581 [label="this.DeclarationTable 769962"];
582 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 769963"];
583 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 769964"];
584 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 769965"];
585 [label="return _lazyState; 769966"];
586 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 769967"];
587 [label="var trees = compilation.SyntaxTrees; 769968"];
588 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 769969"];
589 [label="var options = (CSharpParseOptions)trees[0].Options; 769970"];
590 [label="var options = (CSharpParseOptions)trees[0].Options; 769971"];
591 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 769972"];
592 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 769973"];
593 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 769974"];
594 [label="return compilation; 769975"];
595 [label="CompileAndVerify(comp, verify: Verification.Fails); 769976"];
596 [label="CompileAndVerify(comp, verify: Verification.Fails); 769977"];
597 [label="CompileAndVerify(comp, verify: Verification.Fails); 769978"];
598 [label="CompileAndVerify(comp, verify: Verification.Fails) 769979"];
599 [label="param CompileAndVerify(Compilation compilation) 769980"];
600 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 769981"];
601 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 769982"];
602 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 769983"];
603 [label="param CompileAndVerify(Action<PEAssembly> validator = null) 769984"];
604 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 769985"];
605 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 769986"];
606 [label="param CompileAndVerify(string expectedOutput = null) 769987"];
607 [label="param CompileAndVerify(int? expectedReturnCode = null) 769988"];
608 [label="param CompileAndVerify(string[] args = null) 769989"];
609 [label="param CompileAndVerify(EmitOptions emitOptions = null) 769990"];
610 [label="param CompileAndVerify(Verification verify = Verification.Passes) 769991"];
611 [label="param CompileAndVerify(this) 769992"];
612 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 769993"];
613 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 769994"];
614 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 769995"];
615 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 769996"];
616 [label="translate(sourceSymbolValidator) 769997"];
617 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 769998"];
618 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 769999"];
619 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 770000"];
620 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 770001"];
621 [label="return null; 770002"];
622 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 770003"];
623 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 770004"];
624 [label="translate(symbolValidator) 770005"];
625 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 770006"];
626 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 770007"];
627 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 770008"];
628 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 770009"];
629 [label="return null; 770010"];
630 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 770011"];
631 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 770012"];
632 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 770013"];
633 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 770014"];
634 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 770015"];
635 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 770016"];
636 [label="CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 770017"];
637 [label="param CompileAndVerifyCommon(Compilation compilation) 770018"];
638 [label="param CompileAndVerifyCommon(IEnumerable<ResourceDescription> manifestResources = null) 770019"];
639 [label="param CompileAndVerifyCommon(IEnumerable<ModuleData> dependencies = null) 770020"];
640 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> sourceSymbolValidator = null) 770021"];
641 [label="param CompileAndVerifyCommon(Action<PEAssembly> assemblyValidator = null) 770022"];
642 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> symbolValidator = null) 770023"];
643 [label="param CompileAndVerifyCommon(SignatureDescription[] expectedSignatures = null) 770024"];
644 [label="param CompileAndVerifyCommon(string expectedOutput = null) 770025"];
645 [label="param CompileAndVerifyCommon(int? expectedReturnCode = null) 770026"];
646 [label="param CompileAndVerifyCommon(string[] args = null) 770027"];
647 [label="param CompileAndVerifyCommon(EmitOptions emitOptions = null) 770028"];
648 [label="param CompileAndVerifyCommon(Verification verify = Verification.Passes) 770029"];
649 [label="param CompileAndVerifyCommon(this) 770030"];
650 [label="CustomAssert.NotNull(compilation); 770031"];
651 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 770032"];
652 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 770033"];
653 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 770034"];
654 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 770035"];
655 [label="CompilationVerifier result = null; 770036"];
656 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770037"];
657 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770038"];
658 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770039"];
659 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770040"];
660 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770041"];
661 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770042"];
662 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770043"];
663 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770044"];
664 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770045"];
665 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770046"];
666 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770047"];
667 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 770048"];
668 [label="Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify) 770049"];
669 [label="param Emit(Compilation compilation) 770050"];
670 [label="param Emit(IEnumerable<ModuleData> dependencies) 770051"];
671 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 770052"];
672 [label="param Emit(SignatureDescription[] expectedSignatures) 770053"];
673 [label="param Emit(string expectedOutput) 770054"];
674 [label="param Emit(int? expectedReturnCode) 770055"];
675 [label="param Emit(string[] args) 770056"];
676 [label="param Emit(Action<PEAssembly> assemblyValidator) 770057"];
677 [label="param Emit(Action<IModuleSymbol> symbolValidator) 770058"];
678 [label="param Emit(EmitOptions emitOptions) 770059"];
679 [label="param Emit(Verification verify) 770060"];
680 [label="param Emit(this) 770061"];
681 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 770062"];
682 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 770063"];
683 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 770064"];
684 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 770065"];
685 [label="new CompilationVerifier(compilation, VisualizeRealIL, dependencies) 770066"];
686 [label="param CompilationVerifier(Compilation compilation) 770067"];
687 [label="param CompilationVerifier(Func<IModuleSymbol, CompilationTestData.MethodData, IReadOnlyDictionary<int, string>, bool, string> visualizeRealIL = null) 770068"];
688 [label="param CompilationVerifier(IEnumerable<ModuleData> dependencies = null) 770069"];
689 [label="param CompilationVerifier(this) 770070"];
690 [label="_compilation 770071"];
691 [label="_testData 770072"];
692 [label="_dependencies 770073"];
693 [label="_lazyModuleSymbol 770074"];
694 [label="_allModuleData 770075"];
695 [label="_visualizeRealIL 770076"];
696 [label="_compilation 770077"];
697 [label="_dependencies 770078"];
698 [label="_visualizeRealIL 770079"];
699 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 770080"];
700 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 770081"];
701 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 770082"];
702 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 770083"];
703 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 770084"];
704 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 770085"];
705 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 770086"];
706 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures) 770087"];
707 [label="param Emit(string expectedOutput) 770088"];
708 [label="param Emit(int? expectedReturnCode) 770089"];
709 [label="param Emit(string[] args) 770090"];
710 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 770091"];
711 [label="param Emit(EmitOptions emitOptions) 770092"];
712 [label="param Emit(Verification peVerify) 770093"];
713 [label="param Emit(SignatureDescription[] expectedSignatures) 770094"];
714 [label="param Emit(this) 770095"];
715 [label="RuntimeUtilities.GetRuntimeEnvironmentFactory 770096"];
716 [label="new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 770097"];
717 [label="s_lazyFactory = new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 770098"];
718 [label="using var testEnvironment = RuntimeEnvironmentFactory.Create(_dependencies); 770099"];
719 [label="RuntimeEnvironmentFactory.Create(_dependencies) 770100"];
720 [label="param Create(IEnumerable<ModuleData> additionalDependencies = null) 770101"];
721 [label="return s_lazyFactory.Value.Create(additionalDependencies); 770102"];
722 [label="return s_lazyFactory.Value.Create(additionalDependencies); 770103"];
723 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 770104"];
724 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 770105"];
725 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 770106"];
726 [label="Emit(testEnvironment, manifestResources, emitOptions) 770107"];
727 [label="param Emit(IRuntimeEnvironment testEnvironment) 770108"];
728 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 770109"];
729 [label="param Emit(EmitOptions emitOptions) 770110"];
730 [label="param Emit(this) 770111"];
731 [label="s_dumpCount 770112"];
732 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 770113"];
733 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 770114"];
734 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 770115"];
735 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 770116"];
736 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 770117"];
737 [label="param EmitCompilation(Compilation compilation) 770118"];
738 [label="param EmitCompilation(IEnumerable<ResourceDescription> manifestResources) 770119"];
739 [label="param EmitCompilation(List<ModuleData> dependencies) 770120"];
740 [label="param EmitCompilation(DiagnosticBag diagnostics) 770121"];
741 [label="param EmitCompilation(CompilationTestData testData) 770122"];
742 [label="param EmitCompilation(EmitOptions emitOptions) 770123"];
743 [label="var referencedCompilations = FindReferencedCompilations(compilation); 770124"];
744 [label="FindReferencedCompilations(compilation) 770125"];
745 [label="param FindReferencedCompilations(Compilation original) 770126"];
746 [label="var list = new List<Compilation>(); 770127"];
747 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 770128"];
748 [label="FindDirectReferencedCompilations(original) 770129"];
749 [label="param FindDirectReferencedCompilations(Compilation compilation) 770130"];
750 [label="var list = new List<Compilation>(); 770131"];
751 [label="var previousCompilation = compilation.ScriptCompilationInfo?.PreviousScriptCompilation; 770132"];
752 [label="compilation.ScriptCompilationInfo 770133"];
753 [label="=> ScriptCompilationInfo 770134"];
754 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 770135"];
755 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 770136"];
756 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 770137"];
757 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 770138"];
758 [label="get\n            {\n                return GetBoundReferenceManager().DirectiveReferences;\n            } 770139"];
759 [label="GetBoundReferenceManager() 770140"];
760 [label="param GetBoundReferenceManager(this) 770141"];
761 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 770142"];
762 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 770143"];
763 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 770144"];
764 [label="get { return this.Declarations.ReferenceDirectives; } 770145"];
765 [label="this.Declarations 770146"];
766 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 770147"];
767 [label="_syntaxAndDeclarations.GetLazyState() 770148"];
768 [label="param GetLazyState(this) 770149"];
769 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 770150"];
770 [label="return this.Declarations.ReferenceDirectives; 770151"];
771 [label="get { return _options; } 770152"];
772 [label="return _options; 770153"];
773 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 770154"];
774 [label="_syntaxAndDeclarations.GetLazyState() 770155"];
775 [label="Debug.Assert(_lazyAssemblySymbol is object); 770156"];
776 [label="return _referenceManager; 770157"];
777 [label="return GetBoundReferenceManager().DirectiveReferences; 770158"];
778 [label="return list; 770159"];
779 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 770160"];
780 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 770161"];
781 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 770162"];
782 [label="return list; 770163"];
783 [label="var referencedCompilations = FindReferencedCompilations(compilation); 770164"];
784 [label="var fullNameSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase); 770165"];
785 [label="foreach (var referencedCompilation in referencedCompilations)\n            {\n                var emitData = EmitCompilationCore(referencedCompilation, null, diagnostics, null, emitOptions);\n                if (emitData.HasValue)\n                {\n                    var moduleData = new ModuleData(referencedCompilation.Assembly.Identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    emitData.Value.Assembly,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    fullNameSet.Add(moduleData.Id.FullName);\n                    dependencies.Add(moduleData);\n                }\n            } 770166"];
786 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 770167"];
787 [label="new[] { compilation } 770168"];
788 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 770169"];
789 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 770170"];
790 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 770171"];
791 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 770172"];
792 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 770173"];
793 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 770174"];
794 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics) 770175"];
795 [label="param EmitReferences(Compilation compilation) 770176"];
796 [label="param EmitReferences(HashSet<string> fullNameSet) 770177"];
797 [label="param EmitReferences(List<ModuleData> dependencies) 770178"];
798 [label="param EmitReferences(DiagnosticBag diagnostics) 770179"];
799 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 770180"];
800 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 770181"];
801 [label="var peRef = (PortableExecutableReference)metadataReference; 770182"];
802 [label="var metadata = peRef.GetMetadataNoCopy(); 770183"];
803 [label="var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly; 770184"];
804 [label="isManifestModule 770185"];
805 [label="var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null; 770186"];
806 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 770187"];
807 [label="foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                } 770188"];
808 [label="EnumerateModules(metadata) 770189"];
809 [label="param EnumerateModules(Metadata metadata) 770190"];
810 [label="return (metadata.Kind == MetadataImageKind.Assembly) ? ((AssemblyMetadata)metadata).GetModules().AsEnumerable() : SpecializedCollections.SingletonEnumerable((ModuleMetadata)metadata); 770191"];
811 [label="(metadata.Kind == MetadataImageKind.Assembly) 770192"];
812 [label="ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent(); 770193"];
813 [label="ModuleData moduleData; 770194"];
814 [label="if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    } 770195"];
815 [label="moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 770196"];
816 [label="moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 770197"];
817 [label="moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 770198"];
818 [label="dependencies.Add(moduleData); 770199"];
819 [label="dependencies.Add(moduleData); 770200"];
820 [label="isManifestModule = false; 770201"];
821 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 770202"];
822 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 770203"];
823 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 770204"];
824 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 770205"];
825 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 770206"];
826 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 770207"];
827 [label="EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions) 770208"];
828 [label="param EmitCompilationCore(Compilation compilation) 770209"];
829 [label="param EmitCompilationCore(IEnumerable<ResourceDescription> manifestResources) 770210"];
830 [label="param EmitCompilationCore(DiagnosticBag diagnostics) 770211"];
831 [label="param EmitCompilationCore(CompilationTestData testData) 770212"];
832 [label="param EmitCompilationCore(EmitOptions emitOptions) 770213"];
833 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 770214"];
834 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 770215"];
835 [label="emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 770216"];
836 [label="using var executableStream = new MemoryStream(); 770217"];
837 [label="var pdb = default(ImmutableArray<byte>); 770218"];
838 [label="var assembly = default(ImmutableArray<byte>); 770219"];
839 [label="var pdbStream = (emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) ? new MemoryStream() : null; 770220"];
840 [label="(emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) 770221"];
841 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 770222"];
842 [label="compilation.SyntaxTrees 770223"];
843 [label="get\n            {\n                return this.SyntaxTrees;\n            } 770224"];
844 [label="this.SyntaxTrees 770225"];
845 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 770226"];
846 [label="_syntaxAndDeclarations.GetLazyState() 770227"];
847 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 770228"];
848 [label="return this.SyntaxTrees; 770229"];
849 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 770230"];
850 [label="EmitResult result; 770231"];
851 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 770232"];
852 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 770233"];
853 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 770234"];
854 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 770235"];
855 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 770236"];
856 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 770237"];
857 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 770238"];
858 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 770239"];
859 [label="get { return _syntaxAndDeclarations.MessageProvider; } 770240"];
860 [label="return _syntaxAndDeclarations.MessageProvider; 770241"];
861 [label="param CreateModuleBuilder(EmitOptions emitOptions) 770242"];
862 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 770243"];
863 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 770244"];
864 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 770245"];
865 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 770246"];
866 [label="param CreateModuleBuilder(CompilationTestData? testData) 770247"];
867 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 770248"];
868 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 770249"];
869 [label="param CreateModuleBuilder(this) 770250"];
870 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 770251"];
871 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 770252"];
872 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 770253"];
873 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 770254"];
874 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 770255"];
875 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 770256"];
876 [label="param GetRuntimeMetadataVersion(this) 770257"];
877 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 770258"];
878 [label="GetRuntimeMetadataVersion(emitOptions) 770259"];
879 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 770260"];
880 [label="param GetRuntimeMetadataVersion(this) 770261"];
881 [label="Assembly 770262"];
882 [label="get\n            {\n                return SourceAssembly;\n            } 770263"];
883 [label="SourceAssembly 770264"];
884 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 770265"];
885 [label="GetBoundReferenceManager() 770266"];
886 [label="param GetBoundReferenceManager(this) 770267"];
887 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 770268"];
888 [label="return _referenceManager; 770269"];
889 [label="GetBoundReferenceManager(); 770270"];
890 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 770271"];
891 [label="return _lazyAssemblySymbol; 770272"];
892 [label="return SourceAssembly; 770273"];
893 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 770274"];
894 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 770275"];
895 [label="return emitOptions.RuntimeMetadataVersion; 770276"];
896 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 770277"];
897 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 770278"];
898 [label="DiagnosticBag? runtimeMDVersionDiagnostics = DiagnosticBag.GetInstance(); 770279"];
899 [label="runtimeMDVersionDiagnostics.Add(ErrorCode.WRN_NoRuntimeMetadataVersion, NoLocation.Singleton); 770280"];
900 [label="runtimeMDVersionDiagnostics.Add(ErrorCode.WRN_NoRuntimeMetadataVersion, NoLocation.Singleton); 770281"];
901 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 770282"];
902 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 770283"];
903 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 770284"];
904 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 770285"];
905 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 770286"];
906 [label="{ ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 770287"];
907 [label="s_alinkWarnings = { ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 770288"];
908 [label="param Filter(Diagnostic d) 770289"];
909 [label="param Filter(int warningLevelOption) 770290"];
910 [label="param Filter(NullableContextOptions nullableOption) 770291"];
911 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 770292"];
912 [label="param Filter(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 770293"];
913 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 770294"];
914 [label="param Filter(CancellationToken cancellationToken) 770295"];
915 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 770296"];
916 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 770297"];
917 [label="if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 770298"];
918 [label="if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 770299"];
919 [label="ReportDiagnostic reportAction; 770300"];
920 [label="bool hasPragmaSuppression; 770301"];
921 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 770302"];
922 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 770303"];
923 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 770304"];
924 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 770305"];
925 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 770306"];
926 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 770307"];
927 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 770308"];
928 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 770309"];
929 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 770310"];
930 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 770311"];
931 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 770312"];
932 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 770313"];
933 [label="GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression) 770314"];
934 [label="param GetDiagnosticReport(DiagnosticSeverity severity) 770315"];
935 [label="param GetDiagnosticReport(bool isEnabledByDefault) 770316"];
936 [label="param GetDiagnosticReport(string id) 770317"];
937 [label="param GetDiagnosticReport(int diagnosticWarningLevel) 770318"];
938 [label="param GetDiagnosticReport(Location location) 770319"];
939 [label="param GetDiagnosticReport(string category) 770320"];
940 [label="param GetDiagnosticReport(int warningLevelOption) 770321"];
941 [label="param GetDiagnosticReport(NullableContextOptions nullableOption) 770322"];
942 [label="param GetDiagnosticReport(ReportDiagnostic generalDiagnosticOption) 770323"];
943 [label="param GetDiagnosticReport(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 770324"];
944 [label="param GetDiagnosticReport(SyntaxTreeOptionsProvider? syntaxTreeOptions) 770325"];
945 [label="param GetDiagnosticReport(CancellationToken cancellationToken) 770326"];
946 [label="param GetDiagnosticReport(out bool hasPragmaSuppression) 770327"];
947 [label="hasPragmaSuppression = false; 770328"];
948 [label="Debug.Assert(location.SourceTree is null || location.SourceTree is CSharpSyntaxTree); 770329"];
949 [label="var tree = location.SourceTree as CSharpSyntaxTree; 770330"];
950 [label="var position = location.SourceSpan.Start; 770331"];
951 [label="bool isNullableFlowAnalysisWarning = ErrorFacts.NullableWarnings.Contains(id); 770332"];
952 [label="if (isNullableFlowAnalysisWarning)\n            {\n                // LAFHIS\n                Syntax.NullableContextState.State? warningsState = tree is not null ? tree.GetNullableContextState(position).WarningsState : null;\n                var nullableWarningsEnabled = warningsState switch\n                {\n                    Syntax.NullableContextState.State.Enabled => true,\n                    Syntax.NullableContextState.State.Disabled => false,\n                    Syntax.NullableContextState.State.ExplicitlyRestored => nullableOption.WarningsEnabled(),\n                    Syntax.NullableContextState.State.Unknown =>\n                        tree?.IsGeneratedCode(syntaxTreeOptions, cancellationToken) != true && nullableOption.WarningsEnabled(),\n                    null => nullableOption.WarningsEnabled(),\n                    _ => throw ExceptionUtilities.UnexpectedValue(warningsState)\n                };\n\n                if (!nullableWarningsEnabled)\n                {\n                    return ReportDiagnostic.Suppress;\n                }\n            } 770333"];
953 [label="if (diagnosticWarningLevel > warningLevelOption)  // honor the warning level\n            {\n                return ReportDiagnostic.Suppress;\n            } 770334"];
954 [label="ReportDiagnostic report; 770335"];
955 [label="bool isSpecified = false; 770336"];
956 [label="bool specifiedWarnAsErrorMinus = false; 770337"];
957 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 770338"];
958 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 770339"];
959 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 770340"];
960 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 770341"];
961 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 770342"];
962 [label="if (!isSpecified)\n            {\n                report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress;\n            } 770343"];
963 [label="isEnabledByDefault 770344"];
964 [label="report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress; 770345"];
965 [label="if (report == ReportDiagnostic.Suppress)\n            {\n                return ReportDiagnostic.Suppress;\n            } 770346"];
966 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 770347"];
967 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 770348"];
968 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Disabled)\n            {\n                hasPragmaSuppression = true;\n            } 770349"];
969 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Enabled)\n            {\n                switch (report)\n                {\n                    case ReportDiagnostic.Error:\n                    case ReportDiagnostic.Hidden:\n                    case ReportDiagnostic.Info:\n                    case ReportDiagnostic.Warn:\n                        // No need to adjust the current report state, it already means 'enabled'\n                        return report;\n\n                    case ReportDiagnostic.Suppress:\n                        // Enable the warning\n                        return ReportDiagnostic.Default;\n\n                    case ReportDiagnostic.Default:\n                        if (generalDiagnosticOption == ReportDiagnostic.Error && promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n\n                        return ReportDiagnostic.Default;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(report);\n                }\n            }\n            else if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 770350"];
970 [label="if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 770351"];
971 [label="if (report == ReportDiagnostic.Default)\n            {\n                switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                }\n            } 770352"];
972 [label="switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                } 770353"];
973 [label="return report; 770354"];
974 [label="if (hasPragmaSuppression)\n            {\n                d = d.WithIsSuppressed(true);\n            } 770355"];
975 [label="return d.WithReportDiagnostic(reportAction); 770356"];
976 [label="return d.WithReportDiagnostic(reportAction); 770357"];
977 [label="return string.Empty; 770358"];
978 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 770359"];
979 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 770360"];
980 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 770361"];
981 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 770362"];
982 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 770363"];
983 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 770364"];
984 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 770365"];
985 [label="get { return SourceAssembly.IsDelaySigned; } 770366"];
986 [label="SourceAssembly 770367"];
987 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 770368"];
988 [label="GetBoundReferenceManager() 770369"];
989 [label="param GetBoundReferenceManager(this) 770370"];
990 [label="GetBoundReferenceManager(); 770371"];
991 [label="return _lazyAssemblySymbol; 770372"];
992 [label="return SourceAssembly.IsDelaySigned; 770373"];
993 [label="SourceAssembly.IsDelaySigned 770374"];
994 [label="get\n            {\n                return _options;\n            } 770375"];
995 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 770376"];
996 [label="Declarations 770377"];
997 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 770378"];
998 [label="_syntaxAndDeclarations.GetLazyState() 770379"];
999 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 770380"];
1000 [label="return Declarations.GetMergedRoot(this); 770381"];
1001 [label="return Declarations.GetMergedRoot(this); 770382"];
1002 [label="return Declarations.GetMergedRoot(this); 770383"];
1003 [label="_syntaxAndDeclarations.GetLazyState() 770384"];
1004 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 770385"];
1005 [label="get { return SourceAssembly.StrongNameKeys; } 770386"];
1006 [label="SourceAssembly 770387"];
1007 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 770388"];
1008 [label="GetBoundReferenceManager() 770389"];
1009 [label="param GetBoundReferenceManager(this) 770390"];
1010 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 770391"];
1011 [label="return _referenceManager; 770392"];
1012 [label="GetBoundReferenceManager(); 770393"];
1013 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 770394"];
1014 [label="return SourceAssembly.StrongNameKeys; 770395"];
1015 [label="SourceAssembly.StrongNameKeys 770396"];
1016 [label="get\n            {\n                return _options;\n            } 770397"];
1017 [label="=> 0x30 770398"];
1018 [label="0x30 770399"];
1019 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 770400"];
1020 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 770401"];
1021 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 770402"];
1022 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 770403"];
1023 [label="PEModuleBuilder moduleBeingBuilt; 770404"];
1024 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 770405"];
1025 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 770406"];
1026 [label="_options.OutputKind.IsValid() 770407"];
1027 [label="_options.OutputKind 770408"];
1028 [label="SourceAssembly 770409"];
1029 [label="GetBoundReferenceManager() 770410"];
1030 [label="GetBoundReferenceManager(); 770411"];
1031 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 770412"];
1032 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 770413"];
1033 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 770414"];
1034 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 770415"];
1035 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 770416"];
1036 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 770417"];
1037 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 770418"];
1038 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 770419"];
1039 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 770420"];
1040 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 770421"];
1041 [label="param PEAssemblyBuilder(OutputKind outputKind) 770422"];
1042 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 770423"];
1043 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 770424"];
1044 [label="param PEAssemblyBuilder(this) 770425"];
1045 [label="sourceAssembly 770426"];
1046 [label="emitOptions 770427"];
1047 [label="outputKind 770428"];
1048 [label="serializationProperties 770429"];
1049 [label="manifestResources 770430"];
1050 [label="ImmutableArray<NamedTypeSymbol>.Empty 770431"];
1051 [label="param PEAssemblyBuilder(this) 770432"];
1052 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 770433"];
1053 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 770434"];
1054 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 770435"];
1055 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 770436"];
1056 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 770437"];
1057 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 770438"];
1058 [label="param PEAssemblyBuilderBase(this) 770439"];
1059 [label="0 770440"];
1060 [label="sourceAssembly.Modules[0] 770441"];
1061 [label="emitOptions 770442"];
1062 [label="outputKind 770443"];
1063 [label="serializationProperties 770444"];
1064 [label="manifestResources 770445"];
1065 [label="param PEAssemblyBuilderBase(this) 770446"];
1066 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 770447"];
1067 [label="param PEModuleBuilder(EmitOptions emitOptions) 770448"];
1068 [label="param PEModuleBuilder(OutputKind outputKind) 770449"];
1069 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 770450"];
1070 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 770451"];
1071 [label="param PEModuleBuilder(this) 770452"];
1072 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 770453"];
1073 [label="sourceModule 770454"];
1074 [label="serializationProperties 770455"];
1075 [label="manifestResources 770456"];
1076 [label="outputKind 770457"];
1077 [label="emitOptions 770458"];
1078 [label="new ModuleCompilationState() 770459"];
1079 [label="param ModuleCompilationState(this) 770460"];
1080 [label="param PEModuleBuilder(this) 770461"];
1081 [label="param PEModuleBuilder(this) 770462"];
1082 [label="get\n            {\n                return true;\n            } 770463"];
1083 [label="return true; 770464"];
1084 [label="param PEModuleBuilder(this) 770465"];
1085 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 770466"];
1086 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 770467"];
1087 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 770468"];
1088 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 770469"];
1089 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 770470"];
1090 [label="new ConcurrentSet<TypeSymbol>() 770471"];
1091 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 770472"];
1092 [label="_embeddedTypesManagerOpt 770473"];
1093 [label="_metadataName 770474"];
1094 [label="_fixedImplementationTypes 770475"];
1095 [label="_needsGeneratedAttributes 770476"];
1096 [label="_needsGeneratedAttributes_IsFrozen 770477"];
1097 [label="var specifiedName = sourceModule.MetadataName; 770478"];
1098 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 770479"];
1099 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 770480"];
1100 [label="_metadataName 770481"];
1101 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 770482"];
1102 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 770483"];
1103 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 770484"];
1104 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 770485"];
1105 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 770486"];
1106 [label="_sourceAssembly 770487"];
1107 [label="_lazyEmbeddedAttribute 770488"];
1108 [label="_lazyIsReadOnlyAttribute 770489"];
1109 [label="_lazyIsByRefLikeAttribute 770490"];
1110 [label="_lazyIsUnmanagedAttribute 770491"];
1111 [label="_lazyNullableAttribute 770492"];
1112 [label="_lazyNullableContextAttribute 770493"];
1113 [label="_lazyNullablePublicOnlyAttribute 770494"];
1114 [label="_lazyNativeIntegerAttribute 770495"];
1115 [label="_metadataName 770496"];
1116 [label="Debug.Assert(sourceAssembly is object); 770497"];
1117 [label="_sourceAssembly 770498"];
1118 [label="_additionalTypes = additionalTypes.NullToEmpty(); 770499"];
1119 [label="_additionalTypes 770500"];
1120 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 770501"];
1121 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 770502"];
1122 [label="(emitOptions.OutputNameOverride == null) 770503"];
1123 [label="sourceAssembly.MetadataName 770504"];
1124 [label="_metadataName 770505"];
1125 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 770506"];
1126 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 770507"];
1127 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 770508"];
1128 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 770509"];
1129 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 770510"];
1130 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 770511"];
1131 [label="moduleBeingBuilt.SourceLinkStreamOpt 770512"];
1132 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 770513"];
1133 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 770514"];
1134 [label="moduleBeingBuilt.EmbeddedTexts 770515"];
1135 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 770516"];
1136 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 770517"];
1137 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 770518"];
1138 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 770519"];
1139 [label="testData.Module 770520"];
1140 [label="return moduleBeingBuilt; 770521"];
1141 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 770522"];
1142 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 770523"];
1143 [label="param CompileMethods(bool emittingPdb) 770524"];
1144 [label="param CompileMethods(bool emitMetadataOnly) 770525"];
1145 [label="param CompileMethods(bool emitTestCoverageData) 770526"];
1146 [label="param CompileMethods(DiagnosticBag diagnostics) 770527"];
1147 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 770528"];
1148 [label="param CompileMethods(CancellationToken cancellationToken) 770529"];
1149 [label="param CompileMethods(this) 770530"];
1150 [label="PooledHashSet<int>? excludeDiagnostics = null; 770531"];
1151 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 770532"];
1152 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 770533"];
1153 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 770534"];
1154 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 770535"];
1155 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 770536"];
1156 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 770537"];
1157 [label="param GetDiagnostics(CompilationStage stage) 770538"];
1158 [label="param GetDiagnostics(bool includeEarlierStages) 770539"];
1159 [label="param GetDiagnostics(CancellationToken cancellationToken) 770540"];
1160 [label="param GetDiagnostics(this) 770541"];
1161 [label="var diagnostics = DiagnosticBag.GetInstance(); 770542"];
1162 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 770543"];
1163 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 770544"];
1164 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 770545"];
1165 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 770546"];
1166 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 770547"];
1167 [label="param GetDiagnostics(CompilationStage stage) 770548"];
1168 [label="param GetDiagnostics(bool includeEarlierStages) 770549"];
1169 [label="param GetDiagnostics(DiagnosticBag diagnostics) 770550"];
1170 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 770551"];
1171 [label="param GetDiagnostics(this) 770552"];
1172 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 770553"];
1173 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 770554"];
1174 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 770555"];
1175 [label="this.SyntaxTrees 770556"];
1176 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 770557"];
1177 [label="_syntaxAndDeclarations.GetLazyState() 770558"];
1178 [label="param GetLazyState(this) 770559"];
1179 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 770560"];
1180 [label="var syntaxTrees = this.SyntaxTrees; 770561"];
1181 [label="this.Options 770562"];
1182 [label="get\n            {\n                return _options;\n            } 770563"];
1183 [label="return _options; 770564"];
1184 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 770565"];
1185 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 770566"];
1186 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 770567"];
1187 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 770568"];
1188 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 770569"];
1189 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 770570"];
1190 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 770571"];
1191 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 770572"];
1192 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 770573"];
1193 [label="ImmutableArray<LoadDirective> loadDirectives; 770574"];
1194 [label="loadDirectives 770575"];
1195 [label="syntaxAndDeclarations.GetLazyState() 770576"];
1196 [label="param GetLazyState(this) 770577"];
1197 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 770578"];
1198 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 770579"];
1199 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 770580"];
1200 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 770581"];
1201 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 770582"];
1202 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 770583"];
1203 [label="cancellationToken.ThrowIfCancellationRequested(); 770584"];
1204 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 770585"];
1205 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 770586"];
1206 [label="CheckAssemblyName(builder); 770587"];
1207 [label="CheckAssemblyName(builder); 770588"];
1208 [label="CheckAssemblyName(builder); 770589"];
1209 [label="Options 770590"];
1210 [label="get\n            {\n                return _options;\n            } 770591"];
1211 [label="return _options; 770592"];
1212 [label="builder.AddRange(Options.Errors); 770593"];
1213 [label="Options 770594"];
1214 [label="get\n            {\n                return _options;\n            } 770595"];
1215 [label="return _options; 770596"];
1216 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 770597"];
1217 [label="cancellationToken.ThrowIfCancellationRequested(); 770598"];
1218 [label="GetBoundReferenceManager() 770599"];
1219 [label="param GetBoundReferenceManager(this) 770600"];
1220 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 770601"];
1221 [label="return _referenceManager; 770602"];
1222 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 770603"];
1223 [label="cancellationToken.ThrowIfCancellationRequested(); 770604"];
1224 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 770605"];
1225 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 770606"];
1226 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 770607"];
1227 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 770608"];
1228 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 770609"];
1229 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 770610"];
1230 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 770611"];
1231 [label="param GetSourceDeclarationDiagnostics(this) 770612"];
1232 [label="GlobalImports 770613"];
1233 [label="=> _globalImports.Value 770614"];
1234 [label="_globalImports.Value 770615"];
1235 [label="_globalImports.Value 770616"];
1236 [label="=> Imports.FromGlobalUsings(this) 770617"];
1237 [label="this 770618"];
1238 [label="Imports.FromGlobalUsings(this) 770619"];
1239 [label="Imports.FromGlobalUsings(this) 770620"];
1240 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 770621"];
1241 [label="ScriptCompilationInfo 770622"];
1242 [label="ScriptCompilationInfo?.PreviousScriptCompilation 770623"];
1243 [label="GlobalImports.Complete(cancellationToken); 770624"];
1244 [label="GlobalImports.Complete(cancellationToken); 770625"];
1245 [label="GlobalImports.Complete(cancellationToken); 770626"];
1246 [label="SourceLocation? location = null; 770627"];
1247 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 770628"];
1248 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 770629"];
1249 [label="Assembly 770630"];
1250 [label="get\n            {\n                return SourceAssembly;\n            } 770631"];
1251 [label="SourceAssembly 770632"];
1252 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 770633"];
1253 [label="GetBoundReferenceManager() 770634"];
1254 [label="param GetBoundReferenceManager(this) 770635"];
1255 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 770636"];
1256 [label="return _referenceManager; 770637"];
1257 [label="GetBoundReferenceManager(); 770638"];
1258 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 770639"];
1259 [label="return SourceAssembly; 770640"];
1260 [label="Assembly.ForceComplete(location, cancellationToken); 770641"];
1261 [label="Assembly.ForceComplete(location, cancellationToken); 770642"];
1262 [label="Assembly.ForceComplete(location, cancellationToken); 770643"];
1263 [label="Assembly.ForceComplete(location, cancellationToken); 770644"];
1264 [label="Assembly.ForceComplete(location, cancellationToken); 770645"];
1265 [label="SourceAssembly 770646"];
1266 [label="GetBoundReferenceManager() 770647"];
1267 [label="param GetBoundReferenceManager(this) 770648"];
1268 [label="GetBoundReferenceManager(); 770649"];
1269 [label="Declarations 770650"];
1270 [label="_syntaxAndDeclarations.GetLazyState() 770651"];
1271 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 770652"];
1272 [label="return Declarations.GetMergedRoot(this); 770653"];
1273 [label="_syntaxAndDeclarations.GetLazyState() 770654"];
1274 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 770655"];
1275 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 770656"];
1276 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 770657"];
1277 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 770658"];
1278 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 770659"];
1279 [label="var diagnostics = new DiagnosticBag(); 770660"];
1280 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 770661"];
1281 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 770662"];
1282 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 770663"];
1283 [label="return _lazyDeclarationDiagnostics; 770664"];
1284 [label="param SymbolDeclaredEvent(Symbol symbol) 770665"];
1285 [label="param SymbolDeclaredEvent(this) 770666"];
1286 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 770667"];
1287 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 770668"];
1288 [label="param GetUnaliasedReferencedAssemblies(this) 770669"];
1289 [label="GetBoundReferenceManager() 770670"];
1290 [label="param GetBoundReferenceManager(this) 770671"];
1291 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 770672"];
1292 [label="return _referenceManager; 770673"];
1293 [label="var referenceManager = GetBoundReferenceManager(); 770674"];
1294 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 770675"];
1295 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 770676"];
1296 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 770677"];
1297 [label="return _referenceManager; 770678"];
1298 [label="GetBoundReferenceManager(); 770679"];
1299 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 770680"];
1300 [label="return _additionalCodegenWarnings; 770681"];
1301 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 770682"];
1302 [label="return _referenceManager; 770683"];
1303 [label="GetBoundReferenceManager(); 770684"];
1304 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 770685"];
1305 [label="return _referenceManager; 770686"];
1306 [label="var referenceManager = GetBoundReferenceManager(); 770687"];
1307 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 770688"];
1308 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 770689"];
1309 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 770690"];
1310 [label="_declarationDiagnosticsFrozen = true; 770691"];
1311 [label="_declarationDiagnosticsFrozen 770692"];
1312 [label="_needsGeneratedAttributes_IsFrozen = true; 770693"];
1313 [label="_needsGeneratedAttributes_IsFrozen 770694"];
1314 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 770695"];
1315 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 770696"];
1316 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 770697"];
1317 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 770698"];
1318 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 770699"];
1319 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 770700"];
1320 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 770701"];
1321 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 770702"];
1322 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 770703"];
1323 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 770704"];
1324 [label="param GetClsComplianceDiagnostics(this) 770705"];
1325 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 770706"];
1326 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 770707"];
1327 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 770708"];
1328 [label="var builder = DiagnosticBag.GetInstance(); 770709"];
1329 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 770710"];
1330 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 770711"];
1331 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 770712"];
1332 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 770713"];
1333 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 770714"];
1334 [label="param CheckCompliance(CSharpCompilation compilation) 770715"];
1335 [label="param CheckCompliance(DiagnosticBag diagnostics) 770716"];
1336 [label="param CheckCompliance(CancellationToken cancellationToken) 770717"];
1337 [label="param CheckCompliance(SyntaxTree filterTree = null) 770718"];
1338 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 770719"];
1339 [label="var queue = new ConcurrentQueue<Diagnostic>(); 770720"];
1340 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 770721"];
1341 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 770722"];
1342 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 770723"];
1343 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 770724"];
1344 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 770725"];
1345 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 770726"];
1346 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 770727"];
1347 [label="param ClsComplianceChecker(CSharpCompilation compilation) 770728"];
1348 [label="param ClsComplianceChecker(SyntaxTree filterTree) 770729"];
1349 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 770730"];
1350 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 770731"];
1351 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 770732"];
1352 [label="param ClsComplianceChecker(this) 770733"];
1353 [label="param ClsComplianceChecker(this) 770734"];
1354 [label="_compilation 770735"];
1355 [label="_filterTree 770736"];
1356 [label="_filterSpanWithinTree 770737"];
1357 [label="_diagnostics 770738"];
1358 [label="_declaredOrInheritedCompliance 770739"];
1359 [label="_compilerTasks 770740"];
1360 [label="_compilation 770741"];
1361 [label="_filterTree 770742"];
1362 [label="_filterSpanWithinTree 770743"];
1363 [label="_diagnostics 770744"];
1364 [label="_cancellationToken 770745"];
1365 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 770746"];
1366 [label="_declaredOrInheritedCompliance 770747"];
1367 [label="ConcurrentAnalysis 770748"];
1368 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 770749"];
1369 [label="null 770750"];
1370 [label="_filterTree == null 770751"];
1371 [label="_compilation.Options 770752"];
1372 [label="get\n            {\n                return _options;\n            } 770753"];
1373 [label="return _options; 770754"];
1374 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 770755"];
1375 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 770756"];
1376 [label="_compilerTasks = new ConcurrentStack<Task>(); 770757"];
1377 [label="_compilerTasks 770758"];
1378 [label="compilation.Assembly 770759"];
1379 [label="get\n            {\n                return SourceAssembly;\n            } 770760"];
1380 [label="GetBoundReferenceManager() 770761"];
1381 [label="param GetBoundReferenceManager(this) 770762"];
1382 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 770763"];
1383 [label="return _referenceManager; 770764"];
1384 [label="GetBoundReferenceManager(); 770765"];
1385 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 770766"];
1386 [label="checker.Visit(compilation.Assembly); 770767"];
1387 [label="checker.Visit(compilation.Assembly); 770768"];
1388 [label="checker.Visit(compilation.Assembly); 770769"];
1389 [label="param VisitAssembly(AssemblySymbol symbol) 770770"];
1390 [label="param VisitAssembly(this) 770771"];
1391 [label="_cancellationToken.ThrowIfCancellationRequested(); 770772"];
1392 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 770773"];
1393 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 770774"];
1394 [label="GetDeclaredOrInheritedCompliance(symbol) 770775"];
1395 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 770776"];
1396 [label="param GetDeclaredOrInheritedCompliance(this) 770777"];
1397 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 770778"];
1398 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 770779"];
1399 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 770780"];
1400 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 770781"];
1401 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 770782"];
1402 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 770783"];
1403 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 770784"];
1404 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 770785"];
1405 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 770786"];
1406 [label="Compliance compliance; 770787"];
1407 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 770788"];
1408 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 770789"];
1409 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 770790"];
1410 [label="Location ignoredLocation; 770791"];
1411 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 770792"];
1412 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 770793"];
1413 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 770794"];
1414 [label="param GetDeclaredCompliance(Symbol symbol) 770795"];
1415 [label="param GetDeclaredCompliance(out Location attributeLocation) 770796"];
1416 [label="param GetDeclaredCompliance(this) 770797"];
1417 [label="attributeLocation = null; 770798"];
1418 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 770799"];
1419 [label="return null; 770800"];
1420 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 770801"];
1421 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 770802"];
1422 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 770803"];
1423 [label="compliance = Compliance.ImpliedFalse; 770804"];
1424 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 770805"];
1425 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 770806"];
1426 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 770807"];
1427 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 770808"];
1428 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 770809"];
1429 [label="IsTrue(assemblyCompliance) 770810"];
1430 [label="param IsTrue(Compliance compliance) 770811"];
1431 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 770812"];
1432 [label="return false; 770813"];
1433 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 770814"];
1434 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 770815"];
1435 [label="ModuleSymbol module = symbol.Modules[i]; 770816"];
1436 [label="Location attributeLocation; 770817"];
1437 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 770818"];
1438 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 770819"];
1439 [label="GetDeclaredCompliance(module, out attributeLocation) 770820"];
1440 [label="param GetDeclaredCompliance(Symbol symbol) 770821"];
1441 [label="param GetDeclaredCompliance(out Location attributeLocation) 770822"];
1442 [label="param GetDeclaredCompliance(this) 770823"];
1443 [label="attributeLocation = null; 770824"];
1444 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 770825"];
1445 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 770826"];
1446 [label="i == 0 770827"];
1447 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 770828"];
1448 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 770829"];
1449 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 770830"];
1450 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 770831"];
1451 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 770832"];
1452 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 770833"];
1453 [label="Location attributeLocation; 770834"];
1454 [label="param GetDeclaredCompliance(out Location attributeLocation) 770835"];
1455 [label="param GetDeclaredCompliance(this) 770836"];
1456 [label="attributeLocation = null; 770837"];
1457 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 770838"];
1458 [label="i == 0 770839"];
1459 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 770840"];
1460 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 770841"];
1461 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 770842"];
1462 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 770843"];
1463 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 770844"];
1464 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 770845"];
1465 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 770846"];
1466 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 770847"];
1467 [label="GetDeclaredOrInheritedCompliance(sourceModule) 770848"];
1468 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 770849"];
1469 [label="param GetDeclaredOrInheritedCompliance(this) 770850"];
1470 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 770851"];
1471 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 770852"];
1472 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 770853"];
1473 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 770854"];
1474 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 770855"];
1475 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 770856"];
1476 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 770857"];
1477 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 770858"];
1478 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 770859"];
1479 [label="Compliance compliance; 770860"];
1480 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 770861"];
1481 [label="Location ignoredLocation; 770862"];
1482 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 770863"];
1483 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 770864"];
1484 [label="param GetDeclaredCompliance(out Location attributeLocation) 770865"];
1485 [label="param GetDeclaredCompliance(this) 770866"];
1486 [label="attributeLocation = null; 770867"];
1487 [label="return null; 770868"];
1488 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 770869"];
1489 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 770870"];
1490 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 770871"];
1491 [label="GetInheritedCompliance(symbol) 770872"];
1492 [label="param GetInheritedCompliance(Symbol symbol) 770873"];
1493 [label="param GetInheritedCompliance(this) 770874"];
1494 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 770875"];
1495 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 770876"];
1496 [label="System.Diagnostics.Debug.Assert((object)containing != null); 770877"];
1497 [label="System.Diagnostics.Debug.Assert((object)containing != null); 770878"];
1498 [label="return GetDeclaredOrInheritedCompliance(containing); 770879"];
1499 [label="GetDeclaredOrInheritedCompliance(containing) 770880"];
1500 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 770881"];
1501 [label="param GetDeclaredOrInheritedCompliance(this) 770882"];
1502 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 770883"];
1503 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 770884"];
1504 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 770885"];
1505 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 770886"];
1506 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 770887"];
1507 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 770888"];
1508 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 770889"];
1509 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 770890"];
1510 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 770891"];
1511 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 770892"];
1512 [label="return compliance; 770893"];
1513 [label="IsTrue(GetInheritedCompliance(symbol)) 770894"];
1514 [label="param IsTrue(Compliance compliance) 770895"];
1515 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 770896"];
1516 [label="return false; 770897"];
1517 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 770898"];
1518 [label="param IsTrue(Compliance compliance) 770899"];
1519 [label="Visit(symbol.GlobalNamespace); 770900"];
1520 [label="Visit(symbol.GlobalNamespace); 770901"];
1521 [label="param VisitNamespace(NamespaceSymbol symbol) 770902"];
1522 [label="param VisitNamespace(this) 770903"];
1523 [label="_cancellationToken.ThrowIfCancellationRequested(); 770904"];
1524 [label="if (DoNotVisit(symbol)) return; 770905"];
1525 [label="DoNotVisit(symbol) 770906"];
1526 [label="param DoNotVisit(Symbol symbol) 770907"];
1527 [label="param DoNotVisit(this) 770908"];
1528 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 770909"];
1529 [label="return false; 770910"];
1530 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 770911"];
1531 [label="GetDeclaredOrInheritedCompliance(symbol) 770912"];
1532 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 770913"];
1533 [label="param GetDeclaredOrInheritedCompliance(this) 770914"];
1534 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 770915"];
1535 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 770916"];
1536 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 770917"];
1537 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 770918"];
1538 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 770919"];
1539 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 770920"];
1540 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 770921"];
1541 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 770922"];
1542 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 770923"];
1543 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 770924"];
1544 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 770925"];
1545 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 770926"];
1546 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 770927"];
1547 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 770928"];
1548 [label="return compliance; 770929"];
1549 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 770930"];
1550 [label="param IsTrue(Compliance compliance) 770931"];
1551 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 770932"];
1552 [label="return false; 770933"];
1553 [label="ConcurrentAnalysis 770934"];
1554 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 770935"];
1555 [label="null 770936"];
1556 [label="_filterTree == null 770937"];
1557 [label="_compilation.Options 770938"];
1558 [label="get\n            {\n                return _options;\n            } 770939"];
1559 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 770940"];
1560 [label="VisitNamespaceMembersAsTasks(symbol); 770941"];
1561 [label="VisitNamespaceMembersAsTasks(symbol) 770942"];
1562 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 770943"];
1563 [label="param VisitNamespaceMembersAsTasks(this) 770944"];
1564 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 770945"];
1565 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 770946"];
1566 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 770947"];
1567 [label="VisitNamespaceMembersAsTasks(symbol); 770948"];
1568 [label="checker.WaitForWorkers() 770949"];
1569 [label="param WaitForWorkers(this) 770950"];
1570 [label="var tasks = _compilerTasks; 770951"];
1571 [label="if (tasks == null)\n            {\n                return;\n            } 770952"];
1572 [label="if (tasks == null)\n            {\n                return;\n            } 770953"];
1573 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 770954"];
1574 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 770955"];
1575 [label="curTask.GetAwaiter().GetResult(); 770956"];
1576 [label="checker.WaitForWorkers(); 770957"];
1577 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 770958"];
1578 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 770959"];
1579 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 770960"];
1580 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 770961"];
1581 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 770962"];
1582 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 770963"];
1583 [label="return _lazyClsComplianceDiagnostics; 770964"];
1584 [label="return result.AsImmutable().Concat(clsDiagnostics); 770965"];
1585 [label="return result.AsImmutable().Concat(clsDiagnostics); 770966"];
1586 [label="return result.AsImmutable().Concat(clsDiagnostics); 770967"];
1587 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 770968"];
1588 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 770969"];
1589 [label="cancellationToken.ThrowIfCancellationRequested(); 770970"];
1590 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 770971"];
1591 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 770972"];
1592 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 770973"];
1593 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 770974"];
1594 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 770975"];
1595 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 770976"];
1596 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 770977"];
1597 [label="return diagnostics.ToReadOnlyAndFree(); 770978"];
1598 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 770979"];
1599 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 770980"];
1600 [label="excludeDiagnostics?.Free(); 770981"];
1601 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 770982"];
1602 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 770983"];
1603 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 770984"];
1604 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 770985"];
1605 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 770986"];
1606 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 770987"];
1607 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 770988"];
1608 [label="param AddDebugSourceDocumentsForChecksumDirectives(SyntaxTree tree) 770989"];
1609 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 770990"];
1610 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 770991"];
1611 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 770992"];
1612 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 770993"];
1613 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 770994"];
1614 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 770995"];
1615 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 770996"];
1616 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 770997"];
1617 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 770998"];
1618 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 770999"];
1619 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 771000"];
1620 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 771001"];
1621 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 771002"];
1622 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 771003"];
1623 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 771004"];
1624 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 771005"];
1625 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 771006"];
1626 [label="param CompileMethodBodies(CSharpCompilation compilation) 771007"];
1627 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 771008"];
1628 [label="param CompileMethodBodies(bool emittingPdb) 771009"];
1629 [label="param CompileMethodBodies(bool emitTestCoverageData) 771010"];
1630 [label="param CompileMethodBodies(bool hasDeclarationErrors) 771011"];
1631 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 771012"];
1632 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 771013"];
1633 [label="param CompileMethodBodies(CancellationToken cancellationToken) 771014"];
1634 [label="Debug.Assert(compilation != null); 771015"];
1635 [label="Debug.Assert(compilation != null); 771016"];
1636 [label="Debug.Assert(diagnostics != null); 771017"];
1637 [label="Debug.Assert(diagnostics != null); 771018"];
1638 [label="compilation.PreviousSubmission 771019"];
1639 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 771020"];
1640 [label="ScriptCompilationInfo 771021"];
1641 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 771022"];
1642 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 771023"];
1643 [label="MethodSymbol entryPoint = null; 771024"];
1644 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 771025"];
1645 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 771026"];
1646 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 771027"];
1647 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 771028"];
1648 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 771029"];
1649 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 771030"];
1650 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 771031"];
1651 [label="param GetEntryPoint(CSharpCompilation compilation) 771032"];
1652 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 771033"];
1653 [label="param GetEntryPoint(bool hasDeclarationErrors) 771034"];
1654 [label="param GetEntryPoint(DiagnosticBag diagnostics) 771035"];
1655 [label="param GetEntryPoint(CancellationToken cancellationToken) 771036"];
1656 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 771037"];
1657 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 771038"];
1658 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 771039"];
1659 [label="param GetEntryPointAndDiagnostics(this) 771040"];
1660 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 771041"];
1661 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 771042"];
1662 [label="EntryPoint? entryPoint; 771043"];
1663 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 771044"];
1664 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 771045"];
1665 [label="get\n            {\n                return Assembly.Modules[0];\n            } 771046"];
1666 [label="Assembly 771047"];
1667 [label="get\n            {\n                return SourceAssembly;\n            } 771048"];
1668 [label="GetBoundReferenceManager() 771049"];
1669 [label="param GetBoundReferenceManager(this) 771050"];
1670 [label="GetBoundReferenceManager(); 771051"];
1671 [label="return Assembly.Modules[0]; 771052"];
1672 [label="return Assembly.Modules[0]; 771053"];
1673 [label="this.Options 771054"];
1674 [label="return _options; 771055"];
1675 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 771056"];
1676 [label="this.ScriptClass 771057"];
1677 [label="get { return _scriptClass.Value; } 771058"];
1678 [label="return _scriptClass.Value; 771059"];
1679 [label="_scriptClass.Value 771060"];
1680 [label="param BindScriptClass(this) 771061"];
1681 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 771062"];
1682 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 771063"];
1683 [label="get { return this.SourceModule.GetPublicSymbol(); } 771064"];
1684 [label="this.SourceModule 771065"];
1685 [label="get\n            {\n                return Assembly.Modules[0];\n            } 771066"];
1686 [label="Assembly 771067"];
1687 [label="GetBoundReferenceManager() 771068"];
1688 [label="param GetBoundReferenceManager(this) 771069"];
1689 [label="GetBoundReferenceManager(); 771070"];
1690 [label="return Assembly.Modules[0]; 771071"];
1691 [label="return this.SourceModule.GetPublicSymbol(); 771072"];
1692 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 771073"];
1693 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 771074"];
1694 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 771075"];
1695 [label="null 771076"];
1696 [label="ImmutableArray<Diagnostic>.Empty 771077"];
1697 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 771078"];
1698 [label="param EntryPoint(MethodSymbol? methodSymbol) 771079"];
1699 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 771080"];
1700 [label="param EntryPoint(this) 771081"];
1701 [label="MethodSymbol 771082"];
1702 [label="this.MethodSymbol 771083"];
1703 [label="this.Diagnostics 771084"];
1704 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 771085"];
1705 [label="entryPoint = EntryPoint.None; 771086"];
1706 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 771087"];
1707 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 771088"];
1708 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 771089"];
1709 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 771090"];
1710 [label="return _lazyEntryPoint; 771091"];
1711 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 771092"];
1712 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 771093"];
1713 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 771094"];
1714 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 771095"];
1715 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 771096"];
1716 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 771097"];
1717 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 771098"];
1718 [label="return null; 771099"];
1719 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 771100"];
1720 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 771101"];
1721 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 771102"];
1722 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 771103"];
1723 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 771104"];
1724 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 771105"];
1725 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 771106"];
1726 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 771107"];
1727 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 771108"];
1728 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 771109"];
1729 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 771110"];
1730 [label="param MethodCompiler(CSharpCompilation compilation) 771111"];
1731 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 771112"];
1732 [label="param MethodCompiler(bool emittingPdb) 771113"];
1733 [label="param MethodCompiler(bool emitTestCoverageData) 771114"];
1734 [label="param MethodCompiler(bool hasDeclarationErrors) 771115"];
1735 [label="param MethodCompiler(DiagnosticBag diagnostics) 771116"];
1736 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 771117"];
1737 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 771118"];
1738 [label="param MethodCompiler(CancellationToken cancellationToken) 771119"];
1739 [label="param MethodCompiler(this) 771120"];
1740 [label="param MethodCompiler(this) 771121"];
1741 [label="_compilation 771122"];
1742 [label="_emittingPdb 771123"];
1743 [label="_emitTestCoverageData 771124"];
1744 [label="_diagnostics 771125"];
1745 [label="_hasDeclarationErrors 771126"];
1746 [label="_moduleBeingBuiltOpt 771127"];
1747 [label="_filterOpt 771128"];
1748 [label="_debugDocumentProvider 771129"];
1749 [label="_entryPointOpt 771130"];
1750 [label="_compilerTasks 771131"];
1751 [label="_globalHasErrors 771132"];
1752 [label="Debug.Assert(compilation != null); 771133"];
1753 [label="Debug.Assert(compilation != null); 771134"];
1754 [label="Debug.Assert(diagnostics != null); 771135"];
1755 [label="Debug.Assert(diagnostics != null); 771136"];
1756 [label="_compilation 771137"];
1757 [label="_moduleBeingBuiltOpt 771138"];
1758 [label="_emittingPdb 771139"];
1759 [label="_cancellationToken 771140"];
1760 [label="_diagnostics 771141"];
1761 [label="_filterOpt 771142"];
1762 [label="_entryPointOpt 771143"];
1763 [label="_hasDeclarationErrors 771144"];
1764 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 771145"];
1765 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 771146"];
1766 [label="param SetGlobalErrorIfTrue(bool arg) 771147"];
1767 [label="param SetGlobalErrorIfTrue(this) 771148"];
1768 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 771149"];
1769 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 771150"];
1770 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 771151"];
1771 [label="_debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile); 771152"];
1772 [label="_debugDocumentProvider 771153"];
1773 [label="_emitTestCoverageData 771154"];
1774 [label="compilation.Options 771155"];
1775 [label="get\n            {\n                return _options;\n            } 771156"];
1776 [label="return _options; 771157"];
1777 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 771158"];
1778 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 771159"];
1779 [label="methodCompiler._compilerTasks 771160"];
1780 [label="compilation.SourceModule 771161"];
1781 [label="get\n            {\n                return Assembly.Modules[0];\n            } 771162"];
1782 [label="Assembly 771163"];
1783 [label="get\n            {\n                return SourceAssembly;\n            } 771164"];
1784 [label="SourceAssembly 771165"];
1785 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 771166"];
1786 [label="GetBoundReferenceManager() 771167"];
1787 [label="param GetBoundReferenceManager(this) 771168"];
1788 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 771169"];
1789 [label="return _referenceManager; 771170"];
1790 [label="GetBoundReferenceManager(); 771171"];
1791 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 771172"];
1792 [label="return Assembly.Modules[0]; 771173"];
1793 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 771174"];
1794 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 771175"];
1795 [label="param CompileNamespace(NamespaceSymbol symbol) 771176"];
1796 [label="param CompileNamespace(this) 771177"];
1797 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 771178"];
1798 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 771179"];
1799 [label="methodCompiler.WaitForWorkers() 771180"];
1800 [label="param WaitForWorkers(this) 771181"];
1801 [label="var tasks = _compilerTasks; 771182"];
1802 [label="if (tasks == null)\n            {\n                return;\n            } 771183"];
1803 [label="if (tasks == null)\n            {\n                return;\n            } 771184"];
1804 [label="Task curTask; 771185"];
1805 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 771186"];
1806 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 771187"];
1807 [label="methodCompiler.WaitForWorkers(); 771188"];
1808 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 771189"];
1809 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 771190"];
1810 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 771191"];
1811 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 771192"];
1812 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 771193"];
1813 [label="=> _additionalTypes 771194"];
1814 [label="_additionalTypes 771195"];
1815 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 771196"];
1816 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 771197"];
1817 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 771198"];
1818 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 771199"];
1819 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 771200"];
1820 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 771201"];
1821 [label="param CompileSynthesizedMethods(this) 771202"];
1822 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 771203"];
1823 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 771204"];
1824 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 771205"];
1825 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 771206"];
1826 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 771207"];
1827 [label="param GetEmbeddedTypes(this) 771208"];
1828 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 771209"];
1829 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 771210"];
1830 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 771211"];
1831 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 771212"];
1832 [label="param CreateEmbeddedAttributesIfNeeded(this) 771213"];
1833 [label="GetNeedsGeneratedAttributes() 771214"];
1834 [label="param GetNeedsGeneratedAttributes(this) 771215"];
1835 [label="_needsGeneratedAttributes_IsFrozen = true; 771216"];
1836 [label="_needsGeneratedAttributes_IsFrozen 771217"];
1837 [label="GetNeedsGeneratedAttributesInternal() 771218"];
1838 [label="param GetNeedsGeneratedAttributesInternal(this) 771219"];
1839 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 771220"];
1840 [label="return GetNeedsGeneratedAttributesInternal(); 771221"];
1841 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 771222"];
1842 [label="ShouldEmitNullablePublicOnlyAttribute() 771223"];
1843 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 771224"];
1844 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 771225"];
1845 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 771226"];
1846 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 771227"];
1847 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 771228"];
1848 [label="return; 771229"];
1849 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 771230"];
1850 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 771231"];
1851 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 771232"];
1852 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 771233"];
1853 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 771234"];
1854 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 771235"];
1855 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 771236"];
1856 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 771237"];
1857 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 771238"];
1858 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 771239"];
1859 [label="builder.AddIfNotNull(_lazyNullableAttribute); 771240"];
1860 [label="builder.AddIfNotNull(_lazyNullableAttribute); 771241"];
1861 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 771242"];
1862 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 771243"];
1863 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 771244"];
1864 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 771245"];
1865 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 771246"];
1866 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 771247"];
1867 [label="return builder.ToImmutableAndFree(); 771248"];
1868 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 771249"];
1869 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 771250"];
1870 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 771251"];
1871 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 771252"];
1872 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 771253"];
1873 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 771254"];
1874 [label="param CompileSynthesizedMethods(this) 771255"];
1875 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 771256"];
1876 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 771257"];
1877 [label="compilation.AnonymousTypeManager 771258"];
1878 [label="get\n            {\n                return _anonymousTypeManager;\n            } 771259"];
1879 [label="return _anonymousTypeManager; 771260"];
1880 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 771261"];
1881 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 771262"];
1882 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 771263"];
1883 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 771264"];
1884 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 771265"];
1885 [label="param GetPreviousAnonymousTypes(this) 771266"];
1886 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 771267"];
1887 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 771268"];
1888 [label="param GetNextAnonymousTypeIndex(this) 771269"];
1889 [label="return 0; 771270"];
1890 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 771271"];
1891 [label="methodCompiler.WaitForWorkers() 771272"];
1892 [label="param WaitForWorkers(this) 771273"];
1893 [label="var tasks = _compilerTasks; 771274"];
1894 [label="if (tasks == null)\n            {\n                return;\n            } 771275"];
1895 [label="if (tasks == null)\n            {\n                return;\n            } 771276"];
1896 [label="Task curTask; 771277"];
1897 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 771278"];
1898 [label="methodCompiler.WaitForWorkers(); 771279"];
1899 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 771280"];
1900 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 771281"];
1901 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 771282"];
1902 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 771283"];
1903 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 771284"];
1904 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 771285"];
1905 [label="compilation.AdditionalCodegenWarnings 771286"];
1906 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 771287"];
1907 [label="return _additionalCodegenWarnings; 771288"];
1908 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 771289"];
1909 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 771290"];
1910 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 771291"];
1911 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 771292"];
1912 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 771293"];
1913 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 771294"];
1914 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 771295"];
1915 [label="param WarnUnusedFields(CSharpCompilation compilation) 771296"];
1916 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 771297"];
1917 [label="param WarnUnusedFields(CancellationToken cancellationToken) 771298"];
1918 [label="compilation.Assembly 771299"];
1919 [label="get\n            {\n                return SourceAssembly;\n            } 771300"];
1920 [label="SourceAssembly 771301"];
1921 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 771302"];
1922 [label="GetBoundReferenceManager() 771303"];
1923 [label="param GetBoundReferenceManager(this) 771304"];
1924 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 771305"];
1925 [label="return _referenceManager; 771306"];
1926 [label="GetBoundReferenceManager(); 771307"];
1927 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 771308"];
1928 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 771309"];
1929 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 771310"];
1930 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 771311"];
1931 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 771312"];
1932 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 771313"];
1933 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 771314"];
1934 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 771315"];
1935 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 771316"];
1936 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 771317"];
1937 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 771318"];
1938 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 771319"];
1939 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 771320"];
1940 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 771321"];
1941 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 771322"];
1942 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 771323"];
1943 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 771324"];
1944 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 771325"];
1945 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 771326"];
1946 [label="param GenerateModuleInitializer(this) 771327"];
1947 [label="Debug.Assert(_declarationDiagnosticsFrozen); 771328"];
1948 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 771329"];
1949 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 771330"];
1950 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 771331"];
1951 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 771332"];
1952 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 771333"];
1953 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 771334"];
1954 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 771335"];
1955 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 771336"];
1956 [label="return true; 771337"];
1957 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 771338"];
1958 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 771339"];
1959 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 771340"];
1960 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 771341"];
1961 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 771342"];
1962 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 771343"];
1963 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 771344"];
1964 [label="param GenerateResourcesAndDocumentationComments(this) 771345"];
1965 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 771346"];
1966 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 771347"];
1967 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 771348"];
1968 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 771349"];
1969 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 771350"];
1970 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 771351"];
1971 [label="SourceAssembly 771352"];
1972 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 771353"];
1973 [label="GetBoundReferenceManager() 771354"];
1974 [label="param GetBoundReferenceManager(this) 771355"];
1975 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 771356"];
1976 [label="return _referenceManager; 771357"];
1977 [label="GetBoundReferenceManager(); 771358"];
1978 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 771359"];
1979 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 771360"];
1980 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 771361"];
1981 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 771362"];
1982 [label="AddedModulesResourceNames(resourceDiagnostics) 771363"];
1983 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 771364"];
1984 [label="param AddedModulesResourceNames(this) 771365"];
1985 [label="SourceAssembly 771366"];
1986 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 771367"];
1987 [label="GetBoundReferenceManager() 771368"];
1988 [label="param GetBoundReferenceManager(this) 771369"];
1989 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 771370"];
1990 [label="return _referenceManager; 771371"];
1991 [label="GetBoundReferenceManager(); 771372"];
1992 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 771373"];
1993 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 771374"];
1994 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 771375"];
1995 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 771376"];
1996 [label="var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i]; 771377"];
1997 [label="ImmutableArray<EmbeddedResource> resources; 771378"];
1998 [label="resources 771379"];
1999 [label="resources = m.Module.GetEmbeddedResourcesOrThrow(); 771380"];
2000 [label="foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                } 771381"];
2001 [label="param AddedModulesResourceNames(this) 771382"];
2002 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 771383"];
2003 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 771384"];
2004 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 771385"];
2005 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 771386"];
2006 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 771387"];
2007 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 771388"];
2008 [label="cancellationToken.ThrowIfCancellationRequested(); 771389"];
2009 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 771390"];
2010 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 771391"];
2011 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 771392"];
2012 [label="new[] { '\\r\\n', '\\r', '\\n' } 771393"];
2013 [label="'\\r\\n' 771394"];
2014 [label="'\\r' 771395"];
2015 [label="'\\n' 771396"];
2016 [label="new[] { '\\r\\n', '\\r', '\\n' } 771397"];
2017 [label="new[] { '\\r\\n', '\\r', '\\n' } 771398"];
2018 [label="new[] { '\\r\\n', '\\r', '\\n' } 771399"];
2019 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 771400"];
2020 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 771401"];
2021 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 771402"];
2022 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 771403"];
2023 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 771404"];
2024 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 771405"];
2025 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 771406"];
2026 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 771407"];
2027 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 771408"];
2028 [label="param WriteDocumentationCommentXml(string? assemblyName) 771409"];
2029 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 771410"];
2030 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 771411"];
2031 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 771412"];
2032 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 771413"];
2033 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 771414"];
2034 [label="StreamWriter writer = null; 771415"];
2035 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 771416"];
2036 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 771417"];
2037 [label="compilation.SourceAssembly 771418"];
2038 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 771419"];
2039 [label="GetBoundReferenceManager() 771420"];
2040 [label="param GetBoundReferenceManager(this) 771421"];
2041 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 771422"];
2042 [label="return _referenceManager; 771423"];
2043 [label="GetBoundReferenceManager(); 771424"];
2044 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 771425"];
2045 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 771426"];
2046 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 771427"];
2047 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 771428"];
2048 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 771429"];
2049 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 771430"];
2050 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 771431"];
2051 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 771432"];
2052 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 771433"];
2053 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 771434"];
2054 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 771435"];
2055 [label="param DocumentationCommentCompiler(string assemblyName) 771436"];
2056 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 771437"];
2057 [label="param DocumentationCommentCompiler(TextWriter writer) 771438"];
2058 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 771439"];
2059 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 771440"];
2060 [label="param DocumentationCommentCompiler(bool processIncludes) 771441"];
2061 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 771442"];
2062 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 771443"];
2063 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 771444"];
2064 [label="param DocumentationCommentCompiler(this) 771445"];
2065 [label="param DocumentationCommentCompiler(this) 771446"];
2066 [label="_assemblyName 771447"];
2067 [label="_compilation 771448"];
2068 [label="_writer 771449"];
2069 [label="_filterTree 771450"];
2070 [label="_filterSpanWithinTree 771451"];
2071 [label="_processIncludes 771452"];
2072 [label="_isForSingleSymbol 771453"];
2073 [label="_diagnostics 771454"];
2074 [label="_lazyComparer 771455"];
2075 [label="_includedFileCache 771456"];
2076 [label="_indentDepth 771457"];
2077 [label="_temporaryStringBuilders 771458"];
2078 [label="_assemblyName 771459"];
2079 [label="_compilation 771460"];
2080 [label="_writer 771461"];
2081 [label="_filterTree 771462"];
2082 [label="_filterSpanWithinTree 771463"];
2083 [label="_processIncludes 771464"];
2084 [label="_isForSingleSymbol 771465"];
2085 [label="_diagnostics 771466"];
2086 [label="_cancellationToken 771467"];
2087 [label="compilation.SourceAssembly 771468"];
2088 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 771469"];
2089 [label="GetBoundReferenceManager() 771470"];
2090 [label="param GetBoundReferenceManager(this) 771471"];
2091 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 771472"];
2092 [label="return _referenceManager; 771473"];
2093 [label="GetBoundReferenceManager(); 771474"];
2094 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 771475"];
2095 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 771476"];
2096 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 771477"];
2097 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 771478"];
2098 [label="param VisitNamespace(NamespaceSymbol symbol) 771479"];
2099 [label="param VisitNamespace(this) 771480"];
2100 [label="_cancellationToken.ThrowIfCancellationRequested(); 771481"];
2101 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 771482"];
2102 [label="Debug.Assert(_assemblyName != null); 771483"];
2103 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 771484"];
2104 [label="WriteLine('<?xml version=\\'1.0\\'?>') 771485"];
2105 [label="param WriteLine(string message) 771486"];
2106 [label="param WriteLine(this) 771487"];
2107 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771488"];
2108 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771489"];
2109 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771490"];
2110 [label="WriteLine('<doc>'); 771491"];
2111 [label="WriteLine('<doc>') 771492"];
2112 [label="param WriteLine(string message) 771493"];
2113 [label="param WriteLine(this) 771494"];
2114 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771495"];
2115 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771496"];
2116 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771497"];
2117 [label="Indent() 771498"];
2118 [label="param Indent(this) 771499"];
2119 [label="_indentDepth 771500"];
2120 [label="Indent(); 771501"];
2121 [label="_compilation.Options 771502"];
2122 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 771503"];
2123 [label="WriteLine('<assembly>'); 771504"];
2124 [label="WriteLine('<assembly>') 771505"];
2125 [label="param WriteLine(string message) 771506"];
2126 [label="param WriteLine(this) 771507"];
2127 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771508"];
2128 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771509"];
2129 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771510"];
2130 [label="Indent() 771511"];
2131 [label="param Indent(this) 771512"];
2132 [label="_indentDepth 771513"];
2133 [label="Indent(); 771514"];
2134 [label="WriteLine('<name>{0}</name>', _assemblyName); 771515"];
2135 [label="WriteLine('<name>{0}</name>', _assemblyName) 771516"];
2136 [label="WriteLine('<name>{0}</name>', _assemblyName) 771517"];
2137 [label="param WriteLine(string format) 771518"];
2138 [label="param WriteLine(params object[] args) 771519"];
2139 [label="param WriteLine(this) 771520"];
2140 [label="WriteLine(string.Format(format, args)); 771521"];
2141 [label="WriteLine(string.Format(format, args)); 771522"];
2142 [label="WriteLine(string.Format(format, args)); 771523"];
2143 [label="WriteLine(string.Format(format, args)) 771524"];
2144 [label="param WriteLine(string message) 771525"];
2145 [label="param WriteLine(this) 771526"];
2146 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771527"];
2147 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771528"];
2148 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771529"];
2149 [label="WriteLine(string.Format(format, args)); 771530"];
2150 [label="Unindent() 771531"];
2151 [label="param Unindent(this) 771532"];
2152 [label="_indentDepth 771533"];
2153 [label="Debug.Assert(_indentDepth >= 0); 771534"];
2154 [label="Debug.Assert(_indentDepth >= 0); 771535"];
2155 [label="Unindent(); 771536"];
2156 [label="WriteLine('</assembly>'); 771537"];
2157 [label="WriteLine('</assembly>') 771538"];
2158 [label="param WriteLine(string message) 771539"];
2159 [label="param WriteLine(this) 771540"];
2160 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771541"];
2161 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771542"];
2162 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771543"];
2163 [label="WriteLine('<members>'); 771544"];
2164 [label="WriteLine('<members>') 771545"];
2165 [label="param WriteLine(string message) 771546"];
2166 [label="param WriteLine(this) 771547"];
2167 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771548"];
2168 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771549"];
2169 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771550"];
2170 [label="Indent() 771551"];
2171 [label="param Indent(this) 771552"];
2172 [label="_indentDepth 771553"];
2173 [label="Indent(); 771554"];
2174 [label="Debug.Assert(!_isForSingleSymbol); 771555"];
2175 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 771556"];
2176 [label="_cancellationToken.ThrowIfCancellationRequested(); 771557"];
2177 [label="s.Accept(this); 771558"];
2178 [label="s.Accept(this); 771559"];
2179 [label="s.Accept(this); 771560"];
2180 [label="Debug.Assert(!_isForSingleSymbol); 771561"];
2181 [label="param VisitNamedType(NamedTypeSymbol symbol) 771562"];
2182 [label="param VisitNamedType(this) 771563"];
2183 [label="_cancellationToken.ThrowIfCancellationRequested(); 771564"];
2184 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 771565"];
2185 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 771566"];
2186 [label="DefaultVisit(symbol); 771567"];
2187 [label="DefaultVisit(symbol) 771568"];
2188 [label="param DefaultVisit(Symbol symbol) 771569"];
2189 [label="param DefaultVisit(this) 771570"];
2190 [label="_cancellationToken.ThrowIfCancellationRequested(); 771571"];
2191 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 771572"];
2192 [label="ShouldSkip(symbol) 771573"];
2193 [label="param ShouldSkip(Symbol symbol) 771574"];
2194 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 771575"];
2195 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 771576"];
2196 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 771577"];
2197 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 771578"];
2198 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 771579"];
2199 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 771580"];
2200 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 771581"];
2201 [label="DocumentationMode maxDocumentationMode; 771582"];
2202 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 771583"];
2203 [label="docCommentNodes 771584"];
2204 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771585"];
2205 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771586"];
2206 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771587"];
2207 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 771588"];
2208 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 771589"];
2209 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 771590"];
2210 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 771591"];
2211 [label="param TryGetDocumentationCommentNodes(this) 771592"];
2212 [label="maxDocumentationMode = DocumentationMode.None; 771593"];
2213 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 771594"];
2214 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 771595"];
2215 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 771596"];
2216 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 771597"];
2217 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 771598"];
2218 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 771599"];
2219 [label="return true; 771600"];
2220 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771601"];
2221 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 771602"];
2222 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 771603"];
2223 [label="return; 771604"];
2224 [label="DefaultVisit(symbol); 771605"];
2225 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 771606"];
2226 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 771607"];
2227 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 771608"];
2228 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 771609"];
2229 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 771610"];
2230 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 771611"];
2231 [label="DocumentationMode maxDocumentationMode; 771612"];
2232 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 771613"];
2233 [label="docCommentNodes 771614"];
2234 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771615"];
2235 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771616"];
2236 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771617"];
2237 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 771618"];
2238 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 771619"];
2239 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 771620"];
2240 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 771621"];
2241 [label="param TryGetDocumentationCommentNodes(this) 771622"];
2242 [label="maxDocumentationMode = DocumentationMode.None; 771623"];
2243 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 771624"];
2244 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 771625"];
2245 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 771626"];
2246 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 771627"];
2247 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 771628"];
2248 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 771629"];
2249 [label="return true; 771630"];
2250 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771631"];
2251 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 771632"];
2252 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 771633"];
2253 [label="return; 771634"];
2254 [label="_cancellationToken.ThrowIfCancellationRequested(); 771635"];
2255 [label="member.Accept(this); 771636"];
2256 [label="member.Accept(this); 771637"];
2257 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 771638"];
2258 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 771639"];
2259 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 771640"];
2260 [label="DocumentationMode maxDocumentationMode; 771641"];
2261 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 771642"];
2262 [label="docCommentNodes 771643"];
2263 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771644"];
2264 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771645"];
2265 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771646"];
2266 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 771647"];
2267 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 771648"];
2268 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 771649"];
2269 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 771650"];
2270 [label="param TryGetDocumentationCommentNodes(this) 771651"];
2271 [label="maxDocumentationMode = DocumentationMode.None; 771652"];
2272 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 771653"];
2273 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 771654"];
2274 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 771655"];
2275 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 771656"];
2276 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 771657"];
2277 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 771658"];
2278 [label="return true; 771659"];
2279 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 771660"];
2280 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 771661"];
2281 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 771662"];
2282 [label="return; 771663"];
2283 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 771664"];
2284 [label="Unindent() 771665"];
2285 [label="Debug.Assert(_indentDepth >= 0); 771666"];
2286 [label="Unindent(); 771667"];
2287 [label="WriteLine('</members>'); 771668"];
2288 [label="WriteLine('</members>') 771669"];
2289 [label="param WriteLine(string message) 771670"];
2290 [label="param WriteLine(this) 771671"];
2291 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771672"];
2292 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771673"];
2293 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771674"];
2294 [label="Unindent() 771675"];
2295 [label="_indentDepth 771676"];
2296 [label="Debug.Assert(_indentDepth >= 0); 771677"];
2297 [label="Debug.Assert(_indentDepth >= 0); 771678"];
2298 [label="Unindent(); 771679"];
2299 [label="WriteLine('</doc>'); 771680"];
2300 [label="WriteLine('</doc>') 771681"];
2301 [label="param WriteLine(string message) 771682"];
2302 [label="param WriteLine(this) 771683"];
2303 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771684"];
2304 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771685"];
2305 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 771686"];
2306 [label="Debug.Assert(compiler._indentDepth == 0); 771687"];
2307 [label="Debug.Assert(compiler._indentDepth == 0); 771688"];
2308 [label="writer?.Flush(); 771689"];
2309 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 771690"];
2310 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 771691"];
2311 [label="compilation.SyntaxTrees 771692"];
2312 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 771693"];
2313 [label="_syntaxAndDeclarations.GetLazyState() 771694"];
2314 [label="param GetLazyState(this) 771695"];
2315 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 771696"];
2316 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 771697"];
2317 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 771698"];
2318 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 771699"];
2319 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 771700"];
2320 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 771701"];
2321 [label="param ReportUnprocessed(SyntaxTree tree) 771702"];
2322 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 771703"];
2323 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 771704"];
2324 [label="param ReportUnprocessed(CancellationToken cancellationToken) 771705"];
2325 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 771706"];
2326 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 771707"];
2327 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 771708"];
2328 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 771709"];
2329 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 771710"];
2330 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 771711"];
2331 [label="param ReportUnusedImports(SyntaxTree? filterTree) 771712"];
2332 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 771713"];
2333 [label="param ReportUnusedImports(CancellationToken cancellationToken) 771714"];
2334 [label="param ReportUnusedImports(this) 771715"];
2335 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 771716"];
2336 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 771717"];
2337 [label="CompleteTrees(filterTree); 771718"];
2338 [label="CompleteTrees(filterTree) 771719"];
2339 [label="param CompleteTrees(SyntaxTree? filterTree) 771720"];
2340 [label="param CompleteTrees(this) 771721"];
2341 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 771722"];
2342 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 771723"];
2343 [label="CompleteTrees(filterTree); 771724"];
2344 [label="get { return this.SourceModule.GetPublicSymbol(); } 771725"];
2345 [label="this.SourceModule 771726"];
2346 [label="get\n            {\n                return Assembly.Modules[0];\n            } 771727"];
2347 [label="Assembly 771728"];
2348 [label="get\n            {\n                return SourceAssembly;\n            } 771729"];
2349 [label="SourceAssembly 771730"];
2350 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 771731"];
2351 [label="GetBoundReferenceManager() 771732"];
2352 [label="param GetBoundReferenceManager(this) 771733"];
2353 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 771734"];
2354 [label="return _referenceManager; 771735"];
2355 [label="GetBoundReferenceManager(); 771736"];
2356 [label="return Assembly.Modules[0]; 771737"];
2357 [label="get { return SourceAssembly.IsDelaySigned; } 771738"];
2358 [label="SourceAssembly 771739"];
2359 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 771740"];
2360 [label="GetBoundReferenceManager() 771741"];
2361 [label="param GetBoundReferenceManager(this) 771742"];
2362 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 771743"];
2363 [label="return _referenceManager; 771744"];
2364 [label="GetBoundReferenceManager(); 771745"];
2365 [label="SourceAssembly.IsDelaySigned 771746"];
2366 [label="get { return SourceAssembly.StrongNameKeys; } 771747"];
2367 [label="SourceAssembly 771748"];
2368 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 771749"];
2369 [label="GetBoundReferenceManager() 771750"];
2370 [label="param GetBoundReferenceManager(this) 771751"];
2371 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 771752"];
2372 [label="return _referenceManager; 771753"];
2373 [label="GetBoundReferenceManager(); 771754"];
2374 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 771755"];
2375 [label="param GetCorLibraryReferenceToEmit(this) 771756"];
2376 [label="CorLibrary 771757"];
2377 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 771758"];
2378 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 771759"];
2379 [label="AssemblySymbol corLibrary = CorLibrary; 771760"];
2380 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 771761"];
2381 [label="return null; 771762"];
2382 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 771763"];
2383 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 771764"];
2384 [label="param GetAssemblyReferencesFromAddedModules(this) 771765"];
2385 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 771766"];
2386 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 771767"];
2387 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 771768"];
2388 [label="foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                } 771769"];
2389 [label="yield return Translate(aRef, diagnostics); 771770"];
2390 [label="yield return Translate(aRef, diagnostics); 771771"];
2391 [label="Translate(aRef, diagnostics) 771772"];
2392 [label="param Translate(AssemblySymbol assembly) 771773"];
2393 [label="param Translate(DiagnosticBag diagnostics) 771774"];
2394 [label="param Translate(this) 771775"];
2395 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 771776"];
2396 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 771777"];
2397 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 771778"];
2398 [label="Cci.IModuleReference reference; 771779"];
2399 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 771780"];
2400 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 771781"];
2401 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 771782"];
2402 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 771783"];
2403 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 771784"];
2404 [label="new AssemblyReference(assembly) 771785"];
2405 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 771786"];
2406 [label="param AssemblyReference(this) 771787"];
2407 [label="_targetAssembly 771788"];
2408 [label="Debug.Assert((object)assemblySymbol != null); 771789"];
2409 [label="Debug.Assert((object)assemblySymbol != null); 771790"];
2410 [label="_targetAssembly 771791"];
2411 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 771792"];
2412 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 771793"];
2413 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 771794"];
2414 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 771795"];
2415 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 771796"];
2416 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 771797"];
2417 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 771798"];
2418 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 771799"];
2419 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 771800"];
2420 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 771801"];
2421 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 771802"];
2422 [label="param ValidateReferencedAssembly(this) 771803"];
2423 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 771804"];
2424 [label="asmRef.Identity 771805"];
2425 [label="=> _targetAssembly.Identity 771806"];
2426 [label="_targetAssembly.Identity 771807"];
2427 [label="AssemblyIdentity refIdentity = asmRef.Identity; 771808"];
2428 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 771809"];
2429 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 771810"];
2430 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 771811"];
2431 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 771812"];
2432 [label="var refMachine = assembly.Machine; 771813"];
2433 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 771814"];
2434 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 771815"];
2435 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 771816"];
2436 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 771817"];
2437 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 771818"];
2438 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 771819"];
2439 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 771820"];
2440 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 771821"];
2441 [label="return cachedAsmRef; 771822"];
2442 [label="yield return Translate(aRef, diagnostics); 771823"];
2443 [label="param Translate(DiagnosticBag diagnostics) 771824"];
2444 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 771825"];
2445 [label="return (Cci.IAssemblyReference)reference; 771826"];
2446 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 771827"];
2447 [label="=> _targetAssembly.Identity 771828"];
2448 [label="_targetAssembly.Identity 771829"];
2449 [label="param GetFiles(EmitContext context) 771830"];
2450 [label="param GetFiles(this) 771831"];
2451 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 771832"];
2452 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 771833"];
2453 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 771834"];
2454 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 771835"];
2455 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 771836"];
2456 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 771837"];
2457 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 771838"];
2458 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 771839"];
2459 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 771840"];
2460 [label="var modules = sourceAssSymbol.Modules; 771841"];
2461 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 771842"];
2462 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 771843"];
2463 [label="builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics)); 771844"];
2464 [label="builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics)); 771845"];
2465 [label="Translate(modules[i], contxt.Diagnostics) 771846"];
2466 [label="param Translate(ModuleSymbol module) 771847"];
2467 [label="param Translate(DiagnosticBag diagnostics) 771848"];
2468 [label="param Translate(this) 771849"];
2469 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 771850"];
2470 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 771851"];
2471 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 771852"];
2472 [label="if ((object)module == null)\n            {\n                return null;\n            } 771853"];
2473 [label="if ((object)module == null)\n            {\n                return null;\n            } 771854"];
2474 [label="Cci.IModuleReference moduleRef; 771855"];
2475 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 771856"];
2476 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 771857"];
2477 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 771858"];
2478 [label="moduleRef = TranslateModule(module, diagnostics); 771859"];
2479 [label="moduleRef = TranslateModule(module, diagnostics); 771860"];
2480 [label="TranslateModule(module, diagnostics) 771861"];
2481 [label="param TranslateModule(ModuleSymbol module) 771862"];
2482 [label="param TranslateModule(DiagnosticBag diagnostics) 771863"];
2483 [label="param TranslateModule(this) 771864"];
2484 [label="AssemblySymbol container = module.ContainingAssembly; 771865"];
2485 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 771866"];
2486 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 771867"];
2487 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 771868"];
2488 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 771869"];
2489 [label="return new ModuleReference(this, module); 771870"];
2490 [label="return new ModuleReference(this, module); 771871"];
2491 [label="return new ModuleReference(this, module); 771872"];
2492 [label="new ModuleReference(this, module) 771873"];
2493 [label="param ModuleReference(PEModuleBuilder moduleBeingBuilt) 771874"];
2494 [label="param ModuleReference(ModuleSymbol underlyingModule) 771875"];
2495 [label="param ModuleReference(this) 771876"];
2496 [label="_moduleBeingBuilt 771877"];
2497 [label="_underlyingModule 771878"];
2498 [label="Debug.Assert(moduleBeingBuilt != null); 771879"];
2499 [label="Debug.Assert(moduleBeingBuilt != null); 771880"];
2500 [label="Debug.Assert((object)underlyingModule != null); 771881"];
2501 [label="Debug.Assert((object)underlyingModule != null); 771882"];
2502 [label="_moduleBeingBuilt 771883"];
2503 [label="_underlyingModule 771884"];
2504 [label="moduleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(module, moduleRef); 771885"];
2505 [label="moduleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(module, moduleRef); 771886"];
2506 [label="moduleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(module, moduleRef); 771887"];
2507 [label="return moduleRef; 771888"];
2508 [label="builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics)); 771889"];
2509 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 771890"];
2510 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 771891"];
2511 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 771892"];
2512 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 771893"];
2513 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 771894"];
2514 [label="if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            } 771895"];
2515 [label="builder.Free(); 771896"];
2516 [label="return lazyFiles; 771897"];
2517 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 771898"];
2518 [label="get\n            {\n                return _underlyingModule.Name;\n            } 771899"];
2519 [label="return _underlyingModule.Name; 771900"];
2520 [label="=> _embeddedTypesManagerOpt 771901"];
2521 [label="_embeddedTypesManagerOpt 771902"];
2522 [label="param GetAnonymousTypeDefinitions(EmitContext context) 771903"];
2523 [label="param GetAnonymousTypeDefinitions(this) 771904"];
2524 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 771905"];
2525 [label="Compilation.AnonymousTypeManager 771906"];
2526 [label="get\n            {\n                return _anonymousTypeManager;\n            } 771907"];
2527 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 771908"];
2528 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 771909"];
2529 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 771910"];
2530 [label="param GetAdditionalTopLevelTypeDefinitions(this) 771911"];
2531 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 771912"];
2532 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 771913"];
2533 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 771914"];
2534 [label="=> _additionalTypes 771915"];
2535 [label="_additionalTypes 771916"];
2536 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 771917"];
2537 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 771918"];
2538 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 771919"];
2539 [label="param GetEmbeddedTypeDefinitions(this) 771920"];
2540 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 771921"];
2541 [label="GetEmbeddedTypes(context.Diagnostics) 771922"];
2542 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 771923"];
2543 [label="param GetEmbeddedTypes(this) 771924"];
2544 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 771925"];
2545 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 771926"];
2546 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 771927"];
2547 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 771928"];
2548 [label="param CreateEmbeddedAttributesIfNeeded(this) 771929"];
2549 [label="GetNeedsGeneratedAttributes() 771930"];
2550 [label="param GetNeedsGeneratedAttributes(this) 771931"];
2551 [label="_needsGeneratedAttributes_IsFrozen = true; 771932"];
2552 [label="_needsGeneratedAttributes_IsFrozen 771933"];
2553 [label="GetNeedsGeneratedAttributesInternal() 771934"];
2554 [label="param GetNeedsGeneratedAttributesInternal(this) 771935"];
2555 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 771936"];
2556 [label="return GetNeedsGeneratedAttributesInternal(); 771937"];
2557 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 771938"];
2558 [label="ShouldEmitNullablePublicOnlyAttribute() 771939"];
2559 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 771940"];
2560 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 771941"];
2561 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 771942"];
2562 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 771943"];
2563 [label="return; 771944"];
2564 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 771945"];
2565 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 771946"];
2566 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 771947"];
2567 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 771948"];
2568 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 771949"];
2569 [label="builder.AddIfNotNull(_lazyNullableAttribute); 771950"];
2570 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 771951"];
2571 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 771952"];
2572 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 771953"];
2573 [label="return builder.ToImmutableAndFree(); 771954"];
2574 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 771955"];
2575 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 771956"];
2576 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 771957"];
2577 [label="param GetTopLevelSourceTypeDefinitions(this) 771958"];
2578 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 771959"];
2579 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 771960"];
2580 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 771961"];
2581 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 771962"];
2582 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 771963"];
2583 [label="var ns = namespacesToProcess.Pop(); 771964"];
2584 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 771965"];
2585 [label="param GetTopLevelSourceTypeDefinitions(this) 771966"];
2586 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 771967"];
2587 [label="param GetSourceAssemblyAttributes(this) 771968"];
2588 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 771969"];
2589 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 771970"];
2590 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 771971"];
2591 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 771972"];
2592 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 771973"];
2593 [label="SourceAssembly 771974"];
2594 [label="GetBoundReferenceManager() 771975"];
2595 [label="param GetBoundReferenceManager(this) 771976"];
2596 [label="GetBoundReferenceManager(); 771977"];
2597 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 771978"];
2598 [label="param GetUnaliasedReferencedAssemblies(this) 771979"];
2599 [label="GetBoundReferenceManager() 771980"];
2600 [label="param GetBoundReferenceManager(this) 771981"];
2601 [label="var referenceManager = GetBoundReferenceManager(); 771982"];
2602 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 771983"];
2603 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 771984"];
2604 [label="param GetSourceAssemblySecurityAttributes(this) 771985"];
2605 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 771986"];
2606 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 771987"];
2607 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 771988"];
2608 [label="AssemblySymbol corLibrary = CorLibrary; 771989"];
2609 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 771990"];
2610 [label="yield return Translate(aRef, diagnostics); 771991"];
2611 [label="param Translate(DiagnosticBag diagnostics) 771992"];
2612 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 771993"];
2613 [label="param GetSourceModuleAttributes(this) 771994"];
2614 [label="return SourceModule.GetCustomAttributesToEmit(this); 771995"];
2615 [label="return SourceModule.GetCustomAttributesToEmit(this); 771996"];
2616 [label="return SourceModule.GetCustomAttributesToEmit(this); 771997"];
2617 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 771998"];
2618 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 771999"];
2619 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 772000"];
2620 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 772001"];
2621 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 772002"];
2622 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 772003"];
2623 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 772004"];
2624 [label="return GetNeedsGeneratedAttributesInternal(); 772005"];
2625 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 772006"];
2626 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 772007"];
2627 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 772008"];
2628 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 772009"];
2629 [label="return; 772010"];
2630 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 772011"];
2631 [label="param GetExportedTypes(DiagnosticBag diagnostics) 772012"];
2632 [label="param GetExportedTypes(this) 772013"];
2633 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 772014"];
2634 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 772015"];
2635 [label="CalculateExportedTypes() 772016"];
2636 [label="param CalculateExportedTypes(this) 772017"];
2637 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 772018"];
2638 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 772019"];
2639 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 772020"];
2640 [label="var modules = sourceAssembly.Modules; 772021"];
2641 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 772022"];
2642 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 772023"];
2643 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder); 772024"];
2644 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder); 772025"];
2645 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder); 772026"];
2646 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder) 772027"];
2647 [label="param GetExportedTypes(NamespaceOrTypeSymbol symbol) 772028"];
2648 [label="param GetExportedTypes(int parentIndex) 772029"];
2649 [label="param GetExportedTypes(ArrayBuilder<Cci.ExportedType> builder) 772030"];
2650 [label="int index; 772031"];
2651 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                }\n\n                Debug.Assert(symbol.IsDefinition);\n                index = builder.Count;\n                builder.Add(new Cci.ExportedType((Cci.ITypeReference)symbol.GetCciAdapter(), parentIndex, isForwarder: false));\n            }\n            else\n            {\n                index = -1;\n            } 772032"];
2652 [label="index = -1; 772033"];
2653 [label="foreach (var member in symbol.GetMembers())\n            {\n                var namespaceOrType = member as NamespaceOrTypeSymbol;\n                if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                }\n            } 772034"];
2654 [label="var namespaceOrType = member as NamespaceOrTypeSymbol; 772035"];
2655 [label="if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                } 772036"];
2656 [label="if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                } 772037"];
2657 [label="GetExportedTypes(namespaceOrType, index, builder); 772038"];
2658 [label="GetExportedTypes(namespaceOrType, index, builder); 772039"];
2659 [label="GetExportedTypes(namespaceOrType, index, builder); 772040"];
2660 [label="GetExportedTypes(namespaceOrType, index, builder) 772041"];
2661 [label="param GetExportedTypes(NamespaceOrTypeSymbol symbol) 772042"];
2662 [label="param GetExportedTypes(int parentIndex) 772043"];
2663 [label="param GetExportedTypes(ArrayBuilder<Cci.ExportedType> builder) 772044"];
2664 [label="int index; 772045"];
2665 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                }\n\n                Debug.Assert(symbol.IsDefinition);\n                index = builder.Count;\n                builder.Add(new Cci.ExportedType((Cci.ITypeReference)symbol.GetCciAdapter(), parentIndex, isForwarder: false));\n            }\n            else\n            {\n                index = -1;\n            } 772046"];
2666 [label="if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                } 772047"];
2667 [label="return; 772048"];
2668 [label="GetExportedTypes(namespaceOrType, index, builder); 772049"];
2669 [label="index = -1; 772050"];
2670 [label="param GetExportedTypes(int parentIndex) 772051"];
2671 [label="int index; 772052"];
2672 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                }\n\n                Debug.Assert(symbol.IsDefinition);\n                index = builder.Count;\n                builder.Add(new Cci.ExportedType((Cci.ITypeReference)symbol.GetCciAdapter(), parentIndex, isForwarder: false));\n            }\n            else\n            {\n                index = -1;\n            } 772053"];
2673 [label="if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                } 772054"];
2674 [label="return; 772055"];
2675 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 772056"];
2676 [label="sourceAssembly.DeclaringCompilation.Options 772057"];
2677 [label="get\n            {\n                return _options;\n            } 772058"];
2678 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 772059"];
2679 [label="GetForwardedTypes(sourceAssembly, builder); 772060"];
2680 [label="GetForwardedTypes(sourceAssembly, builder); 772061"];
2681 [label="GetForwardedTypes(sourceAssembly, builder) 772062"];
2682 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 772063"];
2683 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 772064"];
2684 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 772065"];
2685 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 772066"];
2686 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 772067"];
2687 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 772068"];
2688 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 772069"];
2689 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 772070"];
2690 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 772071"];
2691 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 772072"];
2692 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 772073"];
2693 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 772074"];
2694 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 772075"];
2695 [label="sourceAssembly.DeclaringCompilation.Options 772076"];
2696 [label="get\n            {\n                return _options;\n            } 772077"];
2697 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 772078"];
2698 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 772079"];
2699 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 772080"];
2700 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 772081"];
2701 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 772082"];
2702 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 772083"];
2703 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 772084"];
2704 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 772085"];
2705 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 772086"];
2706 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 772087"];
2707 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 772088"];
2708 [label="return seenTopLevelForwardedTypes; 772089"];
2709 [label="GetForwardedTypes(sourceAssembly, builder); 772090"];
2710 [label="return builder.ToImmutableAndFree(); 772091"];
2711 [label="_lazyExportedTypes = CalculateExportedTypes(); 772092"];
2712 [label="_lazyExportedTypes 772093"];
2713 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 772094"];
2714 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 772095"];
2715 [label="return _lazyExportedTypes; 772096"];
2716 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 772097"];
2717 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 772098"];
2718 [label="param AddEmbeddedResourcesFromAddedModules(this) 772099"];
2719 [label="var modules = _sourceAssembly.Modules; 772100"];
2720 [label="int count = modules.Length; 772101"];
2721 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 772102"];
2722 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 772103"];
2723 [label="var file = (Cci.IFileReference)Translate(modules[i], diagnostics); 772104"];
2724 [label="var file = (Cci.IFileReference)Translate(modules[i], diagnostics); 772105"];
2725 [label="Translate(modules[i], diagnostics) 772106"];
2726 [label="param Translate(ModuleSymbol module) 772107"];
2727 [label="param Translate(DiagnosticBag diagnostics) 772108"];
2728 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 772109"];
2729 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 772110"];
2730 [label="if ((object)module == null)\n            {\n                return null;\n            } 772111"];
2731 [label="if ((object)module == null)\n            {\n                return null;\n            } 772112"];
2732 [label="return moduleRef; 772113"];
2733 [label="foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    } 772114"];
2734 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 772115"];
2735 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 772116"];
2736 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 772117"];
2737 [label="this.SyntaxTrees 772118"];
2738 [label="_syntaxAndDeclarations.GetLazyState() 772119"];
2739 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 772120"];
2740 [label="=> null 772121"];
2741 [label="null 772122"];
2742 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 772123"];
2743 [label="param CommonGetBoundReferenceManager(this) 772124"];
2744 [label="GetBoundReferenceManager() 772125"];
2745 [label="param GetBoundReferenceManager(this) 772126"];
2746 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 772127"];
2747 [label="return _referenceManager; 772128"];
2748 [label="return GetBoundReferenceManager(); 772129"];
2749 [label="param SerializePdbEmbeddedCompilationOptions(BlobBuilder builder) 772130"];
2750 [label="param SerializePdbEmbeddedCompilationOptions(this) 772131"];
2751 [label="Debug.Assert(LanguageVersion == LanguageVersion.MapSpecifiedToEffectiveVersion()); 772132"];
2752 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 772133"];
2753 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 772134"];
2754 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()) 772135"];
2755 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 772136"];
2756 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 772137"];
2757 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 772138"];
2758 [label="builder.WriteUTF8(key); 772139"];
2759 [label="builder.WriteUTF8(key); 772140"];
2760 [label="builder.WriteUTF8(key); 772141"];
2761 [label="builder.WriteByte(0); 772142"];
2762 [label="builder.WriteByte(0); 772143"];
2763 [label="builder.WriteUTF8(value); 772144"];
2764 [label="builder.WriteUTF8(value); 772145"];
2765 [label="builder.WriteUTF8(value); 772146"];
2766 [label="builder.WriteByte(0); 772147"];
2767 [label="builder.WriteByte(0); 772148"];
2768 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 772149"];
2769 [label="Options 772150"];
2770 [label="get\n            {\n                return _options;\n            } 772151"];
2771 [label="return _options; 772152"];
2772 [label="if (Options.CheckOverflow)\n            {\n                WriteValue(CompilationOptionNames.Checked, Options.CheckOverflow.ToString());\n            } 772153"];
2773 [label="Options 772154"];
2774 [label="get\n            {\n                return _options;\n            } 772155"];
2775 [label="return _options; 772156"];
2776 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable)\n            {\n                WriteValue(CompilationOptionNames.Nullable, Options.NullableContextOptions.ToString());\n            } 772157"];
2777 [label="Options 772158"];
2778 [label="get\n            {\n                return _options;\n            } 772159"];
2779 [label="return _options; 772160"];
2780 [label="if (Options.AllowUnsafe)\n            {\n                WriteValue(CompilationOptionNames.Unsafe, Options.AllowUnsafe.ToString());\n            } 772161"];
2781 [label="GetPreprocessorSymbols() 772162"];
2782 [label="param GetPreprocessorSymbols(this) 772163"];
2783 [label="SyntaxTrees 772164"];
2784 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 772165"];
2785 [label="_syntaxAndDeclarations.GetLazyState() 772166"];
2786 [label="param GetLazyState(this) 772167"];
2787 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 772168"];
2788 [label="CSharpSyntaxTree? firstTree = (CSharpSyntaxTree?)SyntaxTrees.FirstOrDefault(); 772169"];
2789 [label="if (firstTree is null)\n            {\n                return ImmutableArray<string>.Empty;\n            } 772170"];
2790 [label="return firstTree.Options.PreprocessorSymbolNames.ToImmutableArray(); 772171"];
2791 [label="var preprocessorSymbols = GetPreprocessorSymbols(); 772172"];
2792 [label="if (preprocessorSymbols.Any())\n            {\n                WriteValue(CompilationOptionNames.Define, string.Join(',', preprocessorSymbols));\n            } 772173"];
2793 [label="=> _sourceAssembly 772174"];
2794 [label="_sourceAssembly 772175"];
2795 [label="=> _metadataName 772176"];
2796 [label="_metadataName 772177"];
2797 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 772178"];
2798 [label="param GetHashValue(AssemblyHashAlgorithm algorithmId) 772179"];
2799 [label="param GetHashValue(this) 772180"];
2800 [label="return _underlyingModule.GetHash(algorithmId); 772181"];
2801 [label="return _underlyingModule.GetHash(algorithmId); 772182"];
2802 [label="get\n            {\n                return true;\n            } 772183"];
2803 [label="return true; 772184"];
2804 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 772185"];
2805 [label="get { return _metadataName; } 772186"];
2806 [label="return _metadataName; 772187"];
2807 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 772188"];
2808 [label="return _referenceManager; 772189"];
2809 [label="GetBoundReferenceManager(); 772190"];
2810 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 772191"];
2811 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 772192"];
2812 [label="diagnostics.AddRange(result.Diagnostics); 772193"];
2813 [label="diagnostics.AddRange(result.Diagnostics); 772194"];
2814 [label="assembly = executableStream.ToImmutable(); 772195"];
2815 [label="assembly = executableStream.ToImmutable(); 772196"];
2816 [label="if (result.Success)\n            {\n                return new EmitOutput(assembly, pdb);\n            } 772197"];
2817 [label="return new EmitOutput(assembly, pdb); 772198"];
2818 [label="return new EmitOutput(assembly, pdb); 772199"];
2819 [label="return new EmitOutput(assembly, pdb); 772200"];
2820 [label="new EmitOutput(assembly, pdb) 772201"];
2821 [label="param EmitOutput(ImmutableArray<byte> assembly) 772202"];
2822 [label="param EmitOutput(ImmutableArray<byte> pdb) 772203"];
2823 [label="param EmitOutput(this) 772204"];
2824 [label="Assembly 772205"];
2825 [label="if (pdb.IsDefault)\n            {\n                // We didn't emit a discrete PDB file, so we'll look for an embedded PDB instead.\n                using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                }\n            } 772206"];
2826 [label="using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                } 772207"];
2827 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 772208"];
2828 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 772209"];
2829 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 772210"];
2830 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 772211"];
2831 [label="using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        } 772212"];
2832 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 772213"];
2833 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 772214"];
2834 [label="pdb = readMetadata(mdReader); 772215"];
2835 [label="readMetadata(mdReader) 772216"];
2836 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 772217"];
2837 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 772218"];
2838 [label="var length = mdReader.MetadataLength; 772219"];
2839 [label="var bytes = new byte[length]; 772220"];
2840 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 772221"];
2841 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 772222"];
2842 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 772223"];
2843 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 772224"];
2844 [label="return ImmutableArray.Create(bytes); 772225"];
2845 [label="return ImmutableArray.Create(bytes); 772226"];
2846 [label="Pdb 772227"];
2847 [label="get { return this.Assembly.GetPublicSymbol(); } 772228"];
2848 [label="this.Assembly 772229"];
2849 [label="get\n            {\n                return SourceAssembly;\n            } 772230"];
2850 [label="SourceAssembly 772231"];
2851 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 772232"];
2852 [label="GetBoundReferenceManager() 772233"];
2853 [label="param GetBoundReferenceManager(this) 772234"];
2854 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 772235"];
2855 [label="return _referenceManager; 772236"];
2856 [label="GetBoundReferenceManager(); 772237"];
2857 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 772238"];
2858 [label="return this.Assembly.GetPublicSymbol(); 772239"];
2859 [label="get { return _options; } 772240"];
2860 [label="_diagnostics = testEnvironment.GetDiagnostics(); 772241"];
2861 [label="_diagnostics 772242"];
2862 [label="EmittedAssemblyData = testEnvironment.GetMainImage(); 772243"];
2863 [label="EmittedAssemblyData 772244"];
2864 [label="EmittedAssemblyPdb = testEnvironment.GetMainPdb(); 772245"];
2865 [label="EmittedAssemblyPdb 772246"];
2866 [label="_testData = ((IInternalRuntimeEnvironment)testEnvironment).GetCompilationTestData(); 772247"];
2867 [label="_testData 772248"];
2868 [label="return _compilation.Assembly.Identity.GetDisplayName(); 772249"];
2869 [label="_compilation.Assembly 772250"];
2870 [label="get { return this.Assembly.GetPublicSymbol(); } 772251"];
2871 [label="this.Assembly 772252"];
2872 [label="SourceAssembly 772253"];
2873 [label="GetBoundReferenceManager() 772254"];
2874 [label="param GetBoundReferenceManager(this) 772255"];
2875 [label="GetBoundReferenceManager(); 772256"];
2876 [label="return _compilation.Assembly.Identity.GetDisplayName(); 772257"];
2877 [label="_allModuleData = testEnvironment.GetAllModuleData(); 772258"];
2878 [label="_allModuleData 772259"];
2879 [label="testEnvironment.Verify(peVerify); 772260"];
2880 [label="testEnvironment.Verify(peVerify); 772261"];
2881 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 772262"];
2882 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 772263"];
2883 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 772264"];
2884 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 772265"];
2885 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 772266"];
2886 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 772267"];
2887 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 772268"];
2888 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 772269"];
2889 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 772270"];
2890 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 772271"];
2891 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 772272"];
2892 [label="return verifier; 772273"];
2893 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 772274"];
2894 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 772275"];
2895 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 772276"];
2896 [label="result = verifier; 772277"];
2897 [label="CustomAssert.NotNull(result); 772278"];
2898 [label="return result; 772279"];
2899 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 772280"];
2900 [label="CompileAndVerify(comp, verify: Verification.Fails); 772281"];
2901 [label="comp.Assembly 772282"];
2902 [label="get\n            {\n                return SourceAssembly;\n            } 772283"];
2903 [label="SourceAssembly 772284"];
2904 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 772285"];
2905 [label="GetBoundReferenceManager() 772286"];
2906 [label="param GetBoundReferenceManager(this) 772287"];
2907 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 772288"];
2908 [label="return _referenceManager; 772289"];
2909 [label="GetBoundReferenceManager(); 772290"];
2910 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 772291"];
2911 [label="CustomAssert.NotSame(comp.Assembly.CorLibrary, comp.Assembly); 772292"];
2912 [label="comp.Assembly 772293"];
2913 [label="get\n            {\n                return SourceAssembly;\n            } 772294"];
2914 [label="SourceAssembly 772295"];
2915 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 772296"];
2916 [label="GetBoundReferenceManager() 772297"];
2917 [label="param GetBoundReferenceManager(this) 772298"];
2918 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 772299"];
2919 [label="return _referenceManager; 772300"];
2920 [label="GetBoundReferenceManager(); 772301"];
2921 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 772302"];
2922 [label="CustomAssert.NotSame(comp.Assembly.CorLibrary, comp.Assembly); 772303"];
2923 [label="comp.GetSpecialType(SpecialType.System_Int32); 772304"];
2924 [label="comp.GetSpecialType(SpecialType.System_Int32) 772305"];
2925 [label="param GetSpecialType(SpecialType specialType) 772306"];
2926 [label="param GetSpecialType(this) 772307"];
2927 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 772308"];
2928 [label="NamedTypeSymbol result; 772309"];
2929 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 772310"];
2930 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 772311"];
2931 [label="Assembly 772312"];
2932 [label="GetBoundReferenceManager() 772313"];
2933 [label="GetBoundReferenceManager(); 772314"];
2934 [label="result = Assembly.GetSpecialType(specialType); 772315"];
2935 [label="result = Assembly.GetSpecialType(specialType); 772316"];
2936 [label="Debug.Assert(result.SpecialType == specialType); 772317"];
2937 [label="return result; 772318"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 0;
12 -> 11;
12 -> 1;
13 -> 1;
14 -> 11;
14 -> 13;
15 -> 14;
15 -> 13;
16 -> 13;
17 -> 15;
17 -> 16;
18 -> 16;
19 -> 17;
19 -> 18;
19 -> 16;
20 -> 16;
20 -> 1;
21 -> 0;
21 -> 1;
22 -> 1;
23 -> 11;
23 -> 22;
24 -> 20;
24 -> 22;
25 -> 21;
25 -> 22;
26 -> 11;
26 -> 22;
27 -> 11;
27 -> 22;
28 -> 11;
28 -> 22;
29 -> 11;
29 -> 22;
30 -> 23;
30 -> 22;
31 -> 24;
31 -> 22;
32 -> 25;
32 -> 22;
33 -> 26;
33 -> 22;
34 -> 27;
34 -> 22;
35 -> 28;
35 -> 22;
36 -> 29;
36 -> 22;
37 -> 22;
38 -> 37;
38 -> 22;
39 -> 22;
40 -> 30;
40 -> 39;
41 -> 31;
41 -> 39;
42 -> 32;
42 -> 39;
43 -> 33;
43 -> 39;
44 -> 34;
44 -> 39;
45 -> 35;
45 -> 39;
46 -> 36;
46 -> 39;
47 -> 38;
47 -> 39;
48 -> 43;
48 -> 39;
49 -> 45;
49 -> 39;
50 -> 39;
51 -> 48;
51 -> 50;
52 -> 49;
52 -> 50;
53 -> 40;
53 -> 50;
54 -> 53;
54 -> 11;
54 -> 50;
55 -> 54;
56 -> 52;
56 -> 54;
57 -> 51;
57 -> 54;
58 -> 54;
59 -> 55;
59 -> 58;
60 -> 56;
60 -> 58;
61 -> 57;
61 -> 58;
62 -> 55;
62 -> 58;
63 -> 58;
64 -> 61;
64 -> 63;
64 -> 58;
65 -> 0;
65 -> 64;
66 -> 59;
66 -> 58;
67 -> 0;
67 -> 58;
68 -> 67;
68 -> 62;
68 -> 58;
69 -> 58;
70 -> 66;
70 -> 68;
70 -> 69;
70 -> 0;
70 -> 58;
71 -> 70;
71 -> 58;
72 -> 65;
72 -> 58;
73 -> 60;
73 -> 58;
74 -> 58;
75 -> 71;
75 -> 72;
75 -> 73;
75 -> 74;
75 -> 70;
75 -> 0;
75 -> 58;
76 -> 58;
77 -> 75;
77 -> 76;
78 -> 76;
79 -> 76;
80 -> 77;
80 -> 75;
80 -> 79;
80 -> 76;
81 -> 78;
81 -> 76;
82 -> 76;
83 -> 80;
83 -> 75;
83 -> 79;
83 -> 81;
83 -> 82;
83 -> 78;
83 -> 76;
84 -> 76;
85 -> 84;
85 -> 78;
85 -> 76;
86 -> 78;
86 -> 76;
87 -> 76;
88 -> 86;
88 -> 87;
88 -> 78;
88 -> 85;
88 -> 76;
89 -> 77;
89 -> 76;
90 -> 89;
90 -> 55;
90 -> 54;
91 -> 55;
91 -> 39;
92 -> 39;
93 -> 42;
93 -> 92;
93 -> 39;
94 -> 0;
94 -> 39;
95 -> 47;
95 -> 39;
96 -> 44;
96 -> 91;
96 -> 41;
96 -> 42;
96 -> 39;
97 -> 96;
97 -> 39;
98 -> 39;
99 -> 97;
99 -> 98;
100 -> 0;
100 -> 98;
101 -> 100;
102 -> 39;
103 -> 96;
103 -> 55;
103 -> 90;
103 -> 75;
103 -> 19;
103 -> 0;
103 -> 39;
104 -> 39;
105 -> 104;
106 -> 103;
106 -> 105;
106 -> 39;
107 -> 0;
109 -> 107;
109 -> 108;
110 -> 109;
111 -> 0;
113 -> 111;
113 -> 112;
115 -> 113;
115 -> 114;
116 -> 115;
117 -> 103;
117 -> 104;
118 -> 103;
118 -> 104;
119 -> 103;
119 -> 104;
120 -> 103;
120 -> 104;
121 -> 117;
121 -> 104;
122 -> 120;
122 -> 104;
123 -> 118;
123 -> 104;
124 -> 119;
124 -> 104;
125 -> 104;
126 -> 104;
127 -> 121;
127 -> 126;
128 -> 122;
128 -> 126;
129 -> 123;
129 -> 126;
130 -> 124;
130 -> 126;
131 -> 125;
131 -> 126;
132 -> 125;
132 -> 126;
133 -> 125;
133 -> 126;
134 -> 125;
134 -> 126;
135 -> 126;
136 -> 128;
136 -> 135;
136 -> 126;
137 -> 134;
137 -> 126;
138 -> 130;
138 -> 126;
139 -> 138;
139 -> 106;
139 -> 126;
140 -> 127;
140 -> 126;
141 -> 128;
141 -> 126;
142 -> 139;
142 -> 126;
143 -> 131;
143 -> 126;
144 -> 132;
144 -> 126;
145 -> 133;
145 -> 126;
146 -> 134;
146 -> 126;
147 -> 126;
148 -> 0;
148 -> 126;
149 -> 128;
149 -> 139;
149 -> 126;
150 -> 126;
151 -> 148;
151 -> 150;
152 -> 149;
152 -> 150;
153 -> 149;
153 -> 150;
154 -> 148;
154 -> 150;
155 -> 146;
155 -> 150;
156 -> 147;
156 -> 150;
157 -> 147;
157 -> 150;
158 -> 151;
158 -> 150;
159 -> 152;
159 -> 150;
160 -> 153;
160 -> 150;
161 -> 154;
161 -> 150;
162 -> 155;
162 -> 150;
163 -> 150;
164 -> 163;
164 -> 158;
164 -> 159;
164 -> 160;
164 -> 161;
164 -> 162;
164 -> 0;
164 -> 139;
164 -> 150;
165 -> 163;
165 -> 150;
166 -> 156;
166 -> 163;
166 -> 150;
167 -> 126;
168 -> 140;
168 -> 167;
169 -> 141;
169 -> 167;
170 -> 142;
170 -> 167;
171 -> 143;
171 -> 167;
172 -> 144;
172 -> 167;
173 -> 145;
173 -> 167;
174 -> 146;
174 -> 167;
175 -> 147;
175 -> 167;
176 -> 147;
176 -> 167;
177 -> 147;
177 -> 167;
178 -> 147;
178 -> 167;
179 -> 147;
179 -> 167;
180 -> 147;
180 -> 167;
181 -> 168;
181 -> 167;
182 -> 169;
182 -> 167;
183 -> 170;
183 -> 167;
184 -> 171;
184 -> 167;
185 -> 172;
185 -> 167;
186 -> 173;
186 -> 167;
187 -> 174;
187 -> 167;
188 -> 175;
188 -> 167;
189 -> 176;
189 -> 167;
190 -> 177;
190 -> 167;
191 -> 177;
191 -> 164;
191 -> 167;
192 -> 191;
192 -> 164;
192 -> 165;
192 -> 166;
192 -> 167;
193 -> 178;
193 -> 167;
194 -> 179;
194 -> 167;
195 -> 167;
196 -> 181;
196 -> 195;
197 -> 182;
197 -> 195;
198 -> 183;
198 -> 195;
199 -> 184;
199 -> 195;
200 -> 185;
200 -> 195;
201 -> 186;
201 -> 195;
202 -> 187;
202 -> 195;
203 -> 188;
203 -> 195;
204 -> 189;
204 -> 195;
205 -> 190;
205 -> 195;
206 -> 192;
206 -> 195;
207 -> 193;
207 -> 195;
208 -> 194;
208 -> 195;
209 -> 180;
209 -> 195;
210 -> 196;
210 -> 195;
211 -> 198;
211 -> 195;
212 -> 206;
212 -> 195;
213 -> 202;
213 -> 195;
214 -> 207;
214 -> 195;
215 -> 208;
215 -> 195;
216 -> 195;
217 -> 216;
217 -> 210;
217 -> 211;
217 -> 212;
217 -> 213;
217 -> 214;
217 -> 215;
217 -> 139;
217 -> 192;
217 -> 195;
218 -> 216;
218 -> 195;
219 -> 216;
219 -> 195;
220 -> 216;
220 -> 195;
221 -> 216;
221 -> 195;
222 -> 216;
222 -> 195;
223 -> 216;
223 -> 195;
224 -> 216;
224 -> 195;
225 -> 216;
225 -> 195;
226 -> 216;
226 -> 195;
227 -> 216;
227 -> 195;
228 -> 216;
228 -> 195;
229 -> 216;
229 -> 195;
230 -> 216;
230 -> 195;
231 -> 216;
231 -> 195;
232 -> 216;
232 -> 195;
233 -> 216;
233 -> 195;
234 -> 216;
234 -> 195;
235 -> 216;
235 -> 195;
236 -> 216;
236 -> 195;
237 -> 216;
237 -> 195;
238 -> 216;
238 -> 195;
239 -> 216;
239 -> 195;
240 -> 216;
240 -> 195;
241 -> 216;
241 -> 195;
242 -> 216;
242 -> 195;
243 -> 216;
243 -> 195;
244 -> 195;
245 -> 244;
245 -> 216;
245 -> 195;
246 -> 216;
246 -> 195;
247 -> 246;
247 -> 217;
247 -> 218;
247 -> 219;
247 -> 220;
247 -> 221;
247 -> 222;
247 -> 223;
247 -> 224;
247 -> 225;
247 -> 226;
247 -> 227;
247 -> 228;
247 -> 229;
247 -> 230;
247 -> 231;
247 -> 232;
247 -> 233;
247 -> 234;
247 -> 235;
247 -> 236;
247 -> 237;
247 -> 238;
247 -> 239;
247 -> 240;
247 -> 241;
247 -> 242;
247 -> 243;
247 -> 245;
247 -> 244;
247 -> 195;
248 -> 247;
248 -> 216;
248 -> 195;
249 -> 197;
249 -> 216;
249 -> 195;
250 -> 216;
250 -> 195;
251 -> 195;
252 -> 195;
253 -> 250;
253 -> 252;
254 -> 251;
254 -> 252;
255 -> 254;
255 -> 252;
256 -> 254;
256 -> 252;
257 -> 254;
257 -> 252;
258 -> 253;
258 -> 254;
258 -> 252;
259 -> 251;
259 -> 216;
259 -> 195;
260 -> 216;
260 -> 247;
260 -> 195;
261 -> 260;
261 -> 247;
261 -> 248;
261 -> 249;
261 -> 259;
261 -> 258;
261 -> 256;
261 -> 257;
261 -> 195;
262 -> 261;
262 -> 216;
262 -> 195;
263 -> 216;
263 -> 261;
263 -> 195;
264 -> 263;
264 -> 261;
264 -> 262;
264 -> 195;
265 -> 264;
265 -> 216;
265 -> 195;
266 -> 216;
266 -> 264;
266 -> 195;
267 -> 266;
267 -> 264;
267 -> 265;
267 -> 195;
268 -> 267;
268 -> 216;
268 -> 195;
269 -> 216;
269 -> 267;
269 -> 195;
270 -> 269;
270 -> 267;
270 -> 268;
270 -> 195;
271 -> 270;
271 -> 216;
271 -> 195;
272 -> 216;
272 -> 195;
273 -> 272;
273 -> 270;
273 -> 271;
273 -> 195;
274 -> 273;
274 -> 216;
274 -> 195;
275 -> 205;
275 -> 273;
275 -> 195;
276 -> 195;
277 -> 275;
277 -> 276;
278 -> 276;
279 -> 277;
279 -> 276;
280 -> 279;
280 -> 273;
280 -> 274;
280 -> 276;
281 -> 0;
281 -> 276;
282 -> 281;
282 -> 278;
282 -> 276;
283 -> 282;
283 -> 195;
284 -> 283;
284 -> 216;
284 -> 195;
285 -> 202;
285 -> 195;
286 -> 285;
287 -> 199;
287 -> 286;
287 -> 285;
288 -> 200;
288 -> 286;
288 -> 285;
289 -> 287;
289 -> 288;
289 -> 285;
290 -> 201;
290 -> 286;
290 -> 285;
291 -> 289;
291 -> 290;
291 -> 285;
292 -> 204;
292 -> 195;
293 -> 216;
293 -> 273;
293 -> 274;
293 -> 284;
293 -> 292;
294 -> 292;
295 -> 216;
295 -> 294;
296 -> 295;
296 -> 293;
296 -> 294;
297 -> 203;
297 -> 292;
298 -> 293;
298 -> 296;
298 -> 297;
298 -> 292;
299 -> 298;
299 -> 216;
299 -> 292;
300 -> 205;
300 -> 216;
300 -> 195;
301 -> 216;
301 -> 298;
301 -> 195;
302 -> 195;
303 -> 216;
303 -> 298;
303 -> 302;
303 -> 195;
304 -> 126;
305 -> 129;
305 -> 304;
305 -> 126;
306 -> 129;
306 -> 305;
307 -> 305;
308 -> 306;
308 -> 307;
309 -> 147;
309 -> 307;
310 -> 307;
311 -> 308;
311 -> 310;
311 -> 307;
312 -> 308;
312 -> 307;
313 -> 312;
313 -> 298;
313 -> 299;
313 -> 300;
313 -> 307;
314 -> 307;
315 -> 309;
315 -> 313;
315 -> 307;
316 -> 314;
316 -> 307;
317 -> 315;
317 -> 313;
317 -> 307;
318 -> 316;
318 -> 317;
318 -> 314;
318 -> 313;
318 -> 307;
319 -> 307;
320 -> 307;
321 -> 308;
321 -> 307;
322 -> 321;
322 -> 318;
322 -> 307;
323 -> 322;
324 -> 322;
325 -> 322;
326 -> 309;
326 -> 325;
326 -> 322;
327 -> 322;
328 -> 314;
328 -> 327;
328 -> 325;
328 -> 322;
329 -> 319;
329 -> 322;
329 -> 328;
330 -> 320;
330 -> 322;
331 -> 314;
331 -> 328;
331 -> 307;
332 -> 309;
332 -> 331;
332 -> 307;
333 -> 308;
333 -> 307;
334 -> 307;
335 -> 333;
335 -> 334;
336 -> 315;
336 -> 334;
337 -> 336;
337 -> 331;
337 -> 334;
338 -> 336;
338 -> 331;
338 -> 334;
339 -> 336;
339 -> 331;
339 -> 334;
340 -> 336;
340 -> 331;
340 -> 334;
341 -> 336;
341 -> 331;
341 -> 334;
342 -> 335;
342 -> 334;
343 -> 336;
343 -> 331;
343 -> 342;
343 -> 334;
344 -> 334;
345 -> 341;
345 -> 344;
345 -> 334;
346 -> 343;
346 -> 345;
347 -> 345;
348 -> 346;
348 -> 347;
349 -> 336;
349 -> 347;
350 -> 348;
350 -> 347;
351 -> 349;
351 -> 343;
351 -> 347;
352 -> 347;
353 -> 347;
354 -> 350;
354 -> 353;
355 -> 351;
355 -> 353;
356 -> 351;
356 -> 353;
357 -> 351;
357 -> 353;
358 -> 351;
358 -> 353;
359 -> 352;
359 -> 353;
360 -> 352;
360 -> 353;
361 -> 353;
361 -> 354;
361 -> 355;
361 -> 356;
361 -> 357;
361 -> 358;
361 -> 343;
362 -> 352;
362 -> 345;
363 -> 362;
363 -> 307;
364 -> 309;
364 -> 361;
364 -> 307;
365 -> 329;
365 -> 307;
366 -> 363;
366 -> 307;
367 -> 307;
368 -> 364;
368 -> 367;
369 -> 365;
369 -> 367;
370 -> 366;
370 -> 367;
371 -> 309;
371 -> 367;
372 -> 371;
372 -> 361;
372 -> 367;
373 -> 367;
374 -> 371;
374 -> 373;
375 -> 374;
375 -> 361;
375 -> 373;
376 -> 375;
376 -> 373;
377 -> 376;
377 -> 367;
378 -> 371;
378 -> 361;
378 -> 353;
378 -> 359;
378 -> 367;
379 -> 367;
380 -> 378;
380 -> 379;
381 -> 380;
381 -> 378;
381 -> 379;
382 -> 367;
383 -> 381;
383 -> 382;
384 -> 368;
384 -> 367;
385 -> 369;
385 -> 367;
386 -> 370;
386 -> 367;
387 -> 367;
388 -> 367;
389 -> 372;
389 -> 388;
390 -> 372;
390 -> 388;
391 -> 372;
391 -> 388;
392 -> 377;
392 -> 388;
393 -> 381;
393 -> 388;
394 -> 383;
394 -> 388;
395 -> 383;
395 -> 388;
396 -> 384;
396 -> 388;
397 -> 385;
397 -> 388;
398 -> 386;
398 -> 388;
399 -> 383;
399 -> 388;
400 -> 387;
400 -> 388;
401 -> 387;
401 -> 388;
402 -> 392;
402 -> 388;
403 -> 393;
403 -> 388;
404 -> 394;
404 -> 388;
405 -> 398;
405 -> 383;
405 -> 388;
406 -> 400;
406 -> 388;
407 -> 388;
408 -> 402;
408 -> 407;
409 -> 403;
409 -> 407;
410 -> 404;
410 -> 407;
411 -> 406;
411 -> 407;
412 -> 401;
412 -> 407;
413 -> 411;
413 -> 407;
414 -> 407;
415 -> 414;
415 -> 407;
416 -> 414;
416 -> 407;
417 -> 414;
417 -> 407;
418 -> 414;
418 -> 407;
419 -> 414;
419 -> 407;
420 -> 414;
420 -> 407;
421 -> 414;
421 -> 407;
422 -> 414;
422 -> 407;
423 -> 414;
423 -> 407;
424 -> 414;
424 -> 407;
425 -> 414;
425 -> 407;
426 -> 414;
426 -> 407;
427 -> 414;
427 -> 407;
428 -> 414;
428 -> 407;
429 -> 414;
429 -> 407;
430 -> 414;
430 -> 407;
431 -> 414;
431 -> 407;
432 -> 414;
432 -> 407;
433 -> 414;
433 -> 407;
434 -> 414;
434 -> 407;
435 -> 414;
435 -> 407;
436 -> 414;
436 -> 407;
437 -> 414;
437 -> 407;
438 -> 414;
438 -> 407;
439 -> 414;
439 -> 407;
440 -> 414;
440 -> 407;
441 -> 407;
442 -> 441;
442 -> 414;
442 -> 407;
443 -> 414;
443 -> 407;
444 -> 414;
444 -> 407;
445 -> 407;
446 -> 407;
447 -> 444;
447 -> 446;
448 -> 445;
448 -> 446;
449 -> 448;
449 -> 446;
450 -> 448;
450 -> 446;
451 -> 448;
451 -> 446;
452 -> 447;
452 -> 448;
452 -> 446;
453 -> 445;
453 -> 414;
453 -> 407;
454 -> 414;
454 -> 407;
455 -> 407;
456 -> 405;
456 -> 455;
457 -> 455;
458 -> 456;
458 -> 455;
459 -> 458;
459 -> 405;
460 -> 458;
461 -> 459;
461 -> 460;
462 -> 395;
462 -> 407;
463 -> 462;
464 -> 408;
464 -> 463;
464 -> 462;
465 -> 409;
465 -> 463;
465 -> 462;
466 -> 464;
466 -> 465;
466 -> 462;
467 -> 410;
467 -> 463;
467 -> 462;
468 -> 466;
468 -> 467;
468 -> 462;
469 -> 396;
469 -> 397;
470 -> 414;
470 -> 397;
471 -> 396;
471 -> 470;
471 -> 405;
471 -> 461;
471 -> 397;
472 -> 396;
472 -> 414;
472 -> 397;
473 -> 414;
473 -> 471;
473 -> 407;
474 -> 407;
475 -> 414;
475 -> 471;
475 -> 474;
475 -> 407;
476 -> 387;
476 -> 307;
477 -> 476;
477 -> 305;
478 -> 477;
478 -> 471;
478 -> 126;
479 -> 477;
479 -> 126;
480 -> 103;
480 -> 479;
480 -> 471;
480 -> 472;
480 -> 398;
480 -> 39;
481 -> 480;
481 -> 39;
482 -> 39;
483 -> 481;
483 -> 482;
484 -> 482;
485 -> 483;
485 -> 484;
486 -> 484;
487 -> 485;
487 -> 480;
487 -> 486;
488 -> 486;
489 -> 487;
489 -> 480;
489 -> 488;
489 -> 486;
490 -> 487;
490 -> 480;
490 -> 489;
491 -> 489;
492 -> 490;
492 -> 491;
493 -> 490;
493 -> 491;
494 -> 490;
494 -> 491;
495 -> 490;
495 -> 491;
496 -> 490;
496 -> 491;
497 -> 491;
498 -> 491;
499 -> 491;
500 -> 491;
501 -> 491;
502 -> 0;
502 -> 491;
503 -> 492;
503 -> 491;
504 -> 497;
504 -> 503;
505 -> 503;
506 -> 493;
506 -> 503;
507 -> 494;
507 -> 503;
508 -> 495;
508 -> 503;
509 -> 496;
509 -> 503;
510 -> 498;
510 -> 503;
511 -> 499;
511 -> 503;
512 -> 500;
512 -> 503;
513 -> 501;
513 -> 503;
514 -> 502;
514 -> 503;
515 -> 503;
516 -> 504;
516 -> 515;
517 -> 505;
517 -> 515;
518 -> 506;
518 -> 515;
519 -> 507;
519 -> 515;
520 -> 508;
520 -> 515;
521 -> 509;
521 -> 515;
522 -> 510;
522 -> 515;
523 -> 511;
523 -> 515;
524 -> 512;
524 -> 515;
525 -> 513;
525 -> 515;
526 -> 514;
526 -> 515;
527 -> 517;
527 -> 480;
527 -> 515;
528 -> 527;
528 -> 0;
528 -> 515;
529 -> 517;
529 -> 515;
530 -> 518;
530 -> 515;
531 -> 521;
531 -> 515;
532 -> 525;
532 -> 515;
533 -> 526;
533 -> 515;
534 -> 515;
535 -> 529;
535 -> 534;
536 -> 530;
536 -> 534;
537 -> 531;
537 -> 534;
538 -> 532;
538 -> 534;
539 -> 533;
539 -> 534;
540 -> 535;
540 -> 536;
540 -> 537;
540 -> 534;
541 -> 535;
541 -> 534;
542 -> 540;
542 -> 534;
543 -> 538;
543 -> 541;
543 -> 542;
543 -> 501;
543 -> 540;
543 -> 534;
544 -> 540;
544 -> 534;
545 -> 539;
545 -> 544;
545 -> 0;
545 -> 543;
545 -> 534;
546 -> 515;
547 -> 517;
547 -> 515;
548 -> 516;
548 -> 547;
548 -> 497;
548 -> 545;
548 -> 515;
549 -> 517;
549 -> 515;
550 -> 522;
550 -> 498;
550 -> 515;
551 -> 522;
551 -> 549;
551 -> 550;
551 -> 498;
551 -> 548;
551 -> 515;
552 -> 497;
552 -> 551;
552 -> 491;
553 -> 498;
553 -> 551;
553 -> 491;
554 -> 499;
554 -> 491;
555 -> 500;
555 -> 491;
556 -> 545;
556 -> 491;
557 -> 491;
558 -> 491;
559 -> 552;
559 -> 558;
560 -> 553;
560 -> 558;
561 -> 554;
561 -> 558;
562 -> 555;
562 -> 558;
563 -> 553;
563 -> 558;
564 -> 556;
564 -> 558;
565 -> 557;
565 -> 558;
566 -> 565;
566 -> 558;
567 -> 565;
567 -> 558;
568 -> 565;
568 -> 558;
569 -> 565;
569 -> 558;
570 -> 565;
570 -> 558;
571 -> 559;
571 -> 558;
572 -> 559;
572 -> 552;
572 -> 558;
573 -> 559;
573 -> 558;
574 -> 563;
574 -> 571;
574 -> 558;
575 -> 0;
575 -> 558;
576 -> 559;
576 -> 565;
576 -> 558;
577 -> 560;
577 -> 565;
577 -> 558;
578 -> 561;
578 -> 565;
578 -> 558;
579 -> 562;
579 -> 565;
579 -> 558;
580 -> 563;
580 -> 565;
580 -> 558;
581 -> 564;
581 -> 565;
581 -> 558;
582 -> 557;
582 -> 489;
583 -> 489;
584 -> 490;
584 -> 582;
584 -> 583;
584 -> 577;
584 -> 578;
584 -> 579;
584 -> 580;
584 -> 581;
584 -> 576;
584 -> 574;
584 -> 552;
584 -> 554;
584 -> 555;
584 -> 489;
585 -> 487;
585 -> 584;
585 -> 486;
586 -> 585;
586 -> 484;
587 -> 586;
587 -> 482;
588 -> 587;
588 -> 584;
588 -> 482;
589 -> 482;
590 -> 587;
590 -> 589;
590 -> 584;
590 -> 482;
591 -> 0;
591 -> 482;
592 -> 590;
592 -> 591;
592 -> 482;
593 -> 46;
593 -> 592;
593 -> 39;
594 -> 480;
594 -> 39;
595 -> 594;
595 -> 1;
596 -> 0;
596 -> 1;
597 -> 1;
598 -> 1;
599 -> 595;
599 -> 598;
600 -> 597;
600 -> 598;
601 -> 597;
601 -> 598;
602 -> 597;
602 -> 598;
603 -> 597;
603 -> 598;
604 -> 597;
604 -> 598;
605 -> 597;
605 -> 598;
606 -> 597;
606 -> 598;
607 -> 597;
607 -> 598;
608 -> 597;
608 -> 598;
609 -> 597;
609 -> 598;
610 -> 596;
610 -> 598;
611 -> 10;
611 -> 598;
612 -> 599;
612 -> 598;
613 -> 600;
613 -> 598;
614 -> 601;
614 -> 598;
615 -> 602;
615 -> 598;
616 -> 598;
617 -> 615;
617 -> 616;
618 -> 611;
618 -> 616;
619 -> 616;
620 -> 617;
620 -> 619;
620 -> 616;
621 -> 620;
622 -> 603;
622 -> 598;
623 -> 604;
623 -> 598;
624 -> 598;
625 -> 623;
625 -> 624;
626 -> 611;
626 -> 624;
627 -> 624;
628 -> 625;
628 -> 627;
628 -> 624;
629 -> 628;
630 -> 605;
630 -> 598;
631 -> 606;
631 -> 598;
632 -> 607;
632 -> 598;
633 -> 608;
633 -> 598;
634 -> 609;
634 -> 598;
635 -> 610;
635 -> 598;
636 -> 598;
637 -> 612;
637 -> 636;
638 -> 613;
638 -> 636;
639 -> 614;
639 -> 636;
640 -> 621;
640 -> 636;
641 -> 622;
641 -> 636;
642 -> 629;
642 -> 636;
643 -> 630;
643 -> 636;
644 -> 631;
644 -> 636;
645 -> 632;
645 -> 636;
646 -> 633;
646 -> 636;
647 -> 634;
647 -> 636;
648 -> 635;
648 -> 636;
649 -> 611;
649 -> 636;
650 -> 637;
650 -> 636;
651 -> 636;
652 -> 644;
652 -> 651;
652 -> 636;
653 -> 636;
654 -> 640;
654 -> 653;
654 -> 636;
655 -> 636;
656 -> 637;
656 -> 636;
657 -> 639;
657 -> 636;
658 -> 638;
658 -> 636;
659 -> 643;
659 -> 636;
660 -> 644;
660 -> 636;
661 -> 645;
661 -> 636;
662 -> 636;
663 -> 662;
663 -> 646;
663 -> 636;
664 -> 641;
664 -> 636;
665 -> 642;
665 -> 636;
666 -> 647;
666 -> 636;
667 -> 648;
667 -> 636;
668 -> 636;
669 -> 656;
669 -> 668;
670 -> 657;
670 -> 668;
671 -> 658;
671 -> 668;
672 -> 659;
672 -> 668;
673 -> 660;
673 -> 668;
674 -> 661;
674 -> 668;
675 -> 663;
675 -> 668;
676 -> 664;
676 -> 668;
677 -> 665;
677 -> 668;
678 -> 666;
678 -> 668;
679 -> 667;
679 -> 668;
680 -> 649;
680 -> 668;
681 -> 669;
681 -> 668;
682 -> 680;
682 -> 9;
682 -> 668;
683 -> 670;
683 -> 668;
684 -> 668;
685 -> 668;
686 -> 681;
686 -> 685;
687 -> 682;
687 -> 685;
688 -> 683;
688 -> 685;
689 -> 684;
689 -> 685;
690 -> 689;
690 -> 685;
691 -> 689;
691 -> 685;
692 -> 689;
692 -> 685;
693 -> 689;
693 -> 685;
694 -> 689;
694 -> 685;
695 -> 689;
695 -> 685;
696 -> 686;
696 -> 689;
696 -> 685;
697 -> 688;
697 -> 689;
697 -> 685;
698 -> 687;
698 -> 689;
698 -> 685;
699 -> 673;
699 -> 668;
700 -> 674;
700 -> 668;
701 -> 675;
701 -> 668;
702 -> 671;
702 -> 668;
703 -> 678;
703 -> 668;
704 -> 679;
704 -> 668;
705 -> 672;
705 -> 668;
706 -> 668;
707 -> 699;
707 -> 706;
708 -> 700;
708 -> 706;
709 -> 701;
709 -> 706;
710 -> 702;
710 -> 706;
711 -> 703;
711 -> 706;
712 -> 704;
712 -> 706;
713 -> 705;
713 -> 706;
714 -> 684;
714 -> 706;
715 -> 0;
716 -> 715;
717 -> 716;
718 -> 714;
718 -> 697;
718 -> 706;
719 -> 706;
720 -> 718;
720 -> 719;
721 -> 720;
721 -> 719;
722 -> 717;
722 -> 716;
722 -> 721;
722 -> 719;
723 -> 722;
723 -> 706;
724 -> 710;
724 -> 706;
725 -> 711;
725 -> 706;
726 -> 706;
727 -> 723;
727 -> 726;
728 -> 724;
728 -> 726;
729 -> 725;
729 -> 726;
730 -> 714;
730 -> 726;
732 -> 730;
732 -> 696;
732 -> 726;
733 -> 728;
733 -> 726;
734 -> 729;
734 -> 726;
735 -> 726;
736 -> 732;
736 -> 733;
736 -> 734;
736 -> 735;
736 -> 727;
736 -> 592;
736 -> 722;
736 -> 726;
737 -> 736;
737 -> 735;
738 -> 736;
738 -> 735;
739 -> 736;
739 -> 735;
740 -> 736;
740 -> 735;
741 -> 736;
741 -> 735;
742 -> 736;
742 -> 735;
743 -> 737;
743 -> 735;
744 -> 735;
745 -> 743;
745 -> 744;
746 -> 744;
747 -> 745;
747 -> 744;
748 -> 744;
749 -> 747;
749 -> 748;
750 -> 748;
751 -> 749;
751 -> 736;
751 -> 748;
752 -> 748;
753 -> 751;
753 -> 752;
754 -> 748;
755 -> 753;
755 -> 754;
755 -> 748;
756 -> 749;
756 -> 753;
756 -> 748;
757 -> 748;
758 -> 756;
758 -> 757;
759 -> 757;
760 -> 758;
760 -> 759;
761 -> 760;
761 -> 756;
761 -> 759;
762 -> 760;
762 -> 761;
763 -> 761;
764 -> 762;
764 -> 763;
765 -> 763;
766 -> 764;
766 -> 765;
767 -> 765;
768 -> 766;
768 -> 762;
768 -> 767;
769 -> 768;
769 -> 765;
770 -> 769;
770 -> 763;
771 -> 762;
771 -> 763;
772 -> 771;
772 -> 770;
772 -> 763;
773 -> 762;
773 -> 763;
774 -> 763;
775 -> 760;
775 -> 772;
775 -> 761;
776 -> 760;
776 -> 772;
776 -> 759;
777 -> 776;
777 -> 757;
778 -> 750;
778 -> 748;
779 -> 778;
779 -> 744;
780 -> 744;
781 -> 779;
781 -> 780;
781 -> 744;
782 -> 746;
782 -> 744;
783 -> 782;
783 -> 735;
784 -> 0;
784 -> 735;
785 -> 783;
785 -> 735;
786 -> 735;
787 -> 737;
787 -> 786;
787 -> 735;
788 -> 783;
788 -> 735;
789 -> 786;
789 -> 788;
789 -> 787;
789 -> 746;
789 -> 777;
789 -> 735;
790 -> 789;
791 -> 784;
791 -> 789;
792 -> 739;
792 -> 789;
793 -> 740;
793 -> 789;
794 -> 789;
795 -> 790;
795 -> 794;
796 -> 791;
796 -> 794;
797 -> 792;
797 -> 794;
798 -> 793;
798 -> 794;
799 -> 795;
799 -> 777;
799 -> 746;
799 -> 786;
799 -> 787;
799 -> 789;
799 -> 794;
800 -> 799;
801 -> 799;
802 -> 801;
802 -> 777;
802 -> 789;
802 -> 786;
802 -> 787;
802 -> 746;
802 -> 799;
803 -> 801;
803 -> 802;
803 -> 0;
803 -> 799;
804 -> 803;
804 -> 799;
805 -> 804;
806 -> 803;
806 -> 799;
807 -> 802;
807 -> 799;
808 -> 799;
809 -> 807;
809 -> 808;
810 -> 809;
810 -> 802;
810 -> 0;
810 -> 808;
811 -> 810;
811 -> 808;
812 -> 811;
813 -> 811;
814 -> 803;
814 -> 811;
815 -> 811;
815 -> 812;
815 -> 814;
816 -> 812;
816 -> 814;
817 -> 814;
818 -> 815;
818 -> 811;
819 -> 797;
819 -> 815;
819 -> 818;
819 -> 811;
820 -> 811;
821 -> 794;
822 -> 737;
822 -> 735;
823 -> 738;
823 -> 735;
824 -> 740;
824 -> 735;
825 -> 741;
825 -> 735;
826 -> 742;
826 -> 735;
827 -> 735;
828 -> 822;
828 -> 827;
829 -> 823;
829 -> 827;
830 -> 824;
830 -> 827;
831 -> 825;
831 -> 827;
832 -> 826;
832 -> 827;
833 -> 827;
834 -> 832;
834 -> 833;
834 -> 827;
835 -> 0;
835 -> 834;
836 -> 827;
837 -> 827;
838 -> 827;
839 -> 835;
839 -> 0;
839 -> 827;
840 -> 839;
840 -> 827;
841 -> 828;
841 -> 819;
841 -> 827;
842 -> 827;
843 -> 841;
843 -> 842;
844 -> 842;
845 -> 843;
845 -> 844;
846 -> 844;
847 -> 846;
848 -> 845;
848 -> 842;
849 -> 827;
850 -> 827;
851 -> 836;
851 -> 827;
852 -> 827;
853 -> 840;
853 -> 827;
854 -> 829;
854 -> 827;
855 -> 835;
855 -> 827;
856 -> 848;
856 -> 827;
857 -> 831;
857 -> 827;
858 -> 851;
858 -> 852;
858 -> 853;
858 -> 854;
858 -> 855;
858 -> 856;
858 -> 857;
858 -> 828;
858 -> 836;
858 -> 848;
858 -> 835;
858 -> 0;
858 -> 827;
859 -> 858;
859 -> 852;
860 -> 859;
860 -> 858;
860 -> 852;
861 -> 858;
861 -> 852;
862 -> 858;
862 -> 852;
863 -> 858;
863 -> 852;
864 -> 858;
864 -> 852;
865 -> 858;
865 -> 852;
866 -> 858;
866 -> 852;
867 -> 858;
867 -> 852;
868 -> 858;
868 -> 852;
869 -> 858;
869 -> 852;
870 -> 869;
870 -> 860;
870 -> 852;
871 -> 861;
871 -> 852;
872 -> 867;
872 -> 852;
873 -> 852;
874 -> 871;
874 -> 873;
875 -> 872;
875 -> 873;
876 -> 869;
876 -> 873;
877 -> 874;
877 -> 873;
878 -> 873;
879 -> 877;
879 -> 878;
880 -> 876;
880 -> 878;
881 -> 878;
882 -> 880;
882 -> 881;
883 -> 881;
884 -> 882;
884 -> 883;
885 -> 883;
886 -> 884;
886 -> 885;
887 -> 886;
887 -> 860;
887 -> 885;
888 -> 886;
888 -> 860;
888 -> 885;
889 -> 888;
889 -> 883;
890 -> 884;
890 -> 860;
890 -> 883;
891 -> 884;
891 -> 890;
891 -> 883;
892 -> 891;
892 -> 881;
893 -> 892;
893 -> 878;
894 -> 893;
894 -> 878;
895 -> 879;
895 -> 890;
895 -> 878;
896 -> 873;
897 -> 895;
897 -> 896;
897 -> 873;
898 -> 873;
899 -> 898;
899 -> 873;
900 -> 0;
900 -> 873;
901 -> 875;
901 -> 873;
902 -> 898;
902 -> 873;
903 -> 0;
903 -> 873;
904 -> 901;
904 -> 902;
904 -> 903;
904 -> 876;
904 -> 890;
904 -> 0;
904 -> 899;
904 -> 873;
905 -> 873;
907 -> 906;
908 -> 904;
908 -> 905;
909 -> 904;
909 -> 905;
910 -> 904;
910 -> 905;
911 -> 904;
911 -> 905;
912 -> 904;
912 -> 905;
913 -> 904;
913 -> 905;
914 -> 904;
914 -> 905;
915 -> 905;
916 -> 908;
916 -> 915;
916 -> 905;
917 -> 908;
917 -> 904;
917 -> 916;
918 -> 908;
918 -> 917;
918 -> 0;
919 -> 905;
920 -> 905;
921 -> 907;
921 -> 905;
922 -> 908;
922 -> 917;
922 -> 905;
923 -> 905;
924 -> 921;
924 -> 922;
924 -> 923;
924 -> 906;
924 -> 905;
925 -> 908;
925 -> 917;
925 -> 924;
926 -> 909;
926 -> 924;
927 -> 910;
927 -> 924;
928 -> 911;
928 -> 924;
929 -> 912;
929 -> 924;
930 -> 913;
930 -> 924;
931 -> 914;
931 -> 924;
932 -> 920;
932 -> 924;
933 -> 924;
934 -> 925;
934 -> 933;
935 -> 925;
935 -> 933;
936 -> 925;
936 -> 933;
937 -> 925;
937 -> 933;
938 -> 925;
938 -> 933;
939 -> 925;
939 -> 933;
940 -> 926;
940 -> 933;
941 -> 927;
941 -> 933;
942 -> 928;
942 -> 933;
943 -> 929;
943 -> 933;
944 -> 930;
944 -> 933;
945 -> 931;
945 -> 933;
946 -> 932;
946 -> 933;
947 -> 933;
948 -> 938;
948 -> 917;
948 -> 933;
949 -> 938;
949 -> 917;
949 -> 933;
950 -> 938;
950 -> 917;
950 -> 933;
951 -> 936;
951 -> 933;
952 -> 951;
952 -> 933;
953 -> 937;
953 -> 940;
953 -> 933;
954 -> 933;
955 -> 933;
956 -> 933;
957 -> 936;
957 -> 933;
958 -> 954;
958 -> 933;
959 -> 943;
959 -> 957;
959 -> 958;
959 -> 917;
959 -> 933;
960 -> 933;
961 -> 944;
961 -> 960;
961 -> 933;
962 -> 955;
962 -> 933;
963 -> 935;
963 -> 962;
964 -> 0;
964 -> 963;
965 -> 964;
965 -> 0;
965 -> 933;
966 -> 949;
966 -> 933;
967 -> 0;
967 -> 933;
968 -> 966;
968 -> 0;
968 -> 933;
969 -> 966;
969 -> 0;
969 -> 933;
970 -> 964;
970 -> 0;
970 -> 969;
971 -> 964;
971 -> 933;
972 -> 942;
972 -> 971;
973 -> 964;
973 -> 933;
974 -> 947;
974 -> 905;
975 -> 973;
975 -> 905;
976 -> 908;
976 -> 975;
976 -> 959;
976 -> 905;
977 -> 0;
977 -> 873;
978 -> 977;
978 -> 852;
979 -> 852;
980 -> 978;
980 -> 979;
980 -> 852;
981 -> 861;
981 -> 852;
982 -> 978;
982 -> 852;
983 -> 852;
984 -> 981;
984 -> 982;
984 -> 983;
984 -> 869;
984 -> 976;
984 -> 852;
985 -> 984;
985 -> 983;
986 -> 983;
987 -> 985;
987 -> 986;
988 -> 986;
989 -> 987;
989 -> 988;
990 -> 989;
990 -> 986;
991 -> 987;
991 -> 986;
992 -> 991;
992 -> 983;
993 -> 983;
994 -> 992;
994 -> 993;
995 -> 992;
995 -> 993;
996 -> 993;
997 -> 995;
997 -> 996;
998 -> 996;
999 -> 998;
1000 -> 997;
1000 -> 993;
1001 -> 995;
1001 -> 993;
1002 -> 993;
1003 -> 1002;
1004 -> 1003;
1005 -> 984;
1005 -> 983;
1006 -> 983;
1007 -> 1005;
1007 -> 1006;
1008 -> 1006;
1009 -> 1007;
1009 -> 1008;
1010 -> 1009;
1010 -> 1000;
1010 -> 1008;
1011 -> 1009;
1011 -> 1000;
1011 -> 1008;
1012 -> 1011;
1012 -> 1006;
1013 -> 1007;
1013 -> 1000;
1013 -> 1006;
1014 -> 1013;
1014 -> 983;
1015 -> 983;
1016 -> 1014;
1016 -> 1015;
1017 -> 984;
1017 -> 983;
1018 -> 983;
1019 -> 984;
1019 -> 1018;
1019 -> 1016;
1019 -> 852;
1020 -> 852;
1021 -> 865;
1021 -> 1020;
1021 -> 852;
1022 -> 1021;
1023 -> 852;
1024 -> 869;
1024 -> 1019;
1024 -> 852;
1025 -> 869;
1025 -> 1019;
1025 -> 1024;
1026 -> 1025;
1026 -> 1024;
1027 -> 869;
1027 -> 1019;
1027 -> 1026;
1028 -> 1024;
1029 -> 1028;
1030 -> 1029;
1030 -> 1028;
1031 -> 1028;
1031 -> 1019;
1031 -> 1027;
1032 -> 1031;
1032 -> 1024;
1033 -> 861;
1033 -> 1024;
1034 -> 1027;
1034 -> 1024;
1035 -> 1019;
1035 -> 1024;
1036 -> 1022;
1036 -> 1024;
1037 -> 1024;
1038 -> 1024;
1039 -> 1032;
1039 -> 1038;
1040 -> 1033;
1040 -> 1038;
1041 -> 1034;
1041 -> 1038;
1042 -> 1035;
1042 -> 1038;
1043 -> 1036;
1043 -> 1038;
1044 -> 1037;
1044 -> 1038;
1045 -> 1039;
1045 -> 1038;
1046 -> 1040;
1046 -> 1038;
1047 -> 1041;
1047 -> 1038;
1048 -> 1042;
1048 -> 1038;
1049 -> 1043;
1049 -> 1038;
1050 -> 0;
1050 -> 1038;
1051 -> 1038;
1052 -> 1045;
1052 -> 1051;
1053 -> 1046;
1053 -> 1051;
1054 -> 1047;
1054 -> 1051;
1055 -> 1048;
1055 -> 1051;
1056 -> 1049;
1056 -> 1051;
1057 -> 1050;
1057 -> 1051;
1058 -> 1044;
1058 -> 1051;
1059 -> 1051;
1060 -> 1052;
1060 -> 1031;
1060 -> 1059;
1060 -> 1051;
1061 -> 1053;
1061 -> 1051;
1062 -> 1054;
1062 -> 1051;
1063 -> 1055;
1063 -> 1051;
1064 -> 1056;
1064 -> 1051;
1065 -> 1051;
1066 -> 1060;
1066 -> 1065;
1067 -> 1061;
1067 -> 1065;
1068 -> 1062;
1068 -> 1065;
1069 -> 1063;
1069 -> 1065;
1070 -> 1064;
1070 -> 1065;
1071 -> 1058;
1071 -> 1065;
1072 -> 1066;
1072 -> 1060;
1072 -> 1065;
1073 -> 1066;
1073 -> 1065;
1074 -> 1069;
1074 -> 1065;
1075 -> 1070;
1075 -> 1065;
1076 -> 1068;
1076 -> 1065;
1077 -> 1067;
1077 -> 1065;
1078 -> 1065;
1079 -> 1078;
1080 -> 1065;
1081 -> 1080;
1081 -> 1072;
1081 -> 1073;
1081 -> 1074;
1081 -> 1075;
1081 -> 1076;
1081 -> 1077;
1081 -> 1078;
1081 -> 1060;
1081 -> 1022;
1081 -> 1079;
1081 -> 1065;
1082 -> 1081;
1082 -> 1080;
1083 -> 1080;
1084 -> 1081;
1084 -> 1083;
1084 -> 1065;
1085 -> 1065;
1086 -> 1085;
1086 -> 1080;
1086 -> 1065;
1087 -> 0;
1087 -> 1065;
1088 -> 1087;
1088 -> 0;
1088 -> 1065;
1089 -> 1088;
1089 -> 1080;
1089 -> 1065;
1090 -> 1065;
1091 -> 1090;
1091 -> 1080;
1091 -> 1065;
1092 -> 1080;
1092 -> 1065;
1093 -> 1080;
1093 -> 1065;
1094 -> 1080;
1094 -> 1065;
1095 -> 1080;
1095 -> 1065;
1096 -> 1080;
1096 -> 1065;
1097 -> 1066;
1097 -> 1084;
1097 -> 1065;
1098 -> 1097;
1098 -> 0;
1098 -> 1065;
1099 -> 1098;
1099 -> 1065;
1100 -> 1099;
1100 -> 1080;
1100 -> 1065;
1101 -> 1080;
1101 -> 1084;
1101 -> 1086;
1101 -> 1065;
1102 -> 1066;
1102 -> 1065;
1103 -> 1080;
1103 -> 1065;
1104 -> 1101;
1104 -> 1102;
1104 -> 1103;
1104 -> 1084;
1104 -> 1086;
1104 -> 1089;
1104 -> 1091;
1104 -> 1092;
1104 -> 1093;
1104 -> 1100;
1104 -> 1094;
1104 -> 1095;
1104 -> 1096;
1104 -> 1085;
1104 -> 1088;
1104 -> 1090;
1104 -> 1065;
1105 -> 1066;
1105 -> 1104;
1105 -> 1065;
1106 -> 1058;
1106 -> 1051;
1107 -> 1058;
1107 -> 1051;
1108 -> 1058;
1108 -> 1051;
1109 -> 1058;
1109 -> 1051;
1110 -> 1058;
1110 -> 1051;
1111 -> 1058;
1111 -> 1051;
1112 -> 1058;
1112 -> 1051;
1113 -> 1058;
1113 -> 1051;
1114 -> 1058;
1114 -> 1051;
1115 -> 1058;
1115 -> 1051;
1116 -> 1052;
1116 -> 1051;
1117 -> 1052;
1117 -> 1058;
1117 -> 1051;
1118 -> 1057;
1118 -> 1051;
1119 -> 1118;
1119 -> 1058;
1119 -> 1051;
1120 -> 1051;
1121 -> 1053;
1121 -> 1104;
1121 -> 1120;
1121 -> 1051;
1122 -> 1121;
1122 -> 1051;
1123 -> 1052;
1123 -> 1104;
1123 -> 1122;
1124 -> 1052;
1124 -> 1104;
1124 -> 1123;
1124 -> 1058;
1124 -> 1051;
1125 -> 1058;
1125 -> 1104;
1125 -> 1051;
1126 -> 1052;
1126 -> 1051;
1127 -> 1058;
1127 -> 1051;
1128 -> 1125;
1128 -> 1126;
1128 -> 1127;
1128 -> 1104;
1128 -> 1106;
1128 -> 1117;
1128 -> 1107;
1128 -> 1108;
1128 -> 1109;
1128 -> 1110;
1128 -> 1111;
1128 -> 1112;
1128 -> 1113;
1128 -> 1114;
1128 -> 1115;
1128 -> 1124;
1128 -> 1119;
1128 -> 1123;
1128 -> 1118;
1128 -> 1051;
1129 -> 852;
1130 -> 862;
1130 -> 1129;
1130 -> 852;
1131 -> 863;
1131 -> 1037;
1131 -> 852;
1132 -> 852;
1133 -> 864;
1133 -> 1132;
1133 -> 852;
1134 -> 864;
1134 -> 1037;
1134 -> 1133;
1135 -> 852;
1136 -> 866;
1136 -> 1135;
1136 -> 852;
1137 -> 866;
1137 -> 1128;
1137 -> 1136;
1138 -> 1037;
1138 -> 1137;
1138 -> 1128;
1138 -> 1131;
1138 -> 1134;
1138 -> 1136;
1139 -> 1037;
1139 -> 866;
1139 -> 1136;
1140 -> 1037;
1140 -> 852;
1141 -> 858;
1141 -> 1140;
1141 -> 1138;
1141 -> 1139;
1141 -> 827;
1142 -> 858;
1142 -> 852;
1143 -> 858;
1143 -> 852;
1144 -> 858;
1144 -> 852;
1145 -> 858;
1145 -> 852;
1146 -> 858;
1146 -> 852;
1147 -> 858;
1147 -> 852;
1148 -> 858;
1148 -> 852;
1149 -> 858;
1149 -> 852;
1150 -> 852;
1151 -> 1144;
1151 -> 852;
1152 -> 1146;
1152 -> 852;
1153 -> 0;
1153 -> 852;
1154 -> 852;
1155 -> 1148;
1155 -> 852;
1156 -> 852;
1157 -> 1153;
1157 -> 1156;
1158 -> 1154;
1158 -> 1156;
1159 -> 1155;
1159 -> 1156;
1160 -> 1149;
1160 -> 1156;
1161 -> 1156;
1162 -> 1157;
1162 -> 1156;
1163 -> 1158;
1163 -> 1156;
1164 -> 1161;
1164 -> 1156;
1165 -> 1159;
1165 -> 1156;
1166 -> 1156;
1167 -> 1162;
1167 -> 1166;
1168 -> 1163;
1168 -> 1166;
1169 -> 1164;
1169 -> 1166;
1170 -> 1165;
1170 -> 1166;
1171 -> 1160;
1171 -> 1166;
1172 -> 1166;
1173 -> 1167;
1173 -> 0;
1173 -> 1166;
1174 -> 1173;
1174 -> 1168;
1174 -> 1166;
1175 -> 1174;
1176 -> 1171;
1176 -> 1175;
1177 -> 1175;
1178 -> 1176;
1178 -> 1141;
1178 -> 1177;
1179 -> 1177;
1180 -> 1178;
1180 -> 1174;
1181 -> 1174;
1182 -> 1171;
1182 -> 1181;
1183 -> 1182;
1183 -> 1141;
1183 -> 1181;
1184 -> 1183;
1184 -> 1174;
1185 -> 1184;
1186 -> 1180;
1186 -> 1141;
1186 -> 1184;
1187 -> 1170;
1187 -> 1184;
1188 -> 1185;
1188 -> 1186;
1188 -> 1187;
1188 -> 1141;
1188 -> 1184;
1189 -> 1188;
1189 -> 1185;
1190 -> 1188;
1190 -> 1185;
1191 -> 1188;
1191 -> 1185;
1192 -> 1188;
1192 -> 1185;
1193 -> 1185;
1194 -> 1193;
1194 -> 1185;
1195 -> 1185;
1196 -> 1190;
1196 -> 1195;
1197 -> 1196;
1197 -> 1185;
1198 -> 1191;
1198 -> 1185;
1199 -> 1193;
1199 -> 1185;
1200 -> 1197;
1200 -> 1188;
1200 -> 1198;
1200 -> 1199;
1200 -> 1194;
1200 -> 1185;
1201 -> 1174;
1202 -> 1180;
1202 -> 1174;
1203 -> 1170;
1203 -> 1141;
1203 -> 1200;
1203 -> 1202;
1204 -> 1202;
1204 -> 1141;
1204 -> 1203;
1205 -> 1167;
1205 -> 0;
1205 -> 1166;
1206 -> 1172;
1206 -> 1205;
1207 -> 1206;
1207 -> 1171;
1207 -> 1172;
1207 -> 1203;
1207 -> 1205;
1208 -> 1205;
1209 -> 1205;
1210 -> 1171;
1210 -> 1209;
1211 -> 1210;
1211 -> 1207;
1211 -> 1209;
1212 -> 1211;
1212 -> 1205;
1213 -> 1205;
1214 -> 1171;
1214 -> 1213;
1215 -> 1214;
1215 -> 1212;
1215 -> 1213;
1216 -> 1215;
1216 -> 1205;
1217 -> 1170;
1217 -> 1212;
1217 -> 1205;
1218 -> 1205;
1219 -> 1171;
1219 -> 1218;
1220 -> 1219;
1220 -> 1217;
1220 -> 1218;
1221 -> 1219;
1221 -> 1217;
1221 -> 1218;
1222 -> 1221;
1222 -> 1205;
1223 -> 1170;
1223 -> 1222;
1223 -> 1205;
1224 -> 1170;
1224 -> 1205;
1225 -> 1205;
1226 -> 1205;
1227 -> 1225;
1227 -> 1226;
1228 -> 1225;
1228 -> 1226;
1229 -> 1225;
1229 -> 1226;
1230 -> 1224;
1230 -> 1226;
1231 -> 1171;
1231 -> 1226;
1232 -> 1226;
1233 -> 1231;
1233 -> 1232;
1234 -> 1233;
1234 -> 1223;
1234 -> 1232;
1235 -> 1232;
1236 -> 1234;
1236 -> 1235;
1237 -> 1236;
1237 -> 1235;
1238 -> 1237;
1238 -> 1234;
1238 -> 1235;
1239 -> 1235;
1240 -> 1238;
1240 -> 1239;
1241 -> 1240;
1241 -> 1238;
1241 -> 1239;
1242 -> 1241;
1242 -> 1239;
1243 -> 1242;
1243 -> 1226;
1244 -> 1230;
1244 -> 1226;
1245 -> 1243;
1245 -> 1244;
1245 -> 1242;
1245 -> 1223;
1245 -> 1226;
1246 -> 1226;
1247 -> 1226;
1248 -> 1227;
1248 -> 1247;
1248 -> 1226;
1249 -> 1226;
1250 -> 1231;
1250 -> 1249;
1251 -> 1249;
1252 -> 1250;
1252 -> 1251;
1253 -> 1251;
1254 -> 1252;
1254 -> 1253;
1255 -> 1254;
1255 -> 1245;
1255 -> 1253;
1256 -> 1254;
1256 -> 1245;
1256 -> 1253;
1257 -> 1256;
1257 -> 1251;
1258 -> 1252;
1258 -> 1245;
1258 -> 1251;
1259 -> 1258;
1259 -> 1249;
1260 -> 1259;
1260 -> 1226;
1261 -> 1246;
1261 -> 1226;
1262 -> 1230;
1262 -> 1226;
1263 -> 1261;
1263 -> 1262;
1263 -> 1260;
1263 -> 1223;
1263 -> 1258;
1263 -> 1226;
1264 -> 1226;
1265 -> 1264;
1266 -> 1265;
1267 -> 1263;
1267 -> 1266;
1268 -> 1267;
1268 -> 1265;
1269 -> 1264;
1270 -> 1269;
1271 -> 1270;
1272 -> 1264;
1273 -> 1272;
1274 -> 1273;
1275 -> 1263;
1275 -> 1264;
1276 -> 1275;
1276 -> 1263;
1276 -> 1264;
1277 -> 1264;
1278 -> 1275;
1278 -> 1263;
1278 -> 1277;
1278 -> 1264;
1279 -> 1278;
1280 -> 1275;
1280 -> 1263;
1280 -> 1278;
1281 -> 1279;
1281 -> 1278;
1282 -> 1278;
1283 -> 1275;
1283 -> 1281;
1283 -> 1264;
1284 -> 1263;
1284 -> 1264;
1285 -> 1263;
1285 -> 1264;
1286 -> 1285;
1286 -> 1283;
1286 -> 1264;
1287 -> 1263;
1287 -> 1264;
1288 -> 1263;
1288 -> 1264;
1289 -> 1264;
1290 -> 1288;
1290 -> 1289;
1291 -> 1290;
1291 -> 1283;
1291 -> 1289;
1292 -> 1290;
1292 -> 1283;
1292 -> 1289;
1293 -> 1292;
1293 -> 1264;
1294 -> 1264;
1295 -> 1294;
1295 -> 1293;
1295 -> 1283;
1295 -> 1264;
1296 -> 1267;
1296 -> 1283;
1296 -> 1266;
1297 -> 1267;
1297 -> 1283;
1297 -> 1266;
1298 -> 1297;
1298 -> 1265;
1299 -> 1263;
1299 -> 1264;
1300 -> 1299;
1300 -> 1283;
1300 -> 1264;
1301 -> 1267;
1301 -> 1300;
1301 -> 1266;
1302 -> 1267;
1302 -> 1300;
1302 -> 1266;
1303 -> 1302;
1303 -> 1265;
1304 -> 1290;
1304 -> 1300;
1304 -> 1289;
1305 -> 1290;
1305 -> 1300;
1305 -> 1289;
1306 -> 1305;
1306 -> 1264;
1307 -> 1294;
1307 -> 1306;
1307 -> 1300;
1307 -> 1264;
1308 -> 1275;
1308 -> 1300;
1308 -> 1264;
1309 -> 1227;
1309 -> 1226;
1310 -> 1309;
1311 -> 1310;
1311 -> 1231;
1311 -> 1309;
1312 -> 1309;
1313 -> 1312;
1313 -> 1231;
1313 -> 1309;
1314 -> 1231;
1314 -> 1300;
1314 -> 1311;
1314 -> 1313;
1314 -> 1226;
1315 -> 1226;
1316 -> 1229;
1316 -> 1315;
1316 -> 1226;
1317 -> 1227;
1317 -> 1226;
1318 -> 1228;
1318 -> 1226;
1319 -> 1230;
1319 -> 1226;
1320 -> 1226;
1321 -> 1317;
1321 -> 1320;
1322 -> 1318;
1322 -> 1320;
1323 -> 1319;
1323 -> 1320;
1324 -> 1231;
1324 -> 1320;
1325 -> 1320;
1326 -> 1321;
1326 -> 1325;
1326 -> 1320;
1327 -> 1324;
1327 -> 1314;
1327 -> 1320;
1328 -> 1327;
1329 -> 1324;
1329 -> 1327;
1330 -> 1328;
1330 -> 1327;
1331 -> 1323;
1331 -> 1327;
1332 -> 1327;
1333 -> 1327;
1334 -> 1329;
1334 -> 1333;
1335 -> 1330;
1335 -> 1333;
1336 -> 1331;
1336 -> 1333;
1337 -> 1332;
1337 -> 1333;
1338 -> 1332;
1338 -> 1333;
1339 -> 1333;
1340 -> 1334;
1340 -> 1333;
1341 -> 1337;
1341 -> 1333;
1342 -> 1338;
1342 -> 1333;
1343 -> 1339;
1343 -> 1333;
1344 -> 1336;
1344 -> 1333;
1345 -> 1333;
1346 -> 1333;
1347 -> 1340;
1347 -> 1346;
1348 -> 1341;
1348 -> 1346;
1349 -> 1342;
1349 -> 1346;
1350 -> 1343;
1350 -> 1346;
1351 -> 1344;
1351 -> 1346;
1352 -> 1345;
1352 -> 1346;
1353 -> 1346;
1354 -> 1353;
1354 -> 1346;
1355 -> 1353;
1355 -> 1346;
1356 -> 1353;
1356 -> 1346;
1357 -> 1353;
1357 -> 1346;
1358 -> 1353;
1358 -> 1346;
1359 -> 1353;
1359 -> 1346;
1360 -> 1347;
1360 -> 1353;
1360 -> 1346;
1361 -> 1348;
1361 -> 1353;
1361 -> 1346;
1362 -> 1349;
1362 -> 1353;
1362 -> 1346;
1363 -> 1350;
1363 -> 1353;
1363 -> 1346;
1364 -> 1351;
1364 -> 1353;
1364 -> 1346;
1365 -> 0;
1365 -> 1346;
1366 -> 1365;
1366 -> 1353;
1366 -> 1346;
1367 -> 1346;
1368 -> 1353;
1368 -> 1367;
1369 -> 1367;
1370 -> 1368;
1370 -> 1353;
1370 -> 1355;
1370 -> 1361;
1370 -> 1369;
1370 -> 1367;
1371 -> 1367;
1372 -> 1368;
1372 -> 1353;
1372 -> 1354;
1372 -> 1360;
1372 -> 1371;
1373 -> 1372;
1373 -> 1353;
1373 -> 1365;
1373 -> 1371;
1374 -> 1370;
1374 -> 1373;
1374 -> 1353;
1374 -> 1365;
1374 -> 1367;
1375 -> 1374;
1375 -> 1346;
1376 -> 1375;
1377 -> 1376;
1377 -> 1353;
1377 -> 1375;
1378 -> 1333;
1379 -> 1334;
1379 -> 1378;
1380 -> 1378;
1381 -> 1379;
1381 -> 1380;
1382 -> 1381;
1382 -> 1365;
1382 -> 1380;
1383 -> 1381;
1383 -> 1365;
1383 -> 1380;
1384 -> 1383;
1384 -> 1378;
1385 -> 1379;
1385 -> 1365;
1385 -> 1378;
1386 -> 1385;
1386 -> 1333;
1387 -> 1386;
1387 -> 1345;
1387 -> 1385;
1387 -> 1353;
1387 -> 1354;
1387 -> 1360;
1387 -> 1355;
1387 -> 1361;
1387 -> 1356;
1387 -> 1362;
1387 -> 1357;
1387 -> 1363;
1387 -> 1358;
1387 -> 1366;
1387 -> 1359;
1387 -> 1377;
1387 -> 1364;
1387 -> 1332;
1387 -> 1339;
1387 -> 1223;
1387 -> 1376;
1387 -> 1333;
1388 -> 1333;
1389 -> 1387;
1389 -> 1388;
1390 -> 1387;
1390 -> 1388;
1391 -> 1390;
1391 -> 1387;
1391 -> 1388;
1392 -> 1389;
1392 -> 1388;
1393 -> 1389;
1393 -> 1388;
1394 -> 1388;
1395 -> 1393;
1395 -> 1394;
1396 -> 1390;
1396 -> 1394;
1397 -> 1395;
1397 -> 1391;
1397 -> 0;
1397 -> 1394;
1398 -> 1394;
1399 -> 1395;
1399 -> 1391;
1399 -> 0;
1399 -> 1394;
1400 -> 1395;
1400 -> 1391;
1400 -> 0;
1400 -> 1399;
1401 -> 1395;
1401 -> 1391;
1401 -> 0;
1401 -> 1394;
1402 -> 1395;
1402 -> 1391;
1402 -> 0;
1402 -> 1394;
1403 -> 1395;
1403 -> 1391;
1403 -> 0;
1403 -> 1394;
1404 -> 1395;
1404 -> 1391;
1404 -> 0;
1404 -> 1394;
1405 -> 1395;
1405 -> 1391;
1405 -> 0;
1405 -> 1394;
1406 -> 1394;
1407 -> 1395;
1407 -> 1394;
1408 -> 1406;
1408 -> 1394;
1409 -> 1396;
1409 -> 1391;
1409 -> 1407;
1409 -> 1408;
1409 -> 1394;
1410 -> 1394;
1411 -> 1395;
1411 -> 1394;
1412 -> 1410;
1412 -> 1394;
1413 -> 1394;
1414 -> 1411;
1414 -> 1413;
1415 -> 1412;
1415 -> 1413;
1416 -> 1396;
1416 -> 1413;
1417 -> 1413;
1418 -> 1414;
1418 -> 1409;
1418 -> 1413;
1419 -> 1413;
1420 -> 1419;
1420 -> 1394;
1421 -> 1420;
1421 -> 1394;
1422 -> 1395;
1422 -> 1418;
1422 -> 0;
1422 -> 1421;
1423 -> 0;
1423 -> 1422;
1424 -> 1395;
1424 -> 1418;
1424 -> 0;
1424 -> 1394;
1425 -> 1424;
1425 -> 1394;
1426 -> 1423;
1426 -> 1425;
1427 -> 1426;
1427 -> 0;
1427 -> 1388;
1428 -> 1426;
1428 -> 1388;
1429 -> 1388;
1430 -> 1428;
1430 -> 1429;
1431 -> 1430;
1431 -> 1429;
1432 -> 1431;
1433 -> 1388;
1434 -> 1433;
1434 -> 1389;
1434 -> 1426;
1434 -> 1388;
1435 -> 1389;
1435 -> 1426;
1435 -> 1433;
1435 -> 1434;
1436 -> 1434;
1437 -> 1435;
1437 -> 1434;
1438 -> 1436;
1438 -> 1434;
1439 -> 1434;
1440 -> 1437;
1440 -> 1439;
1441 -> 1438;
1441 -> 1439;
1442 -> 1390;
1442 -> 1439;
1443 -> 1439;
1444 -> 1439;
1444 -> 1434;
1445 -> 1434;
1446 -> 1445;
1446 -> 1434;
1447 -> 1443;
1447 -> 1446;
1448 -> 1434;
1449 -> 1447;
1449 -> 1448;
1449 -> 1434;
1450 -> 1449;
1450 -> 1444;
1450 -> 1434;
1451 -> 1444;
1451 -> 1434;
1452 -> 1432;
1452 -> 1451;
1453 -> 1440;
1454 -> 1453;
1454 -> 1440;
1455 -> 1390;
1455 -> 1440;
1456 -> 1440;
1457 -> 1440;
1458 -> 1457;
1458 -> 1440;
1459 -> 1440;
1460 -> 1458;
1460 -> 1459;
1460 -> 1440;
1461 -> 1453;
1461 -> 1440;
1462 -> 1432;
1462 -> 1461;
1463 -> 1432;
1463 -> 1388;
1464 -> 1388;
1465 -> 1389;
1465 -> 1458;
1465 -> 1464;
1465 -> 1388;
1466 -> 1465;
1466 -> 1388;
1467 -> 1388;
1468 -> 1466;
1468 -> 1467;
1469 -> 1390;
1469 -> 1467;
1470 -> 1468;
1470 -> 1465;
1470 -> 0;
1470 -> 1467;
1471 -> 1467;
1472 -> 1468;
1472 -> 1465;
1472 -> 0;
1472 -> 1467;
1473 -> 1468;
1473 -> 1465;
1473 -> 0;
1473 -> 1472;
1474 -> 1468;
1474 -> 1465;
1474 -> 0;
1474 -> 1467;
1475 -> 1468;
1475 -> 1465;
1475 -> 0;
1475 -> 1467;
1476 -> 1468;
1476 -> 1465;
1476 -> 0;
1476 -> 1467;
1477 -> 1468;
1477 -> 1465;
1477 -> 0;
1477 -> 1467;
1478 -> 1468;
1478 -> 1465;
1478 -> 0;
1478 -> 1467;
1479 -> 1467;
1480 -> 1479;
1480 -> 1467;
1481 -> 1467;
1482 -> 1481;
1482 -> 1467;
1483 -> 1467;
1484 -> 1482;
1484 -> 1483;
1485 -> 1469;
1485 -> 1483;
1486 -> 1483;
1487 -> 1483;
1488 -> 1487;
1488 -> 1467;
1489 -> 1488;
1489 -> 1467;
1490 -> 1468;
1491 -> 1468;
1492 -> 1490;
1492 -> 1491;
1493 -> 1469;
1493 -> 1491;
1494 -> 1492;
1494 -> 1468;
1494 -> 0;
1494 -> 1491;
1495 -> 1492;
1495 -> 1468;
1495 -> 1491;
1496 -> 1491;
1497 -> 1495;
1497 -> 1496;
1497 -> 1491;
1498 -> 1495;
1498 -> 1491;
1499 -> 1491;
1500 -> 1498;
1500 -> 1499;
1501 -> 1493;
1501 -> 1499;
1502 -> 1500;
1502 -> 1468;
1502 -> 0;
1502 -> 1499;
1503 -> 1499;
1504 -> 1500;
1504 -> 1468;
1504 -> 0;
1504 -> 1499;
1505 -> 1500;
1505 -> 1468;
1505 -> 0;
1505 -> 1504;
1506 -> 1500;
1506 -> 1468;
1506 -> 0;
1506 -> 1499;
1507 -> 1500;
1507 -> 1468;
1507 -> 0;
1507 -> 1499;
1508 -> 1500;
1508 -> 1468;
1508 -> 0;
1508 -> 1499;
1509 -> 1500;
1509 -> 1468;
1509 -> 0;
1509 -> 1499;
1510 -> 1500;
1510 -> 1468;
1510 -> 0;
1510 -> 1499;
1511 -> 1501;
1511 -> 1468;
1511 -> 1500;
1511 -> 1499;
1512 -> 1511;
1513 -> 1468;
1514 -> 1512;
1514 -> 1513;
1515 -> 1514;
1515 -> 1513;
1516 -> 1515;
1517 -> 1388;
1518 -> 1516;
1518 -> 1517;
1519 -> 1389;
1519 -> 1511;
1519 -> 1388;
1520 -> 1388;
1521 -> 1519;
1521 -> 1520;
1522 -> 1519;
1522 -> 1520;
1523 -> 1522;
1523 -> 1519;
1523 -> 1520;
1524 -> 1521;
1524 -> 1520;
1525 -> 1520;
1526 -> 1524;
1526 -> 1525;
1527 -> 1522;
1527 -> 1525;
1528 -> 1526;
1528 -> 1523;
1528 -> 0;
1528 -> 1525;
1529 -> 1528;
1530 -> 1521;
1530 -> 1520;
1531 -> 1520;
1532 -> 1530;
1532 -> 1531;
1533 -> 1522;
1533 -> 1531;
1534 -> 1532;
1534 -> 1523;
1534 -> 0;
1534 -> 1531;
1535 -> 1531;
1536 -> 1532;
1536 -> 1523;
1536 -> 0;
1536 -> 1531;
1537 -> 1532;
1537 -> 1523;
1537 -> 1536;
1538 -> 1536;
1539 -> 1537;
1539 -> 1538;
1540 -> 1539;
1540 -> 1523;
1540 -> 0;
1540 -> 1538;
1541 -> 1538;
1542 -> 1539;
1542 -> 1523;
1542 -> 0;
1543 -> 1539;
1543 -> 1523;
1543 -> 0;
1543 -> 1538;
1544 -> 1539;
1544 -> 1523;
1544 -> 0;
1544 -> 1538;
1545 -> 1539;
1545 -> 1523;
1545 -> 0;
1545 -> 1538;
1546 -> 1539;
1546 -> 1523;
1546 -> 0;
1546 -> 1538;
1547 -> 1539;
1547 -> 1523;
1547 -> 0;
1547 -> 1538;
1548 -> 1539;
1549 -> 1520;
1550 -> 1548;
1550 -> 1549;
1551 -> 1550;
1551 -> 1549;
1552 -> 1551;
1553 -> 1520;
1554 -> 1522;
1554 -> 1553;
1555 -> 1553;
1556 -> 1554;
1556 -> 1539;
1556 -> 1555;
1556 -> 1553;
1557 -> 1553;
1558 -> 1554;
1558 -> 1539;
1558 -> 1557;
1559 -> 1556;
1559 -> 1520;
1560 -> 1521;
1560 -> 1559;
1561 -> 1559;
1562 -> 1560;
1562 -> 1561;
1563 -> 1522;
1563 -> 1561;
1564 -> 1562;
1564 -> 1539;
1564 -> 1561;
1565 -> 1564;
1566 -> 1563;
1566 -> 1564;
1567 -> 1559;
1568 -> 1333;
1569 -> 1345;
1569 -> 1568;
1570 -> 1569;
1570 -> 1566;
1570 -> 1568;
1571 -> 1568;
1572 -> 1570;
1572 -> 1571;
1572 -> 1568;
1573 -> 1568;
1574 -> 1570;
1574 -> 1573;
1574 -> 1566;
1574 -> 1568;
1575 -> 1574;
1576 -> 1333;
1577 -> 1339;
1577 -> 1333;
1578 -> 1577;
1578 -> 1575;
1578 -> 1333;
1579 -> 1324;
1579 -> 1575;
1579 -> 1327;
1580 -> 1328;
1580 -> 1327;
1581 -> 1579;
1581 -> 1580;
1581 -> 1575;
1581 -> 1327;
1582 -> 1324;
1582 -> 1581;
1582 -> 1320;
1583 -> 1324;
1583 -> 1581;
1583 -> 1320;
1584 -> 1314;
1584 -> 1226;
1585 -> 1584;
1585 -> 1581;
1585 -> 1226;
1586 -> 1583;
1586 -> 1226;
1587 -> 1205;
1588 -> 1171;
1588 -> 1586;
1588 -> 1587;
1588 -> 1205;
1589 -> 1170;
1589 -> 1586;
1589 -> 1166;
1590 -> 1167;
1590 -> 0;
1590 -> 1166;
1591 -> 1169;
1591 -> 1166;
1592 -> 1172;
1592 -> 1166;
1593 -> 1170;
1593 -> 1166;
1594 -> 1591;
1594 -> 1592;
1594 -> 1593;
1594 -> 1171;
1594 -> 1161;
1594 -> 1589;
1594 -> 1166;
1595 -> 1166;
1596 -> 1156;
1597 -> 1161;
1597 -> 1594;
1597 -> 1156;
1598 -> 1150;
1598 -> 852;
1599 -> 1152;
1599 -> 1597;
1599 -> 1598;
1599 -> 1155;
1599 -> 1149;
1599 -> 1141;
1599 -> 852;
1600 -> 1150;
1600 -> 852;
1601 -> 1142;
1601 -> 852;
1602 -> 1144;
1602 -> 852;
1603 -> 1143;
1603 -> 1602;
1604 -> 1601;
1604 -> 1599;
1604 -> 1602;
1605 -> 1146;
1605 -> 1602;
1606 -> 1602;
1607 -> 1604;
1607 -> 1606;
1608 -> 1604;
1608 -> 1606;
1609 -> 1604;
1609 -> 1606;
1610 -> 1604;
1610 -> 1606;
1611 -> 1606;
1612 -> 1608;
1612 -> 1604;
1612 -> 1611;
1612 -> 1606;
1613 -> 0;
1613 -> 1606;
1614 -> 1612;
1614 -> 1606;
1615 -> 1603;
1615 -> 1612;
1615 -> 1602;
1616 -> 1602;
1617 -> 1149;
1617 -> 1602;
1618 -> 1601;
1618 -> 1602;
1619 -> 1143;
1619 -> 1602;
1620 -> 1145;
1620 -> 1602;
1621 -> 1599;
1621 -> 1602;
1622 -> 1616;
1622 -> 1602;
1623 -> 1147;
1623 -> 1602;
1624 -> 1148;
1624 -> 1602;
1625 -> 1602;
1626 -> 1617;
1626 -> 1625;
1627 -> 1618;
1627 -> 1625;
1628 -> 1619;
1628 -> 1625;
1629 -> 1620;
1629 -> 1625;
1630 -> 1621;
1630 -> 1625;
1631 -> 1622;
1631 -> 1625;
1632 -> 1623;
1632 -> 1625;
1633 -> 1624;
1633 -> 1625;
1634 -> 1625;
1635 -> 1626;
1635 -> 1634;
1635 -> 1625;
1636 -> 1625;
1637 -> 1631;
1637 -> 1636;
1637 -> 1625;
1638 -> 1625;
1639 -> 1626;
1639 -> 1638;
1640 -> 1639;
1640 -> 1612;
1640 -> 1638;
1641 -> 1640;
1641 -> 1625;
1642 -> 1625;
1643 -> 1625;
1644 -> 1632;
1644 -> 1625;
1645 -> 1626;
1645 -> 1644;
1646 -> 1627;
1646 -> 1644;
1647 -> 1630;
1647 -> 1644;
1648 -> 1631;
1648 -> 1644;
1649 -> 1633;
1649 -> 1644;
1650 -> 1644;
1651 -> 1645;
1651 -> 1650;
1652 -> 1646;
1652 -> 1650;
1653 -> 1647;
1653 -> 1650;
1654 -> 1648;
1654 -> 1650;
1655 -> 1649;
1655 -> 1650;
1656 -> 1655;
1656 -> 1650;
1657 -> 1650;
1658 -> 1656;
1658 -> 1657;
1659 -> 1651;
1659 -> 1657;
1660 -> 1657;
1661 -> 1659;
1661 -> 1612;
1661 -> 1660;
1661 -> 1657;
1662 -> 1661;
1663 -> 1659;
1663 -> 1661;
1664 -> 1661;
1665 -> 1663;
1665 -> 1664;
1666 -> 1664;
1667 -> 1665;
1667 -> 1666;
1668 -> 1666;
1669 -> 1667;
1669 -> 1668;
1670 -> 1669;
1670 -> 1666;
1671 -> 1667;
1671 -> 1664;
1672 -> 1664;
1673 -> 1661;
1674 -> 1673;
1674 -> 1671;
1675 -> 1674;
1675 -> 1661;
1676 -> 1661;
1677 -> 1659;
1677 -> 1676;
1678 -> 1677;
1678 -> 1671;
1678 -> 1676;
1679 -> 1676;
1680 -> 1678;
1680 -> 1679;
1681 -> 1680;
1681 -> 1678;
1681 -> 1679;
1682 -> 1679;
1683 -> 1681;
1683 -> 1682;
1684 -> 1682;
1685 -> 1683;
1685 -> 1684;
1686 -> 1684;
1687 -> 1686;
1688 -> 1685;
1688 -> 1687;
1689 -> 1688;
1689 -> 1686;
1690 -> 1684;
1691 -> 1685;
1691 -> 1682;
1692 -> 1691;
1692 -> 1661;
1693 -> 1675;
1693 -> 1692;
1693 -> 1661;
1694 -> 1671;
1694 -> 1693;
1696 -> 0;
1698 -> 1695;
1698 -> 1697;
1699 -> 1696;
1699 -> 1697;
1700 -> 1697;
1701 -> 1700;
1701 -> 1697;
1702 -> 1698;
1702 -> 1700;
1702 -> 1697;
1703 -> 1699;
1703 -> 1700;
1703 -> 1697;
1704 -> 1697;
1705 -> 1704;
1705 -> 1694;
1706 -> 1659;
1706 -> 1691;
1706 -> 1661;
1707 -> 1705;
1707 -> 1661;
1708 -> 1661;
1709 -> 1706;
1709 -> 1707;
1709 -> 1708;
1709 -> 1702;
1709 -> 1703;
1709 -> 1691;
1709 -> 0;
1709 -> 1661;
1710 -> 1659;
1710 -> 1709;
1710 -> 1657;
1711 -> 1710;
1711 -> 1650;
1712 -> 1711;
1712 -> 1709;
1712 -> 1650;
1713 -> 1711;
1713 -> 1709;
1713 -> 1650;
1714 -> 1654;
1714 -> 1713;
1714 -> 1616;
1714 -> 1709;
1714 -> 1650;
1715 -> 1711;
1715 -> 1714;
1715 -> 1650;
1716 -> 1650;
1717 -> 1715;
1717 -> 1716;
1717 -> 1650;
1718 -> 1717;
1719 -> 1626;
1719 -> 1625;
1720 -> 1627;
1720 -> 1625;
1721 -> 1628;
1721 -> 1625;
1722 -> 1629;
1722 -> 1625;
1723 -> 1630;
1723 -> 1625;
1724 -> 1631;
1724 -> 1625;
1725 -> 1632;
1725 -> 1625;
1726 -> 1718;
1726 -> 1625;
1727 -> 1633;
1727 -> 1625;
1728 -> 1625;
1729 -> 1625;
1730 -> 1719;
1730 -> 1729;
1731 -> 1720;
1731 -> 1729;
1732 -> 1721;
1732 -> 1729;
1733 -> 1722;
1733 -> 1729;
1734 -> 1723;
1734 -> 1729;
1735 -> 1724;
1735 -> 1729;
1736 -> 1725;
1736 -> 1729;
1737 -> 1726;
1737 -> 1729;
1738 -> 1727;
1738 -> 1729;
1739 -> 1728;
1739 -> 1729;
1740 -> 1729;
1741 -> 1740;
1741 -> 1729;
1742 -> 1740;
1742 -> 1729;
1743 -> 1740;
1743 -> 1729;
1744 -> 1740;
1744 -> 1729;
1745 -> 1740;
1745 -> 1729;
1746 -> 1740;
1746 -> 1729;
1747 -> 1740;
1747 -> 1729;
1748 -> 1740;
1748 -> 1729;
1749 -> 1740;
1749 -> 1729;
1750 -> 1740;
1750 -> 1729;
1751 -> 1740;
1751 -> 1729;
1752 -> 1729;
1753 -> 1730;
1753 -> 1752;
1753 -> 1729;
1754 -> 1729;
1755 -> 1735;
1755 -> 1754;
1755 -> 1729;
1756 -> 1730;
1756 -> 1740;
1756 -> 1729;
1757 -> 1731;
1757 -> 1740;
1757 -> 1729;
1758 -> 1732;
1758 -> 1740;
1758 -> 1729;
1759 -> 1738;
1759 -> 1740;
1759 -> 1729;
1760 -> 1735;
1760 -> 1740;
1760 -> 1729;
1761 -> 1736;
1761 -> 1740;
1761 -> 1729;
1762 -> 1737;
1762 -> 1740;
1762 -> 1729;
1763 -> 1734;
1763 -> 1740;
1763 -> 1729;
1764 -> 1734;
1764 -> 1729;
1765 -> 1729;
1766 -> 1764;
1766 -> 1765;
1767 -> 1740;
1767 -> 1765;
1768 -> 1766;
1768 -> 1765;
1769 -> 1729;
1770 -> 1732;
1770 -> 1729;
1771 -> 1731;
1771 -> 1714;
1771 -> 1770;
1772 -> 1771;
1772 -> 1740;
1772 -> 1770;
1773 -> 1733;
1773 -> 1740;
1773 -> 1729;
1774 -> 1625;
1775 -> 1626;
1775 -> 1774;
1776 -> 1775;
1776 -> 1714;
1776 -> 1774;
1777 -> 1776;
1777 -> 1625;
1778 -> 1777;
1779 -> 1778;
1779 -> 1728;
1779 -> 1777;
1780 -> 1625;
1781 -> 1626;
1781 -> 1780;
1782 -> 1780;
1783 -> 1781;
1783 -> 1782;
1784 -> 1782;
1785 -> 1783;
1785 -> 1784;
1786 -> 1784;
1787 -> 1785;
1787 -> 1786;
1788 -> 1787;
1788 -> 1714;
1788 -> 1786;
1789 -> 1787;
1789 -> 1714;
1789 -> 1786;
1790 -> 1789;
1790 -> 1784;
1791 -> 1785;
1791 -> 1714;
1791 -> 1784;
1792 -> 1780;
1793 -> 1791;
1793 -> 1625;
1794 -> 1625;
1795 -> 1793;
1795 -> 1794;
1796 -> 1728;
1796 -> 1794;
1797 -> 1795;
1797 -> 1791;
1797 -> 1794;
1798 -> 1625;
1799 -> 1625;
1800 -> 1728;
1800 -> 1799;
1801 -> 1800;
1801 -> 1740;
1801 -> 1750;
1801 -> 1779;
1801 -> 1799;
1802 -> 1799;
1803 -> 1801;
1803 -> 1802;
1803 -> 1799;
1804 -> 1799;
1805 -> 1804;
1805 -> 1799;
1806 -> 1801;
1806 -> 1805;
1806 -> 1740;
1806 -> 1741;
1806 -> 1756;
1806 -> 1742;
1806 -> 1758;
1806 -> 1743;
1806 -> 1773;
1806 -> 1744;
1806 -> 1760;
1806 -> 1745;
1806 -> 1763;
1806 -> 1746;
1806 -> 1757;
1806 -> 1747;
1806 -> 1761;
1806 -> 1748;
1806 -> 1772;
1806 -> 1749;
1806 -> 1762;
1806 -> 1750;
1806 -> 1779;
1806 -> 1751;
1806 -> 1759;
1806 -> 1778;
1806 -> 1797;
1806 -> 1141;
1806 -> 1771;
1806 -> 1799;
1807 -> 1625;
1808 -> 1625;
1809 -> 1627;
1809 -> 1808;
1809 -> 1625;
1810 -> 1631;
1810 -> 1809;
1811 -> 1809;
1812 -> 1810;
1812 -> 1811;
1813 -> 1627;
1813 -> 1811;
1814 -> 1813;
1814 -> 1806;
1814 -> 1811;
1815 -> 1814;
1815 -> 1809;
1816 -> 1815;
1816 -> 1809;
1817 -> 1631;
1817 -> 1809;
1818 -> 1809;
1819 -> 1816;
1819 -> 1818;
1820 -> 1817;
1820 -> 1818;
1821 -> 1728;
1821 -> 1818;
1822 -> 1819;
1822 -> 1818;
1823 -> 1809;
1824 -> 1631;
1824 -> 1809;
1825 -> 1809;
1826 -> 1824;
1826 -> 1825;
1827 -> 1627;
1827 -> 1825;
1828 -> 1825;
1829 -> 1826;
1829 -> 1825;
1830 -> 1825;
1831 -> 1829;
1831 -> 1830;
1832 -> 1827;
1832 -> 1830;
1833 -> 1830;
1834 -> 1832;
1834 -> 1833;
1835 -> 1833;
1836 -> 1835;
1836 -> 1834;
1836 -> 1833;
1837 -> 1833;
1838 -> 1834;
1838 -> 1837;
1839 -> 1838;
1839 -> 1806;
1839 -> 1836;
1839 -> 1837;
1840 -> 1839;
1840 -> 1833;
1841 -> 1840;
1841 -> 1830;
1842 -> 1830;
1843 -> 1832;
1843 -> 1842;
1844 -> 1843;
1844 -> 1839;
1844 -> 1842;
1845 -> 1844;
1845 -> 1830;
1846 -> 1845;
1847 -> 1841;
1847 -> 1846;
1847 -> 1845;
1848 -> 1847;
1849 -> 1825;
1850 -> 1828;
1850 -> 1825;
1851 -> 1827;
1851 -> 1844;
1851 -> 1825;
1852 -> 1850;
1852 -> 1851;
1852 -> 1828;
1852 -> 1844;
1852 -> 1825;
1853 -> 1828;
1853 -> 1825;
1854 -> 1827;
1854 -> 1852;
1854 -> 1825;
1855 -> 1828;
1855 -> 1825;
1856 -> 1827;
1856 -> 1854;
1856 -> 1825;
1857 -> 1828;
1857 -> 1825;
1858 -> 1827;
1858 -> 1856;
1858 -> 1825;
1859 -> 1828;
1859 -> 1825;
1860 -> 1827;
1860 -> 1858;
1860 -> 1825;
1861 -> 1828;
1861 -> 1825;
1862 -> 1827;
1862 -> 1860;
1862 -> 1825;
1863 -> 1828;
1863 -> 1825;
1864 -> 1827;
1864 -> 1862;
1864 -> 1825;
1865 -> 1828;
1865 -> 1825;
1866 -> 1827;
1866 -> 1864;
1866 -> 1825;
1867 -> 1828;
1867 -> 1866;
1867 -> 1825;
1868 -> 1867;
1868 -> 1809;
1869 -> 1868;
1869 -> 1809;
1870 -> 1631;
1870 -> 1809;
1871 -> 1809;
1872 -> 1869;
1872 -> 1871;
1873 -> 1870;
1873 -> 1871;
1874 -> 1728;
1874 -> 1871;
1875 -> 1872;
1875 -> 1871;
1876 -> 1809;
1877 -> 1809;
1878 -> 1626;
1878 -> 1877;
1879 -> 1878;
1879 -> 1866;
1879 -> 1877;
1880 -> 1879;
1880 -> 1809;
1881 -> 1728;
1881 -> 1809;
1882 -> 1627;
1882 -> 1809;
1883 -> 1631;
1883 -> 1809;
1884 -> 1809;
1885 -> 1880;
1885 -> 1884;
1886 -> 0;
1886 -> 1884;
1887 -> 1880;
1887 -> 1886;
1887 -> 0;
1887 -> 1809;
1888 -> 1880;
1888 -> 1884;
1889 -> 1884;
1890 -> 1880;
1890 -> 1889;
1890 -> 1887;
1890 -> 1809;
1891 -> 1809;
1892 -> 1728;
1892 -> 1891;
1893 -> 1892;
1893 -> 1890;
1893 -> 1891;
1894 -> 1891;
1895 -> 1893;
1895 -> 1894;
1895 -> 1891;
1896 -> 1891;
1897 -> 1896;
1897 -> 1891;
1898 -> 1809;
1899 -> 1627;
1899 -> 1893;
1899 -> 1809;
1900 -> 1809;
1901 -> 1899;
1901 -> 1900;
1901 -> 1809;
1902 -> 1625;
1903 -> 1627;
1903 -> 1902;
1903 -> 1625;
1904 -> 1728;
1904 -> 1893;
1904 -> 1627;
1904 -> 1625;
1905 -> 1625;
1906 -> 1626;
1906 -> 1905;
1907 -> 1906;
1907 -> 1893;
1907 -> 1905;
1908 -> 1907;
1908 -> 1625;
1909 -> 1625;
1910 -> 1632;
1910 -> 1909;
1910 -> 1625;
1911 -> 1626;
1911 -> 1910;
1912 -> 1631;
1912 -> 1910;
1913 -> 1633;
1913 -> 1910;
1914 -> 1910;
1915 -> 1911;
1915 -> 1914;
1916 -> 1912;
1916 -> 1914;
1917 -> 1913;
1917 -> 1914;
1918 -> 1914;
1919 -> 1915;
1919 -> 1918;
1920 -> 1918;
1921 -> 1919;
1921 -> 1920;
1922 -> 1920;
1923 -> 1921;
1923 -> 1922;
1924 -> 1923;
1924 -> 1908;
1924 -> 1922;
1925 -> 1923;
1925 -> 1908;
1925 -> 1922;
1926 -> 1925;
1926 -> 1920;
1927 -> 1921;
1927 -> 1908;
1927 -> 1920;
1928 -> 1927;
1928 -> 1914;
1929 -> 1917;
1929 -> 1914;
1930 -> 1929;
1930 -> 1928;
1930 -> 1141;
1930 -> 1927;
1930 -> 1914;
1931 -> 1914;
1932 -> 1916;
1932 -> 1930;
1932 -> 1914;
1933 -> 1910;
1934 -> 1910;
1935 -> 1627;
1935 -> 1934;
1935 -> 1910;
1936 -> 1718;
1936 -> 1934;
1936 -> 1910;
1937 -> 1935;
1937 -> 1936;
1937 -> 1910;
1938 -> 1602;
1939 -> 1616;
1939 -> 1602;
1940 -> 1939;
1940 -> 1932;
1940 -> 1602;
1941 -> 1601;
1941 -> 1940;
1942 -> 1616;
1942 -> 1940;
1943 -> 1940;
1944 -> 1941;
1944 -> 1943;
1945 -> 1942;
1945 -> 1943;
1946 -> 1149;
1946 -> 1943;
1947 -> 1946;
1947 -> 1940;
1947 -> 1943;
1948 -> 1946;
1948 -> 1940;
1948 -> 1943;
1949 -> 1940;
1950 -> 1146;
1950 -> 1602;
1951 -> 1616;
1951 -> 1602;
1952 -> 1148;
1952 -> 1602;
1953 -> 1950;
1953 -> 1951;
1953 -> 1952;
1953 -> 1149;
1953 -> 1940;
1953 -> 1141;
1953 -> 1602;
1954 -> 1602;
1955 -> 1599;
1955 -> 1953;
1955 -> 1602;
1956 -> 852;
1957 -> 858;
1957 -> 1956;
1957 -> 1953;
1957 -> 827;
1958 -> 858;
1958 -> 852;
1959 -> 858;
1959 -> 852;
1960 -> 858;
1960 -> 852;
1961 -> 858;
1961 -> 852;
1962 -> 858;
1962 -> 852;
1963 -> 858;
1963 -> 852;
1964 -> 858;
1964 -> 852;
1965 -> 852;
1966 -> 1958;
1966 -> 852;
1967 -> 1960;
1967 -> 852;
1968 -> 1965;
1968 -> 852;
1969 -> 1964;
1969 -> 1966;
1969 -> 1967;
1969 -> 1968;
1969 -> 1957;
1969 -> 1965;
1969 -> 852;
1970 -> 1958;
1970 -> 1969;
1970 -> 852;
1971 -> 852;
1972 -> 1964;
1972 -> 1971;
1973 -> 1971;
1974 -> 1972;
1974 -> 1973;
1975 -> 1974;
1975 -> 1969;
1975 -> 1973;
1976 -> 1974;
1976 -> 1969;
1976 -> 1973;
1977 -> 1976;
1977 -> 1971;
1978 -> 1972;
1978 -> 1969;
1978 -> 1971;
1979 -> 1978;
1979 -> 852;
1980 -> 852;
1981 -> 1965;
1981 -> 852;
1982 -> 852;
1983 -> 1981;
1983 -> 1982;
1984 -> 1964;
1984 -> 1982;
1985 -> 1982;
1986 -> 1984;
1986 -> 1985;
1987 -> 1985;
1988 -> 1986;
1988 -> 1987;
1989 -> 1988;
1989 -> 1979;
1989 -> 1987;
1990 -> 1988;
1990 -> 1979;
1990 -> 1987;
1991 -> 1990;
1991 -> 1985;
1992 -> 1986;
1992 -> 1979;
1992 -> 1985;
1993 -> 1992;
1993 -> 1982;
1994 -> 1982;
1995 -> 1994;
1995 -> 1993;
1995 -> 1992;
1995 -> 1982;
1996 -> 1993;
1996 -> 1994;
1996 -> 1992;
1996 -> 1995;
1997 -> 1995;
1998 -> 1997;
1998 -> 1995;
1999 -> 1996;
1999 -> 1995;
2000 -> 1999;
2000 -> 1995;
2001 -> 1982;
2002 -> 2001;
2002 -> 852;
2003 -> 1962;
2003 -> 852;
2004 -> 1965;
2004 -> 852;
2005 -> 1963;
2005 -> 852;
2006 -> 2003;
2006 -> 2004;
2006 -> 2005;
2006 -> 1964;
2006 -> 1999;
2006 -> 1957;
2006 -> 852;
2007 -> 852;
2008 -> 1963;
2008 -> 1957;
2008 -> 2006;
2008 -> 852;
2009 -> 852;
2010 -> 1961;
2010 -> 852;
2011 -> 852;
2016 -> 2013;
2016 -> 2012;
2017 -> 2014;
2017 -> 2012;
2018 -> 2015;
2018 -> 2012;
2019 -> 2012;
2020 -> 1964;
2020 -> 852;
2021 -> 2010;
2021 -> 852;
2022 -> 1959;
2022 -> 852;
2023 -> 2009;
2023 -> 852;
2024 -> 1963;
2024 -> 852;
2025 -> 852;
2026 -> 852;
2027 -> 2020;
2027 -> 2026;
2028 -> 2021;
2028 -> 2026;
2029 -> 2022;
2029 -> 2026;
2030 -> 2023;
2030 -> 2026;
2031 -> 2024;
2031 -> 2026;
2032 -> 2025;
2032 -> 2026;
2033 -> 2025;
2033 -> 2026;
2034 -> 2026;
2035 -> 2026;
2036 -> 2029;
2036 -> 2035;
2036 -> 2026;
2037 -> 2026;
2038 -> 2027;
2038 -> 2037;
2039 -> 2037;
2040 -> 2038;
2040 -> 2039;
2041 -> 2040;
2041 -> 2008;
2041 -> 2039;
2042 -> 2040;
2042 -> 2008;
2042 -> 2039;
2043 -> 2042;
2043 -> 2037;
2044 -> 2038;
2044 -> 2008;
2044 -> 2037;
2045 -> 2044;
2045 -> 2026;
2046 -> 2045;
2046 -> 2028;
2046 -> 2026;
2047 -> 2027;
2047 -> 2026;
2048 -> 2034;
2048 -> 2026;
2049 -> 2032;
2049 -> 2026;
2050 -> 2033;
2050 -> 2026;
2051 -> 2026;
2052 -> 2030;
2052 -> 2026;
2053 -> 2031;
2053 -> 2026;
2054 -> 2026;
2055 -> 2046;
2055 -> 2054;
2056 -> 2047;
2056 -> 2054;
2057 -> 2048;
2057 -> 2054;
2058 -> 2049;
2058 -> 2054;
2059 -> 2050;
2059 -> 2054;
2060 -> 2051;
2060 -> 2054;
2061 -> 2051;
2061 -> 2054;
2062 -> 2052;
2062 -> 2054;
2063 -> 2053;
2063 -> 2054;
2064 -> 2051;
2064 -> 2054;
2065 -> 2054;
2066 -> 2065;
2066 -> 2054;
2067 -> 2065;
2067 -> 2054;
2068 -> 2065;
2068 -> 2054;
2069 -> 2065;
2069 -> 2054;
2070 -> 2065;
2070 -> 2054;
2071 -> 2065;
2071 -> 2054;
2072 -> 2065;
2072 -> 2054;
2073 -> 2065;
2073 -> 2054;
2074 -> 2065;
2074 -> 2054;
2075 -> 2065;
2075 -> 2054;
2076 -> 2065;
2076 -> 2054;
2077 -> 2065;
2077 -> 2054;
2078 -> 2055;
2078 -> 2065;
2078 -> 2054;
2079 -> 2056;
2079 -> 2065;
2079 -> 2054;
2080 -> 2057;
2080 -> 2065;
2080 -> 2054;
2081 -> 2058;
2081 -> 2065;
2081 -> 2054;
2082 -> 2059;
2082 -> 2065;
2082 -> 2054;
2083 -> 2060;
2083 -> 2065;
2083 -> 2054;
2084 -> 2061;
2084 -> 2065;
2084 -> 2054;
2085 -> 2062;
2085 -> 2065;
2085 -> 2054;
2086 -> 2063;
2086 -> 2065;
2086 -> 2054;
2087 -> 2026;
2088 -> 2027;
2088 -> 2087;
2089 -> 2087;
2090 -> 2088;
2090 -> 2089;
2091 -> 2090;
2091 -> 2044;
2091 -> 2089;
2092 -> 2090;
2092 -> 2044;
2092 -> 2089;
2093 -> 2092;
2093 -> 2087;
2094 -> 2088;
2094 -> 2044;
2094 -> 2087;
2095 -> 2094;
2095 -> 2026;
2096 -> 2095;
2096 -> 2051;
2096 -> 2094;
2096 -> 2065;
2096 -> 2066;
2096 -> 2078;
2096 -> 2067;
2096 -> 2079;
2096 -> 2068;
2096 -> 2080;
2096 -> 2069;
2096 -> 2081;
2096 -> 2070;
2096 -> 2082;
2096 -> 2071;
2096 -> 2083;
2096 -> 2072;
2096 -> 2084;
2096 -> 2073;
2096 -> 2085;
2096 -> 2074;
2096 -> 2075;
2096 -> 2076;
2096 -> 2077;
2096 -> 2086;
2096 -> 2025;
2096 -> 2009;
2096 -> 2008;
2096 -> 2026;
2097 -> 2026;
2098 -> 2096;
2098 -> 2097;
2099 -> 2096;
2099 -> 2097;
2100 -> 2099;
2100 -> 2096;
2100 -> 2097;
2101 -> 2098;
2101 -> 2100;
2101 -> 2097;
2102 -> 2101;
2103 -> 2101;
2104 -> 2101;
2105 -> 2103;
2105 -> 2104;
2106 -> 2099;
2106 -> 2104;
2107 -> 2106;
2107 -> 2100;
2107 -> 2104;
2108 -> 2104;
2109 -> 2107;
2110 -> 2101;
2111 -> 2101;
2112 -> 2110;
2112 -> 2111;
2113 -> 2099;
2113 -> 2111;
2114 -> 2113;
2114 -> 2100;
2114 -> 2111;
2115 -> 2111;
2116 -> 2114;
2117 -> 2101;
2118 -> 2099;
2118 -> 2117;
2119 -> 2118;
2119 -> 2100;
2119 -> 2117;
2120 -> 2101;
2121 -> 2101;
2122 -> 2121;
2122 -> 2101;
2123 -> 2122;
2124 -> 2122;
2125 -> 2123;
2125 -> 2124;
2126 -> 2099;
2126 -> 2124;
2127 -> 2126;
2127 -> 2100;
2127 -> 2124;
2128 -> 2124;
2129 -> 2127;
2130 -> 2122;
2131 -> 2099;
2131 -> 2130;
2132 -> 2131;
2132 -> 2100;
2132 -> 2119;
2132 -> 2130;
2133 -> 2122;
2134 -> 2122;
2135 -> 2099;
2135 -> 2100;
2135 -> 2134;
2135 -> 2122;
2136 -> 2122;
2137 -> 2134;
2137 -> 2136;
2138 -> 2134;
2138 -> 2136;
2139 -> 2099;
2139 -> 2136;
2140 -> 2137;
2140 -> 2136;
2141 -> 2138;
2141 -> 2136;
2142 -> 2140;
2142 -> 2141;
2142 -> 2136;
2143 -> 2136;
2144 -> 2142;
2144 -> 2143;
2145 -> 2139;
2145 -> 2143;
2146 -> 2145;
2146 -> 2100;
2146 -> 2143;
2147 -> 2143;
2148 -> 2146;
2149 -> 2136;
2150 -> 2122;
2151 -> 2099;
2151 -> 2150;
2152 -> 2151;
2152 -> 2100;
2152 -> 2119;
2152 -> 2132;
2152 -> 2150;
2153 -> 2150;
2154 -> 2151;
2154 -> 2100;
2154 -> 2119;
2154 -> 2132;
2154 -> 2152;
2154 -> 2153;
2154 -> 2150;
2155 -> 2122;
2156 -> 2122;
2157 -> 2122;
2158 -> 2156;
2158 -> 2157;
2159 -> 2099;
2159 -> 2157;
2160 -> 2159;
2160 -> 2100;
2160 -> 2157;
2161 -> 2157;
2162 -> 2160;
2163 -> 2101;
2164 -> 2101;
2165 -> 2163;
2165 -> 2164;
2166 -> 2099;
2166 -> 2164;
2167 -> 2166;
2167 -> 2100;
2167 -> 2164;
2168 -> 2164;
2169 -> 2167;
2170 -> 2101;
2171 -> 2099;
2171 -> 2170;
2172 -> 2171;
2172 -> 2100;
2172 -> 2119;
2172 -> 2132;
2172 -> 2152;
2172 -> 2170;
2173 -> 2101;
2174 -> 2099;
2174 -> 2100;
2174 -> 2097;
2175 -> 2098;
2175 -> 2100;
2175 -> 2119;
2175 -> 2132;
2175 -> 2152;
2175 -> 2172;
2175 -> 2097;
2176 -> 2099;
2176 -> 2100;
2176 -> 2119;
2176 -> 2132;
2176 -> 2152;
2176 -> 2172;
2176 -> 2175;
2177 -> 2099;
2177 -> 2175;
2178 -> 2177;
2178 -> 2175;
2178 -> 2176;
2178 -> 2100;
2178 -> 2119;
2178 -> 2132;
2178 -> 2152;
2178 -> 2172;
2179 -> 2175;
2180 -> 2178;
2180 -> 2179;
2181 -> 2178;
2182 -> 2178;
2183 -> 2182;
2183 -> 2178;
2184 -> 2178;
2185 -> 2182;
2185 -> 2183;
2185 -> 2184;
2185 -> 2178;
2186 -> 2181;
2186 -> 2178;
2187 -> 2178;
2188 -> 2186;
2188 -> 2187;
2189 -> 2182;
2189 -> 2187;
2190 -> 2189;
2190 -> 2183;
2190 -> 2187;
2191 -> 2188;
2191 -> 2187;
2192 -> 2187;
2193 -> 2191;
2193 -> 2192;
2194 -> 2193;
2194 -> 2192;
2195 -> 2194;
2195 -> 2190;
2195 -> 2192;
2196 -> 2187;
2197 -> 2189;
2197 -> 2195;
2197 -> 2196;
2197 -> 2187;
2198 -> 2188;
2198 -> 2187;
2199 -> 2198;
2199 -> 2195;
2199 -> 2187;
2200 -> 2199;
2200 -> 2187;
2201 -> 2187;
2202 -> 2187;
2203 -> 2202;
2203 -> 2187;
2204 -> 2188;
2204 -> 2187;
2205 -> 2201;
2205 -> 2187;
2206 -> 2202;
2206 -> 2187;
2207 -> 2187;
2208 -> 2204;
2208 -> 2207;
2209 -> 2205;
2209 -> 2207;
2210 -> 2206;
2210 -> 2207;
2211 -> 2189;
2211 -> 2207;
2212 -> 0;
2212 -> 2207;
2213 -> 2207;
2214 -> 2207;
2215 -> 2208;
2215 -> 2199;
2215 -> 2207;
2216 -> 2207;
2217 -> 2214;
2217 -> 2216;
2217 -> 2207;
2218 -> 0;
2218 -> 2217;
2219 -> 2207;
2220 -> 2219;
2220 -> 2187;
2221 -> 2218;
2221 -> 0;
2221 -> 2187;
2222 -> 2212;
2222 -> 0;
2222 -> 2221;
2223 -> 2221;
2224 -> 2178;
2225 -> 2182;
2225 -> 2199;
2225 -> 2178;
2226 -> 2181;
2226 -> 2199;
2226 -> 2225;
2227 -> 2178;
2227 -> 2226;
2227 -> 2179;
2228 -> 2226;
2229 -> 2226;
2230 -> 2226;
2231 -> 2226;
2232 -> 2226;
2233 -> 2232;
2233 -> 2226;
2234 -> 2226;
2235 -> 2231;
2235 -> 2226;
2236 -> 2232;
2236 -> 2226;
2237 -> 2226;
2238 -> 2234;
2238 -> 2237;
2239 -> 2235;
2239 -> 2237;
2240 -> 2236;
2240 -> 2237;
2241 -> 2226;
2241 -> 2237;
2242 -> 0;
2242 -> 2237;
2243 -> 2237;
2244 -> 2237;
2245 -> 2238;
2245 -> 2226;
2245 -> 2237;
2246 -> 2237;
2247 -> 2244;
2247 -> 2246;
2247 -> 2237;
2248 -> 0;
2248 -> 2247;
2249 -> 2237;
2250 -> 2249;
2250 -> 2226;
2251 -> 2248;
2251 -> 0;
2251 -> 2226;
2252 -> 2242;
2252 -> 0;
2252 -> 2251;
2253 -> 2251;
2254 -> 2226;
2255 -> 2226;
2256 -> 2255;
2256 -> 2226;
2256 -> 2254;
2257 -> 2255;
2258 -> 2256;
2258 -> 2257;
2258 -> 2255;
2259 -> 2256;
2259 -> 2255;
2260 -> 2255;
2261 -> 2255;
2262 -> 2261;
2262 -> 2255;
2263 -> 2256;
2263 -> 2255;
2264 -> 2260;
2264 -> 2255;
2265 -> 2261;
2265 -> 2255;
2266 -> 2255;
2267 -> 2263;
2267 -> 2266;
2268 -> 2264;
2268 -> 2266;
2269 -> 2265;
2269 -> 2266;
2270 -> 2256;
2270 -> 2266;
2271 -> 0;
2271 -> 2266;
2272 -> 2266;
2273 -> 2266;
2274 -> 2267;
2274 -> 2256;
2274 -> 2266;
2275 -> 2266;
2276 -> 2273;
2276 -> 2275;
2276 -> 2266;
2277 -> 0;
2277 -> 2276;
2278 -> 2266;
2279 -> 2278;
2279 -> 2255;
2280 -> 2277;
2280 -> 0;
2280 -> 2255;
2281 -> 2271;
2281 -> 0;
2281 -> 2280;
2282 -> 2280;
2283 -> 2098;
2283 -> 2256;
2283 -> 2097;
2284 -> 2283;
2285 -> 2284;
2286 -> 2283;
2287 -> 2283;
2288 -> 2283;
2289 -> 2287;
2289 -> 2288;
2290 -> 2099;
2290 -> 2288;
2291 -> 2290;
2291 -> 2256;
2291 -> 2288;
2292 -> 2288;
2293 -> 2291;
2294 -> 2283;
2295 -> 2294;
2295 -> 2256;
2295 -> 2284;
2296 -> 2294;
2297 -> 2294;
2297 -> 2256;
2297 -> 2284;
2297 -> 2295;
2297 -> 2296;
2298 -> 2283;
2299 -> 2283;
2300 -> 2283;
2301 -> 2299;
2301 -> 2300;
2302 -> 2099;
2302 -> 2300;
2303 -> 2302;
2303 -> 2256;
2303 -> 2300;
2304 -> 2300;
2305 -> 2303;
2306 -> 2026;
2307 -> 2051;
2307 -> 2295;
2307 -> 2306;
2307 -> 2026;
2308 -> 2034;
2308 -> 2026;
2309 -> 2026;
2310 -> 2032;
2310 -> 2309;
2310 -> 2026;
2311 -> 2310;
2312 -> 2027;
2312 -> 2311;
2313 -> 2311;
2314 -> 2312;
2314 -> 2295;
2314 -> 2313;
2315 -> 2313;
2316 -> 2314;
2316 -> 2310;
2317 -> 2316;
2318 -> 2030;
2318 -> 2316;
2319 -> 2031;
2319 -> 2316;
2320 -> 2316;
2321 -> 2317;
2321 -> 2320;
2322 -> 2317;
2322 -> 2320;
2323 -> 2318;
2323 -> 2320;
2324 -> 2319;
2324 -> 2320;
2325 -> 2321;
2325 -> 2320;
2326 -> 1962;
2326 -> 852;
2327 -> 2009;
2327 -> 852;
2328 -> 1963;
2328 -> 852;
2329 -> 2326;
2329 -> 2327;
2329 -> 2328;
2329 -> 1964;
2329 -> 2325;
2329 -> 852;
2330 -> 852;
2331 -> 858;
2331 -> 852;
2332 -> 858;
2332 -> 852;
2333 -> 858;
2333 -> 852;
2334 -> 858;
2334 -> 852;
2335 -> 852;
2336 -> 2334;
2336 -> 2329;
2336 -> 2335;
2336 -> 852;
2337 -> 2331;
2337 -> 852;
2338 -> 852;
2339 -> 2337;
2339 -> 2338;
2340 -> 2334;
2340 -> 2338;
2341 -> 2338;
2342 -> 2340;
2342 -> 2329;
2342 -> 2341;
2342 -> 2338;
2343 -> 852;
2344 -> 858;
2344 -> 852;
2345 -> 852;
2346 -> 2344;
2346 -> 2345;
2347 -> 2345;
2348 -> 2346;
2348 -> 2347;
2349 -> 2347;
2350 -> 2348;
2350 -> 2349;
2351 -> 2349;
2352 -> 2350;
2352 -> 2351;
2353 -> 2352;
2353 -> 2329;
2353 -> 2351;
2354 -> 2352;
2354 -> 2329;
2354 -> 2351;
2355 -> 2354;
2355 -> 2349;
2356 -> 2345;
2357 -> 858;
2357 -> 852;
2358 -> 852;
2359 -> 2357;
2359 -> 2358;
2360 -> 2358;
2361 -> 2359;
2361 -> 2360;
2362 -> 2361;
2362 -> 2329;
2362 -> 2360;
2363 -> 2361;
2363 -> 2329;
2363 -> 2360;
2364 -> 2363;
2364 -> 2358;
2365 -> 852;
2366 -> 858;
2366 -> 852;
2367 -> 852;
2368 -> 2366;
2368 -> 2367;
2369 -> 2367;
2370 -> 2368;
2370 -> 2369;
2371 -> 2370;
2371 -> 2329;
2371 -> 2369;
2372 -> 2370;
2372 -> 2329;
2372 -> 2369;
2373 -> 2372;
2373 -> 2367;
2374 -> 858;
2374 -> 852;
2375 -> 858;
2375 -> 852;
2376 -> 852;
2377 -> 2375;
2377 -> 2376;
2378 -> 2377;
2378 -> 2329;
2378 -> 2376;
2379 -> 2378;
2379 -> 852;
2380 -> 2379;
2380 -> 2329;
2380 -> 852;
2381 -> 852;
2382 -> 858;
2382 -> 2381;
2382 -> 2329;
2382 -> 827;
2383 -> 858;
2383 -> 852;
2384 -> 858;
2384 -> 852;
2385 -> 2384;
2385 -> 2382;
2385 -> 852;
2386 -> 852;
2387 -> 2386;
2387 -> 2385;
2387 -> 2382;
2387 -> 852;
2388 -> 2385;
2388 -> 2386;
2388 -> 2382;
2388 -> 2387;
2389 -> 2388;
2390 -> 2383;
2390 -> 2388;
2391 -> 2388;
2392 -> 2389;
2392 -> 2391;
2393 -> 2390;
2393 -> 2391;
2394 -> 2384;
2394 -> 2391;
2395 -> 2394;
2395 -> 2388;
2395 -> 2391;
2396 -> 2392;
2396 -> 2391;
2397 -> 2395;
2397 -> 2396;
2397 -> 2391;
2398 -> 2391;
2399 -> 2392;
2399 -> 2391;
2400 -> 2398;
2400 -> 2391;
2401 -> 2394;
2401 -> 2388;
2401 -> 2399;
2401 -> 2400;
2401 -> 2391;
2402 -> 2392;
2402 -> 2391;
2403 -> 2391;
2404 -> 2391;
2405 -> 2402;
2405 -> 2404;
2406 -> 2403;
2406 -> 2404;
2407 -> 2406;
2407 -> 2404;
2408 -> 2404;
2409 -> 2405;
2409 -> 2408;
2409 -> 2404;
2410 -> 2405;
2410 -> 2406;
2410 -> 2404;
2411 -> 2392;
2411 -> 2391;
2412 -> 2403;
2412 -> 2391;
2413 -> 2394;
2413 -> 2401;
2413 -> 2411;
2413 -> 2412;
2413 -> 2410;
2413 -> 2391;
2414 -> 2413;
2414 -> 2403;
2414 -> 2391;
2415 -> 2392;
2415 -> 2414;
2416 -> 2413;
2416 -> 2414;
2417 -> 2393;
2417 -> 2414;
2418 -> 2414;
2419 -> 2415;
2419 -> 2418;
2420 -> 2416;
2420 -> 2418;
2421 -> 2417;
2421 -> 2418;
2422 -> 2394;
2422 -> 2418;
2423 -> 2422;
2423 -> 2413;
2423 -> 2418;
2424 -> 2418;
2425 -> 2420;
2425 -> 2424;
2426 -> 2425;
2426 -> 2413;
2426 -> 2424;
2427 -> 2426;
2427 -> 2418;
2428 -> 2423;
2428 -> 2413;
2428 -> 2418;
2429 -> 2422;
2429 -> 2413;
2429 -> 0;
2429 -> 2418;
2430 -> 2427;
2430 -> 2413;
2430 -> 2418;
2431 -> 2429;
2431 -> 2430;
2431 -> 2418;
2432 -> 2419;
2432 -> 2413;
2432 -> 2418;
2433 -> 2419;
2433 -> 2413;
2433 -> 2418;
2434 -> 2432;
2434 -> 0;
2434 -> 2418;
2435 -> 2418;
2436 -> 2422;
2436 -> 2413;
2436 -> 2435;
2436 -> 2418;
2437 -> 2414;
2438 -> 2391;
2439 -> 2392;
2439 -> 2413;
2439 -> 2438;
2439 -> 2391;
2440 -> 2413;
2440 -> 2391;
2441 -> 2413;
2441 -> 2391;
2442 -> 2383;
2442 -> 2439;
2443 -> 2442;
2443 -> 2439;
2444 -> 2439;
2445 -> 2439;
2446 -> 858;
2446 -> 2389;
2446 -> 2439;
2446 -> 2441;
2446 -> 2445;
2446 -> 827;
2447 -> 858;
2447 -> 852;
2448 -> 2447;
2448 -> 2446;
2448 -> 852;
2449 -> 858;
2449 -> 852;
2450 -> 858;
2450 -> 852;
2451 -> 2449;
2451 -> 2448;
2451 -> 852;
2452 -> 2450;
2452 -> 2448;
2452 -> 2451;
2453 -> 2449;
2453 -> 2451;
2454 -> 2451;
2455 -> 2452;
2455 -> 2454;
2456 -> 2453;
2456 -> 2454;
2457 -> 2450;
2457 -> 2454;
2458 -> 2455;
2458 -> 2448;
2458 -> 2454;
2459 -> 2458;
2460 -> 2455;
2460 -> 2448;
2460 -> 2458;
2461 -> 2458;
2462 -> 2461;
2462 -> 2460;
2462 -> 2448;
2462 -> 2458;
2463 -> 2460;
2463 -> 2461;
2463 -> 2448;
2463 -> 2462;
2464 -> 2456;
2464 -> 2448;
2464 -> 2462;
2465 -> 2462;
2466 -> 2463;
2466 -> 2465;
2467 -> 2464;
2467 -> 2465;
2468 -> 2457;
2468 -> 2465;
2469 -> 2468;
2469 -> 2463;
2469 -> 2465;
2470 -> 2466;
2470 -> 2465;
2471 -> 2469;
2471 -> 2470;
2471 -> 2465;
2472 -> 2465;
2473 -> 2466;
2473 -> 2472;
2473 -> 2465;
2474 -> 2465;
2475 -> 2466;
2475 -> 2465;
2476 -> 2474;
2476 -> 2465;
2477 -> 2468;
2477 -> 2463;
2477 -> 2475;
2477 -> 2476;
2477 -> 2465;
2478 -> 2466;
2478 -> 2465;
2479 -> 2467;
2479 -> 2465;
2480 -> 2465;
2481 -> 2478;
2481 -> 2480;
2482 -> 2479;
2482 -> 2480;
2483 -> 2468;
2483 -> 2480;
2484 -> 2481;
2484 -> 2477;
2484 -> 2480;
2485 -> 2480;
2486 -> 2484;
2486 -> 2485;
2486 -> 2480;
2487 -> 2484;
2487 -> 2477;
2487 -> 2485;
2487 -> 2480;
2488 -> 2481;
2488 -> 2480;
2489 -> 2483;
2489 -> 2486;
2490 -> 2481;
2490 -> 2486;
2491 -> 2486;
2492 -> 2486;
2493 -> 2489;
2493 -> 2492;
2494 -> 2490;
2494 -> 2492;
2495 -> 2491;
2495 -> 2492;
2496 -> 2495;
2496 -> 2492;
2497 -> 2495;
2497 -> 2492;
2498 -> 2492;
2499 -> 2493;
2499 -> 2498;
2499 -> 2492;
2500 -> 2492;
2501 -> 2494;
2501 -> 2500;
2501 -> 2492;
2502 -> 2493;
2502 -> 2495;
2502 -> 2492;
2503 -> 2494;
2503 -> 2495;
2503 -> 2492;
2504 -> 2466;
2504 -> 2465;
2505 -> 2491;
2505 -> 2465;
2506 -> 2468;
2506 -> 2487;
2506 -> 2504;
2506 -> 2505;
2506 -> 2502;
2506 -> 2503;
2506 -> 2465;
2507 -> 2506;
2507 -> 2465;
2508 -> 2459;
2508 -> 2507;
2508 -> 2506;
2508 -> 2462;
2509 -> 2456;
2509 -> 2448;
2509 -> 2458;
2510 -> 2457;
2510 -> 2508;
2510 -> 2509;
2511 -> 2455;
2511 -> 2458;
2512 -> 2459;
2512 -> 2508;
2512 -> 2458;
2513 -> 2458;
2514 -> 2455;
2514 -> 2512;
2515 -> 2459;
2515 -> 2512;
2515 -> 2458;
2516 -> 2512;
2516 -> 2454;
2517 -> 858;
2517 -> 2516;
2517 -> 2515;
2517 -> 2512;
2517 -> 827;
2518 -> 858;
2518 -> 852;
2519 -> 2518;
2519 -> 2517;
2519 -> 852;
2520 -> 858;
2520 -> 852;
2521 -> 2520;
2521 -> 2519;
2521 -> 852;
2522 -> 858;
2522 -> 852;
2523 -> 858;
2523 -> 852;
2524 -> 2522;
2524 -> 2521;
2524 -> 852;
2525 -> 852;
2526 -> 2523;
2526 -> 2521;
2526 -> 2525;
2527 -> 2526;
2527 -> 852;
2528 -> 852;
2529 -> 858;
2529 -> 852;
2530 -> 858;
2530 -> 852;
2531 -> 2529;
2531 -> 2527;
2531 -> 852;
2532 -> 852;
2533 -> 2531;
2533 -> 2532;
2534 -> 2530;
2534 -> 2532;
2535 -> 2534;
2535 -> 2527;
2535 -> 2532;
2536 -> 2535;
2536 -> 852;
2537 -> 852;
2538 -> 858;
2538 -> 852;
2539 -> 858;
2539 -> 852;
2540 -> 2538;
2540 -> 2536;
2540 -> 852;
2541 -> 852;
2542 -> 2540;
2542 -> 2541;
2543 -> 2539;
2543 -> 2541;
2544 -> 2541;
2545 -> 2542;
2545 -> 2541;
2546 -> 2541;
2547 -> 2545;
2547 -> 2546;
2548 -> 2543;
2548 -> 2546;
2549 -> 2546;
2550 -> 2548;
2550 -> 2549;
2551 -> 2549;
2552 -> 2551;
2552 -> 2550;
2552 -> 2549;
2553 -> 2549;
2554 -> 2550;
2554 -> 2553;
2555 -> 2554;
2555 -> 2536;
2555 -> 2552;
2555 -> 2553;
2556 -> 2555;
2556 -> 2549;
2557 -> 2556;
2557 -> 2546;
2558 -> 2546;
2559 -> 2548;
2559 -> 2558;
2560 -> 2555;
2560 -> 2546;
2561 -> 2560;
2562 -> 2557;
2562 -> 2561;
2562 -> 2560;
2563 -> 2562;
2564 -> 2541;
2565 -> 2544;
2565 -> 2541;
2566 -> 2544;
2566 -> 2541;
2567 -> 2544;
2567 -> 2541;
2568 -> 2544;
2568 -> 2541;
2569 -> 2544;
2569 -> 2541;
2570 -> 2544;
2570 -> 2541;
2571 -> 2544;
2571 -> 2541;
2572 -> 2544;
2572 -> 2541;
2573 -> 2544;
2573 -> 2555;
2573 -> 2541;
2574 -> 2573;
2574 -> 852;
2575 -> 852;
2576 -> 858;
2576 -> 852;
2577 -> 858;
2577 -> 852;
2578 -> 852;
2579 -> 2577;
2579 -> 2574;
2579 -> 852;
2580 -> 2578;
2580 -> 2579;
2580 -> 2574;
2580 -> 852;
2581 -> 852;
2582 -> 2578;
2582 -> 2580;
2582 -> 2581;
2582 -> 852;
2583 -> 2578;
2583 -> 2580;
2583 -> 2582;
2584 -> 2583;
2584 -> 2582;
2585 -> 852;
2586 -> 858;
2586 -> 852;
2587 -> 858;
2587 -> 852;
2588 -> 2587;
2588 -> 852;
2589 -> 2586;
2589 -> 852;
2590 -> 2587;
2590 -> 2583;
2590 -> 852;
2591 -> 2588;
2591 -> 2589;
2591 -> 2590;
2591 -> 2587;
2591 -> 2583;
2591 -> 852;
2592 -> 852;
2593 -> 2592;
2594 -> 2593;
2595 -> 2591;
2595 -> 2594;
2596 -> 2595;
2596 -> 2593;
2597 -> 2591;
2597 -> 2592;
2598 -> 2591;
2598 -> 2592;
2599 -> 2592;
2600 -> 2598;
2600 -> 2599;
2601 -> 2600;
2601 -> 2592;
2602 -> 2592;
2603 -> 2602;
2603 -> 2601;
2603 -> 2591;
2603 -> 2592;
2604 -> 858;
2604 -> 852;
2605 -> 2604;
2605 -> 2591;
2605 -> 852;
2606 -> 852;
2607 -> 2377;
2607 -> 2605;
2607 -> 2376;
2608 -> 2607;
2608 -> 852;
2609 -> 2608;
2609 -> 2605;
2609 -> 852;
2610 -> 2383;
2610 -> 2605;
2611 -> 2610;
2611 -> 2605;
2612 -> 2605;
2613 -> 858;
2613 -> 852;
2614 -> 2613;
2614 -> 852;
2615 -> 2614;
2615 -> 2613;
2615 -> 2605;
2615 -> 852;
2616 -> 852;
2617 -> 2522;
2617 -> 2615;
2617 -> 852;
2618 -> 2529;
2618 -> 2615;
2618 -> 852;
2619 -> 2618;
2619 -> 2532;
2620 -> 2538;
2620 -> 2615;
2620 -> 852;
2621 -> 2620;
2621 -> 2541;
2622 -> 2621;
2622 -> 2541;
2623 -> 2622;
2623 -> 2546;
2624 -> 2615;
2624 -> 2549;
2625 -> 2624;
2625 -> 2546;
2626 -> 2615;
2626 -> 2546;
2627 -> 2626;
2628 -> 2625;
2628 -> 2627;
2628 -> 2626;
2629 -> 2628;
2630 -> 2615;
2631 -> 858;
2631 -> 852;
2632 -> 858;
2632 -> 852;
2633 -> 2632;
2633 -> 2615;
2633 -> 852;
2634 -> 2632;
2634 -> 2615;
2634 -> 852;
2635 -> 2634;
2636 -> 2632;
2636 -> 2635;
2637 -> 2636;
2637 -> 2615;
2637 -> 2635;
2638 -> 2635;
2639 -> 2636;
2639 -> 2615;
2639 -> 2635;
2640 -> 2637;
2640 -> 2615;
2640 -> 2639;
2641 -> 2639;
2642 -> 2641;
2642 -> 2640;
2642 -> 2615;
2642 -> 2639;
2643 -> 2640;
2643 -> 2641;
2643 -> 2615;
2643 -> 2642;
2644 -> 2642;
2645 -> 2638;
2645 -> 2642;
2646 -> 2642;
2647 -> 2643;
2647 -> 2646;
2648 -> 2644;
2648 -> 2646;
2649 -> 2645;
2649 -> 2646;
2650 -> 2646;
2651 -> 2647;
2651 -> 2643;
2651 -> 0;
2651 -> 2646;
2652 -> 2651;
2653 -> 2647;
2653 -> 2643;
2653 -> 2646;
2654 -> 2653;
2655 -> 2653;
2656 -> 2654;
2656 -> 2655;
2656 -> 2653;
2657 -> 2654;
2657 -> 2656;
2658 -> 2652;
2658 -> 2656;
2659 -> 2649;
2659 -> 2656;
2660 -> 2656;
2661 -> 2657;
2661 -> 2660;
2662 -> 2658;
2662 -> 2660;
2663 -> 2659;
2663 -> 2660;
2664 -> 2660;
2665 -> 2661;
2665 -> 2643;
2665 -> 2653;
2665 -> 0;
2665 -> 2660;
2666 -> 2661;
2666 -> 2643;
2666 -> 2653;
2666 -> 0;
2666 -> 2665;
2667 -> 2666;
2668 -> 2656;
2669 -> 2665;
2670 -> 2669;
2670 -> 2661;
2671 -> 2661;
2672 -> 2661;
2672 -> 2643;
2672 -> 2653;
2672 -> 0;
2673 -> 2661;
2673 -> 2643;
2673 -> 2653;
2673 -> 0;
2673 -> 2672;
2674 -> 2673;
2675 -> 2636;
2675 -> 2643;
2675 -> 2635;
2676 -> 2635;
2677 -> 2637;
2677 -> 2643;
2677 -> 2676;
2678 -> 2677;
2678 -> 2635;
2679 -> 2637;
2679 -> 2635;
2680 -> 2638;
2680 -> 2635;
2681 -> 2635;
2682 -> 2679;
2682 -> 2681;
2683 -> 2680;
2683 -> 2681;
2684 -> 2681;
2685 -> 2684;
2685 -> 2681;
2686 -> 2682;
2686 -> 2643;
2686 -> 2681;
2687 -> 2683;
2687 -> 2681;
2688 -> 2681;
2689 -> 2685;
2689 -> 2688;
2690 -> 2686;
2690 -> 2688;
2691 -> 2687;
2691 -> 2688;
2692 -> 2688;
2693 -> 2690;
2693 -> 2692;
2693 -> 2688;
2694 -> 2681;
2695 -> 2681;
2696 -> 2682;
2696 -> 2686;
2696 -> 2695;
2697 -> 2696;
2697 -> 2681;
2698 -> 2684;
2698 -> 2697;
2699 -> 2682;
2699 -> 2686;
2699 -> 2697;
2700 -> 2683;
2700 -> 2697;
2701 -> 2697;
2702 -> 2698;
2702 -> 2701;
2703 -> 2699;
2703 -> 2701;
2704 -> 2700;
2704 -> 2701;
2705 -> 2701;
2706 -> 2703;
2706 -> 2705;
2706 -> 2701;
2707 -> 2697;
2708 -> 2684;
2708 -> 2681;
2709 -> 2708;
2709 -> 2635;
2710 -> 2638;
2710 -> 2635;
2711 -> 2710;
2711 -> 2634;
2712 -> 2711;
2712 -> 2632;
2712 -> 2634;
2713 -> 2634;
2714 -> 2632;
2714 -> 2699;
2714 -> 2712;
2714 -> 2710;
2714 -> 2713;
2714 -> 2634;
2715 -> 2632;
2715 -> 2699;
2715 -> 2712;
2715 -> 852;
2716 -> 858;
2716 -> 852;
2717 -> 858;
2717 -> 852;
2718 -> 858;
2718 -> 852;
2719 -> 2718;
2719 -> 2715;
2719 -> 852;
2720 -> 2719;
2720 -> 2715;
2720 -> 852;
2721 -> 852;
2722 -> 2721;
2722 -> 2720;
2722 -> 852;
2723 -> 2719;
2723 -> 2721;
2723 -> 2715;
2723 -> 2722;
2724 -> 2717;
2724 -> 2722;
2725 -> 2722;
2726 -> 2723;
2726 -> 2725;
2727 -> 2724;
2727 -> 2725;
2728 -> 2725;
2728 -> 2723;
2729 -> 2726;
2729 -> 2725;
2730 -> 2725;
2731 -> 2726;
2731 -> 2730;
2731 -> 2725;
2732 -> 2726;
2733 -> 2719;
2733 -> 2721;
2733 -> 2726;
2733 -> 2722;
2734 -> 858;
2734 -> 852;
2735 -> 0;
2735 -> 852;
2736 -> 858;
2736 -> 2735;
2736 -> 2733;
2736 -> 0;
2736 -> 827;
2737 -> 852;
2738 -> 2737;
2739 -> 2738;
2740 -> 858;
2740 -> 852;
2741 -> 852;
2742 -> 858;
2742 -> 2741;
2742 -> 2736;
2742 -> 827;
2743 -> 858;
2743 -> 852;
2744 -> 852;
2745 -> 2743;
2745 -> 2744;
2746 -> 2745;
2746 -> 2742;
2746 -> 2744;
2747 -> 2745;
2747 -> 2742;
2747 -> 2744;
2748 -> 2747;
2748 -> 852;
2749 -> 858;
2749 -> 852;
2750 -> 858;
2750 -> 852;
2751 -> 2750;
2751 -> 2748;
2751 -> 852;
2752 -> 0;
2752 -> 852;
2753 -> 2750;
2753 -> 2748;
2753 -> 852;
2754 -> 852;
2755 -> 2752;
2755 -> 2754;
2756 -> 2753;
2756 -> 2754;
2757 -> 2750;
2757 -> 2754;
2758 -> 2755;
2758 -> 2754;
2759 -> 2754;
2760 -> 2749;
2760 -> 2758;
2760 -> 2759;
2760 -> 2754;
2761 -> 2754;
2762 -> 2749;
2762 -> 2761;
2762 -> 2754;
2763 -> 2756;
2763 -> 2754;
2764 -> 2754;
2765 -> 2749;
2765 -> 2763;
2765 -> 2764;
2765 -> 2754;
2766 -> 2754;
2767 -> 2749;
2767 -> 2766;
2767 -> 2754;
2768 -> 852;
2769 -> 852;
2770 -> 2750;
2770 -> 2769;
2771 -> 2770;
2771 -> 2748;
2771 -> 2769;
2772 -> 2771;
2772 -> 852;
2773 -> 852;
2774 -> 2750;
2774 -> 2773;
2775 -> 2774;
2775 -> 2748;
2775 -> 2773;
2776 -> 2775;
2776 -> 852;
2777 -> 852;
2778 -> 2750;
2778 -> 2777;
2779 -> 2778;
2779 -> 2748;
2779 -> 2777;
2780 -> 2779;
2780 -> 852;
2781 -> 852;
2782 -> 2750;
2782 -> 2781;
2783 -> 2781;
2784 -> 2782;
2784 -> 2783;
2785 -> 2783;
2786 -> 2784;
2786 -> 2748;
2786 -> 2785;
2787 -> 2785;
2788 -> 2786;
2788 -> 2781;
2789 -> 2788;
2789 -> 2781;
2790 -> 2788;
2790 -> 2781;
2791 -> 2790;
2791 -> 852;
2792 -> 2791;
2792 -> 852;
2793 -> 858;
2793 -> 852;
2794 -> 2793;
2794 -> 2792;
2794 -> 852;
2795 -> 858;
2795 -> 852;
2796 -> 2795;
2796 -> 2794;
2796 -> 852;
2797 -> 2632;
2797 -> 2796;
2797 -> 852;
2798 -> 858;
2798 -> 852;
2799 -> 858;
2799 -> 852;
2800 -> 2798;
2800 -> 852;
2801 -> 2799;
2801 -> 2796;
2801 -> 2800;
2801 -> 852;
2802 -> 858;
2802 -> 852;
2803 -> 852;
2804 -> 858;
2804 -> 2803;
2804 -> 2801;
2804 -> 827;
2805 -> 858;
2805 -> 852;
2806 -> 2805;
2806 -> 2804;
2806 -> 852;
2807 -> 2370;
2807 -> 2806;
2807 -> 2369;
2808 -> 2370;
2808 -> 2806;
2808 -> 2369;
2809 -> 2808;
2809 -> 2367;
2810 -> 827;
2811 -> 840;
2811 -> 2810;
2811 -> 827;
2812 -> 2806;
2812 -> 827;
2813 -> 830;
2813 -> 2812;
2813 -> 2806;
2813 -> 827;
2814 -> 836;
2814 -> 827;
2815 -> 2814;
2815 -> 2813;
2815 -> 827;
2816 -> 2806;
2816 -> 2815;
2816 -> 827;
2817 -> 2815;
2817 -> 2816;
2818 -> 837;
2818 -> 2816;
2819 -> 2816;
2820 -> 2816;
2821 -> 2817;
2821 -> 2820;
2822 -> 2818;
2822 -> 2820;
2823 -> 2819;
2823 -> 2820;
2824 -> 2821;
2824 -> 2823;
2824 -> 2820;
2825 -> 2822;
2825 -> 837;
2825 -> 2820;
2826 -> 2823;
2826 -> 2824;
2826 -> 2825;
2827 -> 2826;
2827 -> 2825;
2828 -> 0;
2828 -> 2825;
2829 -> 2825;
2830 -> 2827;
2830 -> 2829;
2830 -> 2825;
2831 -> 2827;
2831 -> 2830;
2832 -> 2830;
2833 -> 2831;
2833 -> 2832;
2833 -> 2830;
2834 -> 2833;
2834 -> 2830;
2835 -> 2830;
2836 -> 2834;
2836 -> 2835;
2837 -> 2823;
2837 -> 2835;
2838 -> 2836;
2838 -> 2831;
2838 -> 2833;
2838 -> 2835;
2839 -> 2838;
2839 -> 2835;
2840 -> 2836;
2840 -> 2831;
2840 -> 2833;
2840 -> 2835;
2841 -> 2839;
2841 -> 2835;
2842 -> 2835;
2843 -> 2838;
2843 -> 2835;
2844 -> 2839;
2844 -> 2835;
2845 -> 2844;
2845 -> 2841;
2845 -> 2835;
2846 -> 2845;
2846 -> 2823;
2846 -> 2820;
2847 -> 736;
2847 -> 735;
2848 -> 735;
2849 -> 2847;
2849 -> 2848;
2850 -> 2848;
2851 -> 2849;
2851 -> 2850;
2852 -> 2850;
2853 -> 2851;
2853 -> 2852;
2854 -> 2853;
2854 -> 2846;
2854 -> 2852;
2855 -> 2853;
2855 -> 2846;
2855 -> 2852;
2856 -> 2855;
2856 -> 2850;
2857 -> 2851;
2857 -> 2846;
2857 -> 2850;
2858 -> 2857;
2858 -> 735;
2859 -> 736;
2859 -> 735;
2860 -> 727;
2860 -> 2858;
2860 -> 726;
2861 -> 2860;
2861 -> 730;
2861 -> 726;
2862 -> 727;
2862 -> 2860;
2862 -> 726;
2863 -> 2862;
2863 -> 730;
2863 -> 726;
2864 -> 727;
2864 -> 2862;
2864 -> 726;
2865 -> 2864;
2865 -> 730;
2865 -> 726;
2866 -> 727;
2866 -> 2864;
2866 -> 726;
2867 -> 2866;
2867 -> 730;
2867 -> 726;
2868 -> 730;
2868 -> 696;
2868 -> 2866;
2868 -> 726;
2869 -> 726;
2870 -> 2868;
2870 -> 2869;
2871 -> 2869;
2872 -> 2871;
2873 -> 2872;
2874 -> 2870;
2874 -> 2873;
2875 -> 2874;
2875 -> 2872;
2876 -> 726;
2877 -> 722;
2877 -> 2870;
2877 -> 706;
2878 -> 2877;
2878 -> 714;
2878 -> 706;
2879 -> 712;
2879 -> 706;
2880 -> 722;
2880 -> 2879;
2880 -> 2877;
2880 -> 706;
2881 -> 706;
2882 -> 713;
2882 -> 2881;
2882 -> 706;
2883 -> 706;
2884 -> 707;
2884 -> 2883;
2884 -> 706;
2885 -> 708;
2885 -> 2883;
2885 -> 706;
2886 -> 2884;
2886 -> 2885;
2886 -> 706;
2887 -> 668;
2888 -> 668;
2889 -> 676;
2889 -> 2888;
2889 -> 668;
2890 -> 677;
2890 -> 2888;
2890 -> 668;
2891 -> 2889;
2891 -> 2890;
2891 -> 668;
2892 -> 684;
2892 -> 668;
2893 -> 2892;
2893 -> 636;
2894 -> 636;
2895 -> 655;
2895 -> 2894;
2895 -> 636;
2896 -> 2893;
2896 -> 2895;
2897 -> 2896;
2897 -> 636;
2898 -> 2896;
2898 -> 636;
2899 -> 2898;
2899 -> 598;
2900 -> 2899;
2900 -> 1;
2901 -> 1;
2902 -> 594;
2902 -> 2901;
2903 -> 2901;
2904 -> 2902;
2904 -> 2903;
2905 -> 2903;
2906 -> 2904;
2906 -> 2905;
2907 -> 2906;
2907 -> 2880;
2907 -> 2905;
2908 -> 2906;
2908 -> 2880;
2908 -> 2905;
2909 -> 2908;
2909 -> 2903;
2910 -> 2904;
2910 -> 2880;
2910 -> 2903;
2911 -> 2910;
2911 -> 1;
2912 -> 1;
2913 -> 594;
2913 -> 2912;
2914 -> 2912;
2915 -> 2913;
2915 -> 2914;
2916 -> 2914;
2917 -> 2915;
2917 -> 2916;
2918 -> 2917;
2918 -> 2910;
2918 -> 2916;
2919 -> 2917;
2919 -> 2910;
2919 -> 2916;
2920 -> 2919;
2920 -> 2914;
2921 -> 2915;
2921 -> 2910;
2921 -> 2914;
2922 -> 2921;
2922 -> 1;
2923 -> 0;
2923 -> 1;
2924 -> 1;
2925 -> 2923;
2925 -> 2924;
2926 -> 594;
2926 -> 2924;
2927 -> 2925;
2927 -> 0;
2927 -> 2924;
2928 -> 2924;
2929 -> 2925;
2929 -> 2924;
2930 -> 2926;
2930 -> 2929;
2930 -> 2921;
2930 -> 2924;
2931 -> 2930;
2932 -> 2931;
2933 -> 2932;
2933 -> 2931;
2934 -> 2931;
2934 -> 2930;
2935 -> 2925;
2935 -> 2930;
2936 -> 2934;
2936 -> 2925;
2936 -> 2924;
2937 -> 2934;
2937 -> 2924;
}