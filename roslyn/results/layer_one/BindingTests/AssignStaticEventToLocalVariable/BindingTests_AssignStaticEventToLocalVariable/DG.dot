digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 670221"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 670222"];
3 [label="param BindingTests(this) 670223"];
4 [label="'C' 670224"];
5 [label="DefaultTypeName = 'C' 670225"];
6 [label="'M' 670226"];
7 [label="DefaultMethodName = 'M' 670227"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 670228"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 670229"];
10 [label="param CompilingTestBase(this) 670230"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 670231"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 670232"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 670233"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 670234"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 670235"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 670236"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 670237"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 670238"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 670239"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 670240"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 670241"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 670242"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 670243"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 670244"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 670245"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 670246"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 670247"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 670248"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 670249"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 670250"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 670251"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 670252"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 670253"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 670254"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 670255"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 670256"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 670257"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 670258"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 670259"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 670260"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 670261"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 670262"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 670263"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 670264"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 670265"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 670266"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 670267"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 670268"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 670269"];
50 [label="LazyThreadSafetyMode.PublicationOnly 670270"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 670271"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 670272"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 670273"];
54 [label="LazyThreadSafetyMode.PublicationOnly 670274"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 670275"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 670276"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 670277"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 670278"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 670279"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 670280"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 670281"];
62 [label="LazyThreadSafetyMode.PublicationOnly 670282"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 670283"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 670284"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 670285"];
66 [label="LazyThreadSafetyMode.PublicationOnly 670286"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 670287"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 670288"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 670289"];
70 [label="LazyThreadSafetyMode.PublicationOnly 670290"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 670291"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 670292"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 670293"];
74 [label="LazyThreadSafetyMode.PublicationOnly 670294"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670295"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670296"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 670297"];
78 [label="LazyThreadSafetyMode.PublicationOnly 670298"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670299"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670300"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 670301"];
82 [label="LazyThreadSafetyMode.PublicationOnly 670302"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670303"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670304"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 670305"];
86 [label="LazyThreadSafetyMode.PublicationOnly 670306"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670307"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670308"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 670309"];
90 [label="LazyThreadSafetyMode.PublicationOnly 670310"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670311"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670312"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 670313"];
94 [label="LazyThreadSafetyMode.PublicationOnly 670314"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670315"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670316"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 670317"];
98 [label="LazyThreadSafetyMode.PublicationOnly 670318"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670319"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670320"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 670321"];
102 [label="LazyThreadSafetyMode.PublicationOnly 670322"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 670323"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 670324"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 670325"];
106 [label="LazyThreadSafetyMode.PublicationOnly 670326"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 670327"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 670328"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 670329"];
110 [label="LazyThreadSafetyMode.PublicationOnly 670330"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670331"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670332"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 670333"];
114 [label="LazyThreadSafetyMode.PublicationOnly 670334"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670335"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670336"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 670337"];
118 [label="LazyThreadSafetyMode.PublicationOnly 670338"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670339"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670340"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 670341"];
122 [label="LazyThreadSafetyMode.PublicationOnly 670342"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670343"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670344"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 670345"];
126 [label="LazyThreadSafetyMode.PublicationOnly 670346"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 670347"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 670348"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 670349"];
130 [label="LazyThreadSafetyMode.PublicationOnly 670350"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670351"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670352"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 670353"];
134 [label="LazyThreadSafetyMode.PublicationOnly 670354"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670355"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670356"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 670357"];
138 [label="LazyThreadSafetyMode.PublicationOnly 670358"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670359"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670360"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 670361"];
142 [label="LazyThreadSafetyMode.PublicationOnly 670362"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670363"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670364"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 670365"];
146 [label="LazyThreadSafetyMode.PublicationOnly 670366"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670367"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670368"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 670369"];
150 [label="LazyThreadSafetyMode.PublicationOnly 670370"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670371"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670372"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 670373"];
154 [label="LazyThreadSafetyMode.PublicationOnly 670374"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670375"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670376"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 670377"];
158 [label="LazyThreadSafetyMode.PublicationOnly 670378"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670379"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670380"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 670381"];
162 [label="LazyThreadSafetyMode.PublicationOnly 670382"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670383"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670384"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 670385"];
166 [label="LazyThreadSafetyMode.PublicationOnly 670386"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670387"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670388"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 670389"];
170 [label="LazyThreadSafetyMode.PublicationOnly 670390"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670391"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670392"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 670393"];
174 [label="LazyThreadSafetyMode.PublicationOnly 670394"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670395"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670396"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 670397"];
178 [label="LazyThreadSafetyMode.PublicationOnly 670398"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670399"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 670400"];
181 [label="@'R:\\Invalid.dll' 670401"];
182 [label="fullPath: @'R:\\Invalid.dll' 670402"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 670403"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 670404"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 670405"];
186 [label="MscorlibRef_v4_0_30316_17626 670406"];
187 [label="Net451.mscorlib 670407"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 670408"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 670409"];
190 [label="'/*<bind>*/' 670410"];
191 [label="StartString = '/*<bind>*/' 670411"];
192 [label="'/*</bind>*/' 670412"];
193 [label="EndString = '/*</bind>*/' 670413"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 670414"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 670415"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 670416"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 670417"];
198 [label="param CSharpTestBase(this) 670418"];
199 [label="param CommonTestBase(this) 670419"];
200 [label="param TestBase(this) 670420"];
201 [label="_temp 670421"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 670422"];
203 [label="param AssignStaticEventToLocalVariable(this) 670423"];
204 [label="var source =\n@'delegate void Foo();\nclass driver\n{\n    public static event Foo e;\n    static void Main(string[] args)\n    {\n        Foo x = e;\n    }\n}'; 670424"];
205 [label="CreateCompilation(source).VerifyDiagnostics(); 670425"];
206 [label="source 670426"];
207 [label="param operator(string source) 670427"];
208 [label="source 670428"];
209 [label="new CSharpTestSource(source) 670429"];
210 [label="param CSharpTestSource(object value) 670430"];
211 [label="param CSharpTestSource(this) 670431"];
212 [label="Value 670432"];
213 [label="CreateCompilation(source).VerifyDiagnostics(); 670433"];
214 [label="CreateCompilation(source).VerifyDiagnostics(); 670434"];
215 [label="CreateCompilation(source) 670435"];
216 [label="param CreateCompilation(CSharpTestSource source) 670436"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 670437"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 670438"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 670439"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 670440"];
221 [label="param CreateCompilation(string assemblyName = '') 670441"];
222 [label="param CreateCompilation(string sourceFileName = '') 670442"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 670443"];
224 [label="source 670444"];
225 [label="targetFramework 670445"];
226 [label="references 670446"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 670447"];
228 [label="param GetReferences(TargetFramework tf) 670448"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 670449"];
230 [label="var references = GetReferences(tf); 670450"];
231 [label="GetReferences(tf) 670451"];
232 [label="param GetReferences(TargetFramework targetFramework) 670452"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 670453"];
234 [label="StandardReferences 670454"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 670455"];
236 [label="Mscorlib46ExtendedReferences 670456"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 670457"];
238 [label="TestBase.ValueTupleRef 670458"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 670459"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 670460"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 670461"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 670462"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 670463"];
244 [label="return references; 670464"];
245 [label="options 670465"];
246 [label="parseOptions 670466"];
247 [label="assemblyName 670467"];
248 [label="sourceFileName 670468"];
249 [label="skipUsesIsNullable 670469"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 670470"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 670471"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 670472"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 670473"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 670474"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 670475"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 670476"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 670477"];
258 [label="source 670478"];
259 [label="references 670479"];
260 [label="options 670480"];
261 [label="parseOptions 670481"];
262 [label="assemblyName 670482"];
263 [label="sourceFileName 670483"];
264 [label="skipUsesIsNullable 670484"];
265 [label="null 670485"];
266 [label="experimentalFeature: null 670486"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 670487"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 670488"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 670489"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 670490"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 670491"];
272 [label="param CreateCompilationCore(string assemblyName) 670492"];
273 [label="param CreateCompilationCore(string sourceFileName) 670493"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 670494"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 670495"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 670496"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 670497"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 670498"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 670499"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 670500"];
281 [label="param GetSyntaxTrees(this) 670501"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 670502"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 670503"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 670504"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 670505"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 670506"];
287 [label="param Parse(string text) 670507"];
288 [label="param Parse(string filename = '') 670508"];
289 [label="param Parse(CSharpParseOptions options = null) 670509"];
290 [label="param Parse(Encoding encoding = null) 670510"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 670511"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 670512"];
293 [label="kind: SourceCodeKind.Regular 670513"];
294 [label="documentationMode: DocumentationMode.Parse 670514"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 670515"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 670516"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 670517"];
298 [label="SourceCodeKind.Script 670518"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 670519"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 670520"];
301 [label="LanguageVersion.CSharp6 670521"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 670522"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 670523"];
304 [label="LanguageVersion.CSharp7 670524"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 670525"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 670526"];
307 [label="LanguageVersion.CSharp7_1 670527"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 670528"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 670529"];
310 [label="LanguageVersion.CSharp7_2 670530"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 670531"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 670532"];
313 [label="LanguageVersion.CSharp7_3 670533"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 670534"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 670535"];
316 [label="LanguageVersion.Default 670536"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 670537"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 670538"];
319 [label="LanguageVersion.Preview 670539"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 670540"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 670541"];
322 [label="LanguageVersion.CSharp8 670542"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 670543"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 670544"];
325 [label="LanguageVersion.CSharp9 670545"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 670546"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 670547"];
328 [label="DocumentationMode.Diagnose 670548"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 670549"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 670550"];
331 [label="Regular 670551"];
332 [label="'UseLegacyStrongNameProvider' 670552"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 670553"];
334 [label="param WithFeature(this CSharpParseOptions options) 670554"];
335 [label="param WithFeature(string feature) 670555"];
336 [label="param WithFeature(string value = 'true') 670556"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 670557"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 670558"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 670559"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 670560"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 670561"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 670562"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 670563"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 670564"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 670565"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 670566"];
347 [label="1 670567"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 670568"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 670569"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 670570"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 670571"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 670572"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 670573"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 670574"];
355 [label="LanguageVersion.CSharp8 670575"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 670576"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 670577"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 670578"];
359 [label="new SmallDictionary<string, string> { } 670579"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 670580"];
361 [label="kind: SourceCodeKind.Regular 670581"];
362 [label="documentationMode: DocumentationMode.None 670582"];
363 [label="languageVersion: LanguageVersion.Preview 670583"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 670584"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 670585"];
366 [label="s_experimentalFeatures 670586"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 670587"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 670588"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 670589"];
370 [label="'testV7SwitchBinder' 670590"];
371 [label="'true' 670591"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 670592"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 670593"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 670594"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 670595"];
376 [label="RegularWithRecursivePatterns = Regular8 670596"];
377 [label="RegularWithoutPatternCombinators = Regular8 670597"];
378 [label="RegularWithPatternCombinators = RegularPreview 670598"];
379 [label="OutputKind.DynamicallyLinkedLibrary 670599"];
380 [label="OptimizationLevel.Release 670600"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 670601"];
382 [label="param CreateTestOptions(OutputKind outputKind) 670602"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 670603"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 670604"];
385 [label="outputKind 670605"];
386 [label="optimizationLevel: optimizationLevel 670606"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 670607"];
388 [label="allowUnsafe: allowUnsafe 670608"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670609"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670610"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 670611"];
392 [label="OutputKind.ConsoleApplication 670612"];
393 [label="OptimizationLevel.Release 670613"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 670614"];
395 [label="param CreateTestOptions(OutputKind outputKind) 670615"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 670616"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 670617"];
398 [label="outputKind 670618"];
399 [label="optimizationLevel: optimizationLevel 670619"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 670620"];
401 [label="allowUnsafe: allowUnsafe 670621"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670622"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670623"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 670624"];
405 [label="true 670625"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 670626"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 670627"];
408 [label="true 670628"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 670629"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 670630"];
411 [label="OutputKind.DynamicallyLinkedLibrary 670631"];
412 [label="OptimizationLevel.Debug 670632"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 670633"];
414 [label="param CreateTestOptions(OutputKind outputKind) 670634"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 670635"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 670636"];
417 [label="outputKind 670637"];
418 [label="optimizationLevel: optimizationLevel 670638"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 670639"];
420 [label="allowUnsafe: allowUnsafe 670640"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670641"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670642"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 670643"];
424 [label="OutputKind.ConsoleApplication 670644"];
425 [label="OptimizationLevel.Debug 670645"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 670646"];
427 [label="param CreateTestOptions(OutputKind outputKind) 670647"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 670648"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 670649"];
430 [label="outputKind 670650"];
431 [label="optimizationLevel: optimizationLevel 670651"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 670652"];
433 [label="allowUnsafe: allowUnsafe 670653"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670654"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670655"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 670656"];
437 [label="OutputKind.WindowsRuntimeMetadata 670657"];
438 [label="OptimizationLevel.Release 670658"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 670659"];
440 [label="param CreateTestOptions(OutputKind outputKind) 670660"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 670661"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 670662"];
443 [label="outputKind 670663"];
444 [label="optimizationLevel: optimizationLevel 670664"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 670665"];
446 [label="allowUnsafe: allowUnsafe 670666"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670667"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670668"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 670669"];
450 [label="OutputKind.WindowsRuntimeMetadata 670670"];
451 [label="OptimizationLevel.Debug 670671"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 670672"];
453 [label="param CreateTestOptions(OutputKind outputKind) 670673"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 670674"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 670675"];
456 [label="outputKind 670676"];
457 [label="optimizationLevel: optimizationLevel 670677"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 670678"];
459 [label="allowUnsafe: allowUnsafe 670679"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670680"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670681"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 670682"];
463 [label="OutputKind.NetModule 670683"];
464 [label="OptimizationLevel.Release 670684"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 670685"];
466 [label="param CreateTestOptions(OutputKind outputKind) 670686"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 670687"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 670688"];
469 [label="outputKind 670689"];
470 [label="optimizationLevel: optimizationLevel 670690"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 670691"];
472 [label="allowUnsafe: allowUnsafe 670692"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670693"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670694"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 670695"];
476 [label="OutputKind.NetModule 670696"];
477 [label="OptimizationLevel.Debug 670697"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 670698"];
479 [label="param CreateTestOptions(OutputKind outputKind) 670699"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 670700"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 670701"];
482 [label="outputKind 670702"];
483 [label="optimizationLevel: optimizationLevel 670703"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 670704"];
485 [label="allowUnsafe: allowUnsafe 670705"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670706"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 670707"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 670708"];
489 [label="true 670709"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 670710"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 670711"];
492 [label="true 670712"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 670713"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 670714"];
495 [label="true 670715"];
496 [label="DebugDll.WithAllowUnsafe(true) 670716"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 670717"];
498 [label="true 670718"];
499 [label="DebugExe.WithAllowUnsafe(true) 670719"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 670720"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 670721"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 670722"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 670723"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 670724"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 670725"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 670726"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 670727"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 670728"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 670729"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 670730"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 670731"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 670732"];
513 [label="DebugInformationFormat.Pdb 670733"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 670734"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 670735"];
516 [label="options = TestOptions.Regular; 670736"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 670737"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 670738"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 670739"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 670740"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 670741"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 670742"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 670743"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 670744"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 670745"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 670746"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 670747"];
528 [label="param CheckSerializable(SyntaxTree tree) 670748"];
529 [label="var stream = new MemoryStream(); 670749"];
530 [label="var root = tree.GetRoot(); 670750"];
531 [label="var root = tree.GetRoot(); 670751"];
532 [label="root.SerializeTo(stream); 670752"];
533 [label="root.SerializeTo(stream); 670753"];
534 [label="root.SerializeTo(stream); 670754"];
535 [label="stream.Position = 0; 670755"];
536 [label="stream.Position 670756"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 670757"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 670758"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 670759"];
540 [label="return tree; 670760"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 670761"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 670762"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 670763"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 670764"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 670765"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 670766"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 670767"];
548 [label="hasTopLevelStatements 670768"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 670769"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 670770"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 670771"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 670772"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 670773"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 670774"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 670775"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 670776"];
557 [label="return; 670777"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 670778"];
559 [label="var compilation = createCompilationLambda(); 670779"];
560 [label="var compilation = createCompilationLambda(); 670780"];
561 [label="return Guid.NewGuid().ToString('D'); 670781"];
562 [label="var compilation = createCompilationLambda(); 670782"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 670783"];
564 [label="IsNullableEnabled(compilation) 670784"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 670785"];
566 [label="var trees = compilation.SyntaxTrees; 670786"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 670787"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 670788"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 670789"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 670790"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 670791"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 670792"];
573 [label="return compilation; 670793"];
574 [label="CreateCompilation(source).VerifyDiagnostics() 670794"];
575 [label="param VerifyDiagnostics(this TCompilation c) 670795"];
576 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 670796"];
577 [label="var diagnostics = c.GetDiagnostics(); 670797"];
578 [label="null 670798"];
579 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 670799"];
580 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 670800"];
581 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 670801"];
582 [label="null 670802"];
583 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 670803"];
584 [label="param Imports(CSharpCompilation compilation) 670804"];
585 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 670805"];
586 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 670806"];
587 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 670807"];
588 [label="param Imports(DiagnosticBag diagnostics) 670808"];
589 [label="param Imports(this) 670809"];
590 [label="_compilation 670810"];
591 [label="_diagnostics 670811"];
592 [label="UsingAliases 670812"];
593 [label="Debug.Assert(usingAliases != null); 670813"];
594 [label="Debug.Assert(usingAliases != null); 670814"];
595 [label="Debug.Assert(!usings.IsDefault); 670815"];
596 [label="Debug.Assert(!externs.IsDefault); 670816"];
597 [label="_compilation 670817"];
598 [label="this.UsingAliases 670818"];
599 [label="this.Usings 670819"];
600 [label="_diagnostics 670820"];
601 [label="this.ExternAliases 670821"];
602 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 670822"];
603 [label="var diagnostics = c.GetDiagnostics(); 670823"];
604 [label="param FromGlobalUsings(CSharpCompilation compilation) 670824"];
605 [label="var usings = compilation.Options.Usings; 670825"];
606 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 670826"];
607 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 670827"];
608 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 670828"];
609 [label="return Empty; 670829"];
610 [label="var diagnostics = c.GetDiagnostics(); 670830"];
611 [label="param Complete(CancellationToken cancellationToken) 670831"];
612 [label="param Complete(this) 670832"];
613 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 670833"];
614 [label="cancellationToken.ThrowIfCancellationRequested(); 670834"];
615 [label="var incompletePart = _state.NextIncompletePart; 670835"];
616 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 670836"];
617 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 670837"];
618 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 670838"];
619 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 670839"];
620 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 670840"];
621 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 670841"];
622 [label="Validate() 670842"];
623 [label="param Validate(this) 670843"];
624 [label="if (this == Empty)\n            {\n                return;\n            } 670844"];
625 [label="return; 670845"];
626 [label="Validate(); 670846"];
627 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 670847"];
628 [label="return; 670848"];
629 [label="param Includes(this BinderFlags self) 670849"];
630 [label="param Includes(BinderFlags other) 670850"];
631 [label="return (self & other) == other; 670851"];
632 [label="var diagnostics = c.GetDiagnostics(); 670852"];
633 [label="0 670853"];
634 [label="ExternalScope = 0 670854"];
635 [label="1 670855"];
636 [label="TopLevelScope = 1 670856"];
637 [label="2 670857"];
638 [label="ValueKindInsignificantBits = 2 670858"];
639 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 670859"];
640 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 670860"];
641 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 670861"];
642 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 670862"];
643 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 670863"];
644 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 670864"];
645 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 670865"];
646 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 670866"];
647 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 670867"];
648 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 670868"];
649 [label="10 670869"];
650 [label="MaxParameterListsForErrorRecovery = 10 670870"];
651 [label="'<>h__TransparentIdentifier' 670871"];
652 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 670872"];
653 [label="s => (MethodSymbol)s 670873"];
654 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 670874"];
655 [label="s => (PropertySymbol)s 670875"];
656 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 670876"];
657 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 670877"];
658 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 670878"];
659 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 670879"];
660 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 670880"];
661 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 670881"];
662 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 670882"];
663 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 670883"];
664 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 670884"];
665 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 670885"];
666 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 670886"];
667 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 670887"];
668 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 670888"];
669 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 670889"];
670 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 670890"];
671 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 670891"];
672 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 670892"];
673 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 670893"];
674 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 670894"];
675 [label="param GetWellKnownTypeMember(WellKnownMember member) 670895"];
676 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 670896"];
677 [label="param GetWellKnownTypeMember(Location location = null) 670897"];
678 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 670898"];
679 [label="param GetWellKnownTypeMember(bool isOptional = false) 670899"];
680 [label="Debug.Assert((syntax != null) ^ (location != null)); 670900"];
681 [label="Debug.Assert((syntax != null) ^ (location != null)); 670901"];
682 [label="Debug.Assert((syntax != null) ^ (location != null)); 670902"];
683 [label="Debug.Assert((syntax != null) ^ (location != null)); 670903"];
684 [label="DiagnosticInfo useSiteDiagnostic; 670904"];
685 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 670905"];
686 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 670906"];
687 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 670907"];
688 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 670908"];
689 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 670909"];
690 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 670910"];
691 [label="param GetWellKnownTypeMember(WellKnownMember member) 670911"];
692 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 670912"];
693 [label="param GetWellKnownTypeMember(bool isOptional = false) 670913"];
694 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 670914"];
695 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 670915"];
696 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 670916"];
697 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 670917"];
698 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 670918"];
699 [label="Debug.Assert(symbol is object); 670919"];
700 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 670920"];
701 [label="isInternal = false; 670921"];
702 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 670922"];
703 [label="symbol = symbol.ContainingType; 670923"];
704 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 670924"];
705 [label="return true; 670925"];
706 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 670926"];
707 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 670927"];
708 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 670928"];
709 [label="Debug.Assert(symbol is object); 670929"];
710 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 670930"];
711 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 670931"];
712 [label="symbol = symbol.ContainingType; 670932"];
713 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 670933"];
714 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 670934"];
715 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 670935"];
716 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 670936"];
717 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 670937"];
718 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 670938"];
719 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 670939"];
720 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 670940"];
721 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 670941"];
722 [label="Debug.Assert(symbol is object); 670942"];
723 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 670943"];
724 [label="isInternal = false; 670944"];
725 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 670945"];
726 [label="symbol = symbol.ContainingType; 670946"];
727 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 670947"];
728 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 670948"];
729 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 670949"];
730 [label="Debug.Assert(symbol is object); 670950"];
731 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 670951"];
732 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 670952"];
733 [label="symbol = symbol.ContainingType; 670953"];
734 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 670954"];
735 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 670955"];
736 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 670956"];
737 [label="return memberSymbol; 670957"];
738 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 670958"];
739 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 670959"];
740 [label="return memberSymbol; 670960"];
741 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 670961"];
742 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 670962"];
743 [label="Debug.Assert(symbol is object); 670963"];
744 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 670964"];
745 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 670965"];
746 [label="symbol = symbol.ContainingType; 670966"];
747 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 670967"];
748 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 670968"];
749 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 670969"];
750 [label="Debug.Assert(symbol is object); 670970"];
751 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 670971"];
752 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 670972"];
753 [label="symbol = symbol.ContainingType; 670973"];
754 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 670974"];
755 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 670975"];
756 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 670976"];
757 [label="return memberSymbol; 670977"];
758 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 670978"];
759 [label="return memberSymbol; 670979"];
760 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 670980"];
761 [label="return memberSymbol; 670981"];
762 [label="return memberSymbol; 670982"];
763 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 670983"];
764 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 670984"];
765 [label="Debug.Assert(symbol is object); 670985"];
766 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 670986"];
767 [label="isInternal = false; 670987"];
768 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 670988"];
769 [label="symbol = symbol.ContainingType; 670989"];
770 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 670990"];
771 [label="return true; 670991"];
772 [label="var diagnostics = c.GetDiagnostics(); 670992"];
773 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 670993"];
774 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 670994"];
775 [label="Debug.Assert(symbol is object); 670995"];
776 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 670996"];
777 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 670997"];
778 [label="symbol = symbol.ContainingType; 670998"];
779 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 670999"];
780 [label="param GetBinder(SyntaxNode node) 671000"];
781 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 671001"];
782 [label="param GetBinder(Symbol memberOpt = null) 671002"];
783 [label="param GetBinder(this) 671003"];
784 [label="int position = node.SpanStart; 671004"];
785 [label="InScript 671005"];
786 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 671006"];
787 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 671007"];
788 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 671008"];
789 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 671009"];
790 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 671010"];
791 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 671011"];
792 [label="node = node.Parent; 671012"];
793 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 671013"];
794 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 671014"];
795 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 671015"];
796 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 671016"];
797 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 671017"];
798 [label="param GetBinder(SyntaxNode node) 671018"];
799 [label="param GetBinder(int position) 671019"];
800 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 671020"];
801 [label="param GetBinder(Symbol memberOpt = null) 671021"];
802 [label="param GetBinder(this) 671022"];
803 [label="Debug.Assert(node != null); 671023"];
804 [label="Debug.Assert(node != null); 671024"];
805 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 671025"];
806 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 671026"];
807 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 671027"];
808 [label="param BinderFactoryVisitor(BinderFactory factory) 671028"];
809 [label="param BinderFactoryVisitor(this) 671029"];
810 [label="param BinderFactoryVisitor(this) 671030"];
811 [label="_position 671031"];
812 [label="_memberDeclarationOpt 671032"];
813 [label="_memberOpt 671033"];
814 [label="_factory 671034"];
815 [label="_factory 671035"];
816 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 671036"];
817 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 671037"];
818 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 671038"];
819 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 671039"];
820 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 671040"];
821 [label="param Initialize(int position) 671041"];
822 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 671042"];
823 [label="param Initialize(Symbol memberOpt) 671043"];
824 [label="param Initialize(this) 671044"];
825 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 671045"];
826 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 671046"];
827 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 671047"];
828 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 671048"];
829 [label="_position 671049"];
830 [label="_memberDeclarationOpt 671050"];
831 [label="_memberOpt 671051"];
832 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 671052"];
833 [label="Binder result = visitor.Visit(node); 671053"];
834 [label="visitor.Visit(node) 671054"];
835 [label="param Visit(SyntaxNode node) 671055"];
836 [label="param Visit(this) 671056"];
837 [label="return VisitCore(node); 671057"];
838 [label="VisitCore(node) 671058"];
839 [label="param VisitCore(SyntaxNode node) 671059"];
840 [label="param VisitCore(this) 671060"];
841 [label="return ((CSharpSyntaxNode)node).Accept(this); 671061"];
842 [label="return ((CSharpSyntaxNode)node).Accept(this); 671062"];
843 [label="return ((CSharpSyntaxNode)node).Accept(this); 671063"];
844 [label="param VisitDelegateDeclaration(DelegateDeclarationSyntax parent) 671064"];
845 [label="param VisitDelegateDeclaration(this) 671065"];
846 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 671066"];
847 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 671067"];
848 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 671068"];
849 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 671069"];
850 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 671070"];
851 [label="CreateBinderCacheKey(parent, usage: NodeUsage.Normal) 671071"];
852 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 671072"];
853 [label="param CreateBinderCacheKey(NodeUsage usage) 671073"];
854 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 671074"];
855 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 671075"];
856 [label="return new BinderCacheKey(node, usage); 671076"];
857 [label="return new BinderCacheKey(node, usage); 671077"];
858 [label="return new BinderCacheKey(node, usage); 671078"];
859 [label="new BinderCacheKey(node, usage) 671079"];
860 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 671080"];
861 [label="param BinderCacheKey(NodeUsage usage) 671081"];
862 [label="param BinderCacheKey(this) 671082"];
863 [label="this.syntaxNode 671083"];
864 [label="this.usage 671084"];
865 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 671085"];
866 [label="Binder resultBinder; 671086"];
867 [label="binderCache 671087"];
868 [label="get\n                {\n                    return _factory._binderCache;\n                } 671088"];
869 [label="return _factory._binderCache; 671089"];
870 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 671090"];
871 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 671091"];
872 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 671092"];
873 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 671093"];
874 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 671094"];
875 [label="param GetHashCode(this) 671095"];
876 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 671096"];
877 [label="Binder outer = VisitCore(parent.Parent); 671097"];
878 [label="VisitCore(parent.Parent) 671098"];
879 [label="param VisitCore(SyntaxNode node) 671099"];
880 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 671100"];
881 [label="param VisitCompilationUnit(this) 671101"];
882 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 671102"];
883 [label="IsInUsing(parent) 671103"];
884 [label="param IsInUsing(CSharpSyntaxNode containingNode) 671104"];
885 [label="param IsInUsing(this) 671105"];
886 [label="TextSpan containingSpan = containingNode.Span; 671106"];
887 [label="SyntaxToken token; 671107"];
888 [label="token 671108"];
889 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 671109"];
890 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 671110"];
891 [label="token = containingNode.FindToken(_position); 671111"];
892 [label="token = containingNode.FindToken(_position); 671112"];
893 [label="var node = token.Parent; 671113"];
894 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 671114"];
895 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 671115"];
896 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 671116"];
897 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 671117"];
898 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 671118"];
899 [label="node = node.Parent; 671119"];
900 [label="return false; 671120"];
901 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 671121"];
902 [label="InScript 671122"];
903 [label="get\n                {\n                    return _factory.InScript;\n                } 671123"];
904 [label="_factory.InScript 671124"];
905 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 671125"];
906 [label="return _factory.InScript; 671126"];
907 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 671127"];
908 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 671128"];
909 [label="param VisitCompilationUnit(bool inUsing) 671129"];
910 [label="param VisitCompilationUnit(bool inScript) 671130"];
911 [label="param VisitCompilationUnit(this) 671131"];
912 [label="syntaxTree 671132"];
913 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 671133"];
914 [label="return _factory._syntaxTree; 671134"];
915 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 671135"];
916 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 671136"];
917 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 671137"];
918 [label="inUsing 671138"];
919 [label="inScript 671139"];
920 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 671140"];
921 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 671141"];
922 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 671142"];
923 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 671143"];
924 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 671144"];
925 [label="param CreateBinderCacheKey(NodeUsage usage) 671145"];
926 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 671146"];
927 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 671147"];
928 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 671148"];
929 [label="Binder result; 671149"];
930 [label="binderCache 671150"];
931 [label="get\n                {\n                    return _factory._binderCache;\n                } 671151"];
932 [label="return _factory._binderCache; 671152"];
933 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 671153"];
934 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 671154"];
935 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 671155"];
936 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 671156"];
937 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 671157"];
938 [label="this.buckStopsHereBinder 671158"];
939 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 671159"];
940 [label="return _factory._buckStopsHereBinder; 671160"];
941 [label="result = this.buckStopsHereBinder; 671161"];
942 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 671162"];
943 [label="compilation 671163"];
944 [label="get\n                {\n                    return _factory._compilation;\n                } 671164"];
945 [label="return _factory._compilation; 671165"];
946 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 671166"];
947 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 671167"];
948 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 671168"];
949 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 671169"];
950 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 671170"];
951 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 671171"];
952 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 671172"];
953 [label="param InContainerBinder(Binder next) 671173"];
954 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 671174"];
955 [label="param InContainerBinder(bool inUsing) 671175"];
956 [label="param InContainerBinder(this) 671176"];
957 [label="next 671177"];
958 [label="param InContainerBinder(this) 671178"];
959 [label="param Binder(Binder next) 671179"];
960 [label="param Binder(this) 671180"];
961 [label="param Binder(Conversions? conversions = null) 671181"];
962 [label="internal CSharpCompilation Compilation { get; } 671182"];
963 [label="Flags 671183"];
964 [label="protected internal Binder? Next { get; } 671184"];
965 [label="_lazyConversions 671185"];
966 [label="_lazyOverloadResolution 671186"];
967 [label="RoslynDebug.Assert(next != null); 671187"];
968 [label="RoslynDebug.Assert(next != null); 671188"];
969 [label="Next 671189"];
970 [label="this.Flags 671190"];
971 [label="this.Compilation 671191"];
972 [label="_lazyConversions 671192"];
973 [label="_container 671193"];
974 [label="_computeImports 671194"];
975 [label="_lazyImports 671195"];
976 [label="_lazyImportChain 671196"];
977 [label="_lazyQuickAttributeChecker 671197"];
978 [label="Debug.Assert((object)container != null); 671198"];
979 [label="Debug.Assert((object)container != null); 671199"];
980 [label="Debug.Assert(declarationSyntax != null); 671200"];
981 [label="Debug.Assert(declarationSyntax != null); 671201"];
982 [label="_container 671202"];
983 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 671203"];
984 [label="_computeImports 671204"];
985 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 671205"];
986 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 671206"];
987 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 671207"];
988 [label="_usingsSyntax 671208"];
989 [label="compilation 671209"];
990 [label="get\n                {\n                    return _factory._compilation;\n                } 671210"];
991 [label="return _factory._compilation; 671211"];
992 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 671212"];
993 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 671213"];
994 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 671214"];
995 [label="binderCache 671215"];
996 [label="return _factory._binderCache; 671216"];
997 [label="binderCache.TryAdd(key, result); 671217"];
998 [label="binderCache.TryAdd(key, result); 671218"];
999 [label="binderCache.TryAdd(key, result); 671219"];
1000 [label="binderCache.TryAdd(key, result); 671220"];
1001 [label="binderCache.TryAdd(key, result); 671221"];
1002 [label="return result; 671222"];
1003 [label="return ((CSharpSyntaxNode)node).Accept(this); 671223"];
1004 [label="outer.ContainingMemberOrLambda 671224"];
1005 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 671225"];
1006 [label="var merged = _container as MergedNamespaceSymbol; 671226"];
1007 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 671227"];
1008 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 671228"];
1009 [label="((object)merged != null) 671229"];
1010 [label="var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent); 671230"];
1011 [label="var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent); 671231"];
1012 [label="resultBinder = new InContainerBinder(container, outer); 671232"];
1013 [label="resultBinder = new InContainerBinder(container, outer); 671233"];
1014 [label="resultBinder = new InContainerBinder(container, outer); 671234"];
1015 [label="new InContainerBinder(container, outer) 671235"];
1016 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 671236"];
1017 [label="param InContainerBinder(Binder next) 671237"];
1018 [label="param InContainerBinder(Imports imports = null) 671238"];
1019 [label="param InContainerBinder(this) 671239"];
1020 [label="next 671240"];
1021 [label="param InContainerBinder(this) 671241"];
1022 [label="param Binder(Binder next) 671242"];
1023 [label="param Binder(this) 671243"];
1024 [label="param Binder(Conversions? conversions = null) 671244"];
1025 [label="internal CSharpCompilation Compilation { get; } 671245"];
1026 [label="Flags 671246"];
1027 [label="protected internal Binder? Next { get; } 671247"];
1028 [label="_lazyConversions 671248"];
1029 [label="_lazyOverloadResolution 671249"];
1030 [label="RoslynDebug.Assert(next != null); 671250"];
1031 [label="RoslynDebug.Assert(next != null); 671251"];
1032 [label="this.Flags 671252"];
1033 [label="this.Compilation 671253"];
1034 [label="_lazyConversions 671254"];
1035 [label="_container 671255"];
1036 [label="_computeImports 671256"];
1037 [label="_lazyImports 671257"];
1038 [label="_lazyImportChain 671258"];
1039 [label="_lazyQuickAttributeChecker 671259"];
1040 [label="Debug.Assert((object)container != null || imports != null); 671260"];
1041 [label="Debug.Assert((object)container != null || imports != null); 671261"];
1042 [label="_container 671262"];
1043 [label="_lazyImports = imports ?? Imports.Empty; 671263"];
1044 [label="_lazyImports = imports ?? Imports.Empty; 671264"];
1045 [label="_lazyImports 671265"];
1046 [label="if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    } 671266"];
1047 [label="if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    } 671267"];
1048 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 671268"];
1049 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 671269"];
1050 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 671270"];
1051 [label="param WithUnsafeRegionIfNecessary(this) 671271"];
1052 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 671272"];
1053 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 671273"];
1054 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 671274"];
1055 [label="param Includes(this BinderFlags self) 671275"];
1056 [label="param Includes(BinderFlags other) 671276"];
1057 [label="return (self & other) == other; 671277"];
1058 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 671278"];
1059 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 671279"];
1060 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 671280"];
1061 [label="binderCache 671281"];
1062 [label="return _factory._binderCache; 671282"];
1063 [label="binderCache.TryAdd(key, resultBinder); 671283"];
1064 [label="binderCache.TryAdd(key, resultBinder); 671284"];
1065 [label="binderCache.TryAdd(key, resultBinder); 671285"];
1066 [label="binderCache.TryAdd(key, resultBinder); 671286"];
1067 [label="binderCache.TryAdd(key, resultBinder); 671287"];
1068 [label="return resultBinder; 671288"];
1069 [label="return ((CSharpSyntaxNode)node).Accept(this); 671289"];
1070 [label="_binderFactoryVisitorPool.Free(visitor); 671290"];
1071 [label="_binderFactoryVisitorPool.Free(visitor); 671291"];
1072 [label="return result; 671292"];
1073 [label="var diagnostics = c.GetDiagnostics(); 671293"];
1074 [label="param BindType(ExpressionSyntax syntax) 671294"];
1075 [label="param BindType(DiagnosticBag diagnostics) 671295"];
1076 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 671296"];
1077 [label="param BindType(bool suppressUseSiteDiagnostics = false) 671297"];
1078 [label="param BindType(this) 671298"];
1079 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 671299"];
1080 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 671300"];
1081 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 671301"];
1082 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 671302"];
1083 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 671303"];
1084 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 671304"];
1085 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 671305"];
1086 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 671306"];
1087 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 671307"];
1088 [label="param BindTypeOrAlias(this) 671308"];
1089 [label="Debug.Assert(diagnostics != null); 671309"];
1090 [label="Debug.Assert(diagnostics != null); 671310"];
1091 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 671311"];
1092 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 671312"];
1093 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 671313"];
1094 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 671314"];
1095 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 671315"];
1096 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 671316"];
1097 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 671317"];
1098 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 671318"];
1099 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 671319"];
1100 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 671320"];
1101 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 671321"];
1102 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 671322"];
1103 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 671323"];
1104 [label="return bindPredefined(syntax, diagnostics); 671324"];
1105 [label="return bindPredefined(syntax, diagnostics); 671325"];
1106 [label="bindPredefined(syntax, diagnostics) 671326"];
1107 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 671327"];
1108 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 671328"];
1109 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 671329"];
1110 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 671330"];
1111 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 671331"];
1112 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 671332"];
1113 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 671333"];
1114 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 671334"];
1115 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 671335"];
1116 [label="param BindPredefinedTypeSymbol(this) 671336"];
1117 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 671337"];
1118 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 671338"];
1119 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 671339"];
1120 [label="param GetSpecialType(SpecialType typeId) 671340"];
1121 [label="param GetSpecialType(DiagnosticBag diagnostics) 671341"];
1122 [label="param GetSpecialType(SyntaxNode node) 671342"];
1123 [label="param GetSpecialType(this) 671343"];
1124 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 671344"];
1125 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 671345"];
1126 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 671346"];
1127 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 671347"];
1128 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 671348"];
1129 [label="param GetSpecialType(CSharpCompilation compilation) 671349"];
1130 [label="param GetSpecialType(SpecialType typeId) 671350"];
1131 [label="param GetSpecialType(SyntaxNode node) 671351"];
1132 [label="param GetSpecialType(DiagnosticBag diagnostics) 671352"];
1133 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 671353"];
1134 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 671354"];
1135 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 671355"];
1136 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 671356"];
1137 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 671357"];
1138 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 671358"];
1139 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 671359"];
1140 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 671360"];
1141 [label="param ReportUseSiteDiagnostics(Symbol symbol) 671361"];
1142 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 671362"];
1143 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 671363"];
1144 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 671364"];
1145 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 671365"];
1146 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 671366"];
1147 [label="return typeSymbol; 671367"];
1148 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 671368"];
1149 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 671369"];
1150 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 671370"];
1151 [label="param AreNullableAnnotationsEnabled(this) 671371"];
1152 [label="RoslynDebug.Assert(token.SyntaxTree is object); 671372"];
1153 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 671373"];
1154 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 671374"];
1155 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 671375"];
1156 [label="param AreNullableAnnotationsEnabled(int position) 671376"];
1157 [label="param AreNullableAnnotationsEnabled(this) 671377"];
1158 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 671378"];
1159 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 671379"];
1160 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 671380"];
1161 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 671381"];
1162 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 671382"];
1163 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 671383"];
1164 [label="AreNullableAnnotationsGloballyEnabled() 671384"];
1165 [label="param AreNullableAnnotationsGloballyEnabled(this) 671385"];
1166 [label="RoslynDebug.Assert(Next is object); 671386"];
1167 [label="Next.AreNullableAnnotationsGloballyEnabled() 671387"];
1168 [label="param AreNullableAnnotationsGloballyEnabled(this) 671388"];
1169 [label="RoslynDebug.Assert(Next is object); 671389"];
1170 [label="param AreNullableAnnotationsGloballyEnabled(this) 671390"];
1171 [label="GetGlobalAnnotationState() 671391"];
1172 [label="param GetGlobalAnnotationState(this) 671392"];
1173 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 671393"];
1174 [label="return false; 671394"];
1175 [label="return GetGlobalAnnotationState(); 671395"];
1176 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 671396"];
1177 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 671397"];
1178 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 671398"];
1179 [label="type 671399"];
1180 [label="param operator(TypeWithAnnotations typeWithAnnotations) 671400"];
1181 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 671401"];
1182 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 671402"];
1183 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 671403"];
1184 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 671404"];
1185 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 671405"];
1186 [label="Debug.Assert(typeWithAnnotations.HasType); 671406"];
1187 [label="_typeWithAnnotations 671407"];
1188 [label="_symbol = null; 671408"];
1189 [label="_symbol 671409"];
1190 [label="_isNullableEnabled = false; 671410"];
1191 [label="_isNullableEnabled 671411"];
1192 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 671412"];
1193 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 671413"];
1194 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 671414"];
1195 [label="symbol.IsType 671415"];
1196 [label="=> !_typeWithAnnotations.IsDefault 671416"];
1197 [label="!_typeWithAnnotations.IsDefault 671417"];
1198 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 671418"];
1199 [label="symbol.IsType 671419"];
1200 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 671420"];
1201 [label="symbol.TypeWithAnnotations 671421"];
1202 [label="=> _typeWithAnnotations 671422"];
1203 [label="_typeWithAnnotations 671423"];
1204 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 671424"];
1205 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 671425"];
1206 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 671426"];
1207 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 671427"];
1208 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 671428"];
1209 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 671429"];
1210 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 671430"];
1211 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 671431"];
1212 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 671432"];
1213 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 671433"];
1214 [label="param ReportDiagnosticsIfObsolete(this) 671434"];
1215 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 671435"];
1216 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 671436"];
1217 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 671437"];
1218 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 671438"];
1219 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 671439"];
1220 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 671440"];
1221 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 671441"];
1222 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 671442"];
1223 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 671443"];
1224 [label="param ReportDiagnosticsIfObsolete(this) 671444"];
1225 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 671445"];
1226 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 671446"];
1227 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 671447"];
1228 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 671448"];
1229 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 671449"];
1230 [label="this.ContainingMemberOrLambda 671450"];
1231 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 671451"];
1232 [label="var merged = _container as MergedNamespaceSymbol; 671452"];
1233 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 671453"];
1234 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 671454"];
1235 [label="((object)merged != null) 671455"];
1236 [label="_container 671456"];
1237 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 671457"];
1238 [label="this.ContainingType 671458"];
1239 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 671459"];
1240 [label="this.ContainingMemberOrLambda 671460"];
1241 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 671461"];
1242 [label="var merged = _container as MergedNamespaceSymbol; 671462"];
1243 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 671463"];
1244 [label="var member = this.ContainingMemberOrLambda; 671464"];
1245 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 671465"];
1246 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 671466"];
1247 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 671467"];
1248 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 671468"];
1249 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 671469"];
1250 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 671470"];
1251 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 671471"];
1252 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 671472"];
1253 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 671473"];
1254 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 671474"];
1255 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 671475"];
1256 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 671476"];
1257 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 671477"];
1258 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 671478"];
1259 [label="RoslynDebug.Assert(symbol is object); 671479"];
1260 [label="RoslynDebug.Assert(symbol is object); 671480"];
1261 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 671481"];
1262 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 671482"];
1263 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 671483"];
1264 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 671484"];
1265 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 671485"];
1266 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 671486"];
1267 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 671487"];
1268 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 671488"];
1269 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 671489"];
1270 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 671490"];
1271 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 671491"];
1272 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 671492"];
1273 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 671493"];
1274 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 671494"];
1275 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 671495"];
1276 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 671496"];
1277 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 671497"];
1278 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 671498"];
1279 [label="RoslynDebug.Assert(diagnostics != null); 671499"];
1280 [label="RoslynDebug.Assert(diagnostics != null); 671500"];
1281 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 671501"];
1282 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 671502"];
1283 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 671503"];
1284 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 671504"];
1285 [label="DiagnosticInfo? info = null; 671505"];
1286 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 671506"];
1287 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 671507"];
1288 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 671508"];
1289 [label="return kind; 671509"];
1290 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 671510"];
1291 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 671511"];
1292 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 671512"];
1293 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 671513"];
1294 [label="return symbol; 671514"];
1295 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 671515"];
1296 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 671516"];
1297 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 671517"];
1298 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 671518"];
1299 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 671519"];
1300 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 671520"];
1301 [label="param UnwrapAlias(DiagnosticBag diagnostics) 671521"];
1302 [label="param UnwrapAlias(SyntaxNode syntax) 671522"];
1303 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 671523"];
1304 [label="param UnwrapAlias(this) 671524"];
1305 [label="symbol.IsAlias 671525"];
1306 [label="=> _symbol?.Kind == SymbolKind.Alias 671526"];
1307 [label="_symbol 671527"];
1308 [label="_symbol?.Kind == SymbolKind.Alias 671528"];
1309 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 671529"];
1310 [label="return symbol; 671530"];
1311 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 671531"];
1312 [label="=> _typeWithAnnotations 671532"];
1313 [label="_typeWithAnnotations 671533"];
1314 [label="var diagnostics = c.GetDiagnostics(); 671534"];
1315 [label="param GetSpecialType(SpecialType typeId) 671535"];
1316 [label="param GetSpecialType(DiagnosticBag diagnostics) 671536"];
1317 [label="param GetSpecialType(SyntaxNode node) 671537"];
1318 [label="param GetSpecialType(this) 671538"];
1319 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 671539"];
1320 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 671540"];
1321 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 671541"];
1322 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 671542"];
1323 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 671543"];
1324 [label="param GetSpecialType(CSharpCompilation compilation) 671544"];
1325 [label="param GetSpecialType(SpecialType typeId) 671545"];
1326 [label="param GetSpecialType(SyntaxNode node) 671546"];
1327 [label="param GetSpecialType(DiagnosticBag diagnostics) 671547"];
1328 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 671548"];
1329 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 671549"];
1330 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 671550"];
1331 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 671551"];
1332 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 671552"];
1333 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 671553"];
1334 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 671554"];
1335 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 671555"];
1336 [label="param ReportUseSiteDiagnostics(Symbol symbol) 671556"];
1337 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 671557"];
1338 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 671558"];
1339 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 671559"];
1340 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 671560"];
1341 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 671561"];
1342 [label="return typeSymbol; 671562"];
1343 [label="var diagnostics = c.GetDiagnostics(); 671563"];
1344 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 671564"];
1345 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 671565"];
1346 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 671566"];
1347 [label="Debug.Assert(symbol is object); 671567"];
1348 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 671568"];
1349 [label="isInternal = false; 671569"];
1350 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 671570"];
1351 [label="symbol = symbol.ContainingType; 671571"];
1352 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 671572"];
1353 [label="return true; 671573"];
1354 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 671574"];
1355 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 671575"];
1356 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 671576"];
1357 [label="var diagnostics = c.GetDiagnostics(); 671577"];
1358 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 671578"];
1359 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 671579"];
1360 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 671580"];
1361 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 671581"];
1362 [label="param ValidateParameterNameConflicts(this) 671582"];
1363 [label="PooledHashSet<string>? tpNames = null; 671583"];
1364 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 671584"];
1365 [label="PooledHashSet<string>? pNames = null; 671585"];
1366 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 671586"];
1367 [label="tpNames?.Free(); 671587"];
1368 [label="pNames?.Free(); 671588"];
1369 [label="param IsSymbolAccessible(Symbol symbol) 671589"];
1370 [label="param IsSymbolAccessible(NamedTypeSymbol within) 671590"];
1371 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 671591"];
1372 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 671592"];
1373 [label="bool failedThroughTypeCheck; 671593"];
1374 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 671594"];
1375 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 671595"];
1376 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 671596"];
1377 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 671597"];
1378 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 671598"];
1379 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 671599"];
1380 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics) 671600"];
1381 [label="param IsSymbolAccessibleCore(Symbol symbol) 671601"];
1382 [label="param IsSymbolAccessibleCore(Symbol within) 671602"];
1383 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 671603"];
1384 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 671604"];
1385 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 671605"];
1386 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 671606"];
1387 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 671607"];
1388 [label="Debug.Assert((object)symbol != null); 671608"];
1389 [label="Debug.Assert((object)symbol != null); 671609"];
1390 [label="Debug.Assert((object)within != null); 671610"];
1391 [label="Debug.Assert((object)within != null); 671611"];
1392 [label="Debug.Assert(within.IsDefinition); 671612"];
1393 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671613"];
1394 [label="failedThroughTypeCheck = false; 671614"];
1395 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 671615"];
1396 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 671616"];
1397 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 671617"];
1398 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671618"];
1399 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671619"];
1400 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671620"];
1401 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671621"];
1402 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671622"];
1403 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671623"];
1404 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671624"];
1405 [label="IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics) 671625"];
1406 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 671626"];
1407 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 671627"];
1408 [label="param IsMemberAccessible(Symbol within) 671628"];
1409 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 671629"];
1410 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 671630"];
1411 [label="param IsMemberAccessible(CSharpCompilation compilation) 671631"];
1412 [label="param IsMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 671632"];
1413 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671633"];
1414 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671634"];
1415 [label="Debug.Assert((object)containingType != null); 671635"];
1416 [label="Debug.Assert((object)containingType != null); 671636"];
1417 [label="failedThroughTypeCheck = false; 671637"];
1418 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 671638"];
1419 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 671639"];
1420 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 671640"];
1421 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 671641"];
1422 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 671642"];
1423 [label="IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved) 671643"];
1424 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 671644"];
1425 [label="param IsNamedTypeAccessible(Symbol within) 671645"];
1426 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 671646"];
1427 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671647"];
1428 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671648"];
1429 [label="Debug.Assert((object)type != null); 671649"];
1430 [label="Debug.Assert((object)type != null); 671650"];
1431 [label="var compilation = within.DeclaringCompilation; 671651"];
1432 [label="bool unused; 671652"];
1433 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 671653"];
1434 [label="var containingType = type.ContainingType; 671654"];
1435 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671655"];
1436 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671656"];
1437 [label="(object)containingType == null 671657"];
1438 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671658"];
1439 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 671659"];
1440 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 671660"];
1441 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 671661"];
1442 [label="param IsNonNestedTypeAccessible(Symbol within) 671662"];
1443 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671663"];
1444 [label="Debug.Assert((object)assembly != null); 671664"];
1445 [label="Debug.Assert((object)assembly != null); 671665"];
1446 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 671666"];
1447 [label="return true; 671667"];
1448 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 671668"];
1449 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671669"];
1450 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671670"];
1451 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671671"];
1452 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671672"];
1453 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671673"];
1454 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671674"];
1455 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671675"];
1456 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671676"];
1457 [label="IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved) 671677"];
1458 [label="param IsNonPublicMemberAccessible(NamedTypeSymbol containingType) 671678"];
1459 [label="param IsNonPublicMemberAccessible(Accessibility declaredAccessibility) 671679"];
1460 [label="param IsNonPublicMemberAccessible(Symbol within) 671680"];
1461 [label="param IsNonPublicMemberAccessible(TypeSymbol throughTypeOpt) 671681"];
1462 [label="param IsNonPublicMemberAccessible(out bool failedThroughTypeCheck) 671682"];
1463 [label="param IsNonPublicMemberAccessible(CSharpCompilation compilation) 671683"];
1464 [label="param IsNonPublicMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 671684"];
1465 [label="param IsNonPublicMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671685"];
1466 [label="failedThroughTypeCheck = false; 671686"];
1467 [label="var originalContainingType = containingType.OriginalDefinition; 671687"];
1468 [label="var withinType = within as NamedTypeSymbol; 671688"];
1469 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 671689"];
1470 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 671690"];
1471 [label="(object)withinType != null 671691"];
1472 [label="withinType.ContainingAssembly 671692"];
1473 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 671693"];
1474 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                    return true;\n\n                case Accessibility.Private:\n                    // All expressions in the current submission (top-level or nested in a method or\n                    // type) can access previous submission's private top-level members. Previous\n                    // submissions are treated like outer classes for the current submission - the\n                    // inner class can access private members of the outer class.\n                    if (containingType.TypeKind == TypeKind.Submission)\n                    {\n                        return true;\n                    }\n\n                    // private members never accessible from outside a type.\n                    return (object)withinType != null && IsPrivateSymbolAccessible(withinType, originalContainingType);\n\n                case Accessibility.Internal:\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly);\n\n                case Accessibility.ProtectedAndInternal:\n                    if (!withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // We require internal access.  If we don't have it, then this symbol is\n                        // definitely not accessible to us.\n                        return false;\n                    }\n\n                    // We had internal access.  Also have to make sure we have protected access.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.ProtectedOrInternal:\n                    if (withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // If we have internal access to this symbol, then that's sufficient.  no\n                        // need to do the complicated protected case.\n                        return true;\n                    }\n\n                    // We don't have internal access.  But if we have protected access then that's\n                    // sufficient.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.Protected:\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 671694"];
1475 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 671695"];
1476 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 671696"];
1477 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 671697"];
1478 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 671698"];
1479 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 671699"];
1480 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 671700"];
1481 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 671701"];
1482 [label="IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved) 671702"];
1483 [label="param IsProtectedSymbolAccessible(NamedTypeSymbol withinType) 671703"];
1484 [label="param IsProtectedSymbolAccessible(TypeSymbol throughTypeOpt) 671704"];
1485 [label="param IsProtectedSymbolAccessible(NamedTypeSymbol originalContainingType) 671705"];
1486 [label="param IsProtectedSymbolAccessible(out bool failedThroughTypeCheck) 671706"];
1487 [label="param IsProtectedSymbolAccessible(CSharpCompilation compilation) 671707"];
1488 [label="param IsProtectedSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 671708"];
1489 [label="param IsProtectedSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671709"];
1490 [label="failedThroughTypeCheck = false; 671710"];
1491 [label="if (originalContainingType.TypeKind == TypeKind.Submission)\n            {\n                return true;\n            } 671711"];
1492 [label="if ((object)withinType == null)\n            {\n                // If we're not within a type, we can't access a protected symbol\n                return false;\n            } 671712"];
1493 [label="if ((object)withinType == null)\n            {\n                // If we're not within a type, we can't access a protected symbol\n                return false;\n            } 671713"];
1494 [label="if (IsNestedWithinOriginalContainingType(withinType, originalContainingType))\n            {\n                return true;\n            } 671714"];
1495 [label="if (IsNestedWithinOriginalContainingType(withinType, originalContainingType))\n            {\n                return true;\n            } 671715"];
1496 [label="IsNestedWithinOriginalContainingType(withinType, originalContainingType) 671716"];
1497 [label="param IsNestedWithinOriginalContainingType(NamedTypeSymbol withinType) 671717"];
1498 [label="param IsNestedWithinOriginalContainingType(NamedTypeSymbol originalContainingType) 671718"];
1499 [label="Debug.Assert((object)withinType != null); 671719"];
1500 [label="Debug.Assert((object)withinType != null); 671720"];
1501 [label="Debug.Assert((object)originalContainingType != null); 671721"];
1502 [label="Debug.Assert((object)originalContainingType != null); 671722"];
1503 [label="Debug.Assert(originalContainingType.IsDefinition); 671723"];
1504 [label="var current = withinType.OriginalDefinition; 671724"];
1505 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (current == (object)originalContainingType)\n                {\n                    return true;\n                }\n\n                // NOTE(cyrusn): The container of an 'original' type is always original. \n                current = current.ContainingType;\n            } 671725"];
1506 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (current == (object)originalContainingType)\n                {\n                    return true;\n                }\n\n                // NOTE(cyrusn): The container of an 'original' type is always original. \n                current = current.ContainingType;\n            } 671726"];
1507 [label="Debug.Assert(current.IsDefinition); 671727"];
1508 [label="if (current == (object)originalContainingType)\n                {\n                    return true;\n                } 671728"];
1509 [label="current = current.ContainingType; 671729"];
1510 [label="return false; 671730"];
1511 [label="if (IsNestedWithinOriginalContainingType(withinType, originalContainingType))\n            {\n                return true;\n            } 671731"];
1512 [label="var current = withinType.OriginalDefinition; 671732"];
1513 [label="var originalThroughTypeOpt = (object)throughTypeOpt == null ? null : throughTypeOpt.OriginalDefinition as TypeSymbol; 671733"];
1514 [label="var originalThroughTypeOpt = (object)throughTypeOpt == null ? null : throughTypeOpt.OriginalDefinition as TypeSymbol; 671734"];
1515 [label="(object)throughTypeOpt == null 671735"];
1516 [label="while ((object)current != null)\n                {\n                    Debug.Assert(current.IsDefinition);\n\n                    if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    }\n\n                    // NOTE(cyrusn): The container of an original type is always original.\n                    current = current.ContainingType;\n                } 671736"];
1517 [label="while ((object)current != null)\n                {\n                    Debug.Assert(current.IsDefinition);\n\n                    if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    }\n\n                    // NOTE(cyrusn): The container of an original type is always original.\n                    current = current.ContainingType;\n                } 671737"];
1518 [label="Debug.Assert(current.IsDefinition); 671738"];
1519 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 671739"];
1520 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 671740"];
1521 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 671741"];
1522 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 671742"];
1523 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 671743"];
1524 [label="current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved) 671744"];
1525 [label="param InheritsFromOrImplementsIgnoringConstruction(this TypeSymbol type) 671745"];
1526 [label="param InheritsFromOrImplementsIgnoringConstruction(NamedTypeSymbol baseType) 671746"];
1527 [label="param InheritsFromOrImplementsIgnoringConstruction(CSharpCompilation compilation) 671747"];
1528 [label="param InheritsFromOrImplementsIgnoringConstruction(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 671748"];
1529 [label="param InheritsFromOrImplementsIgnoringConstruction(ConsList<TypeSymbol> basesBeingResolved = null) 671749"];
1530 [label="Debug.Assert(type.IsDefinition); 671750"];
1531 [label="Debug.Assert(baseType.IsDefinition); 671751"];
1532 [label="PooledHashSet<NamedTypeSymbol> interfacesLookedAt = null; 671752"];
1533 [label="ArrayBuilder<NamedTypeSymbol> baseInterfaces = null; 671753"];
1534 [label="bool baseTypeIsInterface = baseType.IsInterface; 671754"];
1535 [label="if (baseTypeIsInterface)\n            {\n                interfacesLookedAt = PooledHashSet<NamedTypeSymbol>.GetInstance();\n                baseInterfaces = ArrayBuilder<NamedTypeSymbol>.GetInstance();\n            } 671755"];
1536 [label="PooledHashSet<NamedTypeSymbol> visited = null; 671756"];
1537 [label="var current = type; 671757"];
1538 [label="bool result = false; 671758"];
1539 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                }\n\n                if (baseTypeIsInterface)\n                {\n                    getBaseInterfaces(current, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                }\n\n                // NOTE(cyrusn): The base type of an 'original' type may not be 'original'. i.e. \n                // 'class Goo : IBar<int>'.  We must map it back to the 'original' when as we walk up\n                // the base type hierarchy.\n                var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited);\n                if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 671759"];
1540 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                }\n\n                if (baseTypeIsInterface)\n                {\n                    getBaseInterfaces(current, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                }\n\n                // NOTE(cyrusn): The base type of an 'original' type may not be 'original'. i.e. \n                // 'class Goo : IBar<int>'.  We must map it back to the 'original' when as we walk up\n                // the base type hierarchy.\n                var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited);\n                if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 671760"];
1541 [label="Debug.Assert(current.IsDefinition); 671761"];
1542 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 671762"];
1543 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 671763"];
1544 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 671764"];
1545 [label="if (baseTypeIsInterface)\n                {\n                    getBaseInterfaces(current, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                } 671765"];
1546 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 671766"];
1547 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 671767"];
1548 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 671768"];
1549 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 671769"];
1550 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 671770"];
1551 [label="if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 671771"];
1552 [label="if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 671772"];
1553 [label="current = (TypeSymbol)next.OriginalDefinition; 671773"];
1554 [label="current.AddUseSiteDiagnostics(ref useSiteDiagnostics); 671774"];
1555 [label="current.AddUseSiteDiagnostics(ref useSiteDiagnostics); 671775"];
1556 [label="current.AddUseSiteDiagnostics(ref useSiteDiagnostics); 671776"];
1557 [label="Debug.Assert(current.IsDefinition); 671777"];
1558 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 671778"];
1559 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 671779"];
1560 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 671780"];
1561 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 671781"];
1562 [label="result = true; 671782"];
1563 [label="visited?.Free(); 671783"];
1564 [label="if (!result && baseTypeIsInterface)\n            {\n                Debug.Assert(!result);\n\n                while (baseInterfaces.Count != 0)\n                {\n                    NamedTypeSymbol currentBase = baseInterfaces.Pop();\n\n                    if (!currentBase.IsInterface)\n                    {\n                        continue;\n                    }\n\n                    Debug.Assert(currentBase.IsDefinition);\n                    if (currentBase == (object)baseType)\n                    {\n                        result = true;\n                        break;\n                    }\n\n                    getBaseInterfaces(currentBase, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                }\n\n                if (!result)\n                {\n                    foreach (var candidate in interfacesLookedAt)\n                    {\n                        candidate.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                    }\n                }\n            } 671784"];
1565 [label="interfacesLookedAt?.Free(); 671785"];
1566 [label="baseInterfaces?.Free(); 671786"];
1567 [label="return result; 671787"];
1568 [label="if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        } 671788"];
1569 [label="if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        } 671789"];
1570 [label="return true; 671790"];
1571 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 671791"];
1572 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 671792"];
1573 [label="Debug.Assert((object)symbol != null); 671793"];
1574 [label="Debug.Assert((object)within != null); 671794"];
1575 [label="Debug.Assert(within.IsDefinition); 671795"];
1576 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671796"];
1577 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 671797"];
1578 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671798"];
1579 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 671799"];
1580 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671800"];
1581 [label="Debug.Assert((object)containingType != null); 671801"];
1582 [label="Debug.Assert((object)containingType != null); 671802"];
1583 [label="failedThroughTypeCheck = false; 671803"];
1584 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 671804"];
1585 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 671805"];
1586 [label="param IsNamedTypeAccessible(Symbol within) 671806"];
1587 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671807"];
1588 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671808"];
1589 [label="Debug.Assert((object)type != null); 671809"];
1590 [label="Debug.Assert((object)type != null); 671810"];
1591 [label="var compilation = within.DeclaringCompilation; 671811"];
1592 [label="bool unused; 671812"];
1593 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 671813"];
1594 [label="var containingType = type.ContainingType; 671814"];
1595 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671815"];
1596 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671816"];
1597 [label="(object)containingType == null 671817"];
1598 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671818"];
1599 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 671819"];
1600 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 671820"];
1601 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 671821"];
1602 [label="param IsNonNestedTypeAccessible(Symbol within) 671822"];
1603 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671823"];
1604 [label="Debug.Assert((object)assembly != null); 671824"];
1605 [label="Debug.Assert((object)assembly != null); 671825"];
1606 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 671826"];
1607 [label="return true; 671827"];
1608 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 671828"];
1609 [label="return true; 671829"];
1610 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 671830"];
1611 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 671831"];
1612 [label="Debug.Assert(symbol is object); 671832"];
1613 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 671833"];
1614 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 671834"];
1615 [label="symbol = symbol.ContainingType; 671835"];
1616 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 671836"];
1617 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 671837"];
1618 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 671838"];
1619 [label="return true; 671839"];
1620 [label="var diagnostics = c.GetDiagnostics(); 671840"];
1621 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 671841"];
1622 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 671842"];
1623 [label="Debug.Assert(symbol is object); 671843"];
1624 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 671844"];
1625 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 671845"];
1626 [label="symbol = symbol.ContainingType; 671846"];
1627 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 671847"];
1628 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 671848"];
1629 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 671849"];
1630 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 671850"];
1631 [label="Debug.Assert(symbol is object); 671851"];
1632 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 671852"];
1633 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 671853"];
1634 [label="symbol = symbol.ContainingType; 671854"];
1635 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 671855"];
1636 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 671856"];
1637 [label="param IsSymbolAccessible(NamedTypeSymbol within) 671857"];
1638 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 671858"];
1639 [label="param IsSymbolAccessibleCore(Symbol within) 671859"];
1640 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 671860"];
1641 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 671861"];
1642 [label="Debug.Assert((object)symbol != null); 671862"];
1643 [label="Debug.Assert((object)within != null); 671863"];
1644 [label="Debug.Assert(within.IsDefinition); 671864"];
1645 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671865"];
1646 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 671866"];
1647 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671867"];
1648 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 671868"];
1649 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 671869"];
1650 [label="param IsMemberAccessible(Symbol within) 671870"];
1651 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 671871"];
1652 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 671872"];
1653 [label="param IsMemberAccessible(CSharpCompilation compilation) 671873"];
1654 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671874"];
1655 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671875"];
1656 [label="Debug.Assert((object)containingType != null); 671876"];
1657 [label="Debug.Assert((object)containingType != null); 671877"];
1658 [label="failedThroughTypeCheck = false; 671878"];
1659 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 671879"];
1660 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 671880"];
1661 [label="param IsNamedTypeAccessible(Symbol within) 671881"];
1662 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671882"];
1663 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671883"];
1664 [label="Debug.Assert((object)type != null); 671884"];
1665 [label="Debug.Assert((object)type != null); 671885"];
1666 [label="var compilation = within.DeclaringCompilation; 671886"];
1667 [label="bool unused; 671887"];
1668 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 671888"];
1669 [label="var containingType = type.ContainingType; 671889"];
1670 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671890"];
1671 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671891"];
1672 [label="(object)containingType == null 671892"];
1673 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671893"];
1674 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 671894"];
1675 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 671895"];
1676 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 671896"];
1677 [label="param IsNonNestedTypeAccessible(Symbol within) 671897"];
1678 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671898"];
1679 [label="Debug.Assert((object)assembly != null); 671899"];
1680 [label="Debug.Assert((object)assembly != null); 671900"];
1681 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 671901"];
1682 [label="return true; 671902"];
1683 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 671903"];
1684 [label="return true; 671904"];
1685 [label="var diagnostics = c.GetDiagnostics(); 671905"];
1686 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 671906"];
1687 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 671907"];
1688 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 671908"];
1689 [label="Debug.Assert((object)symbol != null); 671909"];
1690 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 671910"];
1691 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671911"];
1692 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 671912"];
1693 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 671913"];
1694 [label="param IsMemberAccessible(Symbol within) 671914"];
1695 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 671915"];
1696 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 671916"];
1697 [label="param IsMemberAccessible(CSharpCompilation compilation) 671917"];
1698 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671918"];
1699 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671919"];
1700 [label="Debug.Assert((object)containingType != null); 671920"];
1701 [label="Debug.Assert((object)containingType != null); 671921"];
1702 [label="failedThroughTypeCheck = false; 671922"];
1703 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 671923"];
1704 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 671924"];
1705 [label="param IsNamedTypeAccessible(Symbol within) 671925"];
1706 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671926"];
1707 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671927"];
1708 [label="Debug.Assert((object)type != null); 671928"];
1709 [label="Debug.Assert((object)type != null); 671929"];
1710 [label="var compilation = within.DeclaringCompilation; 671930"];
1711 [label="bool unused; 671931"];
1712 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 671932"];
1713 [label="var containingType = type.ContainingType; 671933"];
1714 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671934"];
1715 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671935"];
1716 [label="(object)containingType == null 671936"];
1717 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 671937"];
1718 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 671938"];
1719 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 671939"];
1720 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 671940"];
1721 [label="param IsNonNestedTypeAccessible(Symbol within) 671941"];
1722 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671942"];
1723 [label="Debug.Assert((object)assembly != null); 671943"];
1724 [label="Debug.Assert((object)assembly != null); 671944"];
1725 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 671945"];
1726 [label="return true; 671946"];
1727 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 671947"];
1728 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671948"];
1729 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671949"];
1730 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671950"];
1731 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671951"];
1732 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671952"];
1733 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671953"];
1734 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671954"];
1735 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 671955"];
1736 [label="IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved) 671956"];
1737 [label="param IsNonPublicMemberAccessible(NamedTypeSymbol containingType) 671957"];
1738 [label="param IsNonPublicMemberAccessible(Accessibility declaredAccessibility) 671958"];
1739 [label="param IsNonPublicMemberAccessible(Symbol within) 671959"];
1740 [label="param IsNonPublicMemberAccessible(TypeSymbol throughTypeOpt) 671960"];
1741 [label="param IsNonPublicMemberAccessible(out bool failedThroughTypeCheck) 671961"];
1742 [label="param IsNonPublicMemberAccessible(CSharpCompilation compilation) 671962"];
1743 [label="param IsNonPublicMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 671963"];
1744 [label="param IsNonPublicMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671964"];
1745 [label="failedThroughTypeCheck = false; 671965"];
1746 [label="var originalContainingType = containingType.OriginalDefinition; 671966"];
1747 [label="var withinType = within as NamedTypeSymbol; 671967"];
1748 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 671968"];
1749 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 671969"];
1750 [label="(object)withinType != null 671970"];
1751 [label="withinType.ContainingAssembly 671971"];
1752 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 671972"];
1753 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                    return true;\n\n                case Accessibility.Private:\n                    // All expressions in the current submission (top-level or nested in a method or\n                    // type) can access previous submission's private top-level members. Previous\n                    // submissions are treated like outer classes for the current submission - the\n                    // inner class can access private members of the outer class.\n                    if (containingType.TypeKind == TypeKind.Submission)\n                    {\n                        return true;\n                    }\n\n                    // private members never accessible from outside a type.\n                    return (object)withinType != null && IsPrivateSymbolAccessible(withinType, originalContainingType);\n\n                case Accessibility.Internal:\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly);\n\n                case Accessibility.ProtectedAndInternal:\n                    if (!withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // We require internal access.  If we don't have it, then this symbol is\n                        // definitely not accessible to us.\n                        return false;\n                    }\n\n                    // We had internal access.  Also have to make sure we have protected access.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.ProtectedOrInternal:\n                    if (withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // If we have internal access to this symbol, then that's sufficient.  no\n                        // need to do the complicated protected case.\n                        return true;\n                    }\n\n                    // We don't have internal access.  But if we have protected access then that's\n                    // sufficient.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.Protected:\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 671973"];
1754 [label="return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly); 671974"];
1755 [label="return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly); 671975"];
1756 [label="withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly) 671976"];
1757 [label="param HasInternalAccessTo(this AssemblySymbol fromAssembly) 671977"];
1758 [label="param HasInternalAccessTo(AssemblySymbol toAssembly) 671978"];
1759 [label="if (Equals(fromAssembly, toAssembly))\n            {\n                return true;\n            } 671979"];
1760 [label="if (Equals(fromAssembly, toAssembly))\n            {\n                return true;\n            } 671980"];
1761 [label="if (Equals(fromAssembly, toAssembly))\n            {\n                return true;\n            } 671981"];
1762 [label="return true; 671982"];
1763 [label="var diagnostics = c.GetDiagnostics(); 671983"];
1764 [label="param IsSymbolAccessibleCore(Symbol within) 671984"];
1765 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 671985"];
1766 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 671986"];
1767 [label="Debug.Assert((object)symbol != null); 671987"];
1768 [label="Debug.Assert((object)within != null); 671988"];
1769 [label="Debug.Assert(within.IsDefinition); 671989"];
1770 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 671990"];
1771 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 671991"];
1772 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 671992"];
1773 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 671993"];
1774 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 671994"];
1775 [label="param IsMemberAccessible(Symbol within) 671995"];
1776 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 671996"];
1777 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 671997"];
1778 [label="param IsMemberAccessible(CSharpCompilation compilation) 671998"];
1779 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 671999"];
1780 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 672000"];
1781 [label="Debug.Assert((object)containingType != null); 672001"];
1782 [label="Debug.Assert((object)containingType != null); 672002"];
1783 [label="failedThroughTypeCheck = false; 672003"];
1784 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 672004"];
1785 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 672005"];
1786 [label="param IsNamedTypeAccessible(Symbol within) 672006"];
1787 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 672007"];
1788 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 672008"];
1789 [label="Debug.Assert((object)type != null); 672009"];
1790 [label="Debug.Assert((object)type != null); 672010"];
1791 [label="var compilation = within.DeclaringCompilation; 672011"];
1792 [label="bool unused; 672012"];
1793 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 672013"];
1794 [label="var containingType = type.ContainingType; 672014"];
1795 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 672015"];
1796 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 672016"];
1797 [label="(object)containingType == null 672017"];
1798 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 672018"];
1799 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 672019"];
1800 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 672020"];
1801 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 672021"];
1802 [label="param IsNonNestedTypeAccessible(Symbol within) 672022"];
1803 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 672023"];
1804 [label="Debug.Assert((object)assembly != null); 672024"];
1805 [label="Debug.Assert((object)assembly != null); 672025"];
1806 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 672026"];
1807 [label="return true; 672027"];
1808 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 672028"];
1809 [label="return true; 672029"];
1810 [label="var diagnostics = c.GetDiagnostics(); 672030"];
1811 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 672031"];
1812 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 672032"];
1813 [label="Debug.Assert(symbol is object); 672033"];
1814 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 672034"];
1815 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 672035"];
1816 [label="symbol = symbol.ContainingType; 672036"];
1817 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 672037"];
1818 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 672038"];
1819 [label="throughTypeOpt = null; 672039"];
1820 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 672040"];
1821 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 672041"];
1822 [label="param IsSymbolAccessibleCore(Symbol within) 672042"];
1823 [label="Debug.Assert((object)symbol != null); 672043"];
1824 [label="Debug.Assert((object)within != null); 672044"];
1825 [label="Debug.Assert(within.IsDefinition); 672045"];
1826 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 672046"];
1827 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 672047"];
1828 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 672048"];
1829 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 672049"];
1830 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 672050"];
1831 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 672051"];
1832 [label="param IsMemberAccessible(Symbol within) 672052"];
1833 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 672053"];
1834 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 672054"];
1835 [label="param IsMemberAccessible(CSharpCompilation compilation) 672055"];
1836 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 672056"];
1837 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 672057"];
1838 [label="Debug.Assert((object)containingType != null); 672058"];
1839 [label="Debug.Assert((object)containingType != null); 672059"];
1840 [label="failedThroughTypeCheck = false; 672060"];
1841 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 672061"];
1842 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 672062"];
1843 [label="param IsNamedTypeAccessible(Symbol within) 672063"];
1844 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 672064"];
1845 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 672065"];
1846 [label="Debug.Assert((object)type != null); 672066"];
1847 [label="Debug.Assert((object)type != null); 672067"];
1848 [label="var compilation = within.DeclaringCompilation; 672068"];
1849 [label="bool unused; 672069"];
1850 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 672070"];
1851 [label="var containingType = type.ContainingType; 672071"];
1852 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 672072"];
1853 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 672073"];
1854 [label="(object)containingType == null 672074"];
1855 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 672075"];
1856 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 672076"];
1857 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 672077"];
1858 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 672078"];
1859 [label="param IsNonNestedTypeAccessible(Symbol within) 672079"];
1860 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 672080"];
1861 [label="Debug.Assert((object)assembly != null); 672081"];
1862 [label="Debug.Assert((object)assembly != null); 672082"];
1863 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 672083"];
1864 [label="return true; 672084"];
1865 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 672085"];
1866 [label="return true; 672086"];
1867 [label="var diagnostics = c.GetDiagnostics(); 672087"];
1868 [label="param TypeConversions(AssemblySymbol corLibrary) 672088"];
1869 [label="param TypeConversions(bool includeNullability = false) 672089"];
1870 [label="param TypeConversions(this) 672090"];
1871 [label="corLibrary 672091"];
1872 [label="0 672092"];
1873 [label="includeNullability 672093"];
1874 [label="null 672094"];
1875 [label="param TypeConversions(this) 672095"];
1876 [label="param TypeConversions(AssemblySymbol corLibrary) 672096"];
1877 [label="param TypeConversions(int currentRecursionDepth) 672097"];
1878 [label="param TypeConversions(bool includeNullability) 672098"];
1879 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 672099"];
1880 [label="param TypeConversions(this) 672100"];
1881 [label="corLibrary 672101"];
1882 [label="currentRecursionDepth 672102"];
1883 [label="includeNullability 672103"];
1884 [label="otherNullabilityOpt 672104"];
1885 [label="param TypeConversions(this) 672105"];
1886 [label="param ConversionsBase(AssemblySymbol corLibrary) 672106"];
1887 [label="param ConversionsBase(int currentRecursionDepth) 672107"];
1888 [label="param ConversionsBase(bool includeNullability) 672108"];
1889 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 672109"];
1890 [label="param ConversionsBase(this) 672110"];
1891 [label="corLibrary 672111"];
1892 [label="currentRecursionDepth 672112"];
1893 [label="IncludeNullability 672113"];
1894 [label="_lazyOtherNullability 672114"];
1895 [label="Debug.Assert((object)corLibrary != null); 672115"];
1896 [label="Debug.Assert((object)corLibrary != null); 672116"];
1897 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 672117"];
1898 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 672118"];
1899 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 672119"];
1900 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 672120"];
1901 [label="this.corLibrary 672121"];
1902 [label="this.currentRecursionDepth 672122"];
1903 [label="IncludeNullability 672123"];
1904 [label="_lazyOtherNullability 672124"];
1905 [label="var diagnostics = c.GetDiagnostics(); 672125"];
1906 [label="var diagnostics = c.GetDiagnostics(); 672126"];
1907 [label="diagnostics.Verify(expected); 672127"];
1908 [label="diagnostics.Verify(expected); 672128"];
1909 [label="diagnostics.Verify(expected) 672129"];
1910 [label="param Verify(this ImmutableArray<Diagnostic> actual) 672130"];
1911 [label="param Verify(params DiagnosticDescription[] expected) 672131"];
1912 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 672132"];
1913 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 672133"];
1914 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 672134"];
1915 [label="param Verify(this IEnumerable<Diagnostic> actual) 672135"];
1916 [label="param Verify(params DiagnosticDescription[] expected) 672136"];
1917 [label="Verify(actual, expected, errorCodeOnly: false); 672137"];
1918 [label="Verify(actual, expected, errorCodeOnly: false); 672138"];
1919 [label="Verify(actual, expected, errorCodeOnly: false); 672139"];
1920 [label="Verify(actual, expected, errorCodeOnly: false) 672140"];
1921 [label="param Verify(IEnumerable<Diagnostic> actual) 672141"];
1922 [label="param Verify(DiagnosticDescription[] expected) 672142"];
1923 [label="param Verify(bool errorCodeOnly) 672143"];
1924 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 672144"];
1925 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 672145"];
1926 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 672146"];
1927 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 672147"];
1928 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 672148"];
1929 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 672149"];
1930 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 672150"];
1931 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 672151"];
1932 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 672152"];
1933 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 672153"];
1934 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 672154"];
1935 [label="{ } 672155"];
1936 [label="None = { } 672156"];
1937 [label="null 672157"];
1938 [label="Any = null 672158"];
1939 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 672159"];
1940 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 672160"];
1941 [label="DiagnosticDescription.GetAssertText(expected, actual) 672161"];
1942 [label="param GetAssertText(DiagnosticDescription[] expected) 672162"];
1943 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 672163"];
1944 [label="const int CSharp = 1; 672164"];
1945 [label="const int VisualBasic = 2; 672165"];
1946 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 672166"];
1947 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 672167"];
1948 [label="actual.Any() && actual.First() is CSDiagnostic 672168"];
1949 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 672169"];
1950 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 672170"];
1951 [label="int indentDepth = (language == CSharp) ? 4 : 1; 672171"];
1952 [label="(language == CSharp) 672172"];
1953 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 672173"];
1954 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 672174"];
1955 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 672175"];
1956 [label="IsSortedOrEmpty(expected) 672176"];
1957 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 672177"];
1958 [label="new LinePositionComparer() 672178"];
1959 [label="param LinePositionComparer(this) 672179"];
1960 [label="Instance = new LinePositionComparer() 672180"];
1961 [label="var comparer = LinePositionComparer.Instance; 672181"];
1962 [label="DiagnosticDescription last = null; 672182"];
1963 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 672183"];
1964 [label="return true; 672184"];
1965 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 672185"];
1966 [label="actual = Sort(actual); 672186"];
1967 [label="Sort(actual) 672187"];
1968 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 672188"];
1969 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 672189"];
1970 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 672190"];
1971 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 672191"];
1972 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 672192"];
1973 [label="var assertText = new StringBuilder(); 672193"];
1974 [label="assertText.AppendLine(); 672194"];
1975 [label="int i; 672195"];
1976 [label="assertText.AppendLine('Expected:'); 672196"];
1977 [label="assertText.AppendLine('Expected:'); 672197"];
1978 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 672198"];
1979 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 672199"];
1980 [label="GetCommaSeparatedLines(assertText, expectedText); 672200"];
1981 [label="GetCommaSeparatedLines(assertText, expectedText); 672201"];
1982 [label="GetCommaSeparatedLines(assertText, expectedText) 672202"];
1983 [label="param GetCommaSeparatedLines(StringBuilder sb) 672203"];
1984 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 672204"];
1985 [label="int n = lines.Count; 672205"];
1986 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 672206"];
1987 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 672207"];
1988 [label="GetCommaSeparatedLines(assertText, expectedText); 672208"];
1989 [label="assertText.AppendLine('Actual:'); 672209"];
1990 [label="assertText.AppendLine('Actual:'); 672210"];
1991 [label="var actualText = ArrayBuilder<string>.GetInstance(); 672211"];
1992 [label="var e = actual.GetEnumerator(); 672212"];
1993 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 672213"];
1994 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 672214"];
1995 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 672215"];
1996 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 672216"];
1997 [label="assertText.AppendLine('Diff:'); 672217"];
1998 [label="assertText.AppendLine('Diff:'); 672218"];
1999 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 672219"];
2000 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 672220"];
2001 [label="new[] { '\\r', '\\n' } 672221"];
2002 [label="'\\r' 672222"];
2003 [label="'\\n' 672223"];
2004 [label="new[] { '\\r', '\\n' } 672224"];
2005 [label="new[] { '\\r', '\\n' } 672225"];
2006 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 672226"];
2007 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 672227"];
2008 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 672228"];
2009 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 672229"];
2010 [label="param DiffReport(IEnumerable<T> expected) 672230"];
2011 [label="param DiffReport(IEnumerable<T> actual) 672231"];
2012 [label="param DiffReport(string separator) 672232"];
2013 [label="param DiffReport(IEqualityComparer<T> comparer = null) 672233"];
2014 [label="param DiffReport(Func<T, string> toString = null) 672234"];
2015 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 672235"];
2016 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 672236"];
2017 [label="(comparer != null) 672237"];
2018 [label="EqualityComparer<T>.Default 672238"];
2019 [label="new LCS<T>(EqualityComparer<T>.Default) 672239"];
2020 [label="param LCS(IEqualityComparer<T> comparer) 672240"];
2021 [label="param LCS(this) 672241"];
2022 [label="1 672242"];
2023 [label="DeleteCost = 1 672243"];
2024 [label="1 672244"];
2025 [label="InsertCost = 1 672245"];
2026 [label="2 672246"];
2027 [label="UpdateCost = 2 672247"];
2028 [label="param LongestCommonSubsequence(this) 672248"];
2029 [label="_comparer 672249"];
2030 [label="_comparer 672250"];
2031 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 672251"];
2032 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 672252"];
2033 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 672253"];
2034 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 672254"];
2035 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 672255"];
2036 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 672256"];
2037 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 672257"];
2038 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 672258"];
2039 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 672259"];
2040 [label="lcs.CalculateDiff(expectedList, actualList, toString) 672260"];
2041 [label="param CalculateDiff(IList<T> sequenceA) 672261"];
2042 [label="param CalculateDiff(IList<T> sequenceB) 672262"];
2043 [label="param CalculateDiff(Func<T, string> toString) 672263"];
2044 [label="param CalculateDiff(this) 672264"];
2045 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 672265"];
2046 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 672266"];
2047 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 672267"];
2048 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 672268"];
2049 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 672269"];
2050 [label="param GetEdits(TSequence sequenceA) 672270"];
2051 [label="param GetEdits(int lengthA) 672271"];
2052 [label="param GetEdits(TSequence sequenceB) 672272"];
2053 [label="param GetEdits(int lengthB) 672273"];
2054 [label="param GetEdits(this) 672274"];
2055 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 672275"];
2056 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 672276"];
2057 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 672277"];
2058 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 672278"];
2059 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 672279"];
2060 [label="param ComputeCostMatrix(TSequence sequenceA) 672280"];
2061 [label="param ComputeCostMatrix(int lengthA) 672281"];
2062 [label="param ComputeCostMatrix(TSequence sequenceB) 672282"];
2063 [label="param ComputeCostMatrix(int lengthB) 672283"];
2064 [label="param ComputeCostMatrix(this) 672284"];
2065 [label="var la = lengthA + 1; 672285"];
2066 [label="var la = lengthA + 1; 672286"];
2067 [label="var lb = lengthB + 1; 672287"];
2068 [label="var lb = lengthB + 1; 672288"];
2069 [label="var d = new int[la, lb]; 672289"];
2070 [label="d[0, 0] = 0; 672290"];
2071 [label="d[0, 0] 672291"];
2072 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 672292"];
2073 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 672293"];
2074 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 672294"];
2075 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 672295"];
2076 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 672296"];
2077 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 672297"];
2078 [label="return d; 672298"];
2079 [label="int i = lengthA; 672299"];
2080 [label="int j = lengthB; 672300"];
2081 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 672301"];
2082 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 672302"];
2083 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 672303"];
2084 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 672304"];
2085 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 672305"];
2086 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 672306"];
2087 [label="param GetEdits(this) 672307"];
2088 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 672308"];
2089 [label="param CalculateDiff(this) 672309"];
2090 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 672310"];
2091 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 672311"];
2092 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 672312"];
2093 [label="actualText.Free(); 672313"];
2094 [label="expectedText.Free(); 672314"];
2095 [label="return assertText.ToString(); 672315"];
2096 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 672316"];
2097 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 672317"];
2098 [label="diagnostics.Verify(expected); 672318"];
2099 [label="VerifyAssemblyIds(c, diagnostics); 672319"];
2100 [label="VerifyAssemblyIds(c, diagnostics); 672320"];
2101 [label="VerifyAssemblyIds(c, diagnostics) 672321"];
2102 [label="param VerifyAssemblyIds(TCompilation c) 672322"];
2103 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 672323"];
2104 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 672324"];
2105 [label="VerifyAssemblyIds(c, diagnostics); 672325"];
2106 [label="return c; 672326"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 1;
575 -> 573;
575 -> 574;
576 -> 214;
576 -> 574;
577 -> 574;
579 -> 0;
580 -> 0;
581 -> 0;
584 -> 578;
584 -> 583;
585 -> 579;
585 -> 583;
586 -> 580;
586 -> 583;
587 -> 581;
587 -> 583;
588 -> 582;
588 -> 583;
589 -> 583;
590 -> 589;
590 -> 583;
591 -> 589;
591 -> 583;
592 -> 589;
592 -> 583;
593 -> 583;
594 -> 585;
594 -> 593;
594 -> 583;
595 -> 586;
595 -> 0;
595 -> 583;
596 -> 587;
596 -> 0;
596 -> 583;
597 -> 584;
597 -> 589;
597 -> 583;
598 -> 585;
598 -> 589;
598 -> 583;
599 -> 586;
599 -> 589;
599 -> 583;
600 -> 588;
600 -> 589;
600 -> 583;
601 -> 587;
601 -> 589;
601 -> 583;
602 -> 583;
603 -> 577;
603 -> 575;
603 -> 571;
603 -> 574;
604 -> 603;
604 -> 577;
605 -> 604;
605 -> 603;
605 -> 577;
606 -> 577;
607 -> 605;
607 -> 603;
607 -> 606;
607 -> 577;
608 -> 604;
608 -> 603;
608 -> 606;
608 -> 577;
609 -> 602;
609 -> 607;
610 -> 603;
610 -> 609;
610 -> 597;
610 -> 600;
610 -> 598;
610 -> 599;
610 -> 601;
610 -> 0;
610 -> 574;
611 -> 603;
611 -> 577;
612 -> 603;
612 -> 577;
613 -> 577;
614 -> 611;
614 -> 610;
614 -> 613;
615 -> 612;
615 -> 614;
615 -> 613;
616 -> 615;
616 -> 613;
617 -> 0;
617 -> 616;
618 -> 615;
618 -> 613;
619 -> 611;
619 -> 613;
620 -> 612;
620 -> 617;
620 -> 618;
620 -> 619;
620 -> 613;
621 -> 0;
621 -> 620;
622 -> 621;
623 -> 612;
623 -> 622;
624 -> 623;
624 -> 602;
624 -> 622;
625 -> 624;
626 -> 621;
627 -> 0;
627 -> 621;
628 -> 627;
629 -> 603;
629 -> 577;
630 -> 603;
630 -> 577;
631 -> 629;
631 -> 630;
631 -> 577;
632 -> 603;
632 -> 631;
632 -> 627;
632 -> 574;
634 -> 633;
636 -> 635;
638 -> 637;
641 -> 640;
642 -> 0;
643 -> 0;
644 -> 0;
645 -> 644;
647 -> 642;
647 -> 643;
647 -> 645;
647 -> 646;
648 -> 647;
650 -> 649;
652 -> 651;
654 -> 653;
656 -> 655;
657 -> 603;
657 -> 577;
658 -> 603;
658 -> 577;
659 -> 603;
659 -> 577;
660 -> 603;
660 -> 577;
661 -> 603;
661 -> 577;
662 -> 577;
663 -> 660;
663 -> 662;
663 -> 577;
664 -> 661;
664 -> 662;
664 -> 577;
665 -> 663;
665 -> 664;
665 -> 577;
666 -> 658;
666 -> 577;
667 -> 657;
667 -> 577;
668 -> 658;
668 -> 577;
669 -> 659;
669 -> 577;
670 -> 660;
670 -> 577;
671 -> 661;
671 -> 577;
672 -> 666;
672 -> 577;
673 -> 577;
674 -> 667;
674 -> 673;
675 -> 668;
675 -> 673;
676 -> 669;
676 -> 673;
677 -> 670;
677 -> 673;
678 -> 671;
678 -> 673;
679 -> 672;
679 -> 673;
680 -> 673;
681 -> 678;
681 -> 680;
681 -> 673;
682 -> 677;
682 -> 680;
682 -> 673;
683 -> 681;
683 -> 682;
683 -> 673;
684 -> 673;
685 -> 674;
685 -> 673;
686 -> 675;
686 -> 673;
687 -> 684;
687 -> 673;
688 -> 679;
688 -> 673;
689 -> 673;
690 -> 685;
690 -> 689;
691 -> 686;
691 -> 689;
692 -> 687;
692 -> 689;
693 -> 688;
693 -> 689;
694 -> 691;
694 -> 689;
695 -> 694;
695 -> 690;
695 -> 632;
695 -> 689;
696 -> 689;
697 -> 695;
697 -> 696;
698 -> 695;
698 -> 696;
699 -> 697;
699 -> 696;
700 -> 697;
700 -> 695;
700 -> 696;
701 -> 696;
702 -> 697;
702 -> 695;
702 -> 696;
703 -> 697;
703 -> 695;
703 -> 696;
704 -> 703;
704 -> 696;
705 -> 696;
706 -> 701;
706 -> 705;
706 -> 689;
707 -> 701;
707 -> 696;
708 -> 701;
708 -> 696;
709 -> 707;
709 -> 696;
710 -> 707;
710 -> 696;
711 -> 707;
711 -> 696;
712 -> 707;
712 -> 696;
713 -> 712;
713 -> 696;
714 -> 712;
714 -> 713;
715 -> 690;
715 -> 694;
715 -> 695;
715 -> 705;
715 -> 689;
716 -> 689;
717 -> 715;
717 -> 716;
717 -> 689;
718 -> 715;
718 -> 717;
719 -> 717;
720 -> 718;
720 -> 719;
721 -> 718;
721 -> 719;
722 -> 720;
722 -> 719;
723 -> 720;
723 -> 718;
723 -> 719;
724 -> 719;
725 -> 720;
725 -> 718;
725 -> 719;
726 -> 720;
726 -> 718;
726 -> 719;
727 -> 726;
727 -> 719;
728 -> 724;
728 -> 719;
729 -> 724;
729 -> 719;
730 -> 728;
730 -> 719;
731 -> 728;
731 -> 719;
732 -> 728;
732 -> 719;
733 -> 728;
733 -> 719;
734 -> 733;
734 -> 719;
735 -> 717;
736 -> 719;
736 -> 735;
736 -> 717;
737 -> 715;
737 -> 689;
738 -> 673;
739 -> 719;
739 -> 738;
739 -> 673;
740 -> 737;
740 -> 673;
741 -> 719;
741 -> 696;
742 -> 719;
742 -> 696;
743 -> 741;
743 -> 696;
744 -> 741;
744 -> 719;
744 -> 696;
745 -> 741;
745 -> 719;
745 -> 696;
746 -> 741;
746 -> 719;
746 -> 696;
747 -> 746;
747 -> 696;
748 -> 724;
749 -> 724;
750 -> 748;
750 -> 724;
751 -> 748;
751 -> 724;
752 -> 748;
752 -> 724;
753 -> 748;
753 -> 724;
754 -> 753;
754 -> 724;
755 -> 719;
756 -> 724;
756 -> 755;
756 -> 719;
757 -> 719;
757 -> 689;
758 -> 724;
758 -> 738;
758 -> 673;
759 -> 757;
759 -> 673;
760 -> 724;
761 -> 724;
761 -> 689;
762 -> 761;
762 -> 673;
763 -> 603;
763 -> 577;
764 -> 603;
764 -> 577;
765 -> 763;
765 -> 577;
766 -> 763;
766 -> 724;
766 -> 577;
767 -> 577;
768 -> 763;
768 -> 724;
768 -> 577;
769 -> 763;
769 -> 724;
769 -> 577;
770 -> 769;
770 -> 577;
771 -> 577;
772 -> 767;
772 -> 771;
772 -> 574;
773 -> 767;
773 -> 577;
774 -> 767;
774 -> 577;
775 -> 773;
775 -> 577;
776 -> 773;
776 -> 577;
777 -> 773;
777 -> 577;
778 -> 773;
778 -> 577;
779 -> 778;
779 -> 577;
780 -> 767;
780 -> 577;
781 -> 767;
781 -> 577;
782 -> 767;
782 -> 577;
783 -> 767;
783 -> 577;
784 -> 780;
784 -> 577;
785 -> 577;
786 -> 783;
786 -> 785;
787 -> 786;
787 -> 0;
787 -> 785;
788 -> 787;
788 -> 577;
789 -> 577;
790 -> 780;
790 -> 789;
790 -> 577;
791 -> 788;
791 -> 790;
791 -> 577;
792 -> 780;
792 -> 791;
793 -> 792;
793 -> 577;
794 -> 784;
794 -> 577;
795 -> 781;
795 -> 577;
796 -> 782;
796 -> 577;
797 -> 577;
798 -> 793;
798 -> 797;
799 -> 794;
799 -> 797;
800 -> 795;
800 -> 797;
801 -> 796;
801 -> 797;
802 -> 783;
802 -> 797;
803 -> 797;
804 -> 798;
804 -> 803;
804 -> 797;
805 -> 801;
805 -> 797;
806 -> 802;
806 -> 797;
807 -> 797;
808 -> 806;
808 -> 807;
809 -> 806;
809 -> 807;
810 -> 807;
811 -> 810;
811 -> 807;
812 -> 810;
812 -> 807;
813 -> 810;
813 -> 807;
814 -> 810;
814 -> 807;
815 -> 808;
815 -> 810;
815 -> 807;
816 -> 806;
816 -> 810;
816 -> 811;
816 -> 812;
816 -> 813;
816 -> 814;
816 -> 815;
816 -> 797;
817 -> 799;
817 -> 797;
818 -> 800;
818 -> 797;
819 -> 801;
819 -> 797;
820 -> 797;
821 -> 817;
821 -> 820;
822 -> 818;
822 -> 820;
823 -> 819;
823 -> 820;
824 -> 816;
824 -> 820;
825 -> 820;
826 -> 822;
826 -> 825;
826 -> 820;
827 -> 823;
827 -> 825;
827 -> 820;
828 -> 826;
828 -> 827;
828 -> 820;
829 -> 821;
829 -> 824;
829 -> 820;
830 -> 822;
830 -> 824;
830 -> 820;
831 -> 823;
831 -> 824;
831 -> 820;
832 -> 797;
833 -> 798;
833 -> 797;
834 -> 797;
835 -> 833;
835 -> 834;
836 -> 816;
836 -> 834;
837 -> 835;
837 -> 834;
838 -> 834;
839 -> 837;
839 -> 838;
840 -> 836;
840 -> 838;
841 -> 840;
841 -> 838;
842 -> 841;
842 -> 839;
842 -> 816;
842 -> 829;
842 -> 830;
842 -> 831;
842 -> 838;
843 -> 838;
844 -> 842;
844 -> 843;
845 -> 842;
845 -> 843;
846 -> 845;
846 -> 842;
846 -> 843;
847 -> 844;
847 -> 843;
848 -> 846;
848 -> 847;
848 -> 842;
848 -> 843;
849 -> 844;
849 -> 843;
850 -> 0;
850 -> 843;
851 -> 843;
852 -> 849;
852 -> 851;
853 -> 850;
853 -> 851;
854 -> 853;
854 -> 851;
855 -> 851;
856 -> 852;
856 -> 851;
857 -> 853;
857 -> 851;
858 -> 851;
859 -> 851;
860 -> 856;
860 -> 859;
861 -> 857;
861 -> 859;
862 -> 858;
862 -> 859;
863 -> 860;
863 -> 862;
863 -> 859;
864 -> 861;
864 -> 862;
864 -> 859;
865 -> 858;
865 -> 843;
866 -> 843;
867 -> 843;
868 -> 845;
868 -> 867;
869 -> 868;
869 -> 848;
869 -> 867;
870 -> 869;
870 -> 843;
871 -> 865;
871 -> 843;
872 -> 866;
872 -> 843;
873 -> 871;
873 -> 872;
873 -> 870;
873 -> 863;
873 -> 864;
873 -> 848;
873 -> 843;
874 -> 843;
875 -> 873;
875 -> 874;
876 -> 875;
876 -> 873;
876 -> 874;
877 -> 844;
877 -> 876;
878 -> 876;
879 -> 877;
879 -> 878;
880 -> 879;
880 -> 878;
881 -> 879;
881 -> 878;
882 -> 880;
882 -> 878;
883 -> 878;
884 -> 882;
884 -> 883;
885 -> 881;
885 -> 883;
886 -> 884;
886 -> 879;
886 -> 883;
887 -> 883;
888 -> 887;
888 -> 883;
889 -> 884;
889 -> 879;
889 -> 883;
890 -> 885;
890 -> 889;
890 -> 886;
890 -> 879;
891 -> 885;
891 -> 889;
891 -> 890;
892 -> 890;
893 -> 891;
893 -> 883;
894 -> 883;
895 -> 893;
895 -> 894;
895 -> 883;
896 -> 893;
896 -> 884;
896 -> 883;
897 -> 893;
897 -> 895;
898 -> 0;
898 -> 895;
899 -> 893;
899 -> 897;
899 -> 895;
900 -> 883;
901 -> 900;
901 -> 878;
902 -> 878;
903 -> 881;
903 -> 902;
904 -> 902;
905 -> 903;
905 -> 899;
905 -> 904;
906 -> 905;
906 -> 902;
907 -> 878;
908 -> 882;
908 -> 907;
909 -> 901;
909 -> 907;
910 -> 906;
910 -> 907;
911 -> 881;
911 -> 907;
912 -> 907;
913 -> 911;
913 -> 912;
914 -> 913;
914 -> 899;
914 -> 912;
915 -> 914;
915 -> 907;
916 -> 907;
917 -> 908;
917 -> 915;
917 -> 907;
918 -> 909;
918 -> 907;
919 -> 910;
919 -> 918;
920 -> 0;
920 -> 919;
921 -> 908;
921 -> 907;
922 -> 920;
922 -> 907;
923 -> 907;
924 -> 921;
924 -> 923;
925 -> 922;
925 -> 923;
926 -> 925;
926 -> 923;
927 -> 923;
928 -> 923;
928 -> 907;
929 -> 907;
930 -> 907;
931 -> 911;
931 -> 930;
932 -> 931;
932 -> 899;
932 -> 930;
933 -> 932;
933 -> 907;
934 -> 928;
934 -> 907;
935 -> 929;
935 -> 907;
936 -> 934;
936 -> 935;
936 -> 933;
936 -> 924;
936 -> 925;
936 -> 899;
936 -> 907;
937 -> 907;
938 -> 936;
939 -> 911;
939 -> 938;
940 -> 939;
940 -> 936;
940 -> 938;
941 -> 940;
941 -> 936;
942 -> 910;
942 -> 936;
943 -> 942;
944 -> 911;
944 -> 943;
945 -> 944;
945 -> 936;
945 -> 943;
946 -> 945;
946 -> 942;
947 -> 941;
947 -> 942;
948 -> 908;
948 -> 942;
949 -> 909;
949 -> 942;
950 -> 942;
951 -> 942;
952 -> 946;
952 -> 951;
953 -> 947;
953 -> 951;
954 -> 948;
954 -> 951;
955 -> 949;
955 -> 951;
956 -> 950;
956 -> 951;
957 -> 953;
957 -> 951;
958 -> 951;
959 -> 957;
959 -> 958;
960 -> 956;
960 -> 958;
961 -> 958;
962 -> 960;
962 -> 958;
963 -> 960;
963 -> 958;
964 -> 960;
964 -> 958;
965 -> 960;
965 -> 958;
966 -> 960;
966 -> 958;
967 -> 958;
968 -> 959;
968 -> 967;
968 -> 958;
969 -> 959;
969 -> 960;
969 -> 958;
970 -> 959;
970 -> 936;
970 -> 960;
970 -> 958;
971 -> 959;
971 -> 936;
971 -> 960;
971 -> 958;
972 -> 961;
972 -> 960;
972 -> 958;
973 -> 956;
973 -> 951;
974 -> 956;
974 -> 951;
975 -> 956;
975 -> 951;
976 -> 956;
976 -> 951;
977 -> 956;
977 -> 951;
978 -> 951;
979 -> 952;
979 -> 978;
979 -> 951;
980 -> 951;
981 -> 954;
981 -> 980;
981 -> 951;
982 -> 952;
982 -> 956;
982 -> 951;
983 -> 954;
983 -> 956;
983 -> 955;
983 -> 951;
984 -> 983;
984 -> 956;
984 -> 951;
985 -> 955;
985 -> 951;
986 -> 954;
986 -> 936;
986 -> 985;
987 -> 954;
987 -> 986;
988 -> 987;
988 -> 986;
988 -> 956;
989 -> 942;
990 -> 911;
990 -> 989;
991 -> 990;
991 -> 986;
991 -> 989;
992 -> 991;
992 -> 942;
993 -> 908;
993 -> 942;
994 -> 942;
995 -> 936;
996 -> 995;
996 -> 992;
997 -> 996;
997 -> 936;
998 -> 928;
998 -> 936;
999 -> 950;
999 -> 936;
1000 -> 998;
1000 -> 999;
1000 -> 997;
1000 -> 924;
1000 -> 925;
1000 -> 971;
1000 -> 970;
1000 -> 969;
1000 -> 972;
1000 -> 966;
1000 -> 982;
1000 -> 984;
1000 -> 975;
1000 -> 976;
1000 -> 977;
1000 -> 988;
1000 -> 992;
1000 -> 983;
1000 -> 986;
1000 -> 936;
1001 -> 936;
1002 -> 950;
1002 -> 907;
1003 -> 879;
1003 -> 1002;
1003 -> 1000;
1003 -> 878;
1004 -> 876;
1005 -> 1003;
1005 -> 1004;
1006 -> 1005;
1006 -> 1003;
1006 -> 1004;
1007 -> 1004;
1008 -> 1006;
1008 -> 1007;
1008 -> 1004;
1009 -> 1008;
1009 -> 1004;
1010 -> 1009;
1010 -> 876;
1011 -> 844;
1011 -> 876;
1012 -> 1010;
1012 -> 876;
1013 -> 1003;
1013 -> 876;
1014 -> 876;
1015 -> 876;
1016 -> 1012;
1016 -> 1015;
1017 -> 1013;
1017 -> 1015;
1018 -> 1014;
1018 -> 1015;
1019 -> 1014;
1019 -> 1015;
1020 -> 1017;
1020 -> 1015;
1021 -> 1015;
1022 -> 1020;
1022 -> 1021;
1023 -> 1019;
1023 -> 1021;
1024 -> 1021;
1025 -> 1023;
1025 -> 1021;
1026 -> 1023;
1026 -> 1021;
1027 -> 1023;
1027 -> 1021;
1028 -> 1023;
1028 -> 1021;
1029 -> 1023;
1029 -> 1021;
1030 -> 1021;
1031 -> 1022;
1031 -> 1030;
1031 -> 1021;
1032 -> 1022;
1032 -> 1010;
1032 -> 1023;
1032 -> 1021;
1033 -> 1022;
1033 -> 1010;
1033 -> 1023;
1033 -> 1021;
1034 -> 1024;
1034 -> 1023;
1034 -> 1021;
1035 -> 1019;
1035 -> 1015;
1036 -> 1019;
1036 -> 1015;
1037 -> 1019;
1037 -> 1015;
1038 -> 1019;
1038 -> 1015;
1039 -> 1019;
1039 -> 1015;
1040 -> 1015;
1041 -> 1016;
1041 -> 1040;
1041 -> 1015;
1042 -> 1016;
1042 -> 1019;
1042 -> 1015;
1043 -> 602;
1043 -> 1015;
1044 -> 1043;
1044 -> 1018;
1044 -> 1015;
1045 -> 1044;
1045 -> 1019;
1045 -> 1015;
1046 -> 876;
1047 -> 844;
1047 -> 1010;
1047 -> 1046;
1047 -> 876;
1048 -> 844;
1048 -> 1010;
1048 -> 876;
1049 -> 876;
1050 -> 1048;
1050 -> 1049;
1051 -> 1014;
1051 -> 1049;
1052 -> 1051;
1052 -> 1032;
1052 -> 1049;
1053 -> 0;
1053 -> 1049;
1054 -> 1049;
1055 -> 1052;
1055 -> 1054;
1056 -> 1053;
1056 -> 1054;
1057 -> 1055;
1057 -> 1056;
1057 -> 1054;
1058 -> 1050;
1058 -> 1049;
1059 -> 1057;
1059 -> 1058;
1059 -> 1049;
1060 -> 1059;
1060 -> 1049;
1061 -> 876;
1062 -> 1061;
1062 -> 1058;
1063 -> 1062;
1063 -> 876;
1064 -> 865;
1064 -> 876;
1065 -> 1060;
1065 -> 876;
1066 -> 1064;
1066 -> 1065;
1066 -> 1063;
1066 -> 863;
1066 -> 864;
1066 -> 1033;
1066 -> 1032;
1066 -> 1022;
1066 -> 1034;
1066 -> 1029;
1066 -> 1042;
1066 -> 1036;
1066 -> 1045;
1066 -> 1038;
1066 -> 1039;
1066 -> 1058;
1066 -> 724;
1066 -> 876;
1067 -> 876;
1068 -> 1060;
1068 -> 843;
1069 -> 842;
1069 -> 1068;
1069 -> 1066;
1069 -> 838;
1070 -> 816;
1070 -> 797;
1071 -> 802;
1071 -> 1070;
1071 -> 1069;
1071 -> 797;
1072 -> 1069;
1072 -> 797;
1073 -> 767;
1073 -> 1072;
1073 -> 1071;
1073 -> 574;
1074 -> 767;
1074 -> 577;
1075 -> 767;
1075 -> 577;
1076 -> 767;
1076 -> 577;
1077 -> 767;
1077 -> 577;
1078 -> 767;
1078 -> 577;
1079 -> 1074;
1079 -> 577;
1080 -> 1075;
1080 -> 577;
1081 -> 1076;
1081 -> 577;
1082 -> 1077;
1082 -> 577;
1083 -> 577;
1084 -> 1079;
1084 -> 1083;
1085 -> 1080;
1085 -> 1083;
1086 -> 1081;
1086 -> 1083;
1087 -> 1082;
1087 -> 1083;
1088 -> 1078;
1088 -> 1083;
1089 -> 1083;
1090 -> 1085;
1090 -> 1089;
1090 -> 1083;
1091 -> 1084;
1091 -> 1083;
1092 -> 1085;
1092 -> 1083;
1093 -> 1086;
1093 -> 1083;
1094 -> 1083;
1095 -> 1086;
1095 -> 1094;
1095 -> 1083;
1096 -> 1095;
1096 -> 1087;
1096 -> 1083;
1097 -> 1083;
1098 -> 1091;
1098 -> 1097;
1099 -> 1092;
1099 -> 1097;
1100 -> 1093;
1100 -> 1097;
1101 -> 1096;
1101 -> 1097;
1102 -> 1088;
1102 -> 1097;
1103 -> 1098;
1103 -> 1097;
1104 -> 1098;
1104 -> 1103;
1105 -> 1099;
1105 -> 1103;
1106 -> 1103;
1107 -> 1104;
1107 -> 1106;
1108 -> 1105;
1108 -> 1106;
1109 -> 1102;
1109 -> 1106;
1110 -> 1107;
1110 -> 1106;
1111 -> 1110;
1111 -> 1106;
1112 -> 1108;
1112 -> 1106;
1113 -> 1106;
1114 -> 1111;
1114 -> 1113;
1115 -> 1112;
1115 -> 1113;
1116 -> 1109;
1116 -> 1113;
1117 -> 1114;
1117 -> 1113;
1118 -> 1115;
1118 -> 1113;
1119 -> 1113;
1120 -> 1117;
1120 -> 1119;
1121 -> 1118;
1121 -> 1119;
1122 -> 1117;
1122 -> 1119;
1123 -> 1116;
1123 -> 1119;
1124 -> 1123;
1124 -> 1119;
1125 -> 1120;
1125 -> 1119;
1126 -> 1122;
1126 -> 1119;
1127 -> 1121;
1127 -> 1119;
1128 -> 1119;
1129 -> 1124;
1129 -> 1128;
1130 -> 1125;
1130 -> 1128;
1131 -> 1126;
1131 -> 1128;
1132 -> 1127;
1132 -> 1128;
1133 -> 1130;
1133 -> 1128;
1134 -> 1129;
1134 -> 1133;
1134 -> 1128;
1135 -> 1128;
1136 -> 1134;
1136 -> 1135;
1136 -> 1128;
1137 -> 1134;
1137 -> 1128;
1138 -> 1132;
1138 -> 1128;
1139 -> 1131;
1139 -> 1128;
1140 -> 1128;
1141 -> 1137;
1141 -> 1140;
1142 -> 1138;
1142 -> 1140;
1143 -> 1139;
1143 -> 1140;
1144 -> 1141;
1144 -> 1134;
1144 -> 1140;
1145 -> 1140;
1146 -> 1144;
1146 -> 1145;
1146 -> 1140;
1147 -> 1134;
1147 -> 1128;
1148 -> 1110;
1148 -> 1106;
1149 -> 1106;
1150 -> 1148;
1150 -> 1149;
1151 -> 1109;
1151 -> 1149;
1152 -> 1150;
1152 -> 1149;
1153 -> 1150;
1153 -> 1149;
1154 -> 1149;
1155 -> 1153;
1155 -> 1154;
1156 -> 1153;
1156 -> 1154;
1157 -> 1151;
1157 -> 1154;
1158 -> 1155;
1158 -> 1154;
1159 -> 1156;
1159 -> 1154;
1160 -> 1158;
1160 -> 1159;
1160 -> 1154;
1161 -> 1160;
1161 -> 1154;
1162 -> 1157;
1162 -> 1161;
1163 -> 0;
1163 -> 1161;
1164 -> 1161;
1165 -> 1157;
1165 -> 1164;
1166 -> 1165;
1166 -> 1164;
1167 -> 1164;
1168 -> 1165;
1168 -> 1167;
1169 -> 1168;
1169 -> 1167;
1170 -> 1168;
1170 -> 1167;
1171 -> 1167;
1172 -> 1170;
1172 -> 1171;
1173 -> 1172;
1173 -> 1171;
1174 -> 1173;
1175 -> 1174;
1175 -> 1167;
1176 -> 1175;
1176 -> 1167;
1177 -> 1176;
1177 -> 1161;
1178 -> 1147;
1178 -> 1106;
1179 -> 1106;
1180 -> 1178;
1180 -> 1179;
1181 -> 1180;
1181 -> 1179;
1182 -> 1179;
1183 -> 1179;
1184 -> 1181;
1184 -> 1183;
1185 -> 1182;
1185 -> 1183;
1186 -> 1184;
1186 -> 1183;
1187 -> 1184;
1187 -> 1185;
1187 -> 1183;
1188 -> 1183;
1189 -> 1188;
1189 -> 1185;
1189 -> 1183;
1190 -> 1183;
1191 -> 1190;
1191 -> 1185;
1191 -> 1183;
1192 -> 1182;
1192 -> 1106;
1193 -> 1106;
1194 -> 1177;
1194 -> 1192;
1194 -> 1193;
1194 -> 1187;
1194 -> 1189;
1194 -> 1191;
1194 -> 1106;
1195 -> 1083;
1196 -> 1194;
1196 -> 1195;
1197 -> 1196;
1197 -> 1194;
1197 -> 1195;
1198 -> 1197;
1198 -> 1083;
1199 -> 1198;
1200 -> 1199;
1200 -> 1198;
1201 -> 1200;
1202 -> 1194;
1202 -> 1201;
1203 -> 1202;
1203 -> 1194;
1203 -> 1201;
1204 -> 1203;
1204 -> 1200;
1205 -> 1088;
1205 -> 1200;
1206 -> 1084;
1206 -> 1200;
1207 -> 1085;
1207 -> 1200;
1208 -> 1205;
1208 -> 1206;
1208 -> 1207;
1208 -> 1204;
1208 -> 1194;
1208 -> 1200;
1209 -> 1200;
1210 -> 1208;
1210 -> 1209;
1211 -> 1208;
1211 -> 1209;
1212 -> 1208;
1212 -> 1209;
1213 -> 1208;
1213 -> 1209;
1214 -> 1208;
1214 -> 1209;
1215 -> 1210;
1215 -> 1209;
1216 -> 1211;
1216 -> 1209;
1217 -> 1212;
1217 -> 1209;
1218 -> 1213;
1218 -> 1209;
1219 -> 1209;
1220 -> 1215;
1220 -> 1219;
1221 -> 1216;
1221 -> 1219;
1222 -> 1217;
1222 -> 1219;
1223 -> 1218;
1223 -> 1219;
1224 -> 1214;
1224 -> 1219;
1225 -> 1221;
1225 -> 1208;
1225 -> 1219;
1226 -> 1220;
1226 -> 1225;
1227 -> 1221;
1227 -> 1225;
1228 -> 1222;
1228 -> 1225;
1229 -> 1223;
1229 -> 1225;
1230 -> 1225;
1231 -> 1224;
1231 -> 1230;
1232 -> 1231;
1232 -> 1208;
1232 -> 1230;
1233 -> 1230;
1234 -> 1232;
1234 -> 1233;
1234 -> 1230;
1235 -> 1234;
1235 -> 1230;
1236 -> 1231;
1236 -> 1208;
1236 -> 1235;
1237 -> 1236;
1237 -> 1225;
1238 -> 1225;
1239 -> 1224;
1239 -> 1238;
1240 -> 1238;
1241 -> 1239;
1241 -> 1240;
1242 -> 1241;
1242 -> 1208;
1242 -> 1236;
1242 -> 1240;
1243 -> 1240;
1244 -> 1242;
1244 -> 1238;
1245 -> 1244;
1245 -> 1238;
1246 -> 1244;
1246 -> 1208;
1246 -> 0;
1246 -> 1238;
1247 -> 1244;
1247 -> 1238;
1248 -> 1244;
1248 -> 1238;
1249 -> 1248;
1249 -> 1225;
1250 -> 1224;
1250 -> 1208;
1250 -> 1225;
1251 -> 1225;
1252 -> 1226;
1252 -> 1251;
1253 -> 1227;
1253 -> 1251;
1254 -> 1228;
1254 -> 1251;
1255 -> 1229;
1255 -> 1251;
1256 -> 1237;
1256 -> 1251;
1257 -> 1249;
1257 -> 1251;
1258 -> 1250;
1258 -> 1251;
1259 -> 1253;
1259 -> 1251;
1260 -> 1259;
1260 -> 1208;
1260 -> 1236;
1260 -> 1242;
1260 -> 1251;
1261 -> 1253;
1261 -> 1260;
1261 -> 0;
1261 -> 1251;
1262 -> 1253;
1262 -> 1260;
1262 -> 0;
1262 -> 1251;
1263 -> 1253;
1263 -> 1251;
1264 -> 1257;
1264 -> 1251;
1265 -> 1263;
1265 -> 1264;
1265 -> 1260;
1265 -> 1251;
1266 -> 1255;
1266 -> 1251;
1267 -> 1266;
1267 -> 1251;
1268 -> 1252;
1268 -> 1251;
1269 -> 1265;
1269 -> 1251;
1270 -> 1254;
1270 -> 1251;
1271 -> 1256;
1271 -> 1251;
1272 -> 1258;
1272 -> 1251;
1273 -> 1251;
1274 -> 1268;
1274 -> 1273;
1275 -> 1269;
1275 -> 1273;
1276 -> 1270;
1276 -> 1273;
1277 -> 1271;
1277 -> 1273;
1278 -> 1272;
1278 -> 1273;
1279 -> 1273;
1280 -> 1274;
1280 -> 1279;
1280 -> 1273;
1281 -> 1275;
1281 -> 1273;
1282 -> 1277;
1282 -> 1273;
1283 -> 1273;
1284 -> 1281;
1284 -> 1282;
1284 -> 1283;
1284 -> 1265;
1284 -> 1273;
1285 -> 1273;
1286 -> 1284;
1286 -> 1273;
1287 -> 1273;
1288 -> 1285;
1288 -> 1287;
1288 -> 1273;
1289 -> 1284;
1289 -> 1273;
1290 -> 1289;
1290 -> 1251;
1291 -> 1266;
1291 -> 1290;
1292 -> 1225;
1293 -> 1209;
1294 -> 1194;
1294 -> 1198;
1295 -> 1294;
1295 -> 577;
1296 -> 1075;
1296 -> 577;
1297 -> 1074;
1297 -> 577;
1298 -> 1076;
1298 -> 577;
1299 -> 577;
1300 -> 1295;
1300 -> 1299;
1301 -> 1296;
1301 -> 1299;
1302 -> 1297;
1302 -> 1299;
1303 -> 1298;
1303 -> 1299;
1304 -> 1078;
1304 -> 1299;
1305 -> 1299;
1306 -> 1300;
1306 -> 1305;
1307 -> 1306;
1307 -> 1194;
1307 -> 1305;
1308 -> 1307;
1308 -> 0;
1308 -> 1305;
1309 -> 1308;
1309 -> 1299;
1310 -> 1300;
1310 -> 1299;
1311 -> 577;
1312 -> 1310;
1312 -> 1311;
1313 -> 1312;
1313 -> 1194;
1313 -> 1311;
1314 -> 767;
1314 -> 1313;
1314 -> 1284;
1314 -> 574;
1315 -> 767;
1315 -> 577;
1316 -> 767;
1316 -> 577;
1317 -> 767;
1317 -> 577;
1318 -> 767;
1318 -> 577;
1319 -> 1318;
1319 -> 577;
1320 -> 1315;
1320 -> 577;
1321 -> 1317;
1321 -> 577;
1322 -> 1316;
1322 -> 577;
1323 -> 577;
1324 -> 1319;
1324 -> 1323;
1325 -> 1320;
1325 -> 1323;
1326 -> 1321;
1326 -> 1323;
1327 -> 1322;
1327 -> 1323;
1328 -> 1325;
1328 -> 1323;
1329 -> 1324;
1329 -> 1328;
1329 -> 1323;
1330 -> 1323;
1331 -> 1329;
1331 -> 1330;
1331 -> 1323;
1332 -> 1329;
1332 -> 1323;
1333 -> 1327;
1333 -> 1323;
1334 -> 1326;
1334 -> 1323;
1335 -> 1323;
1336 -> 1332;
1336 -> 1335;
1337 -> 1333;
1337 -> 1335;
1338 -> 1334;
1338 -> 1335;
1339 -> 1336;
1339 -> 1329;
1339 -> 1335;
1340 -> 1335;
1341 -> 1339;
1341 -> 1340;
1341 -> 1335;
1342 -> 1329;
1342 -> 1323;
1343 -> 767;
1343 -> 1342;
1343 -> 1339;
1343 -> 574;
1344 -> 1335;
1345 -> 1339;
1345 -> 1344;
1346 -> 1339;
1346 -> 1344;
1347 -> 1345;
1347 -> 1344;
1348 -> 1345;
1348 -> 1339;
1348 -> 1344;
1349 -> 1344;
1350 -> 1345;
1350 -> 1339;
1350 -> 1344;
1351 -> 1345;
1351 -> 1339;
1351 -> 1344;
1352 -> 1351;
1352 -> 1344;
1353 -> 1344;
1354 -> 1349;
1354 -> 1353;
1354 -> 1335;
1355 -> 1336;
1355 -> 1353;
1355 -> 1339;
1355 -> 1335;
1356 -> 1355;
1356 -> 1340;
1356 -> 1335;
1357 -> 767;
1357 -> 1342;
1357 -> 1355;
1357 -> 574;
1358 -> 767;
1358 -> 577;
1359 -> 767;
1359 -> 577;
1360 -> 767;
1360 -> 577;
1361 -> 767;
1361 -> 577;
1362 -> 767;
1362 -> 577;
1363 -> 577;
1364 -> 1358;
1364 -> 577;
1365 -> 577;
1366 -> 1359;
1366 -> 577;
1367 -> 1363;
1367 -> 577;
1368 -> 1365;
1368 -> 577;
1369 -> 767;
1369 -> 577;
1370 -> 767;
1370 -> 577;
1371 -> 767;
1371 -> 577;
1372 -> 767;
1372 -> 577;
1373 -> 577;
1374 -> 1369;
1374 -> 577;
1375 -> 1370;
1375 -> 577;
1376 -> 1372;
1376 -> 577;
1377 -> 1373;
1377 -> 577;
1378 -> 1371;
1378 -> 577;
1379 -> 577;
1380 -> 577;
1381 -> 1374;
1381 -> 1380;
1382 -> 1375;
1382 -> 1380;
1383 -> 1376;
1383 -> 1380;
1384 -> 1377;
1384 -> 1380;
1385 -> 1375;
1385 -> 1380;
1386 -> 1378;
1386 -> 1380;
1387 -> 1379;
1387 -> 1380;
1388 -> 1380;
1389 -> 1381;
1389 -> 1388;
1389 -> 1380;
1390 -> 1380;
1391 -> 1382;
1391 -> 1390;
1391 -> 1380;
1392 -> 1382;
1392 -> 1380;
1393 -> 1382;
1393 -> 1380;
1394 -> 1380;
1395 -> 1381;
1395 -> 1380;
1396 -> 1381;
1396 -> 0;
1396 -> 1380;
1397 -> 1381;
1397 -> 1396;
1398 -> 1381;
1398 -> 1396;
1399 -> 1382;
1399 -> 1396;
1400 -> 1383;
1400 -> 1396;
1401 -> 1394;
1401 -> 1396;
1402 -> 1385;
1402 -> 1396;
1403 -> 1386;
1403 -> 1396;
1404 -> 1396;
1405 -> 1396;
1406 -> 1398;
1406 -> 1405;
1407 -> 1398;
1407 -> 1405;
1408 -> 1399;
1408 -> 1405;
1409 -> 1400;
1409 -> 1405;
1410 -> 1401;
1410 -> 1405;
1411 -> 1402;
1411 -> 1405;
1412 -> 1403;
1412 -> 1405;
1413 -> 1404;
1413 -> 1405;
1414 -> 1408;
1414 -> 1405;
1415 -> 1405;
1416 -> 1406;
1416 -> 1415;
1416 -> 1405;
1417 -> 1405;
1418 -> 1406;
1418 -> 1408;
1418 -> 1405;
1419 -> 1406;
1419 -> 1405;
1420 -> 1408;
1420 -> 1405;
1421 -> 1412;
1421 -> 1405;
1422 -> 1413;
1422 -> 1405;
1423 -> 1405;
1424 -> 1419;
1424 -> 1423;
1425 -> 1420;
1425 -> 1423;
1426 -> 1421;
1426 -> 1423;
1427 -> 1422;
1427 -> 1423;
1428 -> 1425;
1428 -> 1423;
1429 -> 1423;
1430 -> 1424;
1430 -> 1429;
1430 -> 1423;
1431 -> 1425;
1431 -> 1423;
1432 -> 1423;
1433 -> 1424;
1433 -> 1423;
1434 -> 1424;
1434 -> 1423;
1435 -> 1423;
1436 -> 1434;
1436 -> 1435;
1436 -> 1423;
1437 -> 1436;
1437 -> 1423;
1438 -> 1425;
1438 -> 1437;
1439 -> 1437;
1440 -> 1437;
1440 -> 1439;
1441 -> 1437;
1441 -> 1439;
1442 -> 1438;
1442 -> 1439;
1443 -> 1442;
1443 -> 1439;
1444 -> 1439;
1445 -> 1440;
1445 -> 1444;
1445 -> 1439;
1446 -> 1441;
1446 -> 1439;
1447 -> 1446;
1448 -> 1407;
1448 -> 0;
1448 -> 1405;
1449 -> 1406;
1449 -> 1405;
1450 -> 1407;
1450 -> 1405;
1451 -> 1408;
1451 -> 1405;
1452 -> 1409;
1452 -> 1405;
1453 -> 1417;
1453 -> 1405;
1454 -> 1411;
1454 -> 1405;
1455 -> 1426;
1455 -> 1405;
1456 -> 1413;
1456 -> 1405;
1457 -> 1405;
1458 -> 1449;
1458 -> 1457;
1459 -> 1450;
1459 -> 1457;
1460 -> 1451;
1460 -> 1457;
1461 -> 1452;
1461 -> 1457;
1462 -> 1453;
1462 -> 1457;
1463 -> 1454;
1463 -> 1457;
1464 -> 1455;
1464 -> 1457;
1465 -> 1456;
1465 -> 1457;
1466 -> 1457;
1467 -> 1458;
1467 -> 1457;
1468 -> 1460;
1468 -> 1457;
1469 -> 1457;
1470 -> 1468;
1470 -> 1469;
1470 -> 1457;
1471 -> 1470;
1471 -> 1457;
1472 -> 1468;
1472 -> 1471;
1473 -> 1468;
1473 -> 1457;
1474 -> 1459;
1474 -> 1457;
1475 -> 1468;
1475 -> 1474;
1476 -> 1461;
1476 -> 1474;
1477 -> 1467;
1477 -> 1474;
1478 -> 1466;
1478 -> 1474;
1479 -> 1463;
1479 -> 1474;
1480 -> 1464;
1480 -> 1474;
1481 -> 1465;
1481 -> 1474;
1482 -> 1474;
1483 -> 1475;
1483 -> 1482;
1484 -> 1476;
1484 -> 1482;
1485 -> 1477;
1485 -> 1482;
1486 -> 1478;
1486 -> 1482;
1487 -> 1479;
1487 -> 1482;
1488 -> 1480;
1488 -> 1482;
1489 -> 1481;
1489 -> 1482;
1490 -> 1482;
1491 -> 1485;
1491 -> 0;
1491 -> 1482;
1492 -> 1482;
1493 -> 1483;
1493 -> 1492;
1493 -> 1482;
1494 -> 1483;
1494 -> 1482;
1495 -> 1485;
1495 -> 1482;
1496 -> 1482;
1497 -> 1494;
1497 -> 1496;
1498 -> 1495;
1498 -> 1496;
1499 -> 1496;
1500 -> 1497;
1500 -> 1499;
1500 -> 1496;
1501 -> 1496;
1502 -> 1498;
1502 -> 1501;
1502 -> 1496;
1503 -> 1498;
1503 -> 1496;
1504 -> 1497;
1504 -> 1496;
1505 -> 1496;
1506 -> 1504;
1506 -> 1505;
1506 -> 1496;
1507 -> 1504;
1507 -> 1506;
1508 -> 1504;
1508 -> 1498;
1508 -> 1506;
1509 -> 1504;
1509 -> 1506;
1510 -> 1496;
1511 -> 1510;
1511 -> 1482;
1512 -> 1483;
1512 -> 1482;
1513 -> 1482;
1514 -> 1484;
1514 -> 1513;
1514 -> 1482;
1515 -> 1514;
1515 -> 1482;
1516 -> 1482;
1517 -> 1512;
1517 -> 1516;
1517 -> 1482;
1518 -> 1512;
1518 -> 1517;
1519 -> 1512;
1519 -> 1517;
1520 -> 1485;
1520 -> 1517;
1521 -> 1487;
1521 -> 1517;
1522 -> 1488;
1522 -> 1517;
1523 -> 1489;
1523 -> 1517;
1524 -> 1517;
1525 -> 1519;
1525 -> 1524;
1526 -> 1520;
1526 -> 1524;
1527 -> 1521;
1527 -> 1524;
1528 -> 1522;
1528 -> 1524;
1529 -> 1523;
1529 -> 1524;
1530 -> 1525;
1530 -> 1524;
1531 -> 1526;
1531 -> 1524;
1532 -> 1524;
1533 -> 1524;
1534 -> 1526;
1534 -> 1524;
1535 -> 1534;
1535 -> 1524;
1536 -> 1524;
1537 -> 1525;
1537 -> 1524;
1538 -> 1524;
1539 -> 1524;
1540 -> 1537;
1540 -> 1539;
1540 -> 1524;
1541 -> 1537;
1541 -> 1540;
1542 -> 1537;
1542 -> 1540;
1543 -> 1534;
1543 -> 1542;
1543 -> 1540;
1544 -> 1537;
1544 -> 1526;
1544 -> 1540;
1545 -> 1534;
1545 -> 1540;
1546 -> 1537;
1546 -> 1540;
1547 -> 1529;
1547 -> 1540;
1548 -> 1527;
1548 -> 1540;
1549 -> 1536;
1549 -> 1540;
1550 -> 1546;
1550 -> 1547;
1550 -> 1548;
1550 -> 1549;
1550 -> 1540;
1551 -> 1540;
1552 -> 1550;
1552 -> 1551;
1552 -> 1540;
1553 -> 1550;
1553 -> 1552;
1554 -> 1553;
1554 -> 1552;
1555 -> 1528;
1555 -> 1552;
1556 -> 1554;
1556 -> 1555;
1556 -> 1550;
1556 -> 1552;
1557 -> 1553;
1557 -> 1556;
1558 -> 1553;
1559 -> 1558;
1559 -> 1556;
1559 -> 1553;
1560 -> 1534;
1560 -> 1559;
1560 -> 1553;
1561 -> 1553;
1561 -> 1526;
1562 -> 1560;
1563 -> 1550;
1563 -> 1524;
1564 -> 1562;
1564 -> 1524;
1565 -> 1532;
1565 -> 1524;
1566 -> 1533;
1566 -> 1524;
1567 -> 1562;
1567 -> 1524;
1568 -> 1567;
1569 -> 1515;
1569 -> 1568;
1569 -> 1567;
1570 -> 1569;
1571 -> 1556;
1571 -> 577;
1572 -> 1571;
1572 -> 1380;
1573 -> 1556;
1573 -> 1388;
1573 -> 1380;
1574 -> 1556;
1574 -> 1390;
1574 -> 1380;
1575 -> 1556;
1575 -> 1570;
1575 -> 1380;
1576 -> 1556;
1576 -> 1380;
1577 -> 1556;
1577 -> 1570;
1578 -> 1394;
1578 -> 1570;
1579 -> 1578;
1579 -> 1570;
1580 -> 1577;
1580 -> 1570;
1581 -> 1570;
1582 -> 1577;
1582 -> 1581;
1582 -> 1570;
1583 -> 1570;
1584 -> 1577;
1584 -> 1570;
1585 -> 1577;
1585 -> 1570;
1586 -> 1577;
1586 -> 1570;
1587 -> 1570;
1588 -> 1586;
1588 -> 1570;
1589 -> 1570;
1590 -> 1585;
1590 -> 1589;
1590 -> 1570;
1591 -> 1586;
1591 -> 1577;
1591 -> 1570;
1592 -> 1570;
1593 -> 1585;
1593 -> 1577;
1593 -> 1570;
1594 -> 1585;
1594 -> 1577;
1594 -> 1570;
1595 -> 1570;
1596 -> 1594;
1596 -> 1595;
1596 -> 1570;
1597 -> 1596;
1597 -> 1570;
1598 -> 1586;
1598 -> 1597;
1599 -> 1597;
1600 -> 1597;
1600 -> 1599;
1601 -> 1597;
1601 -> 1599;
1602 -> 1598;
1602 -> 1599;
1603 -> 1602;
1603 -> 1599;
1604 -> 1599;
1605 -> 1600;
1605 -> 1604;
1605 -> 1599;
1606 -> 1601;
1606 -> 1599;
1607 -> 1606;
1608 -> 1577;
1608 -> 0;
1608 -> 1570;
1609 -> 1608;
1610 -> 1570;
1610 -> 577;
1611 -> 1570;
1611 -> 577;
1612 -> 1610;
1612 -> 577;
1613 -> 1610;
1613 -> 1609;
1613 -> 577;
1614 -> 1610;
1614 -> 1609;
1614 -> 577;
1615 -> 1610;
1615 -> 1609;
1615 -> 577;
1616 -> 1615;
1616 -> 577;
1617 -> 1615;
1617 -> 1609;
1617 -> 1616;
1618 -> 778;
1618 -> 779;
1619 -> 1448;
1620 -> 1426;
1620 -> 1619;
1620 -> 574;
1621 -> 1426;
1621 -> 577;
1622 -> 1426;
1622 -> 577;
1623 -> 1621;
1623 -> 577;
1624 -> 1621;
1624 -> 577;
1625 -> 1621;
1625 -> 577;
1626 -> 1621;
1626 -> 577;
1627 -> 1626;
1627 -> 577;
1628 -> 1626;
1628 -> 1627;
1629 -> 1556;
1629 -> 577;
1630 -> 1556;
1630 -> 577;
1631 -> 1629;
1631 -> 577;
1632 -> 1629;
1632 -> 1570;
1632 -> 577;
1633 -> 1629;
1633 -> 1570;
1633 -> 577;
1634 -> 1629;
1634 -> 1570;
1634 -> 577;
1635 -> 1634;
1635 -> 577;
1636 -> 1634;
1636 -> 1570;
1636 -> 1635;
1637 -> 1426;
1637 -> 577;
1638 -> 1426;
1638 -> 577;
1639 -> 1637;
1639 -> 1380;
1640 -> 1638;
1640 -> 1380;
1641 -> 1637;
1641 -> 1380;
1642 -> 1426;
1642 -> 1388;
1642 -> 1380;
1643 -> 1639;
1643 -> 1390;
1643 -> 1380;
1644 -> 1639;
1644 -> 1380;
1645 -> 1639;
1645 -> 1380;
1646 -> 1426;
1647 -> 1394;
1647 -> 1426;
1648 -> 1426;
1649 -> 1426;
1650 -> 1639;
1650 -> 1426;
1651 -> 1640;
1651 -> 1426;
1652 -> 1647;
1652 -> 1426;
1653 -> 1641;
1653 -> 1426;
1654 -> 1426;
1655 -> 1650;
1655 -> 1426;
1656 -> 1426;
1657 -> 1648;
1657 -> 1656;
1657 -> 1426;
1658 -> 1426;
1659 -> 1648;
1659 -> 1650;
1659 -> 1426;
1660 -> 1648;
1660 -> 1426;
1661 -> 1650;
1661 -> 1426;
1662 -> 1654;
1662 -> 1426;
1663 -> 1661;
1663 -> 1426;
1664 -> 1426;
1665 -> 1660;
1665 -> 1664;
1665 -> 1426;
1666 -> 1661;
1666 -> 1426;
1667 -> 1426;
1668 -> 1660;
1668 -> 1426;
1669 -> 1660;
1669 -> 1426;
1670 -> 1426;
1671 -> 1669;
1671 -> 1670;
1671 -> 1426;
1672 -> 1671;
1672 -> 1426;
1673 -> 1661;
1673 -> 1672;
1674 -> 1672;
1675 -> 1672;
1675 -> 1674;
1676 -> 1672;
1676 -> 1674;
1677 -> 1673;
1677 -> 1674;
1678 -> 1677;
1678 -> 1674;
1679 -> 1674;
1680 -> 1675;
1680 -> 1679;
1680 -> 1674;
1681 -> 1676;
1681 -> 1674;
1682 -> 1681;
1683 -> 1649;
1683 -> 0;
1683 -> 1426;
1684 -> 1683;
1685 -> 1637;
1685 -> 1684;
1685 -> 574;
1686 -> 1637;
1686 -> 577;
1687 -> 1686;
1687 -> 1380;
1688 -> 1686;
1688 -> 1380;
1689 -> 1637;
1689 -> 1388;
1689 -> 1380;
1690 -> 1637;
1691 -> 1394;
1691 -> 1637;
1692 -> 1637;
1693 -> 1637;
1694 -> 1639;
1694 -> 1637;
1695 -> 1687;
1695 -> 1637;
1696 -> 1691;
1696 -> 1637;
1697 -> 1688;
1697 -> 1637;
1698 -> 1637;
1699 -> 1694;
1699 -> 1637;
1700 -> 1637;
1701 -> 1692;
1701 -> 1700;
1701 -> 1637;
1702 -> 1637;
1703 -> 1692;
1703 -> 1694;
1703 -> 1637;
1704 -> 1692;
1704 -> 1637;
1705 -> 1694;
1705 -> 1637;
1706 -> 1698;
1706 -> 1637;
1707 -> 1705;
1707 -> 1637;
1708 -> 1637;
1709 -> 1704;
1709 -> 1708;
1709 -> 1637;
1710 -> 1705;
1710 -> 1637;
1711 -> 1637;
1712 -> 1704;
1712 -> 1637;
1713 -> 1704;
1713 -> 1637;
1714 -> 1637;
1715 -> 1713;
1715 -> 1714;
1715 -> 1637;
1716 -> 1715;
1716 -> 1637;
1717 -> 1705;
1717 -> 1716;
1718 -> 1716;
1719 -> 1716;
1719 -> 1718;
1720 -> 1716;
1720 -> 1718;
1721 -> 1717;
1721 -> 1718;
1722 -> 1721;
1722 -> 1718;
1723 -> 1718;
1724 -> 1719;
1724 -> 1723;
1724 -> 1718;
1725 -> 1720;
1725 -> 1718;
1726 -> 1725;
1727 -> 1693;
1727 -> 0;
1727 -> 1637;
1728 -> 1692;
1728 -> 1637;
1729 -> 1693;
1729 -> 1637;
1730 -> 1694;
1730 -> 1637;
1731 -> 1695;
1731 -> 1637;
1732 -> 1702;
1732 -> 1637;
1733 -> 1697;
1733 -> 1637;
1734 -> 1686;
1734 -> 1637;
1735 -> 1698;
1735 -> 1637;
1736 -> 1637;
1737 -> 1728;
1737 -> 1736;
1738 -> 1729;
1738 -> 1736;
1739 -> 1730;
1739 -> 1736;
1740 -> 1731;
1740 -> 1736;
1741 -> 1732;
1741 -> 1736;
1742 -> 1733;
1742 -> 1736;
1743 -> 1734;
1743 -> 1736;
1744 -> 1735;
1744 -> 1736;
1745 -> 1736;
1746 -> 1737;
1746 -> 1736;
1747 -> 1739;
1747 -> 1736;
1748 -> 1736;
1749 -> 1747;
1749 -> 1748;
1749 -> 1736;
1750 -> 1749;
1750 -> 1736;
1751 -> 1747;
1751 -> 1750;
1752 -> 1747;
1752 -> 1736;
1753 -> 1738;
1753 -> 1736;
1754 -> 1752;
1754 -> 1753;
1755 -> 1737;
1755 -> 1753;
1756 -> 1753;
1757 -> 1754;
1757 -> 1756;
1758 -> 1755;
1758 -> 1756;
1759 -> 1757;
1759 -> 1756;
1760 -> 1758;
1760 -> 1756;
1761 -> 1759;
1761 -> 1760;
1761 -> 1756;
1762 -> 1761;
1763 -> 1743;
1763 -> 1762;
1763 -> 574;
1764 -> 1743;
1764 -> 1380;
1765 -> 1743;
1765 -> 1380;
1766 -> 1743;
1766 -> 1380;
1767 -> 1743;
1767 -> 1388;
1767 -> 1380;
1768 -> 1764;
1768 -> 1390;
1768 -> 1380;
1769 -> 1764;
1769 -> 1380;
1770 -> 1764;
1770 -> 1380;
1771 -> 1743;
1772 -> 1394;
1772 -> 1743;
1773 -> 1743;
1774 -> 1743;
1775 -> 1764;
1775 -> 1743;
1776 -> 1765;
1776 -> 1743;
1777 -> 1772;
1777 -> 1743;
1778 -> 1766;
1778 -> 1743;
1779 -> 1743;
1780 -> 1775;
1780 -> 1743;
1781 -> 1743;
1782 -> 1773;
1782 -> 1781;
1782 -> 1743;
1783 -> 1743;
1784 -> 1773;
1784 -> 1775;
1784 -> 1743;
1785 -> 1773;
1785 -> 1743;
1786 -> 1775;
1786 -> 1743;
1787 -> 1779;
1787 -> 1743;
1788 -> 1786;
1788 -> 1743;
1789 -> 1743;
1790 -> 1785;
1790 -> 1789;
1790 -> 1743;
1791 -> 1786;
1791 -> 1743;
1792 -> 1743;
1793 -> 1785;
1793 -> 1743;
1794 -> 1785;
1794 -> 1743;
1795 -> 1743;
1796 -> 1794;
1796 -> 1795;
1796 -> 1743;
1797 -> 1796;
1797 -> 1743;
1798 -> 1786;
1798 -> 1797;
1799 -> 1797;
1800 -> 1797;
1800 -> 1799;
1801 -> 1797;
1801 -> 1799;
1802 -> 1798;
1802 -> 1799;
1803 -> 1802;
1803 -> 1799;
1804 -> 1799;
1805 -> 1800;
1805 -> 1804;
1805 -> 1799;
1806 -> 1801;
1806 -> 1799;
1807 -> 1806;
1808 -> 1774;
1808 -> 0;
1808 -> 1743;
1809 -> 1808;
1810 -> 1773;
1810 -> 1809;
1810 -> 574;
1811 -> 1773;
1811 -> 577;
1812 -> 1773;
1812 -> 577;
1813 -> 1811;
1813 -> 577;
1814 -> 1811;
1814 -> 577;
1815 -> 1811;
1815 -> 577;
1816 -> 1811;
1816 -> 577;
1817 -> 1816;
1817 -> 577;
1818 -> 1816;
1818 -> 1817;
1819 -> 1397;
1820 -> 1819;
1820 -> 1396;
1821 -> 1820;
1821 -> 1405;
1822 -> 1686;
1822 -> 1380;
1823 -> 1686;
1823 -> 1388;
1823 -> 1380;
1824 -> 1822;
1824 -> 1390;
1824 -> 1380;
1825 -> 1822;
1825 -> 1380;
1826 -> 1822;
1826 -> 1380;
1827 -> 1686;
1828 -> 1640;
1828 -> 1686;
1829 -> 1394;
1829 -> 1686;
1830 -> 1686;
1831 -> 1686;
1832 -> 1822;
1832 -> 1686;
1833 -> 1828;
1833 -> 1686;
1834 -> 1829;
1834 -> 1686;
1835 -> 1688;
1835 -> 1686;
1836 -> 1686;
1837 -> 1832;
1837 -> 1686;
1838 -> 1686;
1839 -> 1830;
1839 -> 1838;
1839 -> 1686;
1840 -> 1686;
1841 -> 1830;
1841 -> 1832;
1841 -> 1686;
1842 -> 1830;
1842 -> 1686;
1843 -> 1832;
1843 -> 1686;
1844 -> 1836;
1844 -> 1686;
1845 -> 1843;
1845 -> 1686;
1846 -> 1686;
1847 -> 1842;
1847 -> 1846;
1847 -> 1686;
1848 -> 1843;
1848 -> 1686;
1849 -> 1686;
1850 -> 1842;
1850 -> 1686;
1851 -> 1842;
1851 -> 1686;
1852 -> 1686;
1853 -> 1851;
1853 -> 1852;
1853 -> 1686;
1854 -> 1853;
1854 -> 1686;
1855 -> 1843;
1855 -> 1854;
1856 -> 1854;
1857 -> 1854;
1857 -> 1856;
1858 -> 1854;
1858 -> 1856;
1859 -> 1855;
1859 -> 1856;
1860 -> 1859;
1860 -> 1856;
1861 -> 1856;
1862 -> 1857;
1862 -> 1861;
1862 -> 1856;
1863 -> 1858;
1863 -> 1856;
1864 -> 1863;
1865 -> 1831;
1865 -> 0;
1865 -> 1686;
1866 -> 1865;
1867 -> 1830;
1867 -> 1866;
1867 -> 574;
1868 -> 1830;
1868 -> 577;
1869 -> 1830;
1869 -> 577;
1870 -> 1830;
1870 -> 577;
1871 -> 1868;
1871 -> 577;
1872 -> 577;
1873 -> 1869;
1873 -> 577;
1874 -> 577;
1875 -> 577;
1876 -> 1871;
1876 -> 1875;
1877 -> 1872;
1877 -> 1875;
1878 -> 1873;
1878 -> 1875;
1879 -> 1874;
1879 -> 1875;
1880 -> 1870;
1880 -> 1875;
1881 -> 1876;
1881 -> 1875;
1882 -> 1877;
1882 -> 1875;
1883 -> 1878;
1883 -> 1875;
1884 -> 1879;
1884 -> 1875;
1885 -> 1875;
1886 -> 1881;
1886 -> 1885;
1887 -> 1882;
1887 -> 1885;
1888 -> 1883;
1888 -> 1885;
1889 -> 1884;
1889 -> 1885;
1890 -> 1880;
1890 -> 1885;
1891 -> 1890;
1891 -> 1885;
1892 -> 1890;
1892 -> 1885;
1893 -> 1890;
1893 -> 1885;
1894 -> 1890;
1894 -> 1885;
1895 -> 1885;
1896 -> 1886;
1896 -> 1895;
1896 -> 1885;
1897 -> 1885;
1898 -> 1889;
1898 -> 1897;
1898 -> 1885;
1899 -> 1885;
1900 -> 1889;
1900 -> 1899;
1900 -> 1885;
1901 -> 1886;
1901 -> 1890;
1901 -> 1885;
1902 -> 1887;
1902 -> 1890;
1902 -> 1885;
1903 -> 1888;
1903 -> 1890;
1903 -> 1885;
1904 -> 1889;
1904 -> 1890;
1904 -> 1885;
1905 -> 1830;
1905 -> 1901;
1905 -> 1902;
1905 -> 1903;
1905 -> 1904;
1905 -> 574;
1906 -> 575;
1906 -> 577;
1906 -> 609;
1906 -> 631;
1906 -> 771;
1906 -> 1072;
1906 -> 1313;
1906 -> 1342;
1906 -> 1570;
1906 -> 1609;
1906 -> 1619;
1906 -> 1684;
1906 -> 1762;
1906 -> 1809;
1906 -> 1866;
1906 -> 1830;
1906 -> 1073;
1906 -> 1314;
1906 -> 1343;
1906 -> 1357;
1906 -> 1905;
1906 -> 574;
1907 -> 1906;
1907 -> 574;
1908 -> 576;
1908 -> 574;
1909 -> 574;
1910 -> 1907;
1910 -> 1909;
1911 -> 1908;
1911 -> 1909;
1912 -> 1910;
1912 -> 1909;
1913 -> 1911;
1913 -> 1909;
1914 -> 1909;
1915 -> 1912;
1915 -> 1914;
1916 -> 1913;
1916 -> 1914;
1917 -> 1915;
1917 -> 1914;
1918 -> 1916;
1918 -> 1914;
1919 -> 1914;
1920 -> 1914;
1921 -> 1917;
1921 -> 1920;
1922 -> 1918;
1922 -> 1920;
1923 -> 1919;
1923 -> 1920;
1924 -> 1920;
1925 -> 1922;
1925 -> 1924;
1925 -> 1920;
1926 -> 1922;
1926 -> 1920;
1927 -> 1922;
1927 -> 1920;
1928 -> 1921;
1928 -> 1920;
1929 -> 1923;
1929 -> 1926;
1929 -> 1927;
1929 -> 1920;
1930 -> 1928;
1930 -> 1929;
1930 -> 1920;
1931 -> 1922;
1931 -> 1920;
1932 -> 1920;
1933 -> 1930;
1933 -> 1932;
1933 -> 1920;
1934 -> 1920;
1936 -> 1935;
1938 -> 1937;
1939 -> 1922;
1939 -> 1920;
1940 -> 1921;
1940 -> 1920;
1941 -> 1920;
1942 -> 1939;
1942 -> 1941;
1943 -> 1940;
1943 -> 1941;
1944 -> 1941;
1945 -> 1941;
1946 -> 1943;
1946 -> 1941;
1947 -> 1946;
1947 -> 1930;
1947 -> 1941;
1948 -> 1947;
1948 -> 1941;
1949 -> 1945;
1949 -> 1948;
1950 -> 1949;
1950 -> 1944;
1950 -> 1941;
1951 -> 1949;
1951 -> 1944;
1951 -> 1941;
1952 -> 1951;
1952 -> 1941;
1953 -> 1942;
1953 -> 1941;
1954 -> 1942;
1954 -> 1941;
1955 -> 1942;
1955 -> 1941;
1956 -> 1941;
1957 -> 1955;
1957 -> 1956;
1959 -> 1958;
1960 -> 1958;
1961 -> 1960;
1961 -> 1956;
1962 -> 1956;
1963 -> 1957;
1963 -> 1956;
1964 -> 1956;
1965 -> 1964;
1965 -> 1941;
1966 -> 1943;
1966 -> 1965;
1967 -> 1965;
1968 -> 1966;
1968 -> 1967;
1969 -> 1968;
1969 -> 1967;
1970 -> 1967;
1971 -> 1960;
1971 -> 1967;
1972 -> 1969;
1972 -> 1970;
1972 -> 1971;
1972 -> 1930;
1972 -> 1967;
1973 -> 1941;
1974 -> 1973;
1974 -> 1941;
1975 -> 1941;
1976 -> 1941;
1977 -> 1973;
1977 -> 1976;
1977 -> 1974;
1977 -> 1941;
1978 -> 1941;
1979 -> 1942;
1979 -> 1941;
1980 -> 1973;
1980 -> 1941;
1981 -> 1978;
1981 -> 1941;
1982 -> 1941;
1983 -> 1980;
1983 -> 1982;
1984 -> 1981;
1984 -> 1982;
1985 -> 1984;
1985 -> 1978;
1985 -> 1982;
1986 -> 1982;
1987 -> 1986;
1987 -> 1985;
1987 -> 1982;
1988 -> 1941;
1989 -> 1941;
1990 -> 1973;
1990 -> 1989;
1990 -> 1977;
1990 -> 1941;
1991 -> 1941;
1992 -> 1972;
1992 -> 1941;
1993 -> 1941;
1994 -> 1992;
1994 -> 1941;
1995 -> 1941;
1996 -> 1993;
1996 -> 1995;
1996 -> 1941;
1997 -> 1941;
1998 -> 1973;
1998 -> 1997;
1998 -> 1990;
1998 -> 1941;
1999 -> 1978;
1999 -> 1941;
2000 -> 1991;
2000 -> 1941;
2004 -> 2002;
2004 -> 2001;
2005 -> 2003;
2005 -> 2001;
2006 -> 2001;
2007 -> 0;
2007 -> 1941;
2008 -> 1941;
2009 -> 1941;
2010 -> 1999;
2010 -> 2009;
2011 -> 2000;
2011 -> 2009;
2012 -> 2007;
2012 -> 2009;
2013 -> 2008;
2013 -> 2009;
2014 -> 2008;
2014 -> 2009;
2015 -> 2009;
2016 -> 2013;
2016 -> 2015;
2016 -> 2009;
2017 -> 2016;
2017 -> 2009;
2018 -> 0;
2020 -> 2018;
2020 -> 2019;
2021 -> 2019;
2023 -> 2022;
2025 -> 2024;
2027 -> 2026;
2028 -> 2021;
2029 -> 2021;
2029 -> 2019;
2030 -> 2020;
2030 -> 2021;
2030 -> 2019;
2031 -> 2019;
2032 -> 2009;
2033 -> 2032;
2033 -> 2014;
2033 -> 2009;
2034 -> 2010;
2034 -> 2009;
2035 -> 2011;
2035 -> 2009;
2036 -> 2012;
2036 -> 2009;
2037 -> 2034;
2037 -> 2009;
2038 -> 2035;
2038 -> 2009;
2039 -> 2033;
2039 -> 2009;
2040 -> 2009;
2041 -> 2037;
2041 -> 2040;
2042 -> 2038;
2042 -> 2040;
2043 -> 2039;
2043 -> 2040;
2044 -> 2017;
2044 -> 2040;
2045 -> 2041;
2045 -> 2040;
2046 -> 2041;
2046 -> 2034;
2046 -> 2040;
2047 -> 2042;
2047 -> 2040;
2048 -> 2042;
2048 -> 2035;
2048 -> 2040;
2049 -> 2040;
2050 -> 2045;
2050 -> 2049;
2051 -> 2046;
2051 -> 2049;
2052 -> 2047;
2052 -> 2049;
2053 -> 2048;
2053 -> 2049;
2054 -> 2044;
2054 -> 2049;
2055 -> 2050;
2055 -> 2049;
2056 -> 2051;
2056 -> 2049;
2057 -> 2052;
2057 -> 2049;
2058 -> 2053;
2058 -> 2049;
2059 -> 2049;
2060 -> 2055;
2060 -> 2059;
2061 -> 2056;
2061 -> 2059;
2062 -> 2057;
2062 -> 2059;
2063 -> 2058;
2063 -> 2059;
2064 -> 2054;
2064 -> 2059;
2065 -> 2059;
2066 -> 2061;
2066 -> 2065;
2066 -> 2059;
2067 -> 2059;
2068 -> 2063;
2068 -> 2067;
2068 -> 2059;
2069 -> 2066;
2069 -> 2068;
2069 -> 2059;
2070 -> 2059;
2071 -> 2070;
2071 -> 2069;
2071 -> 2059;
2072 -> 2059;
2073 -> 2072;
2073 -> 2061;
2073 -> 2059;
2074 -> 2059;
2075 -> 2074;
2075 -> 2063;
2075 -> 2059;
2076 -> 2059;
2077 -> 2076;
2077 -> 2061;
2077 -> 2059;
2078 -> 2069;
2078 -> 2059;
2079 -> 2051;
2079 -> 2049;
2080 -> 2053;
2080 -> 2049;
2081 -> 2049;
2082 -> 2079;
2082 -> 2081;
2082 -> 2049;
2083 -> 2049;
2084 -> 2079;
2084 -> 2083;
2084 -> 2049;
2085 -> 2049;
2086 -> 2080;
2086 -> 2085;
2086 -> 2049;
2087 -> 2049;
2088 -> 2087;
2088 -> 2040;
2089 -> 2040;
2090 -> 2089;
2090 -> 2009;
2091 -> 2036;
2091 -> 2090;
2091 -> 2009;
2092 -> 1973;
2092 -> 2091;
2092 -> 1998;
2092 -> 1941;
2093 -> 1991;
2093 -> 1941;
2094 -> 1978;
2094 -> 1941;
2095 -> 1973;
2095 -> 2092;
2095 -> 1941;
2096 -> 2095;
2096 -> 1920;
2097 -> 1909;
2098 -> 574;
2099 -> 575;
2099 -> 574;
2100 -> 1906;
2100 -> 574;
2101 -> 574;
2102 -> 2099;
2102 -> 2101;
2103 -> 2100;
2103 -> 2101;
2104 -> 2103;
2104 -> 2101;
2105 -> 574;
2106 -> 575;
2106 -> 574;
}