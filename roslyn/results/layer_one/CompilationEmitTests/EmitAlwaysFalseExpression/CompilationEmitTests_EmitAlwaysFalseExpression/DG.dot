digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 791539"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 791540"];
3 [label="param CompilationEmitTests(this) 791541"];
4 [label="param EmitMetadataTestBase(this) 791542"];
5 [label="param CSharpTestBase(this) 791543"];
6 [label="param CommonTestBase(this) 791544"];
7 [label="param TestBase(this) 791545"];
8 [label="_temp 791546"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 791547"];
10 [label="param EmitAlwaysFalseExpression(this) 791548"];
11 [label="CompileAndVerify(@'\nclass C\n{\n    static bool Goo(int i)\n    {\n        int y = 10;\n        bool x = (y == null); // NYI: Implicit null conversion\n        return x;\n    }\n}\n'); 791549"];
12 [label="@'\nclass C\n{\n    static bool Goo(int i)\n    {\n        int y = 10;\n        bool x = (y == null); // NYI: Implicit null conversion\n        return x;\n    }\n}\n' 791550"];
13 [label="param operator(string source) 791551"];
14 [label="source 791552"];
15 [label="new CSharpTestSource(source) 791553"];
16 [label="param CSharpTestSource(object value) 791554"];
17 [label="param CSharpTestSource(this) 791555"];
18 [label="Value 791556"];
19 [label="CompileAndVerify(@'\nclass C\n{\n    static bool Goo(int i)\n    {\n        int y = 10;\n        bool x = (y == null); // NYI: Implicit null conversion\n        return x;\n    }\n}\n'); 791557"];
20 [label="CompileAndVerify(@'\nclass C\n{\n    static bool Goo(int i)\n    {\n        int y = 10;\n        bool x = (y == null); // NYI: Implicit null conversion\n        return x;\n    }\n}\n') 791558"];
21 [label="param CompileAndVerify(CSharpTestSource source) 791559"];
22 [label="param CompileAndVerify(IEnumerable<MetadataReference> references = null) 791560"];
23 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 791561"];
24 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 791562"];
25 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 791563"];
26 [label="param CompileAndVerify(Action<PEAssembly> assemblyValidator = null) 791564"];
27 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 791565"];
28 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 791566"];
29 [label="param CompileAndVerify(string expectedOutput = null) 791567"];
30 [label="param CompileAndVerify(int? expectedReturnCode = null) 791568"];
31 [label="param CompileAndVerify(string[] args = null) 791569"];
32 [label="param CompileAndVerify(CSharpCompilationOptions options = null) 791570"];
33 [label="param CompileAndVerify(CSharpParseOptions parseOptions = null) 791571"];
34 [label="param CompileAndVerify(EmitOptions emitOptions = null) 791572"];
35 [label="param CompileAndVerify(TargetFramework targetFramework = TargetFramework.Standard) 791573"];
36 [label="param CompileAndVerify(Verification verify = Verification.Passes) 791574"];
37 [label="param CompileAndVerify(this) 791575"];
38 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 791576"];
39 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 791577"];
40 [label="(expectedOutput != null) 791578"];
41 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 791579"];
42 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 791580"];
43 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 791581"];
44 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 791582"];
45 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 791583"];
46 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 791584"];
47 [label="GetUniqueName() 791585"];
48 [label="return Guid.NewGuid().ToString('D'); 791586"];
49 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 791587"];
50 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 791588"];
51 [label="CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()) 791589"];
52 [label="param CreateCompilation(CSharpTestSource source) 791590"];
53 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 791591"];
54 [label="param CreateCompilation(CSharpCompilationOptions options = null) 791592"];
55 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 791593"];
56 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 791594"];
57 [label="param CreateCompilation(string assemblyName = '') 791595"];
58 [label="param CreateCompilation(string sourceFileName = '') 791596"];
59 [label="param CreateCompilation(bool skipUsesIsNullable = false) 791597"];
60 [label="source 791598"];
61 [label="targetFramework 791599"];
62 [label="references 791600"];
63 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 791601"];
64 [label="param GetReferences(TargetFramework tf) 791602"];
65 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 791603"];
66 [label="var references = GetReferences(tf); 791604"];
67 [label="GetReferences(tf) 791605"];
68 [label="param GetReferences(TargetFramework targetFramework) 791606"];
69 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 791607"];
70 [label="StandardReferences 791608"];
71 [label="RuntimeUtilities.IsCoreClrRuntime 791609"];
72 [label="Mscorlib46ExtendedReferences 791610"];
73 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 791611"];
74 [label="TestBase.ValueTupleRef 791612"];
75 [label="TestReferences.NetFx.ValueTuple.tuplelib 791613"];
76 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 791614"];
77 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 791615"];
78 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 791616"];
79 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 791617"];
80 [label="return references; 791618"];
81 [label="options 791619"];
82 [label="parseOptions 791620"];
83 [label="assemblyName 791621"];
84 [label="sourceFileName 791622"];
85 [label="skipUsesIsNullable 791623"];
86 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 791624"];
87 [label="param CreateEmptyCompilation(CSharpTestSource source) 791625"];
88 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 791626"];
89 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 791627"];
90 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 791628"];
91 [label="param CreateEmptyCompilation(string assemblyName = '') 791629"];
92 [label="param CreateEmptyCompilation(string sourceFileName = '') 791630"];
93 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 791631"];
94 [label="source 791632"];
95 [label="references 791633"];
96 [label="options 791634"];
97 [label="parseOptions 791635"];
98 [label="assemblyName 791636"];
99 [label="sourceFileName 791637"];
100 [label="skipUsesIsNullable 791638"];
101 [label="null 791639"];
102 [label="experimentalFeature: null 791640"];
103 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 791641"];
104 [label="param CreateCompilationCore(CSharpTestSource source) 791642"];
105 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 791643"];
106 [label="param CreateCompilationCore(CSharpCompilationOptions options) 791644"];
107 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 791645"];
108 [label="param CreateCompilationCore(string assemblyName) 791646"];
109 [label="param CreateCompilationCore(string sourceFileName) 791647"];
110 [label="param CreateCompilationCore(bool skipUsesIsNullable) 791648"];
111 [label="param CreateCompilationCore(MessageID? experimentalFeature) 791649"];
112 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 791650"];
113 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 791651"];
114 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 791652"];
115 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 791653"];
116 [label="param GetSyntaxTrees(string sourceFileName = '') 791654"];
117 [label="param GetSyntaxTrees(this) 791655"];
118 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 791656"];
119 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 791657"];
120 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 791658"];
121 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 791659"];
122 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 791660"];
123 [label="param Parse(string text) 791661"];
124 [label="param Parse(string filename = '') 791662"];
125 [label="param Parse(CSharpParseOptions options = null) 791663"];
126 [label="param Parse(Encoding encoding = null) 791664"];
127 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 791665"];
128 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 791666"];
129 [label="options = TestOptions.Regular; 791667"];
130 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 791668"];
131 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 791669"];
132 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 791670"];
133 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 791671"];
134 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 791672"];
135 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 791673"];
136 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 791674"];
137 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 791675"];
138 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 791676"];
139 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 791677"];
140 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 791678"];
141 [label="param CheckSerializable(SyntaxTree tree) 791679"];
142 [label="var stream = new MemoryStream(); 791680"];
143 [label="var root = tree.GetRoot(); 791681"];
144 [label="var root = tree.GetRoot(); 791682"];
145 [label="root.SerializeTo(stream); 791683"];
146 [label="root.SerializeTo(stream); 791684"];
147 [label="root.SerializeTo(stream); 791685"];
148 [label="stream.Position = 0; 791686"];
149 [label="stream.Position 791687"];
150 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 791688"];
151 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 791689"];
152 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 791690"];
153 [label="return tree; 791691"];
154 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 791692"];
155 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 791693"];
156 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 791694"];
157 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 791695"];
158 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 791696"];
159 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 791697"];
160 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 791698"];
161 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 791699"];
162 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 791700"];
163 [label="param ValidateIOperations(Func<Compilation> createCompilation) 791701"];
164 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 791702"];
165 [label="return; 791703"];
166 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 791704"];
167 [label="OutputKind.ConsoleApplication 791705"];
168 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 791706"];
169 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 791707"];
170 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 791708"];
171 [label="OutputKind.DynamicallyLinkedLibrary 791709"];
172 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 791710"];
173 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 791711"];
174 [label="true 791712"];
175 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 791713"];
176 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 791714"];
177 [label="var compilation = createCompilationLambda(); 791715"];
178 [label="var compilation = createCompilationLambda(); 791716"];
179 [label="param Create(string? assemblyName) 791717"];
180 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 791718"];
181 [label="param Create(IEnumerable<MetadataReference>? references = null) 791719"];
182 [label="param Create(CSharpCompilationOptions? options = null) 791720"];
183 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 791721"];
184 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 791722"];
185 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 791723"];
186 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 791724"];
187 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 791725"];
188 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 791726"];
189 [label="param Create(string? assemblyName) 791727"];
190 [label="param Create(CSharpCompilationOptions options) 791728"];
191 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 791729"];
192 [label="param Create(IEnumerable<MetadataReference>? references) 791730"];
193 [label="param Create(CSharpCompilation? previousSubmission) 791731"];
194 [label="param Create(Type? returnType) 791732"];
195 [label="param Create(Type? hostObjectType) 791733"];
196 [label="param Create(bool isSubmission) 791734"];
197 [label="RoslynDebug.Assert(options != null); 791735"];
198 [label="RoslynDebug.Assert(options != null); 791736"];
199 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 791737"];
200 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 791738"];
201 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 791739"];
202 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 791740"];
203 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 791741"];
204 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 791742"];
205 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 791743"];
206 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 791744"];
207 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 791745"];
208 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 791746"];
209 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 791747"];
210 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 791748"];
211 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 791749"];
212 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 791750"];
213 [label="param SyntaxAndDeclarationManager(string scriptClassName) 791751"];
214 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 791752"];
215 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 791753"];
216 [label="param SyntaxAndDeclarationManager(bool isSubmission) 791754"];
217 [label="param SyntaxAndDeclarationManager(State state) 791755"];
218 [label="param SyntaxAndDeclarationManager(this) 791756"];
219 [label="externalSyntaxTrees 791757"];
220 [label="scriptClassName 791758"];
221 [label="resolver 791759"];
222 [label="messageProvider 791760"];
223 [label="isSubmission 791761"];
224 [label="param SyntaxAndDeclarationManager(this) 791762"];
225 [label="param SyntaxAndDeclarationManager(this) 791763"];
226 [label="_lazyState 791764"];
227 [label="_lazyState 791765"];
228 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 791766"];
229 [label="param CSharpCompilation(string? assemblyName) 791767"];
230 [label="param CSharpCompilation(CSharpCompilationOptions options) 791768"];
231 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 791769"];
232 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 791770"];
233 [label="param CSharpCompilation(Type? submissionReturnType) 791771"];
234 [label="param CSharpCompilation(Type? hostObjectType) 791772"];
235 [label="param CSharpCompilation(bool isSubmission) 791773"];
236 [label="param CSharpCompilation(ReferenceManager? referenceManager) 791774"];
237 [label="param CSharpCompilation(bool reuseReferenceManager) 791775"];
238 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 791776"];
239 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 791777"];
240 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 791778"];
241 [label="param CSharpCompilation(this) 791779"];
242 [label="assemblyName 791780"];
243 [label="options 791781"];
244 [label="references 791782"];
245 [label="previousSubmission 791783"];
246 [label="submissionReturnType 791784"];
247 [label="hostObjectType 791785"];
248 [label="isSubmission 791786"];
249 [label="referenceManager 791787"];
250 [label="reuseReferenceManager 791788"];
251 [label="syntaxAndDeclarations 791789"];
252 [label="syntaxAndDeclarations.ExternalSyntaxTrees 791790"];
253 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 791791"];
254 [label="semanticModelProvider 791792"];
255 [label="eventQueue 791793"];
256 [label="param CSharpCompilation(this) 791794"];
257 [label="param CSharpCompilation(string? assemblyName) 791795"];
258 [label="param CSharpCompilation(CSharpCompilationOptions options) 791796"];
259 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 791797"];
260 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 791798"];
261 [label="param CSharpCompilation(Type? submissionReturnType) 791799"];
262 [label="param CSharpCompilation(Type? hostObjectType) 791800"];
263 [label="param CSharpCompilation(bool isSubmission) 791801"];
264 [label="param CSharpCompilation(ReferenceManager? referenceManager) 791802"];
265 [label="param CSharpCompilation(bool reuseReferenceManager) 791803"];
266 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 791804"];
267 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 791805"];
268 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 791806"];
269 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 791807"];
270 [label="param CSharpCompilation(this) 791808"];
271 [label="assemblyName 791809"];
272 [label="references 791810"];
273 [label="features 791811"];
274 [label="isSubmission 791812"];
275 [label="semanticModelProvider 791813"];
276 [label="eventQueue 791814"];
277 [label="param CSharpCompilation(this) 791815"];
278 [label="param CSharpCompilation(this) 791816"];
279 [label="_options 791817"];
280 [label="_globalImports 791818"];
281 [label="_previousSubmissionImports 791819"];
282 [label="_globalNamespaceAlias 791820"];
283 [label="_scriptClass 791821"];
284 [label="_lazyHostObjectTypeSymbol 791822"];
285 [label="_lazyImportInfos 791823"];
286 [label="_conversions 791824"];
287 [label="_anonymousTypeManager 791825"];
288 [label="_lazyGlobalNamespace 791826"];
289 [label="builtInOperators 791827"];
290 [label="_lazyAssemblySymbol 791828"];
291 [label="_referenceManager 791829"];
292 [label="_syntaxAndDeclarations 791830"];
293 [label="_lazyEntryPoint 791831"];
294 [label="_lazyEmitNullablePublicOnly 791832"];
295 [label="_lazyCompilationUnitCompletedTrees 791833"];
296 [label="NullableAnalysisData 791834"];
297 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 791835"];
298 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 791836"];
299 [label="_externAliasTargets 791837"];
300 [label="_moduleInitializerMethods 791838"];
301 [label="_binderFactories 791839"];
302 [label="_ignoreAccessibilityBinderFactories 791840"];
303 [label="_lazyDeclarationDiagnostics 791841"];
304 [label="_declarationDiagnosticsFrozen 791842"];
305 [label="new DiagnosticBag() 791843"];
306 [label="_additionalCodegenWarnings = new DiagnosticBag() 791844"];
307 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 791845"];
308 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 791846"];
309 [label="WellKnownMemberSignatureComparer 791847"];
310 [label="_options 791848"];
311 [label="this.builtInOperators = new BuiltInOperators(this); 791849"];
312 [label="this.builtInOperators = new BuiltInOperators(this); 791850"];
313 [label="new BuiltInOperators(this) 791851"];
314 [label="param BuiltInOperators(CSharpCompilation compilation) 791852"];
315 [label="param BuiltInOperators(this) 791853"];
316 [label="_compilation 791854"];
317 [label="_builtInUnaryOperators 791855"];
318 [label="_builtInOperators 791856"];
319 [label="_compilation 791857"];
320 [label="this.builtInOperators 791858"];
321 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 791859"];
322 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 791860"];
323 [label="_scriptClass 791861"];
324 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 791862"];
325 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 791863"];
326 [label="_globalImports 791864"];
327 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 791865"];
328 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 791866"];
329 [label="_previousSubmissionImports 791867"];
330 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 791868"];
331 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 791869"];
332 [label="_globalNamespaceAlias 791870"];
333 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 791871"];
334 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 791872"];
335 [label="_anonymousTypeManager 791873"];
336 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 791874"];
337 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 791875"];
338 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 791876"];
339 [label="LanguageVersion? result = null; 791877"];
340 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 791878"];
341 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 791879"];
342 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 791880"];
343 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 791881"];
344 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 791882"];
345 [label="this.LanguageVersion 791883"];
346 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 791884"];
347 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 791885"];
348 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 791886"];
349 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 791887"];
350 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 791888"];
351 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 791889"];
352 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 791890"];
353 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 791891"];
354 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 791892"];
355 [label="this.Options 791893"];
356 [label="get\n            {\n                return _options;\n            } 791894"];
357 [label="return _options; 791895"];
358 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 791896"];
359 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 791897"];
360 [label="_referenceManager 791898"];
361 [label="_syntaxAndDeclarations 791899"];
362 [label="Debug.Assert(_lazyAssemblySymbol is null); 791900"];
363 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 791901"];
364 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 791902"];
365 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 791903"];
366 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 791904"];
367 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 791905"];
368 [label="compilation.AddSyntaxTrees(syntaxTrees) 791906"];
369 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 791907"];
370 [label="param AddSyntaxTrees(this) 791908"];
371 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 791909"];
372 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 791910"];
373 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 791911"];
374 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 791912"];
375 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 791913"];
376 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 791914"];
377 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 791915"];
378 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 791916"];
379 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 791917"];
380 [label="bool reuseReferenceManager = true; 791918"];
381 [label="int i = 0; 791919"];
382 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 791920"];
383 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 791921"];
384 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 791922"];
385 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 791923"];
386 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 791924"];
387 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 791925"];
388 [label="externalSyntaxTrees.Add(tree); 791926"];
389 [label="externalSyntaxTrees.Add(tree); 791927"];
390 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 791928"];
391 [label="i++; 791929"];
392 [label="externalSyntaxTrees.Free(); 791930"];
393 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 791931"];
394 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 791932"];
395 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 791933"];
396 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 791934"];
397 [label="param AddSyntaxTrees(this) 791935"];
398 [label="var scriptClassName = this.ScriptClassName; 791936"];
399 [label="var resolver = this.Resolver; 791937"];
400 [label="var messageProvider = this.MessageProvider; 791938"];
401 [label="var isSubmission = this.IsSubmission; 791939"];
402 [label="var state = _lazyState; 791940"];
403 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 791941"];
404 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 791942"];
405 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 791943"];
406 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 791944"];
407 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 791945"];
408 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 791946"];
409 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 791947"];
410 [label="param WithExternalSyntaxTrees(this) 791948"];
411 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 791949"];
412 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 791950"];
413 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 791951"];
414 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 791952"];
415 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 791953"];
416 [label="param SyntaxAndDeclarationManager(string scriptClassName) 791954"];
417 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 791955"];
418 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 791956"];
419 [label="param SyntaxAndDeclarationManager(bool isSubmission) 791957"];
420 [label="param SyntaxAndDeclarationManager(State state) 791958"];
421 [label="param SyntaxAndDeclarationManager(this) 791959"];
422 [label="param SyntaxAndDeclarationManager(this) 791960"];
423 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 791961"];
424 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 791962"];
425 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 791963"];
426 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 791964"];
427 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 791965"];
428 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 791966"];
429 [label="param Update(ReferenceManager referenceManager) 791967"];
430 [label="param Update(bool reuseReferenceManager) 791968"];
431 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 791969"];
432 [label="param Update(this) 791970"];
433 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 791971"];
434 [label="this.PreviousSubmission 791972"];
435 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 791973"];
436 [label="ScriptCompilationInfo 791974"];
437 [label="ScriptCompilationInfo?.PreviousScriptCompilation 791975"];
438 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 791976"];
439 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 791977"];
440 [label="this.SubmissionReturnType 791978"];
441 [label="=> ScriptCompilationInfo 791979"];
442 [label="ScriptCompilationInfo 791980"];
443 [label="this.HostObjectType 791981"];
444 [label="=> ScriptCompilationInfo 791982"];
445 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 791983"];
446 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 791984"];
447 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 791985"];
448 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 791986"];
449 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 791987"];
450 [label="param CSharpCompilation(string? assemblyName) 791988"];
451 [label="param CSharpCompilation(CSharpCompilationOptions options) 791989"];
452 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 791990"];
453 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 791991"];
454 [label="param CSharpCompilation(Type? submissionReturnType) 791992"];
455 [label="param CSharpCompilation(Type? hostObjectType) 791993"];
456 [label="param CSharpCompilation(bool isSubmission) 791994"];
457 [label="param CSharpCompilation(ReferenceManager? referenceManager) 791995"];
458 [label="param CSharpCompilation(bool reuseReferenceManager) 791996"];
459 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 791997"];
460 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 791998"];
461 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 791999"];
462 [label="param CSharpCompilation(this) 792000"];
463 [label="previousSubmission 792001"];
464 [label="submissionReturnType 792002"];
465 [label="hostObjectType 792003"];
466 [label="syntaxAndDeclarations.ExternalSyntaxTrees 792004"];
467 [label="eventQueue 792005"];
468 [label="param CSharpCompilation(this) 792006"];
469 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 792007"];
470 [label="param CSharpCompilation(Type? submissionReturnType) 792008"];
471 [label="param CSharpCompilation(Type? hostObjectType) 792009"];
472 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 792010"];
473 [label="param CSharpCompilation(this) 792011"];
474 [label="eventQueue 792012"];
475 [label="param CSharpCompilation(this) 792013"];
476 [label="_options 792014"];
477 [label="_globalImports 792015"];
478 [label="_previousSubmissionImports 792016"];
479 [label="_globalNamespaceAlias 792017"];
480 [label="_scriptClass 792018"];
481 [label="_lazyHostObjectTypeSymbol 792019"];
482 [label="_lazyImportInfos 792020"];
483 [label="_conversions 792021"];
484 [label="_anonymousTypeManager 792022"];
485 [label="_lazyGlobalNamespace 792023"];
486 [label="builtInOperators 792024"];
487 [label="_lazyAssemblySymbol 792025"];
488 [label="_referenceManager 792026"];
489 [label="_syntaxAndDeclarations 792027"];
490 [label="_lazyEntryPoint 792028"];
491 [label="_lazyEmitNullablePublicOnly 792029"];
492 [label="_lazyCompilationUnitCompletedTrees 792030"];
493 [label="NullableAnalysisData 792031"];
494 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 792032"];
495 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 792033"];
496 [label="_externAliasTargets 792034"];
497 [label="_moduleInitializerMethods 792035"];
498 [label="_binderFactories 792036"];
499 [label="_ignoreAccessibilityBinderFactories 792037"];
500 [label="_lazyDeclarationDiagnostics 792038"];
501 [label="_declarationDiagnosticsFrozen 792039"];
502 [label="new DiagnosticBag() 792040"];
503 [label="_additionalCodegenWarnings = new DiagnosticBag() 792041"];
504 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 792042"];
505 [label="this.builtInOperators = new BuiltInOperators(this); 792043"];
506 [label="this.builtInOperators = new BuiltInOperators(this); 792044"];
507 [label="new BuiltInOperators(this) 792045"];
508 [label="param BuiltInOperators(CSharpCompilation compilation) 792046"];
509 [label="param BuiltInOperators(this) 792047"];
510 [label="_compilation 792048"];
511 [label="_builtInUnaryOperators 792049"];
512 [label="_builtInOperators 792050"];
513 [label="_compilation 792051"];
514 [label="this.builtInOperators 792052"];
515 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 792053"];
516 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 792054"];
517 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 792055"];
518 [label="LanguageVersion? result = null; 792056"];
519 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 792057"];
520 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 792058"];
521 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 792059"];
522 [label="result = version; 792060"];
523 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 792061"];
524 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 792062"];
525 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 792063"];
526 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 792064"];
527 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 792065"];
528 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 792066"];
529 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 792067"];
530 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 792068"];
531 [label="referenceManager.AssertCanReuseForCompilation(this); 792069"];
532 [label="referenceManager.AssertCanReuseForCompilation(this); 792070"];
533 [label="_referenceManager 792071"];
534 [label="Debug.Assert(_lazyAssemblySymbol is null); 792072"];
535 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 792073"];
536 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 792074"];
537 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 792075"];
538 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 792076"];
539 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 792077"];
540 [label="return compilation; 792078"];
541 [label="var compilation = createCompilationLambda(); 792079"];
542 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 792080"];
543 [label="IsNullableEnabled(compilation) 792081"];
544 [label="param IsNullableEnabled(CSharpCompilation compilation) 792082"];
545 [label="compilation.SyntaxTrees 792083"];
546 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 792084"];
547 [label="_syntaxAndDeclarations.GetLazyState() 792085"];
548 [label="param GetLazyState(this) 792086"];
549 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 792087"];
550 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 792088"];
551 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 792089"];
552 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 792090"];
553 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 792091"];
554 [label="param CreateState(string scriptClassName) 792092"];
555 [label="param CreateState(SourceReferenceResolver resolver) 792093"];
556 [label="param CreateState(CommonMessageProvider messageProvider) 792094"];
557 [label="param CreateState(bool isSubmission) 792095"];
558 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 792096"];
559 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 792097"];
560 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 792098"];
561 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 792099"];
562 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 792100"];
563 [label="var declTable = DeclarationTable.Empty; 792101"];
564 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 792102"];
565 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792103"];
566 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792104"];
567 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792105"];
568 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792106"];
569 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792107"];
570 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792108"];
571 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792109"];
572 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792110"];
573 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792111"];
574 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792112"];
575 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 792113"];
576 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 792114"];
577 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 792115"];
578 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 792116"];
579 [label="param AppendAllSyntaxTrees(string scriptClassName) 792117"];
580 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 792118"];
581 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 792119"];
582 [label="param AppendAllSyntaxTrees(bool isSubmission) 792120"];
583 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 792121"];
584 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 792122"];
585 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 792123"];
586 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 792124"];
587 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 792125"];
588 [label="var sourceCodeKind = tree.Options.Kind; 792126"];
589 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 792127"];
590 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 792128"];
591 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 792129"];
592 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 792130"];
593 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 792131"];
594 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 792132"];
595 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 792133"];
596 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 792134"];
597 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 792135"];
598 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 792136"];
599 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 792137"];
600 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 792138"];
601 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 792139"];
602 [label="declMapBuilder.Add(tree, lazyRoot); 792140"];
603 [label="declMapBuilder.Add(tree, lazyRoot); 792141"];
604 [label="declMapBuilder.Add(tree, lazyRoot); 792142"];
605 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 792143"];
606 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 792144"];
607 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 792145"];
608 [label="treesBuilder.Add(tree); 792146"];
609 [label="treesBuilder.Add(tree); 792147"];
610 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 792148"];
611 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 792149"];
612 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 792150"];
613 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 792151"];
614 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 792152"];
615 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 792153"];
616 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 792154"];
617 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 792155"];
618 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 792156"];
619 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 792157"];
620 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 792158"];
621 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 792159"];
622 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 792160"];
623 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 792161"];
624 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 792162"];
625 [label="param State(DeclarationTable declarationTable) 792163"];
626 [label="param State(this) 792164"];
627 [label="OrdinalMap 792165"];
628 [label="LoadDirectiveMap 792166"];
629 [label="LoadedSyntaxTreeMap 792167"];
630 [label="RootNamespaces 792168"];
631 [label="DeclarationTable 792169"];
632 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 792170"];
633 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 792171"];
634 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 792172"];
635 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 792173"];
636 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 792174"];
637 [label="this.SyntaxTrees 792175"];
638 [label="this.OrdinalMap 792176"];
639 [label="this.LoadDirectiveMap 792177"];
640 [label="this.LoadedSyntaxTreeMap 792178"];
641 [label="this.RootNamespaces 792179"];
642 [label="this.DeclarationTable 792180"];
643 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 792181"];
644 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 792182"];
645 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 792183"];
646 [label="return _lazyState; 792184"];
647 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 792185"];
648 [label="var trees = compilation.SyntaxTrees; 792186"];
649 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 792187"];
650 [label="var options = (CSharpParseOptions)trees[0].Options; 792188"];
651 [label="var options = (CSharpParseOptions)trees[0].Options; 792189"];
652 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 792190"];
653 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 792191"];
654 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 792192"];
655 [label="return compilation; 792193"];
656 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792194"];
657 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792195"];
658 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792196"];
659 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792197"];
660 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792198"];
661 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792199"];
662 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792200"];
663 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792201"];
664 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792202"];
665 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792203"];
666 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792204"];
667 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792205"];
668 [label="CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 792206"];
669 [label="param CompileAndVerify(Compilation compilation) 792207"];
670 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 792208"];
671 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 792209"];
672 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 792210"];
673 [label="param CompileAndVerify(Action<PEAssembly> validator = null) 792211"];
674 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 792212"];
675 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 792213"];
676 [label="param CompileAndVerify(string expectedOutput = null) 792214"];
677 [label="param CompileAndVerify(int? expectedReturnCode = null) 792215"];
678 [label="param CompileAndVerify(string[] args = null) 792216"];
679 [label="param CompileAndVerify(EmitOptions emitOptions = null) 792217"];
680 [label="param CompileAndVerify(Verification verify = Verification.Passes) 792218"];
681 [label="param CompileAndVerify(this) 792219"];
682 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792220"];
683 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792221"];
684 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792222"];
685 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792223"];
686 [label="translate(sourceSymbolValidator) 792224"];
687 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 792225"];
688 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 792226"];
689 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 792227"];
690 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 792228"];
691 [label="return null; 792229"];
692 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792230"];
693 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792231"];
694 [label="translate(symbolValidator) 792232"];
695 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 792233"];
696 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 792234"];
697 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 792235"];
698 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 792236"];
699 [label="return null; 792237"];
700 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792238"];
701 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792239"];
702 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792240"];
703 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792241"];
704 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792242"];
705 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 792243"];
706 [label="CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 792244"];
707 [label="param CompileAndVerifyCommon(Compilation compilation) 792245"];
708 [label="param CompileAndVerifyCommon(IEnumerable<ResourceDescription> manifestResources = null) 792246"];
709 [label="param CompileAndVerifyCommon(IEnumerable<ModuleData> dependencies = null) 792247"];
710 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> sourceSymbolValidator = null) 792248"];
711 [label="param CompileAndVerifyCommon(Action<PEAssembly> assemblyValidator = null) 792249"];
712 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> symbolValidator = null) 792250"];
713 [label="param CompileAndVerifyCommon(SignatureDescription[] expectedSignatures = null) 792251"];
714 [label="param CompileAndVerifyCommon(string expectedOutput = null) 792252"];
715 [label="param CompileAndVerifyCommon(int? expectedReturnCode = null) 792253"];
716 [label="param CompileAndVerifyCommon(string[] args = null) 792254"];
717 [label="param CompileAndVerifyCommon(EmitOptions emitOptions = null) 792255"];
718 [label="param CompileAndVerifyCommon(Verification verify = Verification.Passes) 792256"];
719 [label="param CompileAndVerifyCommon(this) 792257"];
720 [label="CustomAssert.NotNull(compilation); 792258"];
721 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 792259"];
722 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 792260"];
723 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 792261"];
724 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 792262"];
725 [label="CompilationVerifier result = null; 792263"];
726 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792264"];
727 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792265"];
728 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792266"];
729 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792267"];
730 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792268"];
731 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792269"];
732 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792270"];
733 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792271"];
734 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792272"];
735 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792273"];
736 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792274"];
737 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 792275"];
738 [label="Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify) 792276"];
739 [label="param Emit(Compilation compilation) 792277"];
740 [label="param Emit(IEnumerable<ModuleData> dependencies) 792278"];
741 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 792279"];
742 [label="param Emit(SignatureDescription[] expectedSignatures) 792280"];
743 [label="param Emit(string expectedOutput) 792281"];
744 [label="param Emit(int? expectedReturnCode) 792282"];
745 [label="param Emit(string[] args) 792283"];
746 [label="param Emit(Action<PEAssembly> assemblyValidator) 792284"];
747 [label="param Emit(Action<IModuleSymbol> symbolValidator) 792285"];
748 [label="param Emit(EmitOptions emitOptions) 792286"];
749 [label="param Emit(Verification verify) 792287"];
750 [label="param Emit(this) 792288"];
751 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 792289"];
752 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 792290"];
753 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 792291"];
754 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 792292"];
755 [label="new CompilationVerifier(compilation, VisualizeRealIL, dependencies) 792293"];
756 [label="param CompilationVerifier(Compilation compilation) 792294"];
757 [label="param CompilationVerifier(Func<IModuleSymbol, CompilationTestData.MethodData, IReadOnlyDictionary<int, string>, bool, string> visualizeRealIL = null) 792295"];
758 [label="param CompilationVerifier(IEnumerable<ModuleData> dependencies = null) 792296"];
759 [label="param CompilationVerifier(this) 792297"];
760 [label="_compilation 792298"];
761 [label="_testData 792299"];
762 [label="_dependencies 792300"];
763 [label="_lazyModuleSymbol 792301"];
764 [label="_allModuleData 792302"];
765 [label="_visualizeRealIL 792303"];
766 [label="_compilation 792304"];
767 [label="_dependencies 792305"];
768 [label="_visualizeRealIL 792306"];
769 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 792307"];
770 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 792308"];
771 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 792309"];
772 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 792310"];
773 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 792311"];
774 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 792312"];
775 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 792313"];
776 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures) 792314"];
777 [label="param Emit(string expectedOutput) 792315"];
778 [label="param Emit(int? expectedReturnCode) 792316"];
779 [label="param Emit(string[] args) 792317"];
780 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 792318"];
781 [label="param Emit(EmitOptions emitOptions) 792319"];
782 [label="param Emit(Verification peVerify) 792320"];
783 [label="param Emit(SignatureDescription[] expectedSignatures) 792321"];
784 [label="param Emit(this) 792322"];
785 [label="RuntimeUtilities.GetRuntimeEnvironmentFactory 792323"];
786 [label="new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 792324"];
787 [label="s_lazyFactory = new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 792325"];
788 [label="using var testEnvironment = RuntimeEnvironmentFactory.Create(_dependencies); 792326"];
789 [label="RuntimeEnvironmentFactory.Create(_dependencies) 792327"];
790 [label="param Create(IEnumerable<ModuleData> additionalDependencies = null) 792328"];
791 [label="return s_lazyFactory.Value.Create(additionalDependencies); 792329"];
792 [label="return s_lazyFactory.Value.Create(additionalDependencies); 792330"];
793 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 792331"];
794 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 792332"];
795 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 792333"];
796 [label="Emit(testEnvironment, manifestResources, emitOptions) 792334"];
797 [label="param Emit(IRuntimeEnvironment testEnvironment) 792335"];
798 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 792336"];
799 [label="param Emit(EmitOptions emitOptions) 792337"];
800 [label="param Emit(this) 792338"];
801 [label="s_dumpCount 792339"];
802 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 792340"];
803 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 792341"];
804 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 792342"];
805 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 792343"];
806 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 792344"];
807 [label="param EmitCompilation(Compilation compilation) 792345"];
808 [label="param EmitCompilation(IEnumerable<ResourceDescription> manifestResources) 792346"];
809 [label="param EmitCompilation(List<ModuleData> dependencies) 792347"];
810 [label="param EmitCompilation(DiagnosticBag diagnostics) 792348"];
811 [label="param EmitCompilation(CompilationTestData testData) 792349"];
812 [label="param EmitCompilation(EmitOptions emitOptions) 792350"];
813 [label="var referencedCompilations = FindReferencedCompilations(compilation); 792351"];
814 [label="FindReferencedCompilations(compilation) 792352"];
815 [label="param FindReferencedCompilations(Compilation original) 792353"];
816 [label="var list = new List<Compilation>(); 792354"];
817 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 792355"];
818 [label="FindDirectReferencedCompilations(original) 792356"];
819 [label="param FindDirectReferencedCompilations(Compilation compilation) 792357"];
820 [label="var list = new List<Compilation>(); 792358"];
821 [label="var previousCompilation = compilation.ScriptCompilationInfo?.PreviousScriptCompilation; 792359"];
822 [label="compilation.ScriptCompilationInfo 792360"];
823 [label="=> ScriptCompilationInfo 792361"];
824 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 792362"];
825 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 792363"];
826 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 792364"];
827 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 792365"];
828 [label="get\n            {\n                return GetBoundReferenceManager().DirectiveReferences;\n            } 792366"];
829 [label="GetBoundReferenceManager() 792367"];
830 [label="param GetBoundReferenceManager(this) 792368"];
831 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 792369"];
832 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 792370"];
833 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 792371"];
834 [label="get { return this.Declarations.ReferenceDirectives; } 792372"];
835 [label="this.Declarations 792373"];
836 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 792374"];
837 [label="_syntaxAndDeclarations.GetLazyState() 792375"];
838 [label="param GetLazyState(this) 792376"];
839 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 792377"];
840 [label="return this.Declarations.ReferenceDirectives; 792378"];
841 [label="get { return _options; } 792379"];
842 [label="return _options; 792380"];
843 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 792381"];
844 [label="_syntaxAndDeclarations.GetLazyState() 792382"];
845 [label="Debug.Assert(_lazyAssemblySymbol is object); 792383"];
846 [label="return _referenceManager; 792384"];
847 [label="return GetBoundReferenceManager().DirectiveReferences; 792385"];
848 [label="return list; 792386"];
849 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 792387"];
850 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 792388"];
851 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 792389"];
852 [label="return list; 792390"];
853 [label="var referencedCompilations = FindReferencedCompilations(compilation); 792391"];
854 [label="var fullNameSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase); 792392"];
855 [label="foreach (var referencedCompilation in referencedCompilations)\n            {\n                var emitData = EmitCompilationCore(referencedCompilation, null, diagnostics, null, emitOptions);\n                if (emitData.HasValue)\n                {\n                    var moduleData = new ModuleData(referencedCompilation.Assembly.Identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    emitData.Value.Assembly,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    fullNameSet.Add(moduleData.Id.FullName);\n                    dependencies.Add(moduleData);\n                }\n            } 792393"];
856 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 792394"];
857 [label="new[] { compilation } 792395"];
858 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 792396"];
859 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 792397"];
860 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 792398"];
861 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 792399"];
862 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 792400"];
863 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 792401"];
864 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics) 792402"];
865 [label="param EmitReferences(Compilation compilation) 792403"];
866 [label="param EmitReferences(HashSet<string> fullNameSet) 792404"];
867 [label="param EmitReferences(List<ModuleData> dependencies) 792405"];
868 [label="param EmitReferences(DiagnosticBag diagnostics) 792406"];
869 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 792407"];
870 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 792408"];
871 [label="var peRef = (PortableExecutableReference)metadataReference; 792409"];
872 [label="var metadata = peRef.GetMetadataNoCopy(); 792410"];
873 [label="var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly; 792411"];
874 [label="isManifestModule 792412"];
875 [label="var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null; 792413"];
876 [label="((AssemblyMetadata)metadata).GetAssembly().Identity 792414"];
877 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 792415"];
878 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 792416"];
879 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 792417"];
880 [label="foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                } 792418"];
881 [label="EnumerateModules(metadata) 792419"];
882 [label="param EnumerateModules(Metadata metadata) 792420"];
883 [label="return (metadata.Kind == MetadataImageKind.Assembly) ? ((AssemblyMetadata)metadata).GetModules().AsEnumerable() : SpecializedCollections.SingletonEnumerable((ModuleMetadata)metadata); 792421"];
884 [label="(metadata.Kind == MetadataImageKind.Assembly) 792422"];
885 [label="ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent(); 792423"];
886 [label="ModuleData moduleData; 792424"];
887 [label="if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    } 792425"];
888 [label="fullNameSet.Add(identity.GetDisplayName()); 792426"];
889 [label="fullNameSet.Add(identity.GetDisplayName()); 792427"];
890 [label="fullNameSet.Add(identity.GetDisplayName()); 792428"];
891 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 792429"];
892 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 792430"];
893 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 792431"];
894 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 792432"];
895 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 792433"];
896 [label="dependencies.Add(moduleData); 792434"];
897 [label="dependencies.Add(moduleData); 792435"];
898 [label="isManifestModule = false; 792436"];
899 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 792437"];
900 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 792438"];
901 [label="ModuleData moduleData; 792439"];
902 [label="isManifestModule = false; 792440"];
903 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 792441"];
904 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 792442"];
905 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 792443"];
906 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 792444"];
907 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 792445"];
908 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 792446"];
909 [label="EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions) 792447"];
910 [label="param EmitCompilationCore(Compilation compilation) 792448"];
911 [label="param EmitCompilationCore(IEnumerable<ResourceDescription> manifestResources) 792449"];
912 [label="param EmitCompilationCore(DiagnosticBag diagnostics) 792450"];
913 [label="param EmitCompilationCore(CompilationTestData testData) 792451"];
914 [label="param EmitCompilationCore(EmitOptions emitOptions) 792452"];
915 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 792453"];
916 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 792454"];
917 [label="emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 792455"];
918 [label="using var executableStream = new MemoryStream(); 792456"];
919 [label="var pdb = default(ImmutableArray<byte>); 792457"];
920 [label="var assembly = default(ImmutableArray<byte>); 792458"];
921 [label="var pdbStream = (emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) ? new MemoryStream() : null; 792459"];
922 [label="(emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) 792460"];
923 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 792461"];
924 [label="compilation.SyntaxTrees 792462"];
925 [label="get\n            {\n                return this.SyntaxTrees;\n            } 792463"];
926 [label="this.SyntaxTrees 792464"];
927 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 792465"];
928 [label="_syntaxAndDeclarations.GetLazyState() 792466"];
929 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 792467"];
930 [label="return this.SyntaxTrees; 792468"];
931 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 792469"];
932 [label="EmitResult result; 792470"];
933 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 792471"];
934 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 792472"];
935 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 792473"];
936 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 792474"];
937 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 792475"];
938 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 792476"];
939 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 792477"];
940 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 792478"];
941 [label="get { return _syntaxAndDeclarations.MessageProvider; } 792479"];
942 [label="return _syntaxAndDeclarations.MessageProvider; 792480"];
943 [label="param CreateModuleBuilder(EmitOptions emitOptions) 792481"];
944 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 792482"];
945 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 792483"];
946 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 792484"];
947 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 792485"];
948 [label="param CreateModuleBuilder(CompilationTestData? testData) 792486"];
949 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 792487"];
950 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 792488"];
951 [label="param CreateModuleBuilder(this) 792489"];
952 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 792490"];
953 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 792491"];
954 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 792492"];
955 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 792493"];
956 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 792494"];
957 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 792495"];
958 [label="param GetRuntimeMetadataVersion(this) 792496"];
959 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 792497"];
960 [label="GetRuntimeMetadataVersion(emitOptions) 792498"];
961 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 792499"];
962 [label="param GetRuntimeMetadataVersion(this) 792500"];
963 [label="Assembly 792501"];
964 [label="get\n            {\n                return SourceAssembly;\n            } 792502"];
965 [label="SourceAssembly 792503"];
966 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 792504"];
967 [label="GetBoundReferenceManager() 792505"];
968 [label="param GetBoundReferenceManager(this) 792506"];
969 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 792507"];
970 [label="return _referenceManager; 792508"];
971 [label="GetBoundReferenceManager(); 792509"];
972 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 792510"];
973 [label="return _lazyAssemblySymbol; 792511"];
974 [label="return SourceAssembly; 792512"];
975 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 792513"];
976 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 792514"];
977 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 792515"];
978 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 792516"];
979 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 792517"];
980 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 792518"];
981 [label="return runtimeMDVersion; 792519"];
982 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 792520"];
983 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 792521"];
984 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 792522"];
985 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 792523"];
986 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 792524"];
987 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 792525"];
988 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 792526"];
989 [label="get { return SourceAssembly.IsDelaySigned; } 792527"];
990 [label="SourceAssembly 792528"];
991 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 792529"];
992 [label="GetBoundReferenceManager() 792530"];
993 [label="param GetBoundReferenceManager(this) 792531"];
994 [label="GetBoundReferenceManager(); 792532"];
995 [label="return SourceAssembly.IsDelaySigned; 792533"];
996 [label="SourceAssembly.IsDelaySigned 792534"];
997 [label="get\n            {\n                return _options;\n            } 792535"];
998 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 792536"];
999 [label="Declarations 792537"];
1000 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 792538"];
1001 [label="_syntaxAndDeclarations.GetLazyState() 792539"];
1002 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 792540"];
1003 [label="return Declarations.GetMergedRoot(this); 792541"];
1004 [label="return Declarations.GetMergedRoot(this); 792542"];
1005 [label="return Declarations.GetMergedRoot(this); 792543"];
1006 [label="_syntaxAndDeclarations.GetLazyState() 792544"];
1007 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 792545"];
1008 [label="get { return SourceAssembly.StrongNameKeys; } 792546"];
1009 [label="SourceAssembly 792547"];
1010 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 792548"];
1011 [label="GetBoundReferenceManager() 792549"];
1012 [label="param GetBoundReferenceManager(this) 792550"];
1013 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 792551"];
1014 [label="return _referenceManager; 792552"];
1015 [label="GetBoundReferenceManager(); 792553"];
1016 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 792554"];
1017 [label="return SourceAssembly.StrongNameKeys; 792555"];
1018 [label="SourceAssembly.StrongNameKeys 792556"];
1019 [label="get\n            {\n                return _options;\n            } 792557"];
1020 [label="=> 0x30 792558"];
1021 [label="0x30 792559"];
1022 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 792560"];
1023 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 792561"];
1024 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 792562"];
1025 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 792563"];
1026 [label="PEModuleBuilder moduleBeingBuilt; 792564"];
1027 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 792565"];
1028 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 792566"];
1029 [label="_options.OutputKind.IsValid() 792567"];
1030 [label="_options.OutputKind 792568"];
1031 [label="SourceAssembly 792569"];
1032 [label="GetBoundReferenceManager() 792570"];
1033 [label="GetBoundReferenceManager(); 792571"];
1034 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 792572"];
1035 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 792573"];
1036 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 792574"];
1037 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 792575"];
1038 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 792576"];
1039 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 792577"];
1040 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 792578"];
1041 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 792579"];
1042 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 792580"];
1043 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 792581"];
1044 [label="param PEAssemblyBuilder(OutputKind outputKind) 792582"];
1045 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 792583"];
1046 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 792584"];
1047 [label="param PEAssemblyBuilder(this) 792585"];
1048 [label="sourceAssembly 792586"];
1049 [label="emitOptions 792587"];
1050 [label="outputKind 792588"];
1051 [label="serializationProperties 792589"];
1052 [label="manifestResources 792590"];
1053 [label="ImmutableArray<NamedTypeSymbol>.Empty 792591"];
1054 [label="param PEAssemblyBuilder(this) 792592"];
1055 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 792593"];
1056 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 792594"];
1057 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 792595"];
1058 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 792596"];
1059 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 792597"];
1060 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 792598"];
1061 [label="param PEAssemblyBuilderBase(this) 792599"];
1062 [label="0 792600"];
1063 [label="sourceAssembly.Modules[0] 792601"];
1064 [label="emitOptions 792602"];
1065 [label="outputKind 792603"];
1066 [label="serializationProperties 792604"];
1067 [label="manifestResources 792605"];
1068 [label="param PEAssemblyBuilderBase(this) 792606"];
1069 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 792607"];
1070 [label="param PEModuleBuilder(EmitOptions emitOptions) 792608"];
1071 [label="param PEModuleBuilder(OutputKind outputKind) 792609"];
1072 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 792610"];
1073 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 792611"];
1074 [label="param PEModuleBuilder(this) 792612"];
1075 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 792613"];
1076 [label="sourceModule 792614"];
1077 [label="serializationProperties 792615"];
1078 [label="manifestResources 792616"];
1079 [label="outputKind 792617"];
1080 [label="emitOptions 792618"];
1081 [label="new ModuleCompilationState() 792619"];
1082 [label="param ModuleCompilationState(this) 792620"];
1083 [label="param PEModuleBuilder(this) 792621"];
1084 [label="param PEModuleBuilder(this) 792622"];
1085 [label="get\n            {\n                return true;\n            } 792623"];
1086 [label="return true; 792624"];
1087 [label="param PEModuleBuilder(this) 792625"];
1088 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 792626"];
1089 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 792627"];
1090 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 792628"];
1091 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 792629"];
1092 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 792630"];
1093 [label="new ConcurrentSet<TypeSymbol>() 792631"];
1094 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 792632"];
1095 [label="_embeddedTypesManagerOpt 792633"];
1096 [label="_metadataName 792634"];
1097 [label="_fixedImplementationTypes 792635"];
1098 [label="_needsGeneratedAttributes 792636"];
1099 [label="_needsGeneratedAttributes_IsFrozen 792637"];
1100 [label="var specifiedName = sourceModule.MetadataName; 792638"];
1101 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 792639"];
1102 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 792640"];
1103 [label="_metadataName 792641"];
1104 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 792642"];
1105 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 792643"];
1106 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 792644"];
1107 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 792645"];
1108 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 792646"];
1109 [label="_sourceAssembly 792647"];
1110 [label="_lazyEmbeddedAttribute 792648"];
1111 [label="_lazyIsReadOnlyAttribute 792649"];
1112 [label="_lazyIsByRefLikeAttribute 792650"];
1113 [label="_lazyIsUnmanagedAttribute 792651"];
1114 [label="_lazyNullableAttribute 792652"];
1115 [label="_lazyNullableContextAttribute 792653"];
1116 [label="_lazyNullablePublicOnlyAttribute 792654"];
1117 [label="_lazyNativeIntegerAttribute 792655"];
1118 [label="_metadataName 792656"];
1119 [label="Debug.Assert(sourceAssembly is object); 792657"];
1120 [label="_sourceAssembly 792658"];
1121 [label="_additionalTypes = additionalTypes.NullToEmpty(); 792659"];
1122 [label="_additionalTypes 792660"];
1123 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 792661"];
1124 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 792662"];
1125 [label="(emitOptions.OutputNameOverride == null) 792663"];
1126 [label="sourceAssembly.MetadataName 792664"];
1127 [label="_metadataName 792665"];
1128 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 792666"];
1129 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 792667"];
1130 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 792668"];
1131 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 792669"];
1132 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 792670"];
1133 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 792671"];
1134 [label="moduleBeingBuilt.SourceLinkStreamOpt 792672"];
1135 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 792673"];
1136 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 792674"];
1137 [label="moduleBeingBuilt.EmbeddedTexts 792675"];
1138 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 792676"];
1139 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 792677"];
1140 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 792678"];
1141 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 792679"];
1142 [label="testData.Module 792680"];
1143 [label="return moduleBeingBuilt; 792681"];
1144 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 792682"];
1145 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 792683"];
1146 [label="param CompileMethods(bool emittingPdb) 792684"];
1147 [label="param CompileMethods(bool emitMetadataOnly) 792685"];
1148 [label="param CompileMethods(bool emitTestCoverageData) 792686"];
1149 [label="param CompileMethods(DiagnosticBag diagnostics) 792687"];
1150 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 792688"];
1151 [label="param CompileMethods(CancellationToken cancellationToken) 792689"];
1152 [label="param CompileMethods(this) 792690"];
1153 [label="PooledHashSet<int>? excludeDiagnostics = null; 792691"];
1154 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 792692"];
1155 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 792693"];
1156 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 792694"];
1157 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 792695"];
1158 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 792696"];
1159 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 792697"];
1160 [label="param GetDiagnostics(CompilationStage stage) 792698"];
1161 [label="param GetDiagnostics(bool includeEarlierStages) 792699"];
1162 [label="param GetDiagnostics(CancellationToken cancellationToken) 792700"];
1163 [label="param GetDiagnostics(this) 792701"];
1164 [label="var diagnostics = DiagnosticBag.GetInstance(); 792702"];
1165 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 792703"];
1166 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 792704"];
1167 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 792705"];
1168 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 792706"];
1169 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 792707"];
1170 [label="param GetDiagnostics(CompilationStage stage) 792708"];
1171 [label="param GetDiagnostics(bool includeEarlierStages) 792709"];
1172 [label="param GetDiagnostics(DiagnosticBag diagnostics) 792710"];
1173 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 792711"];
1174 [label="param GetDiagnostics(this) 792712"];
1175 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 792713"];
1176 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 792714"];
1177 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 792715"];
1178 [label="this.SyntaxTrees 792716"];
1179 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 792717"];
1180 [label="_syntaxAndDeclarations.GetLazyState() 792718"];
1181 [label="param GetLazyState(this) 792719"];
1182 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 792720"];
1183 [label="var syntaxTrees = this.SyntaxTrees; 792721"];
1184 [label="this.Options 792722"];
1185 [label="get\n            {\n                return _options;\n            } 792723"];
1186 [label="return _options; 792724"];
1187 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 792725"];
1188 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 792726"];
1189 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 792727"];
1190 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 792728"];
1191 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 792729"];
1192 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 792730"];
1193 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 792731"];
1194 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 792732"];
1195 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 792733"];
1196 [label="ImmutableArray<LoadDirective> loadDirectives; 792734"];
1197 [label="loadDirectives 792735"];
1198 [label="syntaxAndDeclarations.GetLazyState() 792736"];
1199 [label="param GetLazyState(this) 792737"];
1200 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 792738"];
1201 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 792739"];
1202 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 792740"];
1203 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 792741"];
1204 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 792742"];
1205 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 792743"];
1206 [label="cancellationToken.ThrowIfCancellationRequested(); 792744"];
1207 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 792745"];
1208 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 792746"];
1209 [label="CheckAssemblyName(builder); 792747"];
1210 [label="CheckAssemblyName(builder); 792748"];
1211 [label="CheckAssemblyName(builder); 792749"];
1212 [label="Options 792750"];
1213 [label="get\n            {\n                return _options;\n            } 792751"];
1214 [label="return _options; 792752"];
1215 [label="builder.AddRange(Options.Errors); 792753"];
1216 [label="Options 792754"];
1217 [label="get\n            {\n                return _options;\n            } 792755"];
1218 [label="return _options; 792756"];
1219 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 792757"];
1220 [label="cancellationToken.ThrowIfCancellationRequested(); 792758"];
1221 [label="GetBoundReferenceManager() 792759"];
1222 [label="param GetBoundReferenceManager(this) 792760"];
1223 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 792761"];
1224 [label="return _referenceManager; 792762"];
1225 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 792763"];
1226 [label="cancellationToken.ThrowIfCancellationRequested(); 792764"];
1227 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 792765"];
1228 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 792766"];
1229 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 792767"];
1230 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 792768"];
1231 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 792769"];
1232 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 792770"];
1233 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 792771"];
1234 [label="param GetSourceDeclarationDiagnostics(this) 792772"];
1235 [label="GlobalImports 792773"];
1236 [label="=> _globalImports.Value 792774"];
1237 [label="_globalImports.Value 792775"];
1238 [label="_globalImports.Value 792776"];
1239 [label="=> Imports.FromGlobalUsings(this) 792777"];
1240 [label="this 792778"];
1241 [label="Imports.FromGlobalUsings(this) 792779"];
1242 [label="Imports.FromGlobalUsings(this) 792780"];
1243 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 792781"];
1244 [label="ScriptCompilationInfo 792782"];
1245 [label="ScriptCompilationInfo?.PreviousScriptCompilation 792783"];
1246 [label="GlobalImports.Complete(cancellationToken); 792784"];
1247 [label="GlobalImports.Complete(cancellationToken); 792785"];
1248 [label="GlobalImports.Complete(cancellationToken); 792786"];
1249 [label="SourceLocation? location = null; 792787"];
1250 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 792788"];
1251 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 792789"];
1252 [label="Assembly 792790"];
1253 [label="get\n            {\n                return SourceAssembly;\n            } 792791"];
1254 [label="SourceAssembly 792792"];
1255 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 792793"];
1256 [label="GetBoundReferenceManager() 792794"];
1257 [label="param GetBoundReferenceManager(this) 792795"];
1258 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 792796"];
1259 [label="return _referenceManager; 792797"];
1260 [label="GetBoundReferenceManager(); 792798"];
1261 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 792799"];
1262 [label="Assembly.ForceComplete(location, cancellationToken); 792800"];
1263 [label="Assembly.ForceComplete(location, cancellationToken); 792801"];
1264 [label="Assembly.ForceComplete(location, cancellationToken); 792802"];
1265 [label="Assembly.ForceComplete(location, cancellationToken); 792803"];
1266 [label="Assembly.ForceComplete(location, cancellationToken); 792804"];
1267 [label="SourceAssembly 792805"];
1268 [label="GetBoundReferenceManager() 792806"];
1269 [label="param GetBoundReferenceManager(this) 792807"];
1270 [label="GetBoundReferenceManager(); 792808"];
1271 [label="Declarations 792809"];
1272 [label="_syntaxAndDeclarations.GetLazyState() 792810"];
1273 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 792811"];
1274 [label="return Declarations.GetMergedRoot(this); 792812"];
1275 [label="_syntaxAndDeclarations.GetLazyState() 792813"];
1276 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 792814"];
1277 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 792815"];
1278 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 792816"];
1279 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 792817"];
1280 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 792818"];
1281 [label="var diagnostics = new DiagnosticBag(); 792819"];
1282 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 792820"];
1283 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 792821"];
1284 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 792822"];
1285 [label="return _lazyDeclarationDiagnostics; 792823"];
1286 [label="param SymbolDeclaredEvent(Symbol symbol) 792824"];
1287 [label="param SymbolDeclaredEvent(this) 792825"];
1288 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 792826"];
1289 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 792827"];
1290 [label="param GetUnaliasedReferencedAssemblies(this) 792828"];
1291 [label="GetBoundReferenceManager() 792829"];
1292 [label="param GetBoundReferenceManager(this) 792830"];
1293 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 792831"];
1294 [label="return _referenceManager; 792832"];
1295 [label="var referenceManager = GetBoundReferenceManager(); 792833"];
1296 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 792834"];
1297 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 792835"];
1298 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 792836"];
1299 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 792837"];
1300 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 792838"];
1301 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 792839"];
1302 [label="return _additionalCodegenWarnings; 792840"];
1303 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 792841"];
1304 [label="return _referenceManager; 792842"];
1305 [label="GetBoundReferenceManager(); 792843"];
1306 [label="param GetSpecialType(SpecialType specialType) 792844"];
1307 [label="param GetSpecialType(this) 792845"];
1308 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 792846"];
1309 [label="NamedTypeSymbol result; 792847"];
1310 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 792848"];
1311 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 792849"];
1312 [label="Assembly 792850"];
1313 [label="GetBoundReferenceManager() 792851"];
1314 [label="GetBoundReferenceManager(); 792852"];
1315 [label="result = Assembly.GetSpecialType(specialType); 792853"];
1316 [label="result = Assembly.GetSpecialType(specialType); 792854"];
1317 [label="Debug.Assert(result.SpecialType == specialType); 792855"];
1318 [label="return result; 792856"];
1319 [label="param GetBinder(CSharpSyntaxNode syntax) 792857"];
1320 [label="param GetBinder(this) 792858"];
1321 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 792859"];
1322 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 792860"];
1323 [label="GetBinderFactory(syntax.SyntaxTree) 792861"];
1324 [label="param GetBinderFactory(SyntaxTree syntaxTree) 792862"];
1325 [label="param GetBinderFactory(bool ignoreAccessibility = false) 792863"];
1326 [label="param GetBinderFactory(this) 792864"];
1327 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 792865"];
1328 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 792866"];
1329 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 792867"];
1330 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 792868"];
1331 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 792869"];
1332 [label="param GetBinderFactory(SyntaxTree syntaxTree) 792870"];
1333 [label="param GetBinderFactory(bool ignoreAccessibility) 792871"];
1334 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 792872"];
1335 [label="param GetBinderFactory(this) 792873"];
1336 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 792874"];
1337 [label="ignoreAccessibility 792875"];
1338 [label="_binderFactories 792876"];
1339 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 792877"];
1340 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 792878"];
1341 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 792879"];
1342 [label="GetSyntaxTreeOrdinal(syntaxTree) 792880"];
1343 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 792881"];
1344 [label="param GetSyntaxTreeOrdinal(this) 792882"];
1345 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 792883"];
1346 [label="this.ContainsSyntaxTree(tree) 792884"];
1347 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 792885"];
1348 [label="param ContainsSyntaxTree(this) 792886"];
1349 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 792887"];
1350 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 792888"];
1351 [label="_syntaxAndDeclarations.GetLazyState() 792889"];
1352 [label="param GetLazyState(this) 792890"];
1353 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 792891"];
1354 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 792892"];
1355 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 792893"];
1356 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 792894"];
1357 [label="_syntaxAndDeclarations.GetLazyState() 792895"];
1358 [label="param GetLazyState(this) 792896"];
1359 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 792897"];
1360 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 792898"];
1361 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 792899"];
1362 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 792900"];
1363 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 792901"];
1364 [label="this.SyntaxTrees 792902"];
1365 [label="param GetLazyState(this) 792903"];
1366 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 792904"];
1367 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 792905"];
1368 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 792906"];
1369 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 792907"];
1370 [label="BinderFactory? previousFactory; 792908"];
1371 [label="var previousWeakReference = binderFactories[treeNum]; 792909"];
1372 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 792910"];
1373 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 792911"];
1374 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 792912"];
1375 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 792913"];
1376 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 792914"];
1377 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 792915"];
1378 [label="param AddNewFactory(SyntaxTree syntaxTree) 792916"];
1379 [label="param AddNewFactory(bool ignoreAccessibility) 792917"];
1380 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 792918"];
1381 [label="param AddNewFactory(this) 792919"];
1382 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 792920"];
1383 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 792921"];
1384 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 792922"];
1385 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 792923"];
1386 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 792924"];
1387 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 792925"];
1388 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 792926"];
1389 [label="BinderFactory? previousFactory; 792927"];
1390 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 792928"];
1391 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 792929"];
1392 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 792930"];
1393 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 792931"];
1394 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 792932"];
1395 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 792933"];
1396 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 792934"];
1397 [label="return newFactory; 792935"];
1398 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 792936"];
1399 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 792937"];
1400 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 792938"];
1401 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 792939"];
1402 [label="GetAllUnaliasedModules(modules); 792940"];
1403 [label="GetAllUnaliasedModules(modules) 792941"];
1404 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 792942"];
1405 [label="param GetAllUnaliasedModules(this) 792943"];
1406 [label="Assembly 792944"];
1407 [label="get\n            {\n                return SourceAssembly;\n            } 792945"];
1408 [label="GetBoundReferenceManager() 792946"];
1409 [label="param GetBoundReferenceManager(this) 792947"];
1410 [label="GetBoundReferenceManager(); 792948"];
1411 [label="modules.AddRange(Assembly.Modules); 792949"];
1412 [label="modules.AddRange(Assembly.Modules); 792950"];
1413 [label="GetBoundReferenceManager() 792951"];
1414 [label="param GetBoundReferenceManager(this) 792952"];
1415 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 792953"];
1416 [label="return _referenceManager; 792954"];
1417 [label="var referenceManager = GetBoundReferenceManager(); 792955"];
1418 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 792956"];
1419 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 792957"];
1420 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 792958"];
1421 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 792959"];
1422 [label="GetAllUnaliasedModules(modules); 792960"];
1423 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 792961"];
1424 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 792962"];
1425 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 792963"];
1426 [label="modules.Free(); 792964"];
1427 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 792965"];
1428 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 792966"];
1429 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 792967"];
1430 [label="return _lazyGlobalNamespace; 792968"];
1431 [label="get\n            {\n                return Assembly.Modules[0];\n            } 792969"];
1432 [label="Assembly 792970"];
1433 [label="get\n            {\n                return SourceAssembly;\n            } 792971"];
1434 [label="SourceAssembly 792972"];
1435 [label="GetBoundReferenceManager() 792973"];
1436 [label="param GetBoundReferenceManager(this) 792974"];
1437 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 792975"];
1438 [label="return _referenceManager; 792976"];
1439 [label="GetBoundReferenceManager(); 792977"];
1440 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 792978"];
1441 [label="return Assembly.Modules[0]; 792979"];
1442 [label="return Assembly.Modules[0]; 792980"];
1443 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 792981"];
1444 [label="param IsNullableAnalysisEnabledIn(this) 792982"];
1445 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 792983"];
1446 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 792984"];
1447 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 792985"];
1448 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 792986"];
1449 [label="param IsNullableAnalysisEnabledIn(this) 792987"];
1450 [label="GetNullableAnalysisValue() 792988"];
1451 [label="param GetNullableAnalysisValue(this) 792989"];
1452 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 792990"];
1453 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 792991"];
1454 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 792992"];
1455 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 792993"];
1456 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 792994"];
1457 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 792995"];
1458 [label="Options 792996"];
1459 [label="get\n            {\n                return _options;\n            } 792997"];
1460 [label="return _options; 792998"];
1461 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 792999"];
1462 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 793000"];
1463 [label="param GetBinderFactory(SyntaxTree syntaxTree) 793001"];
1464 [label="param GetBinderFactory(bool ignoreAccessibility = false) 793002"];
1465 [label="param GetBinderFactory(this) 793003"];
1466 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 793004"];
1467 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 793005"];
1468 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 793006"];
1469 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 793007"];
1470 [label="param GetBinderFactory(SyntaxTree syntaxTree) 793008"];
1471 [label="param GetBinderFactory(bool ignoreAccessibility) 793009"];
1472 [label="param GetBinderFactory(this) 793010"];
1473 [label="ignoreAccessibility 793011"];
1474 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 793012"];
1475 [label="GetSyntaxTreeOrdinal(syntaxTree) 793013"];
1476 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 793014"];
1477 [label="param GetSyntaxTreeOrdinal(this) 793015"];
1478 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 793016"];
1479 [label="this.ContainsSyntaxTree(tree) 793017"];
1480 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 793018"];
1481 [label="param ContainsSyntaxTree(this) 793019"];
1482 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 793020"];
1483 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 793021"];
1484 [label="_syntaxAndDeclarations.GetLazyState() 793022"];
1485 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 793023"];
1486 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 793024"];
1487 [label="_syntaxAndDeclarations.GetLazyState() 793025"];
1488 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 793026"];
1489 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 793027"];
1490 [label="BinderFactory? previousFactory; 793028"];
1491 [label="var previousWeakReference = binderFactories[treeNum]; 793029"];
1492 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 793030"];
1493 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 793031"];
1494 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 793032"];
1495 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 793033"];
1496 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 793034"];
1497 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 793035"];
1498 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 793036"];
1499 [label="param AddNewFactory(SyntaxTree syntaxTree) 793037"];
1500 [label="param AddNewFactory(bool ignoreAccessibility) 793038"];
1501 [label="param AddNewFactory(this) 793039"];
1502 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 793040"];
1503 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 793041"];
1504 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 793042"];
1505 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 793043"];
1506 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 793044"];
1507 [label="BinderFactory? previousFactory; 793045"];
1508 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 793046"];
1509 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 793047"];
1510 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 793048"];
1511 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 793049"];
1512 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 793050"];
1513 [label="get\n            {\n                return Assembly.Modules[0];\n            } 793051"];
1514 [label="Assembly 793052"];
1515 [label="get\n            {\n                return SourceAssembly;\n            } 793053"];
1516 [label="SourceAssembly 793054"];
1517 [label="GetBoundReferenceManager() 793055"];
1518 [label="param GetBoundReferenceManager(this) 793056"];
1519 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 793057"];
1520 [label="return _referenceManager; 793058"];
1521 [label="GetBoundReferenceManager(); 793059"];
1522 [label="return Assembly.Modules[0]; 793060"];
1523 [label="GetBoundReferenceManager() 793061"];
1524 [label="GetBoundReferenceManager(); 793062"];
1525 [label="Debug.Assert(result.SpecialType == specialType); 793063"];
1526 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 793064"];
1527 [label="param IsFeatureEnabled(MessageID feature) 793065"];
1528 [label="compilation.SyntaxTrees 793066"];
1529 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 793067"];
1530 [label="_syntaxAndDeclarations.GetLazyState() 793068"];
1531 [label="param GetLazyState(this) 793069"];
1532 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 793070"];
1533 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 793071"];
1534 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 793072"];
1535 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 793073"];
1536 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 793074"];
1537 [label="GetBoundReferenceManager() 793075"];
1538 [label="GetBoundReferenceManager(); 793076"];
1539 [label="Debug.Assert(result.SpecialType == specialType); 793077"];
1540 [label="param ShouldEmitNullableAttributes(Symbol symbol) 793078"];
1541 [label="param ShouldEmitNullableAttributes(this) 793079"];
1542 [label="RoslynDebug.Assert(symbol is object); 793080"];
1543 [label="RoslynDebug.Assert(symbol is object); 793081"];
1544 [label="Debug.Assert(symbol.IsDefinition); 793082"];
1545 [label="SourceModule 793083"];
1546 [label="get\n            {\n                return Assembly.Modules[0];\n            } 793084"];
1547 [label="Assembly 793085"];
1548 [label="get\n            {\n                return SourceAssembly;\n            } 793086"];
1549 [label="SourceAssembly 793087"];
1550 [label="GetBoundReferenceManager() 793088"];
1551 [label="param GetBoundReferenceManager(this) 793089"];
1552 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 793090"];
1553 [label="return _referenceManager; 793091"];
1554 [label="GetBoundReferenceManager(); 793092"];
1555 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 793093"];
1556 [label="return Assembly.Modules[0]; 793094"];
1557 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 793095"];
1558 [label="EmitNullablePublicOnly 793096"];
1559 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 793097"];
1560 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 793098"];
1561 [label="SyntaxTrees 793099"];
1562 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 793100"];
1563 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 793101"];
1564 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 793102"];
1565 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 793103"];
1566 [label="_lazyEmitNullablePublicOnly 793104"];
1567 [label="return _lazyEmitNullablePublicOnly.Value(); 793105"];
1568 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 793106"];
1569 [label="return true; 793107"];
1570 [label="Debug.Assert(symbol.IsDefinition); 793108"];
1571 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 793109"];
1572 [label="return _referenceManager; 793110"];
1573 [label="GetBoundReferenceManager(); 793111"];
1574 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 793112"];
1575 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 793113"];
1576 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 793114"];
1577 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 793115"];
1578 [label="_declarationDiagnosticsFrozen = true; 793116"];
1579 [label="_declarationDiagnosticsFrozen 793117"];
1580 [label="_needsGeneratedAttributes_IsFrozen = true; 793118"];
1581 [label="_needsGeneratedAttributes_IsFrozen 793119"];
1582 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 793120"];
1583 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 793121"];
1584 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 793122"];
1585 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 793123"];
1586 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 793124"];
1587 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 793125"];
1588 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 793126"];
1589 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 793127"];
1590 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 793128"];
1591 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 793129"];
1592 [label="param GetClsComplianceDiagnostics(this) 793130"];
1593 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 793131"];
1594 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 793132"];
1595 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 793133"];
1596 [label="var builder = DiagnosticBag.GetInstance(); 793134"];
1597 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 793135"];
1598 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 793136"];
1599 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 793137"];
1600 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 793138"];
1601 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 793139"];
1602 [label="param CheckCompliance(CSharpCompilation compilation) 793140"];
1603 [label="param CheckCompliance(DiagnosticBag diagnostics) 793141"];
1604 [label="param CheckCompliance(CancellationToken cancellationToken) 793142"];
1605 [label="param CheckCompliance(SyntaxTree filterTree = null) 793143"];
1606 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 793144"];
1607 [label="var queue = new ConcurrentQueue<Diagnostic>(); 793145"];
1608 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 793146"];
1609 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 793147"];
1610 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 793148"];
1611 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 793149"];
1612 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 793150"];
1613 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 793151"];
1614 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 793152"];
1615 [label="param ClsComplianceChecker(CSharpCompilation compilation) 793153"];
1616 [label="param ClsComplianceChecker(SyntaxTree filterTree) 793154"];
1617 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 793155"];
1618 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 793156"];
1619 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 793157"];
1620 [label="param ClsComplianceChecker(this) 793158"];
1621 [label="param ClsComplianceChecker(this) 793159"];
1622 [label="_compilation 793160"];
1623 [label="_filterTree 793161"];
1624 [label="_filterSpanWithinTree 793162"];
1625 [label="_diagnostics 793163"];
1626 [label="_declaredOrInheritedCompliance 793164"];
1627 [label="_compilerTasks 793165"];
1628 [label="_compilation 793166"];
1629 [label="_filterTree 793167"];
1630 [label="_filterSpanWithinTree 793168"];
1631 [label="_diagnostics 793169"];
1632 [label="_cancellationToken 793170"];
1633 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 793171"];
1634 [label="_declaredOrInheritedCompliance 793172"];
1635 [label="ConcurrentAnalysis 793173"];
1636 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 793174"];
1637 [label="null 793175"];
1638 [label="_filterTree == null 793176"];
1639 [label="_compilation.Options 793177"];
1640 [label="get\n            {\n                return _options;\n            } 793178"];
1641 [label="return _options; 793179"];
1642 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 793180"];
1643 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 793181"];
1644 [label="_compilerTasks = new ConcurrentStack<Task>(); 793182"];
1645 [label="_compilerTasks 793183"];
1646 [label="compilation.Assembly 793184"];
1647 [label="get\n            {\n                return SourceAssembly;\n            } 793185"];
1648 [label="GetBoundReferenceManager() 793186"];
1649 [label="param GetBoundReferenceManager(this) 793187"];
1650 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 793188"];
1651 [label="return _referenceManager; 793189"];
1652 [label="GetBoundReferenceManager(); 793190"];
1653 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 793191"];
1654 [label="checker.Visit(compilation.Assembly); 793192"];
1655 [label="checker.Visit(compilation.Assembly); 793193"];
1656 [label="checker.Visit(compilation.Assembly); 793194"];
1657 [label="param VisitAssembly(AssemblySymbol symbol) 793195"];
1658 [label="param VisitAssembly(this) 793196"];
1659 [label="_cancellationToken.ThrowIfCancellationRequested(); 793197"];
1660 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 793198"];
1661 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 793199"];
1662 [label="GetDeclaredOrInheritedCompliance(symbol) 793200"];
1663 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 793201"];
1664 [label="param GetDeclaredOrInheritedCompliance(this) 793202"];
1665 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 793203"];
1666 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 793204"];
1667 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 793205"];
1668 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 793206"];
1669 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 793207"];
1670 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 793208"];
1671 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 793209"];
1672 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 793210"];
1673 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 793211"];
1674 [label="Compliance compliance; 793212"];
1675 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 793213"];
1676 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 793214"];
1677 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 793215"];
1678 [label="Location ignoredLocation; 793216"];
1679 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 793217"];
1680 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 793218"];
1681 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 793219"];
1682 [label="param GetDeclaredCompliance(Symbol symbol) 793220"];
1683 [label="param GetDeclaredCompliance(out Location attributeLocation) 793221"];
1684 [label="param GetDeclaredCompliance(this) 793222"];
1685 [label="attributeLocation = null; 793223"];
1686 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 793224"];
1687 [label="return null; 793225"];
1688 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 793226"];
1689 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 793227"];
1690 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 793228"];
1691 [label="compliance = Compliance.ImpliedFalse; 793229"];
1692 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 793230"];
1693 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 793231"];
1694 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 793232"];
1695 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 793233"];
1696 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 793234"];
1697 [label="IsTrue(assemblyCompliance) 793235"];
1698 [label="param IsTrue(Compliance compliance) 793236"];
1699 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 793237"];
1700 [label="return false; 793238"];
1701 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 793239"];
1702 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 793240"];
1703 [label="ModuleSymbol module = symbol.Modules[i]; 793241"];
1704 [label="Location attributeLocation; 793242"];
1705 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 793243"];
1706 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 793244"];
1707 [label="GetDeclaredCompliance(module, out attributeLocation) 793245"];
1708 [label="param GetDeclaredCompliance(Symbol symbol) 793246"];
1709 [label="param GetDeclaredCompliance(out Location attributeLocation) 793247"];
1710 [label="param GetDeclaredCompliance(this) 793248"];
1711 [label="attributeLocation = null; 793249"];
1712 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 793250"];
1713 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 793251"];
1714 [label="i == 0 793252"];
1715 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 793253"];
1716 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 793254"];
1717 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 793255"];
1718 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 793256"];
1719 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 793257"];
1720 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 793258"];
1721 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 793259"];
1722 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 793260"];
1723 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 793261"];
1724 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 793262"];
1725 [label="GetDeclaredOrInheritedCompliance(sourceModule) 793263"];
1726 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 793264"];
1727 [label="param GetDeclaredOrInheritedCompliance(this) 793265"];
1728 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 793266"];
1729 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 793267"];
1730 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 793268"];
1731 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 793269"];
1732 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 793270"];
1733 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 793271"];
1734 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 793272"];
1735 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 793273"];
1736 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 793274"];
1737 [label="Compliance compliance; 793275"];
1738 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 793276"];
1739 [label="Location ignoredLocation; 793277"];
1740 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 793278"];
1741 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 793279"];
1742 [label="param GetDeclaredCompliance(out Location attributeLocation) 793280"];
1743 [label="param GetDeclaredCompliance(this) 793281"];
1744 [label="attributeLocation = null; 793282"];
1745 [label="return null; 793283"];
1746 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 793284"];
1747 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 793285"];
1748 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 793286"];
1749 [label="GetInheritedCompliance(symbol) 793287"];
1750 [label="param GetInheritedCompliance(Symbol symbol) 793288"];
1751 [label="param GetInheritedCompliance(this) 793289"];
1752 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 793290"];
1753 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 793291"];
1754 [label="System.Diagnostics.Debug.Assert((object)containing != null); 793292"];
1755 [label="System.Diagnostics.Debug.Assert((object)containing != null); 793293"];
1756 [label="return GetDeclaredOrInheritedCompliance(containing); 793294"];
1757 [label="GetDeclaredOrInheritedCompliance(containing) 793295"];
1758 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 793296"];
1759 [label="param GetDeclaredOrInheritedCompliance(this) 793297"];
1760 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 793298"];
1761 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 793299"];
1762 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 793300"];
1763 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 793301"];
1764 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 793302"];
1765 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 793303"];
1766 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 793304"];
1767 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 793305"];
1768 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 793306"];
1769 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 793307"];
1770 [label="return compliance; 793308"];
1771 [label="IsTrue(GetInheritedCompliance(symbol)) 793309"];
1772 [label="param IsTrue(Compliance compliance) 793310"];
1773 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 793311"];
1774 [label="return false; 793312"];
1775 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 793313"];
1776 [label="param IsTrue(Compliance compliance) 793314"];
1777 [label="Visit(symbol.GlobalNamespace); 793315"];
1778 [label="Visit(symbol.GlobalNamespace); 793316"];
1779 [label="param VisitNamespace(NamespaceSymbol symbol) 793317"];
1780 [label="param VisitNamespace(this) 793318"];
1781 [label="_cancellationToken.ThrowIfCancellationRequested(); 793319"];
1782 [label="if (DoNotVisit(symbol)) return; 793320"];
1783 [label="DoNotVisit(symbol) 793321"];
1784 [label="param DoNotVisit(Symbol symbol) 793322"];
1785 [label="param DoNotVisit(this) 793323"];
1786 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 793324"];
1787 [label="return false; 793325"];
1788 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 793326"];
1789 [label="GetDeclaredOrInheritedCompliance(symbol) 793327"];
1790 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 793328"];
1791 [label="param GetDeclaredOrInheritedCompliance(this) 793329"];
1792 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 793330"];
1793 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 793331"];
1794 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 793332"];
1795 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 793333"];
1796 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 793334"];
1797 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 793335"];
1798 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 793336"];
1799 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 793337"];
1800 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 793338"];
1801 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 793339"];
1802 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 793340"];
1803 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 793341"];
1804 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 793342"];
1805 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 793343"];
1806 [label="return compliance; 793344"];
1807 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 793345"];
1808 [label="param IsTrue(Compliance compliance) 793346"];
1809 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 793347"];
1810 [label="return false; 793348"];
1811 [label="ConcurrentAnalysis 793349"];
1812 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 793350"];
1813 [label="null 793351"];
1814 [label="_filterTree == null 793352"];
1815 [label="_compilation.Options 793353"];
1816 [label="get\n            {\n                return _options;\n            } 793354"];
1817 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 793355"];
1818 [label="VisitNamespaceMembersAsTasks(symbol); 793356"];
1819 [label="VisitNamespaceMembersAsTasks(symbol) 793357"];
1820 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 793358"];
1821 [label="param VisitNamespaceMembersAsTasks(this) 793359"];
1822 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 793360"];
1823 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 793361"];
1824 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 793362"];
1825 [label="VisitNamespaceMembersAsTasks(symbol); 793363"];
1826 [label="checker.WaitForWorkers() 793364"];
1827 [label="param WaitForWorkers(this) 793365"];
1828 [label="var tasks = _compilerTasks; 793366"];
1829 [label="if (tasks == null)\n            {\n                return;\n            } 793367"];
1830 [label="if (tasks == null)\n            {\n                return;\n            } 793368"];
1831 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 793369"];
1832 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 793370"];
1833 [label="curTask.GetAwaiter().GetResult(); 793371"];
1834 [label="checker.WaitForWorkers(); 793372"];
1835 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 793373"];
1836 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 793374"];
1837 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 793375"];
1838 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 793376"];
1839 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 793377"];
1840 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 793378"];
1841 [label="return _lazyClsComplianceDiagnostics; 793379"];
1842 [label="return result.AsImmutable().Concat(clsDiagnostics); 793380"];
1843 [label="return result.AsImmutable().Concat(clsDiagnostics); 793381"];
1844 [label="return result.AsImmutable().Concat(clsDiagnostics); 793382"];
1845 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 793383"];
1846 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 793384"];
1847 [label="cancellationToken.ThrowIfCancellationRequested(); 793385"];
1848 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 793386"];
1849 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 793387"];
1850 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 793388"];
1851 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 793389"];
1852 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 793390"];
1853 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 793391"];
1854 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 793392"];
1855 [label="return diagnostics.ToReadOnlyAndFree(); 793393"];
1856 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 793394"];
1857 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 793395"];
1858 [label="excludeDiagnostics?.Free(); 793396"];
1859 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 793397"];
1860 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 793398"];
1861 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 793399"];
1862 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 793400"];
1863 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 793401"];
1864 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 793402"];
1865 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 793403"];
1866 [label="param AddDebugSourceDocumentsForChecksumDirectives(SyntaxTree tree) 793404"];
1867 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 793405"];
1868 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 793406"];
1869 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 793407"];
1870 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 793408"];
1871 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 793409"];
1872 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 793410"];
1873 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 793411"];
1874 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 793412"];
1875 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 793413"];
1876 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 793414"];
1877 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 793415"];
1878 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 793416"];
1879 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 793417"];
1880 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 793418"];
1881 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 793419"];
1882 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 793420"];
1883 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 793421"];
1884 [label="param CompileMethodBodies(CSharpCompilation compilation) 793422"];
1885 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 793423"];
1886 [label="param CompileMethodBodies(bool emittingPdb) 793424"];
1887 [label="param CompileMethodBodies(bool emitTestCoverageData) 793425"];
1888 [label="param CompileMethodBodies(bool hasDeclarationErrors) 793426"];
1889 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 793427"];
1890 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 793428"];
1891 [label="param CompileMethodBodies(CancellationToken cancellationToken) 793429"];
1892 [label="Debug.Assert(compilation != null); 793430"];
1893 [label="Debug.Assert(compilation != null); 793431"];
1894 [label="Debug.Assert(diagnostics != null); 793432"];
1895 [label="Debug.Assert(diagnostics != null); 793433"];
1896 [label="compilation.PreviousSubmission 793434"];
1897 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 793435"];
1898 [label="ScriptCompilationInfo 793436"];
1899 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 793437"];
1900 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 793438"];
1901 [label="MethodSymbol entryPoint = null; 793439"];
1902 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 793440"];
1903 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 793441"];
1904 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 793442"];
1905 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 793443"];
1906 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 793444"];
1907 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 793445"];
1908 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 793446"];
1909 [label="param GetEntryPoint(CSharpCompilation compilation) 793447"];
1910 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 793448"];
1911 [label="param GetEntryPoint(bool hasDeclarationErrors) 793449"];
1912 [label="param GetEntryPoint(DiagnosticBag diagnostics) 793450"];
1913 [label="param GetEntryPoint(CancellationToken cancellationToken) 793451"];
1914 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 793452"];
1915 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 793453"];
1916 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 793454"];
1917 [label="param GetEntryPointAndDiagnostics(this) 793455"];
1918 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 793456"];
1919 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 793457"];
1920 [label="EntryPoint? entryPoint; 793458"];
1921 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 793459"];
1922 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 793460"];
1923 [label="GetBoundReferenceManager() 793461"];
1924 [label="GetBoundReferenceManager(); 793462"];
1925 [label="this.Options 793463"];
1926 [label="return _options; 793464"];
1927 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 793465"];
1928 [label="this.ScriptClass 793466"];
1929 [label="get { return _scriptClass.Value; } 793467"];
1930 [label="return _scriptClass.Value; 793468"];
1931 [label="_scriptClass.Value 793469"];
1932 [label="param BindScriptClass(this) 793470"];
1933 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 793471"];
1934 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 793472"];
1935 [label="get { return this.SourceModule.GetPublicSymbol(); } 793473"];
1936 [label="this.SourceModule 793474"];
1937 [label="get\n            {\n                return Assembly.Modules[0];\n            } 793475"];
1938 [label="GetBoundReferenceManager() 793476"];
1939 [label="param GetBoundReferenceManager(this) 793477"];
1940 [label="GetBoundReferenceManager(); 793478"];
1941 [label="return this.SourceModule.GetPublicSymbol(); 793479"];
1942 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 793480"];
1943 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 793481"];
1944 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 793482"];
1945 [label="null 793483"];
1946 [label="ImmutableArray<Diagnostic>.Empty 793484"];
1947 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 793485"];
1948 [label="param EntryPoint(MethodSymbol? methodSymbol) 793486"];
1949 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 793487"];
1950 [label="param EntryPoint(this) 793488"];
1951 [label="MethodSymbol 793489"];
1952 [label="this.MethodSymbol 793490"];
1953 [label="this.Diagnostics 793491"];
1954 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 793492"];
1955 [label="entryPoint = EntryPoint.None; 793493"];
1956 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 793494"];
1957 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 793495"];
1958 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 793496"];
1959 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 793497"];
1960 [label="return _lazyEntryPoint; 793498"];
1961 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 793499"];
1962 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 793500"];
1963 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 793501"];
1964 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 793502"];
1965 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 793503"];
1966 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 793504"];
1967 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 793505"];
1968 [label="return null; 793506"];
1969 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 793507"];
1970 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 793508"];
1971 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 793509"];
1972 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 793510"];
1973 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 793511"];
1974 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 793512"];
1975 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 793513"];
1976 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 793514"];
1977 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 793515"];
1978 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 793516"];
1979 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 793517"];
1980 [label="param MethodCompiler(CSharpCompilation compilation) 793518"];
1981 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 793519"];
1982 [label="param MethodCompiler(bool emittingPdb) 793520"];
1983 [label="param MethodCompiler(bool emitTestCoverageData) 793521"];
1984 [label="param MethodCompiler(bool hasDeclarationErrors) 793522"];
1985 [label="param MethodCompiler(DiagnosticBag diagnostics) 793523"];
1986 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 793524"];
1987 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 793525"];
1988 [label="param MethodCompiler(CancellationToken cancellationToken) 793526"];
1989 [label="param MethodCompiler(this) 793527"];
1990 [label="param MethodCompiler(this) 793528"];
1991 [label="_compilation 793529"];
1992 [label="_emittingPdb 793530"];
1993 [label="_emitTestCoverageData 793531"];
1994 [label="_diagnostics 793532"];
1995 [label="_hasDeclarationErrors 793533"];
1996 [label="_moduleBeingBuiltOpt 793534"];
1997 [label="_filterOpt 793535"];
1998 [label="_debugDocumentProvider 793536"];
1999 [label="_entryPointOpt 793537"];
2000 [label="_compilerTasks 793538"];
2001 [label="_globalHasErrors 793539"];
2002 [label="Debug.Assert(compilation != null); 793540"];
2003 [label="Debug.Assert(compilation != null); 793541"];
2004 [label="Debug.Assert(diagnostics != null); 793542"];
2005 [label="Debug.Assert(diagnostics != null); 793543"];
2006 [label="_compilation 793544"];
2007 [label="_moduleBeingBuiltOpt 793545"];
2008 [label="_emittingPdb 793546"];
2009 [label="_cancellationToken 793547"];
2010 [label="_diagnostics 793548"];
2011 [label="_filterOpt 793549"];
2012 [label="_entryPointOpt 793550"];
2013 [label="_hasDeclarationErrors 793551"];
2014 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 793552"];
2015 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 793553"];
2016 [label="param SetGlobalErrorIfTrue(bool arg) 793554"];
2017 [label="param SetGlobalErrorIfTrue(this) 793555"];
2018 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 793556"];
2019 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 793557"];
2020 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 793558"];
2021 [label="_debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile); 793559"];
2022 [label="_debugDocumentProvider 793560"];
2023 [label="_emitTestCoverageData 793561"];
2024 [label="compilation.Options 793562"];
2025 [label="get\n            {\n                return _options;\n            } 793563"];
2026 [label="return _options; 793564"];
2027 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 793565"];
2028 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 793566"];
2029 [label="methodCompiler._compilerTasks 793567"];
2030 [label="compilation.SourceModule 793568"];
2031 [label="get\n            {\n                return Assembly.Modules[0];\n            } 793569"];
2032 [label="Assembly 793570"];
2033 [label="get\n            {\n                return SourceAssembly;\n            } 793571"];
2034 [label="SourceAssembly 793572"];
2035 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 793573"];
2036 [label="GetBoundReferenceManager() 793574"];
2037 [label="param GetBoundReferenceManager(this) 793575"];
2038 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 793576"];
2039 [label="return _referenceManager; 793577"];
2040 [label="GetBoundReferenceManager(); 793578"];
2041 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 793579"];
2042 [label="return Assembly.Modules[0]; 793580"];
2043 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 793581"];
2044 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 793582"];
2045 [label="param CompileNamespace(NamespaceSymbol symbol) 793583"];
2046 [label="param CompileNamespace(this) 793584"];
2047 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 793585"];
2048 [label="s.Accept(this, null); 793586"];
2049 [label="s.Accept(this, null); 793587"];
2050 [label="s.Accept(this, null); 793588"];
2051 [label="param VisitNamedType(NamedTypeSymbol symbol) 793589"];
2052 [label="param VisitNamedType(TypeCompilationState arg) 793590"];
2053 [label="param VisitNamedType(this) 793591"];
2054 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 793592"];
2055 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 793593"];
2056 [label="PassesFilter(_filterOpt, symbol) 793594"];
2057 [label="param PassesFilter(Predicate<Symbol> filterOpt) 793595"];
2058 [label="param PassesFilter(Symbol symbol) 793596"];
2059 [label="return (filterOpt == null) || filterOpt(symbol); 793597"];
2060 [label="return (filterOpt == null) || filterOpt(symbol); 793598"];
2061 [label="arg = null; 793599"];
2062 [label="_cancellationToken.ThrowIfCancellationRequested(); 793600"];
2063 [label="_compilation.Options 793601"];
2064 [label="get\n            {\n                return _options;\n            } 793602"];
2065 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 793603"];
2066 [label="Task worker = CompileNamedTypeAsync(symbol); 793604"];
2067 [label="CompileNamedTypeAsync(symbol) 793605"];
2068 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 793606"];
2069 [label="param CompileNamedTypeAsync(this) 793607"];
2070 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 793608"];
2071 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 793609"];
2072 [label="Task worker = CompileNamedTypeAsync(symbol); 793610"];
2073 [label="_compilerTasks.Push(worker); 793611"];
2074 [label="return null; 793612"];
2075 [label="s.Accept(this, null); 793613"];
2076 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 793614"];
2077 [label="methodCompiler.WaitForWorkers() 793615"];
2078 [label="param WaitForWorkers(this) 793616"];
2079 [label="var tasks = _compilerTasks; 793617"];
2080 [label="if (tasks == null)\n            {\n                return;\n            } 793618"];
2081 [label="if (tasks == null)\n            {\n                return;\n            } 793619"];
2082 [label="Task curTask; 793620"];
2083 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 793621"];
2084 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 793622"];
2085 [label="curTask.GetAwaiter().GetResult(); 793623"];
2086 [label="methodCompiler.WaitForWorkers(); 793624"];
2087 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 793625"];
2088 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 793626"];
2089 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 793627"];
2090 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 793628"];
2091 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 793629"];
2092 [label="=> _additionalTypes 793630"];
2093 [label="_additionalTypes 793631"];
2094 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 793632"];
2095 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 793633"];
2096 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 793634"];
2097 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 793635"];
2098 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 793636"];
2099 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 793637"];
2100 [label="param CompileSynthesizedMethods(this) 793638"];
2101 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 793639"];
2102 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 793640"];
2103 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 793641"];
2104 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 793642"];
2105 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 793643"];
2106 [label="param GetEmbeddedTypes(this) 793644"];
2107 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 793645"];
2108 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 793646"];
2109 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 793647"];
2110 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 793648"];
2111 [label="param CreateEmbeddedAttributesIfNeeded(this) 793649"];
2112 [label="GetNeedsGeneratedAttributes() 793650"];
2113 [label="param GetNeedsGeneratedAttributes(this) 793651"];
2114 [label="_needsGeneratedAttributes_IsFrozen = true; 793652"];
2115 [label="_needsGeneratedAttributes_IsFrozen 793653"];
2116 [label="GetNeedsGeneratedAttributesInternal() 793654"];
2117 [label="param GetNeedsGeneratedAttributesInternal(this) 793655"];
2118 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 793656"];
2119 [label="return GetNeedsGeneratedAttributesInternal(); 793657"];
2120 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 793658"];
2121 [label="ShouldEmitNullablePublicOnlyAttribute() 793659"];
2122 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 793660"];
2123 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 793661"];
2124 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 793662"];
2125 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 793663"];
2126 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 793664"];
2127 [label="return; 793665"];
2128 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 793666"];
2129 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 793667"];
2130 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 793668"];
2131 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 793669"];
2132 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 793670"];
2133 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 793671"];
2134 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 793672"];
2135 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 793673"];
2136 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 793674"];
2137 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 793675"];
2138 [label="builder.AddIfNotNull(_lazyNullableAttribute); 793676"];
2139 [label="builder.AddIfNotNull(_lazyNullableAttribute); 793677"];
2140 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 793678"];
2141 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 793679"];
2142 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 793680"];
2143 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 793681"];
2144 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 793682"];
2145 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 793683"];
2146 [label="return builder.ToImmutableAndFree(); 793684"];
2147 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 793685"];
2148 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 793686"];
2149 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 793687"];
2150 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 793688"];
2151 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 793689"];
2152 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 793690"];
2153 [label="param CompileSynthesizedMethods(this) 793691"];
2154 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 793692"];
2155 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 793693"];
2156 [label="compilation.AnonymousTypeManager 793694"];
2157 [label="get\n            {\n                return _anonymousTypeManager;\n            } 793695"];
2158 [label="return _anonymousTypeManager; 793696"];
2159 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 793697"];
2160 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 793698"];
2161 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 793699"];
2162 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 793700"];
2163 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 793701"];
2164 [label="param GetPreviousAnonymousTypes(this) 793702"];
2165 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 793703"];
2166 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 793704"];
2167 [label="param GetNextAnonymousTypeIndex(this) 793705"];
2168 [label="return 0; 793706"];
2169 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 793707"];
2170 [label="methodCompiler.WaitForWorkers() 793708"];
2171 [label="param WaitForWorkers(this) 793709"];
2172 [label="var tasks = _compilerTasks; 793710"];
2173 [label="if (tasks == null)\n            {\n                return;\n            } 793711"];
2174 [label="if (tasks == null)\n            {\n                return;\n            } 793712"];
2175 [label="Task curTask; 793713"];
2176 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 793714"];
2177 [label="methodCompiler.WaitForWorkers(); 793715"];
2178 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 793716"];
2179 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 793717"];
2180 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 793718"];
2181 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 793719"];
2182 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 793720"];
2183 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 793721"];
2184 [label="compilation.AdditionalCodegenWarnings 793722"];
2185 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 793723"];
2186 [label="return _additionalCodegenWarnings; 793724"];
2187 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 793725"];
2188 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 793726"];
2189 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 793727"];
2190 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 793728"];
2191 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 793729"];
2192 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 793730"];
2193 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 793731"];
2194 [label="param WarnUnusedFields(CSharpCompilation compilation) 793732"];
2195 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 793733"];
2196 [label="param WarnUnusedFields(CancellationToken cancellationToken) 793734"];
2197 [label="compilation.Assembly 793735"];
2198 [label="get\n            {\n                return SourceAssembly;\n            } 793736"];
2199 [label="SourceAssembly 793737"];
2200 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 793738"];
2201 [label="GetBoundReferenceManager() 793739"];
2202 [label="param GetBoundReferenceManager(this) 793740"];
2203 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 793741"];
2204 [label="return _referenceManager; 793742"];
2205 [label="GetBoundReferenceManager(); 793743"];
2206 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 793744"];
2207 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 793745"];
2208 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 793746"];
2209 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 793747"];
2210 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 793748"];
2211 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 793749"];
2212 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 793750"];
2213 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 793751"];
2214 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 793752"];
2215 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 793753"];
2216 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 793754"];
2217 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 793755"];
2218 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 793756"];
2219 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 793757"];
2220 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 793758"];
2221 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 793759"];
2222 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 793760"];
2223 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 793761"];
2224 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 793762"];
2225 [label="param GenerateModuleInitializer(this) 793763"];
2226 [label="Debug.Assert(_declarationDiagnosticsFrozen); 793764"];
2227 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 793765"];
2228 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 793766"];
2229 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 793767"];
2230 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 793768"];
2231 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 793769"];
2232 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 793770"];
2233 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 793771"];
2234 [label="{ ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 793772"];
2235 [label="s_alinkWarnings = { ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 793773"];
2236 [label="param Filter(Diagnostic d) 793774"];
2237 [label="param Filter(int warningLevelOption) 793775"];
2238 [label="param Filter(NullableContextOptions nullableOption) 793776"];
2239 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 793777"];
2240 [label="param Filter(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 793778"];
2241 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 793779"];
2242 [label="param Filter(CancellationToken cancellationToken) 793780"];
2243 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 793781"];
2244 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 793782"];
2245 [label="if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 793783"];
2246 [label="if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 793784"];
2247 [label="ReportDiagnostic reportAction; 793785"];
2248 [label="bool hasPragmaSuppression; 793786"];
2249 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 793787"];
2250 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 793788"];
2251 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 793789"];
2252 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 793790"];
2253 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 793791"];
2254 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 793792"];
2255 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 793793"];
2256 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 793794"];
2257 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 793795"];
2258 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 793796"];
2259 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 793797"];
2260 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 793798"];
2261 [label="GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression) 793799"];
2262 [label="param GetDiagnosticReport(DiagnosticSeverity severity) 793800"];
2263 [label="param GetDiagnosticReport(bool isEnabledByDefault) 793801"];
2264 [label="param GetDiagnosticReport(string id) 793802"];
2265 [label="param GetDiagnosticReport(int diagnosticWarningLevel) 793803"];
2266 [label="param GetDiagnosticReport(Location location) 793804"];
2267 [label="param GetDiagnosticReport(string category) 793805"];
2268 [label="param GetDiagnosticReport(int warningLevelOption) 793806"];
2269 [label="param GetDiagnosticReport(NullableContextOptions nullableOption) 793807"];
2270 [label="param GetDiagnosticReport(ReportDiagnostic generalDiagnosticOption) 793808"];
2271 [label="param GetDiagnosticReport(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 793809"];
2272 [label="param GetDiagnosticReport(SyntaxTreeOptionsProvider? syntaxTreeOptions) 793810"];
2273 [label="param GetDiagnosticReport(CancellationToken cancellationToken) 793811"];
2274 [label="param GetDiagnosticReport(out bool hasPragmaSuppression) 793812"];
2275 [label="hasPragmaSuppression = false; 793813"];
2276 [label="Debug.Assert(location.SourceTree is null || location.SourceTree is CSharpSyntaxTree); 793814"];
2277 [label="var tree = location.SourceTree as CSharpSyntaxTree; 793815"];
2278 [label="var position = location.SourceSpan.Start; 793816"];
2279 [label="bool isNullableFlowAnalysisWarning = ErrorFacts.NullableWarnings.Contains(id); 793817"];
2280 [label="if (isNullableFlowAnalysisWarning)\n            {\n                // LAFHIS\n                Syntax.NullableContextState.State? warningsState = tree is not null ? tree.GetNullableContextState(position).WarningsState : null;\n                var nullableWarningsEnabled = warningsState switch\n                {\n                    Syntax.NullableContextState.State.Enabled => true,\n                    Syntax.NullableContextState.State.Disabled => false,\n                    Syntax.NullableContextState.State.ExplicitlyRestored => nullableOption.WarningsEnabled(),\n                    Syntax.NullableContextState.State.Unknown =>\n                        tree?.IsGeneratedCode(syntaxTreeOptions, cancellationToken) != true && nullableOption.WarningsEnabled(),\n                    null => nullableOption.WarningsEnabled(),\n                    _ => throw ExceptionUtilities.UnexpectedValue(warningsState)\n                };\n\n                if (!nullableWarningsEnabled)\n                {\n                    return ReportDiagnostic.Suppress;\n                }\n            } 793818"];
2281 [label="if (diagnosticWarningLevel > warningLevelOption)  // honor the warning level\n            {\n                return ReportDiagnostic.Suppress;\n            } 793819"];
2282 [label="ReportDiagnostic report; 793820"];
2283 [label="bool isSpecified = false; 793821"];
2284 [label="bool specifiedWarnAsErrorMinus = false; 793822"];
2285 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 793823"];
2286 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 793824"];
2287 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 793825"];
2288 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 793826"];
2289 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 793827"];
2290 [label="if (!isSpecified)\n            {\n                report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress;\n            } 793828"];
2291 [label="isEnabledByDefault 793829"];
2292 [label="report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress; 793830"];
2293 [label="if (report == ReportDiagnostic.Suppress)\n            {\n                return ReportDiagnostic.Suppress;\n            } 793831"];
2294 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 793832"];
2295 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 793833"];
2296 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 793834"];
2297 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Disabled)\n            {\n                hasPragmaSuppression = true;\n            } 793835"];
2298 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Enabled)\n            {\n                switch (report)\n                {\n                    case ReportDiagnostic.Error:\n                    case ReportDiagnostic.Hidden:\n                    case ReportDiagnostic.Info:\n                    case ReportDiagnostic.Warn:\n                        // No need to adjust the current report state, it already means 'enabled'\n                        return report;\n\n                    case ReportDiagnostic.Suppress:\n                        // Enable the warning\n                        return ReportDiagnostic.Default;\n\n                    case ReportDiagnostic.Default:\n                        if (generalDiagnosticOption == ReportDiagnostic.Error && promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n\n                        return ReportDiagnostic.Default;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(report);\n                }\n            }\n            else if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 793836"];
2299 [label="if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 793837"];
2300 [label="if (report == ReportDiagnostic.Default)\n            {\n                switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                }\n            } 793838"];
2301 [label="switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                } 793839"];
2302 [label="return report; 793840"];
2303 [label="if (hasPragmaSuppression)\n            {\n                d = d.WithIsSuppressed(true);\n            } 793841"];
2304 [label="return d.WithReportDiagnostic(reportAction); 793842"];
2305 [label="return d.WithReportDiagnostic(reportAction); 793843"];
2306 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 793844"];
2307 [label="return true; 793845"];
2308 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 793846"];
2309 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 793847"];
2310 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 793848"];
2311 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 793849"];
2312 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 793850"];
2313 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 793851"];
2314 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 793852"];
2315 [label="param GenerateResourcesAndDocumentationComments(this) 793853"];
2316 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 793854"];
2317 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 793855"];
2318 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 793856"];
2319 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 793857"];
2320 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 793858"];
2321 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 793859"];
2322 [label="SourceAssembly 793860"];
2323 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 793861"];
2324 [label="GetBoundReferenceManager() 793862"];
2325 [label="param GetBoundReferenceManager(this) 793863"];
2326 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 793864"];
2327 [label="return _referenceManager; 793865"];
2328 [label="GetBoundReferenceManager(); 793866"];
2329 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 793867"];
2330 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 793868"];
2331 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 793869"];
2332 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 793870"];
2333 [label="AddedModulesResourceNames(resourceDiagnostics) 793871"];
2334 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 793872"];
2335 [label="param AddedModulesResourceNames(this) 793873"];
2336 [label="SourceAssembly 793874"];
2337 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 793875"];
2338 [label="GetBoundReferenceManager() 793876"];
2339 [label="param GetBoundReferenceManager(this) 793877"];
2340 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 793878"];
2341 [label="return _referenceManager; 793879"];
2342 [label="GetBoundReferenceManager(); 793880"];
2343 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 793881"];
2344 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 793882"];
2345 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 793883"];
2346 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 793884"];
2347 [label="param AddedModulesResourceNames(this) 793885"];
2348 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 793886"];
2349 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 793887"];
2350 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 793888"];
2351 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 793889"];
2352 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 793890"];
2353 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 793891"];
2354 [label="cancellationToken.ThrowIfCancellationRequested(); 793892"];
2355 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 793893"];
2356 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 793894"];
2357 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 793895"];
2358 [label="new[] { '\\r\\n', '\\r', '\\n' } 793896"];
2359 [label="'\\r\\n' 793897"];
2360 [label="'\\r' 793898"];
2361 [label="'\\n' 793899"];
2362 [label="new[] { '\\r\\n', '\\r', '\\n' } 793900"];
2363 [label="new[] { '\\r\\n', '\\r', '\\n' } 793901"];
2364 [label="new[] { '\\r\\n', '\\r', '\\n' } 793902"];
2365 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 793903"];
2366 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 793904"];
2367 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 793905"];
2368 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 793906"];
2369 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 793907"];
2370 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 793908"];
2371 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 793909"];
2372 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 793910"];
2373 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 793911"];
2374 [label="param WriteDocumentationCommentXml(string? assemblyName) 793912"];
2375 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 793913"];
2376 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 793914"];
2377 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 793915"];
2378 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 793916"];
2379 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 793917"];
2380 [label="StreamWriter writer = null; 793918"];
2381 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 793919"];
2382 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 793920"];
2383 [label="compilation.SourceAssembly 793921"];
2384 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 793922"];
2385 [label="GetBoundReferenceManager() 793923"];
2386 [label="param GetBoundReferenceManager(this) 793924"];
2387 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 793925"];
2388 [label="return _referenceManager; 793926"];
2389 [label="GetBoundReferenceManager(); 793927"];
2390 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 793928"];
2391 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 793929"];
2392 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 793930"];
2393 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 793931"];
2394 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 793932"];
2395 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 793933"];
2396 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 793934"];
2397 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 793935"];
2398 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 793936"];
2399 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 793937"];
2400 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 793938"];
2401 [label="param DocumentationCommentCompiler(string assemblyName) 793939"];
2402 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 793940"];
2403 [label="param DocumentationCommentCompiler(TextWriter writer) 793941"];
2404 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 793942"];
2405 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 793943"];
2406 [label="param DocumentationCommentCompiler(bool processIncludes) 793944"];
2407 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 793945"];
2408 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 793946"];
2409 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 793947"];
2410 [label="param DocumentationCommentCompiler(this) 793948"];
2411 [label="param DocumentationCommentCompiler(this) 793949"];
2412 [label="_assemblyName 793950"];
2413 [label="_compilation 793951"];
2414 [label="_writer 793952"];
2415 [label="_filterTree 793953"];
2416 [label="_filterSpanWithinTree 793954"];
2417 [label="_processIncludes 793955"];
2418 [label="_isForSingleSymbol 793956"];
2419 [label="_diagnostics 793957"];
2420 [label="_lazyComparer 793958"];
2421 [label="_includedFileCache 793959"];
2422 [label="_indentDepth 793960"];
2423 [label="_temporaryStringBuilders 793961"];
2424 [label="_assemblyName 793962"];
2425 [label="_compilation 793963"];
2426 [label="_writer 793964"];
2427 [label="_filterTree 793965"];
2428 [label="_filterSpanWithinTree 793966"];
2429 [label="_processIncludes 793967"];
2430 [label="_isForSingleSymbol 793968"];
2431 [label="_diagnostics 793969"];
2432 [label="_cancellationToken 793970"];
2433 [label="compilation.SourceAssembly 793971"];
2434 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 793972"];
2435 [label="GetBoundReferenceManager() 793973"];
2436 [label="param GetBoundReferenceManager(this) 793974"];
2437 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 793975"];
2438 [label="return _referenceManager; 793976"];
2439 [label="GetBoundReferenceManager(); 793977"];
2440 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 793978"];
2441 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 793979"];
2442 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 793980"];
2443 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 793981"];
2444 [label="param VisitNamespace(NamespaceSymbol symbol) 793982"];
2445 [label="param VisitNamespace(this) 793983"];
2446 [label="_cancellationToken.ThrowIfCancellationRequested(); 793984"];
2447 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 793985"];
2448 [label="Debug.Assert(_assemblyName != null); 793986"];
2449 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 793987"];
2450 [label="WriteLine('<?xml version=\\'1.0\\'?>') 793988"];
2451 [label="param WriteLine(string message) 793989"];
2452 [label="param WriteLine(this) 793990"];
2453 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 793991"];
2454 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 793992"];
2455 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 793993"];
2456 [label="WriteLine('<doc>'); 793994"];
2457 [label="WriteLine('<doc>') 793995"];
2458 [label="param WriteLine(string message) 793996"];
2459 [label="param WriteLine(this) 793997"];
2460 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 793998"];
2461 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 793999"];
2462 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794000"];
2463 [label="Indent() 794001"];
2464 [label="param Indent(this) 794002"];
2465 [label="_indentDepth 794003"];
2466 [label="Indent(); 794004"];
2467 [label="_compilation.Options 794005"];
2468 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 794006"];
2469 [label="WriteLine('<assembly>'); 794007"];
2470 [label="WriteLine('<assembly>') 794008"];
2471 [label="param WriteLine(string message) 794009"];
2472 [label="param WriteLine(this) 794010"];
2473 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794011"];
2474 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794012"];
2475 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794013"];
2476 [label="Indent() 794014"];
2477 [label="param Indent(this) 794015"];
2478 [label="_indentDepth 794016"];
2479 [label="Indent(); 794017"];
2480 [label="WriteLine('<name>{0}</name>', _assemblyName); 794018"];
2481 [label="WriteLine('<name>{0}</name>', _assemblyName) 794019"];
2482 [label="WriteLine('<name>{0}</name>', _assemblyName) 794020"];
2483 [label="param WriteLine(string format) 794021"];
2484 [label="param WriteLine(params object[] args) 794022"];
2485 [label="param WriteLine(this) 794023"];
2486 [label="WriteLine(string.Format(format, args)); 794024"];
2487 [label="WriteLine(string.Format(format, args)); 794025"];
2488 [label="WriteLine(string.Format(format, args)); 794026"];
2489 [label="WriteLine(string.Format(format, args)) 794027"];
2490 [label="param WriteLine(string message) 794028"];
2491 [label="param WriteLine(this) 794029"];
2492 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794030"];
2493 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794031"];
2494 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794032"];
2495 [label="WriteLine(string.Format(format, args)); 794033"];
2496 [label="Unindent() 794034"];
2497 [label="param Unindent(this) 794035"];
2498 [label="_indentDepth 794036"];
2499 [label="Debug.Assert(_indentDepth >= 0); 794037"];
2500 [label="Debug.Assert(_indentDepth >= 0); 794038"];
2501 [label="Unindent(); 794039"];
2502 [label="WriteLine('</assembly>'); 794040"];
2503 [label="WriteLine('</assembly>') 794041"];
2504 [label="param WriteLine(string message) 794042"];
2505 [label="param WriteLine(this) 794043"];
2506 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794044"];
2507 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794045"];
2508 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794046"];
2509 [label="WriteLine('<members>'); 794047"];
2510 [label="WriteLine('<members>') 794048"];
2511 [label="param WriteLine(string message) 794049"];
2512 [label="param WriteLine(this) 794050"];
2513 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794051"];
2514 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794052"];
2515 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794053"];
2516 [label="Indent() 794054"];
2517 [label="param Indent(this) 794055"];
2518 [label="_indentDepth 794056"];
2519 [label="Indent(); 794057"];
2520 [label="Debug.Assert(!_isForSingleSymbol); 794058"];
2521 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 794059"];
2522 [label="_cancellationToken.ThrowIfCancellationRequested(); 794060"];
2523 [label="s.Accept(this); 794061"];
2524 [label="s.Accept(this); 794062"];
2525 [label="s.Accept(this); 794063"];
2526 [label="param VisitNamedType(NamedTypeSymbol symbol) 794064"];
2527 [label="param VisitNamedType(this) 794065"];
2528 [label="_cancellationToken.ThrowIfCancellationRequested(); 794066"];
2529 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 794067"];
2530 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 794068"];
2531 [label="DefaultVisit(symbol); 794069"];
2532 [label="DefaultVisit(symbol) 794070"];
2533 [label="param DefaultVisit(Symbol symbol) 794071"];
2534 [label="param DefaultVisit(this) 794072"];
2535 [label="_cancellationToken.ThrowIfCancellationRequested(); 794073"];
2536 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 794074"];
2537 [label="ShouldSkip(symbol) 794075"];
2538 [label="param ShouldSkip(Symbol symbol) 794076"];
2539 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 794077"];
2540 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 794078"];
2541 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 794079"];
2542 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 794080"];
2543 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 794081"];
2544 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 794082"];
2545 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 794083"];
2546 [label="DocumentationMode maxDocumentationMode; 794084"];
2547 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 794085"];
2548 [label="docCommentNodes 794086"];
2549 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 794087"];
2550 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 794088"];
2551 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 794089"];
2552 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 794090"];
2553 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 794091"];
2554 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 794092"];
2555 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 794093"];
2556 [label="param TryGetDocumentationCommentNodes(this) 794094"];
2557 [label="maxDocumentationMode = DocumentationMode.None; 794095"];
2558 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 794096"];
2559 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 794097"];
2560 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 794098"];
2561 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 794099"];
2562 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 794100"];
2563 [label="currDocumentationMode > maxDocumentationMode 794101"];
2564 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 794102"];
2565 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 794103"];
2566 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 794104"];
2567 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 794105"];
2568 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 794106"];
2569 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 794107"];
2570 [label="return true; 794108"];
2571 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 794109"];
2572 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 794110"];
2573 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 794111"];
2574 [label="return; 794112"];
2575 [label="DefaultVisit(symbol); 794113"];
2576 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 794114"];
2577 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 794115"];
2578 [label="_cancellationToken.ThrowIfCancellationRequested(); 794116"];
2579 [label="member.Accept(this); 794117"];
2580 [label="member.Accept(this); 794118"];
2581 [label="member.Accept(this); 794119"];
2582 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 794120"];
2583 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 794121"];
2584 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 794122"];
2585 [label="DocumentationMode maxDocumentationMode; 794123"];
2586 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 794124"];
2587 [label="docCommentNodes 794125"];
2588 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 794126"];
2589 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 794127"];
2590 [label="maxDocumentationMode = DocumentationMode.None; 794128"];
2591 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 794129"];
2592 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 794130"];
2593 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 794131"];
2594 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 794132"];
2595 [label="currDocumentationMode > maxDocumentationMode 794133"];
2596 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 794134"];
2597 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 794135"];
2598 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 794136"];
2599 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 794137"];
2600 [label="return true; 794138"];
2601 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 794139"];
2602 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 794140"];
2603 [label="return; 794141"];
2604 [label="return; 794142"];
2605 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 794143"];
2606 [label="Unindent() 794144"];
2607 [label="Debug.Assert(_indentDepth >= 0); 794145"];
2608 [label="Unindent(); 794146"];
2609 [label="WriteLine('</members>'); 794147"];
2610 [label="WriteLine('</members>') 794148"];
2611 [label="param WriteLine(string message) 794149"];
2612 [label="param WriteLine(this) 794150"];
2613 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794151"];
2614 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794152"];
2615 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794153"];
2616 [label="Unindent() 794154"];
2617 [label="_indentDepth 794155"];
2618 [label="Debug.Assert(_indentDepth >= 0); 794156"];
2619 [label="Debug.Assert(_indentDepth >= 0); 794157"];
2620 [label="Unindent(); 794158"];
2621 [label="WriteLine('</doc>'); 794159"];
2622 [label="WriteLine('</doc>') 794160"];
2623 [label="param WriteLine(string message) 794161"];
2624 [label="param WriteLine(this) 794162"];
2625 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794163"];
2626 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794164"];
2627 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 794165"];
2628 [label="Debug.Assert(compiler._indentDepth == 0); 794166"];
2629 [label="Debug.Assert(compiler._indentDepth == 0); 794167"];
2630 [label="writer?.Flush(); 794168"];
2631 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 794169"];
2632 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 794170"];
2633 [label="compilation.SyntaxTrees 794171"];
2634 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 794172"];
2635 [label="_syntaxAndDeclarations.GetLazyState() 794173"];
2636 [label="param GetLazyState(this) 794174"];
2637 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 794175"];
2638 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 794176"];
2639 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 794177"];
2640 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 794178"];
2641 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 794179"];
2642 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 794180"];
2643 [label="param ReportUnprocessed(SyntaxTree tree) 794181"];
2644 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 794182"];
2645 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 794183"];
2646 [label="param ReportUnprocessed(CancellationToken cancellationToken) 794184"];
2647 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 794185"];
2648 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 794186"];
2649 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 794187"];
2650 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 794188"];
2651 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 794189"];
2652 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 794190"];
2653 [label="param ReportUnusedImports(SyntaxTree? filterTree) 794191"];
2654 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 794192"];
2655 [label="param ReportUnusedImports(CancellationToken cancellationToken) 794193"];
2656 [label="param ReportUnusedImports(this) 794194"];
2657 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 794195"];
2658 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 794196"];
2659 [label="CompleteTrees(filterTree); 794197"];
2660 [label="CompleteTrees(filterTree) 794198"];
2661 [label="param CompleteTrees(SyntaxTree? filterTree) 794199"];
2662 [label="param CompleteTrees(this) 794200"];
2663 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 794201"];
2664 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 794202"];
2665 [label="CompleteTrees(filterTree); 794203"];
2666 [label="get { return this.SourceModule.GetPublicSymbol(); } 794204"];
2667 [label="this.SourceModule 794205"];
2668 [label="get\n            {\n                return Assembly.Modules[0];\n            } 794206"];
2669 [label="Assembly 794207"];
2670 [label="get\n            {\n                return SourceAssembly;\n            } 794208"];
2671 [label="SourceAssembly 794209"];
2672 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 794210"];
2673 [label="GetBoundReferenceManager() 794211"];
2674 [label="param GetBoundReferenceManager(this) 794212"];
2675 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 794213"];
2676 [label="return _referenceManager; 794214"];
2677 [label="GetBoundReferenceManager(); 794215"];
2678 [label="return Assembly.Modules[0]; 794216"];
2679 [label="get { return SourceAssembly.IsDelaySigned; } 794217"];
2680 [label="SourceAssembly 794218"];
2681 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 794219"];
2682 [label="GetBoundReferenceManager() 794220"];
2683 [label="param GetBoundReferenceManager(this) 794221"];
2684 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 794222"];
2685 [label="return _referenceManager; 794223"];
2686 [label="GetBoundReferenceManager(); 794224"];
2687 [label="SourceAssembly.IsDelaySigned 794225"];
2688 [label="get { return SourceAssembly.StrongNameKeys; } 794226"];
2689 [label="SourceAssembly 794227"];
2690 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 794228"];
2691 [label="GetBoundReferenceManager() 794229"];
2692 [label="param GetBoundReferenceManager(this) 794230"];
2693 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 794231"];
2694 [label="return _referenceManager; 794232"];
2695 [label="GetBoundReferenceManager(); 794233"];
2696 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 794234"];
2697 [label="param GetCorLibraryReferenceToEmit(this) 794235"];
2698 [label="CorLibrary 794236"];
2699 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 794237"];
2700 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 794238"];
2701 [label="AssemblySymbol corLibrary = CorLibrary; 794239"];
2702 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 794240"];
2703 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 794241"];
2704 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 794242"];
2705 [label="return Translate(corLibrary, context.Diagnostics); 794243"];
2706 [label="return Translate(corLibrary, context.Diagnostics); 794244"];
2707 [label="Translate(corLibrary, context.Diagnostics) 794245"];
2708 [label="param Translate(AssemblySymbol assembly) 794246"];
2709 [label="param Translate(DiagnosticBag diagnostics) 794247"];
2710 [label="param Translate(this) 794248"];
2711 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 794249"];
2712 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 794250"];
2713 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 794251"];
2714 [label="Cci.IModuleReference reference; 794252"];
2715 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 794253"];
2716 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 794254"];
2717 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 794255"];
2718 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 794256"];
2719 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 794257"];
2720 [label="new AssemblyReference(assembly) 794258"];
2721 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 794259"];
2722 [label="param AssemblyReference(this) 794260"];
2723 [label="_targetAssembly 794261"];
2724 [label="Debug.Assert((object)assemblySymbol != null); 794262"];
2725 [label="Debug.Assert((object)assemblySymbol != null); 794263"];
2726 [label="_targetAssembly 794264"];
2727 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 794265"];
2728 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 794266"];
2729 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 794267"];
2730 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 794268"];
2731 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 794269"];
2732 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 794270"];
2733 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 794271"];
2734 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 794272"];
2735 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 794273"];
2736 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 794274"];
2737 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 794275"];
2738 [label="param ValidateReferencedAssembly(this) 794276"];
2739 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 794277"];
2740 [label="asmRef.Identity 794278"];
2741 [label="=> _targetAssembly.Identity 794279"];
2742 [label="_targetAssembly.Identity 794280"];
2743 [label="AssemblyIdentity refIdentity = asmRef.Identity; 794281"];
2744 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 794282"];
2745 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 794283"];
2746 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 794284"];
2747 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 794285"];
2748 [label="var refMachine = assembly.Machine; 794286"];
2749 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 794287"];
2750 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 794288"];
2751 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 794289"];
2752 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 794290"];
2753 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 794291"];
2754 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 794292"];
2755 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 794293"];
2756 [label="return cachedAsmRef; 794294"];
2757 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 794295"];
2758 [label="=> _targetAssembly.Identity 794296"];
2759 [label="_targetAssembly.Identity 794297"];
2760 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 794298"];
2761 [label="param GetAssemblyReferencesFromAddedModules(this) 794299"];
2762 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 794300"];
2763 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 794301"];
2764 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 794302"];
2765 [label="param GetAssemblyReferencesFromAddedModules(this) 794303"];
2766 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 794304"];
2767 [label="param GetFiles(EmitContext context) 794305"];
2768 [label="param GetFiles(this) 794306"];
2769 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 794307"];
2770 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 794308"];
2771 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 794309"];
2772 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 794310"];
2773 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 794311"];
2774 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 794312"];
2775 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 794313"];
2776 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 794314"];
2777 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 794315"];
2778 [label="var modules = sourceAssSymbol.Modules; 794316"];
2779 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 794317"];
2780 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 794318"];
2781 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 794319"];
2782 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 794320"];
2783 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 794321"];
2784 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 794322"];
2785 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 794323"];
2786 [label="builder.Free(); 794324"];
2787 [label="return lazyFiles; 794325"];
2788 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 794326"];
2789 [label="=> _embeddedTypesManagerOpt 794327"];
2790 [label="_embeddedTypesManagerOpt 794328"];
2791 [label="param GetAnonymousTypeDefinitions(EmitContext context) 794329"];
2792 [label="param GetAnonymousTypeDefinitions(this) 794330"];
2793 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 794331"];
2794 [label="Compilation.AnonymousTypeManager 794332"];
2795 [label="get\n            {\n                return _anonymousTypeManager;\n            } 794333"];
2796 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 794334"];
2797 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 794335"];
2798 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 794336"];
2799 [label="param GetAdditionalTopLevelTypeDefinitions(this) 794337"];
2800 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 794338"];
2801 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 794339"];
2802 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 794340"];
2803 [label="=> _additionalTypes 794341"];
2804 [label="_additionalTypes 794342"];
2805 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 794343"];
2806 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 794344"];
2807 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 794345"];
2808 [label="param GetEmbeddedTypeDefinitions(this) 794346"];
2809 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 794347"];
2810 [label="GetEmbeddedTypes(context.Diagnostics) 794348"];
2811 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 794349"];
2812 [label="param GetEmbeddedTypes(this) 794350"];
2813 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 794351"];
2814 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 794352"];
2815 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 794353"];
2816 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 794354"];
2817 [label="param CreateEmbeddedAttributesIfNeeded(this) 794355"];
2818 [label="GetNeedsGeneratedAttributes() 794356"];
2819 [label="param GetNeedsGeneratedAttributes(this) 794357"];
2820 [label="_needsGeneratedAttributes_IsFrozen = true; 794358"];
2821 [label="_needsGeneratedAttributes_IsFrozen 794359"];
2822 [label="GetNeedsGeneratedAttributesInternal() 794360"];
2823 [label="param GetNeedsGeneratedAttributesInternal(this) 794361"];
2824 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 794362"];
2825 [label="return GetNeedsGeneratedAttributesInternal(); 794363"];
2826 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 794364"];
2827 [label="ShouldEmitNullablePublicOnlyAttribute() 794365"];
2828 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 794366"];
2829 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 794367"];
2830 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 794368"];
2831 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 794369"];
2832 [label="return; 794370"];
2833 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 794371"];
2834 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 794372"];
2835 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 794373"];
2836 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 794374"];
2837 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 794375"];
2838 [label="builder.AddIfNotNull(_lazyNullableAttribute); 794376"];
2839 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 794377"];
2840 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 794378"];
2841 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 794379"];
2842 [label="return builder.ToImmutableAndFree(); 794380"];
2843 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 794381"];
2844 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 794382"];
2845 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 794383"];
2846 [label="param GetTopLevelSourceTypeDefinitions(this) 794384"];
2847 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 794385"];
2848 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 794386"];
2849 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 794387"];
2850 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 794388"];
2851 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 794389"];
2852 [label="var ns = namespacesToProcess.Pop(); 794390"];
2853 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 794391"];
2854 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 794392"];
2855 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 794393"];
2856 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 794394"];
2857 [label="param ShouldEmitNullableAttributes(Symbol symbol) 794395"];
2858 [label="param ShouldEmitNullableAttributes(this) 794396"];
2859 [label="RoslynDebug.Assert(symbol is object); 794397"];
2860 [label="Debug.Assert(symbol.IsDefinition); 794398"];
2861 [label="SourceModule 794399"];
2862 [label="get\n            {\n                return Assembly.Modules[0];\n            } 794400"];
2863 [label="Assembly 794401"];
2864 [label="get\n            {\n                return SourceAssembly;\n            } 794402"];
2865 [label="SourceAssembly 794403"];
2866 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 794404"];
2867 [label="GetBoundReferenceManager() 794405"];
2868 [label="param GetBoundReferenceManager(this) 794406"];
2869 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 794407"];
2870 [label="return _referenceManager; 794408"];
2871 [label="GetBoundReferenceManager(); 794409"];
2872 [label="return Assembly.Modules[0]; 794410"];
2873 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 794411"];
2874 [label="EmitNullablePublicOnly 794412"];
2875 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 794413"];
2876 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 794414"];
2877 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 794415"];
2878 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 794416"];
2879 [label="param SynthesizeNullableAttributeIfNecessary(this) 794417"];
2880 [label="Compilation.SourceModule 794418"];
2881 [label="get\n            {\n                return Assembly.Modules[0];\n            } 794419"];
2882 [label="Assembly 794420"];
2883 [label="SourceAssembly 794421"];
2884 [label="GetBoundReferenceManager() 794422"];
2885 [label="param GetBoundReferenceManager(this) 794423"];
2886 [label="GetBoundReferenceManager(); 794424"];
2887 [label="return Assembly.Modules[0]; 794425"];
2888 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 794426"];
2889 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 794427"];
2890 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 794428"];
2891 [label="type.AddNullableTransforms(flagsBuilder); 794429"];
2892 [label="type.AddNullableTransforms(flagsBuilder); 794430"];
2893 [label="SynthesizedAttributeData attribute; 794431"];
2894 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 794432"];
2895 [label="attribute = null; 794433"];
2896 [label="flagsBuilder.Free(); 794434"];
2897 [label="return attribute; 794435"];
2898 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 794436"];
2899 [label="Debug.Assert(symbol.IsDefinition); 794437"];
2900 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 794438"];
2901 [label="return _referenceManager; 794439"];
2902 [label="GetBoundReferenceManager(); 794440"];
2903 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 794441"];
2904 [label="param GetBoundReferenceManager(this) 794442"];
2905 [label="GetBoundReferenceManager(); 794443"];
2906 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 794444"];
2907 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 794445"];
2908 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 794446"];
2909 [label="param GetSynthesizedNestedTypes(this) 794447"];
2910 [label="return null; 794448"];
2911 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 794449"];
2912 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 794450"];
2913 [label="param GetSourceAssemblyAttributes(this) 794451"];
2914 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 794452"];
2915 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 794453"];
2916 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 794454"];
2917 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 794455"];
2918 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 794456"];
2919 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 794457"];
2920 [label="NamedTypeSymbol result; 794458"];
2921 [label="GetBoundReferenceManager() 794459"];
2922 [label="GetBoundReferenceManager(); 794460"];
2923 [label="Debug.Assert(result.SpecialType == specialType); 794461"];
2924 [label="SourceAssembly 794462"];
2925 [label="GetBoundReferenceManager() 794463"];
2926 [label="param GetBoundReferenceManager(this) 794464"];
2927 [label="GetBoundReferenceManager(); 794465"];
2928 [label="GetBoundReferenceManager() 794466"];
2929 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 794467"];
2930 [label="param Translate(MethodSymbol methodSymbol) 794468"];
2931 [label="param Translate(SyntaxNode syntaxNodeOpt) 794469"];
2932 [label="param Translate(DiagnosticBag diagnostics) 794470"];
2933 [label="param Translate(BoundArgListOperator optArgList = null) 794471"];
2934 [label="param Translate(bool needDeclaration = false) 794472"];
2935 [label="param Translate(this) 794473"];
2936 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 794474"];
2937 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 794475"];
2938 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 794476"];
2939 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 794477"];
2940 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 794478"];
2941 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 794479"];
2942 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 794480"];
2943 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 794481"];
2944 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 794482"];
2945 [label="param Translate(MethodSymbol methodSymbol) 794483"];
2946 [label="param Translate(SyntaxNode syntaxNodeOpt) 794484"];
2947 [label="param Translate(DiagnosticBag diagnostics) 794485"];
2948 [label="param Translate(bool needDeclaration) 794486"];
2949 [label="param Translate(this) 794487"];
2950 [label="object reference; 794488"];
2951 [label="Cci.IMethodReference methodRef; 794489"];
2952 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 794490"];
2953 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 794491"];
2954 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 794492"];
2955 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 794493"];
2956 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 794494"];
2957 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 794495"];
2958 [label="bool typeIsGeneric = IsGenericType(container); 794496"];
2959 [label="IsGenericType(container) 794497"];
2960 [label="param IsGenericType(NamedTypeSymbol toCheck) 794498"];
2961 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794499"];
2962 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794500"];
2963 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 794501"];
2964 [label="toCheck = toCheck.ContainingType; 794502"];
2965 [label="return false; 794503"];
2966 [label="bool typeIsGeneric = IsGenericType(container); 794504"];
2967 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 794505"];
2968 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 794506"];
2969 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 794507"];
2970 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 794508"];
2971 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 794509"];
2972 [label="return methodSymbol.GetCciAdapter(); 794510"];
2973 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 794511"];
2974 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 794512"];
2975 [label="return unexpandedMethodRef; 794513"];
2976 [label="param Translate(TypeSymbol typeSymbol) 794514"];
2977 [label="param Translate(SyntaxNode syntaxNodeOpt) 794515"];
2978 [label="param Translate(DiagnosticBag diagnostics) 794516"];
2979 [label="param Translate(this) 794517"];
2980 [label="Debug.Assert(diagnostics != null); 794518"];
2981 [label="Debug.Assert(diagnostics != null); 794519"];
2982 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 794520"];
2983 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794521"];
2984 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794522"];
2985 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794523"];
2986 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794524"];
2987 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 794525"];
2988 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 794526"];
2989 [label="param Translate(SyntaxNode syntaxNodeOpt) 794527"];
2990 [label="param Translate(DiagnosticBag diagnostics) 794528"];
2991 [label="param Translate(bool fromImplements = false) 794529"];
2992 [label="param Translate(bool needDeclaration = false) 794530"];
2993 [label="param Translate(this) 794531"];
2994 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 794532"];
2995 [label="Debug.Assert(diagnostics != null); 794533"];
2996 [label="Debug.Assert(diagnostics != null); 794534"];
2997 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794535"];
2998 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794536"];
2999 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 794537"];
3000 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794538"];
3001 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794539"];
3002 [label="object reference; 794540"];
3003 [label="Cci.INamedTypeReference typeRef; 794541"];
3004 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 794542"];
3005 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794543"];
3006 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794544"];
3007 [label="IsGenericType(container) 794545"];
3008 [label="param IsGenericType(NamedTypeSymbol toCheck) 794546"];
3009 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794547"];
3010 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794548"];
3011 [label="return false; 794549"];
3012 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794550"];
3013 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794551"];
3014 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 794552"];
3015 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 794553"];
3016 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 794554"];
3017 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 794555"];
3018 [label="param Translate(SyntaxNode syntaxNodeOpt) 794556"];
3019 [label="param Translate(DiagnosticBag diagnostics) 794557"];
3020 [label="param Translate(bool fromImplements = false) 794558"];
3021 [label="param Translate(bool needDeclaration = false) 794559"];
3022 [label="param Translate(this) 794560"];
3023 [label="Debug.Assert(diagnostics != null); 794561"];
3024 [label="Debug.Assert(diagnostics != null); 794562"];
3025 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794563"];
3026 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794564"];
3027 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 794565"];
3028 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794566"];
3029 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794567"];
3030 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 794568"];
3031 [label="param Translate(ModuleSymbol module) 794569"];
3032 [label="param Translate(DiagnosticBag diagnostics) 794570"];
3033 [label="param Translate(this) 794571"];
3034 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 794572"];
3035 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 794573"];
3036 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 794574"];
3037 [label="if ((object)module == null)\n            {\n                return null;\n            } 794575"];
3038 [label="if ((object)module == null)\n            {\n                return null;\n            } 794576"];
3039 [label="Cci.IModuleReference moduleRef; 794577"];
3040 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 794578"];
3041 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 794579"];
3042 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 794580"];
3043 [label="return moduleRef; 794581"];
3044 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794582"];
3045 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794583"];
3046 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 794584"];
3047 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794585"];
3048 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794586"];
3049 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 794587"];
3050 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 794588"];
3051 [label="param Translate(this) 794589"];
3052 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 794590"];
3053 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 794591"];
3054 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 794592"];
3055 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 794593"];
3056 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 794594"];
3057 [label="MustBeWrapped(@params.First()) 794595"];
3058 [label="param MustBeWrapped(ParameterSymbol param) 794596"];
3059 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 794597"];
3060 [label="var container = param.ContainingSymbol; 794598"];
3061 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 794599"];
3062 [label="ContainerIsGeneric(container) 794600"];
3063 [label="param ContainerIsGeneric(Symbol container) 794601"];
3064 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794602"];
3065 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794603"];
3066 [label="IsGenericType(container.ContainingType) 794604"];
3067 [label="param IsGenericType(NamedTypeSymbol toCheck) 794605"];
3068 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794606"];
3069 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794607"];
3070 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 794608"];
3071 [label="toCheck = toCheck.ContainingType; 794609"];
3072 [label="return false; 794610"];
3073 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794611"];
3074 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794612"];
3075 [label="return false; 794613"];
3076 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 794614"];
3077 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 794615"];
3078 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 794616"];
3079 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 794617"];
3080 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 794618"];
3081 [label="param MustBeWrapped(ParameterSymbol param) 794619"];
3082 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 794620"];
3083 [label="var container = param.ContainingSymbol; 794621"];
3084 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 794622"];
3085 [label="ContainerIsGeneric(container) 794623"];
3086 [label="param ContainerIsGeneric(Symbol container) 794624"];
3087 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794625"];
3088 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794626"];
3089 [label="IsGenericType(container.ContainingType) 794627"];
3090 [label="param IsGenericType(NamedTypeSymbol toCheck) 794628"];
3091 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794629"];
3092 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794630"];
3093 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 794631"];
3094 [label="toCheck = toCheck.ContainingType; 794632"];
3095 [label="return false; 794633"];
3096 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794634"];
3097 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794635"];
3098 [label="return false; 794636"];
3099 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 794637"];
3100 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 794638"];
3101 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 794639"];
3102 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 794640"];
3103 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794641"];
3104 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794642"];
3105 [label="param Translate(SyntaxNode syntaxNodeOpt) 794643"];
3106 [label="param Translate(DiagnosticBag diagnostics) 794644"];
3107 [label="param Translate(bool fromImplements = false) 794645"];
3108 [label="param Translate(bool needDeclaration = false) 794646"];
3109 [label="Debug.Assert(diagnostics != null); 794647"];
3110 [label="Debug.Assert(diagnostics != null); 794648"];
3111 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794649"];
3112 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794650"];
3113 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 794651"];
3114 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794652"];
3115 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794653"];
3116 [label="object reference; 794654"];
3117 [label="Cci.INamedTypeReference typeRef; 794655"];
3118 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 794656"];
3119 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794657"];
3120 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794658"];
3121 [label="IsGenericType(container) 794659"];
3122 [label="param IsGenericType(NamedTypeSymbol toCheck) 794660"];
3123 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794661"];
3124 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794662"];
3125 [label="return false; 794663"];
3126 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794664"];
3127 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794665"];
3128 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 794666"];
3129 [label="param IsPlatformType(Cci.ITypeReference typeRef) 794667"];
3130 [label="param IsPlatformType(Cci.PlatformType platformType) 794668"];
3131 [label="param IsPlatformType(this) 794669"];
3132 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 794670"];
3133 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 794671"];
3134 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 794672"];
3135 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 794673"];
3136 [label="return namedType.SpecialType == (SpecialType)platformType; 794674"];
3137 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 794675"];
3138 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794676"];
3139 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794677"];
3140 [label="param Translate(SyntaxNode syntaxNodeOpt) 794678"];
3141 [label="param Translate(DiagnosticBag diagnostics) 794679"];
3142 [label="param Translate(bool fromImplements = false) 794680"];
3143 [label="param Translate(bool needDeclaration = false) 794681"];
3144 [label="Debug.Assert(diagnostics != null); 794682"];
3145 [label="Debug.Assert(diagnostics != null); 794683"];
3146 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794684"];
3147 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794685"];
3148 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 794686"];
3149 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794687"];
3150 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794688"];
3151 [label="object reference; 794689"];
3152 [label="Cci.INamedTypeReference typeRef; 794690"];
3153 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 794691"];
3154 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794692"];
3155 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794693"];
3156 [label="IsGenericType(container) 794694"];
3157 [label="param IsGenericType(NamedTypeSymbol toCheck) 794695"];
3158 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794696"];
3159 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794697"];
3160 [label="return false; 794698"];
3161 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794699"];
3162 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794700"];
3163 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 794701"];
3164 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794702"];
3165 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794703"];
3166 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 794704"];
3167 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794705"];
3168 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794706"];
3169 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 794707"];
3170 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 794708"];
3171 [label="param MustBeWrapped(ParameterSymbol param) 794709"];
3172 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 794710"];
3173 [label="var container = param.ContainingSymbol; 794711"];
3174 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 794712"];
3175 [label="ContainerIsGeneric(container) 794713"];
3176 [label="param ContainerIsGeneric(Symbol container) 794714"];
3177 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794715"];
3178 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794716"];
3179 [label="IsGenericType(container.ContainingType) 794717"];
3180 [label="param IsGenericType(NamedTypeSymbol toCheck) 794718"];
3181 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794719"];
3182 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794720"];
3183 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 794721"];
3184 [label="toCheck = toCheck.ContainingType; 794722"];
3185 [label="return false; 794723"];
3186 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794724"];
3187 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794725"];
3188 [label="param MustBeWrapped(ParameterSymbol param) 794726"];
3189 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 794727"];
3190 [label="var container = param.ContainingSymbol; 794728"];
3191 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 794729"];
3192 [label="ContainerIsGeneric(container) 794730"];
3193 [label="param ContainerIsGeneric(Symbol container) 794731"];
3194 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794732"];
3195 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794733"];
3196 [label="IsGenericType(container.ContainingType) 794734"];
3197 [label="param IsGenericType(NamedTypeSymbol toCheck) 794735"];
3198 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794736"];
3199 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794737"];
3200 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 794738"];
3201 [label="toCheck = toCheck.ContainingType; 794739"];
3202 [label="return false; 794740"];
3203 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794741"];
3204 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 794742"];
3205 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 794743"];
3206 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 794744"];
3207 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 794745"];
3208 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 794746"];
3209 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 794747"];
3210 [label="bool typeIsGeneric = IsGenericType(container); 794748"];
3211 [label="IsGenericType(container) 794749"];
3212 [label="param IsGenericType(NamedTypeSymbol toCheck) 794750"];
3213 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794751"];
3214 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794752"];
3215 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 794753"];
3216 [label="toCheck = toCheck.ContainingType; 794754"];
3217 [label="return false; 794755"];
3218 [label="bool typeIsGeneric = IsGenericType(container); 794756"];
3219 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 794757"];
3220 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 794758"];
3221 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 794759"];
3222 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 794760"];
3223 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 794761"];
3224 [label="toCheck = toCheck.ContainingType; 794762"];
3225 [label="param GetSourceAssemblySecurityAttributes(this) 794763"];
3226 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 794764"];
3227 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 794765"];
3228 [label="return Translate(corLibrary, context.Diagnostics); 794766"];
3229 [label="param Translate(DiagnosticBag diagnostics) 794767"];
3230 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 794768"];
3231 [label="return (Cci.IAssemblyReference)reference; 794769"];
3232 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 794770"];
3233 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 794771"];
3234 [label="param GetSourceModuleAttributes(this) 794772"];
3235 [label="return SourceModule.GetCustomAttributesToEmit(this); 794773"];
3236 [label="return SourceModule.GetCustomAttributesToEmit(this); 794774"];
3237 [label="return SourceModule.GetCustomAttributesToEmit(this); 794775"];
3238 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 794776"];
3239 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 794777"];
3240 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 794778"];
3241 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 794779"];
3242 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 794780"];
3243 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 794781"];
3244 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 794782"];
3245 [label="return GetNeedsGeneratedAttributesInternal(); 794783"];
3246 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 794784"];
3247 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 794785"];
3248 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 794786"];
3249 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 794787"];
3250 [label="return; 794788"];
3251 [label="Debug.Assert(symbol.IsDefinition); 794789"];
3252 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 794790"];
3253 [label="return _referenceManager; 794791"];
3254 [label="GetBoundReferenceManager(); 794792"];
3255 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 794793"];
3256 [label="param GetBoundReferenceManager(this) 794794"];
3257 [label="GetBoundReferenceManager(); 794795"];
3258 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 794796"];
3259 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 794797"];
3260 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 794798"];
3261 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 794799"];
3262 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 794800"];
3263 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 794801"];
3264 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 794802"];
3265 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 794803"];
3266 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 794804"];
3267 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 794805"];
3268 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 794806"];
3269 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 794807"];
3270 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 794808"];
3271 [label="param SynthesizeNullableAttributeIfNecessary(this) 794809"];
3272 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 794810"];
3273 [label="return null; 794811"];
3274 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794812"];
3275 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794813"];
3276 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 794814"];
3277 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794815"];
3278 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794816"];
3279 [label="object reference; 794817"];
3280 [label="Cci.INamedTypeReference typeRef; 794818"];
3281 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 794819"];
3282 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794820"];
3283 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794821"];
3284 [label="IsGenericType(container) 794822"];
3285 [label="param IsGenericType(NamedTypeSymbol toCheck) 794823"];
3286 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794824"];
3287 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794825"];
3288 [label="return false; 794826"];
3289 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794827"];
3290 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794828"];
3291 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 794829"];
3292 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 794830"];
3293 [label="Debug.Assert(symbol.IsDefinition); 794831"];
3294 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 794832"];
3295 [label="return _referenceManager; 794833"];
3296 [label="GetBoundReferenceManager(); 794834"];
3297 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 794835"];
3298 [label="param GetBoundReferenceManager(this) 794836"];
3299 [label="GetBoundReferenceManager(); 794837"];
3300 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 794838"];
3301 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 794839"];
3302 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794840"];
3303 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794841"];
3304 [label="param Translate(SyntaxNode syntaxNodeOpt) 794842"];
3305 [label="param Translate(DiagnosticBag diagnostics) 794843"];
3306 [label="param Translate(bool fromImplements = false) 794844"];
3307 [label="param Translate(bool needDeclaration = false) 794845"];
3308 [label="Debug.Assert(diagnostics != null); 794846"];
3309 [label="Debug.Assert(diagnostics != null); 794847"];
3310 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794848"];
3311 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794849"];
3312 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 794850"];
3313 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794851"];
3314 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794852"];
3315 [label="object reference; 794853"];
3316 [label="Cci.INamedTypeReference typeRef; 794854"];
3317 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 794855"];
3318 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794856"];
3319 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794857"];
3320 [label="IsGenericType(container) 794858"];
3321 [label="param IsGenericType(NamedTypeSymbol toCheck) 794859"];
3322 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794860"];
3323 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 794861"];
3324 [label="return false; 794862"];
3325 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794863"];
3326 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 794864"];
3327 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 794865"];
3328 [label="param GetExportedTypes(DiagnosticBag diagnostics) 794866"];
3329 [label="param GetExportedTypes(this) 794867"];
3330 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 794868"];
3331 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 794869"];
3332 [label="CalculateExportedTypes() 794870"];
3333 [label="param CalculateExportedTypes(this) 794871"];
3334 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 794872"];
3335 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 794873"];
3336 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 794874"];
3337 [label="var modules = sourceAssembly.Modules; 794875"];
3338 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 794876"];
3339 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 794877"];
3340 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 794878"];
3341 [label="sourceAssembly.DeclaringCompilation.Options 794879"];
3342 [label="get\n            {\n                return _options;\n            } 794880"];
3343 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 794881"];
3344 [label="GetForwardedTypes(sourceAssembly, builder); 794882"];
3345 [label="GetForwardedTypes(sourceAssembly, builder); 794883"];
3346 [label="GetForwardedTypes(sourceAssembly, builder) 794884"];
3347 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 794885"];
3348 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 794886"];
3349 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 794887"];
3350 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 794888"];
3351 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 794889"];
3352 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 794890"];
3353 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 794891"];
3354 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 794892"];
3355 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 794893"];
3356 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 794894"];
3357 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 794895"];
3358 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 794896"];
3359 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 794897"];
3360 [label="sourceAssembly.DeclaringCompilation.Options 794898"];
3361 [label="get\n            {\n                return _options;\n            } 794899"];
3362 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 794900"];
3363 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 794901"];
3364 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 794902"];
3365 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 794903"];
3366 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 794904"];
3367 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 794905"];
3368 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 794906"];
3369 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 794907"];
3370 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 794908"];
3371 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 794909"];
3372 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 794910"];
3373 [label="return seenTopLevelForwardedTypes; 794911"];
3374 [label="GetForwardedTypes(sourceAssembly, builder); 794912"];
3375 [label="return builder.ToImmutableAndFree(); 794913"];
3376 [label="_lazyExportedTypes = CalculateExportedTypes(); 794914"];
3377 [label="_lazyExportedTypes 794915"];
3378 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 794916"];
3379 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 794917"];
3380 [label="return _lazyExportedTypes; 794918"];
3381 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 794919"];
3382 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 794920"];
3383 [label="param AddEmbeddedResourcesFromAddedModules(this) 794921"];
3384 [label="var modules = _sourceAssembly.Modules; 794922"];
3385 [label="int count = modules.Length; 794923"];
3386 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 794924"];
3387 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 794925"];
3388 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 794926"];
3389 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 794927"];
3390 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 794928"];
3391 [label="this.SyntaxTrees 794929"];
3392 [label="_syntaxAndDeclarations.GetLazyState() 794930"];
3393 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 794931"];
3394 [label="=> null 794932"];
3395 [label="null 794933"];
3396 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 794934"];
3397 [label="param CommonGetBoundReferenceManager(this) 794935"];
3398 [label="GetBoundReferenceManager() 794936"];
3399 [label="param GetBoundReferenceManager(this) 794937"];
3400 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 794938"];
3401 [label="return _referenceManager; 794939"];
3402 [label="return GetBoundReferenceManager(); 794940"];
3403 [label="param SerializePdbEmbeddedCompilationOptions(BlobBuilder builder) 794941"];
3404 [label="param SerializePdbEmbeddedCompilationOptions(this) 794942"];
3405 [label="Debug.Assert(LanguageVersion == LanguageVersion.MapSpecifiedToEffectiveVersion()); 794943"];
3406 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 794944"];
3407 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 794945"];
3408 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()) 794946"];
3409 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 794947"];
3410 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 794948"];
3411 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 794949"];
3412 [label="builder.WriteUTF8(key); 794950"];
3413 [label="builder.WriteUTF8(key); 794951"];
3414 [label="builder.WriteUTF8(key); 794952"];
3415 [label="builder.WriteByte(0); 794953"];
3416 [label="builder.WriteByte(0); 794954"];
3417 [label="builder.WriteUTF8(value); 794955"];
3418 [label="builder.WriteUTF8(value); 794956"];
3419 [label="builder.WriteUTF8(value); 794957"];
3420 [label="builder.WriteByte(0); 794958"];
3421 [label="builder.WriteByte(0); 794959"];
3422 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 794960"];
3423 [label="Options 794961"];
3424 [label="get\n            {\n                return _options;\n            } 794962"];
3425 [label="return _options; 794963"];
3426 [label="if (Options.CheckOverflow)\n            {\n                WriteValue(CompilationOptionNames.Checked, Options.CheckOverflow.ToString());\n            } 794964"];
3427 [label="Options 794965"];
3428 [label="get\n            {\n                return _options;\n            } 794966"];
3429 [label="return _options; 794967"];
3430 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable)\n            {\n                WriteValue(CompilationOptionNames.Nullable, Options.NullableContextOptions.ToString());\n            } 794968"];
3431 [label="Options 794969"];
3432 [label="get\n            {\n                return _options;\n            } 794970"];
3433 [label="return _options; 794971"];
3434 [label="if (Options.AllowUnsafe)\n            {\n                WriteValue(CompilationOptionNames.Unsafe, Options.AllowUnsafe.ToString());\n            } 794972"];
3435 [label="GetPreprocessorSymbols() 794973"];
3436 [label="param GetPreprocessorSymbols(this) 794974"];
3437 [label="SyntaxTrees 794975"];
3438 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 794976"];
3439 [label="_syntaxAndDeclarations.GetLazyState() 794977"];
3440 [label="param GetLazyState(this) 794978"];
3441 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 794979"];
3442 [label="CSharpSyntaxTree? firstTree = (CSharpSyntaxTree?)SyntaxTrees.FirstOrDefault(); 794980"];
3443 [label="if (firstTree is null)\n            {\n                return ImmutableArray<string>.Empty;\n            } 794981"];
3444 [label="return firstTree.Options.PreprocessorSymbolNames.ToImmutableArray(); 794982"];
3445 [label="var preprocessorSymbols = GetPreprocessorSymbols(); 794983"];
3446 [label="if (preprocessorSymbols.Any())\n            {\n                WriteValue(CompilationOptionNames.Define, string.Join(',', preprocessorSymbols));\n            } 794984"];
3447 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794985"];
3448 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 794986"];
3449 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 794987"];
3450 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794988"];
3451 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 794989"];
3452 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 794990"];
3453 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 794991"];
3454 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794992"];
3455 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 794993"];
3456 [label="param Translate(SyntaxNode syntaxNodeOpt) 794994"];
3457 [label="param Translate(DiagnosticBag diagnostics) 794995"];
3458 [label="param Translate(bool fromImplements = false) 794996"];
3459 [label="param Translate(bool needDeclaration = false) 794997"];
3460 [label="Debug.Assert(diagnostics != null); 794998"];
3461 [label="Debug.Assert(diagnostics != null); 794999"];
3462 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795000"];
3463 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795001"];
3464 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 795002"];
3465 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795003"];
3466 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795004"];
3467 [label="object reference; 795005"];
3468 [label="Cci.INamedTypeReference typeRef; 795006"];
3469 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 795007"];
3470 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795008"];
3471 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795009"];
3472 [label="IsGenericType(container) 795010"];
3473 [label="param IsGenericType(NamedTypeSymbol toCheck) 795011"];
3474 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795012"];
3475 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795013"];
3476 [label="return false; 795014"];
3477 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795015"];
3478 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795016"];
3479 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 795017"];
3480 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 795018"];
3481 [label="=> _sourceAssembly 795019"];
3482 [label="_sourceAssembly 795020"];
3483 [label="=> _metadataName 795021"];
3484 [label="_metadataName 795022"];
3485 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 795023"];
3486 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795024"];
3487 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795025"];
3488 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 795026"];
3489 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795027"];
3490 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795028"];
3491 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 795029"];
3492 [label="param MemberVisibility(Symbol symbol) 795030"];
3493 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 795031"];
3494 [label="if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    } 795032"];
3495 [label="return Cci.TypeMemberVisibility.Private; 795033"];
3496 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 795034"];
3497 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 795035"];
3498 [label="param Translate(SyntaxNode syntaxNodeOpt) 795036"];
3499 [label="param Translate(DiagnosticBag diagnostics) 795037"];
3500 [label="param Translate(bool fromImplements = false) 795038"];
3501 [label="param Translate(bool needDeclaration = false) 795039"];
3502 [label="Debug.Assert(diagnostics != null); 795040"];
3503 [label="Debug.Assert(diagnostics != null); 795041"];
3504 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795042"];
3505 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795043"];
3506 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 795044"];
3507 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795045"];
3508 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795046"];
3509 [label="object reference; 795047"];
3510 [label="Cci.INamedTypeReference typeRef; 795048"];
3511 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 795049"];
3512 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795050"];
3513 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795051"];
3514 [label="IsGenericType(container) 795052"];
3515 [label="param IsGenericType(NamedTypeSymbol toCheck) 795053"];
3516 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795054"];
3517 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795055"];
3518 [label="return false; 795056"];
3519 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795057"];
3520 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795058"];
3521 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 795059"];
3522 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 795060"];
3523 [label="return Cci.TypeMemberVisibility.Public; 795061"];
3524 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 795062"];
3525 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 795063"];
3526 [label="param Translate(SyntaxNode syntaxNodeOpt) 795064"];
3527 [label="param Translate(DiagnosticBag diagnostics) 795065"];
3528 [label="param Translate(bool fromImplements = false) 795066"];
3529 [label="param Translate(bool needDeclaration = false) 795067"];
3530 [label="Debug.Assert(diagnostics != null); 795068"];
3531 [label="Debug.Assert(diagnostics != null); 795069"];
3532 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795070"];
3533 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795071"];
3534 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 795072"];
3535 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795073"];
3536 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795074"];
3537 [label="object reference; 795075"];
3538 [label="Cci.INamedTypeReference typeRef; 795076"];
3539 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 795077"];
3540 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795078"];
3541 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795079"];
3542 [label="IsGenericType(container) 795080"];
3543 [label="param IsGenericType(NamedTypeSymbol toCheck) 795081"];
3544 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795082"];
3545 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795083"];
3546 [label="return false; 795084"];
3547 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795085"];
3548 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795086"];
3549 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 795087"];
3550 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 795088"];
3551 [label="get { return _metadataName; } 795089"];
3552 [label="return _metadataName; 795090"];
3553 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795091"];
3554 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795092"];
3555 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 795093"];
3556 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795094"];
3557 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795095"];
3558 [label="object reference; 795096"];
3559 [label="Cci.INamedTypeReference typeRef; 795097"];
3560 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 795098"];
3561 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795099"];
3562 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795100"];
3563 [label="IsGenericType(container) 795101"];
3564 [label="param IsGenericType(NamedTypeSymbol toCheck) 795102"];
3565 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795103"];
3566 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795104"];
3567 [label="return false; 795105"];
3568 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795106"];
3569 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795107"];
3570 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 795108"];
3571 [label="if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    } 795109"];
3572 [label="return Cci.TypeMemberVisibility.Assembly; 795110"];
3573 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 795111"];
3574 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795112"];
3575 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795113"];
3576 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 795114"];
3577 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795115"];
3578 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795116"];
3579 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 795117"];
3580 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 795118"];
3581 [label="GetBoundReferenceManager() 795119"];
3582 [label="GetBoundReferenceManager(); 795120"];
3583 [label="Debug.Assert(result.SpecialType == specialType); 795121"];
3584 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 795122"];
3585 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 795123"];
3586 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 795124"];
3587 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 795125"];
3588 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 795126"];
3589 [label="bool typeIsGeneric = IsGenericType(container); 795127"];
3590 [label="IsGenericType(container) 795128"];
3591 [label="param IsGenericType(NamedTypeSymbol toCheck) 795129"];
3592 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795130"];
3593 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795131"];
3594 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 795132"];
3595 [label="toCheck = toCheck.ContainingType; 795133"];
3596 [label="return false; 795134"];
3597 [label="bool typeIsGeneric = IsGenericType(container); 795135"];
3598 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 795136"];
3599 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 795137"];
3600 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 795138"];
3601 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 795139"];
3602 [label="param MustBeWrapped(ParameterSymbol param) 795140"];
3603 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 795141"];
3604 [label="var container = param.ContainingSymbol; 795142"];
3605 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 795143"];
3606 [label="ContainerIsGeneric(container) 795144"];
3607 [label="param ContainerIsGeneric(Symbol container) 795145"];
3608 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795146"];
3609 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795147"];
3610 [label="IsGenericType(container.ContainingType) 795148"];
3611 [label="param IsGenericType(NamedTypeSymbol toCheck) 795149"];
3612 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795150"];
3613 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795151"];
3614 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 795152"];
3615 [label="toCheck = toCheck.ContainingType; 795153"];
3616 [label="return false; 795154"];
3617 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795155"];
3618 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795156"];
3619 [label="param MustBeWrapped(ParameterSymbol param) 795157"];
3620 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 795158"];
3621 [label="var container = param.ContainingSymbol; 795159"];
3622 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 795160"];
3623 [label="ContainerIsGeneric(container) 795161"];
3624 [label="param ContainerIsGeneric(Symbol container) 795162"];
3625 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795163"];
3626 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795164"];
3627 [label="IsGenericType(container.ContainingType) 795165"];
3628 [label="param IsGenericType(NamedTypeSymbol toCheck) 795166"];
3629 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795167"];
3630 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795168"];
3631 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 795169"];
3632 [label="toCheck = toCheck.ContainingType; 795170"];
3633 [label="return false; 795171"];
3634 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795172"];
3635 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795173"];
3636 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 795174"];
3637 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 795175"];
3638 [label="param Translate(SyntaxNode syntaxNodeOpt) 795176"];
3639 [label="param Translate(DiagnosticBag diagnostics) 795177"];
3640 [label="param Translate(bool fromImplements = false) 795178"];
3641 [label="param Translate(bool needDeclaration = false) 795179"];
3642 [label="Debug.Assert(diagnostics != null); 795180"];
3643 [label="Debug.Assert(diagnostics != null); 795181"];
3644 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795182"];
3645 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795183"];
3646 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 795184"];
3647 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795185"];
3648 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795186"];
3649 [label="object reference; 795187"];
3650 [label="Cci.INamedTypeReference typeRef; 795188"];
3651 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 795189"];
3652 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795190"];
3653 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795191"];
3654 [label="IsGenericType(container) 795192"];
3655 [label="param IsGenericType(NamedTypeSymbol toCheck) 795193"];
3656 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795194"];
3657 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795195"];
3658 [label="return false; 795196"];
3659 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795197"];
3660 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795198"];
3661 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 795199"];
3662 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 795200"];
3663 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 795201"];
3664 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 795202"];
3665 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 795203"];
3666 [label="GetBoundReferenceManager() 795204"];
3667 [label="param GetBoundReferenceManager(this) 795205"];
3668 [label="GetBoundReferenceManager(); 795206"];
3669 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 795207"];
3670 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 795208"];
3671 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 795209"];
3672 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 795210"];
3673 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 795211"];
3674 [label="bool typeIsGeneric = IsGenericType(container); 795212"];
3675 [label="IsGenericType(container) 795213"];
3676 [label="param IsGenericType(NamedTypeSymbol toCheck) 795214"];
3677 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795215"];
3678 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795216"];
3679 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 795217"];
3680 [label="toCheck = toCheck.ContainingType; 795218"];
3681 [label="return false; 795219"];
3682 [label="bool typeIsGeneric = IsGenericType(container); 795220"];
3683 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 795221"];
3684 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 795222"];
3685 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 795223"];
3686 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 795224"];
3687 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795225"];
3688 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795226"];
3689 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 795227"];
3690 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795228"];
3691 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795229"];
3692 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 795230"];
3693 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 795231"];
3694 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 795232"];
3695 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 795233"];
3696 [label="param Translate(SyntaxNode syntaxNodeOpt) 795234"];
3697 [label="param Translate(DiagnosticBag diagnostics) 795235"];
3698 [label="param Translate(bool fromImplements = false) 795236"];
3699 [label="param Translate(bool needDeclaration = false) 795237"];
3700 [label="Debug.Assert(diagnostics != null); 795238"];
3701 [label="Debug.Assert(diagnostics != null); 795239"];
3702 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795240"];
3703 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 795241"];
3704 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 795242"];
3705 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795243"];
3706 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 795244"];
3707 [label="object reference; 795245"];
3708 [label="Cci.INamedTypeReference typeRef; 795246"];
3709 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 795247"];
3710 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795248"];
3711 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795249"];
3712 [label="IsGenericType(container) 795250"];
3713 [label="param IsGenericType(NamedTypeSymbol toCheck) 795251"];
3714 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795252"];
3715 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795253"];
3716 [label="return false; 795254"];
3717 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795255"];
3718 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 795256"];
3719 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 795257"];
3720 [label="param MustBeWrapped(ParameterSymbol param) 795258"];
3721 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 795259"];
3722 [label="var container = param.ContainingSymbol; 795260"];
3723 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 795261"];
3724 [label="ContainerIsGeneric(container) 795262"];
3725 [label="param ContainerIsGeneric(Symbol container) 795263"];
3726 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795264"];
3727 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795265"];
3728 [label="IsGenericType(container.ContainingType) 795266"];
3729 [label="param IsGenericType(NamedTypeSymbol toCheck) 795267"];
3730 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795268"];
3731 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795269"];
3732 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 795270"];
3733 [label="toCheck = toCheck.ContainingType; 795271"];
3734 [label="return false; 795272"];
3735 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795273"];
3736 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795274"];
3737 [label="param MustBeWrapped(ParameterSymbol param) 795275"];
3738 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 795276"];
3739 [label="var container = param.ContainingSymbol; 795277"];
3740 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 795278"];
3741 [label="ContainerIsGeneric(container) 795279"];
3742 [label="param ContainerIsGeneric(Symbol container) 795280"];
3743 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795281"];
3744 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795282"];
3745 [label="IsGenericType(container.ContainingType) 795283"];
3746 [label="param IsGenericType(NamedTypeSymbol toCheck) 795284"];
3747 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795285"];
3748 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 795286"];
3749 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 795287"];
3750 [label="toCheck = toCheck.ContainingType; 795288"];
3751 [label="return false; 795289"];
3752 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795290"];
3753 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 795291"];
3754 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 795292"];
3755 [label="toCheck = toCheck.ContainingType; 795293"];
3756 [label="Debug.Assert(symbol.IsDefinition); 795294"];
3757 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 795295"];
3758 [label="return _referenceManager; 795296"];
3759 [label="GetBoundReferenceManager(); 795297"];
3760 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 795298"];
3761 [label="param GetBoundReferenceManager(this) 795299"];
3762 [label="GetBoundReferenceManager(); 795300"];
3763 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 795301"];
3764 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 795302"];
3765 [label="param SynthesizeNullableAttributeIfNecessary(this) 795303"];
3766 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 795304"];
3767 [label="return _referenceManager; 795305"];
3768 [label="GetBoundReferenceManager(); 795306"];
3769 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 795307"];
3770 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 795308"];
3771 [label="diagnostics.AddRange(result.Diagnostics); 795309"];
3772 [label="diagnostics.AddRange(result.Diagnostics); 795310"];
3773 [label="assembly = executableStream.ToImmutable(); 795311"];
3774 [label="assembly = executableStream.ToImmutable(); 795312"];
3775 [label="if (result.Success)\n            {\n                return new EmitOutput(assembly, pdb);\n            } 795313"];
3776 [label="return new EmitOutput(assembly, pdb); 795314"];
3777 [label="return new EmitOutput(assembly, pdb); 795315"];
3778 [label="return new EmitOutput(assembly, pdb); 795316"];
3779 [label="new EmitOutput(assembly, pdb) 795317"];
3780 [label="param EmitOutput(ImmutableArray<byte> assembly) 795318"];
3781 [label="param EmitOutput(ImmutableArray<byte> pdb) 795319"];
3782 [label="param EmitOutput(this) 795320"];
3783 [label="Assembly 795321"];
3784 [label="if (pdb.IsDefault)\n            {\n                // We didn't emit a discrete PDB file, so we'll look for an embedded PDB instead.\n                using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                }\n            } 795322"];
3785 [label="using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                } 795323"];
3786 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 795324"];
3787 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 795325"];
3788 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 795326"];
3789 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 795327"];
3790 [label="using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        } 795328"];
3791 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 795329"];
3792 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 795330"];
3793 [label="pdb = readMetadata(mdReader); 795331"];
3794 [label="readMetadata(mdReader) 795332"];
3795 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 795333"];
3796 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 795334"];
3797 [label="var length = mdReader.MetadataLength; 795335"];
3798 [label="var bytes = new byte[length]; 795336"];
3799 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 795337"];
3800 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 795338"];
3801 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 795339"];
3802 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 795340"];
3803 [label="return ImmutableArray.Create(bytes); 795341"];
3804 [label="return ImmutableArray.Create(bytes); 795342"];
3805 [label="Pdb 795343"];
3806 [label="get { return this.Assembly.GetPublicSymbol(); } 795344"];
3807 [label="this.Assembly 795345"];
3808 [label="get\n            {\n                return SourceAssembly;\n            } 795346"];
3809 [label="SourceAssembly 795347"];
3810 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 795348"];
3811 [label="GetBoundReferenceManager() 795349"];
3812 [label="param GetBoundReferenceManager(this) 795350"];
3813 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 795351"];
3814 [label="return _referenceManager; 795352"];
3815 [label="GetBoundReferenceManager(); 795353"];
3816 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 795354"];
3817 [label="return this.Assembly.GetPublicSymbol(); 795355"];
3818 [label="get { return _options; } 795356"];
3819 [label="_diagnostics = testEnvironment.GetDiagnostics(); 795357"];
3820 [label="_diagnostics 795358"];
3821 [label="EmittedAssemblyData = testEnvironment.GetMainImage(); 795359"];
3822 [label="EmittedAssemblyData 795360"];
3823 [label="EmittedAssemblyPdb = testEnvironment.GetMainPdb(); 795361"];
3824 [label="EmittedAssemblyPdb 795362"];
3825 [label="_testData = ((IInternalRuntimeEnvironment)testEnvironment).GetCompilationTestData(); 795363"];
3826 [label="_testData 795364"];
3827 [label="return _compilation.Assembly.Identity.GetDisplayName(); 795365"];
3828 [label="_compilation.Assembly 795366"];
3829 [label="get { return this.Assembly.GetPublicSymbol(); } 795367"];
3830 [label="this.Assembly 795368"];
3831 [label="SourceAssembly 795369"];
3832 [label="GetBoundReferenceManager() 795370"];
3833 [label="param GetBoundReferenceManager(this) 795371"];
3834 [label="GetBoundReferenceManager(); 795372"];
3835 [label="return _compilation.Assembly.Identity.GetDisplayName(); 795373"];
3836 [label="_allModuleData = testEnvironment.GetAllModuleData(); 795374"];
3837 [label="_allModuleData 795375"];
3838 [label="testEnvironment.Verify(peVerify); 795376"];
3839 [label="testEnvironment.Verify(peVerify); 795377"];
3840 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 795378"];
3841 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 795379"];
3842 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 795380"];
3843 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 795381"];
3844 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 795382"];
3845 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 795383"];
3846 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 795384"];
3847 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 795385"];
3848 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 795386"];
3849 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 795387"];
3850 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 795388"];
3851 [label="return verifier; 795389"];
3852 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 795390"];
3853 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 795391"];
3854 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 795392"];
3855 [label="result = verifier; 795393"];
3856 [label="CustomAssert.NotNull(result); 795394"];
3857 [label="return result; 795395"];
3858 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 795396"];
3859 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 795397"];
3860 [label="CompileAndVerify(@'\nclass C\n{\n    static bool Goo(int i)\n    {\n        int y = 10;\n        bool x = (y == null); // NYI: Implicit null conversion\n        return x;\n    }\n}\n'); 795398"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 1;
13 -> 11;
13 -> 12;
14 -> 13;
14 -> 12;
15 -> 12;
16 -> 14;
16 -> 15;
17 -> 15;
18 -> 16;
18 -> 17;
18 -> 15;
19 -> 15;
19 -> 1;
20 -> 1;
21 -> 19;
21 -> 20;
22 -> 11;
22 -> 20;
23 -> 11;
23 -> 20;
24 -> 11;
24 -> 20;
25 -> 11;
25 -> 20;
26 -> 11;
26 -> 20;
27 -> 11;
27 -> 20;
28 -> 11;
28 -> 20;
29 -> 11;
29 -> 20;
30 -> 11;
30 -> 20;
31 -> 11;
31 -> 20;
32 -> 11;
32 -> 20;
33 -> 11;
33 -> 20;
34 -> 11;
34 -> 20;
35 -> 11;
35 -> 20;
36 -> 11;
36 -> 20;
37 -> 10;
37 -> 20;
38 -> 20;
39 -> 29;
39 -> 38;
39 -> 20;
40 -> 39;
40 -> 20;
41 -> 40;
41 -> 32;
41 -> 20;
42 -> 21;
42 -> 20;
43 -> 22;
43 -> 20;
44 -> 41;
44 -> 20;
45 -> 33;
45 -> 20;
46 -> 35;
46 -> 20;
47 -> 20;
48 -> 47;
49 -> 48;
49 -> 20;
50 -> 20;
51 -> 20;
52 -> 42;
52 -> 51;
53 -> 43;
53 -> 51;
54 -> 44;
54 -> 51;
55 -> 45;
55 -> 51;
56 -> 46;
56 -> 51;
57 -> 49;
57 -> 51;
58 -> 50;
58 -> 51;
59 -> 50;
59 -> 51;
60 -> 52;
60 -> 51;
61 -> 56;
61 -> 51;
62 -> 53;
62 -> 51;
63 -> 51;
64 -> 61;
64 -> 63;
65 -> 62;
65 -> 63;
66 -> 64;
66 -> 63;
67 -> 63;
68 -> 66;
68 -> 67;
69 -> 68;
69 -> 67;
70 -> 69;
71 -> 0;
71 -> 70;
72 -> 71;
73 -> 72;
74 -> 72;
75 -> 0;
75 -> 74;
76 -> 75;
76 -> 73;
76 -> 72;
77 -> 76;
77 -> 70;
78 -> 63;
79 -> 65;
79 -> 78;
79 -> 63;
80 -> 77;
80 -> 79;
81 -> 54;
81 -> 51;
82 -> 55;
82 -> 51;
83 -> 57;
83 -> 51;
84 -> 58;
84 -> 51;
85 -> 59;
85 -> 51;
86 -> 51;
87 -> 60;
87 -> 86;
88 -> 80;
88 -> 86;
89 -> 81;
89 -> 86;
90 -> 82;
90 -> 86;
91 -> 83;
91 -> 86;
92 -> 84;
92 -> 86;
93 -> 85;
93 -> 86;
94 -> 87;
94 -> 86;
95 -> 88;
95 -> 86;
96 -> 89;
96 -> 86;
97 -> 90;
97 -> 86;
98 -> 91;
98 -> 86;
99 -> 92;
99 -> 86;
100 -> 93;
100 -> 86;
101 -> 86;
102 -> 101;
102 -> 86;
103 -> 86;
104 -> 94;
104 -> 103;
105 -> 95;
105 -> 103;
106 -> 96;
106 -> 103;
107 -> 97;
107 -> 103;
108 -> 98;
108 -> 103;
109 -> 99;
109 -> 103;
110 -> 100;
110 -> 103;
111 -> 102;
111 -> 103;
112 -> 107;
112 -> 103;
113 -> 109;
113 -> 103;
114 -> 103;
115 -> 112;
115 -> 114;
116 -> 113;
116 -> 114;
117 -> 104;
117 -> 114;
118 -> 117;
118 -> 18;
118 -> 114;
119 -> 118;
120 -> 116;
120 -> 118;
121 -> 115;
121 -> 118;
122 -> 118;
123 -> 119;
123 -> 122;
124 -> 120;
124 -> 122;
125 -> 121;
125 -> 122;
126 -> 119;
126 -> 122;
127 -> 122;
128 -> 125;
128 -> 127;
128 -> 122;
129 -> 0;
129 -> 128;
130 -> 123;
130 -> 122;
131 -> 0;
131 -> 122;
132 -> 131;
132 -> 126;
132 -> 122;
133 -> 122;
134 -> 130;
134 -> 132;
134 -> 133;
134 -> 0;
134 -> 122;
135 -> 134;
135 -> 122;
136 -> 129;
136 -> 122;
137 -> 124;
137 -> 122;
138 -> 122;
139 -> 135;
139 -> 136;
139 -> 137;
139 -> 138;
139 -> 134;
139 -> 0;
139 -> 122;
140 -> 122;
141 -> 139;
141 -> 140;
142 -> 140;
143 -> 140;
144 -> 141;
144 -> 139;
144 -> 143;
144 -> 140;
145 -> 142;
145 -> 140;
146 -> 140;
147 -> 144;
147 -> 139;
147 -> 143;
147 -> 145;
147 -> 146;
147 -> 142;
147 -> 140;
148 -> 140;
149 -> 148;
149 -> 142;
149 -> 140;
150 -> 142;
150 -> 140;
151 -> 140;
152 -> 150;
152 -> 151;
152 -> 142;
152 -> 149;
152 -> 140;
153 -> 141;
153 -> 140;
154 -> 153;
154 -> 119;
154 -> 118;
155 -> 119;
155 -> 103;
156 -> 103;
157 -> 106;
157 -> 156;
157 -> 103;
158 -> 0;
158 -> 103;
159 -> 111;
159 -> 103;
160 -> 108;
160 -> 155;
160 -> 105;
160 -> 106;
160 -> 103;
161 -> 160;
161 -> 103;
162 -> 103;
163 -> 161;
163 -> 162;
164 -> 0;
164 -> 162;
165 -> 164;
166 -> 103;
167 -> 0;
169 -> 167;
169 -> 168;
170 -> 169;
171 -> 40;
173 -> 171;
173 -> 172;
175 -> 173;
175 -> 174;
176 -> 175;
177 -> 160;
177 -> 119;
177 -> 154;
177 -> 139;
177 -> 76;
177 -> 0;
177 -> 40;
177 -> 73;
177 -> 103;
178 -> 103;
179 -> 177;
179 -> 178;
180 -> 177;
180 -> 178;
181 -> 177;
181 -> 178;
182 -> 177;
182 -> 178;
183 -> 179;
183 -> 178;
184 -> 182;
184 -> 178;
185 -> 180;
185 -> 178;
186 -> 181;
186 -> 178;
187 -> 178;
188 -> 178;
189 -> 183;
189 -> 188;
190 -> 184;
190 -> 188;
191 -> 185;
191 -> 188;
192 -> 186;
192 -> 188;
193 -> 187;
193 -> 188;
194 -> 187;
194 -> 188;
195 -> 187;
195 -> 188;
196 -> 187;
196 -> 188;
197 -> 188;
198 -> 190;
198 -> 197;
198 -> 188;
199 -> 196;
199 -> 188;
200 -> 192;
200 -> 188;
201 -> 189;
201 -> 188;
202 -> 190;
202 -> 188;
203 -> 200;
203 -> 188;
204 -> 193;
204 -> 188;
205 -> 194;
205 -> 188;
206 -> 195;
206 -> 188;
207 -> 196;
207 -> 188;
208 -> 188;
209 -> 0;
209 -> 188;
210 -> 190;
210 -> 200;
210 -> 188;
211 -> 188;
212 -> 209;
212 -> 211;
213 -> 210;
213 -> 211;
214 -> 210;
214 -> 211;
215 -> 209;
215 -> 211;
216 -> 207;
216 -> 211;
217 -> 208;
217 -> 211;
218 -> 208;
218 -> 211;
219 -> 212;
219 -> 211;
220 -> 213;
220 -> 211;
221 -> 214;
221 -> 211;
222 -> 215;
222 -> 211;
223 -> 216;
223 -> 211;
224 -> 211;
225 -> 224;
225 -> 219;
225 -> 220;
225 -> 221;
225 -> 222;
225 -> 223;
225 -> 0;
225 -> 200;
225 -> 211;
226 -> 224;
226 -> 211;
227 -> 217;
227 -> 224;
227 -> 211;
228 -> 188;
229 -> 201;
229 -> 228;
230 -> 202;
230 -> 228;
231 -> 203;
231 -> 228;
232 -> 204;
232 -> 228;
233 -> 205;
233 -> 228;
234 -> 206;
234 -> 228;
235 -> 207;
235 -> 228;
236 -> 208;
236 -> 228;
237 -> 208;
237 -> 228;
238 -> 208;
238 -> 228;
239 -> 208;
239 -> 228;
240 -> 208;
240 -> 228;
241 -> 208;
241 -> 228;
242 -> 229;
242 -> 228;
243 -> 230;
243 -> 228;
244 -> 231;
244 -> 228;
245 -> 232;
245 -> 228;
246 -> 233;
246 -> 228;
247 -> 234;
247 -> 228;
248 -> 235;
248 -> 228;
249 -> 236;
249 -> 228;
250 -> 237;
250 -> 228;
251 -> 238;
251 -> 228;
252 -> 238;
252 -> 225;
252 -> 228;
253 -> 252;
253 -> 225;
253 -> 226;
253 -> 227;
253 -> 228;
254 -> 239;
254 -> 228;
255 -> 240;
255 -> 228;
256 -> 228;
257 -> 242;
257 -> 256;
258 -> 243;
258 -> 256;
259 -> 244;
259 -> 256;
260 -> 245;
260 -> 256;
261 -> 246;
261 -> 256;
262 -> 247;
262 -> 256;
263 -> 248;
263 -> 256;
264 -> 249;
264 -> 256;
265 -> 250;
265 -> 256;
266 -> 251;
266 -> 256;
267 -> 253;
267 -> 256;
268 -> 254;
268 -> 256;
269 -> 255;
269 -> 256;
270 -> 241;
270 -> 256;
271 -> 257;
271 -> 256;
272 -> 259;
272 -> 256;
273 -> 267;
273 -> 256;
274 -> 263;
274 -> 256;
275 -> 268;
275 -> 256;
276 -> 269;
276 -> 256;
277 -> 256;
278 -> 277;
278 -> 271;
278 -> 272;
278 -> 273;
278 -> 274;
278 -> 275;
278 -> 276;
278 -> 200;
278 -> 253;
278 -> 256;
279 -> 277;
279 -> 256;
280 -> 277;
280 -> 256;
281 -> 277;
281 -> 256;
282 -> 277;
282 -> 256;
283 -> 277;
283 -> 256;
284 -> 277;
284 -> 256;
285 -> 277;
285 -> 256;
286 -> 277;
286 -> 256;
287 -> 277;
287 -> 256;
288 -> 277;
288 -> 256;
289 -> 277;
289 -> 256;
290 -> 277;
290 -> 256;
291 -> 277;
291 -> 256;
292 -> 277;
292 -> 256;
293 -> 277;
293 -> 256;
294 -> 277;
294 -> 256;
295 -> 277;
295 -> 256;
296 -> 277;
296 -> 256;
297 -> 277;
297 -> 256;
298 -> 277;
298 -> 256;
299 -> 277;
299 -> 256;
300 -> 277;
300 -> 256;
301 -> 277;
301 -> 256;
302 -> 277;
302 -> 256;
303 -> 277;
303 -> 256;
304 -> 277;
304 -> 256;
305 -> 256;
306 -> 305;
306 -> 277;
306 -> 256;
307 -> 277;
307 -> 256;
308 -> 307;
308 -> 278;
308 -> 279;
308 -> 280;
308 -> 281;
308 -> 282;
308 -> 283;
308 -> 284;
308 -> 285;
308 -> 286;
308 -> 287;
308 -> 288;
308 -> 289;
308 -> 290;
308 -> 291;
308 -> 292;
308 -> 293;
308 -> 294;
308 -> 295;
308 -> 296;
308 -> 297;
308 -> 298;
308 -> 299;
308 -> 300;
308 -> 301;
308 -> 302;
308 -> 303;
308 -> 304;
308 -> 306;
308 -> 305;
308 -> 256;
309 -> 308;
309 -> 277;
309 -> 256;
310 -> 258;
310 -> 277;
310 -> 256;
311 -> 277;
311 -> 256;
312 -> 256;
313 -> 256;
314 -> 311;
314 -> 313;
315 -> 312;
315 -> 313;
316 -> 315;
316 -> 313;
317 -> 315;
317 -> 313;
318 -> 315;
318 -> 313;
319 -> 314;
319 -> 315;
319 -> 313;
320 -> 312;
320 -> 277;
320 -> 256;
321 -> 277;
321 -> 308;
321 -> 256;
322 -> 321;
322 -> 308;
322 -> 309;
322 -> 310;
322 -> 320;
322 -> 319;
322 -> 317;
322 -> 318;
322 -> 256;
323 -> 322;
323 -> 277;
323 -> 256;
324 -> 277;
324 -> 322;
324 -> 256;
325 -> 324;
325 -> 322;
325 -> 323;
325 -> 256;
326 -> 325;
326 -> 277;
326 -> 256;
327 -> 277;
327 -> 325;
327 -> 256;
328 -> 327;
328 -> 325;
328 -> 326;
328 -> 256;
329 -> 328;
329 -> 277;
329 -> 256;
330 -> 277;
330 -> 328;
330 -> 256;
331 -> 330;
331 -> 328;
331 -> 329;
331 -> 256;
332 -> 331;
332 -> 277;
332 -> 256;
333 -> 277;
333 -> 256;
334 -> 333;
334 -> 331;
334 -> 332;
334 -> 256;
335 -> 334;
335 -> 277;
335 -> 256;
336 -> 266;
336 -> 334;
336 -> 256;
337 -> 256;
338 -> 336;
338 -> 337;
339 -> 337;
340 -> 338;
340 -> 337;
341 -> 340;
341 -> 334;
341 -> 335;
341 -> 337;
342 -> 0;
342 -> 337;
343 -> 342;
343 -> 339;
343 -> 337;
344 -> 343;
344 -> 256;
345 -> 344;
345 -> 277;
345 -> 256;
346 -> 263;
346 -> 256;
347 -> 346;
348 -> 260;
348 -> 347;
348 -> 346;
349 -> 261;
349 -> 347;
349 -> 346;
350 -> 348;
350 -> 349;
350 -> 346;
351 -> 262;
351 -> 347;
351 -> 346;
352 -> 350;
352 -> 351;
352 -> 346;
353 -> 265;
353 -> 256;
354 -> 277;
354 -> 334;
354 -> 335;
354 -> 345;
354 -> 353;
355 -> 353;
356 -> 277;
356 -> 355;
357 -> 356;
357 -> 354;
357 -> 355;
358 -> 264;
358 -> 353;
359 -> 354;
359 -> 357;
359 -> 358;
359 -> 353;
360 -> 359;
360 -> 277;
360 -> 353;
361 -> 266;
361 -> 277;
361 -> 256;
362 -> 277;
362 -> 359;
362 -> 256;
363 -> 256;
364 -> 277;
364 -> 359;
364 -> 363;
364 -> 256;
365 -> 188;
366 -> 191;
366 -> 365;
366 -> 188;
367 -> 191;
367 -> 366;
368 -> 366;
369 -> 367;
369 -> 368;
370 -> 208;
370 -> 368;
371 -> 368;
372 -> 369;
372 -> 371;
372 -> 368;
373 -> 369;
373 -> 368;
374 -> 373;
374 -> 359;
374 -> 360;
374 -> 361;
374 -> 368;
375 -> 368;
376 -> 370;
376 -> 374;
376 -> 368;
377 -> 375;
377 -> 368;
378 -> 376;
378 -> 374;
378 -> 368;
379 -> 377;
379 -> 378;
379 -> 375;
379 -> 374;
379 -> 368;
380 -> 368;
381 -> 368;
382 -> 369;
382 -> 368;
383 -> 382;
383 -> 379;
383 -> 368;
384 -> 383;
385 -> 383;
386 -> 383;
387 -> 370;
387 -> 386;
387 -> 383;
388 -> 383;
389 -> 375;
389 -> 388;
389 -> 386;
389 -> 383;
390 -> 380;
390 -> 383;
390 -> 389;
391 -> 381;
391 -> 383;
392 -> 375;
392 -> 389;
392 -> 368;
393 -> 370;
393 -> 392;
393 -> 368;
394 -> 369;
394 -> 368;
395 -> 368;
396 -> 394;
396 -> 395;
397 -> 376;
397 -> 395;
398 -> 397;
398 -> 392;
398 -> 395;
399 -> 397;
399 -> 392;
399 -> 395;
400 -> 397;
400 -> 392;
400 -> 395;
401 -> 397;
401 -> 392;
401 -> 395;
402 -> 397;
402 -> 392;
402 -> 395;
403 -> 396;
403 -> 395;
404 -> 397;
404 -> 392;
404 -> 403;
404 -> 395;
405 -> 395;
406 -> 402;
406 -> 405;
406 -> 395;
407 -> 404;
407 -> 406;
408 -> 406;
409 -> 407;
409 -> 408;
410 -> 397;
410 -> 408;
411 -> 409;
411 -> 408;
412 -> 410;
412 -> 404;
412 -> 408;
413 -> 408;
414 -> 408;
415 -> 411;
415 -> 414;
416 -> 412;
416 -> 414;
417 -> 412;
417 -> 414;
418 -> 412;
418 -> 414;
419 -> 412;
419 -> 414;
420 -> 413;
420 -> 414;
421 -> 413;
421 -> 414;
422 -> 414;
422 -> 415;
422 -> 416;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 404;
423 -> 413;
423 -> 406;
424 -> 423;
424 -> 368;
425 -> 370;
425 -> 422;
425 -> 368;
426 -> 390;
426 -> 368;
427 -> 424;
427 -> 368;
428 -> 368;
429 -> 425;
429 -> 428;
430 -> 426;
430 -> 428;
431 -> 427;
431 -> 428;
432 -> 370;
432 -> 428;
433 -> 432;
433 -> 422;
433 -> 428;
434 -> 428;
435 -> 432;
435 -> 434;
436 -> 435;
436 -> 422;
436 -> 434;
437 -> 436;
437 -> 434;
438 -> 437;
438 -> 428;
439 -> 432;
439 -> 422;
439 -> 414;
439 -> 420;
439 -> 428;
440 -> 428;
441 -> 439;
441 -> 440;
442 -> 441;
442 -> 439;
442 -> 440;
443 -> 428;
444 -> 442;
444 -> 443;
445 -> 429;
445 -> 428;
446 -> 430;
446 -> 428;
447 -> 431;
447 -> 428;
448 -> 428;
449 -> 428;
450 -> 433;
450 -> 449;
451 -> 433;
451 -> 449;
452 -> 433;
452 -> 449;
453 -> 438;
453 -> 449;
454 -> 442;
454 -> 449;
455 -> 444;
455 -> 449;
456 -> 444;
456 -> 449;
457 -> 445;
457 -> 449;
458 -> 446;
458 -> 449;
459 -> 447;
459 -> 449;
460 -> 444;
460 -> 449;
461 -> 448;
461 -> 449;
462 -> 448;
462 -> 449;
463 -> 453;
463 -> 449;
464 -> 454;
464 -> 449;
465 -> 455;
465 -> 449;
466 -> 459;
466 -> 444;
466 -> 449;
467 -> 461;
467 -> 449;
468 -> 449;
469 -> 463;
469 -> 468;
470 -> 464;
470 -> 468;
471 -> 465;
471 -> 468;
472 -> 467;
472 -> 468;
473 -> 462;
473 -> 468;
474 -> 472;
474 -> 468;
475 -> 468;
476 -> 475;
476 -> 468;
477 -> 475;
477 -> 468;
478 -> 475;
478 -> 468;
479 -> 475;
479 -> 468;
480 -> 475;
480 -> 468;
481 -> 475;
481 -> 468;
482 -> 475;
482 -> 468;
483 -> 475;
483 -> 468;
484 -> 475;
484 -> 468;
485 -> 475;
485 -> 468;
486 -> 475;
486 -> 468;
487 -> 475;
487 -> 468;
488 -> 475;
488 -> 468;
489 -> 475;
489 -> 468;
490 -> 475;
490 -> 468;
491 -> 475;
491 -> 468;
492 -> 475;
492 -> 468;
493 -> 475;
493 -> 468;
494 -> 475;
494 -> 468;
495 -> 475;
495 -> 468;
496 -> 475;
496 -> 468;
497 -> 475;
497 -> 468;
498 -> 475;
498 -> 468;
499 -> 475;
499 -> 468;
500 -> 475;
500 -> 468;
501 -> 475;
501 -> 468;
502 -> 468;
503 -> 502;
503 -> 475;
503 -> 468;
504 -> 475;
504 -> 468;
505 -> 475;
505 -> 468;
506 -> 468;
507 -> 468;
508 -> 505;
508 -> 507;
509 -> 506;
509 -> 507;
510 -> 509;
510 -> 507;
511 -> 509;
511 -> 507;
512 -> 509;
512 -> 507;
513 -> 508;
513 -> 509;
513 -> 507;
514 -> 506;
514 -> 475;
514 -> 468;
515 -> 475;
515 -> 468;
516 -> 468;
517 -> 466;
517 -> 516;
518 -> 516;
519 -> 517;
519 -> 516;
520 -> 519;
520 -> 466;
521 -> 519;
522 -> 520;
522 -> 521;
523 -> 456;
523 -> 468;
524 -> 523;
525 -> 469;
525 -> 524;
525 -> 523;
526 -> 470;
526 -> 524;
526 -> 523;
527 -> 525;
527 -> 526;
527 -> 523;
528 -> 471;
528 -> 524;
528 -> 523;
529 -> 527;
529 -> 528;
529 -> 523;
530 -> 457;
530 -> 458;
531 -> 475;
531 -> 458;
532 -> 457;
532 -> 531;
532 -> 466;
532 -> 522;
532 -> 458;
533 -> 457;
533 -> 475;
533 -> 458;
534 -> 475;
534 -> 532;
534 -> 468;
535 -> 468;
536 -> 475;
536 -> 532;
536 -> 535;
536 -> 468;
537 -> 448;
537 -> 368;
538 -> 537;
538 -> 366;
539 -> 538;
539 -> 532;
539 -> 188;
540 -> 538;
540 -> 188;
541 -> 177;
541 -> 540;
541 -> 532;
541 -> 533;
541 -> 459;
541 -> 103;
542 -> 541;
542 -> 103;
543 -> 103;
544 -> 542;
544 -> 543;
545 -> 543;
546 -> 544;
546 -> 545;
547 -> 545;
548 -> 546;
548 -> 541;
548 -> 547;
549 -> 547;
550 -> 548;
550 -> 541;
550 -> 549;
550 -> 547;
551 -> 548;
551 -> 541;
551 -> 550;
552 -> 550;
553 -> 551;
553 -> 552;
554 -> 551;
554 -> 552;
555 -> 551;
555 -> 552;
556 -> 551;
556 -> 552;
557 -> 551;
557 -> 552;
558 -> 552;
559 -> 552;
560 -> 552;
561 -> 552;
562 -> 552;
563 -> 0;
563 -> 552;
564 -> 553;
564 -> 552;
565 -> 558;
565 -> 564;
566 -> 564;
567 -> 554;
567 -> 564;
568 -> 555;
568 -> 564;
569 -> 556;
569 -> 564;
570 -> 557;
570 -> 564;
571 -> 559;
571 -> 564;
572 -> 560;
572 -> 564;
573 -> 561;
573 -> 564;
574 -> 562;
574 -> 564;
575 -> 563;
575 -> 564;
576 -> 564;
577 -> 565;
577 -> 576;
578 -> 566;
578 -> 576;
579 -> 567;
579 -> 576;
580 -> 568;
580 -> 576;
581 -> 569;
581 -> 576;
582 -> 570;
582 -> 576;
583 -> 571;
583 -> 576;
584 -> 572;
584 -> 576;
585 -> 573;
585 -> 576;
586 -> 574;
586 -> 576;
587 -> 575;
587 -> 576;
588 -> 578;
588 -> 541;
588 -> 576;
589 -> 588;
589 -> 0;
589 -> 576;
590 -> 578;
590 -> 576;
591 -> 579;
591 -> 576;
592 -> 582;
592 -> 576;
593 -> 586;
593 -> 576;
594 -> 587;
594 -> 576;
595 -> 576;
596 -> 590;
596 -> 595;
597 -> 591;
597 -> 595;
598 -> 592;
598 -> 595;
599 -> 593;
599 -> 595;
600 -> 594;
600 -> 595;
601 -> 596;
601 -> 597;
601 -> 598;
601 -> 595;
602 -> 596;
602 -> 595;
603 -> 601;
603 -> 595;
604 -> 599;
604 -> 602;
604 -> 603;
604 -> 562;
604 -> 601;
604 -> 595;
605 -> 601;
605 -> 595;
606 -> 600;
606 -> 605;
606 -> 0;
606 -> 604;
606 -> 595;
607 -> 576;
608 -> 578;
608 -> 576;
609 -> 577;
609 -> 608;
609 -> 558;
609 -> 606;
609 -> 576;
610 -> 578;
610 -> 576;
611 -> 583;
611 -> 559;
611 -> 576;
612 -> 583;
612 -> 610;
612 -> 611;
612 -> 559;
612 -> 609;
612 -> 576;
613 -> 558;
613 -> 612;
613 -> 552;
614 -> 559;
614 -> 612;
614 -> 552;
615 -> 560;
615 -> 552;
616 -> 561;
616 -> 552;
617 -> 606;
617 -> 552;
618 -> 552;
619 -> 552;
620 -> 613;
620 -> 619;
621 -> 614;
621 -> 619;
622 -> 615;
622 -> 619;
623 -> 616;
623 -> 619;
624 -> 614;
624 -> 619;
625 -> 617;
625 -> 619;
626 -> 618;
626 -> 619;
627 -> 626;
627 -> 619;
628 -> 626;
628 -> 619;
629 -> 626;
629 -> 619;
630 -> 626;
630 -> 619;
631 -> 626;
631 -> 619;
632 -> 620;
632 -> 619;
633 -> 620;
633 -> 613;
633 -> 619;
634 -> 620;
634 -> 619;
635 -> 624;
635 -> 632;
635 -> 619;
636 -> 0;
636 -> 619;
637 -> 620;
637 -> 626;
637 -> 619;
638 -> 621;
638 -> 626;
638 -> 619;
639 -> 622;
639 -> 626;
639 -> 619;
640 -> 623;
640 -> 626;
640 -> 619;
641 -> 624;
641 -> 626;
641 -> 619;
642 -> 625;
642 -> 626;
642 -> 619;
643 -> 618;
643 -> 550;
644 -> 550;
645 -> 551;
645 -> 643;
645 -> 644;
645 -> 638;
645 -> 639;
645 -> 640;
645 -> 641;
645 -> 642;
645 -> 637;
645 -> 635;
645 -> 613;
645 -> 615;
645 -> 616;
645 -> 550;
646 -> 548;
646 -> 645;
646 -> 547;
647 -> 646;
647 -> 545;
648 -> 647;
648 -> 543;
649 -> 648;
649 -> 645;
649 -> 543;
650 -> 543;
651 -> 648;
651 -> 650;
651 -> 645;
651 -> 543;
652 -> 0;
652 -> 543;
653 -> 651;
653 -> 652;
653 -> 543;
654 -> 110;
654 -> 653;
654 -> 103;
655 -> 541;
655 -> 103;
656 -> 655;
656 -> 20;
657 -> 23;
657 -> 20;
658 -> 24;
658 -> 20;
659 -> 25;
659 -> 20;
660 -> 26;
660 -> 20;
661 -> 27;
661 -> 20;
662 -> 28;
662 -> 20;
663 -> 29;
663 -> 20;
664 -> 30;
664 -> 20;
665 -> 31;
665 -> 20;
666 -> 34;
666 -> 20;
667 -> 36;
667 -> 20;
668 -> 20;
669 -> 656;
669 -> 668;
670 -> 657;
670 -> 668;
671 -> 658;
671 -> 668;
672 -> 659;
672 -> 668;
673 -> 660;
673 -> 668;
674 -> 661;
674 -> 668;
675 -> 662;
675 -> 668;
676 -> 663;
676 -> 668;
677 -> 664;
677 -> 668;
678 -> 665;
678 -> 668;
679 -> 666;
679 -> 668;
680 -> 667;
680 -> 668;
681 -> 37;
681 -> 668;
682 -> 669;
682 -> 668;
683 -> 670;
683 -> 668;
684 -> 671;
684 -> 668;
685 -> 672;
685 -> 668;
686 -> 668;
687 -> 685;
687 -> 686;
688 -> 681;
688 -> 686;
689 -> 686;
690 -> 687;
690 -> 689;
690 -> 686;
691 -> 690;
692 -> 673;
692 -> 668;
693 -> 674;
693 -> 668;
694 -> 668;
695 -> 693;
695 -> 694;
696 -> 681;
696 -> 694;
697 -> 694;
698 -> 695;
698 -> 697;
698 -> 694;
699 -> 698;
700 -> 675;
700 -> 668;
701 -> 676;
701 -> 668;
702 -> 677;
702 -> 668;
703 -> 678;
703 -> 668;
704 -> 679;
704 -> 668;
705 -> 680;
705 -> 668;
706 -> 668;
707 -> 682;
707 -> 706;
708 -> 683;
708 -> 706;
709 -> 684;
709 -> 706;
710 -> 691;
710 -> 706;
711 -> 692;
711 -> 706;
712 -> 699;
712 -> 706;
713 -> 700;
713 -> 706;
714 -> 701;
714 -> 706;
715 -> 702;
715 -> 706;
716 -> 703;
716 -> 706;
717 -> 704;
717 -> 706;
718 -> 705;
718 -> 706;
719 -> 681;
719 -> 706;
720 -> 707;
720 -> 706;
721 -> 706;
722 -> 714;
722 -> 721;
722 -> 706;
723 -> 706;
724 -> 710;
724 -> 723;
724 -> 706;
725 -> 706;
726 -> 707;
726 -> 706;
727 -> 709;
727 -> 706;
728 -> 708;
728 -> 706;
729 -> 713;
729 -> 706;
730 -> 714;
730 -> 706;
731 -> 715;
731 -> 706;
732 -> 706;
733 -> 732;
733 -> 716;
733 -> 706;
734 -> 711;
734 -> 706;
735 -> 712;
735 -> 706;
736 -> 717;
736 -> 706;
737 -> 718;
737 -> 706;
738 -> 706;
739 -> 726;
739 -> 738;
740 -> 727;
740 -> 738;
741 -> 728;
741 -> 738;
742 -> 729;
742 -> 738;
743 -> 730;
743 -> 738;
744 -> 731;
744 -> 738;
745 -> 733;
745 -> 738;
746 -> 734;
746 -> 738;
747 -> 735;
747 -> 738;
748 -> 736;
748 -> 738;
749 -> 737;
749 -> 738;
750 -> 719;
750 -> 738;
751 -> 739;
751 -> 738;
752 -> 750;
752 -> 9;
752 -> 738;
753 -> 740;
753 -> 738;
754 -> 738;
755 -> 738;
756 -> 751;
756 -> 755;
757 -> 752;
757 -> 755;
758 -> 753;
758 -> 755;
759 -> 754;
759 -> 755;
760 -> 759;
760 -> 755;
761 -> 759;
761 -> 755;
762 -> 759;
762 -> 755;
763 -> 759;
763 -> 755;
764 -> 759;
764 -> 755;
765 -> 759;
765 -> 755;
766 -> 756;
766 -> 759;
766 -> 755;
767 -> 758;
767 -> 759;
767 -> 755;
768 -> 757;
768 -> 759;
768 -> 755;
769 -> 743;
769 -> 738;
770 -> 744;
770 -> 738;
771 -> 745;
771 -> 738;
772 -> 741;
772 -> 738;
773 -> 748;
773 -> 738;
774 -> 749;
774 -> 738;
775 -> 742;
775 -> 738;
776 -> 738;
777 -> 769;
777 -> 776;
778 -> 770;
778 -> 776;
779 -> 771;
779 -> 776;
780 -> 772;
780 -> 776;
781 -> 773;
781 -> 776;
782 -> 774;
782 -> 776;
783 -> 775;
783 -> 776;
784 -> 754;
784 -> 776;
785 -> 0;
786 -> 785;
787 -> 786;
788 -> 784;
788 -> 767;
788 -> 776;
789 -> 776;
790 -> 788;
790 -> 789;
791 -> 790;
791 -> 789;
792 -> 787;
792 -> 786;
792 -> 791;
792 -> 789;
793 -> 792;
793 -> 776;
794 -> 780;
794 -> 776;
795 -> 781;
795 -> 776;
796 -> 776;
797 -> 793;
797 -> 796;
798 -> 794;
798 -> 796;
799 -> 795;
799 -> 796;
800 -> 784;
800 -> 796;
802 -> 800;
802 -> 766;
802 -> 796;
803 -> 798;
803 -> 796;
804 -> 799;
804 -> 796;
805 -> 796;
806 -> 802;
806 -> 803;
806 -> 804;
806 -> 805;
806 -> 797;
806 -> 653;
806 -> 792;
806 -> 796;
807 -> 806;
807 -> 805;
808 -> 806;
808 -> 805;
809 -> 806;
809 -> 805;
810 -> 806;
810 -> 805;
811 -> 806;
811 -> 805;
812 -> 806;
812 -> 805;
813 -> 807;
813 -> 805;
814 -> 805;
815 -> 813;
815 -> 814;
816 -> 814;
817 -> 815;
817 -> 814;
818 -> 814;
819 -> 817;
819 -> 818;
820 -> 818;
821 -> 819;
821 -> 806;
821 -> 818;
822 -> 818;
823 -> 821;
823 -> 822;
824 -> 818;
825 -> 823;
825 -> 824;
825 -> 818;
826 -> 819;
826 -> 823;
826 -> 818;
827 -> 818;
828 -> 826;
828 -> 827;
829 -> 827;
830 -> 828;
830 -> 829;
831 -> 830;
831 -> 826;
831 -> 829;
832 -> 830;
832 -> 831;
833 -> 831;
834 -> 832;
834 -> 833;
835 -> 833;
836 -> 834;
836 -> 835;
837 -> 835;
838 -> 836;
838 -> 832;
838 -> 837;
839 -> 838;
839 -> 835;
840 -> 839;
840 -> 833;
841 -> 832;
841 -> 833;
842 -> 841;
842 -> 840;
842 -> 833;
843 -> 832;
843 -> 833;
844 -> 833;
845 -> 830;
845 -> 842;
845 -> 831;
846 -> 830;
846 -> 842;
846 -> 829;
847 -> 846;
847 -> 827;
848 -> 820;
848 -> 818;
849 -> 848;
849 -> 814;
850 -> 814;
851 -> 849;
851 -> 850;
851 -> 814;
852 -> 816;
852 -> 814;
853 -> 852;
853 -> 805;
854 -> 0;
854 -> 805;
855 -> 853;
855 -> 805;
856 -> 805;
857 -> 807;
857 -> 856;
857 -> 805;
858 -> 853;
858 -> 805;
859 -> 856;
859 -> 858;
859 -> 857;
859 -> 816;
859 -> 847;
859 -> 805;
860 -> 859;
861 -> 854;
861 -> 859;
862 -> 809;
862 -> 859;
863 -> 810;
863 -> 859;
864 -> 859;
865 -> 860;
865 -> 864;
866 -> 861;
866 -> 864;
867 -> 862;
867 -> 864;
868 -> 863;
868 -> 864;
869 -> 865;
869 -> 847;
869 -> 816;
869 -> 856;
869 -> 857;
869 -> 859;
869 -> 864;
870 -> 869;
871 -> 869;
872 -> 871;
872 -> 847;
872 -> 859;
872 -> 856;
872 -> 857;
872 -> 816;
872 -> 869;
873 -> 871;
873 -> 872;
873 -> 0;
873 -> 869;
874 -> 873;
874 -> 869;
875 -> 872;
875 -> 874;
876 -> 875;
876 -> 874;
877 -> 869;
878 -> 876;
878 -> 877;
878 -> 875;
878 -> 869;
879 -> 866;
879 -> 878;
879 -> 854;
879 -> 0;
879 -> 869;
880 -> 872;
880 -> 869;
881 -> 869;
882 -> 880;
882 -> 881;
883 -> 882;
883 -> 878;
883 -> 0;
883 -> 881;
884 -> 883;
884 -> 881;
885 -> 884;
886 -> 884;
887 -> 873;
887 -> 884;
888 -> 887;
889 -> 876;
889 -> 888;
889 -> 885;
889 -> 887;
890 -> 866;
890 -> 889;
890 -> 879;
890 -> 887;
891 -> 876;
891 -> 887;
892 -> 40;
892 -> 887;
893 -> 885;
893 -> 887;
894 -> 887;
895 -> 891;
895 -> 892;
895 -> 893;
895 -> 894;
895 -> 889;
895 -> 885;
895 -> 887;
896 -> 895;
896 -> 884;
897 -> 867;
897 -> 895;
897 -> 896;
897 -> 884;
898 -> 884;
899 -> 897;
900 -> 866;
900 -> 897;
900 -> 890;
901 -> 897;
902 -> 897;
903 -> 864;
904 -> 807;
904 -> 805;
905 -> 808;
905 -> 805;
906 -> 810;
906 -> 805;
907 -> 811;
907 -> 805;
908 -> 812;
908 -> 805;
909 -> 805;
910 -> 904;
910 -> 909;
911 -> 905;
911 -> 909;
912 -> 906;
912 -> 909;
913 -> 907;
913 -> 909;
914 -> 908;
914 -> 909;
915 -> 909;
916 -> 914;
916 -> 915;
916 -> 909;
917 -> 0;
917 -> 916;
918 -> 909;
919 -> 909;
920 -> 909;
921 -> 917;
921 -> 0;
921 -> 909;
922 -> 921;
922 -> 909;
923 -> 910;
923 -> 897;
923 -> 909;
924 -> 909;
925 -> 923;
925 -> 924;
926 -> 924;
927 -> 925;
927 -> 926;
928 -> 926;
929 -> 928;
930 -> 927;
930 -> 924;
931 -> 909;
932 -> 909;
933 -> 918;
933 -> 909;
934 -> 909;
935 -> 922;
935 -> 909;
936 -> 911;
936 -> 909;
937 -> 917;
937 -> 909;
938 -> 930;
938 -> 909;
939 -> 913;
939 -> 909;
940 -> 933;
940 -> 934;
940 -> 935;
940 -> 936;
940 -> 937;
940 -> 938;
940 -> 939;
940 -> 910;
940 -> 918;
940 -> 930;
940 -> 917;
940 -> 0;
940 -> 909;
941 -> 940;
941 -> 934;
942 -> 941;
942 -> 940;
942 -> 934;
943 -> 940;
943 -> 934;
944 -> 940;
944 -> 934;
945 -> 940;
945 -> 934;
946 -> 940;
946 -> 934;
947 -> 940;
947 -> 934;
948 -> 940;
948 -> 934;
949 -> 940;
949 -> 934;
950 -> 940;
950 -> 934;
951 -> 940;
951 -> 934;
952 -> 951;
952 -> 942;
952 -> 934;
953 -> 943;
953 -> 934;
954 -> 949;
954 -> 934;
955 -> 934;
956 -> 953;
956 -> 955;
957 -> 954;
957 -> 955;
958 -> 951;
958 -> 955;
959 -> 956;
959 -> 955;
960 -> 955;
961 -> 959;
961 -> 960;
962 -> 958;
962 -> 960;
963 -> 960;
964 -> 962;
964 -> 963;
965 -> 963;
966 -> 964;
966 -> 965;
967 -> 965;
968 -> 966;
968 -> 967;
969 -> 968;
969 -> 942;
969 -> 967;
970 -> 968;
970 -> 942;
970 -> 967;
971 -> 970;
971 -> 965;
972 -> 966;
972 -> 942;
972 -> 965;
973 -> 966;
973 -> 972;
973 -> 965;
974 -> 973;
974 -> 963;
975 -> 974;
975 -> 960;
976 -> 975;
976 -> 960;
977 -> 975;
977 -> 972;
977 -> 976;
978 -> 977;
978 -> 955;
979 -> 955;
980 -> 978;
980 -> 979;
980 -> 955;
981 -> 978;
981 -> 980;
982 -> 981;
982 -> 934;
983 -> 934;
984 -> 982;
984 -> 983;
984 -> 934;
985 -> 943;
985 -> 934;
986 -> 982;
986 -> 934;
987 -> 934;
988 -> 985;
988 -> 986;
988 -> 987;
988 -> 951;
988 -> 972;
988 -> 934;
989 -> 988;
989 -> 987;
990 -> 987;
991 -> 989;
991 -> 990;
992 -> 990;
993 -> 991;
993 -> 992;
994 -> 993;
994 -> 990;
995 -> 991;
995 -> 987;
996 -> 987;
997 -> 995;
997 -> 996;
998 -> 995;
998 -> 996;
999 -> 996;
1000 -> 998;
1000 -> 999;
1001 -> 999;
1002 -> 1001;
1003 -> 1000;
1003 -> 996;
1004 -> 998;
1004 -> 996;
1005 -> 996;
1006 -> 1005;
1007 -> 1006;
1008 -> 988;
1008 -> 987;
1009 -> 987;
1010 -> 1008;
1010 -> 1009;
1011 -> 1009;
1012 -> 1010;
1012 -> 1011;
1013 -> 1012;
1013 -> 1003;
1013 -> 1011;
1014 -> 1012;
1014 -> 1003;
1014 -> 1011;
1015 -> 1014;
1015 -> 1009;
1016 -> 1010;
1016 -> 1003;
1016 -> 1009;
1017 -> 1016;
1017 -> 987;
1018 -> 987;
1019 -> 1017;
1019 -> 1018;
1020 -> 988;
1020 -> 987;
1021 -> 987;
1022 -> 988;
1022 -> 1021;
1022 -> 1019;
1022 -> 934;
1023 -> 934;
1024 -> 947;
1024 -> 1023;
1024 -> 934;
1025 -> 1024;
1026 -> 934;
1027 -> 951;
1027 -> 1022;
1027 -> 934;
1028 -> 951;
1028 -> 1022;
1028 -> 1027;
1029 -> 1028;
1029 -> 1027;
1030 -> 951;
1030 -> 1022;
1030 -> 1029;
1031 -> 1027;
1032 -> 1031;
1033 -> 1032;
1033 -> 1031;
1034 -> 1031;
1034 -> 1022;
1034 -> 1030;
1035 -> 1034;
1035 -> 1027;
1036 -> 943;
1036 -> 1027;
1037 -> 1030;
1037 -> 1027;
1038 -> 1022;
1038 -> 1027;
1039 -> 1025;
1039 -> 1027;
1040 -> 1027;
1041 -> 1027;
1042 -> 1035;
1042 -> 1041;
1043 -> 1036;
1043 -> 1041;
1044 -> 1037;
1044 -> 1041;
1045 -> 1038;
1045 -> 1041;
1046 -> 1039;
1046 -> 1041;
1047 -> 1040;
1047 -> 1041;
1048 -> 1042;
1048 -> 1041;
1049 -> 1043;
1049 -> 1041;
1050 -> 1044;
1050 -> 1041;
1051 -> 1045;
1051 -> 1041;
1052 -> 1046;
1052 -> 1041;
1053 -> 0;
1053 -> 1041;
1054 -> 1041;
1055 -> 1048;
1055 -> 1054;
1056 -> 1049;
1056 -> 1054;
1057 -> 1050;
1057 -> 1054;
1058 -> 1051;
1058 -> 1054;
1059 -> 1052;
1059 -> 1054;
1060 -> 1053;
1060 -> 1054;
1061 -> 1047;
1061 -> 1054;
1062 -> 1054;
1063 -> 1055;
1063 -> 1034;
1063 -> 1062;
1063 -> 1054;
1064 -> 1056;
1064 -> 1054;
1065 -> 1057;
1065 -> 1054;
1066 -> 1058;
1066 -> 1054;
1067 -> 1059;
1067 -> 1054;
1068 -> 1054;
1069 -> 1063;
1069 -> 1068;
1070 -> 1064;
1070 -> 1068;
1071 -> 1065;
1071 -> 1068;
1072 -> 1066;
1072 -> 1068;
1073 -> 1067;
1073 -> 1068;
1074 -> 1061;
1074 -> 1068;
1075 -> 1069;
1075 -> 1063;
1075 -> 1068;
1076 -> 1069;
1076 -> 1068;
1077 -> 1072;
1077 -> 1068;
1078 -> 1073;
1078 -> 1068;
1079 -> 1071;
1079 -> 1068;
1080 -> 1070;
1080 -> 1068;
1081 -> 1068;
1082 -> 1081;
1083 -> 1068;
1084 -> 1083;
1084 -> 1075;
1084 -> 1076;
1084 -> 1077;
1084 -> 1078;
1084 -> 1079;
1084 -> 1080;
1084 -> 1081;
1084 -> 1063;
1084 -> 1025;
1084 -> 1082;
1084 -> 1068;
1085 -> 1084;
1085 -> 1083;
1086 -> 1083;
1087 -> 1084;
1087 -> 1086;
1087 -> 1068;
1088 -> 1068;
1089 -> 1088;
1089 -> 1083;
1089 -> 1068;
1090 -> 0;
1090 -> 1068;
1091 -> 1090;
1091 -> 0;
1091 -> 1068;
1092 -> 1091;
1092 -> 1083;
1092 -> 1068;
1093 -> 1068;
1094 -> 1093;
1094 -> 1083;
1094 -> 1068;
1095 -> 1083;
1095 -> 1068;
1096 -> 1083;
1096 -> 1068;
1097 -> 1083;
1097 -> 1068;
1098 -> 1083;
1098 -> 1068;
1099 -> 1083;
1099 -> 1068;
1100 -> 1069;
1100 -> 1087;
1100 -> 1068;
1101 -> 1100;
1101 -> 0;
1101 -> 1068;
1102 -> 1101;
1102 -> 1068;
1103 -> 1102;
1103 -> 1083;
1103 -> 1068;
1104 -> 1083;
1104 -> 1087;
1104 -> 1089;
1104 -> 1068;
1105 -> 1069;
1105 -> 1068;
1106 -> 1083;
1106 -> 1068;
1107 -> 1104;
1107 -> 1105;
1107 -> 1106;
1107 -> 1087;
1107 -> 1089;
1107 -> 1092;
1107 -> 1094;
1107 -> 1095;
1107 -> 1096;
1107 -> 1103;
1107 -> 1097;
1107 -> 1098;
1107 -> 1099;
1107 -> 1088;
1107 -> 1091;
1107 -> 1093;
1107 -> 1068;
1108 -> 1069;
1108 -> 1107;
1108 -> 1068;
1109 -> 1061;
1109 -> 1054;
1110 -> 1061;
1110 -> 1054;
1111 -> 1061;
1111 -> 1054;
1112 -> 1061;
1112 -> 1054;
1113 -> 1061;
1113 -> 1054;
1114 -> 1061;
1114 -> 1054;
1115 -> 1061;
1115 -> 1054;
1116 -> 1061;
1116 -> 1054;
1117 -> 1061;
1117 -> 1054;
1118 -> 1061;
1118 -> 1054;
1119 -> 1055;
1119 -> 1054;
1120 -> 1055;
1120 -> 1061;
1120 -> 1054;
1121 -> 1060;
1121 -> 1054;
1122 -> 1121;
1122 -> 1061;
1122 -> 1054;
1123 -> 1054;
1124 -> 1056;
1124 -> 1107;
1124 -> 1123;
1124 -> 1054;
1125 -> 1124;
1125 -> 1054;
1126 -> 1055;
1126 -> 1107;
1126 -> 1125;
1127 -> 1055;
1127 -> 1107;
1127 -> 1126;
1127 -> 1061;
1127 -> 1054;
1128 -> 1061;
1128 -> 1107;
1128 -> 1054;
1129 -> 1055;
1129 -> 1054;
1130 -> 1061;
1130 -> 1054;
1131 -> 1128;
1131 -> 1129;
1131 -> 1130;
1131 -> 1107;
1131 -> 1109;
1131 -> 1120;
1131 -> 1110;
1131 -> 1111;
1131 -> 1112;
1131 -> 1113;
1131 -> 1114;
1131 -> 1115;
1131 -> 1116;
1131 -> 1117;
1131 -> 1118;
1131 -> 1127;
1131 -> 1122;
1131 -> 1126;
1131 -> 1121;
1131 -> 1054;
1132 -> 934;
1133 -> 944;
1133 -> 1132;
1133 -> 934;
1134 -> 945;
1134 -> 1040;
1134 -> 934;
1135 -> 934;
1136 -> 946;
1136 -> 1135;
1136 -> 934;
1137 -> 946;
1137 -> 1040;
1137 -> 1136;
1138 -> 934;
1139 -> 948;
1139 -> 1138;
1139 -> 934;
1140 -> 948;
1140 -> 1131;
1140 -> 1139;
1141 -> 1040;
1141 -> 1140;
1141 -> 1131;
1141 -> 1134;
1141 -> 1137;
1141 -> 1139;
1142 -> 1040;
1142 -> 948;
1142 -> 1139;
1143 -> 1040;
1143 -> 934;
1144 -> 940;
1144 -> 1143;
1144 -> 1141;
1144 -> 1142;
1144 -> 909;
1145 -> 940;
1145 -> 934;
1146 -> 940;
1146 -> 934;
1147 -> 940;
1147 -> 934;
1148 -> 940;
1148 -> 934;
1149 -> 940;
1149 -> 934;
1150 -> 940;
1150 -> 934;
1151 -> 940;
1151 -> 934;
1152 -> 940;
1152 -> 934;
1153 -> 934;
1154 -> 1147;
1154 -> 934;
1155 -> 1149;
1155 -> 934;
1156 -> 0;
1156 -> 934;
1157 -> 934;
1158 -> 1151;
1158 -> 934;
1159 -> 934;
1160 -> 1156;
1160 -> 1159;
1161 -> 1157;
1161 -> 1159;
1162 -> 1158;
1162 -> 1159;
1163 -> 1152;
1163 -> 1159;
1164 -> 1159;
1165 -> 1160;
1165 -> 1159;
1166 -> 1161;
1166 -> 1159;
1167 -> 1164;
1167 -> 1159;
1168 -> 1162;
1168 -> 1159;
1169 -> 1159;
1170 -> 1165;
1170 -> 1169;
1171 -> 1166;
1171 -> 1169;
1172 -> 1167;
1172 -> 1169;
1173 -> 1168;
1173 -> 1169;
1174 -> 1163;
1174 -> 1169;
1175 -> 1169;
1176 -> 1170;
1176 -> 0;
1176 -> 1169;
1177 -> 1176;
1177 -> 1171;
1177 -> 1169;
1178 -> 1177;
1179 -> 1174;
1179 -> 1178;
1180 -> 1178;
1181 -> 1179;
1181 -> 1144;
1181 -> 1180;
1182 -> 1180;
1183 -> 1181;
1183 -> 1177;
1184 -> 1177;
1185 -> 1174;
1185 -> 1184;
1186 -> 1185;
1186 -> 1144;
1186 -> 1184;
1187 -> 1186;
1187 -> 1177;
1188 -> 1187;
1189 -> 1183;
1189 -> 1144;
1189 -> 1187;
1190 -> 1173;
1190 -> 1187;
1191 -> 1188;
1191 -> 1189;
1191 -> 1190;
1191 -> 1144;
1191 -> 1187;
1192 -> 1191;
1192 -> 1188;
1193 -> 1191;
1193 -> 1188;
1194 -> 1191;
1194 -> 1188;
1195 -> 1191;
1195 -> 1188;
1196 -> 1188;
1197 -> 1196;
1197 -> 1188;
1198 -> 1188;
1199 -> 1193;
1199 -> 1198;
1200 -> 1199;
1200 -> 1188;
1201 -> 1194;
1201 -> 1188;
1202 -> 1196;
1202 -> 1188;
1203 -> 1200;
1203 -> 1191;
1203 -> 1201;
1203 -> 1202;
1203 -> 1197;
1203 -> 1188;
1204 -> 1177;
1205 -> 1183;
1205 -> 1177;
1206 -> 1173;
1206 -> 1144;
1206 -> 1203;
1206 -> 1205;
1207 -> 1205;
1207 -> 1144;
1207 -> 1206;
1208 -> 1170;
1208 -> 0;
1208 -> 1169;
1209 -> 1175;
1209 -> 1208;
1210 -> 1209;
1210 -> 1174;
1210 -> 1175;
1210 -> 1206;
1210 -> 1208;
1211 -> 1208;
1212 -> 1208;
1213 -> 1174;
1213 -> 1212;
1214 -> 1213;
1214 -> 1210;
1214 -> 1212;
1215 -> 1214;
1215 -> 1208;
1216 -> 1208;
1217 -> 1174;
1217 -> 1216;
1218 -> 1217;
1218 -> 1215;
1218 -> 1216;
1219 -> 1218;
1219 -> 1208;
1220 -> 1173;
1220 -> 1215;
1220 -> 1208;
1221 -> 1208;
1222 -> 1174;
1222 -> 1221;
1223 -> 1222;
1223 -> 1220;
1223 -> 1221;
1224 -> 1222;
1224 -> 1220;
1224 -> 1221;
1225 -> 1224;
1225 -> 1208;
1226 -> 1173;
1226 -> 1225;
1226 -> 1208;
1227 -> 1173;
1227 -> 1208;
1228 -> 1208;
1229 -> 1208;
1230 -> 1228;
1230 -> 1229;
1231 -> 1228;
1231 -> 1229;
1232 -> 1228;
1232 -> 1229;
1233 -> 1227;
1233 -> 1229;
1234 -> 1174;
1234 -> 1229;
1235 -> 1229;
1236 -> 1234;
1236 -> 1235;
1237 -> 1236;
1237 -> 1226;
1237 -> 1235;
1238 -> 1235;
1239 -> 1237;
1239 -> 1238;
1240 -> 1239;
1240 -> 1238;
1241 -> 1240;
1241 -> 1237;
1241 -> 1238;
1242 -> 1238;
1243 -> 1241;
1243 -> 1242;
1244 -> 1243;
1244 -> 1241;
1244 -> 1242;
1245 -> 1244;
1245 -> 1242;
1246 -> 1245;
1246 -> 1229;
1247 -> 1233;
1247 -> 1229;
1248 -> 1246;
1248 -> 1247;
1248 -> 1245;
1248 -> 1226;
1248 -> 1229;
1249 -> 1229;
1250 -> 1229;
1251 -> 1230;
1251 -> 1250;
1251 -> 1229;
1252 -> 1229;
1253 -> 1234;
1253 -> 1252;
1254 -> 1252;
1255 -> 1253;
1255 -> 1254;
1256 -> 1254;
1257 -> 1255;
1257 -> 1256;
1258 -> 1257;
1258 -> 1248;
1258 -> 1256;
1259 -> 1257;
1259 -> 1248;
1259 -> 1256;
1260 -> 1259;
1260 -> 1254;
1261 -> 1255;
1261 -> 1248;
1261 -> 1254;
1262 -> 1261;
1262 -> 1229;
1263 -> 1249;
1263 -> 1229;
1264 -> 1233;
1264 -> 1229;
1265 -> 1263;
1265 -> 1264;
1265 -> 1262;
1265 -> 1226;
1265 -> 1261;
1265 -> 1229;
1266 -> 1229;
1267 -> 1266;
1268 -> 1267;
1269 -> 1265;
1269 -> 1268;
1270 -> 1269;
1270 -> 1267;
1271 -> 1266;
1272 -> 1271;
1273 -> 1272;
1274 -> 1266;
1275 -> 1274;
1276 -> 1275;
1277 -> 1265;
1277 -> 1266;
1278 -> 1277;
1278 -> 1265;
1278 -> 1266;
1279 -> 1266;
1280 -> 1277;
1280 -> 1265;
1280 -> 1279;
1280 -> 1266;
1281 -> 1280;
1282 -> 1277;
1282 -> 1265;
1282 -> 1280;
1283 -> 1281;
1283 -> 1280;
1284 -> 1280;
1285 -> 1277;
1285 -> 1283;
1285 -> 1266;
1286 -> 1265;
1286 -> 1266;
1287 -> 1265;
1287 -> 1266;
1288 -> 1287;
1288 -> 1285;
1288 -> 1266;
1289 -> 1265;
1289 -> 1266;
1290 -> 1265;
1290 -> 1266;
1291 -> 1266;
1292 -> 1290;
1292 -> 1291;
1293 -> 1292;
1293 -> 1285;
1293 -> 1291;
1294 -> 1292;
1294 -> 1285;
1294 -> 1291;
1295 -> 1294;
1295 -> 1266;
1296 -> 1266;
1297 -> 1296;
1297 -> 1295;
1297 -> 1285;
1297 -> 1266;
1298 -> 1296;
1298 -> 1297;
1299 -> 1295;
1299 -> 1298;
1299 -> 1296;
1300 -> 1289;
1300 -> 1299;
1300 -> 1298;
1301 -> 1265;
1301 -> 1266;
1302 -> 1301;
1302 -> 1300;
1302 -> 1266;
1303 -> 1269;
1303 -> 1302;
1303 -> 1268;
1304 -> 1269;
1304 -> 1302;
1304 -> 1268;
1305 -> 1304;
1305 -> 1267;
1306 -> 1265;
1306 -> 1266;
1307 -> 1265;
1307 -> 1266;
1308 -> 1306;
1308 -> 0;
1308 -> 1266;
1309 -> 1266;
1310 -> 1306;
1310 -> 1266;
1311 -> 1307;
1311 -> 1310;
1311 -> 1302;
1311 -> 1266;
1312 -> 1311;
1313 -> 1312;
1314 -> 1313;
1314 -> 1312;
1315 -> 1312;
1315 -> 1311;
1316 -> 1306;
1316 -> 1311;
1317 -> 1315;
1317 -> 1306;
1317 -> 1266;
1318 -> 1315;
1318 -> 1266;
1319 -> 1265;
1319 -> 1266;
1320 -> 1265;
1320 -> 1266;
1321 -> 1319;
1321 -> 1318;
1321 -> 1266;
1322 -> 1266;
1323 -> 1266;
1324 -> 1321;
1324 -> 1323;
1325 -> 1322;
1325 -> 1323;
1326 -> 1320;
1326 -> 1323;
1327 -> 1325;
1327 -> 1323;
1328 -> 1324;
1328 -> 1323;
1329 -> 1323;
1330 -> 1326;
1330 -> 1318;
1330 -> 1323;
1331 -> 1323;
1332 -> 1328;
1332 -> 1331;
1333 -> 1329;
1333 -> 1331;
1334 -> 1330;
1334 -> 1331;
1335 -> 1326;
1335 -> 1331;
1336 -> 1334;
1336 -> 1331;
1337 -> 1333;
1337 -> 1331;
1338 -> 1335;
1338 -> 1318;
1338 -> 1337;
1339 -> 1335;
1339 -> 1318;
1339 -> 1338;
1339 -> 1331;
1340 -> 1336;
1340 -> 1339;
1340 -> 1318;
1340 -> 1338;
1340 -> 1331;
1341 -> 1332;
1341 -> 1331;
1342 -> 1331;
1343 -> 1341;
1343 -> 1342;
1344 -> 1335;
1344 -> 1342;
1345 -> 1343;
1345 -> 1342;
1346 -> 1342;
1347 -> 1345;
1347 -> 1346;
1348 -> 1344;
1348 -> 1346;
1349 -> 1346;
1350 -> 1347;
1350 -> 1349;
1350 -> 1346;
1351 -> 1346;
1352 -> 1348;
1352 -> 1340;
1352 -> 1351;
1353 -> 1351;
1354 -> 1352;
1354 -> 1346;
1355 -> 1347;
1355 -> 1346;
1356 -> 1354;
1356 -> 1340;
1356 -> 1355;
1356 -> 1346;
1357 -> 1342;
1358 -> 1344;
1358 -> 1356;
1358 -> 1357;
1359 -> 1357;
1360 -> 1358;
1360 -> 1342;
1361 -> 1340;
1361 -> 1331;
1362 -> 1331;
1363 -> 1361;
1363 -> 1362;
1363 -> 1331;
1364 -> 1363;
1365 -> 1364;
1365 -> 1360;
1366 -> 1365;
1366 -> 1363;
1367 -> 1340;
1367 -> 1363;
1368 -> 1366;
1368 -> 1363;
1369 -> 1363;
1370 -> 1331;
1371 -> 1368;
1371 -> 1360;
1371 -> 1331;
1372 -> 1331;
1373 -> 1371;
1373 -> 1372;
1373 -> 1331;
1374 -> 1332;
1374 -> 1331;
1375 -> 1333;
1375 -> 1331;
1376 -> 1368;
1376 -> 1360;
1376 -> 1331;
1377 -> 1331;
1378 -> 1374;
1378 -> 1377;
1379 -> 1375;
1379 -> 1377;
1380 -> 1376;
1380 -> 1377;
1381 -> 1335;
1381 -> 1377;
1382 -> 1381;
1382 -> 1377;
1383 -> 1378;
1383 -> 1377;
1384 -> 1379;
1384 -> 1377;
1385 -> 1382;
1385 -> 1383;
1385 -> 1384;
1385 -> 1368;
1385 -> 1377;
1386 -> 1377;
1387 -> 1385;
1387 -> 1377;
1388 -> 1377;
1389 -> 1388;
1390 -> 1380;
1390 -> 1388;
1391 -> 1388;
1392 -> 1390;
1392 -> 1391;
1392 -> 1388;
1393 -> 1380;
1393 -> 1388;
1394 -> 1387;
1394 -> 1388;
1395 -> 1390;
1395 -> 1388;
1396 -> 1393;
1396 -> 1394;
1396 -> 1395;
1396 -> 1387;
1396 -> 1388;
1397 -> 1385;
1397 -> 1396;
1398 -> 1319;
1398 -> 1266;
1399 -> 1397;
1399 -> 1322;
1400 -> 1399;
1400 -> 1397;
1400 -> 1322;
1401 -> 1400;
1402 -> 1401;
1402 -> 1400;
1403 -> 1400;
1404 -> 1402;
1404 -> 1403;
1405 -> 1399;
1405 -> 1403;
1406 -> 1403;
1407 -> 1405;
1407 -> 1406;
1408 -> 1406;
1409 -> 1407;
1409 -> 1408;
1410 -> 1409;
1410 -> 1406;
1411 -> 1407;
1411 -> 1403;
1412 -> 1404;
1412 -> 1411;
1412 -> 1401;
1412 -> 1407;
1412 -> 1403;
1413 -> 1403;
1414 -> 1405;
1414 -> 1413;
1415 -> 1414;
1415 -> 1412;
1415 -> 1413;
1416 -> 1414;
1416 -> 1412;
1416 -> 1413;
1417 -> 1416;
1417 -> 1403;
1418 -> 1403;
1419 -> 1418;
1419 -> 1417;
1419 -> 1412;
1419 -> 1403;
1420 -> 1418;
1420 -> 1419;
1421 -> 1417;
1421 -> 1420;
1421 -> 1418;
1422 -> 1400;
1423 -> 1399;
1423 -> 1400;
1424 -> 1423;
1424 -> 1421;
1424 -> 1400;
1425 -> 1400;
1426 -> 1401;
1426 -> 1424;
1426 -> 1400;
1427 -> 1399;
1427 -> 1426;
1427 -> 1400;
1428 -> 1424;
1428 -> 1400;
1429 -> 1400;
1430 -> 1399;
1430 -> 1427;
1430 -> 1322;
1431 -> 1397;
1431 -> 1322;
1432 -> 1322;
1433 -> 1431;
1433 -> 1432;
1434 -> 1432;
1435 -> 1434;
1436 -> 1433;
1436 -> 1435;
1437 -> 1436;
1437 -> 1430;
1437 -> 1435;
1438 -> 1436;
1438 -> 1430;
1438 -> 1435;
1439 -> 1438;
1439 -> 1434;
1440 -> 1433;
1440 -> 1430;
1440 -> 1434;
1441 -> 1440;
1441 -> 1322;
1442 -> 1322;
1443 -> 1265;
1443 -> 1266;
1444 -> 1265;
1444 -> 1266;
1445 -> 1443;
1445 -> 1441;
1445 -> 1266;
1446 -> 1266;
1447 -> 1445;
1447 -> 1446;
1448 -> 1445;
1448 -> 1446;
1449 -> 1444;
1449 -> 1446;
1450 -> 1446;
1451 -> 1449;
1451 -> 1450;
1452 -> 1450;
1453 -> 1451;
1453 -> 1452;
1453 -> 1441;
1453 -> 1450;
1454 -> 1453;
1454 -> 1450;
1455 -> 1454;
1455 -> 1446;
1456 -> 1448;
1456 -> 1446;
1457 -> 1447;
1457 -> 1456;
1457 -> 1453;
1457 -> 1441;
1457 -> 1446;
1458 -> 1446;
1459 -> 1449;
1459 -> 1458;
1460 -> 1459;
1460 -> 1457;
1460 -> 1458;
1461 -> 1446;
1462 -> 1460;
1462 -> 1455;
1462 -> 1446;
1463 -> 1265;
1463 -> 1266;
1464 -> 1265;
1464 -> 1266;
1465 -> 1265;
1465 -> 1266;
1466 -> 1464;
1466 -> 1266;
1467 -> 1463;
1467 -> 1266;
1468 -> 1266;
1469 -> 1266;
1470 -> 1467;
1470 -> 1469;
1471 -> 1468;
1471 -> 1469;
1472 -> 1465;
1472 -> 1469;
1473 -> 1471;
1473 -> 1469;
1474 -> 1470;
1474 -> 1469;
1475 -> 1469;
1476 -> 1474;
1476 -> 1475;
1477 -> 1472;
1477 -> 1475;
1478 -> 1476;
1478 -> 1475;
1479 -> 1475;
1480 -> 1478;
1480 -> 1479;
1481 -> 1477;
1481 -> 1479;
1482 -> 1479;
1483 -> 1480;
1483 -> 1482;
1483 -> 1479;
1484 -> 1479;
1485 -> 1484;
1486 -> 1480;
1486 -> 1479;
1487 -> 1475;
1488 -> 1487;
1489 -> 1469;
1490 -> 1469;
1491 -> 1462;
1491 -> 1469;
1492 -> 1469;
1493 -> 1491;
1493 -> 1492;
1493 -> 1469;
1494 -> 1490;
1494 -> 1469;
1495 -> 1491;
1495 -> 1494;
1495 -> 1462;
1495 -> 1469;
1496 -> 1470;
1496 -> 1469;
1497 -> 1471;
1497 -> 1469;
1498 -> 1469;
1499 -> 1496;
1499 -> 1498;
1500 -> 1497;
1500 -> 1498;
1501 -> 1472;
1501 -> 1498;
1502 -> 1501;
1502 -> 1498;
1503 -> 1499;
1503 -> 1498;
1504 -> 1500;
1504 -> 1498;
1505 -> 1498;
1506 -> 1498;
1507 -> 1506;
1508 -> 1506;
1509 -> 1495;
1509 -> 1508;
1509 -> 1506;
1510 -> 1507;
1510 -> 1506;
1511 -> 1495;
1511 -> 1510;
1511 -> 1506;
1512 -> 1265;
1512 -> 1266;
1513 -> 1265;
1513 -> 1266;
1514 -> 1266;
1515 -> 1513;
1515 -> 1514;
1516 -> 1514;
1517 -> 1516;
1518 -> 1515;
1518 -> 1517;
1519 -> 1518;
1519 -> 1511;
1519 -> 1517;
1520 -> 1518;
1520 -> 1511;
1520 -> 1517;
1521 -> 1520;
1521 -> 1516;
1522 -> 1266;
1523 -> 1511;
1524 -> 1523;
1524 -> 1511;
1525 -> 1511;
1525 -> 1306;
1525 -> 1266;
1526 -> 1265;
1526 -> 1266;
1527 -> 1265;
1527 -> 1266;
1528 -> 1266;
1529 -> 1526;
1529 -> 1528;
1530 -> 1528;
1531 -> 1529;
1531 -> 1511;
1531 -> 1530;
1532 -> 1530;
1533 -> 1531;
1533 -> 1266;
1534 -> 1527;
1534 -> 1266;
1535 -> 1533;
1535 -> 1534;
1535 -> 1266;
1536 -> 1266;
1537 -> 1535;
1538 -> 1537;
1538 -> 1535;
1539 -> 1535;
1539 -> 1306;
1539 -> 1266;
1540 -> 1265;
1540 -> 1266;
1541 -> 1265;
1541 -> 1266;
1542 -> 1540;
1542 -> 1266;
1543 -> 1542;
1543 -> 1535;
1543 -> 1266;
1544 -> 1540;
1544 -> 1543;
1544 -> 1266;
1545 -> 1266;
1546 -> 1541;
1546 -> 1545;
1547 -> 1545;
1548 -> 1546;
1548 -> 1547;
1549 -> 1547;
1550 -> 1549;
1551 -> 1548;
1551 -> 1550;
1552 -> 1551;
1552 -> 1543;
1552 -> 1550;
1553 -> 1551;
1553 -> 1543;
1553 -> 1550;
1554 -> 1553;
1554 -> 1549;
1555 -> 1548;
1555 -> 1543;
1555 -> 1549;
1556 -> 1545;
1557 -> 1555;
1557 -> 1266;
1558 -> 1266;
1559 -> 1541;
1559 -> 1558;
1560 -> 1559;
1560 -> 1555;
1560 -> 1558;
1561 -> 1560;
1562 -> 1561;
1562 -> 1560;
1563 -> 1560;
1564 -> 1562;
1564 -> 1563;
1564 -> 1560;
1565 -> 1564;
1565 -> 1560;
1566 -> 1565;
1566 -> 1559;
1566 -> 1560;
1567 -> 1559;
1567 -> 1564;
1567 -> 1566;
1567 -> 1558;
1568 -> 1567;
1568 -> 1266;
1569 -> 1568;
1570 -> 1540;
1570 -> 1569;
1570 -> 1266;
1571 -> 1551;
1571 -> 1569;
1571 -> 1550;
1572 -> 1551;
1572 -> 1569;
1572 -> 1550;
1573 -> 1572;
1573 -> 1549;
1574 -> 1569;
1574 -> 1266;
1575 -> 1287;
1575 -> 1569;
1575 -> 1266;
1576 -> 1277;
1576 -> 1569;
1576 -> 1266;
1577 -> 1230;
1577 -> 1229;
1578 -> 1577;
1579 -> 1578;
1579 -> 1234;
1579 -> 1577;
1580 -> 1577;
1581 -> 1580;
1581 -> 1234;
1581 -> 1577;
1582 -> 1234;
1582 -> 1569;
1582 -> 1579;
1582 -> 1581;
1582 -> 1229;
1583 -> 1229;
1584 -> 1232;
1584 -> 1583;
1584 -> 1229;
1585 -> 1230;
1585 -> 1229;
1586 -> 1231;
1586 -> 1229;
1587 -> 1233;
1587 -> 1229;
1588 -> 1229;
1589 -> 1585;
1589 -> 1588;
1590 -> 1586;
1590 -> 1588;
1591 -> 1587;
1591 -> 1588;
1592 -> 1234;
1592 -> 1588;
1593 -> 1588;
1594 -> 1589;
1594 -> 1593;
1594 -> 1588;
1595 -> 1592;
1595 -> 1582;
1595 -> 1588;
1596 -> 1595;
1597 -> 1592;
1597 -> 1595;
1598 -> 1596;
1598 -> 1595;
1599 -> 1591;
1599 -> 1595;
1600 -> 1595;
1601 -> 1595;
1602 -> 1597;
1602 -> 1601;
1603 -> 1598;
1603 -> 1601;
1604 -> 1599;
1604 -> 1601;
1605 -> 1600;
1605 -> 1601;
1606 -> 1600;
1606 -> 1601;
1607 -> 1601;
1608 -> 1602;
1608 -> 1601;
1609 -> 1605;
1609 -> 1601;
1610 -> 1606;
1610 -> 1601;
1611 -> 1607;
1611 -> 1601;
1612 -> 1604;
1612 -> 1601;
1613 -> 1601;
1614 -> 1601;
1615 -> 1608;
1615 -> 1614;
1616 -> 1609;
1616 -> 1614;
1617 -> 1610;
1617 -> 1614;
1618 -> 1611;
1618 -> 1614;
1619 -> 1612;
1619 -> 1614;
1620 -> 1613;
1620 -> 1614;
1621 -> 1614;
1622 -> 1621;
1622 -> 1614;
1623 -> 1621;
1623 -> 1614;
1624 -> 1621;
1624 -> 1614;
1625 -> 1621;
1625 -> 1614;
1626 -> 1621;
1626 -> 1614;
1627 -> 1621;
1627 -> 1614;
1628 -> 1615;
1628 -> 1621;
1628 -> 1614;
1629 -> 1616;
1629 -> 1621;
1629 -> 1614;
1630 -> 1617;
1630 -> 1621;
1630 -> 1614;
1631 -> 1618;
1631 -> 1621;
1631 -> 1614;
1632 -> 1619;
1632 -> 1621;
1632 -> 1614;
1633 -> 0;
1633 -> 1614;
1634 -> 1633;
1634 -> 1621;
1634 -> 1614;
1635 -> 1614;
1636 -> 1621;
1636 -> 1635;
1637 -> 1635;
1638 -> 1636;
1638 -> 1621;
1638 -> 1623;
1638 -> 1629;
1638 -> 1637;
1638 -> 1635;
1639 -> 1635;
1640 -> 1636;
1640 -> 1621;
1640 -> 1622;
1640 -> 1628;
1640 -> 1639;
1641 -> 1640;
1641 -> 1621;
1641 -> 1633;
1641 -> 1639;
1642 -> 1638;
1642 -> 1641;
1642 -> 1621;
1642 -> 1633;
1642 -> 1635;
1643 -> 1642;
1643 -> 1614;
1644 -> 1643;
1645 -> 1644;
1645 -> 1621;
1645 -> 1643;
1646 -> 1601;
1647 -> 1602;
1647 -> 1646;
1648 -> 1646;
1649 -> 1647;
1649 -> 1648;
1650 -> 1649;
1650 -> 1633;
1650 -> 1648;
1651 -> 1649;
1651 -> 1633;
1651 -> 1648;
1652 -> 1651;
1652 -> 1646;
1653 -> 1647;
1653 -> 1633;
1653 -> 1646;
1654 -> 1653;
1654 -> 1601;
1655 -> 1654;
1655 -> 1613;
1655 -> 1653;
1655 -> 1621;
1655 -> 1622;
1655 -> 1628;
1655 -> 1623;
1655 -> 1629;
1655 -> 1624;
1655 -> 1630;
1655 -> 1625;
1655 -> 1631;
1655 -> 1626;
1655 -> 1634;
1655 -> 1627;
1655 -> 1645;
1655 -> 1632;
1655 -> 1600;
1655 -> 1607;
1655 -> 1226;
1655 -> 1644;
1655 -> 1601;
1656 -> 1601;
1657 -> 1655;
1657 -> 1656;
1658 -> 1655;
1658 -> 1656;
1659 -> 1658;
1659 -> 1655;
1659 -> 1656;
1660 -> 1657;
1660 -> 1656;
1661 -> 1657;
1661 -> 1656;
1662 -> 1656;
1663 -> 1661;
1663 -> 1662;
1664 -> 1658;
1664 -> 1662;
1665 -> 1663;
1665 -> 1659;
1665 -> 0;
1665 -> 1662;
1666 -> 1662;
1667 -> 1663;
1667 -> 1659;
1667 -> 0;
1667 -> 1662;
1668 -> 1663;
1668 -> 1659;
1668 -> 0;
1668 -> 1667;
1669 -> 1663;
1669 -> 1659;
1669 -> 0;
1669 -> 1662;
1670 -> 1663;
1670 -> 1659;
1670 -> 0;
1670 -> 1662;
1671 -> 1663;
1671 -> 1659;
1671 -> 0;
1671 -> 1662;
1672 -> 1663;
1672 -> 1659;
1672 -> 0;
1672 -> 1662;
1673 -> 1663;
1673 -> 1659;
1673 -> 0;
1673 -> 1662;
1674 -> 1662;
1675 -> 1663;
1675 -> 1662;
1676 -> 1674;
1676 -> 1662;
1677 -> 1664;
1677 -> 1659;
1677 -> 1675;
1677 -> 1676;
1677 -> 1662;
1678 -> 1662;
1679 -> 1663;
1679 -> 1662;
1680 -> 1678;
1680 -> 1662;
1681 -> 1662;
1682 -> 1679;
1682 -> 1681;
1683 -> 1680;
1683 -> 1681;
1684 -> 1664;
1684 -> 1681;
1685 -> 1681;
1686 -> 1682;
1686 -> 1677;
1686 -> 1681;
1687 -> 1681;
1688 -> 1687;
1688 -> 1662;
1689 -> 1688;
1689 -> 1662;
1690 -> 1663;
1690 -> 1686;
1690 -> 0;
1690 -> 1689;
1691 -> 0;
1691 -> 1690;
1692 -> 1663;
1692 -> 1686;
1692 -> 0;
1692 -> 1662;
1693 -> 1692;
1693 -> 1662;
1694 -> 1691;
1694 -> 1693;
1695 -> 1694;
1695 -> 0;
1695 -> 1656;
1696 -> 1694;
1696 -> 1656;
1697 -> 1656;
1698 -> 1696;
1698 -> 1697;
1699 -> 1698;
1699 -> 1697;
1700 -> 1699;
1701 -> 1656;
1702 -> 1701;
1702 -> 1657;
1702 -> 1694;
1702 -> 1656;
1703 -> 1657;
1703 -> 1694;
1703 -> 1701;
1703 -> 1702;
1704 -> 1702;
1705 -> 1703;
1705 -> 1702;
1706 -> 1704;
1706 -> 1702;
1707 -> 1702;
1708 -> 1705;
1708 -> 1707;
1709 -> 1706;
1709 -> 1707;
1710 -> 1658;
1710 -> 1707;
1711 -> 1707;
1712 -> 1707;
1712 -> 1702;
1713 -> 1702;
1714 -> 1713;
1714 -> 1702;
1715 -> 1711;
1715 -> 1714;
1716 -> 1702;
1717 -> 1715;
1717 -> 1716;
1717 -> 1702;
1718 -> 1717;
1718 -> 1712;
1718 -> 1702;
1719 -> 1712;
1719 -> 1702;
1720 -> 1700;
1720 -> 1719;
1721 -> 1700;
1721 -> 1656;
1722 -> 1656;
1723 -> 1657;
1723 -> 1708;
1723 -> 1722;
1723 -> 1656;
1724 -> 1723;
1724 -> 1656;
1725 -> 1656;
1726 -> 1724;
1726 -> 1725;
1727 -> 1658;
1727 -> 1725;
1728 -> 1726;
1728 -> 1723;
1728 -> 0;
1728 -> 1725;
1729 -> 1725;
1730 -> 1726;
1730 -> 1723;
1730 -> 0;
1730 -> 1725;
1731 -> 1726;
1731 -> 1723;
1731 -> 0;
1731 -> 1730;
1732 -> 1726;
1732 -> 1723;
1732 -> 0;
1732 -> 1725;
1733 -> 1726;
1733 -> 1723;
1733 -> 0;
1733 -> 1725;
1734 -> 1726;
1734 -> 1723;
1734 -> 0;
1734 -> 1725;
1735 -> 1726;
1735 -> 1723;
1735 -> 0;
1735 -> 1725;
1736 -> 1726;
1736 -> 1723;
1736 -> 0;
1736 -> 1725;
1737 -> 1725;
1738 -> 1737;
1738 -> 1725;
1739 -> 1725;
1740 -> 1739;
1740 -> 1725;
1741 -> 1725;
1742 -> 1740;
1742 -> 1741;
1743 -> 1727;
1743 -> 1741;
1744 -> 1741;
1745 -> 1741;
1746 -> 1745;
1746 -> 1725;
1747 -> 1746;
1747 -> 1725;
1748 -> 1726;
1749 -> 1726;
1750 -> 1748;
1750 -> 1749;
1751 -> 1727;
1751 -> 1749;
1752 -> 1750;
1752 -> 1726;
1752 -> 0;
1752 -> 1749;
1753 -> 1750;
1753 -> 1726;
1753 -> 1749;
1754 -> 1749;
1755 -> 1753;
1755 -> 1754;
1755 -> 1749;
1756 -> 1753;
1756 -> 1749;
1757 -> 1749;
1758 -> 1756;
1758 -> 1757;
1759 -> 1751;
1759 -> 1757;
1760 -> 1758;
1760 -> 1726;
1760 -> 0;
1760 -> 1757;
1761 -> 1757;
1762 -> 1758;
1762 -> 1726;
1762 -> 0;
1762 -> 1757;
1763 -> 1758;
1763 -> 1726;
1763 -> 0;
1763 -> 1762;
1764 -> 1758;
1764 -> 1726;
1764 -> 0;
1764 -> 1757;
1765 -> 1758;
1765 -> 1726;
1765 -> 0;
1765 -> 1757;
1766 -> 1758;
1766 -> 1726;
1766 -> 0;
1766 -> 1757;
1767 -> 1758;
1767 -> 1726;
1767 -> 0;
1767 -> 1757;
1768 -> 1758;
1768 -> 1726;
1768 -> 0;
1768 -> 1757;
1769 -> 1759;
1769 -> 1726;
1769 -> 1758;
1769 -> 1757;
1770 -> 1769;
1771 -> 1726;
1772 -> 1770;
1772 -> 1771;
1773 -> 1772;
1773 -> 1771;
1774 -> 1773;
1775 -> 1656;
1776 -> 1774;
1776 -> 1775;
1777 -> 1657;
1777 -> 1769;
1777 -> 1656;
1778 -> 1656;
1779 -> 1777;
1779 -> 1778;
1780 -> 1777;
1780 -> 1778;
1781 -> 1780;
1781 -> 1777;
1781 -> 1778;
1782 -> 1779;
1782 -> 1778;
1783 -> 1778;
1784 -> 1782;
1784 -> 1783;
1785 -> 1780;
1785 -> 1783;
1786 -> 1784;
1786 -> 1781;
1786 -> 0;
1786 -> 1783;
1787 -> 1786;
1788 -> 1779;
1788 -> 1778;
1789 -> 1778;
1790 -> 1788;
1790 -> 1789;
1791 -> 1780;
1791 -> 1789;
1792 -> 1790;
1792 -> 1781;
1792 -> 0;
1792 -> 1789;
1793 -> 1789;
1794 -> 1790;
1794 -> 1781;
1794 -> 0;
1794 -> 1789;
1795 -> 1790;
1795 -> 1781;
1795 -> 1794;
1796 -> 1794;
1797 -> 1795;
1797 -> 1796;
1798 -> 1797;
1798 -> 1781;
1798 -> 0;
1798 -> 1796;
1799 -> 1796;
1800 -> 1797;
1800 -> 1781;
1800 -> 0;
1801 -> 1797;
1801 -> 1781;
1801 -> 0;
1801 -> 1796;
1802 -> 1797;
1802 -> 1781;
1802 -> 0;
1802 -> 1796;
1803 -> 1797;
1803 -> 1781;
1803 -> 0;
1803 -> 1796;
1804 -> 1797;
1804 -> 1781;
1804 -> 0;
1804 -> 1796;
1805 -> 1797;
1805 -> 1781;
1805 -> 0;
1805 -> 1796;
1806 -> 1797;
1807 -> 1778;
1808 -> 1806;
1808 -> 1807;
1809 -> 1808;
1809 -> 1807;
1810 -> 1809;
1811 -> 1778;
1812 -> 1780;
1812 -> 1811;
1813 -> 1811;
1814 -> 1812;
1814 -> 1797;
1814 -> 1813;
1814 -> 1811;
1815 -> 1811;
1816 -> 1812;
1816 -> 1797;
1816 -> 1815;
1817 -> 1814;
1817 -> 1778;
1818 -> 1779;
1818 -> 1817;
1819 -> 1817;
1820 -> 1818;
1820 -> 1819;
1821 -> 1780;
1821 -> 1819;
1822 -> 1820;
1822 -> 1797;
1822 -> 1819;
1823 -> 1822;
1824 -> 1821;
1824 -> 1822;
1825 -> 1817;
1826 -> 1601;
1827 -> 1613;
1827 -> 1826;
1828 -> 1827;
1828 -> 1824;
1828 -> 1826;
1829 -> 1826;
1830 -> 1828;
1830 -> 1829;
1830 -> 1826;
1831 -> 1826;
1832 -> 1828;
1832 -> 1831;
1832 -> 1824;
1832 -> 1826;
1833 -> 1832;
1834 -> 1601;
1835 -> 1607;
1835 -> 1601;
1836 -> 1835;
1836 -> 1833;
1836 -> 1601;
1837 -> 1592;
1837 -> 1833;
1837 -> 1595;
1838 -> 1596;
1838 -> 1595;
1839 -> 1837;
1839 -> 1838;
1839 -> 1833;
1839 -> 1595;
1840 -> 1592;
1840 -> 1839;
1840 -> 1588;
1841 -> 1592;
1841 -> 1839;
1841 -> 1588;
1842 -> 1582;
1842 -> 1229;
1843 -> 1842;
1843 -> 1839;
1843 -> 1229;
1844 -> 1841;
1844 -> 1229;
1845 -> 1208;
1846 -> 1174;
1846 -> 1844;
1846 -> 1845;
1846 -> 1208;
1847 -> 1173;
1847 -> 1844;
1847 -> 1169;
1848 -> 1170;
1848 -> 0;
1848 -> 1169;
1849 -> 1172;
1849 -> 1169;
1850 -> 1175;
1850 -> 1169;
1851 -> 1173;
1851 -> 1169;
1852 -> 1849;
1852 -> 1850;
1852 -> 1851;
1852 -> 1174;
1852 -> 1164;
1852 -> 1847;
1852 -> 1169;
1853 -> 1169;
1854 -> 1159;
1855 -> 1164;
1855 -> 1852;
1855 -> 1159;
1856 -> 1153;
1856 -> 934;
1857 -> 1155;
1857 -> 1855;
1857 -> 1856;
1857 -> 1158;
1857 -> 1152;
1857 -> 1144;
1857 -> 934;
1858 -> 1153;
1858 -> 934;
1859 -> 1145;
1859 -> 934;
1860 -> 1147;
1860 -> 934;
1861 -> 1146;
1861 -> 1860;
1862 -> 1859;
1862 -> 1857;
1862 -> 1860;
1863 -> 1149;
1863 -> 1860;
1864 -> 1860;
1865 -> 1862;
1865 -> 1864;
1866 -> 1862;
1866 -> 1864;
1867 -> 1862;
1867 -> 1864;
1868 -> 1862;
1868 -> 1864;
1869 -> 1864;
1870 -> 1866;
1870 -> 1862;
1870 -> 1869;
1870 -> 1864;
1871 -> 0;
1871 -> 1864;
1872 -> 1870;
1872 -> 1864;
1873 -> 1861;
1873 -> 1870;
1873 -> 1860;
1874 -> 1860;
1875 -> 1152;
1875 -> 1860;
1876 -> 1859;
1876 -> 1860;
1877 -> 1146;
1877 -> 1860;
1878 -> 1148;
1878 -> 1860;
1879 -> 1857;
1879 -> 1860;
1880 -> 1874;
1880 -> 1860;
1881 -> 1150;
1881 -> 1860;
1882 -> 1151;
1882 -> 1860;
1883 -> 1860;
1884 -> 1875;
1884 -> 1883;
1885 -> 1876;
1885 -> 1883;
1886 -> 1877;
1886 -> 1883;
1887 -> 1878;
1887 -> 1883;
1888 -> 1879;
1888 -> 1883;
1889 -> 1880;
1889 -> 1883;
1890 -> 1881;
1890 -> 1883;
1891 -> 1882;
1891 -> 1883;
1892 -> 1883;
1893 -> 1884;
1893 -> 1892;
1893 -> 1883;
1894 -> 1883;
1895 -> 1889;
1895 -> 1894;
1895 -> 1883;
1896 -> 1883;
1897 -> 1884;
1897 -> 1896;
1898 -> 1897;
1898 -> 1870;
1898 -> 1896;
1899 -> 1898;
1899 -> 1883;
1900 -> 1883;
1901 -> 1883;
1902 -> 1890;
1902 -> 1883;
1903 -> 1884;
1903 -> 1902;
1904 -> 1885;
1904 -> 1902;
1905 -> 1888;
1905 -> 1902;
1906 -> 1889;
1906 -> 1902;
1907 -> 1891;
1907 -> 1902;
1908 -> 1902;
1909 -> 1903;
1909 -> 1908;
1910 -> 1904;
1910 -> 1908;
1911 -> 1905;
1911 -> 1908;
1912 -> 1906;
1912 -> 1908;
1913 -> 1907;
1913 -> 1908;
1914 -> 1913;
1914 -> 1908;
1915 -> 1908;
1916 -> 1914;
1916 -> 1915;
1917 -> 1909;
1917 -> 1915;
1918 -> 1915;
1919 -> 1917;
1919 -> 1870;
1919 -> 1918;
1919 -> 1915;
1920 -> 1919;
1921 -> 1917;
1921 -> 1919;
1922 -> 1919;
1923 -> 1922;
1924 -> 1923;
1924 -> 1922;
1925 -> 1919;
1926 -> 1925;
1926 -> 1921;
1927 -> 1926;
1927 -> 1919;
1928 -> 1919;
1929 -> 1917;
1929 -> 1928;
1930 -> 1929;
1930 -> 1921;
1930 -> 1928;
1931 -> 1928;
1932 -> 1930;
1932 -> 1931;
1933 -> 1932;
1933 -> 1930;
1933 -> 1931;
1934 -> 1931;
1935 -> 1933;
1935 -> 1934;
1936 -> 1934;
1937 -> 1935;
1937 -> 1936;
1938 -> 1936;
1939 -> 1937;
1939 -> 1938;
1940 -> 1939;
1940 -> 1936;
1941 -> 1937;
1941 -> 1934;
1942 -> 1941;
1942 -> 1919;
1943 -> 1927;
1943 -> 1942;
1943 -> 1919;
1944 -> 1921;
1944 -> 1943;
1946 -> 0;
1948 -> 1945;
1948 -> 1947;
1949 -> 1946;
1949 -> 1947;
1950 -> 1947;
1951 -> 1950;
1951 -> 1947;
1952 -> 1948;
1952 -> 1950;
1952 -> 1947;
1953 -> 1949;
1953 -> 1950;
1953 -> 1947;
1954 -> 1947;
1955 -> 1954;
1955 -> 1944;
1956 -> 1917;
1956 -> 1941;
1956 -> 1919;
1957 -> 1955;
1957 -> 1919;
1958 -> 1919;
1959 -> 1956;
1959 -> 1957;
1959 -> 1958;
1959 -> 1952;
1959 -> 1953;
1959 -> 1941;
1959 -> 0;
1959 -> 1919;
1960 -> 1917;
1960 -> 1959;
1960 -> 1915;
1961 -> 1960;
1961 -> 1908;
1962 -> 1961;
1962 -> 1959;
1962 -> 1908;
1963 -> 1961;
1963 -> 1959;
1963 -> 1908;
1964 -> 1912;
1964 -> 1963;
1964 -> 1874;
1964 -> 1959;
1964 -> 1908;
1965 -> 1961;
1965 -> 1964;
1965 -> 1908;
1966 -> 1908;
1967 -> 1965;
1967 -> 1966;
1967 -> 1908;
1968 -> 1967;
1969 -> 1884;
1969 -> 1883;
1970 -> 1885;
1970 -> 1883;
1971 -> 1886;
1971 -> 1883;
1972 -> 1887;
1972 -> 1883;
1973 -> 1888;
1973 -> 1883;
1974 -> 1889;
1974 -> 1883;
1975 -> 1890;
1975 -> 1883;
1976 -> 1968;
1976 -> 1883;
1977 -> 1891;
1977 -> 1883;
1978 -> 1883;
1979 -> 1883;
1980 -> 1969;
1980 -> 1979;
1981 -> 1970;
1981 -> 1979;
1982 -> 1971;
1982 -> 1979;
1983 -> 1972;
1983 -> 1979;
1984 -> 1973;
1984 -> 1979;
1985 -> 1974;
1985 -> 1979;
1986 -> 1975;
1986 -> 1979;
1987 -> 1976;
1987 -> 1979;
1988 -> 1977;
1988 -> 1979;
1989 -> 1978;
1989 -> 1979;
1990 -> 1979;
1991 -> 1990;
1991 -> 1979;
1992 -> 1990;
1992 -> 1979;
1993 -> 1990;
1993 -> 1979;
1994 -> 1990;
1994 -> 1979;
1995 -> 1990;
1995 -> 1979;
1996 -> 1990;
1996 -> 1979;
1997 -> 1990;
1997 -> 1979;
1998 -> 1990;
1998 -> 1979;
1999 -> 1990;
1999 -> 1979;
2000 -> 1990;
2000 -> 1979;
2001 -> 1990;
2001 -> 1979;
2002 -> 1979;
2003 -> 1980;
2003 -> 2002;
2003 -> 1979;
2004 -> 1979;
2005 -> 1985;
2005 -> 2004;
2005 -> 1979;
2006 -> 1980;
2006 -> 1990;
2006 -> 1979;
2007 -> 1981;
2007 -> 1990;
2007 -> 1979;
2008 -> 1982;
2008 -> 1990;
2008 -> 1979;
2009 -> 1988;
2009 -> 1990;
2009 -> 1979;
2010 -> 1985;
2010 -> 1990;
2010 -> 1979;
2011 -> 1986;
2011 -> 1990;
2011 -> 1979;
2012 -> 1987;
2012 -> 1990;
2012 -> 1979;
2013 -> 1984;
2013 -> 1990;
2013 -> 1979;
2014 -> 1984;
2014 -> 1979;
2015 -> 1979;
2016 -> 2014;
2016 -> 2015;
2017 -> 1990;
2017 -> 2015;
2018 -> 2016;
2018 -> 2015;
2019 -> 1979;
2020 -> 1982;
2020 -> 1979;
2021 -> 1981;
2021 -> 1964;
2021 -> 2020;
2022 -> 2021;
2022 -> 1990;
2022 -> 2020;
2023 -> 1983;
2023 -> 1990;
2023 -> 1979;
2024 -> 1883;
2025 -> 1884;
2025 -> 2024;
2026 -> 2025;
2026 -> 1964;
2026 -> 2024;
2027 -> 2026;
2027 -> 1883;
2028 -> 2027;
2029 -> 2028;
2029 -> 1978;
2029 -> 2027;
2030 -> 1883;
2031 -> 1884;
2031 -> 2030;
2032 -> 2030;
2033 -> 2031;
2033 -> 2032;
2034 -> 2032;
2035 -> 2033;
2035 -> 2034;
2036 -> 2034;
2037 -> 2035;
2037 -> 2036;
2038 -> 2037;
2038 -> 1964;
2038 -> 2036;
2039 -> 2037;
2039 -> 1964;
2039 -> 2036;
2040 -> 2039;
2040 -> 2034;
2041 -> 2035;
2041 -> 1964;
2041 -> 2034;
2042 -> 2030;
2043 -> 2041;
2043 -> 1883;
2044 -> 1883;
2045 -> 2043;
2045 -> 2044;
2046 -> 1978;
2046 -> 2044;
2047 -> 2045;
2047 -> 2041;
2047 -> 2044;
2048 -> 2046;
2048 -> 2047;
2049 -> 2047;
2050 -> 2048;
2050 -> 2049;
2050 -> 2047;
2050 -> 1990;
2050 -> 1991;
2050 -> 2006;
2050 -> 1992;
2050 -> 2008;
2050 -> 1993;
2050 -> 2023;
2050 -> 1994;
2050 -> 2010;
2050 -> 1995;
2050 -> 2013;
2050 -> 1996;
2050 -> 2007;
2050 -> 1997;
2050 -> 2011;
2050 -> 1998;
2050 -> 2022;
2050 -> 1999;
2050 -> 2012;
2050 -> 2000;
2050 -> 2029;
2050 -> 2001;
2050 -> 2009;
2050 -> 1144;
2050 -> 2021;
2050 -> 2028;
2051 -> 2050;
2051 -> 2049;
2052 -> 2050;
2052 -> 2049;
2053 -> 2050;
2053 -> 2049;
2054 -> 2053;
2054 -> 2050;
2054 -> 2049;
2055 -> 2051;
2055 -> 2049;
2056 -> 2049;
2057 -> 2054;
2057 -> 2056;
2058 -> 2055;
2058 -> 2056;
2059 -> 2056;
2060 -> 2057;
2060 -> 2059;
2060 -> 2056;
2061 -> 2049;
2062 -> 2053;
2062 -> 2050;
2062 -> 2049;
2063 -> 2049;
2064 -> 2053;
2064 -> 2062;
2064 -> 2063;
2065 -> 2064;
2065 -> 2049;
2066 -> 2051;
2066 -> 2065;
2067 -> 2065;
2068 -> 2066;
2068 -> 2067;
2069 -> 2053;
2069 -> 2067;
2070 -> 2067;
2071 -> 2069;
2071 -> 2062;
2071 -> 2067;
2072 -> 2071;
2072 -> 2065;
2073 -> 2072;
2073 -> 2065;
2074 -> 2049;
2075 -> 2050;
2075 -> 2074;
2075 -> 2073;
2075 -> 2047;
2076 -> 1883;
2077 -> 1883;
2078 -> 1978;
2078 -> 2077;
2079 -> 2078;
2079 -> 2075;
2079 -> 2077;
2080 -> 2077;
2081 -> 2079;
2081 -> 2080;
2081 -> 2077;
2082 -> 2077;
2083 -> 2082;
2083 -> 2077;
2084 -> 2079;
2084 -> 2083;
2084 -> 2075;
2084 -> 2077;
2085 -> 2084;
2086 -> 1883;
2087 -> 1883;
2088 -> 1885;
2088 -> 2087;
2088 -> 1883;
2089 -> 1889;
2089 -> 2088;
2090 -> 2088;
2091 -> 2089;
2091 -> 2090;
2092 -> 1885;
2092 -> 2090;
2093 -> 2092;
2093 -> 2085;
2093 -> 2090;
2094 -> 2093;
2094 -> 2088;
2095 -> 2094;
2095 -> 2088;
2096 -> 1889;
2096 -> 2088;
2097 -> 2088;
2098 -> 2095;
2098 -> 2097;
2099 -> 2096;
2099 -> 2097;
2100 -> 1978;
2100 -> 2097;
2101 -> 2098;
2101 -> 2097;
2102 -> 2088;
2103 -> 1889;
2103 -> 2088;
2104 -> 2088;
2105 -> 2103;
2105 -> 2104;
2106 -> 1885;
2106 -> 2104;
2107 -> 2104;
2108 -> 2105;
2108 -> 2104;
2109 -> 2104;
2110 -> 2108;
2110 -> 2109;
2111 -> 2106;
2111 -> 2109;
2112 -> 2109;
2113 -> 2111;
2113 -> 2112;
2114 -> 2112;
2115 -> 2114;
2115 -> 2113;
2115 -> 2112;
2116 -> 2112;
2117 -> 2113;
2117 -> 2116;
2118 -> 2117;
2118 -> 2085;
2118 -> 2115;
2118 -> 2116;
2119 -> 2118;
2119 -> 2112;
2120 -> 2119;
2120 -> 2109;
2121 -> 2109;
2122 -> 2111;
2122 -> 2121;
2123 -> 2122;
2123 -> 2118;
2123 -> 2121;
2124 -> 2123;
2124 -> 2109;
2125 -> 2124;
2126 -> 2120;
2126 -> 2125;
2126 -> 2124;
2127 -> 2126;
2128 -> 2104;
2129 -> 2107;
2129 -> 2104;
2130 -> 2106;
2130 -> 2123;
2130 -> 2104;
2131 -> 2129;
2131 -> 2130;
2131 -> 2107;
2131 -> 2123;
2131 -> 2104;
2132 -> 2107;
2132 -> 2104;
2133 -> 2106;
2133 -> 2131;
2133 -> 2104;
2134 -> 2107;
2134 -> 2104;
2135 -> 2106;
2135 -> 2133;
2135 -> 2104;
2136 -> 2107;
2136 -> 2104;
2137 -> 2106;
2137 -> 2135;
2137 -> 2104;
2138 -> 2107;
2138 -> 2104;
2139 -> 2106;
2139 -> 2137;
2139 -> 2104;
2140 -> 2107;
2140 -> 2104;
2141 -> 2106;
2141 -> 2139;
2141 -> 2104;
2142 -> 2107;
2142 -> 2104;
2143 -> 2106;
2143 -> 2141;
2143 -> 2104;
2144 -> 2107;
2144 -> 2104;
2145 -> 2106;
2145 -> 2143;
2145 -> 2104;
2146 -> 2107;
2146 -> 2145;
2146 -> 2104;
2147 -> 2146;
2147 -> 2088;
2148 -> 2147;
2148 -> 2088;
2149 -> 1889;
2149 -> 2088;
2150 -> 2088;
2151 -> 2148;
2151 -> 2150;
2152 -> 2149;
2152 -> 2150;
2153 -> 1978;
2153 -> 2150;
2154 -> 2151;
2154 -> 2150;
2155 -> 2088;
2156 -> 2088;
2157 -> 1884;
2157 -> 2156;
2158 -> 2157;
2158 -> 2145;
2158 -> 2156;
2159 -> 2158;
2159 -> 2088;
2160 -> 1978;
2160 -> 2088;
2161 -> 1885;
2161 -> 2088;
2162 -> 1889;
2162 -> 2088;
2163 -> 2088;
2164 -> 2159;
2164 -> 2163;
2165 -> 0;
2165 -> 2163;
2166 -> 2159;
2166 -> 2165;
2166 -> 0;
2166 -> 2088;
2167 -> 2159;
2167 -> 2163;
2168 -> 2163;
2169 -> 2159;
2169 -> 2168;
2169 -> 2166;
2169 -> 2088;
2170 -> 2088;
2171 -> 1978;
2171 -> 2170;
2172 -> 2171;
2172 -> 2169;
2172 -> 2170;
2173 -> 2170;
2174 -> 2172;
2174 -> 2173;
2174 -> 2170;
2175 -> 2170;
2176 -> 2175;
2176 -> 2170;
2177 -> 2088;
2178 -> 1885;
2178 -> 2172;
2178 -> 2088;
2179 -> 2088;
2180 -> 2178;
2180 -> 2179;
2180 -> 2088;
2181 -> 1883;
2182 -> 1885;
2182 -> 2181;
2182 -> 1883;
2183 -> 1978;
2183 -> 2172;
2183 -> 1885;
2183 -> 1883;
2184 -> 1883;
2185 -> 1884;
2185 -> 2184;
2186 -> 2185;
2186 -> 2172;
2186 -> 2184;
2187 -> 2186;
2187 -> 1883;
2188 -> 1883;
2189 -> 1890;
2189 -> 2188;
2189 -> 1883;
2190 -> 1884;
2190 -> 2189;
2191 -> 1889;
2191 -> 2189;
2192 -> 1891;
2192 -> 2189;
2193 -> 2189;
2194 -> 2190;
2194 -> 2193;
2195 -> 2191;
2195 -> 2193;
2196 -> 2192;
2196 -> 2193;
2197 -> 2193;
2198 -> 2194;
2198 -> 2197;
2199 -> 2197;
2200 -> 2198;
2200 -> 2199;
2201 -> 2199;
2202 -> 2200;
2202 -> 2201;
2203 -> 2202;
2203 -> 2187;
2203 -> 2201;
2204 -> 2202;
2204 -> 2187;
2204 -> 2201;
2205 -> 2204;
2205 -> 2199;
2206 -> 2200;
2206 -> 2187;
2206 -> 2199;
2207 -> 2206;
2207 -> 2193;
2208 -> 2196;
2208 -> 2193;
2209 -> 2208;
2209 -> 2207;
2209 -> 1144;
2209 -> 2206;
2209 -> 2193;
2210 -> 2193;
2211 -> 2195;
2211 -> 2209;
2211 -> 2193;
2212 -> 2189;
2213 -> 2189;
2214 -> 1885;
2214 -> 2213;
2214 -> 2189;
2215 -> 1968;
2215 -> 2213;
2215 -> 2189;
2216 -> 2214;
2216 -> 2215;
2216 -> 2189;
2217 -> 1860;
2218 -> 1874;
2218 -> 1860;
2219 -> 2218;
2219 -> 2211;
2219 -> 1860;
2220 -> 1859;
2220 -> 2219;
2221 -> 1874;
2221 -> 2219;
2222 -> 2219;
2223 -> 2220;
2223 -> 2222;
2224 -> 2221;
2224 -> 2222;
2225 -> 1152;
2225 -> 2222;
2226 -> 2225;
2226 -> 2219;
2226 -> 2222;
2227 -> 2225;
2227 -> 2219;
2227 -> 2222;
2228 -> 2219;
2229 -> 1149;
2229 -> 1860;
2230 -> 1874;
2230 -> 1860;
2231 -> 1151;
2231 -> 1860;
2232 -> 2229;
2232 -> 2230;
2232 -> 2231;
2232 -> 1152;
2232 -> 2219;
2232 -> 1144;
2232 -> 1860;
2233 -> 1860;
2235 -> 2234;
2236 -> 2232;
2236 -> 2233;
2237 -> 2232;
2237 -> 2233;
2238 -> 2232;
2238 -> 2233;
2239 -> 2232;
2239 -> 2233;
2240 -> 2232;
2240 -> 2233;
2241 -> 2232;
2241 -> 2233;
2242 -> 2232;
2242 -> 2233;
2243 -> 2233;
2244 -> 2236;
2244 -> 2243;
2244 -> 2233;
2245 -> 2236;
2245 -> 2232;
2245 -> 2244;
2246 -> 2236;
2246 -> 2245;
2246 -> 0;
2247 -> 2233;
2248 -> 2233;
2249 -> 2235;
2249 -> 2233;
2250 -> 2236;
2250 -> 2245;
2250 -> 2233;
2251 -> 2233;
2252 -> 2249;
2252 -> 2250;
2252 -> 2251;
2252 -> 2234;
2252 -> 2233;
2253 -> 2236;
2253 -> 2245;
2253 -> 2252;
2254 -> 2237;
2254 -> 2252;
2255 -> 2238;
2255 -> 2252;
2256 -> 2239;
2256 -> 2252;
2257 -> 2240;
2257 -> 2252;
2258 -> 2241;
2258 -> 2252;
2259 -> 2242;
2259 -> 2252;
2260 -> 2248;
2260 -> 2252;
2261 -> 2252;
2262 -> 2253;
2262 -> 2261;
2263 -> 2253;
2263 -> 2261;
2264 -> 2253;
2264 -> 2261;
2265 -> 2253;
2265 -> 2261;
2266 -> 2253;
2266 -> 2261;
2267 -> 2253;
2267 -> 2261;
2268 -> 2254;
2268 -> 2261;
2269 -> 2255;
2269 -> 2261;
2270 -> 2256;
2270 -> 2261;
2271 -> 2257;
2271 -> 2261;
2272 -> 2258;
2272 -> 2261;
2273 -> 2259;
2273 -> 2261;
2274 -> 2260;
2274 -> 2261;
2275 -> 2261;
2276 -> 2266;
2276 -> 2245;
2276 -> 2261;
2277 -> 2266;
2277 -> 2245;
2277 -> 2261;
2278 -> 2266;
2278 -> 2245;
2278 -> 2261;
2279 -> 2264;
2279 -> 2261;
2280 -> 2279;
2280 -> 2261;
2281 -> 2265;
2281 -> 2268;
2281 -> 2261;
2282 -> 2261;
2283 -> 2261;
2284 -> 2261;
2285 -> 2264;
2285 -> 2261;
2286 -> 2282;
2286 -> 2261;
2287 -> 2271;
2287 -> 2285;
2287 -> 2286;
2287 -> 2245;
2287 -> 2261;
2288 -> 2261;
2289 -> 2272;
2289 -> 2288;
2289 -> 2261;
2290 -> 2283;
2290 -> 2261;
2291 -> 2263;
2291 -> 2290;
2292 -> 0;
2292 -> 2291;
2293 -> 2292;
2293 -> 0;
2293 -> 2261;
2294 -> 2264;
2294 -> 2261;
2295 -> 2278;
2295 -> 2261;
2296 -> 2277;
2296 -> 2294;
2296 -> 2295;
2296 -> 2287;
2296 -> 2261;
2297 -> 2296;
2297 -> 0;
2297 -> 2261;
2298 -> 2296;
2298 -> 0;
2298 -> 2261;
2299 -> 2292;
2299 -> 0;
2299 -> 2298;
2300 -> 2292;
2300 -> 2261;
2301 -> 2270;
2301 -> 2300;
2302 -> 2292;
2302 -> 2261;
2303 -> 2275;
2303 -> 2233;
2304 -> 2302;
2304 -> 2233;
2305 -> 2236;
2305 -> 2304;
2305 -> 2296;
2305 -> 2233;
2306 -> 1857;
2306 -> 2305;
2306 -> 1860;
2307 -> 934;
2308 -> 940;
2308 -> 2307;
2308 -> 2305;
2308 -> 909;
2309 -> 940;
2309 -> 934;
2310 -> 940;
2310 -> 934;
2311 -> 940;
2311 -> 934;
2312 -> 940;
2312 -> 934;
2313 -> 940;
2313 -> 934;
2314 -> 940;
2314 -> 934;
2315 -> 940;
2315 -> 934;
2316 -> 934;
2317 -> 2309;
2317 -> 934;
2318 -> 2311;
2318 -> 934;
2319 -> 2316;
2319 -> 934;
2320 -> 2315;
2320 -> 2317;
2320 -> 2318;
2320 -> 2319;
2320 -> 2308;
2320 -> 2316;
2320 -> 934;
2321 -> 2309;
2321 -> 2320;
2321 -> 934;
2322 -> 934;
2323 -> 2315;
2323 -> 2322;
2324 -> 2322;
2325 -> 2323;
2325 -> 2324;
2326 -> 2325;
2326 -> 2320;
2326 -> 2324;
2327 -> 2325;
2327 -> 2320;
2327 -> 2324;
2328 -> 2327;
2328 -> 2322;
2329 -> 2323;
2329 -> 2320;
2329 -> 2322;
2330 -> 2329;
2330 -> 934;
2331 -> 934;
2332 -> 2316;
2332 -> 934;
2333 -> 934;
2334 -> 2332;
2334 -> 2333;
2335 -> 2315;
2335 -> 2333;
2336 -> 2333;
2337 -> 2335;
2337 -> 2336;
2338 -> 2336;
2339 -> 2337;
2339 -> 2338;
2340 -> 2339;
2340 -> 2330;
2340 -> 2338;
2341 -> 2339;
2341 -> 2330;
2341 -> 2338;
2342 -> 2341;
2342 -> 2336;
2343 -> 2337;
2343 -> 2330;
2343 -> 2336;
2344 -> 2343;
2344 -> 2333;
2345 -> 2333;
2346 -> 2345;
2346 -> 2344;
2346 -> 2343;
2346 -> 2333;
2347 -> 2333;
2348 -> 2347;
2348 -> 934;
2349 -> 2313;
2349 -> 934;
2350 -> 2316;
2350 -> 934;
2351 -> 2314;
2351 -> 934;
2352 -> 2349;
2352 -> 2350;
2352 -> 2351;
2352 -> 2315;
2352 -> 2343;
2352 -> 2308;
2352 -> 934;
2353 -> 934;
2354 -> 2314;
2354 -> 2308;
2354 -> 2352;
2354 -> 934;
2355 -> 934;
2356 -> 2312;
2356 -> 934;
2357 -> 934;
2362 -> 2359;
2362 -> 2358;
2363 -> 2360;
2363 -> 2358;
2364 -> 2361;
2364 -> 2358;
2365 -> 2358;
2366 -> 2315;
2366 -> 934;
2367 -> 2356;
2367 -> 934;
2368 -> 2310;
2368 -> 934;
2369 -> 2355;
2369 -> 934;
2370 -> 2314;
2370 -> 934;
2371 -> 934;
2372 -> 934;
2373 -> 2366;
2373 -> 2372;
2374 -> 2367;
2374 -> 2372;
2375 -> 2368;
2375 -> 2372;
2376 -> 2369;
2376 -> 2372;
2377 -> 2370;
2377 -> 2372;
2378 -> 2371;
2378 -> 2372;
2379 -> 2371;
2379 -> 2372;
2380 -> 2372;
2381 -> 2372;
2382 -> 2375;
2382 -> 2381;
2382 -> 2372;
2383 -> 2372;
2384 -> 2373;
2384 -> 2383;
2385 -> 2383;
2386 -> 2384;
2386 -> 2385;
2387 -> 2386;
2387 -> 2354;
2387 -> 2385;
2388 -> 2386;
2388 -> 2354;
2388 -> 2385;
2389 -> 2388;
2389 -> 2383;
2390 -> 2384;
2390 -> 2354;
2390 -> 2383;
2391 -> 2390;
2391 -> 2372;
2392 -> 2391;
2392 -> 2374;
2392 -> 2372;
2393 -> 2373;
2393 -> 2372;
2394 -> 2380;
2394 -> 2372;
2395 -> 2378;
2395 -> 2372;
2396 -> 2379;
2396 -> 2372;
2397 -> 2372;
2398 -> 2376;
2398 -> 2372;
2399 -> 2377;
2399 -> 2372;
2400 -> 2372;
2401 -> 2392;
2401 -> 2400;
2402 -> 2393;
2402 -> 2400;
2403 -> 2394;
2403 -> 2400;
2404 -> 2395;
2404 -> 2400;
2405 -> 2396;
2405 -> 2400;
2406 -> 2397;
2406 -> 2400;
2407 -> 2397;
2407 -> 2400;
2408 -> 2398;
2408 -> 2400;
2409 -> 2399;
2409 -> 2400;
2410 -> 2397;
2410 -> 2400;
2411 -> 2400;
2412 -> 2411;
2412 -> 2400;
2413 -> 2411;
2413 -> 2400;
2414 -> 2411;
2414 -> 2400;
2415 -> 2411;
2415 -> 2400;
2416 -> 2411;
2416 -> 2400;
2417 -> 2411;
2417 -> 2400;
2418 -> 2411;
2418 -> 2400;
2419 -> 2411;
2419 -> 2400;
2420 -> 2411;
2420 -> 2400;
2421 -> 2411;
2421 -> 2400;
2422 -> 2411;
2422 -> 2400;
2423 -> 2411;
2423 -> 2400;
2424 -> 2401;
2424 -> 2411;
2424 -> 2400;
2425 -> 2402;
2425 -> 2411;
2425 -> 2400;
2426 -> 2403;
2426 -> 2411;
2426 -> 2400;
2427 -> 2404;
2427 -> 2411;
2427 -> 2400;
2428 -> 2405;
2428 -> 2411;
2428 -> 2400;
2429 -> 2406;
2429 -> 2411;
2429 -> 2400;
2430 -> 2407;
2430 -> 2411;
2430 -> 2400;
2431 -> 2408;
2431 -> 2411;
2431 -> 2400;
2432 -> 2409;
2432 -> 2411;
2432 -> 2400;
2433 -> 2372;
2434 -> 2373;
2434 -> 2433;
2435 -> 2433;
2436 -> 2434;
2436 -> 2435;
2437 -> 2436;
2437 -> 2390;
2437 -> 2435;
2438 -> 2436;
2438 -> 2390;
2438 -> 2435;
2439 -> 2438;
2439 -> 2433;
2440 -> 2434;
2440 -> 2390;
2440 -> 2433;
2441 -> 2440;
2441 -> 2372;
2442 -> 2441;
2442 -> 2397;
2442 -> 2440;
2442 -> 2411;
2442 -> 2412;
2442 -> 2424;
2442 -> 2413;
2442 -> 2425;
2442 -> 2414;
2442 -> 2426;
2442 -> 2415;
2442 -> 2427;
2442 -> 2416;
2442 -> 2428;
2442 -> 2417;
2442 -> 2429;
2442 -> 2418;
2442 -> 2430;
2442 -> 2419;
2442 -> 2431;
2442 -> 2420;
2442 -> 2421;
2442 -> 2422;
2442 -> 2423;
2442 -> 2432;
2442 -> 2371;
2442 -> 2355;
2442 -> 2354;
2442 -> 2372;
2443 -> 2372;
2444 -> 2442;
2444 -> 2443;
2445 -> 2442;
2445 -> 2443;
2446 -> 2445;
2446 -> 2442;
2446 -> 2443;
2447 -> 2444;
2447 -> 2446;
2447 -> 2443;
2448 -> 2447;
2449 -> 2447;
2450 -> 2447;
2451 -> 2449;
2451 -> 2450;
2452 -> 2445;
2452 -> 2450;
2453 -> 2452;
2453 -> 2446;
2453 -> 2450;
2454 -> 2450;
2455 -> 2453;
2456 -> 2447;
2457 -> 2447;
2458 -> 2456;
2458 -> 2457;
2459 -> 2445;
2459 -> 2457;
2460 -> 2459;
2460 -> 2446;
2460 -> 2457;
2461 -> 2457;
2462 -> 2460;
2463 -> 2447;
2464 -> 2445;
2464 -> 2463;
2465 -> 2464;
2465 -> 2446;
2465 -> 2463;
2466 -> 2447;
2467 -> 2447;
2468 -> 2467;
2468 -> 2447;
2469 -> 2468;
2470 -> 2468;
2471 -> 2469;
2471 -> 2470;
2472 -> 2445;
2472 -> 2470;
2473 -> 2472;
2473 -> 2446;
2473 -> 2470;
2474 -> 2470;
2475 -> 2473;
2476 -> 2468;
2477 -> 2445;
2477 -> 2476;
2478 -> 2477;
2478 -> 2446;
2478 -> 2465;
2478 -> 2476;
2479 -> 2468;
2480 -> 2468;
2481 -> 2445;
2481 -> 2446;
2481 -> 2480;
2481 -> 2468;
2482 -> 2468;
2483 -> 2480;
2483 -> 2482;
2484 -> 2480;
2484 -> 2482;
2485 -> 2445;
2485 -> 2482;
2486 -> 2483;
2486 -> 2482;
2487 -> 2484;
2487 -> 2482;
2488 -> 2486;
2488 -> 2487;
2488 -> 2482;
2489 -> 2482;
2490 -> 2488;
2490 -> 2489;
2491 -> 2485;
2491 -> 2489;
2492 -> 2491;
2492 -> 2446;
2492 -> 2489;
2493 -> 2489;
2494 -> 2492;
2495 -> 2482;
2496 -> 2468;
2497 -> 2445;
2497 -> 2496;
2498 -> 2497;
2498 -> 2446;
2498 -> 2465;
2498 -> 2478;
2498 -> 2496;
2499 -> 2496;
2500 -> 2497;
2500 -> 2446;
2500 -> 2465;
2500 -> 2478;
2500 -> 2498;
2500 -> 2499;
2500 -> 2496;
2501 -> 2468;
2502 -> 2468;
2503 -> 2468;
2504 -> 2502;
2504 -> 2503;
2505 -> 2445;
2505 -> 2503;
2506 -> 2505;
2506 -> 2446;
2506 -> 2503;
2507 -> 2503;
2508 -> 2506;
2509 -> 2447;
2510 -> 2447;
2511 -> 2509;
2511 -> 2510;
2512 -> 2445;
2512 -> 2510;
2513 -> 2512;
2513 -> 2446;
2513 -> 2510;
2514 -> 2510;
2515 -> 2513;
2516 -> 2447;
2517 -> 2445;
2517 -> 2516;
2518 -> 2517;
2518 -> 2446;
2518 -> 2465;
2518 -> 2478;
2518 -> 2498;
2518 -> 2516;
2519 -> 2447;
2520 -> 2445;
2520 -> 2446;
2520 -> 2443;
2521 -> 2444;
2521 -> 2446;
2521 -> 2465;
2521 -> 2478;
2521 -> 2498;
2521 -> 2518;
2521 -> 2443;
2522 -> 2445;
2522 -> 2446;
2522 -> 2465;
2522 -> 2478;
2522 -> 2498;
2522 -> 2518;
2522 -> 2521;
2523 -> 2445;
2523 -> 2521;
2524 -> 2523;
2524 -> 2521;
2524 -> 2522;
2524 -> 2446;
2524 -> 2465;
2524 -> 2478;
2524 -> 2498;
2524 -> 2518;
2525 -> 2521;
2526 -> 2524;
2526 -> 2525;
2527 -> 2524;
2527 -> 2525;
2528 -> 2527;
2528 -> 2524;
2528 -> 2525;
2529 -> 2525;
2530 -> 2527;
2530 -> 2528;
2530 -> 2529;
2530 -> 2525;
2531 -> 2526;
2531 -> 2525;
2532 -> 2525;
2533 -> 2531;
2533 -> 2532;
2534 -> 2527;
2534 -> 2532;
2535 -> 2534;
2535 -> 2528;
2535 -> 2532;
2536 -> 2533;
2536 -> 2532;
2537 -> 2532;
2538 -> 2536;
2538 -> 2537;
2539 -> 2538;
2539 -> 2537;
2540 -> 2539;
2540 -> 2535;
2540 -> 2537;
2541 -> 2532;
2542 -> 2534;
2542 -> 2540;
2542 -> 2541;
2542 -> 2532;
2543 -> 2533;
2543 -> 2532;
2544 -> 2543;
2544 -> 2540;
2544 -> 2532;
2545 -> 2544;
2545 -> 2532;
2546 -> 2532;
2547 -> 2532;
2548 -> 2547;
2548 -> 2532;
2549 -> 2533;
2549 -> 2532;
2550 -> 2546;
2550 -> 2532;
2551 -> 2547;
2551 -> 2532;
2552 -> 2532;
2553 -> 2549;
2553 -> 2552;
2554 -> 2550;
2554 -> 2552;
2555 -> 2551;
2555 -> 2552;
2556 -> 2534;
2556 -> 2552;
2557 -> 0;
2557 -> 2552;
2558 -> 2552;
2559 -> 2552;
2560 -> 2553;
2560 -> 2544;
2560 -> 2552;
2561 -> 2560;
2561 -> 2544;
2562 -> 2561;
2562 -> 2557;
2562 -> 2560;
2563 -> 2562;
2563 -> 2560;
2564 -> 2560;
2565 -> 2556;
2565 -> 2564;
2565 -> 2560;
2566 -> 2565;
2566 -> 2560;
2567 -> 2552;
2568 -> 2559;
2568 -> 2567;
2568 -> 2552;
2569 -> 0;
2569 -> 2568;
2570 -> 2552;
2571 -> 2570;
2571 -> 2532;
2572 -> 2569;
2572 -> 0;
2572 -> 2532;
2573 -> 2563;
2573 -> 0;
2573 -> 2572;
2574 -> 2572;
2575 -> 2525;
2576 -> 2527;
2576 -> 2565;
2576 -> 2525;
2577 -> 2526;
2577 -> 2565;
2577 -> 2576;
2578 -> 2527;
2578 -> 2577;
2579 -> 2527;
2579 -> 2577;
2580 -> 2579;
2580 -> 2577;
2580 -> 2578;
2581 -> 2577;
2582 -> 2581;
2583 -> 2580;
2583 -> 2582;
2583 -> 2581;
2584 -> 2580;
2584 -> 2581;
2585 -> 2581;
2586 -> 2581;
2587 -> 2586;
2587 -> 2581;
2588 -> 2585;
2588 -> 2581;
2589 -> 2586;
2589 -> 2581;
2590 -> 0;
2590 -> 2581;
2591 -> 2581;
2592 -> 2581;
2593 -> 2580;
2594 -> 2593;
2594 -> 2590;
2594 -> 2580;
2595 -> 2594;
2595 -> 2580;
2596 -> 2580;
2597 -> 2581;
2598 -> 2592;
2598 -> 2597;
2598 -> 2581;
2599 -> 0;
2599 -> 2598;
2600 -> 2581;
2601 -> 2599;
2601 -> 0;
2601 -> 2581;
2602 -> 2595;
2602 -> 0;
2602 -> 2601;
2603 -> 2601;
2604 -> 2580;
2605 -> 2444;
2605 -> 2580;
2605 -> 2443;
2606 -> 2605;
2607 -> 2606;
2608 -> 2605;
2609 -> 2605;
2610 -> 2605;
2611 -> 2609;
2611 -> 2610;
2612 -> 2445;
2612 -> 2610;
2613 -> 2612;
2613 -> 2580;
2613 -> 2610;
2614 -> 2610;
2615 -> 2613;
2616 -> 2605;
2617 -> 2616;
2617 -> 2580;
2617 -> 2606;
2618 -> 2616;
2619 -> 2616;
2619 -> 2580;
2619 -> 2606;
2619 -> 2617;
2619 -> 2618;
2620 -> 2605;
2621 -> 2605;
2622 -> 2605;
2623 -> 2621;
2623 -> 2622;
2624 -> 2445;
2624 -> 2622;
2625 -> 2624;
2625 -> 2580;
2625 -> 2622;
2626 -> 2622;
2627 -> 2625;
2628 -> 2372;
2629 -> 2397;
2629 -> 2617;
2629 -> 2628;
2629 -> 2372;
2630 -> 2380;
2630 -> 2372;
2631 -> 2372;
2632 -> 2378;
2632 -> 2631;
2632 -> 2372;
2633 -> 2632;
2634 -> 2373;
2634 -> 2633;
2635 -> 2633;
2636 -> 2634;
2636 -> 2617;
2636 -> 2635;
2637 -> 2635;
2638 -> 2636;
2638 -> 2632;
2639 -> 2638;
2640 -> 2376;
2640 -> 2638;
2641 -> 2377;
2641 -> 2638;
2642 -> 2638;
2643 -> 2639;
2643 -> 2642;
2644 -> 2639;
2644 -> 2642;
2645 -> 2640;
2645 -> 2642;
2646 -> 2641;
2646 -> 2642;
2647 -> 2643;
2647 -> 2642;
2648 -> 2313;
2648 -> 934;
2649 -> 2355;
2649 -> 934;
2650 -> 2314;
2650 -> 934;
2651 -> 2648;
2651 -> 2649;
2651 -> 2650;
2651 -> 2315;
2651 -> 2647;
2651 -> 934;
2652 -> 934;
2653 -> 940;
2653 -> 934;
2654 -> 940;
2654 -> 934;
2655 -> 940;
2655 -> 934;
2656 -> 940;
2656 -> 934;
2657 -> 934;
2658 -> 2656;
2658 -> 2651;
2658 -> 2657;
2658 -> 934;
2659 -> 2653;
2659 -> 934;
2660 -> 934;
2661 -> 2659;
2661 -> 2660;
2662 -> 2656;
2662 -> 2660;
2663 -> 2660;
2664 -> 2662;
2664 -> 2651;
2664 -> 2663;
2664 -> 2660;
2665 -> 934;
2666 -> 940;
2666 -> 934;
2667 -> 934;
2668 -> 2666;
2668 -> 2667;
2669 -> 2667;
2670 -> 2668;
2670 -> 2669;
2671 -> 2669;
2672 -> 2670;
2672 -> 2671;
2673 -> 2671;
2674 -> 2672;
2674 -> 2673;
2675 -> 2674;
2675 -> 2651;
2675 -> 2673;
2676 -> 2674;
2676 -> 2651;
2676 -> 2673;
2677 -> 2676;
2677 -> 2671;
2678 -> 2667;
2679 -> 940;
2679 -> 934;
2680 -> 934;
2681 -> 2679;
2681 -> 2680;
2682 -> 2680;
2683 -> 2681;
2683 -> 2682;
2684 -> 2683;
2684 -> 2651;
2684 -> 2682;
2685 -> 2683;
2685 -> 2651;
2685 -> 2682;
2686 -> 2685;
2686 -> 2680;
2687 -> 934;
2688 -> 940;
2688 -> 934;
2689 -> 934;
2690 -> 2688;
2690 -> 2689;
2691 -> 2689;
2692 -> 2690;
2692 -> 2691;
2693 -> 2692;
2693 -> 2651;
2693 -> 2691;
2694 -> 2692;
2694 -> 2651;
2694 -> 2691;
2695 -> 2694;
2695 -> 2689;
2696 -> 940;
2696 -> 934;
2697 -> 940;
2697 -> 934;
2698 -> 934;
2699 -> 2697;
2699 -> 2698;
2700 -> 2699;
2700 -> 2651;
2700 -> 2698;
2701 -> 2700;
2701 -> 934;
2702 -> 2701;
2702 -> 2651;
2702 -> 934;
2703 -> 2701;
2703 -> 934;
2704 -> 2697;
2704 -> 2651;
2704 -> 934;
2705 -> 2701;
2705 -> 2702;
2706 -> 2696;
2706 -> 2651;
2706 -> 2702;
2707 -> 2702;
2708 -> 2705;
2708 -> 2707;
2709 -> 2706;
2709 -> 2707;
2710 -> 2697;
2710 -> 2707;
2711 -> 2710;
2711 -> 2651;
2711 -> 2707;
2712 -> 2708;
2712 -> 2707;
2713 -> 2711;
2713 -> 2712;
2713 -> 2707;
2714 -> 2707;
2715 -> 2708;
2715 -> 2707;
2716 -> 2714;
2716 -> 2707;
2717 -> 2710;
2717 -> 2651;
2717 -> 2715;
2717 -> 2716;
2717 -> 2707;
2718 -> 2708;
2718 -> 2707;
2719 -> 2707;
2720 -> 2707;
2721 -> 2718;
2721 -> 2720;
2722 -> 2719;
2722 -> 2720;
2723 -> 2722;
2723 -> 2720;
2724 -> 2720;
2725 -> 2721;
2725 -> 2724;
2725 -> 2720;
2726 -> 2721;
2726 -> 2722;
2726 -> 2720;
2727 -> 2708;
2727 -> 2707;
2728 -> 2719;
2728 -> 2707;
2729 -> 2710;
2729 -> 2717;
2729 -> 2727;
2729 -> 2728;
2729 -> 2726;
2729 -> 2707;
2730 -> 2729;
2730 -> 2719;
2730 -> 2707;
2731 -> 2708;
2731 -> 2730;
2732 -> 2729;
2732 -> 2730;
2733 -> 2709;
2733 -> 2730;
2734 -> 2730;
2735 -> 2731;
2735 -> 2734;
2736 -> 2732;
2736 -> 2734;
2737 -> 2733;
2737 -> 2734;
2738 -> 2710;
2738 -> 2734;
2739 -> 2738;
2739 -> 2729;
2739 -> 2734;
2740 -> 2734;
2741 -> 2736;
2741 -> 2740;
2742 -> 2741;
2742 -> 2729;
2742 -> 2740;
2743 -> 2742;
2743 -> 2734;
2744 -> 2739;
2744 -> 2729;
2744 -> 2734;
2745 -> 2738;
2745 -> 2729;
2745 -> 0;
2745 -> 2734;
2746 -> 2743;
2746 -> 2729;
2746 -> 2734;
2747 -> 2745;
2747 -> 2746;
2747 -> 2734;
2748 -> 2735;
2748 -> 2729;
2748 -> 2734;
2749 -> 2735;
2749 -> 2729;
2749 -> 2734;
2750 -> 2734;
2751 -> 2738;
2751 -> 2729;
2751 -> 2750;
2751 -> 2734;
2752 -> 2730;
2753 -> 2707;
2754 -> 2708;
2754 -> 2729;
2754 -> 2753;
2754 -> 2707;
2755 -> 2729;
2755 -> 2707;
2756 -> 2729;
2756 -> 2707;
2757 -> 940;
2757 -> 2756;
2757 -> 2754;
2757 -> 909;
2758 -> 940;
2758 -> 934;
2759 -> 2758;
2759 -> 2757;
2759 -> 934;
2760 -> 940;
2760 -> 934;
2761 -> 940;
2761 -> 934;
2762 -> 2761;
2762 -> 2759;
2762 -> 934;
2763 -> 934;
2764 -> 2763;
2764 -> 2762;
2764 -> 2759;
2764 -> 934;
2765 -> 934;
2766 -> 940;
2766 -> 2765;
2766 -> 2759;
2766 -> 909;
2767 -> 940;
2767 -> 934;
2768 -> 940;
2768 -> 934;
2769 -> 2767;
2769 -> 2766;
2769 -> 934;
2770 -> 2768;
2770 -> 2766;
2770 -> 2769;
2771 -> 2767;
2771 -> 2769;
2772 -> 2769;
2773 -> 2770;
2773 -> 2772;
2774 -> 2771;
2774 -> 2772;
2775 -> 2768;
2775 -> 2772;
2776 -> 2773;
2776 -> 2766;
2776 -> 2772;
2777 -> 2776;
2778 -> 2773;
2778 -> 2766;
2778 -> 2776;
2779 -> 2776;
2780 -> 2779;
2780 -> 2778;
2780 -> 2766;
2780 -> 2776;
2781 -> 2774;
2781 -> 2766;
2781 -> 2776;
2782 -> 2775;
2782 -> 2766;
2782 -> 2781;
2783 -> 2773;
2783 -> 2776;
2784 -> 2777;
2784 -> 2776;
2785 -> 2776;
2786 -> 2777;
2786 -> 2784;
2786 -> 2776;
2787 -> 2784;
2787 -> 2772;
2788 -> 940;
2788 -> 2787;
2788 -> 2786;
2788 -> 2784;
2788 -> 909;
2789 -> 940;
2789 -> 934;
2790 -> 2789;
2790 -> 2788;
2790 -> 934;
2791 -> 940;
2791 -> 934;
2792 -> 940;
2792 -> 934;
2793 -> 2791;
2793 -> 2790;
2793 -> 934;
2794 -> 934;
2795 -> 2792;
2795 -> 2790;
2795 -> 2794;
2796 -> 2795;
2796 -> 934;
2797 -> 934;
2798 -> 940;
2798 -> 934;
2799 -> 940;
2799 -> 934;
2800 -> 2798;
2800 -> 2796;
2800 -> 934;
2801 -> 934;
2802 -> 2800;
2802 -> 2801;
2803 -> 2799;
2803 -> 2801;
2804 -> 2803;
2804 -> 2796;
2804 -> 2801;
2805 -> 2804;
2805 -> 934;
2806 -> 934;
2807 -> 940;
2807 -> 934;
2808 -> 940;
2808 -> 934;
2809 -> 2807;
2809 -> 2805;
2809 -> 934;
2810 -> 934;
2811 -> 2809;
2811 -> 2810;
2812 -> 2808;
2812 -> 2810;
2813 -> 2810;
2814 -> 2811;
2814 -> 2810;
2815 -> 2810;
2816 -> 2814;
2816 -> 2815;
2817 -> 2812;
2817 -> 2815;
2818 -> 2815;
2819 -> 2817;
2819 -> 2818;
2820 -> 2818;
2821 -> 2820;
2821 -> 2819;
2821 -> 2818;
2822 -> 2818;
2823 -> 2819;
2823 -> 2822;
2824 -> 2823;
2824 -> 2805;
2824 -> 2821;
2824 -> 2822;
2825 -> 2824;
2825 -> 2818;
2826 -> 2825;
2826 -> 2815;
2827 -> 2815;
2828 -> 2817;
2828 -> 2827;
2829 -> 2824;
2829 -> 2815;
2830 -> 2829;
2831 -> 2826;
2831 -> 2830;
2831 -> 2829;
2832 -> 2831;
2833 -> 2810;
2834 -> 2813;
2834 -> 2810;
2835 -> 2813;
2835 -> 2810;
2836 -> 2813;
2836 -> 2810;
2837 -> 2813;
2837 -> 2810;
2838 -> 2813;
2838 -> 2810;
2839 -> 2813;
2839 -> 2810;
2840 -> 2813;
2840 -> 2810;
2841 -> 2813;
2841 -> 2810;
2842 -> 2813;
2842 -> 2824;
2842 -> 2810;
2843 -> 2842;
2843 -> 934;
2844 -> 934;
2845 -> 940;
2845 -> 934;
2846 -> 940;
2846 -> 934;
2847 -> 934;
2848 -> 2846;
2848 -> 2843;
2848 -> 934;
2849 -> 2847;
2849 -> 2848;
2849 -> 2843;
2849 -> 934;
2850 -> 934;
2851 -> 2847;
2851 -> 2849;
2851 -> 2850;
2851 -> 934;
2852 -> 2847;
2852 -> 2849;
2852 -> 2851;
2853 -> 2852;
2853 -> 2851;
2854 -> 2853;
2854 -> 2852;
2854 -> 0;
2855 -> 2854;
2856 -> 2853;
2856 -> 2852;
2856 -> 2854;
2857 -> 940;
2857 -> 934;
2858 -> 940;
2858 -> 934;
2859 -> 2857;
2859 -> 934;
2860 -> 2857;
2860 -> 2855;
2860 -> 934;
2861 -> 934;
2862 -> 2858;
2862 -> 2861;
2863 -> 2861;
2864 -> 2862;
2864 -> 2863;
2865 -> 2863;
2866 -> 2864;
2866 -> 2865;
2867 -> 2865;
2868 -> 2866;
2868 -> 2867;
2869 -> 2868;
2869 -> 2855;
2869 -> 2867;
2870 -> 2868;
2870 -> 2855;
2870 -> 2867;
2871 -> 2870;
2871 -> 2865;
2872 -> 2861;
2873 -> 2855;
2873 -> 934;
2874 -> 934;
2875 -> 2858;
2875 -> 2874;
2876 -> 940;
2876 -> 934;
2877 -> 940;
2877 -> 934;
2878 -> 940;
2878 -> 934;
2879 -> 940;
2879 -> 934;
2880 -> 934;
2881 -> 2879;
2881 -> 2855;
2881 -> 2880;
2882 -> 2880;
2883 -> 2882;
2884 -> 2883;
2885 -> 2881;
2885 -> 2884;
2886 -> 2885;
2886 -> 2883;
2887 -> 2880;
2888 -> 2881;
2888 -> 934;
2889 -> 2888;
2889 -> 2876;
2889 -> 2881;
2889 -> 934;
2890 -> 934;
2891 -> 2890;
2891 -> 934;
2892 -> 2878;
2892 -> 2891;
2892 -> 2855;
2892 -> 2890;
2892 -> 2881;
2892 -> 934;
2893 -> 934;
2894 -> 2890;
2894 -> 2892;
2894 -> 934;
2895 -> 2894;
2896 -> 2890;
2896 -> 2894;
2896 -> 934;
2897 -> 2895;
2897 -> 934;
2898 -> 940;
2898 -> 2897;
2898 -> 2896;
2898 -> 909;
2899 -> 2857;
2899 -> 2898;
2899 -> 934;
2900 -> 2868;
2900 -> 2898;
2900 -> 2867;
2901 -> 2868;
2901 -> 2898;
2901 -> 2867;
2902 -> 2901;
2902 -> 2865;
2903 -> 2898;
2903 -> 934;
2904 -> 2898;
2904 -> 2884;
2905 -> 2904;
2905 -> 2883;
2906 -> 2898;
2906 -> 934;
2907 -> 2906;
2907 -> 2876;
2907 -> 2898;
2907 -> 934;
2908 -> 940;
2908 -> 934;
2909 -> 940;
2909 -> 934;
2910 -> 934;
2911 -> 940;
2911 -> 2910;
2911 -> 2898;
2911 -> 909;
2912 -> 940;
2912 -> 934;
2913 -> 940;
2913 -> 934;
2914 -> 2913;
2914 -> 934;
2915 -> 2912;
2915 -> 934;
2916 -> 2913;
2916 -> 2911;
2916 -> 934;
2917 -> 2914;
2917 -> 2915;
2917 -> 2916;
2917 -> 2913;
2917 -> 2911;
2917 -> 934;
2918 -> 934;
2919 -> 2917;
2919 -> 0;
2919 -> 2918;
2920 -> 2918;
2921 -> 2917;
2922 -> 2921;
2922 -> 2917;
2923 -> 2917;
2923 -> 2918;
2924 -> 2918;
2925 -> 2924;
2926 -> 2917;
2926 -> 2925;
2927 -> 2926;
2927 -> 2924;
2928 -> 2918;
2929 -> 2918;
2930 -> 940;
2930 -> 934;
2931 -> 940;
2931 -> 934;
2932 -> 940;
2932 -> 934;
2933 -> 940;
2933 -> 934;
2934 -> 940;
2934 -> 934;
2935 -> 940;
2935 -> 934;
2936 -> 2930;
2936 -> 934;
2937 -> 2936;
2937 -> 2917;
2937 -> 934;
2938 -> 934;
2939 -> 2933;
2939 -> 2938;
2939 -> 934;
2940 -> 2930;
2940 -> 934;
2941 -> 2931;
2941 -> 934;
2942 -> 2932;
2942 -> 934;
2943 -> 2934;
2943 -> 934;
2944 -> 934;
2945 -> 2940;
2945 -> 2944;
2946 -> 2941;
2946 -> 2944;
2947 -> 2942;
2947 -> 2944;
2948 -> 2943;
2948 -> 2944;
2949 -> 2935;
2949 -> 2944;
2950 -> 2944;
2951 -> 2944;
2952 -> 2945;
2952 -> 2937;
2952 -> 2944;
2953 -> 2952;
2953 -> 2937;
2953 -> 2944;
2954 -> 2945;
2954 -> 2937;
2954 -> 2944;
2955 -> 2945;
2955 -> 2954;
2955 -> 2944;
2956 -> 2948;
2956 -> 2955;
2957 -> 2945;
2957 -> 2954;
2957 -> 2956;
2958 -> 2952;
2958 -> 2956;
2959 -> 2956;
2960 -> 2958;
2960 -> 2959;
2961 -> 2959;
2962 -> 2960;
2962 -> 2961;
2962 -> 2959;
2963 -> 2962;
2964 -> 2960;
2964 -> 2954;
2964 -> 2962;
2965 -> 2959;
2966 -> 2965;
2966 -> 2956;
2967 -> 2957;
2967 -> 2966;
2967 -> 2956;
2968 -> 2945;
2968 -> 2967;
2969 -> 2945;
2969 -> 2954;
2969 -> 2967;
2970 -> 2944;
2971 -> 2949;
2971 -> 2954;
2971 -> 2970;
2971 -> 2944;
2972 -> 2945;
2972 -> 2954;
2972 -> 2944;
2973 -> 934;
2974 -> 2933;
2974 -> 2973;
2974 -> 934;
2975 -> 2972;
2975 -> 2974;
2976 -> 940;
2976 -> 934;
2977 -> 940;
2977 -> 934;
2978 -> 940;
2978 -> 934;
2979 -> 940;
2979 -> 934;
2980 -> 934;
2981 -> 2978;
2981 -> 2980;
2981 -> 934;
2982 -> 2976;
2982 -> 2975;
2982 -> 934;
2983 -> 2976;
2983 -> 2982;
2984 -> 2977;
2984 -> 2982;
2985 -> 2978;
2985 -> 2982;
2986 -> 2982;
2987 -> 2982;
2988 -> 2983;
2988 -> 2987;
2989 -> 2984;
2989 -> 2987;
2990 -> 2985;
2990 -> 2987;
2991 -> 2986;
2991 -> 2987;
2992 -> 2986;
2992 -> 2987;
2993 -> 2979;
2993 -> 2987;
2994 -> 2988;
2994 -> 2975;
2994 -> 2987;
2995 -> 2987;
2996 -> 2990;
2996 -> 2995;
2996 -> 2987;
2997 -> 2988;
2997 -> 2994;
2997 -> 2987;
2998 -> 2988;
2998 -> 2994;
2998 -> 2997;
2999 -> 2988;
2999 -> 2994;
2999 -> 0;
2999 -> 2987;
3000 -> 2988;
3000 -> 2994;
3000 -> 2987;
3001 -> 2992;
3001 -> 3000;
3002 -> 3001;
3003 -> 3001;
3004 -> 2988;
3004 -> 2994;
3004 -> 3001;
3005 -> 3001;
3006 -> 3004;
3006 -> 3005;
3007 -> 3005;
3008 -> 3006;
3008 -> 3007;
3009 -> 3007;
3010 -> 3008;
3010 -> 3009;
3010 -> 3007;
3011 -> 3007;
3012 -> 3011;
3012 -> 3005;
3013 -> 2988;
3013 -> 2994;
3013 -> 3012;
3014 -> 2988;
3014 -> 2994;
3014 -> 2987;
3015 -> 2993;
3015 -> 2994;
3015 -> 2987;
3016 -> 2988;
3016 -> 2994;
3016 -> 2987;
3017 -> 940;
3017 -> 934;
3018 -> 940;
3018 -> 934;
3019 -> 940;
3019 -> 934;
3020 -> 940;
3020 -> 934;
3021 -> 940;
3021 -> 934;
3022 -> 940;
3022 -> 934;
3023 -> 934;
3024 -> 3019;
3024 -> 3023;
3024 -> 934;
3025 -> 3017;
3025 -> 3015;
3025 -> 934;
3026 -> 3017;
3026 -> 3015;
3026 -> 3025;
3027 -> 3017;
3027 -> 3015;
3027 -> 0;
3027 -> 934;
3028 -> 3017;
3028 -> 3015;
3028 -> 934;
3029 -> 3021;
3029 -> 3028;
3030 -> 3017;
3030 -> 3015;
3030 -> 934;
3031 -> 940;
3031 -> 934;
3032 -> 940;
3032 -> 934;
3033 -> 940;
3033 -> 934;
3034 -> 3033;
3034 -> 3015;
3034 -> 934;
3035 -> 3031;
3035 -> 934;
3036 -> 3034;
3036 -> 3035;
3036 -> 934;
3037 -> 934;
3038 -> 3031;
3038 -> 3037;
3038 -> 934;
3039 -> 934;
3040 -> 3031;
3040 -> 934;
3041 -> 3039;
3041 -> 934;
3042 -> 3033;
3042 -> 3015;
3042 -> 3040;
3042 -> 3041;
3042 -> 934;
3043 -> 3042;
3044 -> 3017;
3044 -> 3043;
3044 -> 934;
3045 -> 3017;
3045 -> 3043;
3045 -> 3044;
3046 -> 3017;
3046 -> 3043;
3046 -> 0;
3046 -> 934;
3047 -> 3017;
3047 -> 3043;
3047 -> 934;
3048 -> 3021;
3048 -> 3047;
3049 -> 3017;
3049 -> 3043;
3049 -> 934;
3050 -> 940;
3050 -> 934;
3051 -> 940;
3051 -> 934;
3052 -> 3050;
3052 -> 934;
3053 -> 934;
3054 -> 3052;
3054 -> 3053;
3054 -> 3043;
3054 -> 934;
3055 -> 3050;
3055 -> 934;
3056 -> 3055;
3056 -> 3043;
3056 -> 3054;
3056 -> 934;
3057 -> 934;
3058 -> 3056;
3058 -> 3057;
3059 -> 3058;
3059 -> 3056;
3059 -> 3057;
3060 -> 3058;
3060 -> 3056;
3060 -> 3059;
3061 -> 3060;
3061 -> 3059;
3062 -> 3059;
3063 -> 3061;
3063 -> 3062;
3064 -> 3063;
3064 -> 3056;
3064 -> 0;
3064 -> 3062;
3065 -> 3063;
3065 -> 3056;
3065 -> 3062;
3066 -> 3062;
3067 -> 3065;
3067 -> 3066;
3068 -> 3066;
3069 -> 3067;
3069 -> 3068;
3069 -> 3066;
3070 -> 3069;
3071 -> 3067;
3071 -> 3056;
3071 -> 3069;
3072 -> 3066;
3073 -> 3072;
3073 -> 3062;
3074 -> 3064;
3074 -> 3073;
3074 -> 3062;
3075 -> 3057;
3076 -> 3075;
3076 -> 934;
3077 -> 3056;
3077 -> 3076;
3077 -> 934;
3078 -> 3050;
3078 -> 934;
3079 -> 3077;
3079 -> 934;
3080 -> 934;
3081 -> 3079;
3081 -> 3080;
3082 -> 3081;
3082 -> 3079;
3082 -> 3080;
3083 -> 3081;
3083 -> 3079;
3083 -> 3082;
3084 -> 3083;
3084 -> 3082;
3085 -> 3082;
3086 -> 3084;
3086 -> 3085;
3087 -> 3086;
3087 -> 3079;
3087 -> 0;
3087 -> 3085;
3088 -> 3086;
3088 -> 3079;
3088 -> 3085;
3089 -> 3085;
3090 -> 3088;
3090 -> 3089;
3091 -> 3089;
3092 -> 3090;
3092 -> 3091;
3092 -> 3089;
3093 -> 3092;
3094 -> 3090;
3094 -> 3079;
3094 -> 3092;
3095 -> 3089;
3096 -> 3095;
3096 -> 3085;
3097 -> 3087;
3097 -> 3096;
3097 -> 3085;
3098 -> 3080;
3099 -> 3077;
3099 -> 934;
3100 -> 3050;
3100 -> 3099;
3101 -> 3099;
3102 -> 3100;
3102 -> 3101;
3102 -> 3043;
3102 -> 3079;
3102 -> 3099;
3103 -> 2977;
3103 -> 3102;
3104 -> 2978;
3104 -> 3102;
3105 -> 3103;
3105 -> 3102;
3106 -> 3104;
3106 -> 3102;
3107 -> 3102;
3108 -> 3102;
3109 -> 3102;
3110 -> 3106;
3110 -> 3109;
3110 -> 3102;
3111 -> 3102;
3112 -> 3102;
3112 -> 3111;
3113 -> 3102;
3113 -> 0;
3114 -> 3102;
3115 -> 3108;
3115 -> 3114;
3116 -> 3115;
3117 -> 3115;
3118 -> 3102;
3118 -> 3115;
3119 -> 3115;
3120 -> 3118;
3120 -> 3119;
3121 -> 3119;
3122 -> 3120;
3122 -> 3121;
3123 -> 3121;
3124 -> 3122;
3124 -> 3123;
3124 -> 3121;
3125 -> 3121;
3126 -> 3125;
3126 -> 3119;
3127 -> 3102;
3127 -> 3126;
3128 -> 3102;
3129 -> 940;
3129 -> 934;
3130 -> 940;
3130 -> 934;
3131 -> 940;
3131 -> 934;
3132 -> 3129;
3132 -> 3102;
3132 -> 934;
3133 -> 934;
3134 -> 3132;
3134 -> 3133;
3134 -> 934;
3135 -> 3130;
3135 -> 0;
3135 -> 3134;
3136 -> 3132;
3136 -> 3130;
3136 -> 3134;
3137 -> 3130;
3137 -> 0;
3137 -> 3136;
3138 -> 2977;
3138 -> 3136;
3139 -> 2978;
3139 -> 3136;
3140 -> 3138;
3140 -> 3136;
3141 -> 3139;
3141 -> 3136;
3142 -> 3136;
3143 -> 3136;
3144 -> 3136;
3145 -> 3141;
3145 -> 3144;
3145 -> 3136;
3146 -> 3136;
3147 -> 3136;
3147 -> 3146;
3148 -> 3136;
3148 -> 0;
3149 -> 3136;
3150 -> 3143;
3150 -> 3149;
3151 -> 3150;
3152 -> 3150;
3153 -> 3136;
3153 -> 3150;
3154 -> 3150;
3155 -> 3153;
3155 -> 3154;
3156 -> 3154;
3157 -> 3155;
3157 -> 3156;
3158 -> 3156;
3159 -> 3157;
3159 -> 3158;
3159 -> 3156;
3160 -> 3156;
3161 -> 3160;
3161 -> 3154;
3162 -> 3136;
3162 -> 3161;
3163 -> 3136;
3164 -> 3017;
3164 -> 3136;
3164 -> 934;
3165 -> 3017;
3165 -> 3136;
3165 -> 3164;
3166 -> 3017;
3166 -> 3136;
3166 -> 0;
3166 -> 934;
3167 -> 3017;
3167 -> 3136;
3167 -> 934;
3168 -> 3021;
3168 -> 3167;
3169 -> 3017;
3169 -> 3136;
3169 -> 934;
3170 -> 3033;
3170 -> 3136;
3170 -> 934;
3171 -> 3136;
3171 -> 3057;
3172 -> 3171;
3172 -> 3136;
3172 -> 3057;
3173 -> 3171;
3173 -> 3136;
3173 -> 3172;
3174 -> 3173;
3174 -> 3172;
3175 -> 3172;
3176 -> 3174;
3176 -> 3175;
3177 -> 3176;
3177 -> 3136;
3177 -> 0;
3177 -> 3175;
3178 -> 3176;
3178 -> 3136;
3178 -> 3175;
3179 -> 3175;
3180 -> 3178;
3180 -> 3179;
3181 -> 3179;
3182 -> 3180;
3182 -> 3181;
3182 -> 3179;
3183 -> 3182;
3184 -> 3180;
3184 -> 3136;
3184 -> 3182;
3185 -> 3179;
3186 -> 3185;
3186 -> 3175;
3187 -> 3177;
3187 -> 3186;
3187 -> 3175;
3188 -> 3136;
3188 -> 3080;
3189 -> 3188;
3189 -> 3136;
3189 -> 3080;
3190 -> 3188;
3190 -> 3136;
3190 -> 3189;
3191 -> 3190;
3191 -> 3189;
3192 -> 3189;
3193 -> 3191;
3193 -> 3192;
3194 -> 3193;
3194 -> 3136;
3194 -> 0;
3194 -> 3192;
3195 -> 3193;
3195 -> 3136;
3195 -> 3192;
3196 -> 3192;
3197 -> 3195;
3197 -> 3196;
3198 -> 3196;
3199 -> 3197;
3199 -> 3198;
3199 -> 3196;
3200 -> 3199;
3201 -> 3197;
3201 -> 3136;
3201 -> 3199;
3202 -> 3196;
3203 -> 3202;
3203 -> 3192;
3204 -> 3194;
3204 -> 3203;
3204 -> 3192;
3205 -> 2945;
3205 -> 3136;
3205 -> 2944;
3206 -> 3205;
3206 -> 3136;
3206 -> 2944;
3207 -> 2945;
3207 -> 3136;
3207 -> 2944;
3208 -> 2948;
3208 -> 3207;
3209 -> 2945;
3209 -> 3136;
3209 -> 3208;
3210 -> 3205;
3210 -> 3208;
3211 -> 3208;
3212 -> 3210;
3212 -> 3211;
3213 -> 3211;
3214 -> 3212;
3214 -> 3213;
3214 -> 3211;
3215 -> 3214;
3216 -> 3212;
3216 -> 3136;
3216 -> 3214;
3217 -> 3211;
3218 -> 3217;
3218 -> 3208;
3219 -> 3209;
3219 -> 3218;
3219 -> 3208;
3220 -> 2945;
3220 -> 3219;
3221 -> 2945;
3221 -> 3136;
3221 -> 3219;
3222 -> 2949;
3222 -> 3136;
3222 -> 2970;
3222 -> 2944;
3223 -> 3159;
3224 -> 3157;
3224 -> 3136;
3224 -> 3159;
3225 -> 940;
3225 -> 934;
3226 -> 3225;
3226 -> 3136;
3226 -> 934;
3227 -> 934;
3228 -> 2696;
3228 -> 3226;
3229 -> 3228;
3229 -> 3226;
3230 -> 3226;
3231 -> 3226;
3232 -> 2761;
3232 -> 3231;
3232 -> 934;
3233 -> 2763;
3233 -> 3232;
3233 -> 3231;
3233 -> 934;
3234 -> 940;
3234 -> 934;
3235 -> 3234;
3235 -> 934;
3236 -> 3235;
3236 -> 3234;
3236 -> 3231;
3236 -> 934;
3237 -> 934;
3238 -> 2791;
3238 -> 3236;
3238 -> 934;
3239 -> 2798;
3239 -> 3236;
3239 -> 934;
3240 -> 3239;
3240 -> 2801;
3241 -> 2807;
3241 -> 3236;
3241 -> 934;
3242 -> 3241;
3242 -> 2810;
3243 -> 3242;
3243 -> 2810;
3244 -> 3243;
3244 -> 2815;
3245 -> 3236;
3245 -> 2818;
3246 -> 3245;
3246 -> 2815;
3247 -> 3236;
3247 -> 2815;
3248 -> 3247;
3249 -> 3246;
3249 -> 3248;
3249 -> 3247;
3250 -> 3249;
3251 -> 2857;
3251 -> 3236;
3251 -> 934;
3252 -> 2868;
3252 -> 3236;
3252 -> 2867;
3253 -> 2868;
3253 -> 3236;
3253 -> 2867;
3254 -> 3253;
3254 -> 2865;
3255 -> 3236;
3255 -> 934;
3256 -> 3236;
3256 -> 2884;
3257 -> 3256;
3257 -> 2883;
3258 -> 3236;
3258 -> 934;
3259 -> 3258;
3259 -> 2876;
3259 -> 3236;
3259 -> 934;
3260 -> 2890;
3260 -> 3236;
3261 -> 3236;
3262 -> 2890;
3262 -> 3236;
3263 -> 3262;
3263 -> 3260;
3263 -> 3236;
3264 -> 3236;
3265 -> 3263;
3265 -> 3264;
3265 -> 3236;
3266 -> 2877;
3266 -> 3265;
3267 -> 3263;
3267 -> 3265;
3268 -> 3265;
3269 -> 3266;
3269 -> 3268;
3270 -> 3267;
3270 -> 3268;
3271 -> 2879;
3271 -> 3268;
3272 -> 3270;
3272 -> 3269;
3272 -> 3268;
3273 -> 3272;
3274 -> 3017;
3274 -> 3273;
3274 -> 934;
3275 -> 3017;
3275 -> 3273;
3275 -> 3274;
3276 -> 3017;
3276 -> 3273;
3276 -> 0;
3276 -> 934;
3277 -> 3017;
3277 -> 3273;
3277 -> 934;
3278 -> 3021;
3278 -> 3277;
3279 -> 3278;
3280 -> 3278;
3281 -> 3017;
3281 -> 3273;
3281 -> 3278;
3282 -> 3278;
3283 -> 3281;
3283 -> 3282;
3284 -> 3282;
3285 -> 3283;
3285 -> 3284;
3286 -> 3284;
3287 -> 3285;
3287 -> 3286;
3287 -> 3284;
3288 -> 3284;
3289 -> 3288;
3289 -> 3282;
3290 -> 3017;
3290 -> 3273;
3290 -> 3289;
3291 -> 3017;
3291 -> 3273;
3291 -> 934;
3292 -> 3033;
3292 -> 3273;
3292 -> 934;
3293 -> 2857;
3293 -> 3273;
3293 -> 934;
3294 -> 2868;
3294 -> 3273;
3294 -> 2867;
3295 -> 2868;
3295 -> 3273;
3295 -> 2867;
3296 -> 3295;
3296 -> 2865;
3297 -> 3273;
3297 -> 934;
3298 -> 3273;
3298 -> 2884;
3299 -> 3298;
3299 -> 2883;
3300 -> 3273;
3300 -> 934;
3301 -> 3300;
3301 -> 2876;
3301 -> 3273;
3301 -> 934;
3302 -> 2977;
3302 -> 3273;
3303 -> 2978;
3303 -> 3273;
3304 -> 3302;
3304 -> 3273;
3305 -> 3303;
3305 -> 3273;
3306 -> 3273;
3307 -> 3273;
3308 -> 3273;
3309 -> 3305;
3309 -> 3308;
3309 -> 3273;
3310 -> 3273;
3311 -> 3273;
3311 -> 3310;
3312 -> 3273;
3312 -> 0;
3313 -> 3273;
3314 -> 3307;
3314 -> 3313;
3315 -> 3314;
3316 -> 3314;
3317 -> 3273;
3317 -> 3314;
3318 -> 3314;
3319 -> 3317;
3319 -> 3318;
3320 -> 3318;
3321 -> 3319;
3321 -> 3320;
3322 -> 3320;
3323 -> 3321;
3323 -> 3322;
3323 -> 3320;
3324 -> 3320;
3325 -> 3324;
3325 -> 3318;
3326 -> 3273;
3326 -> 3325;
3327 -> 3273;
3328 -> 940;
3328 -> 934;
3329 -> 940;
3329 -> 934;
3330 -> 3329;
3330 -> 3273;
3330 -> 934;
3331 -> 3329;
3331 -> 3273;
3331 -> 934;
3332 -> 3331;
3333 -> 3329;
3333 -> 3332;
3334 -> 3333;
3334 -> 3273;
3334 -> 3332;
3335 -> 3332;
3336 -> 3333;
3336 -> 3273;
3336 -> 3332;
3337 -> 3334;
3337 -> 3273;
3337 -> 3336;
3338 -> 3336;
3339 -> 3338;
3339 -> 3337;
3339 -> 3273;
3339 -> 3336;
3340 -> 3333;
3340 -> 3273;
3340 -> 3332;
3341 -> 3332;
3342 -> 3334;
3342 -> 3273;
3342 -> 3341;
3343 -> 3342;
3343 -> 3332;
3344 -> 3334;
3344 -> 3332;
3345 -> 3335;
3345 -> 3332;
3346 -> 3332;
3347 -> 3344;
3347 -> 3346;
3348 -> 3345;
3348 -> 3346;
3349 -> 3346;
3350 -> 3349;
3350 -> 3346;
3351 -> 3347;
3351 -> 3273;
3351 -> 3346;
3352 -> 3348;
3352 -> 3346;
3353 -> 3346;
3354 -> 3350;
3354 -> 3353;
3355 -> 3351;
3355 -> 3353;
3356 -> 3352;
3356 -> 3353;
3357 -> 3353;
3358 -> 3355;
3358 -> 3357;
3358 -> 3353;
3359 -> 3346;
3360 -> 3346;
3361 -> 3347;
3361 -> 3351;
3361 -> 3360;
3362 -> 3361;
3362 -> 3346;
3363 -> 3349;
3363 -> 3362;
3364 -> 3347;
3364 -> 3351;
3364 -> 3362;
3365 -> 3348;
3365 -> 3362;
3366 -> 3362;
3367 -> 3363;
3367 -> 3366;
3368 -> 3364;
3368 -> 3366;
3369 -> 3365;
3369 -> 3366;
3370 -> 3366;
3371 -> 3368;
3371 -> 3370;
3371 -> 3366;
3372 -> 3362;
3373 -> 3349;
3373 -> 3346;
3374 -> 3373;
3374 -> 3332;
3375 -> 3335;
3375 -> 3332;
3376 -> 3375;
3376 -> 3331;
3377 -> 3376;
3377 -> 3329;
3377 -> 3331;
3378 -> 3331;
3379 -> 3329;
3379 -> 3364;
3379 -> 3377;
3379 -> 3375;
3379 -> 3378;
3379 -> 3331;
3380 -> 3329;
3380 -> 3364;
3380 -> 3377;
3380 -> 934;
3381 -> 940;
3381 -> 934;
3382 -> 940;
3382 -> 934;
3383 -> 940;
3383 -> 934;
3384 -> 3383;
3384 -> 3380;
3384 -> 934;
3385 -> 3384;
3385 -> 3380;
3385 -> 934;
3386 -> 934;
3387 -> 3386;
3387 -> 3385;
3387 -> 934;
3388 -> 940;
3388 -> 934;
3389 -> 0;
3389 -> 934;
3390 -> 940;
3390 -> 3389;
3390 -> 3380;
3390 -> 0;
3390 -> 909;
3391 -> 934;
3392 -> 3391;
3393 -> 3392;
3394 -> 940;
3394 -> 934;
3395 -> 934;
3396 -> 940;
3396 -> 3395;
3396 -> 3390;
3396 -> 909;
3397 -> 940;
3397 -> 934;
3398 -> 934;
3399 -> 3397;
3399 -> 3398;
3400 -> 3399;
3400 -> 3396;
3400 -> 3398;
3401 -> 3399;
3401 -> 3396;
3401 -> 3398;
3402 -> 3401;
3402 -> 934;
3403 -> 940;
3403 -> 934;
3404 -> 940;
3404 -> 934;
3405 -> 3404;
3405 -> 3402;
3405 -> 934;
3406 -> 0;
3406 -> 934;
3407 -> 3404;
3407 -> 3402;
3407 -> 934;
3408 -> 934;
3409 -> 3406;
3409 -> 3408;
3410 -> 3407;
3410 -> 3408;
3411 -> 3404;
3411 -> 3408;
3412 -> 3409;
3412 -> 3408;
3413 -> 3408;
3414 -> 3403;
3414 -> 3412;
3414 -> 3413;
3414 -> 3408;
3415 -> 3408;
3416 -> 3403;
3416 -> 3415;
3416 -> 3408;
3417 -> 3410;
3417 -> 3408;
3418 -> 3408;
3419 -> 3403;
3419 -> 3417;
3419 -> 3418;
3419 -> 3408;
3420 -> 3408;
3421 -> 3403;
3421 -> 3420;
3421 -> 3408;
3422 -> 934;
3423 -> 934;
3424 -> 3404;
3424 -> 3423;
3425 -> 3424;
3425 -> 3402;
3425 -> 3423;
3426 -> 3425;
3426 -> 934;
3427 -> 934;
3428 -> 3404;
3428 -> 3427;
3429 -> 3428;
3429 -> 3402;
3429 -> 3427;
3430 -> 3429;
3430 -> 934;
3431 -> 934;
3432 -> 3404;
3432 -> 3431;
3433 -> 3432;
3433 -> 3402;
3433 -> 3431;
3434 -> 3433;
3434 -> 934;
3435 -> 934;
3436 -> 3404;
3436 -> 3435;
3437 -> 3435;
3438 -> 3436;
3438 -> 3437;
3439 -> 3437;
3440 -> 3438;
3440 -> 3402;
3440 -> 3439;
3441 -> 3439;
3442 -> 3440;
3442 -> 3435;
3443 -> 3442;
3443 -> 3435;
3444 -> 3442;
3444 -> 3435;
3445 -> 3444;
3445 -> 934;
3446 -> 3445;
3446 -> 934;
3447 -> 3017;
3447 -> 3446;
3447 -> 934;
3448 -> 3017;
3448 -> 3446;
3448 -> 3447;
3449 -> 3017;
3449 -> 3446;
3449 -> 0;
3449 -> 934;
3450 -> 3017;
3450 -> 3446;
3450 -> 934;
3451 -> 3021;
3451 -> 3450;
3452 -> 3017;
3452 -> 3446;
3452 -> 934;
3453 -> 3033;
3453 -> 3446;
3453 -> 934;
3454 -> 2977;
3454 -> 3446;
3455 -> 2978;
3455 -> 3446;
3456 -> 3454;
3456 -> 3446;
3457 -> 3455;
3457 -> 3446;
3458 -> 3446;
3459 -> 3446;
3460 -> 3446;
3461 -> 3457;
3461 -> 3460;
3461 -> 3446;
3462 -> 3446;
3463 -> 3446;
3463 -> 3462;
3464 -> 3446;
3464 -> 0;
3465 -> 3446;
3466 -> 3459;
3466 -> 3465;
3467 -> 3466;
3468 -> 3466;
3469 -> 3446;
3469 -> 3466;
3470 -> 3466;
3471 -> 3469;
3471 -> 3470;
3472 -> 3470;
3473 -> 3471;
3473 -> 3472;
3474 -> 3472;
3475 -> 3473;
3475 -> 3474;
3475 -> 3472;
3476 -> 3472;
3477 -> 3476;
3477 -> 3470;
3478 -> 3446;
3478 -> 3477;
3479 -> 3446;
3480 -> 3130;
3480 -> 0;
3480 -> 3446;
3481 -> 940;
3481 -> 934;
3482 -> 3481;
3482 -> 3446;
3482 -> 934;
3483 -> 940;
3483 -> 934;
3484 -> 3483;
3484 -> 3482;
3484 -> 934;
3485 -> 3329;
3485 -> 3484;
3485 -> 934;
3486 -> 3017;
3486 -> 3484;
3486 -> 934;
3487 -> 3017;
3487 -> 3484;
3487 -> 3486;
3488 -> 3017;
3488 -> 3484;
3488 -> 0;
3488 -> 934;
3489 -> 3017;
3489 -> 3484;
3489 -> 934;
3490 -> 3021;
3490 -> 3489;
3491 -> 3017;
3491 -> 3484;
3491 -> 934;
3492 -> 940;
3492 -> 934;
3493 -> 3492;
3493 -> 3484;
3493 -> 934;
3494 -> 3492;
3494 -> 3484;
3494 -> 0;
3494 -> 3493;
3495 -> 0;
3495 -> 3494;
3496 -> 2977;
3496 -> 3495;
3497 -> 2978;
3497 -> 3495;
3498 -> 3496;
3498 -> 3495;
3499 -> 3497;
3499 -> 3495;
3500 -> 3495;
3501 -> 3495;
3502 -> 3495;
3503 -> 3499;
3503 -> 3502;
3503 -> 3495;
3504 -> 3495;
3505 -> 3495;
3505 -> 3504;
3506 -> 3495;
3506 -> 0;
3507 -> 3495;
3508 -> 3501;
3508 -> 3507;
3509 -> 3508;
3510 -> 3508;
3511 -> 3495;
3511 -> 3508;
3512 -> 3508;
3513 -> 3511;
3513 -> 3512;
3514 -> 3512;
3515 -> 3513;
3515 -> 3514;
3516 -> 3514;
3517 -> 3515;
3517 -> 3516;
3517 -> 3514;
3518 -> 3514;
3519 -> 3518;
3519 -> 3512;
3520 -> 3495;
3520 -> 3519;
3521 -> 3495;
3522 -> 3130;
3522 -> 0;
3522 -> 3495;
3523 -> 0;
3523 -> 3495;
3524 -> 2977;
3524 -> 3523;
3525 -> 2978;
3525 -> 3523;
3526 -> 3524;
3526 -> 3523;
3527 -> 3525;
3527 -> 3523;
3528 -> 3523;
3529 -> 3523;
3530 -> 3523;
3531 -> 3527;
3531 -> 3530;
3531 -> 3523;
3532 -> 3523;
3533 -> 3523;
3533 -> 3532;
3534 -> 3523;
3534 -> 0;
3535 -> 3523;
3536 -> 3529;
3536 -> 3535;
3537 -> 3536;
3538 -> 3536;
3539 -> 3523;
3539 -> 3536;
3540 -> 3536;
3541 -> 3539;
3541 -> 3540;
3542 -> 3540;
3543 -> 3541;
3543 -> 3542;
3544 -> 3542;
3545 -> 3543;
3545 -> 3544;
3545 -> 3542;
3546 -> 3542;
3547 -> 3546;
3547 -> 3540;
3548 -> 3523;
3548 -> 3547;
3549 -> 3523;
3550 -> 3130;
3550 -> 0;
3550 -> 3523;
3551 -> 940;
3551 -> 934;
3552 -> 3551;
3552 -> 3523;
3552 -> 934;
3553 -> 3017;
3553 -> 3552;
3553 -> 934;
3554 -> 3017;
3554 -> 3552;
3554 -> 3553;
3555 -> 3017;
3555 -> 3552;
3555 -> 0;
3555 -> 934;
3556 -> 3017;
3556 -> 3552;
3556 -> 934;
3557 -> 3021;
3557 -> 3556;
3558 -> 3557;
3559 -> 3557;
3560 -> 3017;
3560 -> 3552;
3560 -> 3557;
3561 -> 3557;
3562 -> 3560;
3562 -> 3561;
3563 -> 3561;
3564 -> 3562;
3564 -> 3563;
3565 -> 3563;
3566 -> 3564;
3566 -> 3565;
3566 -> 3563;
3567 -> 3563;
3568 -> 3567;
3568 -> 3561;
3569 -> 3017;
3569 -> 3552;
3569 -> 3568;
3570 -> 3017;
3570 -> 3552;
3570 -> 934;
3571 -> 3492;
3571 -> 3552;
3572 -> 0;
3572 -> 3571;
3573 -> 3033;
3573 -> 3572;
3573 -> 934;
3574 -> 3017;
3574 -> 3572;
3574 -> 934;
3575 -> 3017;
3575 -> 3572;
3575 -> 3574;
3576 -> 3017;
3576 -> 3572;
3576 -> 0;
3576 -> 934;
3577 -> 3017;
3577 -> 3572;
3577 -> 934;
3578 -> 3021;
3578 -> 3577;
3579 -> 3017;
3579 -> 3572;
3579 -> 934;
3580 -> 3572;
3580 -> 0;
3580 -> 2918;
3581 -> 3572;
3582 -> 3581;
3582 -> 3572;
3583 -> 3572;
3583 -> 2918;
3584 -> 2945;
3584 -> 3572;
3584 -> 2944;
3585 -> 3584;
3585 -> 3572;
3585 -> 2944;
3586 -> 2945;
3586 -> 3572;
3586 -> 2944;
3587 -> 2948;
3587 -> 3586;
3588 -> 2945;
3588 -> 3572;
3588 -> 3587;
3589 -> 3584;
3589 -> 3587;
3590 -> 3587;
3591 -> 3589;
3591 -> 3590;
3592 -> 3590;
3593 -> 3591;
3593 -> 3592;
3593 -> 3590;
3594 -> 3593;
3595 -> 3591;
3595 -> 3572;
3595 -> 3593;
3596 -> 3590;
3597 -> 3596;
3597 -> 3587;
3598 -> 3588;
3598 -> 3597;
3598 -> 3587;
3599 -> 2945;
3599 -> 3598;
3600 -> 2945;
3600 -> 3572;
3600 -> 3598;
3601 -> 2949;
3601 -> 3572;
3601 -> 2970;
3601 -> 2944;
3602 -> 3572;
3602 -> 3057;
3603 -> 3602;
3603 -> 3572;
3603 -> 3057;
3604 -> 3602;
3604 -> 3572;
3604 -> 3603;
3605 -> 3604;
3605 -> 3603;
3606 -> 3603;
3607 -> 3605;
3607 -> 3606;
3608 -> 3607;
3608 -> 3572;
3608 -> 0;
3608 -> 3606;
3609 -> 3607;
3609 -> 3572;
3609 -> 3606;
3610 -> 3606;
3611 -> 3609;
3611 -> 3610;
3612 -> 3610;
3613 -> 3611;
3613 -> 3612;
3613 -> 3610;
3614 -> 3613;
3615 -> 3611;
3615 -> 3572;
3615 -> 3613;
3616 -> 3610;
3617 -> 3616;
3617 -> 3606;
3618 -> 3608;
3618 -> 3617;
3618 -> 3606;
3619 -> 3572;
3619 -> 3080;
3620 -> 3619;
3620 -> 3572;
3620 -> 3080;
3621 -> 3619;
3621 -> 3572;
3621 -> 3620;
3622 -> 3621;
3622 -> 3620;
3623 -> 3620;
3624 -> 3622;
3624 -> 3623;
3625 -> 3624;
3625 -> 3572;
3625 -> 0;
3625 -> 3623;
3626 -> 3624;
3626 -> 3572;
3626 -> 3623;
3627 -> 3623;
3628 -> 3626;
3628 -> 3627;
3629 -> 3627;
3630 -> 3628;
3630 -> 3629;
3630 -> 3627;
3631 -> 3630;
3632 -> 3628;
3632 -> 3572;
3632 -> 3630;
3633 -> 3627;
3634 -> 3633;
3634 -> 3623;
3635 -> 3625;
3635 -> 3634;
3635 -> 3623;
3636 -> 2977;
3636 -> 3572;
3637 -> 2978;
3637 -> 3572;
3638 -> 3636;
3638 -> 3572;
3639 -> 3637;
3639 -> 3572;
3640 -> 3572;
3641 -> 3572;
3642 -> 3572;
3643 -> 3639;
3643 -> 3642;
3643 -> 3572;
3644 -> 3572;
3645 -> 3572;
3645 -> 3644;
3646 -> 3572;
3646 -> 0;
3647 -> 3572;
3648 -> 3641;
3648 -> 3647;
3649 -> 3648;
3650 -> 3648;
3651 -> 3572;
3651 -> 3648;
3652 -> 3648;
3653 -> 3651;
3653 -> 3652;
3654 -> 3652;
3655 -> 3653;
3655 -> 3654;
3656 -> 3654;
3657 -> 3655;
3657 -> 3656;
3657 -> 3654;
3658 -> 3654;
3659 -> 3658;
3659 -> 3652;
3660 -> 3572;
3660 -> 3659;
3661 -> 3572;
3662 -> 3130;
3662 -> 0;
3662 -> 3572;
3663 -> 0;
3663 -> 3662;
3664 -> 3663;
3664 -> 3131;
3664 -> 3572;
3664 -> 3662;
3665 -> 3662;
3666 -> 3665;
3667 -> 3664;
3667 -> 3666;
3668 -> 3667;
3668 -> 3665;
3669 -> 2945;
3669 -> 3664;
3669 -> 2944;
3670 -> 3669;
3670 -> 3664;
3670 -> 2944;
3671 -> 2945;
3671 -> 3664;
3671 -> 2944;
3672 -> 2948;
3672 -> 3671;
3673 -> 2945;
3673 -> 3664;
3673 -> 3672;
3674 -> 3669;
3674 -> 3672;
3675 -> 3672;
3676 -> 3674;
3676 -> 3675;
3677 -> 3675;
3678 -> 3676;
3678 -> 3677;
3678 -> 3675;
3679 -> 3678;
3680 -> 3676;
3680 -> 3664;
3680 -> 3678;
3681 -> 3675;
3682 -> 3681;
3682 -> 3672;
3683 -> 3673;
3683 -> 3682;
3683 -> 3672;
3684 -> 2945;
3684 -> 3683;
3685 -> 2945;
3685 -> 3664;
3685 -> 3683;
3686 -> 2949;
3686 -> 3664;
3686 -> 2970;
3686 -> 2944;
3687 -> 3017;
3687 -> 3664;
3687 -> 934;
3688 -> 3017;
3688 -> 3664;
3688 -> 3687;
3689 -> 3017;
3689 -> 3664;
3689 -> 0;
3689 -> 934;
3690 -> 3017;
3690 -> 3664;
3690 -> 934;
3691 -> 3021;
3691 -> 3690;
3692 -> 3017;
3692 -> 3664;
3692 -> 934;
3693 -> 3033;
3693 -> 3664;
3693 -> 934;
3694 -> 2977;
3694 -> 3664;
3695 -> 2978;
3695 -> 3664;
3696 -> 3694;
3696 -> 3664;
3697 -> 3695;
3697 -> 3664;
3698 -> 3664;
3699 -> 3664;
3700 -> 3664;
3701 -> 3697;
3701 -> 3700;
3701 -> 3664;
3702 -> 3664;
3703 -> 3664;
3703 -> 3702;
3704 -> 3664;
3704 -> 0;
3705 -> 3664;
3706 -> 3699;
3706 -> 3705;
3707 -> 3706;
3708 -> 3706;
3709 -> 3664;
3709 -> 3706;
3710 -> 3706;
3711 -> 3709;
3711 -> 3710;
3712 -> 3710;
3713 -> 3711;
3713 -> 3712;
3714 -> 3712;
3715 -> 3713;
3715 -> 3714;
3715 -> 3712;
3716 -> 3712;
3717 -> 3716;
3717 -> 3710;
3718 -> 3664;
3718 -> 3717;
3719 -> 3664;
3720 -> 3664;
3720 -> 3057;
3721 -> 3720;
3721 -> 3664;
3721 -> 3057;
3722 -> 3720;
3722 -> 3664;
3722 -> 3721;
3723 -> 3722;
3723 -> 3721;
3724 -> 3721;
3725 -> 3723;
3725 -> 3724;
3726 -> 3725;
3726 -> 3664;
3726 -> 0;
3726 -> 3724;
3727 -> 3725;
3727 -> 3664;
3727 -> 3724;
3728 -> 3724;
3729 -> 3727;
3729 -> 3728;
3730 -> 3728;
3731 -> 3729;
3731 -> 3730;
3731 -> 3728;
3732 -> 3731;
3733 -> 3729;
3733 -> 3664;
3733 -> 3731;
3734 -> 3728;
3735 -> 3734;
3735 -> 3724;
3736 -> 3726;
3736 -> 3735;
3736 -> 3724;
3737 -> 3664;
3737 -> 3080;
3738 -> 3737;
3738 -> 3664;
3738 -> 3080;
3739 -> 3737;
3739 -> 3664;
3739 -> 3738;
3740 -> 3739;
3740 -> 3738;
3741 -> 3738;
3742 -> 3740;
3742 -> 3741;
3743 -> 3742;
3743 -> 3664;
3743 -> 0;
3743 -> 3741;
3744 -> 3742;
3744 -> 3664;
3744 -> 3741;
3745 -> 3741;
3746 -> 3744;
3746 -> 3745;
3747 -> 3745;
3748 -> 3746;
3748 -> 3747;
3748 -> 3745;
3749 -> 3748;
3750 -> 3746;
3750 -> 3664;
3750 -> 3748;
3751 -> 3745;
3752 -> 3751;
3752 -> 3741;
3753 -> 3743;
3753 -> 3752;
3753 -> 3741;
3754 -> 3715;
3755 -> 3713;
3755 -> 3664;
3755 -> 3715;
3756 -> 2857;
3756 -> 3664;
3756 -> 934;
3757 -> 2868;
3757 -> 3664;
3757 -> 2867;
3758 -> 2868;
3758 -> 3664;
3758 -> 2867;
3759 -> 3758;
3759 -> 2865;
3760 -> 3664;
3760 -> 934;
3761 -> 3664;
3761 -> 2884;
3762 -> 3761;
3762 -> 2883;
3763 -> 3664;
3763 -> 934;
3764 -> 3763;
3764 -> 2876;
3764 -> 3664;
3764 -> 934;
3765 -> 2879;
3765 -> 3664;
3766 -> 2692;
3766 -> 3664;
3766 -> 2691;
3767 -> 2692;
3767 -> 3664;
3767 -> 2691;
3768 -> 3767;
3768 -> 2689;
3769 -> 909;
3770 -> 922;
3770 -> 3769;
3770 -> 909;
3771 -> 3664;
3771 -> 909;
3772 -> 912;
3772 -> 3771;
3772 -> 3664;
3772 -> 909;
3773 -> 918;
3773 -> 909;
3774 -> 3773;
3774 -> 3772;
3774 -> 909;
3775 -> 3664;
3775 -> 3774;
3775 -> 909;
3776 -> 3774;
3776 -> 3775;
3777 -> 919;
3777 -> 3775;
3778 -> 3775;
3779 -> 3775;
3780 -> 3776;
3780 -> 3779;
3781 -> 3777;
3781 -> 3779;
3782 -> 3778;
3782 -> 3779;
3783 -> 3780;
3783 -> 3782;
3783 -> 3779;
3784 -> 3781;
3784 -> 919;
3784 -> 3779;
3785 -> 3782;
3785 -> 3783;
3785 -> 3784;
3786 -> 3785;
3786 -> 3784;
3787 -> 0;
3787 -> 3784;
3788 -> 3784;
3789 -> 3786;
3789 -> 3788;
3789 -> 3784;
3790 -> 3786;
3790 -> 3789;
3791 -> 3789;
3792 -> 3790;
3792 -> 3791;
3792 -> 3789;
3793 -> 3792;
3793 -> 3789;
3794 -> 3789;
3795 -> 3793;
3795 -> 3794;
3796 -> 3782;
3796 -> 3794;
3797 -> 3795;
3797 -> 3790;
3797 -> 3792;
3797 -> 3794;
3798 -> 3797;
3798 -> 3794;
3799 -> 3795;
3799 -> 3790;
3799 -> 3792;
3799 -> 3794;
3800 -> 3798;
3800 -> 3794;
3801 -> 3794;
3802 -> 3797;
3802 -> 3794;
3803 -> 3798;
3803 -> 3794;
3804 -> 3803;
3804 -> 3800;
3804 -> 3794;
3805 -> 3804;
3805 -> 3782;
3805 -> 3779;
3806 -> 806;
3806 -> 805;
3807 -> 805;
3808 -> 3806;
3808 -> 3807;
3809 -> 3807;
3810 -> 3808;
3810 -> 3809;
3811 -> 3809;
3812 -> 3810;
3812 -> 3811;
3813 -> 3812;
3813 -> 3805;
3813 -> 3811;
3814 -> 3812;
3814 -> 3805;
3814 -> 3811;
3815 -> 3814;
3815 -> 3809;
3816 -> 3810;
3816 -> 3805;
3816 -> 3809;
3817 -> 3816;
3817 -> 805;
3818 -> 806;
3818 -> 805;
3819 -> 797;
3819 -> 3817;
3819 -> 796;
3820 -> 3819;
3820 -> 800;
3820 -> 796;
3821 -> 797;
3821 -> 3819;
3821 -> 796;
3822 -> 3821;
3822 -> 800;
3822 -> 796;
3823 -> 797;
3823 -> 3821;
3823 -> 796;
3824 -> 3823;
3824 -> 800;
3824 -> 796;
3825 -> 797;
3825 -> 3823;
3825 -> 796;
3826 -> 3825;
3826 -> 800;
3826 -> 796;
3827 -> 800;
3827 -> 766;
3827 -> 3825;
3827 -> 796;
3828 -> 796;
3829 -> 3827;
3829 -> 3828;
3830 -> 3828;
3831 -> 3830;
3832 -> 3831;
3833 -> 3829;
3833 -> 3832;
3834 -> 3833;
3834 -> 3831;
3835 -> 796;
3836 -> 792;
3836 -> 3829;
3836 -> 776;
3837 -> 3836;
3837 -> 784;
3837 -> 776;
3838 -> 782;
3838 -> 776;
3839 -> 792;
3839 -> 3838;
3839 -> 3836;
3839 -> 776;
3840 -> 776;
3841 -> 783;
3841 -> 3840;
3841 -> 776;
3842 -> 776;
3843 -> 777;
3843 -> 3842;
3843 -> 776;
3844 -> 778;
3844 -> 3842;
3844 -> 776;
3845 -> 3843;
3845 -> 3844;
3845 -> 776;
3846 -> 738;
3847 -> 738;
3848 -> 746;
3848 -> 3847;
3848 -> 738;
3849 -> 747;
3849 -> 3847;
3849 -> 738;
3850 -> 3848;
3850 -> 3849;
3850 -> 738;
3851 -> 754;
3851 -> 738;
3852 -> 3851;
3852 -> 706;
3853 -> 706;
3854 -> 725;
3854 -> 3853;
3854 -> 706;
3855 -> 3852;
3855 -> 3854;
3856 -> 3855;
3856 -> 706;
3857 -> 3855;
3857 -> 706;
3858 -> 3857;
3858 -> 668;
3859 -> 3858;
3859 -> 20;
3860 -> 3859;
3860 -> 1;
}