digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 838671"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 838672"];
3 [label="param CompilationEmitTests(this) 838673"];
4 [label="param EmitMetadataTestBase(this) 838674"];
5 [label="param CSharpTestBase(this) 838675"];
6 [label="param CommonTestBase(this) 838676"];
7 [label="param TestBase(this) 838677"];
8 [label="_temp 838678"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 838679"];
10 [label="param RefAssembly_CryptoHashFailedIsOnlyReportedOnce(this) 838680"];
11 [label="var hash_resources = new[] {new ResourceDescription('hash_resource', 'snKey.snk',\n                () => new MemoryStream(TestResources.General.snKey, writable: false),\n                true)}; 838681"];
12 [label="var hash_resources = new[] {new ResourceDescription('hash_resource', 'snKey.snk',\n                () => new MemoryStream(TestResources.General.snKey, writable: false),\n                true)}; 838682"];
13 [label="new[] {new ResourceDescription('hash_resource', 'snKey.snk',\n                () => new MemoryStream(TestResources.General.snKey, writable: false),\n                true)} 838683"];
14 [label="CSharpCompilation moduleComp = CreateEmptyCompilation('',\n                options: TestOptions.DebugDll.WithDeterministic(true).WithOutputKind(OutputKind.NetModule)); 838684"];
15 [label="CSharpCompilation moduleComp = CreateEmptyCompilation('',\n                options: TestOptions.DebugDll.WithDeterministic(true).WithOutputKind(OutputKind.NetModule)); 838685"];
16 [label="param operator(string source) 838686"];
17 [label="source 838687"];
18 [label="new CSharpTestSource(source) 838688"];
19 [label="param CSharpTestSource(object value) 838689"];
20 [label="param CSharpTestSource(this) 838690"];
21 [label="Value 838691"];
22 [label="param CreateEmptyCompilation(CSharpTestSource source) 838692"];
23 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 838693"];
24 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 838694"];
25 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 838695"];
26 [label="param CreateEmptyCompilation(string assemblyName = '') 838696"];
27 [label="param CreateEmptyCompilation(string sourceFileName = '') 838697"];
28 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 838698"];
29 [label="=> CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 838699"];
30 [label="source 838700"];
31 [label="references 838701"];
32 [label="options 838702"];
33 [label="parseOptions 838703"];
34 [label="assemblyName 838704"];
35 [label="sourceFileName 838705"];
36 [label="skipUsesIsNullable 838706"];
37 [label="null 838707"];
38 [label="experimentalFeature: null 838708"];
39 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 838709"];
40 [label="param CreateCompilationCore(CSharpTestSource source) 838710"];
41 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 838711"];
42 [label="param CreateCompilationCore(CSharpCompilationOptions options) 838712"];
43 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 838713"];
44 [label="param CreateCompilationCore(string assemblyName) 838714"];
45 [label="param CreateCompilationCore(string sourceFileName) 838715"];
46 [label="param CreateCompilationCore(bool skipUsesIsNullable) 838716"];
47 [label="param CreateCompilationCore(MessageID? experimentalFeature) 838717"];
48 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 838718"];
49 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 838719"];
50 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 838720"];
51 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 838721"];
52 [label="param GetSyntaxTrees(string sourceFileName = '') 838722"];
53 [label="param GetSyntaxTrees(this) 838723"];
54 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 838724"];
55 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 838725"];
56 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 838726"];
57 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 838727"];
58 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 838728"];
59 [label="param Parse(string text) 838729"];
60 [label="param Parse(string filename = '') 838730"];
61 [label="param Parse(CSharpParseOptions options = null) 838731"];
62 [label="param Parse(Encoding encoding = null) 838732"];
63 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 838733"];
64 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 838734"];
65 [label="options = TestOptions.Regular; 838735"];
66 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 838736"];
67 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 838737"];
68 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 838738"];
69 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 838739"];
70 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 838740"];
71 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 838741"];
72 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 838742"];
73 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 838743"];
74 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 838744"];
75 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 838745"];
76 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 838746"];
77 [label="param CheckSerializable(SyntaxTree tree) 838747"];
78 [label="var stream = new MemoryStream(); 838748"];
79 [label="var root = tree.GetRoot(); 838749"];
80 [label="var root = tree.GetRoot(); 838750"];
81 [label="root.SerializeTo(stream); 838751"];
82 [label="root.SerializeTo(stream); 838752"];
83 [label="root.SerializeTo(stream); 838753"];
84 [label="stream.Position = 0; 838754"];
85 [label="stream.Position 838755"];
86 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 838756"];
87 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 838757"];
88 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 838758"];
89 [label="return tree; 838759"];
90 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 838760"];
91 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 838761"];
92 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 838762"];
93 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 838763"];
94 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 838764"];
95 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 838765"];
96 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 838766"];
97 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 838767"];
98 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 838768"];
99 [label="param ValidateIOperations(Func<Compilation> createCompilation) 838769"];
100 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 838770"];
101 [label="return; 838771"];
102 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 838772"];
103 [label="var compilation = createCompilationLambda(); 838773"];
104 [label="var compilation = createCompilationLambda(); 838774"];
105 [label="return Guid.NewGuid().ToString('D'); 838775"];
106 [label="var compilation = createCompilationLambda(); 838776"];
107 [label="OutputKind.ConsoleApplication 838777"];
108 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 838778"];
109 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 838779"];
110 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 838780"];
111 [label="OutputKind.DynamicallyLinkedLibrary 838781"];
112 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 838782"];
113 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 838783"];
114 [label="true 838784"];
115 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 838785"];
116 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 838786"];
117 [label="param Create(string? assemblyName) 838787"];
118 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 838788"];
119 [label="param Create(IEnumerable<MetadataReference>? references = null) 838789"];
120 [label="param Create(CSharpCompilationOptions? options = null) 838790"];
121 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 838791"];
122 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 838792"];
123 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 838793"];
124 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 838794"];
125 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 838795"];
126 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 838796"];
127 [label="param Create(string? assemblyName) 838797"];
128 [label="param Create(CSharpCompilationOptions options) 838798"];
129 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 838799"];
130 [label="param Create(IEnumerable<MetadataReference>? references) 838800"];
131 [label="param Create(CSharpCompilation? previousSubmission) 838801"];
132 [label="param Create(Type? returnType) 838802"];
133 [label="param Create(Type? hostObjectType) 838803"];
134 [label="param Create(bool isSubmission) 838804"];
135 [label="RoslynDebug.Assert(options != null); 838805"];
136 [label="RoslynDebug.Assert(options != null); 838806"];
137 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 838807"];
138 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 838808"];
139 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 838809"];
140 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 838810"];
141 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 838811"];
142 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 838812"];
143 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 838813"];
144 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 838814"];
145 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 838815"];
146 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 838816"];
147 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 838817"];
148 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 838818"];
149 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 838819"];
150 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 838820"];
151 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 838821"];
152 [label="param SyntaxAndDeclarationManager(string scriptClassName) 838822"];
153 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 838823"];
154 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 838824"];
155 [label="param SyntaxAndDeclarationManager(bool isSubmission) 838825"];
156 [label="param SyntaxAndDeclarationManager(State state) 838826"];
157 [label="param SyntaxAndDeclarationManager(this) 838827"];
158 [label="externalSyntaxTrees 838828"];
159 [label="scriptClassName 838829"];
160 [label="resolver 838830"];
161 [label="messageProvider 838831"];
162 [label="isSubmission 838832"];
163 [label="param SyntaxAndDeclarationManager(this) 838833"];
164 [label="param SyntaxAndDeclarationManager(this) 838834"];
165 [label="_lazyState 838835"];
166 [label="_lazyState 838836"];
167 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 838837"];
168 [label="param CSharpCompilation(string? assemblyName) 838838"];
169 [label="param CSharpCompilation(CSharpCompilationOptions options) 838839"];
170 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 838840"];
171 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 838841"];
172 [label="param CSharpCompilation(Type? submissionReturnType) 838842"];
173 [label="param CSharpCompilation(Type? hostObjectType) 838843"];
174 [label="param CSharpCompilation(bool isSubmission) 838844"];
175 [label="param CSharpCompilation(ReferenceManager? referenceManager) 838845"];
176 [label="param CSharpCompilation(bool reuseReferenceManager) 838846"];
177 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 838847"];
178 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 838848"];
179 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 838849"];
180 [label="param CSharpCompilation(this) 838850"];
181 [label="assemblyName 838851"];
182 [label="options 838852"];
183 [label="references 838853"];
184 [label="previousSubmission 838854"];
185 [label="submissionReturnType 838855"];
186 [label="hostObjectType 838856"];
187 [label="isSubmission 838857"];
188 [label="referenceManager 838858"];
189 [label="reuseReferenceManager 838859"];
190 [label="syntaxAndDeclarations 838860"];
191 [label="syntaxAndDeclarations.ExternalSyntaxTrees 838861"];
192 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 838862"];
193 [label="semanticModelProvider 838863"];
194 [label="eventQueue 838864"];
195 [label="param CSharpCompilation(this) 838865"];
196 [label="param CSharpCompilation(string? assemblyName) 838866"];
197 [label="param CSharpCompilation(CSharpCompilationOptions options) 838867"];
198 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 838868"];
199 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 838869"];
200 [label="param CSharpCompilation(Type? submissionReturnType) 838870"];
201 [label="param CSharpCompilation(Type? hostObjectType) 838871"];
202 [label="param CSharpCompilation(bool isSubmission) 838872"];
203 [label="param CSharpCompilation(ReferenceManager? referenceManager) 838873"];
204 [label="param CSharpCompilation(bool reuseReferenceManager) 838874"];
205 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 838875"];
206 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 838876"];
207 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 838877"];
208 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 838878"];
209 [label="param CSharpCompilation(this) 838879"];
210 [label="assemblyName 838880"];
211 [label="references 838881"];
212 [label="features 838882"];
213 [label="isSubmission 838883"];
214 [label="semanticModelProvider 838884"];
215 [label="eventQueue 838885"];
216 [label="param CSharpCompilation(this) 838886"];
217 [label="param CSharpCompilation(this) 838887"];
218 [label="_options 838888"];
219 [label="_globalImports 838889"];
220 [label="_previousSubmissionImports 838890"];
221 [label="_globalNamespaceAlias 838891"];
222 [label="_scriptClass 838892"];
223 [label="_lazyHostObjectTypeSymbol 838893"];
224 [label="_lazyImportInfos 838894"];
225 [label="_conversions 838895"];
226 [label="_anonymousTypeManager 838896"];
227 [label="_lazyGlobalNamespace 838897"];
228 [label="builtInOperators 838898"];
229 [label="_lazyAssemblySymbol 838899"];
230 [label="_referenceManager 838900"];
231 [label="_syntaxAndDeclarations 838901"];
232 [label="_lazyEntryPoint 838902"];
233 [label="_lazyEmitNullablePublicOnly 838903"];
234 [label="_lazyCompilationUnitCompletedTrees 838904"];
235 [label="NullableAnalysisData 838905"];
236 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 838906"];
237 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 838907"];
238 [label="_externAliasTargets 838908"];
239 [label="_moduleInitializerMethods 838909"];
240 [label="_binderFactories 838910"];
241 [label="_ignoreAccessibilityBinderFactories 838911"];
242 [label="_lazyDeclarationDiagnostics 838912"];
243 [label="_declarationDiagnosticsFrozen 838913"];
244 [label="new DiagnosticBag() 838914"];
245 [label="_additionalCodegenWarnings = new DiagnosticBag() 838915"];
246 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 838916"];
247 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 838917"];
248 [label="WellKnownMemberSignatureComparer 838918"];
249 [label="_options 838919"];
250 [label="this.builtInOperators = new BuiltInOperators(this); 838920"];
251 [label="this.builtInOperators = new BuiltInOperators(this); 838921"];
252 [label="new BuiltInOperators(this) 838922"];
253 [label="param BuiltInOperators(CSharpCompilation compilation) 838923"];
254 [label="param BuiltInOperators(this) 838924"];
255 [label="_compilation 838925"];
256 [label="_builtInUnaryOperators 838926"];
257 [label="_builtInOperators 838927"];
258 [label="_compilation 838928"];
259 [label="this.builtInOperators 838929"];
260 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 838930"];
261 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 838931"];
262 [label="_scriptClass 838932"];
263 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 838933"];
264 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 838934"];
265 [label="_globalImports 838935"];
266 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 838936"];
267 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 838937"];
268 [label="_previousSubmissionImports 838938"];
269 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 838939"];
270 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 838940"];
271 [label="_globalNamespaceAlias 838941"];
272 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 838942"];
273 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 838943"];
274 [label="_anonymousTypeManager 838944"];
275 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 838945"];
276 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 838946"];
277 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 838947"];
278 [label="LanguageVersion? result = null; 838948"];
279 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 838949"];
280 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 838950"];
281 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 838951"];
282 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 838952"];
283 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 838953"];
284 [label="this.LanguageVersion 838954"];
285 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 838955"];
286 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 838956"];
287 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 838957"];
288 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 838958"];
289 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 838959"];
290 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 838960"];
291 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 838961"];
292 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 838962"];
293 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 838963"];
294 [label="this.Options 838964"];
295 [label="get\n            {\n                return _options;\n            } 838965"];
296 [label="return _options; 838966"];
297 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 838967"];
298 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 838968"];
299 [label="_referenceManager 838969"];
300 [label="_syntaxAndDeclarations 838970"];
301 [label="Debug.Assert(_lazyAssemblySymbol is null); 838971"];
302 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 838972"];
303 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 838973"];
304 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 838974"];
305 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 838975"];
306 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 838976"];
307 [label="compilation.AddSyntaxTrees(syntaxTrees) 838977"];
308 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 838978"];
309 [label="param AddSyntaxTrees(this) 838979"];
310 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 838980"];
311 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 838981"];
312 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 838982"];
313 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 838983"];
314 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 838984"];
315 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 838985"];
316 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 838986"];
317 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 838987"];
318 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 838988"];
319 [label="bool reuseReferenceManager = true; 838989"];
320 [label="int i = 0; 838990"];
321 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 838991"];
322 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 838992"];
323 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 838993"];
324 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 838994"];
325 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 838995"];
326 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 838996"];
327 [label="externalSyntaxTrees.Add(tree); 838997"];
328 [label="externalSyntaxTrees.Add(tree); 838998"];
329 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 838999"];
330 [label="i++; 839000"];
331 [label="externalSyntaxTrees.Free(); 839001"];
332 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 839002"];
333 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 839003"];
334 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 839004"];
335 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 839005"];
336 [label="param AddSyntaxTrees(this) 839006"];
337 [label="var scriptClassName = this.ScriptClassName; 839007"];
338 [label="var resolver = this.Resolver; 839008"];
339 [label="var messageProvider = this.MessageProvider; 839009"];
340 [label="var isSubmission = this.IsSubmission; 839010"];
341 [label="var state = _lazyState; 839011"];
342 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 839012"];
343 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 839013"];
344 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 839014"];
345 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 839015"];
346 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 839016"];
347 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 839017"];
348 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 839018"];
349 [label="param WithExternalSyntaxTrees(this) 839019"];
350 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 839020"];
351 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 839021"];
352 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 839022"];
353 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 839023"];
354 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 839024"];
355 [label="param SyntaxAndDeclarationManager(string scriptClassName) 839025"];
356 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 839026"];
357 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 839027"];
358 [label="param SyntaxAndDeclarationManager(bool isSubmission) 839028"];
359 [label="param SyntaxAndDeclarationManager(State state) 839029"];
360 [label="param SyntaxAndDeclarationManager(this) 839030"];
361 [label="param SyntaxAndDeclarationManager(this) 839031"];
362 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 839032"];
363 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 839033"];
364 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 839034"];
365 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 839035"];
366 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 839036"];
367 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 839037"];
368 [label="param Update(ReferenceManager referenceManager) 839038"];
369 [label="param Update(bool reuseReferenceManager) 839039"];
370 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 839040"];
371 [label="param Update(this) 839041"];
372 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 839042"];
373 [label="this.PreviousSubmission 839043"];
374 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 839044"];
375 [label="ScriptCompilationInfo 839045"];
376 [label="ScriptCompilationInfo?.PreviousScriptCompilation 839046"];
377 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 839047"];
378 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 839048"];
379 [label="this.SubmissionReturnType 839049"];
380 [label="=> ScriptCompilationInfo 839050"];
381 [label="ScriptCompilationInfo 839051"];
382 [label="this.HostObjectType 839052"];
383 [label="=> ScriptCompilationInfo 839053"];
384 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 839054"];
385 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 839055"];
386 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 839056"];
387 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 839057"];
388 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 839058"];
389 [label="param CSharpCompilation(string? assemblyName) 839059"];
390 [label="param CSharpCompilation(CSharpCompilationOptions options) 839060"];
391 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 839061"];
392 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 839062"];
393 [label="param CSharpCompilation(Type? submissionReturnType) 839063"];
394 [label="param CSharpCompilation(Type? hostObjectType) 839064"];
395 [label="param CSharpCompilation(bool isSubmission) 839065"];
396 [label="param CSharpCompilation(ReferenceManager? referenceManager) 839066"];
397 [label="param CSharpCompilation(bool reuseReferenceManager) 839067"];
398 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 839068"];
399 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 839069"];
400 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 839070"];
401 [label="param CSharpCompilation(this) 839071"];
402 [label="previousSubmission 839072"];
403 [label="submissionReturnType 839073"];
404 [label="hostObjectType 839074"];
405 [label="syntaxAndDeclarations.ExternalSyntaxTrees 839075"];
406 [label="eventQueue 839076"];
407 [label="param CSharpCompilation(this) 839077"];
408 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 839078"];
409 [label="param CSharpCompilation(Type? submissionReturnType) 839079"];
410 [label="param CSharpCompilation(Type? hostObjectType) 839080"];
411 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 839081"];
412 [label="param CSharpCompilation(this) 839082"];
413 [label="eventQueue 839083"];
414 [label="param CSharpCompilation(this) 839084"];
415 [label="_options 839085"];
416 [label="_globalImports 839086"];
417 [label="_previousSubmissionImports 839087"];
418 [label="_globalNamespaceAlias 839088"];
419 [label="_scriptClass 839089"];
420 [label="_lazyHostObjectTypeSymbol 839090"];
421 [label="_lazyImportInfos 839091"];
422 [label="_conversions 839092"];
423 [label="_anonymousTypeManager 839093"];
424 [label="_lazyGlobalNamespace 839094"];
425 [label="builtInOperators 839095"];
426 [label="_lazyAssemblySymbol 839096"];
427 [label="_referenceManager 839097"];
428 [label="_syntaxAndDeclarations 839098"];
429 [label="_lazyEntryPoint 839099"];
430 [label="_lazyEmitNullablePublicOnly 839100"];
431 [label="_lazyCompilationUnitCompletedTrees 839101"];
432 [label="NullableAnalysisData 839102"];
433 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 839103"];
434 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 839104"];
435 [label="_externAliasTargets 839105"];
436 [label="_moduleInitializerMethods 839106"];
437 [label="_binderFactories 839107"];
438 [label="_ignoreAccessibilityBinderFactories 839108"];
439 [label="_lazyDeclarationDiagnostics 839109"];
440 [label="_declarationDiagnosticsFrozen 839110"];
441 [label="new DiagnosticBag() 839111"];
442 [label="_additionalCodegenWarnings = new DiagnosticBag() 839112"];
443 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 839113"];
444 [label="this.builtInOperators = new BuiltInOperators(this); 839114"];
445 [label="this.builtInOperators = new BuiltInOperators(this); 839115"];
446 [label="new BuiltInOperators(this) 839116"];
447 [label="param BuiltInOperators(CSharpCompilation compilation) 839117"];
448 [label="param BuiltInOperators(this) 839118"];
449 [label="_compilation 839119"];
450 [label="_builtInUnaryOperators 839120"];
451 [label="_builtInOperators 839121"];
452 [label="_compilation 839122"];
453 [label="this.builtInOperators 839123"];
454 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 839124"];
455 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 839125"];
456 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 839126"];
457 [label="LanguageVersion? result = null; 839127"];
458 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 839128"];
459 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 839129"];
460 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 839130"];
461 [label="result = version; 839131"];
462 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 839132"];
463 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 839133"];
464 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 839134"];
465 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 839135"];
466 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 839136"];
467 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 839137"];
468 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 839138"];
469 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 839139"];
470 [label="referenceManager.AssertCanReuseForCompilation(this); 839140"];
471 [label="referenceManager.AssertCanReuseForCompilation(this); 839141"];
472 [label="_referenceManager 839142"];
473 [label="Debug.Assert(_lazyAssemblySymbol is null); 839143"];
474 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 839144"];
475 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 839145"];
476 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 839146"];
477 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 839147"];
478 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 839148"];
479 [label="return compilation; 839149"];
480 [label="var compilation = createCompilationLambda(); 839150"];
481 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 839151"];
482 [label="IsNullableEnabled(compilation) 839152"];
483 [label="param IsNullableEnabled(CSharpCompilation compilation) 839153"];
484 [label="compilation.SyntaxTrees 839154"];
485 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 839155"];
486 [label="_syntaxAndDeclarations.GetLazyState() 839156"];
487 [label="param GetLazyState(this) 839157"];
488 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 839158"];
489 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 839159"];
490 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 839160"];
491 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 839161"];
492 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 839162"];
493 [label="param CreateState(string scriptClassName) 839163"];
494 [label="param CreateState(SourceReferenceResolver resolver) 839164"];
495 [label="param CreateState(CommonMessageProvider messageProvider) 839165"];
496 [label="param CreateState(bool isSubmission) 839166"];
497 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 839167"];
498 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 839168"];
499 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 839169"];
500 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 839170"];
501 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 839171"];
502 [label="var declTable = DeclarationTable.Empty; 839172"];
503 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 839173"];
504 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839174"];
505 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839175"];
506 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839176"];
507 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839177"];
508 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839178"];
509 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839179"];
510 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839180"];
511 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839181"];
512 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839182"];
513 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839183"];
514 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 839184"];
515 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 839185"];
516 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 839186"];
517 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 839187"];
518 [label="param AppendAllSyntaxTrees(string scriptClassName) 839188"];
519 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 839189"];
520 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 839190"];
521 [label="param AppendAllSyntaxTrees(bool isSubmission) 839191"];
522 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 839192"];
523 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 839193"];
524 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 839194"];
525 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 839195"];
526 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 839196"];
527 [label="var sourceCodeKind = tree.Options.Kind; 839197"];
528 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 839198"];
529 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 839199"];
530 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 839200"];
531 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 839201"];
532 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 839202"];
533 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 839203"];
534 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 839204"];
535 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 839205"];
536 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 839206"];
537 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 839207"];
538 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 839208"];
539 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 839209"];
540 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 839210"];
541 [label="declMapBuilder.Add(tree, lazyRoot); 839211"];
542 [label="declMapBuilder.Add(tree, lazyRoot); 839212"];
543 [label="declMapBuilder.Add(tree, lazyRoot); 839213"];
544 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 839214"];
545 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 839215"];
546 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 839216"];
547 [label="treesBuilder.Add(tree); 839217"];
548 [label="treesBuilder.Add(tree); 839218"];
549 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 839219"];
550 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 839220"];
551 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 839221"];
552 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 839222"];
553 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 839223"];
554 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 839224"];
555 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 839225"];
556 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 839226"];
557 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 839227"];
558 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 839228"];
559 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 839229"];
560 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 839230"];
561 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 839231"];
562 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 839232"];
563 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 839233"];
564 [label="param State(DeclarationTable declarationTable) 839234"];
565 [label="param State(this) 839235"];
566 [label="OrdinalMap 839236"];
567 [label="LoadDirectiveMap 839237"];
568 [label="LoadedSyntaxTreeMap 839238"];
569 [label="RootNamespaces 839239"];
570 [label="DeclarationTable 839240"];
571 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 839241"];
572 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 839242"];
573 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 839243"];
574 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 839244"];
575 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 839245"];
576 [label="this.SyntaxTrees 839246"];
577 [label="this.OrdinalMap 839247"];
578 [label="this.LoadDirectiveMap 839248"];
579 [label="this.LoadedSyntaxTreeMap 839249"];
580 [label="this.RootNamespaces 839250"];
581 [label="this.DeclarationTable 839251"];
582 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 839252"];
583 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 839253"];
584 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 839254"];
585 [label="return _lazyState; 839255"];
586 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 839256"];
587 [label="var trees = compilation.SyntaxTrees; 839257"];
588 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 839258"];
589 [label="var options = (CSharpParseOptions)trees[0].Options; 839259"];
590 [label="var options = (CSharpParseOptions)trees[0].Options; 839260"];
591 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 839261"];
592 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 839262"];
593 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 839263"];
594 [label="return compilation; 839264"];
595 [label="CSharpCompilation moduleComp = CreateEmptyCompilation('',\n                options: TestOptions.DebugDll.WithDeterministic(true).WithOutputKind(OutputKind.NetModule)); 839265"];
596 [label="var reference = ModuleMetadata.CreateFromImage(moduleComp.EmitToArray()).GetReference(); 839266"];
597 [label="var reference = ModuleMetadata.CreateFromImage(moduleComp.EmitToArray()).GetReference(); 839267"];
598 [label="moduleComp.EmitToArray() 839268"];
599 [label="param EmitToArray(this Compilation compilation) 839269"];
600 [label="param EmitToArray(EmitOptions options = null) 839270"];
601 [label="param EmitToArray(CompilationTestData testData = null) 839271"];
602 [label="param EmitToArray(DiagnosticDescription[] expectedWarnings = null) 839272"];
603 [label="param EmitToArray(Stream pdbStream = null) 839273"];
604 [label="param EmitToArray(IMethodSymbol debugEntryPoint = null) 839274"];
605 [label="param EmitToArray(Stream sourceLinkStream = null) 839275"];
606 [label="param EmitToArray(IEnumerable<EmbeddedText> embeddedTexts = null) 839276"];
607 [label="param EmitToArray(IEnumerable<ResourceDescription> manifestResources = null) 839277"];
608 [label="param EmitToArray(Stream metadataPEStream = null) 839278"];
609 [label="var peStream = new MemoryStream(); 839279"];
610 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 839280"];
611 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 839281"];
612 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 839282"];
613 [label="compilation.Options 839283"];
614 [label="get { return _options; } 839284"];
615 [label="return _options; 839285"];
616 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 839286"];
617 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 839287"];
618 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 839288"];
619 [label="MonoHelpers.IsRunningOnMono() 839289"];
620 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 839290"];
621 [label="if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                } 839291"];
622 [label="var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded; 839292"];
623 [label="discretePdb 839293"];
624 [label="pdbStream = discretePdb ? new MemoryStream() : null; 839294"];
625 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839295"];
626 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839296"];
627 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839297"];
628 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839298"];
629 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839299"];
630 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839300"];
631 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839301"];
632 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839302"];
633 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839303"];
634 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839304"];
635 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839305"];
636 [label="get { return _syntaxAndDeclarations.MessageProvider; } 839306"];
637 [label="return _syntaxAndDeclarations.MessageProvider; 839307"];
638 [label="param CreateModuleBuilder(EmitOptions emitOptions) 839308"];
639 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 839309"];
640 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 839310"];
641 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 839311"];
642 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 839312"];
643 [label="param CreateModuleBuilder(CompilationTestData? testData) 839313"];
644 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 839314"];
645 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 839315"];
646 [label="param CreateModuleBuilder(this) 839316"];
647 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 839317"];
648 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 839318"];
649 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 839319"];
650 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 839320"];
651 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 839321"];
652 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 839322"];
653 [label="param GetRuntimeMetadataVersion(this) 839323"];
654 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 839324"];
655 [label="GetRuntimeMetadataVersion(emitOptions) 839325"];
656 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 839326"];
657 [label="param GetRuntimeMetadataVersion(this) 839327"];
658 [label="Assembly 839328"];
659 [label="get\n            {\n                return SourceAssembly;\n            } 839329"];
660 [label="SourceAssembly 839330"];
661 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 839331"];
662 [label="GetBoundReferenceManager() 839332"];
663 [label="param GetBoundReferenceManager(this) 839333"];
664 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 839334"];
665 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 839335"];
666 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 839336"];
667 [label="get { return this.Declarations.ReferenceDirectives; } 839337"];
668 [label="this.Declarations 839338"];
669 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 839339"];
670 [label="_syntaxAndDeclarations.GetLazyState() 839340"];
671 [label="param GetLazyState(this) 839341"];
672 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 839342"];
673 [label="return this.Declarations.ReferenceDirectives; 839343"];
674 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 839344"];
675 [label="_syntaxAndDeclarations.GetLazyState() 839345"];
676 [label="Debug.Assert(_lazyAssemblySymbol is object); 839346"];
677 [label="return _referenceManager; 839347"];
678 [label="GetBoundReferenceManager(); 839348"];
679 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 839349"];
680 [label="return _lazyAssemblySymbol; 839350"];
681 [label="return SourceAssembly; 839351"];
682 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 839352"];
683 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 839353"];
684 [label="return emitOptions.RuntimeMetadataVersion; 839354"];
685 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 839355"];
686 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 839356"];
687 [label="DiagnosticBag? runtimeMDVersionDiagnostics = DiagnosticBag.GetInstance(); 839357"];
688 [label="runtimeMDVersionDiagnostics.Add(ErrorCode.WRN_NoRuntimeMetadataVersion, NoLocation.Singleton); 839358"];
689 [label="runtimeMDVersionDiagnostics.Add(ErrorCode.WRN_NoRuntimeMetadataVersion, NoLocation.Singleton); 839359"];
690 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 839360"];
691 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 839361"];
692 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 839362"];
693 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 839363"];
694 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 839364"];
695 [label="{ ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 839365"];
696 [label="s_alinkWarnings = { ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 839366"];
697 [label="param Filter(Diagnostic d) 839367"];
698 [label="param Filter(int warningLevelOption) 839368"];
699 [label="param Filter(NullableContextOptions nullableOption) 839369"];
700 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 839370"];
701 [label="param Filter(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 839371"];
702 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 839372"];
703 [label="param Filter(CancellationToken cancellationToken) 839373"];
704 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 839374"];
705 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 839375"];
706 [label="if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 839376"];
707 [label="if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 839377"];
708 [label="ReportDiagnostic reportAction; 839378"];
709 [label="bool hasPragmaSuppression; 839379"];
710 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 839380"];
711 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 839381"];
712 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 839382"];
713 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 839383"];
714 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 839384"];
715 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 839385"];
716 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 839386"];
717 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 839387"];
718 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 839388"];
719 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 839389"];
720 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 839390"];
721 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 839391"];
722 [label="GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression) 839392"];
723 [label="param GetDiagnosticReport(DiagnosticSeverity severity) 839393"];
724 [label="param GetDiagnosticReport(bool isEnabledByDefault) 839394"];
725 [label="param GetDiagnosticReport(string id) 839395"];
726 [label="param GetDiagnosticReport(int diagnosticWarningLevel) 839396"];
727 [label="param GetDiagnosticReport(Location location) 839397"];
728 [label="param GetDiagnosticReport(string category) 839398"];
729 [label="param GetDiagnosticReport(int warningLevelOption) 839399"];
730 [label="param GetDiagnosticReport(NullableContextOptions nullableOption) 839400"];
731 [label="param GetDiagnosticReport(ReportDiagnostic generalDiagnosticOption) 839401"];
732 [label="param GetDiagnosticReport(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 839402"];
733 [label="param GetDiagnosticReport(SyntaxTreeOptionsProvider? syntaxTreeOptions) 839403"];
734 [label="param GetDiagnosticReport(CancellationToken cancellationToken) 839404"];
735 [label="param GetDiagnosticReport(out bool hasPragmaSuppression) 839405"];
736 [label="hasPragmaSuppression = false; 839406"];
737 [label="Debug.Assert(location.SourceTree is null || location.SourceTree is CSharpSyntaxTree); 839407"];
738 [label="var tree = location.SourceTree as CSharpSyntaxTree; 839408"];
739 [label="var position = location.SourceSpan.Start; 839409"];
740 [label="bool isNullableFlowAnalysisWarning = ErrorFacts.NullableWarnings.Contains(id); 839410"];
741 [label="if (isNullableFlowAnalysisWarning)\n            {\n                // LAFHIS\n                Syntax.NullableContextState.State? warningsState = tree is not null ? tree.GetNullableContextState(position).WarningsState : null;\n                var nullableWarningsEnabled = warningsState switch\n                {\n                    Syntax.NullableContextState.State.Enabled => true,\n                    Syntax.NullableContextState.State.Disabled => false,\n                    Syntax.NullableContextState.State.ExplicitlyRestored => nullableOption.WarningsEnabled(),\n                    Syntax.NullableContextState.State.Unknown =>\n                        tree?.IsGeneratedCode(syntaxTreeOptions, cancellationToken) != true && nullableOption.WarningsEnabled(),\n                    null => nullableOption.WarningsEnabled(),\n                    _ => throw ExceptionUtilities.UnexpectedValue(warningsState)\n                };\n\n                if (!nullableWarningsEnabled)\n                {\n                    return ReportDiagnostic.Suppress;\n                }\n            } 839411"];
742 [label="if (diagnosticWarningLevel > warningLevelOption)  // honor the warning level\n            {\n                return ReportDiagnostic.Suppress;\n            } 839412"];
743 [label="ReportDiagnostic report; 839413"];
744 [label="bool isSpecified = false; 839414"];
745 [label="bool specifiedWarnAsErrorMinus = false; 839415"];
746 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 839416"];
747 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 839417"];
748 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 839418"];
749 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 839419"];
750 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 839420"];
751 [label="if (!isSpecified)\n            {\n                report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress;\n            } 839421"];
752 [label="isEnabledByDefault 839422"];
753 [label="report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress; 839423"];
754 [label="if (report == ReportDiagnostic.Suppress)\n            {\n                return ReportDiagnostic.Suppress;\n            } 839424"];
755 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 839425"];
756 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 839426"];
757 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Disabled)\n            {\n                hasPragmaSuppression = true;\n            } 839427"];
758 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Enabled)\n            {\n                switch (report)\n                {\n                    case ReportDiagnostic.Error:\n                    case ReportDiagnostic.Hidden:\n                    case ReportDiagnostic.Info:\n                    case ReportDiagnostic.Warn:\n                        // No need to adjust the current report state, it already means 'enabled'\n                        return report;\n\n                    case ReportDiagnostic.Suppress:\n                        // Enable the warning\n                        return ReportDiagnostic.Default;\n\n                    case ReportDiagnostic.Default:\n                        if (generalDiagnosticOption == ReportDiagnostic.Error && promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n\n                        return ReportDiagnostic.Default;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(report);\n                }\n            }\n            else if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 839428"];
759 [label="if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 839429"];
760 [label="if (report == ReportDiagnostic.Default)\n            {\n                switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                }\n            } 839430"];
761 [label="switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                } 839431"];
762 [label="return report; 839432"];
763 [label="if (hasPragmaSuppression)\n            {\n                d = d.WithIsSuppressed(true);\n            } 839433"];
764 [label="return d.WithReportDiagnostic(reportAction); 839434"];
765 [label="return d.WithReportDiagnostic(reportAction); 839435"];
766 [label="return string.Empty; 839436"];
767 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 839437"];
768 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 839438"];
769 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 839439"];
770 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 839440"];
771 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 839441"];
772 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 839442"];
773 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 839443"];
774 [label="get { return SourceAssembly.IsDelaySigned; } 839444"];
775 [label="SourceAssembly 839445"];
776 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 839446"];
777 [label="GetBoundReferenceManager() 839447"];
778 [label="return _referenceManager; 839448"];
779 [label="GetBoundReferenceManager(); 839449"];
780 [label="return _lazyAssemblySymbol; 839450"];
781 [label="return SourceAssembly.IsDelaySigned; 839451"];
782 [label="SourceAssembly.IsDelaySigned 839452"];
783 [label="get\n            {\n                return _options;\n            } 839453"];
784 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 839454"];
785 [label="Declarations 839455"];
786 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 839456"];
787 [label="_syntaxAndDeclarations.GetLazyState() 839457"];
788 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 839458"];
789 [label="return Declarations.GetMergedRoot(this); 839459"];
790 [label="return Declarations.GetMergedRoot(this); 839460"];
791 [label="return Declarations.GetMergedRoot(this); 839461"];
792 [label="_syntaxAndDeclarations.GetLazyState() 839462"];
793 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 839463"];
794 [label="=> 0x30 839464"];
795 [label="0x30 839465"];
796 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 839466"];
797 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 839467"];
798 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 839468"];
799 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 839469"];
800 [label="PEModuleBuilder moduleBeingBuilt; 839470"];
801 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 839471"];
802 [label="SourceModule 839472"];
803 [label="get\n            {\n                return Assembly.Modules[0];\n            } 839473"];
804 [label="Assembly 839474"];
805 [label="get\n            {\n                return SourceAssembly;\n            } 839475"];
806 [label="return _referenceManager; 839476"];
807 [label="GetBoundReferenceManager(); 839477"];
808 [label="return SourceAssembly; 839478"];
809 [label="return Assembly.Modules[0]; 839479"];
810 [label="return Assembly.Modules[0]; 839480"];
811 [label="moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources); 839481"];
812 [label="moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources); 839482"];
813 [label="moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources); 839483"];
814 [label="moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources); 839484"];
815 [label="moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources); 839485"];
816 [label="new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources) 839486"];
817 [label="param PENetModuleBuilder(SourceModuleSymbol sourceModule) 839487"];
818 [label="param PENetModuleBuilder(EmitOptions emitOptions) 839488"];
819 [label="param PENetModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 839489"];
820 [label="param PENetModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 839490"];
821 [label="param PENetModuleBuilder(this) 839491"];
822 [label="sourceModule 839492"];
823 [label="emitOptions 839493"];
824 [label="OutputKind.NetModule 839494"];
825 [label="serializationProperties 839495"];
826 [label="manifestResources 839496"];
827 [label="param PENetModuleBuilder(this) 839497"];
828 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 839498"];
829 [label="param PEModuleBuilder(EmitOptions emitOptions) 839499"];
830 [label="param PEModuleBuilder(OutputKind outputKind) 839500"];
831 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 839501"];
832 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 839502"];
833 [label="param PEModuleBuilder(this) 839503"];
834 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 839504"];
835 [label="sourceModule 839505"];
836 [label="serializationProperties 839506"];
837 [label="manifestResources 839507"];
838 [label="outputKind 839508"];
839 [label="emitOptions 839509"];
840 [label="new ModuleCompilationState() 839510"];
841 [label="param ModuleCompilationState(this) 839511"];
842 [label="param PEModuleBuilder(this) 839512"];
843 [label="param PEModuleBuilder(this) 839513"];
844 [label="get\n            {\n                return true;\n            } 839514"];
845 [label="return true; 839515"];
846 [label="param PEModuleBuilder(this) 839516"];
847 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 839517"];
848 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 839518"];
849 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 839519"];
850 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 839520"];
851 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 839521"];
852 [label="new ConcurrentSet<TypeSymbol>() 839522"];
853 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 839523"];
854 [label="_embeddedTypesManagerOpt 839524"];
855 [label="_metadataName 839525"];
856 [label="_fixedImplementationTypes 839526"];
857 [label="_needsGeneratedAttributes 839527"];
858 [label="_needsGeneratedAttributes_IsFrozen 839528"];
859 [label="var specifiedName = sourceModule.MetadataName; 839529"];
860 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 839530"];
861 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 839531"];
862 [label="_metadataName 839532"];
863 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 839533"];
864 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 839534"];
865 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 839535"];
866 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 839536"];
867 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 839537"];
868 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 839538"];
869 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 839539"];
870 [label="moduleBeingBuilt.SourceLinkStreamOpt 839540"];
871 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 839541"];
872 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 839542"];
873 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 839543"];
874 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 839544"];
875 [label="return moduleBeingBuilt; 839545"];
876 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 839546"];
877 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 839547"];
878 [label="param CompileMethods(bool emittingPdb) 839548"];
879 [label="param CompileMethods(bool emitMetadataOnly) 839549"];
880 [label="param CompileMethods(bool emitTestCoverageData) 839550"];
881 [label="param CompileMethods(DiagnosticBag diagnostics) 839551"];
882 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 839552"];
883 [label="param CompileMethods(CancellationToken cancellationToken) 839553"];
884 [label="param CompileMethods(this) 839554"];
885 [label="PooledHashSet<int>? excludeDiagnostics = null; 839555"];
886 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 839556"];
887 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 839557"];
888 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 839558"];
889 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 839559"];
890 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 839560"];
891 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 839561"];
892 [label="param GetDiagnostics(CompilationStage stage) 839562"];
893 [label="param GetDiagnostics(bool includeEarlierStages) 839563"];
894 [label="param GetDiagnostics(CancellationToken cancellationToken) 839564"];
895 [label="param GetDiagnostics(this) 839565"];
896 [label="var diagnostics = DiagnosticBag.GetInstance(); 839566"];
897 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 839567"];
898 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 839568"];
899 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 839569"];
900 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 839570"];
901 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 839571"];
902 [label="param GetDiagnostics(CompilationStage stage) 839572"];
903 [label="param GetDiagnostics(bool includeEarlierStages) 839573"];
904 [label="param GetDiagnostics(DiagnosticBag diagnostics) 839574"];
905 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 839575"];
906 [label="param GetDiagnostics(this) 839576"];
907 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 839577"];
908 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 839578"];
909 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 839579"];
910 [label="this.SyntaxTrees 839580"];
911 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 839581"];
912 [label="_syntaxAndDeclarations.GetLazyState() 839582"];
913 [label="param GetLazyState(this) 839583"];
914 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 839584"];
915 [label="var syntaxTrees = this.SyntaxTrees; 839585"];
916 [label="this.Options 839586"];
917 [label="get\n            {\n                return _options;\n            } 839587"];
918 [label="return _options; 839588"];
919 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 839589"];
920 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 839590"];
921 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 839591"];
922 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 839592"];
923 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 839593"];
924 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 839594"];
925 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 839595"];
926 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 839596"];
927 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 839597"];
928 [label="ImmutableArray<LoadDirective> loadDirectives; 839598"];
929 [label="loadDirectives 839599"];
930 [label="syntaxAndDeclarations.GetLazyState() 839600"];
931 [label="param GetLazyState(this) 839601"];
932 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 839602"];
933 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 839603"];
934 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 839604"];
935 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 839605"];
936 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 839606"];
937 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 839607"];
938 [label="cancellationToken.ThrowIfCancellationRequested(); 839608"];
939 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 839609"];
940 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 839610"];
941 [label="CheckAssemblyName(builder); 839611"];
942 [label="CheckAssemblyName(builder); 839612"];
943 [label="CheckAssemblyName(builder); 839613"];
944 [label="Options 839614"];
945 [label="get\n            {\n                return _options;\n            } 839615"];
946 [label="return _options; 839616"];
947 [label="builder.AddRange(Options.Errors); 839617"];
948 [label="Options 839618"];
949 [label="get\n            {\n                return _options;\n            } 839619"];
950 [label="return _options; 839620"];
951 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 839621"];
952 [label="cancellationToken.ThrowIfCancellationRequested(); 839622"];
953 [label="GetBoundReferenceManager() 839623"];
954 [label="param GetBoundReferenceManager(this) 839624"];
955 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 839625"];
956 [label="return _referenceManager; 839626"];
957 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 839627"];
958 [label="cancellationToken.ThrowIfCancellationRequested(); 839628"];
959 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 839629"];
960 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 839630"];
961 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 839631"];
962 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 839632"];
963 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 839633"];
964 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 839634"];
965 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 839635"];
966 [label="param GetSourceDeclarationDiagnostics(this) 839636"];
967 [label="GlobalImports 839637"];
968 [label="=> _globalImports.Value 839638"];
969 [label="_globalImports.Value 839639"];
970 [label="_globalImports.Value 839640"];
971 [label="=> Imports.FromGlobalUsings(this) 839641"];
972 [label="this 839642"];
973 [label="Imports.FromGlobalUsings(this) 839643"];
974 [label="Imports.FromGlobalUsings(this) 839644"];
975 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 839645"];
976 [label="ScriptCompilationInfo 839646"];
977 [label="ScriptCompilationInfo?.PreviousScriptCompilation 839647"];
978 [label="GlobalImports.Complete(cancellationToken); 839648"];
979 [label="GlobalImports.Complete(cancellationToken); 839649"];
980 [label="GlobalImports.Complete(cancellationToken); 839650"];
981 [label="SourceLocation? location = null; 839651"];
982 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 839652"];
983 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 839653"];
984 [label="Assembly 839654"];
985 [label="get\n            {\n                return SourceAssembly;\n            } 839655"];
986 [label="SourceAssembly 839656"];
987 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 839657"];
988 [label="GetBoundReferenceManager() 839658"];
989 [label="param GetBoundReferenceManager(this) 839659"];
990 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 839660"];
991 [label="return _referenceManager; 839661"];
992 [label="GetBoundReferenceManager(); 839662"];
993 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 839663"];
994 [label="Assembly.ForceComplete(location, cancellationToken); 839664"];
995 [label="Assembly.ForceComplete(location, cancellationToken); 839665"];
996 [label="Assembly.ForceComplete(location, cancellationToken); 839666"];
997 [label="Assembly.ForceComplete(location, cancellationToken); 839667"];
998 [label="Assembly.ForceComplete(location, cancellationToken); 839668"];
999 [label="Declarations 839669"];
1000 [label="_syntaxAndDeclarations.GetLazyState() 839670"];
1001 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 839671"];
1002 [label="return Declarations.GetMergedRoot(this); 839672"];
1003 [label="_syntaxAndDeclarations.GetLazyState() 839673"];
1004 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 839674"];
1005 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 839675"];
1006 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 839676"];
1007 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 839677"];
1008 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 839678"];
1009 [label="var diagnostics = new DiagnosticBag(); 839679"];
1010 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 839680"];
1011 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 839681"];
1012 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 839682"];
1013 [label="return _lazyDeclarationDiagnostics; 839683"];
1014 [label="param SymbolDeclaredEvent(Symbol symbol) 839684"];
1015 [label="param SymbolDeclaredEvent(this) 839685"];
1016 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 839686"];
1017 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 839687"];
1018 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 839688"];
1019 [label="_declarationDiagnosticsFrozen = true; 839689"];
1020 [label="_declarationDiagnosticsFrozen 839690"];
1021 [label="_needsGeneratedAttributes_IsFrozen = true; 839691"];
1022 [label="_needsGeneratedAttributes_IsFrozen 839692"];
1023 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 839693"];
1024 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 839694"];
1025 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 839695"];
1026 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 839696"];
1027 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 839697"];
1028 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 839698"];
1029 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 839699"];
1030 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 839700"];
1031 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 839701"];
1032 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 839702"];
1033 [label="param GetClsComplianceDiagnostics(this) 839703"];
1034 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 839704"];
1035 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 839705"];
1036 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 839706"];
1037 [label="var builder = DiagnosticBag.GetInstance(); 839707"];
1038 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 839708"];
1039 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 839709"];
1040 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 839710"];
1041 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 839711"];
1042 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 839712"];
1043 [label="param CheckCompliance(CSharpCompilation compilation) 839713"];
1044 [label="param CheckCompliance(DiagnosticBag diagnostics) 839714"];
1045 [label="param CheckCompliance(CancellationToken cancellationToken) 839715"];
1046 [label="param CheckCompliance(SyntaxTree filterTree = null) 839716"];
1047 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 839717"];
1048 [label="var queue = new ConcurrentQueue<Diagnostic>(); 839718"];
1049 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 839719"];
1050 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 839720"];
1051 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 839721"];
1052 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 839722"];
1053 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 839723"];
1054 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 839724"];
1055 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 839725"];
1056 [label="param ClsComplianceChecker(CSharpCompilation compilation) 839726"];
1057 [label="param ClsComplianceChecker(SyntaxTree filterTree) 839727"];
1058 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 839728"];
1059 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 839729"];
1060 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 839730"];
1061 [label="param ClsComplianceChecker(this) 839731"];
1062 [label="param ClsComplianceChecker(this) 839732"];
1063 [label="_compilation 839733"];
1064 [label="_filterTree 839734"];
1065 [label="_filterSpanWithinTree 839735"];
1066 [label="_diagnostics 839736"];
1067 [label="_declaredOrInheritedCompliance 839737"];
1068 [label="_compilerTasks 839738"];
1069 [label="_compilation 839739"];
1070 [label="_filterTree 839740"];
1071 [label="_filterSpanWithinTree 839741"];
1072 [label="_diagnostics 839742"];
1073 [label="_cancellationToken 839743"];
1074 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 839744"];
1075 [label="_declaredOrInheritedCompliance 839745"];
1076 [label="ConcurrentAnalysis 839746"];
1077 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 839747"];
1078 [label="null 839748"];
1079 [label="_filterTree == null 839749"];
1080 [label="_compilation.Options 839750"];
1081 [label="get\n            {\n                return _options;\n            } 839751"];
1082 [label="return _options; 839752"];
1083 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 839753"];
1084 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 839754"];
1085 [label="_compilerTasks = new ConcurrentStack<Task>(); 839755"];
1086 [label="_compilerTasks 839756"];
1087 [label="compilation.Assembly 839757"];
1088 [label="get\n            {\n                return SourceAssembly;\n            } 839758"];
1089 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 839759"];
1090 [label="return _referenceManager; 839760"];
1091 [label="GetBoundReferenceManager(); 839761"];
1092 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 839762"];
1093 [label="checker.Visit(compilation.Assembly); 839763"];
1094 [label="checker.Visit(compilation.Assembly); 839764"];
1095 [label="checker.Visit(compilation.Assembly); 839765"];
1096 [label="param VisitAssembly(AssemblySymbol symbol) 839766"];
1097 [label="param VisitAssembly(this) 839767"];
1098 [label="_cancellationToken.ThrowIfCancellationRequested(); 839768"];
1099 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 839769"];
1100 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 839770"];
1101 [label="GetDeclaredOrInheritedCompliance(symbol) 839771"];
1102 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 839772"];
1103 [label="param GetDeclaredOrInheritedCompliance(this) 839773"];
1104 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 839774"];
1105 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 839775"];
1106 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 839776"];
1107 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 839777"];
1108 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 839778"];
1109 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 839779"];
1110 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 839780"];
1111 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 839781"];
1112 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 839782"];
1113 [label="Compliance compliance; 839783"];
1114 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 839784"];
1115 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 839785"];
1116 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 839786"];
1117 [label="Location ignoredLocation; 839787"];
1118 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 839788"];
1119 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 839789"];
1120 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 839790"];
1121 [label="param GetDeclaredCompliance(Symbol symbol) 839791"];
1122 [label="param GetDeclaredCompliance(out Location attributeLocation) 839792"];
1123 [label="param GetDeclaredCompliance(this) 839793"];
1124 [label="attributeLocation = null; 839794"];
1125 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 839795"];
1126 [label="return null; 839796"];
1127 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 839797"];
1128 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 839798"];
1129 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 839799"];
1130 [label="compliance = Compliance.ImpliedFalse; 839800"];
1131 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 839801"];
1132 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 839802"];
1133 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 839803"];
1134 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 839804"];
1135 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 839805"];
1136 [label="IsTrue(assemblyCompliance) 839806"];
1137 [label="param IsTrue(Compliance compliance) 839807"];
1138 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 839808"];
1139 [label="return false; 839809"];
1140 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 839810"];
1141 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 839811"];
1142 [label="ModuleSymbol module = symbol.Modules[i]; 839812"];
1143 [label="Location attributeLocation; 839813"];
1144 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 839814"];
1145 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 839815"];
1146 [label="GetDeclaredCompliance(module, out attributeLocation) 839816"];
1147 [label="param GetDeclaredCompliance(Symbol symbol) 839817"];
1148 [label="param GetDeclaredCompliance(out Location attributeLocation) 839818"];
1149 [label="param GetDeclaredCompliance(this) 839819"];
1150 [label="attributeLocation = null; 839820"];
1151 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 839821"];
1152 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 839822"];
1153 [label="i == 0 839823"];
1154 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 839824"];
1155 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 839825"];
1156 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 839826"];
1157 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 839827"];
1158 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 839828"];
1159 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 839829"];
1160 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 839830"];
1161 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 839831"];
1162 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 839832"];
1163 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 839833"];
1164 [label="GetDeclaredOrInheritedCompliance(sourceModule) 839834"];
1165 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 839835"];
1166 [label="param GetDeclaredOrInheritedCompliance(this) 839836"];
1167 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 839837"];
1168 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 839838"];
1169 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 839839"];
1170 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 839840"];
1171 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 839841"];
1172 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 839842"];
1173 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 839843"];
1174 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 839844"];
1175 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 839845"];
1176 [label="Compliance compliance; 839846"];
1177 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 839847"];
1178 [label="Location ignoredLocation; 839848"];
1179 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 839849"];
1180 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 839850"];
1181 [label="param GetDeclaredCompliance(out Location attributeLocation) 839851"];
1182 [label="param GetDeclaredCompliance(this) 839852"];
1183 [label="attributeLocation = null; 839853"];
1184 [label="return null; 839854"];
1185 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 839855"];
1186 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 839856"];
1187 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 839857"];
1188 [label="GetInheritedCompliance(symbol) 839858"];
1189 [label="param GetInheritedCompliance(Symbol symbol) 839859"];
1190 [label="param GetInheritedCompliance(this) 839860"];
1191 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 839861"];
1192 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 839862"];
1193 [label="System.Diagnostics.Debug.Assert((object)containing != null); 839863"];
1194 [label="System.Diagnostics.Debug.Assert((object)containing != null); 839864"];
1195 [label="return GetDeclaredOrInheritedCompliance(containing); 839865"];
1196 [label="GetDeclaredOrInheritedCompliance(containing) 839866"];
1197 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 839867"];
1198 [label="param GetDeclaredOrInheritedCompliance(this) 839868"];
1199 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 839869"];
1200 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 839870"];
1201 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 839871"];
1202 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 839872"];
1203 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 839873"];
1204 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 839874"];
1205 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 839875"];
1206 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 839876"];
1207 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 839877"];
1208 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 839878"];
1209 [label="return compliance; 839879"];
1210 [label="IsTrue(GetInheritedCompliance(symbol)) 839880"];
1211 [label="param IsTrue(Compliance compliance) 839881"];
1212 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 839882"];
1213 [label="return false; 839883"];
1214 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 839884"];
1215 [label="param IsTrue(Compliance compliance) 839885"];
1216 [label="Visit(symbol.GlobalNamespace); 839886"];
1217 [label="Visit(symbol.GlobalNamespace); 839887"];
1218 [label="param VisitNamespace(NamespaceSymbol symbol) 839888"];
1219 [label="param VisitNamespace(this) 839889"];
1220 [label="_cancellationToken.ThrowIfCancellationRequested(); 839890"];
1221 [label="if (DoNotVisit(symbol)) return; 839891"];
1222 [label="DoNotVisit(symbol) 839892"];
1223 [label="param DoNotVisit(Symbol symbol) 839893"];
1224 [label="param DoNotVisit(this) 839894"];
1225 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 839895"];
1226 [label="return false; 839896"];
1227 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 839897"];
1228 [label="GetDeclaredOrInheritedCompliance(symbol) 839898"];
1229 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 839899"];
1230 [label="param GetDeclaredOrInheritedCompliance(this) 839900"];
1231 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 839901"];
1232 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 839902"];
1233 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 839903"];
1234 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 839904"];
1235 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 839905"];
1236 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 839906"];
1237 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 839907"];
1238 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 839908"];
1239 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 839909"];
1240 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 839910"];
1241 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 839911"];
1242 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 839912"];
1243 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 839913"];
1244 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 839914"];
1245 [label="return compliance; 839915"];
1246 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 839916"];
1247 [label="param IsTrue(Compliance compliance) 839917"];
1248 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 839918"];
1249 [label="return false; 839919"];
1250 [label="ConcurrentAnalysis 839920"];
1251 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 839921"];
1252 [label="null 839922"];
1253 [label="_filterTree == null 839923"];
1254 [label="_compilation.Options 839924"];
1255 [label="get\n            {\n                return _options;\n            } 839925"];
1256 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 839926"];
1257 [label="VisitNamespaceMembersAsTasks(symbol); 839927"];
1258 [label="VisitNamespaceMembersAsTasks(symbol) 839928"];
1259 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 839929"];
1260 [label="param VisitNamespaceMembersAsTasks(this) 839930"];
1261 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 839931"];
1262 [label="VisitNamespaceMembersAsTasks(symbol); 839932"];
1263 [label="checker.WaitForWorkers() 839933"];
1264 [label="param WaitForWorkers(this) 839934"];
1265 [label="var tasks = _compilerTasks; 839935"];
1266 [label="if (tasks == null)\n            {\n                return;\n            } 839936"];
1267 [label="if (tasks == null)\n            {\n                return;\n            } 839937"];
1268 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 839938"];
1269 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 839939"];
1270 [label="checker.WaitForWorkers(); 839940"];
1271 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 839941"];
1272 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 839942"];
1273 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 839943"];
1274 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 839944"];
1275 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 839945"];
1276 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 839946"];
1277 [label="return _lazyClsComplianceDiagnostics; 839947"];
1278 [label="return result.AsImmutable().Concat(clsDiagnostics); 839948"];
1279 [label="return result.AsImmutable().Concat(clsDiagnostics); 839949"];
1280 [label="return result.AsImmutable().Concat(clsDiagnostics); 839950"];
1281 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 839951"];
1282 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 839952"];
1283 [label="cancellationToken.ThrowIfCancellationRequested(); 839953"];
1284 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 839954"];
1285 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 839955"];
1286 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 839956"];
1287 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 839957"];
1288 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 839958"];
1289 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 839959"];
1290 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 839960"];
1291 [label="return diagnostics.ToReadOnlyAndFree(); 839961"];
1292 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 839962"];
1293 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 839963"];
1294 [label="excludeDiagnostics?.Free(); 839964"];
1295 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 839965"];
1296 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 839966"];
1297 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 839967"];
1298 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 839968"];
1299 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 839969"];
1300 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 839970"];
1301 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 839971"];
1302 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 839972"];
1303 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 839973"];
1304 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 839974"];
1305 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 839975"];
1306 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 839976"];
1307 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 839977"];
1308 [label="param CompileMethodBodies(CSharpCompilation compilation) 839978"];
1309 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 839979"];
1310 [label="param CompileMethodBodies(bool emittingPdb) 839980"];
1311 [label="param CompileMethodBodies(bool emitTestCoverageData) 839981"];
1312 [label="param CompileMethodBodies(bool hasDeclarationErrors) 839982"];
1313 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 839983"];
1314 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 839984"];
1315 [label="param CompileMethodBodies(CancellationToken cancellationToken) 839985"];
1316 [label="Debug.Assert(compilation != null); 839986"];
1317 [label="Debug.Assert(compilation != null); 839987"];
1318 [label="Debug.Assert(diagnostics != null); 839988"];
1319 [label="Debug.Assert(diagnostics != null); 839989"];
1320 [label="compilation.PreviousSubmission 839990"];
1321 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 839991"];
1322 [label="ScriptCompilationInfo 839992"];
1323 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 839993"];
1324 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 839994"];
1325 [label="MethodSymbol entryPoint = null; 839995"];
1326 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 839996"];
1327 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 839997"];
1328 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 839998"];
1329 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 839999"];
1330 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 840000"];
1331 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 840001"];
1332 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 840002"];
1333 [label="param GetEntryPoint(CSharpCompilation compilation) 840003"];
1334 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 840004"];
1335 [label="param GetEntryPoint(bool hasDeclarationErrors) 840005"];
1336 [label="param GetEntryPoint(DiagnosticBag diagnostics) 840006"];
1337 [label="param GetEntryPoint(CancellationToken cancellationToken) 840007"];
1338 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 840008"];
1339 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 840009"];
1340 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 840010"];
1341 [label="param GetEntryPointAndDiagnostics(this) 840011"];
1342 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 840012"];
1343 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 840013"];
1344 [label="EntryPoint? entryPoint; 840014"];
1345 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 840015"];
1346 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 840016"];
1347 [label="GetBoundReferenceManager(); 840017"];
1348 [label="this.Options 840018"];
1349 [label="return _options; 840019"];
1350 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 840020"];
1351 [label="this.ScriptClass 840021"];
1352 [label="get { return _scriptClass.Value; } 840022"];
1353 [label="return _scriptClass.Value; 840023"];
1354 [label="_scriptClass.Value 840024"];
1355 [label="param BindScriptClass(this) 840025"];
1356 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 840026"];
1357 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 840027"];
1358 [label="get { return this.SourceModule.GetPublicSymbol(); } 840028"];
1359 [label="this.SourceModule 840029"];
1360 [label="get\n            {\n                return Assembly.Modules[0];\n            } 840030"];
1361 [label="GetBoundReferenceManager(); 840031"];
1362 [label="return this.SourceModule.GetPublicSymbol(); 840032"];
1363 [label="get\n            {\n                return this.SyntaxTrees;\n            } 840033"];
1364 [label="this.SyntaxTrees 840034"];
1365 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 840035"];
1366 [label="param GetLazyState(this) 840036"];
1367 [label="return this.SyntaxTrees; 840037"];
1368 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 840038"];
1369 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 840039"];
1370 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 840040"];
1371 [label="null 840041"];
1372 [label="ImmutableArray<Diagnostic>.Empty 840042"];
1373 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 840043"];
1374 [label="param EntryPoint(MethodSymbol? methodSymbol) 840044"];
1375 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 840045"];
1376 [label="param EntryPoint(this) 840046"];
1377 [label="MethodSymbol 840047"];
1378 [label="this.MethodSymbol 840048"];
1379 [label="this.Diagnostics 840049"];
1380 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 840050"];
1381 [label="entryPoint = EntryPoint.None; 840051"];
1382 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 840052"];
1383 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 840053"];
1384 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 840054"];
1385 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 840055"];
1386 [label="return _lazyEntryPoint; 840056"];
1387 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 840057"];
1388 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 840058"];
1389 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 840059"];
1390 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 840060"];
1391 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 840061"];
1392 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 840062"];
1393 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 840063"];
1394 [label="return null; 840064"];
1395 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 840065"];
1396 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 840066"];
1397 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 840067"];
1398 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 840068"];
1399 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 840069"];
1400 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 840070"];
1401 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 840071"];
1402 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 840072"];
1403 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 840073"];
1404 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 840074"];
1405 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 840075"];
1406 [label="param MethodCompiler(CSharpCompilation compilation) 840076"];
1407 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 840077"];
1408 [label="param MethodCompiler(bool emittingPdb) 840078"];
1409 [label="param MethodCompiler(bool emitTestCoverageData) 840079"];
1410 [label="param MethodCompiler(bool hasDeclarationErrors) 840080"];
1411 [label="param MethodCompiler(DiagnosticBag diagnostics) 840081"];
1412 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 840082"];
1413 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 840083"];
1414 [label="param MethodCompiler(CancellationToken cancellationToken) 840084"];
1415 [label="param MethodCompiler(this) 840085"];
1416 [label="param MethodCompiler(this) 840086"];
1417 [label="_compilation 840087"];
1418 [label="_emittingPdb 840088"];
1419 [label="_emitTestCoverageData 840089"];
1420 [label="_diagnostics 840090"];
1421 [label="_hasDeclarationErrors 840091"];
1422 [label="_moduleBeingBuiltOpt 840092"];
1423 [label="_filterOpt 840093"];
1424 [label="_debugDocumentProvider 840094"];
1425 [label="_entryPointOpt 840095"];
1426 [label="_compilerTasks 840096"];
1427 [label="_globalHasErrors 840097"];
1428 [label="Debug.Assert(compilation != null); 840098"];
1429 [label="Debug.Assert(compilation != null); 840099"];
1430 [label="Debug.Assert(diagnostics != null); 840100"];
1431 [label="Debug.Assert(diagnostics != null); 840101"];
1432 [label="_compilation 840102"];
1433 [label="_moduleBeingBuiltOpt 840103"];
1434 [label="_emittingPdb 840104"];
1435 [label="_cancellationToken 840105"];
1436 [label="_diagnostics 840106"];
1437 [label="_filterOpt 840107"];
1438 [label="_entryPointOpt 840108"];
1439 [label="_hasDeclarationErrors 840109"];
1440 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 840110"];
1441 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 840111"];
1442 [label="param SetGlobalErrorIfTrue(bool arg) 840112"];
1443 [label="param SetGlobalErrorIfTrue(this) 840113"];
1444 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 840114"];
1445 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 840115"];
1446 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 840116"];
1447 [label="_emitTestCoverageData 840117"];
1448 [label="compilation.Options 840118"];
1449 [label="get\n            {\n                return _options;\n            } 840119"];
1450 [label="return _options; 840120"];
1451 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 840121"];
1452 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 840122"];
1453 [label="methodCompiler._compilerTasks 840123"];
1454 [label="compilation.SourceModule 840124"];
1455 [label="get\n            {\n                return Assembly.Modules[0];\n            } 840125"];
1456 [label="Assembly 840126"];
1457 [label="get\n            {\n                return SourceAssembly;\n            } 840127"];
1458 [label="SourceAssembly 840128"];
1459 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 840129"];
1460 [label="GetBoundReferenceManager() 840130"];
1461 [label="param GetBoundReferenceManager(this) 840131"];
1462 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 840132"];
1463 [label="return _referenceManager; 840133"];
1464 [label="GetBoundReferenceManager(); 840134"];
1465 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 840135"];
1466 [label="return Assembly.Modules[0]; 840136"];
1467 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 840137"];
1468 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 840138"];
1469 [label="param CompileNamespace(NamespaceSymbol symbol) 840139"];
1470 [label="param CompileNamespace(this) 840140"];
1471 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 840141"];
1472 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 840142"];
1473 [label="methodCompiler.WaitForWorkers() 840143"];
1474 [label="param WaitForWorkers(this) 840144"];
1475 [label="var tasks = _compilerTasks; 840145"];
1476 [label="if (tasks == null)\n            {\n                return;\n            } 840146"];
1477 [label="if (tasks == null)\n            {\n                return;\n            } 840147"];
1478 [label="Task curTask; 840148"];
1479 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 840149"];
1480 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 840150"];
1481 [label="methodCompiler.WaitForWorkers(); 840151"];
1482 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 840152"];
1483 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 840153"];
1484 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 840154"];
1485 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 840155"];
1486 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 840156"];
1487 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 840157"];
1488 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 840158"];
1489 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 840159"];
1490 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 840160"];
1491 [label="param CompileSynthesizedMethods(this) 840161"];
1492 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 840162"];
1493 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 840163"];
1494 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 840164"];
1495 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 840165"];
1496 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 840166"];
1497 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 840167"];
1498 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 840168"];
1499 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 840169"];
1500 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 840170"];
1501 [label="param CompileSynthesizedMethods(this) 840171"];
1502 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 840172"];
1503 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 840173"];
1504 [label="compilation.AnonymousTypeManager 840174"];
1505 [label="get\n            {\n                return _anonymousTypeManager;\n            } 840175"];
1506 [label="return _anonymousTypeManager; 840176"];
1507 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 840177"];
1508 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 840178"];
1509 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 840179"];
1510 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 840180"];
1511 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 840181"];
1512 [label="param GetPreviousAnonymousTypes(this) 840182"];
1513 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 840183"];
1514 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 840184"];
1515 [label="get { return _metadataName; } 840185"];
1516 [label="return _metadataName; 840186"];
1517 [label="param GetNextAnonymousTypeIndex(this) 840187"];
1518 [label="return 0; 840188"];
1519 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 840189"];
1520 [label="methodCompiler.WaitForWorkers() 840190"];
1521 [label="param WaitForWorkers(this) 840191"];
1522 [label="var tasks = _compilerTasks; 840192"];
1523 [label="if (tasks == null)\n            {\n                return;\n            } 840193"];
1524 [label="if (tasks == null)\n            {\n                return;\n            } 840194"];
1525 [label="Task curTask; 840195"];
1526 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 840196"];
1527 [label="methodCompiler.WaitForWorkers(); 840197"];
1528 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 840198"];
1529 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 840199"];
1530 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 840200"];
1531 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 840201"];
1532 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 840202"];
1533 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 840203"];
1534 [label="compilation.AdditionalCodegenWarnings 840204"];
1535 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 840205"];
1536 [label="return _additionalCodegenWarnings; 840206"];
1537 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 840207"];
1538 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 840208"];
1539 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 840209"];
1540 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 840210"];
1541 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 840211"];
1542 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 840212"];
1543 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 840213"];
1544 [label="param WarnUnusedFields(CSharpCompilation compilation) 840214"];
1545 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 840215"];
1546 [label="param WarnUnusedFields(CancellationToken cancellationToken) 840216"];
1547 [label="compilation.Assembly 840217"];
1548 [label="get\n            {\n                return SourceAssembly;\n            } 840218"];
1549 [label="SourceAssembly 840219"];
1550 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 840220"];
1551 [label="GetBoundReferenceManager() 840221"];
1552 [label="param GetBoundReferenceManager(this) 840222"];
1553 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 840223"];
1554 [label="return _referenceManager; 840224"];
1555 [label="GetBoundReferenceManager(); 840225"];
1556 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 840226"];
1557 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 840227"];
1558 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 840228"];
1559 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 840229"];
1560 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 840230"];
1561 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 840231"];
1562 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 840232"];
1563 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 840233"];
1564 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 840234"];
1565 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 840235"];
1566 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 840236"];
1567 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 840237"];
1568 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 840238"];
1569 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 840239"];
1570 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 840240"];
1571 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 840241"];
1572 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 840242"];
1573 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 840243"];
1574 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 840244"];
1575 [label="param GenerateModuleInitializer(this) 840245"];
1576 [label="Debug.Assert(_declarationDiagnosticsFrozen); 840246"];
1577 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 840247"];
1578 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 840248"];
1579 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 840249"];
1580 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 840250"];
1581 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 840251"];
1582 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 840252"];
1583 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 840253"];
1584 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 840254"];
1585 [label="return true; 840255"];
1586 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 840256"];
1587 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 840257"];
1588 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 840258"];
1589 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 840259"];
1590 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 840260"];
1591 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 840261"];
1592 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 840262"];
1593 [label="param GenerateResourcesAndDocumentationComments(this) 840263"];
1594 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 840264"];
1595 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 840265"];
1596 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 840266"];
1597 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 840267"];
1598 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 840268"];
1599 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 840269"];
1600 [label="SourceAssembly 840270"];
1601 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 840271"];
1602 [label="GetBoundReferenceManager() 840272"];
1603 [label="param GetBoundReferenceManager(this) 840273"];
1604 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 840274"];
1605 [label="return _referenceManager; 840275"];
1606 [label="GetBoundReferenceManager(); 840276"];
1607 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 840277"];
1608 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 840278"];
1609 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 840279"];
1610 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 840280"];
1611 [label="AddedModulesResourceNames(resourceDiagnostics) 840281"];
1612 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 840282"];
1613 [label="param AddedModulesResourceNames(this) 840283"];
1614 [label="SourceAssembly 840284"];
1615 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 840285"];
1616 [label="GetBoundReferenceManager() 840286"];
1617 [label="param GetBoundReferenceManager(this) 840287"];
1618 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 840288"];
1619 [label="return _referenceManager; 840289"];
1620 [label="GetBoundReferenceManager(); 840290"];
1621 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 840291"];
1622 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 840292"];
1623 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 840293"];
1624 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 840294"];
1625 [label="param AddedModulesResourceNames(this) 840295"];
1626 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 840296"];
1627 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 840297"];
1628 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 840298"];
1629 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 840299"];
1630 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 840300"];
1631 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 840301"];
1632 [label="cancellationToken.ThrowIfCancellationRequested(); 840302"];
1633 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 840303"];
1634 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 840304"];
1635 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 840305"];
1636 [label="new[] { '\\r\\n', '\\r', '\\n' } 840306"];
1637 [label="'\\r\\n' 840307"];
1638 [label="'\\r' 840308"];
1639 [label="'\\n' 840309"];
1640 [label="new[] { '\\r\\n', '\\r', '\\n' } 840310"];
1641 [label="new[] { '\\r\\n', '\\r', '\\n' } 840311"];
1642 [label="new[] { '\\r\\n', '\\r', '\\n' } 840312"];
1643 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 840313"];
1644 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 840314"];
1645 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 840315"];
1646 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 840316"];
1647 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 840317"];
1648 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 840318"];
1649 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 840319"];
1650 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 840320"];
1651 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 840321"];
1652 [label="param WriteDocumentationCommentXml(string? assemblyName) 840322"];
1653 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 840323"];
1654 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 840324"];
1655 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 840325"];
1656 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 840326"];
1657 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 840327"];
1658 [label="StreamWriter writer = null; 840328"];
1659 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 840329"];
1660 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 840330"];
1661 [label="compilation.SourceAssembly 840331"];
1662 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 840332"];
1663 [label="GetBoundReferenceManager() 840333"];
1664 [label="param GetBoundReferenceManager(this) 840334"];
1665 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 840335"];
1666 [label="return _referenceManager; 840336"];
1667 [label="GetBoundReferenceManager(); 840337"];
1668 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 840338"];
1669 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 840339"];
1670 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 840340"];
1671 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 840341"];
1672 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 840342"];
1673 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 840343"];
1674 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 840344"];
1675 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 840345"];
1676 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 840346"];
1677 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 840347"];
1678 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 840348"];
1679 [label="param DocumentationCommentCompiler(string assemblyName) 840349"];
1680 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 840350"];
1681 [label="param DocumentationCommentCompiler(TextWriter writer) 840351"];
1682 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 840352"];
1683 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 840353"];
1684 [label="param DocumentationCommentCompiler(bool processIncludes) 840354"];
1685 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 840355"];
1686 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 840356"];
1687 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 840357"];
1688 [label="param DocumentationCommentCompiler(this) 840358"];
1689 [label="param DocumentationCommentCompiler(this) 840359"];
1690 [label="_assemblyName 840360"];
1691 [label="_compilation 840361"];
1692 [label="_writer 840362"];
1693 [label="_filterTree 840363"];
1694 [label="_filterSpanWithinTree 840364"];
1695 [label="_processIncludes 840365"];
1696 [label="_isForSingleSymbol 840366"];
1697 [label="_diagnostics 840367"];
1698 [label="_lazyComparer 840368"];
1699 [label="_includedFileCache 840369"];
1700 [label="_indentDepth 840370"];
1701 [label="_temporaryStringBuilders 840371"];
1702 [label="_assemblyName 840372"];
1703 [label="_compilation 840373"];
1704 [label="_writer 840374"];
1705 [label="_filterTree 840375"];
1706 [label="_filterSpanWithinTree 840376"];
1707 [label="_processIncludes 840377"];
1708 [label="_isForSingleSymbol 840378"];
1709 [label="_diagnostics 840379"];
1710 [label="_cancellationToken 840380"];
1711 [label="compilation.SourceAssembly 840381"];
1712 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 840382"];
1713 [label="GetBoundReferenceManager() 840383"];
1714 [label="param GetBoundReferenceManager(this) 840384"];
1715 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 840385"];
1716 [label="return _referenceManager; 840386"];
1717 [label="GetBoundReferenceManager(); 840387"];
1718 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 840388"];
1719 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 840389"];
1720 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 840390"];
1721 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 840391"];
1722 [label="param VisitNamespace(NamespaceSymbol symbol) 840392"];
1723 [label="param VisitNamespace(this) 840393"];
1724 [label="_cancellationToken.ThrowIfCancellationRequested(); 840394"];
1725 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 840395"];
1726 [label="Debug.Assert(_assemblyName != null); 840396"];
1727 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 840397"];
1728 [label="WriteLine('<?xml version=\\'1.0\\'?>') 840398"];
1729 [label="param WriteLine(string message) 840399"];
1730 [label="param WriteLine(this) 840400"];
1731 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840401"];
1732 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840402"];
1733 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840403"];
1734 [label="WriteLine('<doc>'); 840404"];
1735 [label="WriteLine('<doc>') 840405"];
1736 [label="param WriteLine(string message) 840406"];
1737 [label="param WriteLine(this) 840407"];
1738 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840408"];
1739 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840409"];
1740 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840410"];
1741 [label="Indent() 840411"];
1742 [label="param Indent(this) 840412"];
1743 [label="_indentDepth 840413"];
1744 [label="Indent(); 840414"];
1745 [label="_compilation.Options 840415"];
1746 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 840416"];
1747 [label="WriteLine('<members>'); 840417"];
1748 [label="WriteLine('<members>') 840418"];
1749 [label="param WriteLine(string message) 840419"];
1750 [label="param WriteLine(this) 840420"];
1751 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840421"];
1752 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840422"];
1753 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840423"];
1754 [label="Indent() 840424"];
1755 [label="param Indent(this) 840425"];
1756 [label="_indentDepth 840426"];
1757 [label="Indent(); 840427"];
1758 [label="Debug.Assert(!_isForSingleSymbol); 840428"];
1759 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 840429"];
1760 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 840430"];
1761 [label="Unindent() 840431"];
1762 [label="param Unindent(this) 840432"];
1763 [label="_indentDepth 840433"];
1764 [label="Debug.Assert(_indentDepth >= 0); 840434"];
1765 [label="Debug.Assert(_indentDepth >= 0); 840435"];
1766 [label="Unindent(); 840436"];
1767 [label="WriteLine('</members>'); 840437"];
1768 [label="WriteLine('</members>') 840438"];
1769 [label="param WriteLine(string message) 840439"];
1770 [label="param WriteLine(this) 840440"];
1771 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840441"];
1772 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840442"];
1773 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840443"];
1774 [label="Unindent() 840444"];
1775 [label="param Unindent(this) 840445"];
1776 [label="_indentDepth 840446"];
1777 [label="Debug.Assert(_indentDepth >= 0); 840447"];
1778 [label="Debug.Assert(_indentDepth >= 0); 840448"];
1779 [label="Unindent(); 840449"];
1780 [label="WriteLine('</doc>'); 840450"];
1781 [label="WriteLine('</doc>') 840451"];
1782 [label="param WriteLine(string message) 840452"];
1783 [label="param WriteLine(this) 840453"];
1784 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840454"];
1785 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840455"];
1786 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 840456"];
1787 [label="Debug.Assert(compiler._indentDepth == 0); 840457"];
1788 [label="Debug.Assert(compiler._indentDepth == 0); 840458"];
1789 [label="writer?.Flush(); 840459"];
1790 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 840460"];
1791 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 840461"];
1792 [label="compilation.SyntaxTrees 840462"];
1793 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 840463"];
1794 [label="_syntaxAndDeclarations.GetLazyState() 840464"];
1795 [label="param GetLazyState(this) 840465"];
1796 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 840466"];
1797 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 840467"];
1798 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 840468"];
1799 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 840469"];
1800 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 840470"];
1801 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 840471"];
1802 [label="param ReportUnprocessed(SyntaxTree tree) 840472"];
1803 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 840473"];
1804 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 840474"];
1805 [label="param ReportUnprocessed(CancellationToken cancellationToken) 840475"];
1806 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 840476"];
1807 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 840477"];
1808 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 840478"];
1809 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 840479"];
1810 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 840480"];
1811 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 840481"];
1812 [label="param ReportUnusedImports(SyntaxTree? filterTree) 840482"];
1813 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 840483"];
1814 [label="param ReportUnusedImports(CancellationToken cancellationToken) 840484"];
1815 [label="param ReportUnusedImports(this) 840485"];
1816 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 840486"];
1817 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 840487"];
1818 [label="CompleteTrees(filterTree); 840488"];
1819 [label="CompleteTrees(filterTree) 840489"];
1820 [label="param CompleteTrees(SyntaxTree? filterTree) 840490"];
1821 [label="param CompleteTrees(this) 840491"];
1822 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 840492"];
1823 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 840493"];
1824 [label="CompleteTrees(filterTree); 840494"];
1825 [label="get { return SourceAssembly.IsDelaySigned; } 840495"];
1826 [label="SourceAssembly 840496"];
1827 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 840497"];
1828 [label="GetBoundReferenceManager() 840498"];
1829 [label="param GetBoundReferenceManager(this) 840499"];
1830 [label="GetBoundReferenceManager(); 840500"];
1831 [label="SourceAssembly.IsDelaySigned 840501"];
1832 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 840502"];
1833 [label="param GetCorLibraryReferenceToEmit(this) 840503"];
1834 [label="CorLibrary 840504"];
1835 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 840505"];
1836 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 840506"];
1837 [label="AssemblySymbol corLibrary = CorLibrary; 840507"];
1838 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 840508"];
1839 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 840509"];
1840 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 840510"];
1841 [label="return null; 840511"];
1842 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 840512"];
1843 [label="param GetFiles(EmitContext context) 840513"];
1844 [label="=> SpecializedCollections.EmptyEnumerable<Cci.IFileReference>() 840514"];
1845 [label="SpecializedCollections.EmptyEnumerable<Cci.IFileReference>() 840515"];
1846 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 840516"];
1847 [label="=> _embeddedTypesManagerOpt 840517"];
1848 [label="_embeddedTypesManagerOpt 840518"];
1849 [label="param GetAnonymousTypeDefinitions(EmitContext context) 840519"];
1850 [label="param GetAnonymousTypeDefinitions(this) 840520"];
1851 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 840521"];
1852 [label="Compilation.AnonymousTypeManager 840522"];
1853 [label="get\n            {\n                return _anonymousTypeManager;\n            } 840523"];
1854 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 840524"];
1855 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 840525"];
1856 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 840526"];
1857 [label="param GetAdditionalTopLevelTypeDefinitions(this) 840527"];
1858 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 840528"];
1859 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 840529"];
1860 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 840530"];
1861 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 840531"];
1862 [label="param GetEmbeddedTypeDefinitions(this) 840532"];
1863 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 840533"];
1864 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 840534"];
1865 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 840535"];
1866 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 840536"];
1867 [label="param GetTopLevelSourceTypeDefinitions(this) 840537"];
1868 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 840538"];
1869 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 840539"];
1870 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 840540"];
1871 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 840541"];
1872 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 840542"];
1873 [label="var ns = namespacesToProcess.Pop(); 840543"];
1874 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 840544"];
1875 [label="param GetTopLevelSourceTypeDefinitions(this) 840545"];
1876 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 840546"];
1877 [label="param GetSourceAssemblyAttributes(this) 840547"];
1878 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 840548"];
1879 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 840549"];
1880 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 840550"];
1881 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 840551"];
1882 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 840552"];
1883 [label="param GetSourceAssemblySecurityAttributes(this) 840553"];
1884 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 840554"];
1885 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 840555"];
1886 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 840556"];
1887 [label="AssemblySymbol corLibrary = CorLibrary; 840557"];
1888 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 840558"];
1889 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 840559"];
1890 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 840560"];
1891 [label="param GetSourceModuleAttributes(this) 840561"];
1892 [label="return SourceModule.GetCustomAttributesToEmit(this); 840562"];
1893 [label="return SourceModule.GetCustomAttributesToEmit(this); 840563"];
1894 [label="return SourceModule.GetCustomAttributesToEmit(this); 840564"];
1895 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 840565"];
1896 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 840566"];
1897 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 840567"];
1898 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 840568"];
1899 [label="param GetExportedTypes(DiagnosticBag diagnostics) 840569"];
1900 [label="param GetExportedTypes(this) 840570"];
1901 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 840571"];
1902 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 840572"];
1903 [label="CalculateExportedTypes() 840573"];
1904 [label="param CalculateExportedTypes(this) 840574"];
1905 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 840575"];
1906 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 840576"];
1907 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 840577"];
1908 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 840578"];
1909 [label="sourceAssembly.DeclaringCompilation.Options 840579"];
1910 [label="get\n            {\n                return _options;\n            } 840580"];
1911 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 840581"];
1912 [label="GetForwardedTypes(sourceAssembly, builder); 840582"];
1913 [label="GetForwardedTypes(sourceAssembly, builder); 840583"];
1914 [label="GetForwardedTypes(sourceAssembly, builder) 840584"];
1915 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 840585"];
1916 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 840586"];
1917 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 840587"];
1918 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 840588"];
1919 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 840589"];
1920 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 840590"];
1921 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 840591"];
1922 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 840592"];
1923 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 840593"];
1924 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 840594"];
1925 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 840595"];
1926 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 840596"];
1927 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 840597"];
1928 [label="sourceAssembly.DeclaringCompilation.Options 840598"];
1929 [label="get\n            {\n                return _options;\n            } 840599"];
1930 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 840600"];
1931 [label="return seenTopLevelForwardedTypes; 840601"];
1932 [label="GetForwardedTypes(sourceAssembly, builder); 840602"];
1933 [label="return builder.ToImmutableAndFree(); 840603"];
1934 [label="_lazyExportedTypes = CalculateExportedTypes(); 840604"];
1935 [label="_lazyExportedTypes 840605"];
1936 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 840606"];
1937 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 840607"];
1938 [label="return _lazyExportedTypes; 840608"];
1939 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 840609"];
1940 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 840610"];
1941 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 840611"];
1942 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 840612"];
1943 [label="=> null 840613"];
1944 [label="null 840614"];
1945 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 840615"];
1946 [label="get { return _metadataName; } 840616"];
1947 [label="return _metadataName; 840617"];
1948 [label="get { return SourceAssembly.StrongNameKeys; } 840618"];
1949 [label="SourceAssembly 840619"];
1950 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 840620"];
1951 [label="GetBoundReferenceManager() 840621"];
1952 [label="param GetBoundReferenceManager(this) 840622"];
1953 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 840623"];
1954 [label="return _referenceManager; 840624"];
1955 [label="GetBoundReferenceManager(); 840625"];
1956 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 840626"];
1957 [label="return SourceAssembly.StrongNameKeys; 840627"];
1958 [label="CustomAssert.True(emitResult.Success, 'Diagnostics:\\r\\n' + string.Join('\\r\\n', emitResult.Diagnostics.Select(d => d.ToString()))); 840628"];
1959 [label="CustomAssert.True(emitResult.Success, 'Diagnostics:\\r\\n' + string.Join('\\r\\n', emitResult.Diagnostics.Select(d => d.ToString()))); 840629"];
1960 [label="if (expectedWarnings != null)\n            {\n                emitResult.Diagnostics.Verify(expectedWarnings);\n            } 840630"];
1961 [label="if (expectedWarnings != null)\n            {\n                emitResult.Diagnostics.Verify(expectedWarnings);\n            } 840631"];
1962 [label="return peStream.ToImmutable(); 840632"];
1963 [label="return peStream.ToImmutable(); 840633"];
1964 [label="CSharpCompilation compilation = CreateCompilation(\n@'\n[assembly: System.Reflection.AssemblyAlgorithmIdAttribute(12345)]\n\nclass Program\n{\n    void M() {}\n}\n', references: new[] { reference }, options: TestOptions.ReleaseDll); 840634"];
1965 [label="@'\n[assembly: System.Reflection.AssemblyAlgorithmIdAttribute(12345)]\n\nclass Program\n{\n    void M() {}\n}\n' 840635"];
1966 [label="param operator(string source) 840636"];
1967 [label="source 840637"];
1968 [label="new CSharpTestSource(source) 840638"];
1969 [label="param CSharpTestSource(object value) 840639"];
1970 [label="param CSharpTestSource(this) 840640"];
1971 [label="Value 840641"];
1972 [label="CSharpCompilation compilation = CreateCompilation(\n@'\n[assembly: System.Reflection.AssemblyAlgorithmIdAttribute(12345)]\n\nclass Program\n{\n    void M() {}\n}\n', references: new[] { reference }, options: TestOptions.ReleaseDll); 840642"];
1973 [label="new[] { reference } 840643"];
1974 [label="CSharpCompilation compilation = CreateCompilation(\n@'\n[assembly: System.Reflection.AssemblyAlgorithmIdAttribute(12345)]\n\nclass Program\n{\n    void M() {}\n}\n', references: new[] { reference }, options: TestOptions.ReleaseDll); 840644"];
1975 [label="CreateCompilation(\n@'\n[assembly: System.Reflection.AssemblyAlgorithmIdAttribute(12345)]\n\nclass Program\n{\n    void M() {}\n}\n', references: new[] { reference }, options: TestOptions.ReleaseDll) 840645"];
1976 [label="param CreateCompilation(CSharpTestSource source) 840646"];
1977 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 840647"];
1978 [label="param CreateCompilation(CSharpCompilationOptions options = null) 840648"];
1979 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 840649"];
1980 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 840650"];
1981 [label="param CreateCompilation(string assemblyName = '') 840651"];
1982 [label="param CreateCompilation(string sourceFileName = '') 840652"];
1983 [label="param CreateCompilation(bool skipUsesIsNullable = false) 840653"];
1984 [label="source 840654"];
1985 [label="targetFramework 840655"];
1986 [label="references 840656"];
1987 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 840657"];
1988 [label="param GetReferences(TargetFramework tf) 840658"];
1989 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 840659"];
1990 [label="var references = GetReferences(tf); 840660"];
1991 [label="GetReferences(tf) 840661"];
1992 [label="param GetReferences(TargetFramework targetFramework) 840662"];
1993 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 840663"];
1994 [label="StandardReferences 840664"];
1995 [label="RuntimeUtilities.IsCoreClrRuntime 840665"];
1996 [label="Mscorlib46ExtendedReferences 840666"];
1997 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 840667"];
1998 [label="TestBase.ValueTupleRef 840668"];
1999 [label="TestReferences.NetFx.ValueTuple.tuplelib 840669"];
2000 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 840670"];
2001 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 840671"];
2002 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 840672"];
2003 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 840673"];
2004 [label="checkForDuplicateReferences(references, additionalReferences); 840674"];
2005 [label="checkForDuplicateReferences(references, additionalReferences); 840675"];
2006 [label="checkForDuplicateReferences(references, additionalReferences) 840676"];
2007 [label="void checkForDuplicateReferences(ImmutableArray<MetadataReference> refer, IEnumerable<MetadataReference> additRef)\n            {\n                var nameSet = new HashSet<string>(getNames(refer), StringComparer.OrdinalIgnoreCase);\n                foreach (var r in additRef)\n                {\n                    if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    }\n\n                    var name = getName(r);\n                    if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    }\n                }\n            } 840677"];
2008 [label="void checkForDuplicateReferences(ImmutableArray<MetadataReference> refer, IEnumerable<MetadataReference> additRef)\n            {\n                var nameSet = new HashSet<string>(getNames(refer), StringComparer.OrdinalIgnoreCase);\n                foreach (var r in additRef)\n                {\n                    if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    }\n\n                    var name = getName(r);\n                    if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    }\n                }\n            } 840678"];
2009 [label="var nameSet = new HashSet<string>(getNames(refer), StringComparer.OrdinalIgnoreCase); 840679"];
2010 [label="getNames(refer) 840680"];
2011 [label="IEnumerable<string> getNames(IEnumerable<MetadataReference> e)\n            {\n                foreach (var r in e)\n                {\n                    var name = getName(r);\n                    if (name != null)\n                    {\n                        yield return name;\n                    }\n                }\n            } 840681"];
2012 [label="foreach (var r in e)\n                {\n                    var name = getName(r);\n                    if (name != null)\n                    {\n                        yield return name;\n                    }\n                } 840682"];
2013 [label="var name = getName(r); 840683"];
2014 [label="getName(r) 840684"];
2015 [label="string getName(MetadataReference m)\n            {\n                if (m is PortableExecutableReference p &&\n                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)\n                {\n                    try\n                    {\n                        var identity = assemblyMetadata.GetAssembly().Identity;\n                        return identity?.Name;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        // Happens when a native image is incorrectly passed as a PE.\n                        return null;\n                    }\n                }\n\n                return null;\n            } 840685"];
2016 [label="if (m is PortableExecutableReference p &&\n                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)\n                {\n                    try\n                    {\n                        var identity = assemblyMetadata.GetAssembly().Identity;\n                        return identity?.Name;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        // Happens when a native image is incorrectly passed as a PE.\n                        return null;\n                    }\n                } 840686"];
2017 [label="var identity = assemblyMetadata.GetAssembly().Identity; 840687"];
2018 [label="return identity?.Name; 840688"];
2019 [label="if (name != null)\n                    {\n                        yield return name;\n                    } 840689"];
2020 [label="if (name != null)\n                    {\n                        yield return name;\n                    } 840690"];
2021 [label="yield return name; 840691"];
2022 [label="yield return name; 840692"];
2023 [label="return identity?.Name; 840693"];
2024 [label="if (name != null)\n                    {\n                        yield return name;\n                    } 840694"];
2025 [label="if (name != null)\n                    {\n                        yield return name;\n                    } 840695"];
2026 [label="yield return name; 840696"];
2027 [label="if (name != null)\n                    {\n                        yield return name;\n                    } 840697"];
2028 [label="yield return name; 840698"];
2029 [label="var nameSet = new HashSet<string>(getNames(refer), StringComparer.OrdinalIgnoreCase); 840699"];
2030 [label="foreach (var r in additRef)\n                {\n                    if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    }\n\n                    var name = getName(r);\n                    if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    }\n                } 840700"];
2031 [label="foreach (var r in additRef)\n                {\n                    if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    }\n\n                    var name = getName(r);\n                    if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    }\n                } 840701"];
2032 [label="if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    } 840702"];
2033 [label="if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    } 840703"];
2034 [label="var name = getName(r); 840704"];
2035 [label="getName(r) 840705"];
2036 [label="string getName(MetadataReference m)\n            {\n                if (m is PortableExecutableReference p &&\n                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)\n                {\n                    try\n                    {\n                        var identity = assemblyMetadata.GetAssembly().Identity;\n                        return identity?.Name;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        // Happens when a native image is incorrectly passed as a PE.\n                        return null;\n                    }\n                }\n\n                return null;\n            } 840706"];
2037 [label="if (m is PortableExecutableReference p &&\n                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)\n                {\n                    try\n                    {\n                        var identity = assemblyMetadata.GetAssembly().Identity;\n                        return identity?.Name;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        // Happens when a native image is incorrectly passed as a PE.\n                        return null;\n                    }\n                } 840707"];
2038 [label="if (m is PortableExecutableReference p &&\n                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)\n                {\n                    try\n                    {\n                        var identity = assemblyMetadata.GetAssembly().Identity;\n                        return identity?.Name;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        // Happens when a native image is incorrectly passed as a PE.\n                        return null;\n                    }\n                } 840708"];
2039 [label="return null; 840709"];
2040 [label="var name = getName(r); 840710"];
2041 [label="if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    } 840711"];
2042 [label="if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    } 840712"];
2043 [label="checkForDuplicateReferences(references, additionalReferences); 840713"];
2044 [label="return references.AddRange(additionalReferences); 840714"];
2045 [label="return references.AddRange(additionalReferences); 840715"];
2046 [label="options 840716"];
2047 [label="parseOptions 840717"];
2048 [label="assemblyName 840718"];
2049 [label="sourceFileName 840719"];
2050 [label="skipUsesIsNullable 840720"];
2051 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 840721"];
2052 [label="param CreateEmptyCompilation(CSharpTestSource source) 840722"];
2053 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 840723"];
2054 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 840724"];
2055 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 840725"];
2056 [label="param CreateEmptyCompilation(string assemblyName = '') 840726"];
2057 [label="param CreateEmptyCompilation(string sourceFileName = '') 840727"];
2058 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 840728"];
2059 [label="source 840729"];
2060 [label="options 840730"];
2061 [label="parseOptions 840731"];
2062 [label="assemblyName 840732"];
2063 [label="sourceFileName 840733"];
2064 [label="skipUsesIsNullable 840734"];
2065 [label="null 840735"];
2066 [label="experimentalFeature: null 840736"];
2067 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 840737"];
2068 [label="param CreateCompilationCore(CSharpTestSource source) 840738"];
2069 [label="param CreateCompilationCore(CSharpCompilationOptions options) 840739"];
2070 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 840740"];
2071 [label="param CreateCompilationCore(string assemblyName) 840741"];
2072 [label="param CreateCompilationCore(string sourceFileName) 840742"];
2073 [label="param CreateCompilationCore(bool skipUsesIsNullable) 840743"];
2074 [label="param CreateCompilationCore(MessageID? experimentalFeature) 840744"];
2075 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 840745"];
2076 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 840746"];
2077 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 840747"];
2078 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 840748"];
2079 [label="param GetSyntaxTrees(string sourceFileName = '') 840749"];
2080 [label="param GetSyntaxTrees(this) 840750"];
2081 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 840751"];
2082 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 840752"];
2083 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 840753"];
2084 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 840754"];
2085 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 840755"];
2086 [label="param Parse(string text) 840756"];
2087 [label="param Parse(string filename = '') 840757"];
2088 [label="param Parse(CSharpParseOptions options = null) 840758"];
2089 [label="param Parse(Encoding encoding = null) 840759"];
2090 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 840760"];
2091 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 840761"];
2092 [label="options = TestOptions.Regular; 840762"];
2093 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 840763"];
2094 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 840764"];
2095 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 840765"];
2096 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 840766"];
2097 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 840767"];
2098 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 840768"];
2099 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 840769"];
2100 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 840770"];
2101 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 840771"];
2102 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 840772"];
2103 [label="var stream = new MemoryStream(); 840773"];
2104 [label="var root = tree.GetRoot(); 840774"];
2105 [label="var root = tree.GetRoot(); 840775"];
2106 [label="root.SerializeTo(stream); 840776"];
2107 [label="root.SerializeTo(stream); 840777"];
2108 [label="root.SerializeTo(stream); 840778"];
2109 [label="stream.Position = 0; 840779"];
2110 [label="stream.Position 840780"];
2111 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 840781"];
2112 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 840782"];
2113 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 840783"];
2114 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 840784"];
2115 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 840785"];
2116 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 840786"];
2117 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 840787"];
2118 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 840788"];
2119 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 840789"];
2120 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 840790"];
2121 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 840791"];
2122 [label="param ValidateIOperations(Func<Compilation> createCompilation) 840792"];
2123 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 840793"];
2124 [label="return; 840794"];
2125 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 840795"];
2126 [label="var compilation = createCompilationLambda(); 840796"];
2127 [label="var compilation = createCompilationLambda(); 840797"];
2128 [label="return Guid.NewGuid().ToString('D'); 840798"];
2129 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 840799"];
2130 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 840800"];
2131 [label="param Create(CSharpCompilation? previousSubmission) 840801"];
2132 [label="param Create(Type? returnType) 840802"];
2133 [label="param Create(Type? hostObjectType) 840803"];
2134 [label="param Create(bool isSubmission) 840804"];
2135 [label="RoslynDebug.Assert(options != null); 840805"];
2136 [label="RoslynDebug.Assert(options != null); 840806"];
2137 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 840807"];
2138 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 840808"];
2139 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 840809"];
2140 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 840810"];
2141 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 840811"];
2142 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 840812"];
2143 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 840813"];
2144 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 840814"];
2145 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 840815"];
2146 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 840816"];
2147 [label="param SyntaxAndDeclarationManager(bool isSubmission) 840817"];
2148 [label="param SyntaxAndDeclarationManager(State state) 840818"];
2149 [label="param SyntaxAndDeclarationManager(this) 840819"];
2150 [label="externalSyntaxTrees 840820"];
2151 [label="messageProvider 840821"];
2152 [label="isSubmission 840822"];
2153 [label="param SyntaxAndDeclarationManager(this) 840823"];
2154 [label="_lazyState 840824"];
2155 [label="_lazyState 840825"];
2156 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 840826"];
2157 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 840827"];
2158 [label="param CSharpCompilation(Type? submissionReturnType) 840828"];
2159 [label="param CSharpCompilation(Type? hostObjectType) 840829"];
2160 [label="param CSharpCompilation(bool isSubmission) 840830"];
2161 [label="param CSharpCompilation(ReferenceManager? referenceManager) 840831"];
2162 [label="param CSharpCompilation(bool reuseReferenceManager) 840832"];
2163 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 840833"];
2164 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 840834"];
2165 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 840835"];
2166 [label="param CSharpCompilation(this) 840836"];
2167 [label="previousSubmission 840837"];
2168 [label="submissionReturnType 840838"];
2169 [label="hostObjectType 840839"];
2170 [label="isSubmission 840840"];
2171 [label="referenceManager 840841"];
2172 [label="reuseReferenceManager 840842"];
2173 [label="syntaxAndDeclarations 840843"];
2174 [label="semanticModelProvider 840844"];
2175 [label="eventQueue 840845"];
2176 [label="param CSharpCompilation(this) 840846"];
2177 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 840847"];
2178 [label="param CSharpCompilation(Type? submissionReturnType) 840848"];
2179 [label="param CSharpCompilation(Type? hostObjectType) 840849"];
2180 [label="param CSharpCompilation(bool isSubmission) 840850"];
2181 [label="param CSharpCompilation(ReferenceManager? referenceManager) 840851"];
2182 [label="param CSharpCompilation(bool reuseReferenceManager) 840852"];
2183 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 840853"];
2184 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 840854"];
2185 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 840855"];
2186 [label="param CSharpCompilation(this) 840856"];
2187 [label="isSubmission 840857"];
2188 [label="semanticModelProvider 840858"];
2189 [label="eventQueue 840859"];
2190 [label="param CSharpCompilation(this) 840860"];
2191 [label="_options 840861"];
2192 [label="_globalImports 840862"];
2193 [label="_previousSubmissionImports 840863"];
2194 [label="_globalNamespaceAlias 840864"];
2195 [label="_scriptClass 840865"];
2196 [label="_lazyHostObjectTypeSymbol 840866"];
2197 [label="_lazyImportInfos 840867"];
2198 [label="_conversions 840868"];
2199 [label="_anonymousTypeManager 840869"];
2200 [label="_lazyGlobalNamespace 840870"];
2201 [label="builtInOperators 840871"];
2202 [label="_lazyAssemblySymbol 840872"];
2203 [label="_referenceManager 840873"];
2204 [label="_syntaxAndDeclarations 840874"];
2205 [label="_lazyEntryPoint 840875"];
2206 [label="_lazyEmitNullablePublicOnly 840876"];
2207 [label="_lazyCompilationUnitCompletedTrees 840877"];
2208 [label="NullableAnalysisData 840878"];
2209 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 840879"];
2210 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 840880"];
2211 [label="_externAliasTargets 840881"];
2212 [label="_moduleInitializerMethods 840882"];
2213 [label="_binderFactories 840883"];
2214 [label="_ignoreAccessibilityBinderFactories 840884"];
2215 [label="_lazyDeclarationDiagnostics 840885"];
2216 [label="_declarationDiagnosticsFrozen 840886"];
2217 [label="new DiagnosticBag() 840887"];
2218 [label="_additionalCodegenWarnings = new DiagnosticBag() 840888"];
2219 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 840889"];
2220 [label="this.builtInOperators = new BuiltInOperators(this); 840890"];
2221 [label="this.builtInOperators = new BuiltInOperators(this); 840891"];
2222 [label="new BuiltInOperators(this) 840892"];
2223 [label="param BuiltInOperators(CSharpCompilation compilation) 840893"];
2224 [label="param BuiltInOperators(this) 840894"];
2225 [label="_compilation 840895"];
2226 [label="_builtInUnaryOperators 840896"];
2227 [label="_builtInOperators 840897"];
2228 [label="_compilation 840898"];
2229 [label="this.builtInOperators 840899"];
2230 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 840900"];
2231 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 840901"];
2232 [label="LanguageVersion? result = null; 840902"];
2233 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 840903"];
2234 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 840904"];
2235 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 840905"];
2236 [label="this.LanguageVersion 840906"];
2237 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 840907"];
2238 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840908"];
2239 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840909"];
2240 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840910"];
2241 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840911"];
2242 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840912"];
2243 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840913"];
2244 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 840914"];
2245 [label="this.Options 840915"];
2246 [label="get\n            {\n                return _options;\n            } 840916"];
2247 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 840917"];
2248 [label="_syntaxAndDeclarations 840918"];
2249 [label="Debug.Assert(_lazyAssemblySymbol is null); 840919"];
2250 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 840920"];
2251 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 840921"];
2252 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 840922"];
2253 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 840923"];
2254 [label="int i = 0; 840924"];
2255 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 840925"];
2256 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 840926"];
2257 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 840927"];
2258 [label="i++; 840928"];
2259 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 840929"];
2260 [label="var scriptClassName = this.ScriptClassName; 840930"];
2261 [label="var resolver = this.Resolver; 840931"];
2262 [label="var messageProvider = this.MessageProvider; 840932"];
2263 [label="var isSubmission = this.IsSubmission; 840933"];
2264 [label="this.PreviousSubmission 840934"];
2265 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 840935"];
2266 [label="param CSharpCompilation(Type? submissionReturnType) 840936"];
2267 [label="param CSharpCompilation(Type? hostObjectType) 840937"];
2268 [label="previousSubmission 840938"];
2269 [label="submissionReturnType 840939"];
2270 [label="hostObjectType 840940"];
2271 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 840941"];
2272 [label="param CSharpCompilation(Type? submissionReturnType) 840942"];
2273 [label="param CSharpCompilation(Type? hostObjectType) 840943"];
2274 [label="_compilation 840944"];
2275 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 840945"];
2276 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840946"];
2277 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840947"];
2278 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840948"];
2279 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840949"];
2280 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840950"];
2281 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 840951"];
2282 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 840952"];
2283 [label="Debug.Assert(_lazyAssemblySymbol is null); 840953"];
2284 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 840954"];
2285 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 840955"];
2286 [label="IsNullableEnabled(compilation) 840956"];
2287 [label="compilation.SyntaxTrees 840957"];
2288 [label="_syntaxAndDeclarations.GetLazyState() 840958"];
2289 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 840959"];
2290 [label="param CreateState(SourceReferenceResolver resolver) 840960"];
2291 [label="param CreateState(CommonMessageProvider messageProvider) 840961"];
2292 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 840962"];
2293 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 840963"];
2294 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 840964"];
2295 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 840965"];
2296 [label="var sourceCodeKind = tree.Options.Kind; 840966"];
2297 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 840967"];
2298 [label="OrdinalMap 840968"];
2299 [label="LoadDirectiveMap 840969"];
2300 [label="LoadedSyntaxTreeMap 840970"];
2301 [label="RootNamespaces 840971"];
2302 [label="DeclarationTable 840972"];
2303 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 840973"];
2304 [label="var options = (CSharpParseOptions)trees[0].Options; 840974"];
2305 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 840975"];
2306 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 840976"];
2307 [label="var refonlyOptions = EmitOptions.Default.WithEmitMetadataOnly(true).WithIncludePrivateMembers(false); 840977"];
2308 [label="var refonlyDiagnostics = compilation.Emit(new MemoryStream(), pdbStream: null,\n                options: refonlyOptions, manifestResources: hash_resources).Diagnostics; 840978"];
2309 [label="var refonlyDiagnostics = compilation.Emit(new MemoryStream(), pdbStream: null,\n                options: refonlyOptions, manifestResources: hash_resources).Diagnostics; 840979"];
2310 [label="var refonlyDiagnostics = compilation.Emit(new MemoryStream(), pdbStream: null,\n                options: refonlyOptions, manifestResources: hash_resources).Diagnostics; 840980"];
2311 [label="var refonlyDiagnostics = compilation.Emit(new MemoryStream(), pdbStream: null,\n                options: refonlyOptions, manifestResources: hash_resources).Diagnostics; 840981"];
2312 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 840982"];
2313 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 840983"];
2314 [label="param CreateModuleBuilder(CompilationTestData? testData) 840984"];
2315 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 840985"];
2316 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 840986"];
2317 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 840987"];
2318 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 840988"];
2319 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 840989"];
2320 [label="GetRuntimeMetadataVersion(emitOptions) 840990"];
2321 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 840991"];
2322 [label="Assembly 840992"];
2323 [label="SourceAssembly 840993"];
2324 [label="GetBoundReferenceManager() 840994"];
2325 [label="Debug.Assert(_lazyAssemblySymbol is object); 840995"];
2326 [label="GetBoundReferenceManager(); 840996"];
2327 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 840997"];
2328 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 840998"];
2329 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 840999"];
2330 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 841000"];
2331 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 841001"];
2332 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 841002"];
2333 [label="return runtimeMDVersion; 841003"];
2334 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 841004"];
2335 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 841005"];
2336 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 841006"];
2337 [label="SourceAssembly 841007"];
2338 [label="GetBoundReferenceManager() 841008"];
2339 [label="GetBoundReferenceManager(); 841009"];
2340 [label="SourceAssembly.IsDelaySigned 841010"];
2341 [label="Declarations 841011"];
2342 [label="_syntaxAndDeclarations.GetLazyState() 841012"];
2343 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841013"];
2344 [label="return Declarations.GetMergedRoot(this); 841014"];
2345 [label="_syntaxAndDeclarations.GetLazyState() 841015"];
2346 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841016"];
2347 [label="param GetBinderFactory(SyntaxTree syntaxTree) 841017"];
2348 [label="param GetBinderFactory(bool ignoreAccessibility = false) 841018"];
2349 [label="param GetBinderFactory(this) 841019"];
2350 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 841020"];
2351 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 841021"];
2352 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 841022"];
2353 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 841023"];
2354 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 841024"];
2355 [label="param GetBinderFactory(SyntaxTree syntaxTree) 841025"];
2356 [label="param GetBinderFactory(bool ignoreAccessibility) 841026"];
2357 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 841027"];
2358 [label="param GetBinderFactory(this) 841028"];
2359 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 841029"];
2360 [label="ignoreAccessibility 841030"];
2361 [label="_binderFactories 841031"];
2362 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 841032"];
2363 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 841033"];
2364 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 841034"];
2365 [label="GetSyntaxTreeOrdinal(syntaxTree) 841035"];
2366 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 841036"];
2367 [label="param GetSyntaxTreeOrdinal(this) 841037"];
2368 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 841038"];
2369 [label="this.ContainsSyntaxTree(tree) 841039"];
2370 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 841040"];
2371 [label="param ContainsSyntaxTree(this) 841041"];
2372 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 841042"];
2373 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 841043"];
2374 [label="_syntaxAndDeclarations.GetLazyState() 841044"];
2375 [label="param GetLazyState(this) 841045"];
2376 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841046"];
2377 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 841047"];
2378 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 841048"];
2379 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 841049"];
2380 [label="_syntaxAndDeclarations.GetLazyState() 841050"];
2381 [label="param GetLazyState(this) 841051"];
2382 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841052"];
2383 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 841053"];
2384 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 841054"];
2385 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 841055"];
2386 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 841056"];
2387 [label="this.SyntaxTrees 841057"];
2388 [label="param GetLazyState(this) 841058"];
2389 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 841059"];
2390 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 841060"];
2391 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 841061"];
2392 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 841062"];
2393 [label="BinderFactory? previousFactory; 841063"];
2394 [label="var previousWeakReference = binderFactories[treeNum]; 841064"];
2395 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 841065"];
2396 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 841066"];
2397 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 841067"];
2398 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 841068"];
2399 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 841069"];
2400 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 841070"];
2401 [label="param AddNewFactory(SyntaxTree syntaxTree) 841071"];
2402 [label="param AddNewFactory(bool ignoreAccessibility) 841072"];
2403 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 841073"];
2404 [label="param AddNewFactory(this) 841074"];
2405 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 841075"];
2406 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 841076"];
2407 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 841077"];
2408 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 841078"];
2409 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 841079"];
2410 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 841080"];
2411 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 841081"];
2412 [label="BinderFactory? previousFactory; 841082"];
2413 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 841083"];
2414 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 841084"];
2415 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 841085"];
2416 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 841086"];
2417 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 841087"];
2418 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 841088"];
2419 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 841089"];
2420 [label="return newFactory; 841090"];
2421 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 841091"];
2422 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 841092"];
2423 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 841093"];
2424 [label="GetAllUnaliasedModules(modules); 841094"];
2425 [label="GetAllUnaliasedModules(modules) 841095"];
2426 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 841096"];
2427 [label="param GetAllUnaliasedModules(this) 841097"];
2428 [label="Assembly 841098"];
2429 [label="get\n            {\n                return SourceAssembly;\n            } 841099"];
2430 [label="GetBoundReferenceManager(); 841100"];
2431 [label="modules.AddRange(Assembly.Modules); 841101"];
2432 [label="modules.AddRange(Assembly.Modules); 841102"];
2433 [label="GetBoundReferenceManager() 841103"];
2434 [label="param GetBoundReferenceManager(this) 841104"];
2435 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 841105"];
2436 [label="return _referenceManager; 841106"];
2437 [label="var referenceManager = GetBoundReferenceManager(); 841107"];
2438 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 841108"];
2439 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 841109"];
2440 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 841110"];
2441 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 841111"];
2442 [label="GetAllUnaliasedModules(modules); 841112"];
2443 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 841113"];
2444 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 841114"];
2445 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 841115"];
2446 [label="modules.Free(); 841116"];
2447 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 841117"];
2448 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 841118"];
2449 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 841119"];
2450 [label="return _lazyGlobalNamespace; 841120"];
2451 [label="Assembly 841121"];
2452 [label="SourceAssembly 841122"];
2453 [label="GetBoundReferenceManager() 841123"];
2454 [label="GetBoundReferenceManager(); 841124"];
2455 [label="return Assembly.Modules[0]; 841125"];
2456 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 841126"];
2457 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 841127"];
2458 [label="param SymbolDeclaredEvent(Symbol symbol) 841128"];
2459 [label="param SymbolDeclaredEvent(this) 841129"];
2460 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 841130"];
2461 [label="SourceAssembly 841131"];
2462 [label="GetBoundReferenceManager() 841132"];
2463 [label="GetBoundReferenceManager(); 841133"];
2464 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 841134"];
2465 [label="param GetUnaliasedReferencedAssemblies(this) 841135"];
2466 [label="GetBoundReferenceManager() 841136"];
2467 [label="param GetBoundReferenceManager(this) 841137"];
2468 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 841138"];
2469 [label="return _referenceManager; 841139"];
2470 [label="var referenceManager = GetBoundReferenceManager(); 841140"];
2471 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 841141"];
2472 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 841142"];
2473 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 841143"];
2474 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 841144"];
2475 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 841145"];
2476 [label="GetBoundReferenceManager(); 841146"];
2477 [label="param GetSpecialType(SpecialType specialType) 841147"];
2478 [label="param GetSpecialType(this) 841148"];
2479 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 841149"];
2480 [label="NamedTypeSymbol result; 841150"];
2481 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 841151"];
2482 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 841152"];
2483 [label="Assembly 841153"];
2484 [label="GetBoundReferenceManager(); 841154"];
2485 [label="result = Assembly.GetSpecialType(specialType); 841155"];
2486 [label="result = Assembly.GetSpecialType(specialType); 841156"];
2487 [label="Debug.Assert(result.SpecialType == specialType); 841157"];
2488 [label="return result; 841158"];
2489 [label="GetBoundReferenceManager(); 841159"];
2490 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 841160"];
2491 [label="param IsNullableAnalysisEnabledIn(this) 841161"];
2492 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 841162"];
2493 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 841163"];
2494 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 841164"];
2495 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 841165"];
2496 [label="param IsNullableAnalysisEnabledIn(this) 841166"];
2497 [label="GetNullableAnalysisValue() 841167"];
2498 [label="param GetNullableAnalysisValue(this) 841168"];
2499 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 841169"];
2500 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 841170"];
2501 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 841171"];
2502 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 841172"];
2503 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 841173"];
2504 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 841174"];
2505 [label="Options 841175"];
2506 [label="get\n            {\n                return _options;\n            } 841176"];
2507 [label="return _options; 841177"];
2508 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 841178"];
2509 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 841179"];
2510 [label="get\n            {\n                var value = GetNullableAnalysisValue();\n#if DEBUG\n                return value != false;\n#else\n                return value == true;\n#endif\n            } 841180"];
2511 [label="GetNullableAnalysisValue() 841181"];
2512 [label="param GetNullableAnalysisValue(this) 841182"];
2513 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 841183"];
2514 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 841184"];
2515 [label="var value = GetNullableAnalysisValue(); 841185"];
2516 [label="return value != false; 841186"];
2517 [label="return value != false; 841187"];
2518 [label="GetBoundReferenceManager(); 841188"];
2519 [label="SourceAssembly 841189"];
2520 [label="GetBoundReferenceManager() 841190"];
2521 [label="GetBoundReferenceManager(); 841191"];
2522 [label="SourceAssembly.StrongNameKeys 841192"];
2523 [label="get\n            {\n                return _options;\n            } 841193"];
2524 [label="=> 0x30 841194"];
2525 [label="0x30 841195"];
2526 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 841196"];
2527 [label="PEModuleBuilder moduleBeingBuilt; 841197"];
2528 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 841198"];
2529 [label="_options.OutputKind.IsValid() 841199"];
2530 [label="_options.OutputKind 841200"];
2531 [label="SourceAssembly 841201"];
2532 [label="GetBoundReferenceManager(); 841202"];
2533 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 841203"];
2534 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 841204"];
2535 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 841205"];
2536 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 841206"];
2537 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 841207"];
2538 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 841208"];
2539 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 841209"];
2540 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 841210"];
2541 [label="param PEAssemblyBuilder(OutputKind outputKind) 841211"];
2542 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 841212"];
2543 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 841213"];
2544 [label="param PEAssemblyBuilder(this) 841214"];
2545 [label="sourceAssembly 841215"];
2546 [label="emitOptions 841216"];
2547 [label="outputKind 841217"];
2548 [label="serializationProperties 841218"];
2549 [label="manifestResources 841219"];
2550 [label="ImmutableArray<NamedTypeSymbol>.Empty 841220"];
2551 [label="param PEAssemblyBuilder(this) 841221"];
2552 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 841222"];
2553 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 841223"];
2554 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 841224"];
2555 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 841225"];
2556 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 841226"];
2557 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 841227"];
2558 [label="param PEAssemblyBuilderBase(this) 841228"];
2559 [label="0 841229"];
2560 [label="sourceAssembly.Modules[0] 841230"];
2561 [label="emitOptions 841231"];
2562 [label="outputKind 841232"];
2563 [label="serializationProperties 841233"];
2564 [label="manifestResources 841234"];
2565 [label="param PEAssemblyBuilderBase(this) 841235"];
2566 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 841236"];
2567 [label="param PEModuleBuilder(EmitOptions emitOptions) 841237"];
2568 [label="param PEModuleBuilder(OutputKind outputKind) 841238"];
2569 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 841239"];
2570 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 841240"];
2571 [label="param PEModuleBuilder(this) 841241"];
2572 [label="get\n            {\n                return true;\n            } 841242"];
2573 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 841243"];
2574 [label="_sourceAssembly 841244"];
2575 [label="_lazyEmbeddedAttribute 841245"];
2576 [label="_lazyIsReadOnlyAttribute 841246"];
2577 [label="_lazyIsByRefLikeAttribute 841247"];
2578 [label="_lazyIsUnmanagedAttribute 841248"];
2579 [label="_lazyNullableAttribute 841249"];
2580 [label="_lazyNullableContextAttribute 841250"];
2581 [label="_lazyNullablePublicOnlyAttribute 841251"];
2582 [label="_lazyNativeIntegerAttribute 841252"];
2583 [label="_metadataName 841253"];
2584 [label="Debug.Assert(sourceAssembly is object); 841254"];
2585 [label="_sourceAssembly 841255"];
2586 [label="_additionalTypes = additionalTypes.NullToEmpty(); 841256"];
2587 [label="_additionalTypes 841257"];
2588 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 841258"];
2589 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 841259"];
2590 [label="(emitOptions.OutputNameOverride == null) 841260"];
2591 [label="sourceAssembly.MetadataName 841261"];
2592 [label="_metadataName 841262"];
2593 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 841263"];
2594 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 841264"];
2595 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 841265"];
2596 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 841266"];
2597 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 841267"];
2598 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 841268"];
2599 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 841269"];
2600 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 841270"];
2601 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 841271"];
2602 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 841272"];
2603 [label="PooledHashSet<int>? excludeDiagnostics = null; 841273"];
2604 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 841274"];
2605 [label="excludeDiagnostics = PooledHashSet<int>.GetInstance(); 841275"];
2606 [label="excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody); 841276"];
2607 [label="excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody); 841277"];
2608 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 841278"];
2609 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 841279"];
2610 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 841280"];
2611 [label="param GetDiagnostics(CompilationStage stage) 841281"];
2612 [label="param GetDiagnostics(bool includeEarlierStages) 841282"];
2613 [label="var diagnostics = DiagnosticBag.GetInstance(); 841283"];
2614 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 841284"];
2615 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 841285"];
2616 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 841286"];
2617 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 841287"];
2618 [label="param GetDiagnostics(CompilationStage stage) 841288"];
2619 [label="param GetDiagnostics(bool includeEarlierStages) 841289"];
2620 [label="param GetDiagnostics(DiagnosticBag diagnostics) 841290"];
2621 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 841291"];
2622 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 841292"];
2623 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 841293"];
2624 [label="this.SyntaxTrees 841294"];
2625 [label="_syntaxAndDeclarations.GetLazyState() 841295"];
2626 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841296"];
2627 [label="this.Options 841297"];
2628 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 841298"];
2629 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 841299"];
2630 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 841300"];
2631 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 841301"];
2632 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 841302"];
2633 [label="CheckAssemblyName(builder); 841303"];
2634 [label="CheckAssemblyName(builder); 841304"];
2635 [label="Options 841305"];
2636 [label="Options 841306"];
2637 [label="get\n            {\n                return _options;\n            } 841307"];
2638 [label="return _options; 841308"];
2639 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 841309"];
2640 [label="GetBoundReferenceManager() 841310"];
2641 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 841311"];
2642 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 841312"];
2643 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 841313"];
2644 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 841314"];
2645 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 841315"];
2646 [label="GlobalImports 841316"];
2647 [label="_globalImports.Value 841317"];
2648 [label="Imports.FromGlobalUsings(this) 841318"];
2649 [label="SourceLocation? location = null; 841319"];
2650 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 841320"];
2651 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 841321"];
2652 [label="Assembly 841322"];
2653 [label="SourceAssembly 841323"];
2654 [label="GetBoundReferenceManager() 841324"];
2655 [label="GetBoundReferenceManager(); 841325"];
2656 [label="Assembly.ForceComplete(location, cancellationToken); 841326"];
2657 [label="Assembly.ForceComplete(location, cancellationToken); 841327"];
2658 [label="SourceAssembly 841328"];
2659 [label="GetBoundReferenceManager() 841329"];
2660 [label="GetBoundReferenceManager(); 841330"];
2661 [label="GetBoundReferenceManager() 841331"];
2662 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 841332"];
2663 [label="Declarations 841333"];
2664 [label="_syntaxAndDeclarations.GetLazyState() 841334"];
2665 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841335"];
2666 [label="return Declarations.GetMergedRoot(this); 841336"];
2667 [label="_syntaxAndDeclarations.GetLazyState() 841337"];
2668 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841338"];
2669 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 841339"];
2670 [label="NamedTypeSymbol result; 841340"];
2671 [label="GetBoundReferenceManager(); 841341"];
2672 [label="Debug.Assert(result.SpecialType == specialType); 841342"];
2673 [label="param GetBinder(CSharpSyntaxNode syntax) 841343"];
2674 [label="param GetBinder(this) 841344"];
2675 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 841345"];
2676 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 841346"];
2677 [label="GetBinderFactory(syntax.SyntaxTree) 841347"];
2678 [label="param GetBinderFactory(SyntaxTree syntaxTree) 841348"];
2679 [label="param GetBinderFactory(bool ignoreAccessibility = false) 841349"];
2680 [label="param GetBinderFactory(this) 841350"];
2681 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 841351"];
2682 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 841352"];
2683 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 841353"];
2684 [label="param GetBinderFactory(bool ignoreAccessibility) 841354"];
2685 [label="ignoreAccessibility 841355"];
2686 [label="GetSyntaxTreeOrdinal(syntaxTree) 841356"];
2687 [label="this.ContainsSyntaxTree(tree) 841357"];
2688 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 841358"];
2689 [label="_syntaxAndDeclarations.GetLazyState() 841359"];
2690 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841360"];
2691 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 841361"];
2692 [label="_syntaxAndDeclarations.GetLazyState() 841362"];
2693 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841363"];
2694 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 841364"];
2695 [label="BinderFactory? previousFactory; 841365"];
2696 [label="var previousWeakReference = binderFactories[treeNum]; 841366"];
2697 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 841367"];
2698 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 841368"];
2699 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 841369"];
2700 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 841370"];
2701 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 841371"];
2702 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 841372"];
2703 [label="param AddNewFactory(bool ignoreAccessibility) 841373"];
2704 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 841374"];
2705 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 841375"];
2706 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 841376"];
2707 [label="BinderFactory? previousFactory; 841377"];
2708 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 841378"];
2709 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 841379"];
2710 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 841380"];
2711 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 841381"];
2712 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 841382"];
2713 [label="Assembly 841383"];
2714 [label="SourceAssembly 841384"];
2715 [label="GetBoundReferenceManager() 841385"];
2716 [label="GetBoundReferenceManager(); 841386"];
2717 [label="return Assembly.Modules[0]; 841387"];
2718 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 841388"];
2719 [label="GetNullableAnalysisValue() 841389"];
2720 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 841390"];
2721 [label="Options 841391"];
2722 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 841392"];
2723 [label="param GetBinderFactory(bool ignoreAccessibility = false) 841393"];
2724 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 841394"];
2725 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 841395"];
2726 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 841396"];
2727 [label="param GetBinderFactory(bool ignoreAccessibility) 841397"];
2728 [label="ignoreAccessibility 841398"];
2729 [label="GetSyntaxTreeOrdinal(syntaxTree) 841399"];
2730 [label="this.ContainsSyntaxTree(tree) 841400"];
2731 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 841401"];
2732 [label="_syntaxAndDeclarations.GetLazyState() 841402"];
2733 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841403"];
2734 [label="_syntaxAndDeclarations.GetLazyState() 841404"];
2735 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841405"];
2736 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 841406"];
2737 [label="BinderFactory? previousFactory; 841407"];
2738 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 841408"];
2739 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 841409"];
2740 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 841410"];
2741 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 841411"];
2742 [label="param AddNewFactory(bool ignoreAccessibility) 841412"];
2743 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 841413"];
2744 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 841414"];
2745 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 841415"];
2746 [label="BinderFactory? previousFactory; 841416"];
2747 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 841417"];
2748 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 841418"];
2749 [label="Assembly 841419"];
2750 [label="SourceAssembly 841420"];
2751 [label="GetBoundReferenceManager() 841421"];
2752 [label="GetBoundReferenceManager(); 841422"];
2753 [label="return Assembly.Modules[0]; 841423"];
2754 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 841424"];
2755 [label="param IsFeatureEnabled(MessageID feature) 841425"];
2756 [label="compilation.SyntaxTrees 841426"];
2757 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 841427"];
2758 [label="_syntaxAndDeclarations.GetLazyState() 841428"];
2759 [label="param GetLazyState(this) 841429"];
2760 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 841430"];
2761 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 841431"];
2762 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 841432"];
2763 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 841433"];
2764 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 841434"];
2765 [label="GetBoundReferenceManager(); 841435"];
2766 [label="Debug.Assert(result.SpecialType == specialType); 841436"];
2767 [label="param ShouldEmitNullableAttributes(Symbol symbol) 841437"];
2768 [label="param ShouldEmitNullableAttributes(this) 841438"];
2769 [label="RoslynDebug.Assert(symbol is object); 841439"];
2770 [label="RoslynDebug.Assert(symbol is object); 841440"];
2771 [label="Debug.Assert(symbol.IsDefinition); 841441"];
2772 [label="SourceModule 841442"];
2773 [label="get\n            {\n                return Assembly.Modules[0];\n            } 841443"];
2774 [label="Assembly 841444"];
2775 [label="SourceAssembly 841445"];
2776 [label="GetBoundReferenceManager() 841446"];
2777 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 841447"];
2778 [label="return _referenceManager; 841448"];
2779 [label="GetBoundReferenceManager(); 841449"];
2780 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 841450"];
2781 [label="return Assembly.Modules[0]; 841451"];
2782 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 841452"];
2783 [label="EmitNullablePublicOnly 841453"];
2784 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 841454"];
2785 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 841455"];
2786 [label="SyntaxTrees 841456"];
2787 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 841457"];
2788 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 841458"];
2789 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 841459"];
2790 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 841460"];
2791 [label="_lazyEmitNullablePublicOnly 841461"];
2792 [label="return _lazyEmitNullablePublicOnly.Value(); 841462"];
2793 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 841463"];
2794 [label="return true; 841464"];
2795 [label="Debug.Assert(symbol.IsDefinition); 841465"];
2796 [label="GetBoundReferenceManager(); 841466"];
2797 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 841467"];
2798 [label="param SymbolDeclaredEvent(Symbol symbol) 841468"];
2799 [label="param SymbolDeclaredEvent(this) 841469"];
2800 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 841470"];
2801 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 841471"];
2802 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 841472"];
2803 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 841473"];
2804 [label="_declarationDiagnosticsFrozen = true; 841474"];
2805 [label="_needsGeneratedAttributes_IsFrozen = true; 841475"];
2806 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 841476"];
2807 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 841477"];
2808 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 841478"];
2809 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 841479"];
2810 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 841480"];
2811 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 841481"];
2812 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 841482"];
2813 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 841483"];
2814 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 841484"];
2815 [label="param CheckCompliance(DiagnosticBag diagnostics) 841485"];
2816 [label="GetBoundReferenceManager(); 841486"];
2817 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 841487"];
2818 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 841488"];
2819 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 841489"];
2820 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 841490"];
2821 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 841491"];
2822 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 841492"];
2823 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 841493"];
2824 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 841494"];
2825 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 841495"];
2826 [label="Location ignoredLocation; 841496"];
2827 [label="param GetDeclaredCompliance(out Location attributeLocation) 841497"];
2828 [label="param GetDeclaredCompliance(this) 841498"];
2829 [label="attributeLocation = null; 841499"];
2830 [label="if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                } 841500"];
2831 [label="if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                } 841501"];
2832 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 841502"];
2833 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 841503"];
2834 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 841504"];
2835 [label="IsTrue(assemblyCompliance) 841505"];
2836 [label="param IsTrue(Compliance compliance) 841506"];
2837 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 841507"];
2838 [label="return false; 841508"];
2839 [label="Location attributeLocation; 841509"];
2840 [label="param GetDeclaredCompliance(out Location attributeLocation) 841510"];
2841 [label="param GetDeclaredCompliance(this) 841511"];
2842 [label="attributeLocation = null; 841512"];
2843 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 841513"];
2844 [label="i == 0 841514"];
2845 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 841515"];
2846 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 841516"];
2847 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 841517"];
2848 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 841518"];
2849 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 841519"];
2850 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 841520"];
2851 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 841521"];
2852 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 841522"];
2853 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 841523"];
2854 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 841524"];
2855 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 841525"];
2856 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 841526"];
2857 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 841527"];
2858 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 841528"];
2859 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 841529"];
2860 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 841530"];
2861 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 841531"];
2862 [label="System.Diagnostics.Debug.Assert((object)containing != null); 841532"];
2863 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 841533"];
2864 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 841534"];
2865 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 841535"];
2866 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 841536"];
2867 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 841537"];
2868 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 841538"];
2869 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 841539"];
2870 [label="return compliance; 841540"];
2871 [label="IsTrue(GetInheritedCompliance(symbol)) 841541"];
2872 [label="param IsTrue(Compliance compliance) 841542"];
2873 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 841543"];
2874 [label="return false; 841544"];
2875 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 841545"];
2876 [label="param IsTrue(Compliance compliance) 841546"];
2877 [label="if (DoNotVisit(symbol)) return; 841547"];
2878 [label="DoNotVisit(symbol) 841548"];
2879 [label="param DoNotVisit(Symbol symbol) 841549"];
2880 [label="param DoNotVisit(this) 841550"];
2881 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 841551"];
2882 [label="return false; 841552"];
2883 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 841553"];
2884 [label="param IsTrue(Compliance compliance) 841554"];
2885 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 841555"];
2886 [label="return false; 841556"];
2887 [label="param VisitNamespaceMembersAsTasks(this) 841557"];
2888 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 841558"];
2889 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 841559"];
2890 [label="if (tasks == null)\n            {\n                return;\n            } 841560"];
2891 [label="if (tasks == null)\n            {\n                return;\n            } 841561"];
2892 [label="curTask.GetAwaiter().GetResult(); 841562"];
2893 [label="checker.WaitForWorkers(); 841563"];
2894 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 841564"];
2895 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 841565"];
2896 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 841566"];
2897 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 841567"];
2898 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 841568"];
2899 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 841569"];
2900 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 841570"];
2901 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 841571"];
2902 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 841572"];
2903 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 841573"];
2904 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 841574"];
2905 [label="excludeDiagnostics?.Free(); 841575"];
2906 [label="if (hasDeclarationErrors)\n                {\n                    return false;\n                } 841576"];
2907 [label="if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                } 841577"];
2908 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken); 841578"];
2909 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken) 841579"];
2910 [label="param ProcessSynthesizedMembers(CSharpCompilation compilation) 841580"];
2911 [label="param ProcessSynthesizedMembers(PEModuleBuilder moduleBeingBuilt) 841581"];
2912 [label="param ProcessSynthesizedMembers(CancellationToken cancellationToken) 841582"];
2913 [label="Debug.Assert(moduleBeingBuilt != null); 841583"];
2914 [label="Debug.Assert(moduleBeingBuilt != null); 841584"];
2915 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 841585"];
2916 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 841586"];
2917 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 841587"];
2918 [label="new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken) 841588"];
2919 [label="param SynthesizedMetadataCompiler(PEModuleBuilder moduleBeingBuilt) 841589"];
2920 [label="param SynthesizedMetadataCompiler(CancellationToken cancellationToken) 841590"];
2921 [label="param SynthesizedMetadataCompiler(this) 841591"];
2922 [label="param SynthesizedMetadataCompiler(this) 841592"];
2923 [label="_moduleBeingBuilt 841593"];
2924 [label="Debug.Assert(moduleBeingBuilt != null); 841594"];
2925 [label="Debug.Assert(moduleBeingBuilt != null); 841595"];
2926 [label="_moduleBeingBuilt 841596"];
2927 [label="_cancellationToken 841597"];
2928 [label="compilation.SourceModule 841598"];
2929 [label="get\n            {\n                return Assembly.Modules[0];\n            } 841599"];
2930 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 841600"];
2931 [label="return _referenceManager; 841601"];
2932 [label="GetBoundReferenceManager(); 841602"];
2933 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 841603"];
2934 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 841604"];
2935 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 841605"];
2936 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 841606"];
2937 [label="param VisitNamespace(NamespaceSymbol symbol) 841607"];
2938 [label="param VisitNamespace(this) 841608"];
2939 [label="_cancellationToken.ThrowIfCancellationRequested(); 841609"];
2940 [label="foreach (var s in symbol.GetMembers())\n            {\n                s.Accept(this);\n            } 841610"];
2941 [label="s.Accept(this); 841611"];
2942 [label="s.Accept(this); 841612"];
2943 [label="param VisitNamedType(NamedTypeSymbol symbol) 841613"];
2944 [label="param VisitNamedType(this) 841614"];
2945 [label="_cancellationToken.ThrowIfCancellationRequested(); 841615"];
2946 [label="var sourceTypeSymbol = symbol as SourceMemberContainerTypeSymbol; 841616"];
2947 [label="if ((object)sourceTypeSymbol != null)\n            {\n                if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                }\n            } 841617"];
2948 [label="if ((object)sourceTypeSymbol != null)\n            {\n                if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                }\n            } 841618"];
2949 [label="if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                } 841619"];
2950 [label="if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                } 841620"];
2951 [label="foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    } 841621"];
2952 [label="new LexicalOrderSymbolComparer() 841622"];
2953 [label="param LexicalOrderSymbolComparer(this) 841623"];
2954 [label="Instance = new LexicalOrderSymbolComparer() 841624"];
2955 [label="foreach (Symbol member in symbol.GetMembers())\n            {\n                switch (member.Kind)\n                {\n                    case SymbolKind.Property:\n                    case SymbolKind.NamedType:\n                        member.Accept(this);\n                        break;\n                }\n            } 841625"];
2956 [label="foreach (Symbol member in symbol.GetMembers())\n            {\n                switch (member.Kind)\n                {\n                    case SymbolKind.Property:\n                    case SymbolKind.NamedType:\n                        member.Accept(this);\n                        break;\n                }\n            } 841626"];
2957 [label="param Compare(Symbol x) 841627"];
2958 [label="param Compare(Symbol y) 841628"];
2959 [label="param Compare(this) 841629"];
2960 [label="int comparison; 841630"];
2961 [label="if (x == y)\n            {\n                return 0;\n            } 841631"];
2962 [label="var xSortKey = x.GetLexicalSortKey(); 841632"];
2963 [label="var ySortKey = y.GetLexicalSortKey(); 841633"];
2964 [label="var ySortKey = y.GetLexicalSortKey(); 841634"];
2965 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 841635"];
2966 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 841636"];
2967 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 841637"];
2968 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 841638"];
2969 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 841639"];
2970 [label="return comparison; 841640"];
2971 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 841641"];
2972 [label="switch (member.Kind)\n                {\n                    case SymbolKind.Property:\n                    case SymbolKind.NamedType:\n                        member.Accept(this);\n                        break;\n                } 841642"];
2973 [label="return true; 841643"];
2974 [label="SourceAssembly 841644"];
2975 [label="GetBoundReferenceManager() 841645"];
2976 [label="GetBoundReferenceManager(); 841646"];
2977 [label="SourceAssembly.IsDelaySigned 841647"];
2978 [label="SourceAssembly 841648"];
2979 [label="GetBoundReferenceManager() 841649"];
2980 [label="GetBoundReferenceManager(); 841650"];
2981 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 841651"];
2982 [label="param GetCorLibraryReferenceToEmit(this) 841652"];
2983 [label="CorLibrary 841653"];
2984 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 841654"];
2985 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 841655"];
2986 [label="AssemblySymbol corLibrary = CorLibrary; 841656"];
2987 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 841657"];
2988 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 841658"];
2989 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 841659"];
2990 [label="return Translate(corLibrary, context.Diagnostics); 841660"];
2991 [label="return Translate(corLibrary, context.Diagnostics); 841661"];
2992 [label="Translate(corLibrary, context.Diagnostics) 841662"];
2993 [label="param Translate(AssemblySymbol assembly) 841663"];
2994 [label="param Translate(DiagnosticBag diagnostics) 841664"];
2995 [label="param Translate(this) 841665"];
2996 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 841666"];
2997 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 841667"];
2998 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 841668"];
2999 [label="Cci.IModuleReference reference; 841669"];
3000 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 841670"];
3001 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 841671"];
3002 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 841672"];
3003 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 841673"];
3004 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 841674"];
3005 [label="new AssemblyReference(assembly) 841675"];
3006 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 841676"];
3007 [label="param AssemblyReference(this) 841677"];
3008 [label="_targetAssembly 841678"];
3009 [label="Debug.Assert((object)assemblySymbol != null); 841679"];
3010 [label="Debug.Assert((object)assemblySymbol != null); 841680"];
3011 [label="_targetAssembly 841681"];
3012 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 841682"];
3013 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 841683"];
3014 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 841684"];
3015 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 841685"];
3016 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 841686"];
3017 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 841687"];
3018 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 841688"];
3019 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 841689"];
3020 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 841690"];
3021 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 841691"];
3022 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 841692"];
3023 [label="param ValidateReferencedAssembly(this) 841693"];
3024 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 841694"];
3025 [label="asmRef.Identity 841695"];
3026 [label="=> _targetAssembly.Identity 841696"];
3027 [label="_targetAssembly.Identity 841697"];
3028 [label="AssemblyIdentity refIdentity = asmRef.Identity; 841698"];
3029 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 841699"];
3030 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 841700"];
3031 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 841701"];
3032 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 841702"];
3033 [label="var refMachine = assembly.Machine; 841703"];
3034 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 841704"];
3035 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 841705"];
3036 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 841706"];
3037 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 841707"];
3038 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 841708"];
3039 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 841709"];
3040 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 841710"];
3041 [label="return cachedAsmRef; 841711"];
3042 [label="var refonlyDiagnostics = compilation.Emit(new MemoryStream(), pdbStream: null,\n                options: refonlyOptions, manifestResources: hash_resources).Diagnostics; 841712"];
3043 [label="=> _targetAssembly.Identity 841713"];
3044 [label="_targetAssembly.Identity 841714"];
3045 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 841715"];
3046 [label="param GetAssemblyReferencesFromAddedModules(this) 841716"];
3047 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 841717"];
3048 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 841718"];
3049 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 841719"];
3050 [label="foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                } 841720"];
3051 [label="param GetAssemblyReferencesFromAddedModules(this) 841721"];
3052 [label="param GetFiles(EmitContext context) 841722"];
3053 [label="param GetFiles(this) 841723"];
3054 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 841724"];
3055 [label="return getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly); 841725"];
3056 [label="return getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly); 841726"];
3057 [label="getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly) 841727"];
3058 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 841728"];
3059 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 841729"];
3060 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 841730"];
3061 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 841731"];
3062 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 841732"];
3063 [label="var modules = sourceAssSymbol.Modules; 841733"];
3064 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 841734"];
3065 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 841735"];
3066 [label="builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics)); 841736"];
3067 [label="builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics)); 841737"];
3068 [label="Translate(modules[i], contxt.Diagnostics) 841738"];
3069 [label="param Translate(ModuleSymbol module) 841739"];
3070 [label="param Translate(DiagnosticBag diagnostics) 841740"];
3071 [label="param Translate(this) 841741"];
3072 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 841742"];
3073 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 841743"];
3074 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 841744"];
3075 [label="if ((object)module == null)\n            {\n                return null;\n            } 841745"];
3076 [label="if ((object)module == null)\n            {\n                return null;\n            } 841746"];
3077 [label="Cci.IModuleReference moduleRef; 841747"];
3078 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 841748"];
3079 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 841749"];
3080 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 841750"];
3081 [label="moduleRef = TranslateModule(module, diagnostics); 841751"];
3082 [label="moduleRef = TranslateModule(module, diagnostics); 841752"];
3083 [label="TranslateModule(module, diagnostics) 841753"];
3084 [label="param TranslateModule(ModuleSymbol module) 841754"];
3085 [label="param TranslateModule(DiagnosticBag diagnostics) 841755"];
3086 [label="param TranslateModule(this) 841756"];
3087 [label="AssemblySymbol container = module.ContainingAssembly; 841757"];
3088 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 841758"];
3089 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 841759"];
3090 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 841760"];
3091 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 841761"];
3092 [label="return new ModuleReference(this, module); 841762"];
3093 [label="return new ModuleReference(this, module); 841763"];
3094 [label="return new ModuleReference(this, module); 841764"];
3095 [label="new ModuleReference(this, module) 841765"];
3096 [label="param ModuleReference(PEModuleBuilder moduleBeingBuilt) 841766"];
3097 [label="param ModuleReference(ModuleSymbol underlyingModule) 841767"];
3098 [label="param ModuleReference(this) 841768"];
3099 [label="_moduleBeingBuilt 841769"];
3100 [label="_underlyingModule 841770"];
3101 [label="Debug.Assert(moduleBeingBuilt != null); 841771"];
3102 [label="Debug.Assert(moduleBeingBuilt != null); 841772"];
3103 [label="Debug.Assert((object)underlyingModule != null); 841773"];
3104 [label="Debug.Assert((object)underlyingModule != null); 841774"];
3105 [label="_moduleBeingBuilt 841775"];
3106 [label="_underlyingModule 841776"];
3107 [label="moduleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(module, moduleRef); 841777"];
3108 [label="moduleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(module, moduleRef); 841778"];
3109 [label="moduleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(module, moduleRef); 841779"];
3110 [label="return moduleRef; 841780"];
3111 [label="builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics)); 841781"];
3112 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 841782"];
3113 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 841783"];
3114 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 841784"];
3115 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 841785"];
3116 [label="if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            } 841786"];
3117 [label="contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton)); 841787"];
3118 [label="contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton)); 841788"];
3119 [label="contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton)); 841789"];
3120 [label="builder.Free(); 841790"];
3121 [label="return lazyFiles; 841791"];
3122 [label="var refonlyDiagnostics = compilation.Emit(new MemoryStream(), pdbStream: null,\n                options: refonlyOptions, manifestResources: hash_resources).Diagnostics; 841792"];
3123 [label="get\n            {\n                return _underlyingModule.Name;\n            } 841793"];
3124 [label="return _underlyingModule.Name; 841794"];
3125 [label="param GetAnonymousTypeDefinitions(EmitContext context) 841795"];
3126 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 841796"];
3127 [label="return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>(); 841797"];
3128 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 841798"];
3129 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 841799"];
3130 [label="=> _additionalTypes 841800"];
3131 [label="_additionalTypes 841801"];
3132 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 841802"];
3133 [label="GetEmbeddedTypes(context.Diagnostics) 841803"];
3134 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 841804"];
3135 [label="param GetEmbeddedTypes(this) 841805"];
3136 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 841806"];
3137 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 841807"];
3138 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 841808"];
3139 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 841809"];
3140 [label="param CreateEmbeddedAttributesIfNeeded(this) 841810"];
3141 [label="GetNeedsGeneratedAttributes() 841811"];
3142 [label="param GetNeedsGeneratedAttributes(this) 841812"];
3143 [label="_needsGeneratedAttributes_IsFrozen = true; 841813"];
3144 [label="_needsGeneratedAttributes_IsFrozen 841814"];
3145 [label="GetNeedsGeneratedAttributesInternal() 841815"];
3146 [label="param GetNeedsGeneratedAttributesInternal(this) 841816"];
3147 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 841817"];
3148 [label="return GetNeedsGeneratedAttributesInternal(); 841818"];
3149 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 841819"];
3150 [label="ShouldEmitNullablePublicOnlyAttribute() 841820"];
3151 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 841821"];
3152 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 841822"];
3153 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 841823"];
3154 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 841824"];
3155 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 841825"];
3156 [label="return; 841826"];
3157 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 841827"];
3158 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 841828"];
3159 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 841829"];
3160 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 841830"];
3161 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 841831"];
3162 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 841832"];
3163 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 841833"];
3164 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 841834"];
3165 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 841835"];
3166 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 841836"];
3167 [label="builder.AddIfNotNull(_lazyNullableAttribute); 841837"];
3168 [label="builder.AddIfNotNull(_lazyNullableAttribute); 841838"];
3169 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 841839"];
3170 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 841840"];
3171 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 841841"];
3172 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 841842"];
3173 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 841843"];
3174 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 841844"];
3175 [label="return builder.ToImmutableAndFree(); 841845"];
3176 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 841846"];
3177 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 841847"];
3178 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 841848"];
3179 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 841849"];
3180 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 841850"];
3181 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 841851"];
3182 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 841852"];
3183 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 841853"];
3184 [label="param MemberVisibility(Symbol symbol) 841854"];
3185 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 841855"];
3186 [label="if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    } 841856"];
3187 [label="return Cci.TypeMemberVisibility.Private; 841857"];
3188 [label="return Cci.TypeMemberVisibility.Public; 841858"];
3189 [label="param ShouldEmitNullableAttributes(Symbol symbol) 841859"];
3190 [label="param ShouldEmitNullableAttributes(this) 841860"];
3191 [label="RoslynDebug.Assert(symbol is object); 841861"];
3192 [label="Debug.Assert(symbol.IsDefinition); 841862"];
3193 [label="SourceModule 841863"];
3194 [label="get\n            {\n                return Assembly.Modules[0];\n            } 841864"];
3195 [label="Assembly 841865"];
3196 [label="SourceAssembly 841866"];
3197 [label="GetBoundReferenceManager() 841867"];
3198 [label="GetBoundReferenceManager(); 841868"];
3199 [label="return Assembly.Modules[0]; 841869"];
3200 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 841870"];
3201 [label="EmitNullablePublicOnly 841871"];
3202 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 841872"];
3203 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 841873"];
3204 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 841874"];
3205 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 841875"];
3206 [label="param SynthesizeNullableAttributeIfNecessary(this) 841876"];
3207 [label="Compilation.SourceModule 841877"];
3208 [label="get\n            {\n                return Assembly.Modules[0];\n            } 841878"];
3209 [label="Assembly 841879"];
3210 [label="SourceAssembly 841880"];
3211 [label="GetBoundReferenceManager() 841881"];
3212 [label="GetBoundReferenceManager(); 841882"];
3213 [label="return Assembly.Modules[0]; 841883"];
3214 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 841884"];
3215 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 841885"];
3216 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 841886"];
3217 [label="type.AddNullableTransforms(flagsBuilder); 841887"];
3218 [label="type.AddNullableTransforms(flagsBuilder); 841888"];
3219 [label="SynthesizedAttributeData attribute; 841889"];
3220 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 841890"];
3221 [label="attribute = null; 841891"];
3222 [label="flagsBuilder.Free(); 841892"];
3223 [label="return attribute; 841893"];
3224 [label="var refonlyDiagnostics = compilation.Emit(new MemoryStream(), pdbStream: null,\n                options: refonlyOptions, manifestResources: hash_resources).Diagnostics; 841894"];
3225 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 841895"];
3226 [label="param GetSynthesizedNestedTypes(this) 841896"];
3227 [label="return null; 841897"];
3228 [label="var refonlyDiagnostics = compilation.Emit(new MemoryStream(), pdbStream: null,\n                options: refonlyOptions, manifestResources: hash_resources).Diagnostics; 841898"];
3229 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 841899"];
3230 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 841900"];
3231 [label="NamedTypeSymbol result; 841901"];
3232 [label="GetBoundReferenceManager(); 841902"];
3233 [label="Debug.Assert(result.SpecialType == specialType); 841903"];
3234 [label="SourceAssembly 841904"];
3235 [label="GetBoundReferenceManager() 841905"];
3236 [label="GetBoundReferenceManager(); 841906"];
3237 [label="GetBoundReferenceManager() 841907"];
3238 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 841908"];
3239 [label="param Translate(MethodSymbol methodSymbol) 841909"];
3240 [label="param Translate(SyntaxNode syntaxNodeOpt) 841910"];
3241 [label="param Translate(DiagnosticBag diagnostics) 841911"];
3242 [label="param Translate(BoundArgListOperator optArgList = null) 841912"];
3243 [label="param Translate(bool needDeclaration = false) 841913"];
3244 [label="param Translate(this) 841914"];
3245 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 841915"];
3246 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 841916"];
3247 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 841917"];
3248 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 841918"];
3249 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 841919"];
3250 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 841920"];
3251 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 841921"];
3252 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 841922"];
3253 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 841923"];
3254 [label="param Translate(MethodSymbol methodSymbol) 841924"];
3255 [label="param Translate(SyntaxNode syntaxNodeOpt) 841925"];
3256 [label="param Translate(DiagnosticBag diagnostics) 841926"];
3257 [label="param Translate(bool needDeclaration) 841927"];
3258 [label="param Translate(this) 841928"];
3259 [label="object reference; 841929"];
3260 [label="Cci.IMethodReference methodRef; 841930"];
3261 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 841931"];
3262 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 841932"];
3263 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 841933"];
3264 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 841934"];
3265 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 841935"];
3266 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 841936"];
3267 [label="bool typeIsGeneric = IsGenericType(container); 841937"];
3268 [label="IsGenericType(container) 841938"];
3269 [label="param IsGenericType(NamedTypeSymbol toCheck) 841939"];
3270 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 841940"];
3271 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 841941"];
3272 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 841942"];
3273 [label="toCheck = toCheck.ContainingType; 841943"];
3274 [label="return false; 841944"];
3275 [label="bool typeIsGeneric = IsGenericType(container); 841945"];
3276 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 841946"];
3277 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 841947"];
3278 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 841948"];
3279 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 841949"];
3280 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 841950"];
3281 [label="return methodSymbol.GetCciAdapter(); 841951"];
3282 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 841952"];
3283 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 841953"];
3284 [label="return unexpandedMethodRef; 841954"];
3285 [label="param Translate(TypeSymbol typeSymbol) 841955"];
3286 [label="param Translate(SyntaxNode syntaxNodeOpt) 841956"];
3287 [label="param Translate(DiagnosticBag diagnostics) 841957"];
3288 [label="param Translate(this) 841958"];
3289 [label="Debug.Assert(diagnostics != null); 841959"];
3290 [label="Debug.Assert(diagnostics != null); 841960"];
3291 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 841961"];
3292 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 841962"];
3293 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 841963"];
3294 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 841964"];
3295 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 841965"];
3296 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 841966"];
3297 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 841967"];
3298 [label="param Translate(SyntaxNode syntaxNodeOpt) 841968"];
3299 [label="param Translate(DiagnosticBag diagnostics) 841969"];
3300 [label="param Translate(bool fromImplements = false) 841970"];
3301 [label="param Translate(bool needDeclaration = false) 841971"];
3302 [label="param Translate(this) 841972"];
3303 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 841973"];
3304 [label="Debug.Assert(diagnostics != null); 841974"];
3305 [label="Debug.Assert(diagnostics != null); 841975"];
3306 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 841976"];
3307 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 841977"];
3308 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 841978"];
3309 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 841979"];
3310 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 841980"];
3311 [label="object reference; 841981"];
3312 [label="Cci.INamedTypeReference typeRef; 841982"];
3313 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 841983"];
3314 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 841984"];
3315 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 841985"];
3316 [label="IsGenericType(container) 841986"];
3317 [label="param IsGenericType(NamedTypeSymbol toCheck) 841987"];
3318 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 841988"];
3319 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 841989"];
3320 [label="return false; 841990"];
3321 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 841991"];
3322 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 841992"];
3323 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 841993"];
3324 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 841994"];
3325 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 841995"];
3326 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 841996"];
3327 [label="param Translate(SyntaxNode syntaxNodeOpt) 841997"];
3328 [label="param Translate(DiagnosticBag diagnostics) 841998"];
3329 [label="param Translate(bool fromImplements = false) 841999"];
3330 [label="param Translate(bool needDeclaration = false) 842000"];
3331 [label="param Translate(this) 842001"];
3332 [label="Debug.Assert(diagnostics != null); 842002"];
3333 [label="Debug.Assert(diagnostics != null); 842003"];
3334 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842004"];
3335 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842005"];
3336 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842006"];
3337 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842007"];
3338 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842008"];
3339 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842009"];
3340 [label="param Translate(ModuleSymbol module) 842010"];
3341 [label="param Translate(DiagnosticBag diagnostics) 842011"];
3342 [label="param Translate(this) 842012"];
3343 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 842013"];
3344 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 842014"];
3345 [label="if ((object)module == null)\n            {\n                return null;\n            } 842015"];
3346 [label="if ((object)module == null)\n            {\n                return null;\n            } 842016"];
3347 [label="Cci.IModuleReference moduleRef; 842017"];
3348 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 842018"];
3349 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 842019"];
3350 [label="return moduleRef; 842020"];
3351 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842021"];
3352 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842022"];
3353 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842023"];
3354 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842024"];
3355 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842025"];
3356 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842026"];
3357 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 842027"];
3358 [label="param Translate(this) 842028"];
3359 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 842029"];
3360 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 842030"];
3361 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 842031"];
3362 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 842032"];
3363 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 842033"];
3364 [label="MustBeWrapped(@params.First()) 842034"];
3365 [label="param MustBeWrapped(ParameterSymbol param) 842035"];
3366 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 842036"];
3367 [label="var container = param.ContainingSymbol; 842037"];
3368 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 842038"];
3369 [label="ContainerIsGeneric(container) 842039"];
3370 [label="param ContainerIsGeneric(Symbol container) 842040"];
3371 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842041"];
3372 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842042"];
3373 [label="IsGenericType(container.ContainingType) 842043"];
3374 [label="param IsGenericType(NamedTypeSymbol toCheck) 842044"];
3375 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842045"];
3376 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842046"];
3377 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842047"];
3378 [label="toCheck = toCheck.ContainingType; 842048"];
3379 [label="return false; 842049"];
3380 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842050"];
3381 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842051"];
3382 [label="return false; 842052"];
3383 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 842053"];
3384 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 842054"];
3385 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 842055"];
3386 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 842056"];
3387 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 842057"];
3388 [label="param MustBeWrapped(ParameterSymbol param) 842058"];
3389 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 842059"];
3390 [label="var container = param.ContainingSymbol; 842060"];
3391 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 842061"];
3392 [label="ContainerIsGeneric(container) 842062"];
3393 [label="param ContainerIsGeneric(Symbol container) 842063"];
3394 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842064"];
3395 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842065"];
3396 [label="IsGenericType(container.ContainingType) 842066"];
3397 [label="param IsGenericType(NamedTypeSymbol toCheck) 842067"];
3398 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842068"];
3399 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842069"];
3400 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842070"];
3401 [label="toCheck = toCheck.ContainingType; 842071"];
3402 [label="return false; 842072"];
3403 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842073"];
3404 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842074"];
3405 [label="return false; 842075"];
3406 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 842076"];
3407 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 842077"];
3408 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 842078"];
3409 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 842079"];
3410 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842080"];
3411 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842081"];
3412 [label="param Translate(SyntaxNode syntaxNodeOpt) 842082"];
3413 [label="param Translate(DiagnosticBag diagnostics) 842083"];
3414 [label="param Translate(bool fromImplements = false) 842084"];
3415 [label="param Translate(bool needDeclaration = false) 842085"];
3416 [label="Debug.Assert(diagnostics != null); 842086"];
3417 [label="Debug.Assert(diagnostics != null); 842087"];
3418 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842088"];
3419 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842089"];
3420 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842090"];
3421 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842091"];
3422 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842092"];
3423 [label="object reference; 842093"];
3424 [label="Cci.INamedTypeReference typeRef; 842094"];
3425 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 842095"];
3426 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842096"];
3427 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842097"];
3428 [label="IsGenericType(container) 842098"];
3429 [label="param IsGenericType(NamedTypeSymbol toCheck) 842099"];
3430 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842100"];
3431 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842101"];
3432 [label="return false; 842102"];
3433 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842103"];
3434 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842104"];
3435 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842105"];
3436 [label="param IsPlatformType(Cci.ITypeReference typeRef) 842106"];
3437 [label="param IsPlatformType(Cci.PlatformType platformType) 842107"];
3438 [label="param IsPlatformType(this) 842108"];
3439 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 842109"];
3440 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 842110"];
3441 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 842111"];
3442 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 842112"];
3443 [label="return namedType.SpecialType == (SpecialType)platformType; 842113"];
3444 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 842114"];
3445 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842115"];
3446 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842116"];
3447 [label="param Translate(SyntaxNode syntaxNodeOpt) 842117"];
3448 [label="param Translate(DiagnosticBag diagnostics) 842118"];
3449 [label="param Translate(bool fromImplements = false) 842119"];
3450 [label="param Translate(bool needDeclaration = false) 842120"];
3451 [label="Debug.Assert(diagnostics != null); 842121"];
3452 [label="Debug.Assert(diagnostics != null); 842122"];
3453 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842123"];
3454 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842124"];
3455 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842125"];
3456 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842126"];
3457 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842127"];
3458 [label="object reference; 842128"];
3459 [label="Cci.INamedTypeReference typeRef; 842129"];
3460 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 842130"];
3461 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842131"];
3462 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842132"];
3463 [label="IsGenericType(container) 842133"];
3464 [label="param IsGenericType(NamedTypeSymbol toCheck) 842134"];
3465 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842135"];
3466 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842136"];
3467 [label="return false; 842137"];
3468 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842138"];
3469 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842139"];
3470 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842140"];
3471 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842141"];
3472 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842142"];
3473 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842143"];
3474 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842144"];
3475 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842145"];
3476 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842146"];
3477 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 842147"];
3478 [label="param MustBeWrapped(ParameterSymbol param) 842148"];
3479 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 842149"];
3480 [label="var container = param.ContainingSymbol; 842150"];
3481 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 842151"];
3482 [label="ContainerIsGeneric(container) 842152"];
3483 [label="param ContainerIsGeneric(Symbol container) 842153"];
3484 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842154"];
3485 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842155"];
3486 [label="IsGenericType(container.ContainingType) 842156"];
3487 [label="param IsGenericType(NamedTypeSymbol toCheck) 842157"];
3488 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842158"];
3489 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842159"];
3490 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842160"];
3491 [label="toCheck = toCheck.ContainingType; 842161"];
3492 [label="return false; 842162"];
3493 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842163"];
3494 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842164"];
3495 [label="param MustBeWrapped(ParameterSymbol param) 842165"];
3496 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 842166"];
3497 [label="var container = param.ContainingSymbol; 842167"];
3498 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 842168"];
3499 [label="ContainerIsGeneric(container) 842169"];
3500 [label="param ContainerIsGeneric(Symbol container) 842170"];
3501 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842171"];
3502 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842172"];
3503 [label="IsGenericType(container.ContainingType) 842173"];
3504 [label="param IsGenericType(NamedTypeSymbol toCheck) 842174"];
3505 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842175"];
3506 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842176"];
3507 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842177"];
3508 [label="toCheck = toCheck.ContainingType; 842178"];
3509 [label="return false; 842179"];
3510 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842180"];
3511 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842181"];
3512 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 842182"];
3513 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 842183"];
3514 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 842184"];
3515 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 842185"];
3516 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 842186"];
3517 [label="bool typeIsGeneric = IsGenericType(container); 842187"];
3518 [label="IsGenericType(container) 842188"];
3519 [label="param IsGenericType(NamedTypeSymbol toCheck) 842189"];
3520 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842190"];
3521 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842191"];
3522 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842192"];
3523 [label="toCheck = toCheck.ContainingType; 842193"];
3524 [label="return false; 842194"];
3525 [label="bool typeIsGeneric = IsGenericType(container); 842195"];
3526 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 842196"];
3527 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 842197"];
3528 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 842198"];
3529 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 842199"];
3530 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842200"];
3531 [label="toCheck = toCheck.ContainingType; 842201"];
3532 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 842202"];
3533 [label="return Translate(corLibrary, context.Diagnostics); 842203"];
3534 [label="param Translate(DiagnosticBag diagnostics) 842204"];
3535 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 842205"];
3536 [label="return (Cci.IAssemblyReference)reference; 842206"];
3537 [label="return SourceModule.GetCustomAttributesToEmit(this); 842207"];
3538 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 842208"];
3539 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 842209"];
3540 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 842210"];
3541 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 842211"];
3542 [label="return GetNeedsGeneratedAttributesInternal(); 842212"];
3543 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 842213"];
3544 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 842214"];
3545 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 842215"];
3546 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 842216"];
3547 [label="return; 842217"];
3548 [label="Debug.Assert(symbol.IsDefinition); 842218"];
3549 [label="GetBoundReferenceManager(); 842219"];
3550 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 842220"];
3551 [label="GetBoundReferenceManager(); 842221"];
3552 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 842222"];
3553 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 842223"];
3554 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 842224"];
3555 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 842225"];
3556 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 842226"];
3557 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 842227"];
3558 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 842228"];
3559 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 842229"];
3560 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 842230"];
3561 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 842231"];
3562 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 842232"];
3563 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 842233"];
3564 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 842234"];
3565 [label="param SynthesizeNullableAttributeIfNecessary(this) 842235"];
3566 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 842236"];
3567 [label="return null; 842237"];
3568 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842238"];
3569 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842239"];
3570 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842240"];
3571 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842241"];
3572 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842242"];
3573 [label="object reference; 842243"];
3574 [label="Cci.INamedTypeReference typeRef; 842244"];
3575 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 842245"];
3576 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842246"];
3577 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842247"];
3578 [label="IsGenericType(container) 842248"];
3579 [label="param IsGenericType(NamedTypeSymbol toCheck) 842249"];
3580 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842250"];
3581 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842251"];
3582 [label="return false; 842252"];
3583 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842253"];
3584 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842254"];
3585 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842255"];
3586 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 842256"];
3587 [label="Debug.Assert(symbol.IsDefinition); 842257"];
3588 [label="GetBoundReferenceManager(); 842258"];
3589 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 842259"];
3590 [label="GetBoundReferenceManager(); 842260"];
3591 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 842261"];
3592 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 842262"];
3593 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842263"];
3594 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842264"];
3595 [label="param Translate(SyntaxNode syntaxNodeOpt) 842265"];
3596 [label="param Translate(DiagnosticBag diagnostics) 842266"];
3597 [label="param Translate(bool fromImplements = false) 842267"];
3598 [label="param Translate(bool needDeclaration = false) 842268"];
3599 [label="Debug.Assert(diagnostics != null); 842269"];
3600 [label="Debug.Assert(diagnostics != null); 842270"];
3601 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842271"];
3602 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842272"];
3603 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842273"];
3604 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842274"];
3605 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842275"];
3606 [label="object reference; 842276"];
3607 [label="Cci.INamedTypeReference typeRef; 842277"];
3608 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 842278"];
3609 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842279"];
3610 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842280"];
3611 [label="IsGenericType(container) 842281"];
3612 [label="param IsGenericType(NamedTypeSymbol toCheck) 842282"];
3613 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842283"];
3614 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842284"];
3615 [label="return false; 842285"];
3616 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842286"];
3617 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842287"];
3618 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842288"];
3619 [label="param GetExportedTypes(DiagnosticBag diagnostics) 842289"];
3620 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 842290"];
3621 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 842291"];
3622 [label="var modules = sourceAssembly.Modules; 842292"];
3623 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 842293"];
3624 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 842294"];
3625 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder); 842295"];
3626 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder); 842296"];
3627 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder); 842297"];
3628 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder) 842298"];
3629 [label="param GetExportedTypes(NamespaceOrTypeSymbol symbol) 842299"];
3630 [label="param GetExportedTypes(int parentIndex) 842300"];
3631 [label="param GetExportedTypes(ArrayBuilder<Cci.ExportedType> builder) 842301"];
3632 [label="int index; 842302"];
3633 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                }\n\n                Debug.Assert(symbol.IsDefinition);\n                index = builder.Count;\n                builder.Add(new Cci.ExportedType((Cci.ITypeReference)symbol.GetCciAdapter(), parentIndex, isForwarder: false));\n            }\n            else\n            {\n                index = -1;\n            } 842303"];
3634 [label="index = -1; 842304"];
3635 [label="foreach (var member in symbol.GetMembers())\n            {\n                var namespaceOrType = member as NamespaceOrTypeSymbol;\n                if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                }\n            } 842305"];
3636 [label="var namespaceOrType = member as NamespaceOrTypeSymbol; 842306"];
3637 [label="if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                } 842307"];
3638 [label="if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                } 842308"];
3639 [label="GetExportedTypes(namespaceOrType, index, builder); 842309"];
3640 [label="GetExportedTypes(namespaceOrType, index, builder); 842310"];
3641 [label="GetExportedTypes(namespaceOrType, index, builder); 842311"];
3642 [label="GetExportedTypes(namespaceOrType, index, builder) 842312"];
3643 [label="param GetExportedTypes(NamespaceOrTypeSymbol symbol) 842313"];
3644 [label="param GetExportedTypes(int parentIndex) 842314"];
3645 [label="param GetExportedTypes(ArrayBuilder<Cci.ExportedType> builder) 842315"];
3646 [label="int index; 842316"];
3647 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                }\n\n                Debug.Assert(symbol.IsDefinition);\n                index = builder.Count;\n                builder.Add(new Cci.ExportedType((Cci.ITypeReference)symbol.GetCciAdapter(), parentIndex, isForwarder: false));\n            }\n            else\n            {\n                index = -1;\n            } 842317"];
3648 [label="if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                } 842318"];
3649 [label="return; 842319"];
3650 [label="GetExportedTypes(namespaceOrType, index, builder); 842320"];
3651 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 842321"];
3652 [label="sourceAssembly.DeclaringCompilation.Options 842322"];
3653 [label="get\n            {\n                return _options;\n            } 842323"];
3654 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 842324"];
3655 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 842325"];
3656 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 842326"];
3657 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 842327"];
3658 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 842328"];
3659 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 842329"];
3660 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 842330"];
3661 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 842331"];
3662 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 842332"];
3663 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 842333"];
3664 [label="sourceAssembly.DeclaringCompilation.Options 842334"];
3665 [label="get\n            {\n                return _options;\n            } 842335"];
3666 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 842336"];
3667 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 842337"];
3668 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 842338"];
3669 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 842339"];
3670 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 842340"];
3671 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 842341"];
3672 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 842342"];
3673 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 842343"];
3674 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 842344"];
3675 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 842345"];
3676 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 842346"];
3677 [label="return seenTopLevelForwardedTypes; 842347"];
3678 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 842348"];
3679 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 842349"];
3680 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 842350"];
3681 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 842351"];
3682 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 842352"];
3683 [label="=> _sourceAssembly 842353"];
3684 [label="_sourceAssembly 842354"];
3685 [label="=> _metadataName 842355"];
3686 [label="_metadataName 842356"];
3687 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 842357"];
3688 [label="param GetHashValue(AssemblyHashAlgorithm algorithmId) 842358"];
3689 [label="param GetHashValue(this) 842359"];
3690 [label="return _underlyingModule.GetHash(algorithmId); 842360"];
3691 [label="return _underlyingModule.GetHash(algorithmId); 842361"];
3692 [label="get\n            {\n                return true;\n            } 842362"];
3693 [label="return true; 842363"];
3694 [label="var refonlyDiagnostics = compilation.Emit(new MemoryStream(), pdbStream: null,\n                options: refonlyOptions, manifestResources: hash_resources).Diagnostics; 842364"];
3695 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842365"];
3696 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842366"];
3697 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842367"];
3698 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842368"];
3699 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842369"];
3700 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842370"];
3701 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842371"];
3702 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842372"];
3703 [label="param Translate(SyntaxNode syntaxNodeOpt) 842373"];
3704 [label="param Translate(DiagnosticBag diagnostics) 842374"];
3705 [label="param Translate(bool fromImplements = false) 842375"];
3706 [label="param Translate(bool needDeclaration = false) 842376"];
3707 [label="Debug.Assert(diagnostics != null); 842377"];
3708 [label="Debug.Assert(diagnostics != null); 842378"];
3709 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842379"];
3710 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842380"];
3711 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842381"];
3712 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842382"];
3713 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842383"];
3714 [label="object reference; 842384"];
3715 [label="Cci.INamedTypeReference typeRef; 842385"];
3716 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 842386"];
3717 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842387"];
3718 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842388"];
3719 [label="IsGenericType(container) 842389"];
3720 [label="param IsGenericType(NamedTypeSymbol toCheck) 842390"];
3721 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842391"];
3722 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842392"];
3723 [label="return false; 842393"];
3724 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842394"];
3725 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842395"];
3726 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842396"];
3727 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 842397"];
3728 [label="object reference; 842398"];
3729 [label="Cci.INamedTypeReference typeRef; 842399"];
3730 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 842400"];
3731 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842401"];
3732 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842402"];
3733 [label="IsGenericType(container) 842403"];
3734 [label="param IsGenericType(NamedTypeSymbol toCheck) 842404"];
3735 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842405"];
3736 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842406"];
3737 [label="return false; 842407"];
3738 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842408"];
3739 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842409"];
3740 [label="if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    } 842410"];
3741 [label="return Cci.TypeMemberVisibility.Assembly; 842411"];
3742 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 842412"];
3743 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842413"];
3744 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842414"];
3745 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842415"];
3746 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842416"];
3747 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842417"];
3748 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842418"];
3749 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 842419"];
3750 [label="GetBoundReferenceManager(); 842420"];
3751 [label="Debug.Assert(result.SpecialType == specialType); 842421"];
3752 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 842422"];
3753 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 842423"];
3754 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 842424"];
3755 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 842425"];
3756 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 842426"];
3757 [label="bool typeIsGeneric = IsGenericType(container); 842427"];
3758 [label="IsGenericType(container) 842428"];
3759 [label="param IsGenericType(NamedTypeSymbol toCheck) 842429"];
3760 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842430"];
3761 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842431"];
3762 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842432"];
3763 [label="toCheck = toCheck.ContainingType; 842433"];
3764 [label="return false; 842434"];
3765 [label="bool typeIsGeneric = IsGenericType(container); 842435"];
3766 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 842436"];
3767 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 842437"];
3768 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 842438"];
3769 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 842439"];
3770 [label="param MustBeWrapped(ParameterSymbol param) 842440"];
3771 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 842441"];
3772 [label="var container = param.ContainingSymbol; 842442"];
3773 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 842443"];
3774 [label="ContainerIsGeneric(container) 842444"];
3775 [label="param ContainerIsGeneric(Symbol container) 842445"];
3776 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842446"];
3777 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842447"];
3778 [label="IsGenericType(container.ContainingType) 842448"];
3779 [label="param IsGenericType(NamedTypeSymbol toCheck) 842449"];
3780 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842450"];
3781 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842451"];
3782 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842452"];
3783 [label="toCheck = toCheck.ContainingType; 842453"];
3784 [label="return false; 842454"];
3785 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842455"];
3786 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842456"];
3787 [label="param MustBeWrapped(ParameterSymbol param) 842457"];
3788 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 842458"];
3789 [label="var container = param.ContainingSymbol; 842459"];
3790 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 842460"];
3791 [label="ContainerIsGeneric(container) 842461"];
3792 [label="param ContainerIsGeneric(Symbol container) 842462"];
3793 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842463"];
3794 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842464"];
3795 [label="IsGenericType(container.ContainingType) 842465"];
3796 [label="param IsGenericType(NamedTypeSymbol toCheck) 842466"];
3797 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842467"];
3798 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842468"];
3799 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842469"];
3800 [label="toCheck = toCheck.ContainingType; 842470"];
3801 [label="return false; 842471"];
3802 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842472"];
3803 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842473"];
3804 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842474"];
3805 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842475"];
3806 [label="param Translate(SyntaxNode syntaxNodeOpt) 842476"];
3807 [label="param Translate(DiagnosticBag diagnostics) 842477"];
3808 [label="param Translate(bool fromImplements = false) 842478"];
3809 [label="param Translate(bool needDeclaration = false) 842479"];
3810 [label="Debug.Assert(diagnostics != null); 842480"];
3811 [label="Debug.Assert(diagnostics != null); 842481"];
3812 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842482"];
3813 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842483"];
3814 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842484"];
3815 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842485"];
3816 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842486"];
3817 [label="object reference; 842487"];
3818 [label="Cci.INamedTypeReference typeRef; 842488"];
3819 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 842489"];
3820 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842490"];
3821 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842491"];
3822 [label="IsGenericType(container) 842492"];
3823 [label="param IsGenericType(NamedTypeSymbol toCheck) 842493"];
3824 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842494"];
3825 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842495"];
3826 [label="return false; 842496"];
3827 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842497"];
3828 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842498"];
3829 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842499"];
3830 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 842500"];
3831 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 842501"];
3832 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 842502"];
3833 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 842503"];
3834 [label="GetBoundReferenceManager(); 842504"];
3835 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 842505"];
3836 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 842506"];
3837 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 842507"];
3838 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 842508"];
3839 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 842509"];
3840 [label="bool typeIsGeneric = IsGenericType(container); 842510"];
3841 [label="IsGenericType(container) 842511"];
3842 [label="param IsGenericType(NamedTypeSymbol toCheck) 842512"];
3843 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842513"];
3844 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842514"];
3845 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842515"];
3846 [label="toCheck = toCheck.ContainingType; 842516"];
3847 [label="return false; 842517"];
3848 [label="bool typeIsGeneric = IsGenericType(container); 842518"];
3849 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 842519"];
3850 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 842520"];
3851 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 842521"];
3852 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 842522"];
3853 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842523"];
3854 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842524"];
3855 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842525"];
3856 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842526"];
3857 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842527"];
3858 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842528"];
3859 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 842529"];
3860 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842530"];
3861 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 842531"];
3862 [label="param Translate(SyntaxNode syntaxNodeOpt) 842532"];
3863 [label="param Translate(DiagnosticBag diagnostics) 842533"];
3864 [label="param Translate(bool fromImplements = false) 842534"];
3865 [label="param Translate(bool needDeclaration = false) 842535"];
3866 [label="Debug.Assert(diagnostics != null); 842536"];
3867 [label="Debug.Assert(diagnostics != null); 842537"];
3868 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842538"];
3869 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 842539"];
3870 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 842540"];
3871 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842541"];
3872 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 842542"];
3873 [label="object reference; 842543"];
3874 [label="Cci.INamedTypeReference typeRef; 842544"];
3875 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 842545"];
3876 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842546"];
3877 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842547"];
3878 [label="IsGenericType(container) 842548"];
3879 [label="param IsGenericType(NamedTypeSymbol toCheck) 842549"];
3880 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842550"];
3881 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842551"];
3882 [label="return false; 842552"];
3883 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842553"];
3884 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 842554"];
3885 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 842555"];
3886 [label="param MustBeWrapped(ParameterSymbol param) 842556"];
3887 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 842557"];
3888 [label="var container = param.ContainingSymbol; 842558"];
3889 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 842559"];
3890 [label="ContainerIsGeneric(container) 842560"];
3891 [label="param ContainerIsGeneric(Symbol container) 842561"];
3892 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842562"];
3893 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842563"];
3894 [label="IsGenericType(container.ContainingType) 842564"];
3895 [label="param IsGenericType(NamedTypeSymbol toCheck) 842565"];
3896 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842566"];
3897 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842567"];
3898 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842568"];
3899 [label="toCheck = toCheck.ContainingType; 842569"];
3900 [label="return false; 842570"];
3901 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842571"];
3902 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842572"];
3903 [label="param MustBeWrapped(ParameterSymbol param) 842573"];
3904 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 842574"];
3905 [label="var container = param.ContainingSymbol; 842575"];
3906 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 842576"];
3907 [label="ContainerIsGeneric(container) 842577"];
3908 [label="param ContainerIsGeneric(Symbol container) 842578"];
3909 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842579"];
3910 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842580"];
3911 [label="IsGenericType(container.ContainingType) 842581"];
3912 [label="param IsGenericType(NamedTypeSymbol toCheck) 842582"];
3913 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842583"];
3914 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 842584"];
3915 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842585"];
3916 [label="toCheck = toCheck.ContainingType; 842586"];
3917 [label="return false; 842587"];
3918 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842588"];
3919 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 842589"];
3920 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 842590"];
3921 [label="toCheck = toCheck.ContainingType; 842591"];
3922 [label="Debug.Assert(symbol.IsDefinition); 842592"];
3923 [label="GetBoundReferenceManager(); 842593"];
3924 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 842594"];
3925 [label="GetBoundReferenceManager(); 842595"];
3926 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 842596"];
3927 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 842597"];
3928 [label="param SynthesizeNullableAttributeIfNecessary(this) 842598"];
3929 [label="param Filter(int warningLevelOption) 842599"];
3930 [label="param Filter(NullableContextOptions nullableOption) 842600"];
3931 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 842601"];
3932 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 842602"];
3933 [label="param Filter(CancellationToken cancellationToken) 842603"];
3934 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 842604"];
3935 [label="if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                } 842605"];
3936 [label="return d; 842606"];
3937 [label="refonlyDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)); 842607"];
3938 [label="refonlyDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)); 842608"];
3939 [label="refonlyDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)); 842609"];
3940 [label="Diagnostic(ErrorCode.ERR_CryptoHashFailed) 842610"];
3941 [label="param Diagnostic(object code) 842611"];
3942 [label="param Diagnostic(string squiggledText = null) 842612"];
3943 [label="param Diagnostic(object[] arguments = null) 842613"];
3944 [label="param Diagnostic(LinePosition? startLocation = null) 842614"];
3945 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 842615"];
3946 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 842616"];
3947 [label="param Diagnostic(bool isSuppressed = false) 842617"];
3948 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 842618"];
3949 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 842619"];
3950 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 842620"];
3951 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 842621"];
3952 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 842622"];
3953 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 842623"];
3954 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 842624"];
3955 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 842625"];
3956 [label="param Diagnostic(object code) 842626"];
3957 [label="param Diagnostic(string squiggledText = null) 842627"];
3958 [label="param Diagnostic(object[] arguments = null) 842628"];
3959 [label="param Diagnostic(LinePosition? startLocation = null) 842629"];
3960 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 842630"];
3961 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 842631"];
3962 [label="param Diagnostic(bool isSuppressed = false) 842632"];
3963 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 842633"];
3964 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 842634"];
3965 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 842635"];
3966 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 842636"];
3967 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 842637"];
3968 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 842638"];
3969 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 842639"];
3970 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 842640"];
3971 [label="{ } 842641"];
3972 [label="None = { } 842642"];
3973 [label="null 842643"];
3974 [label="Any = null 842644"];
3975 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 842645"];
3976 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 842646"];
3977 [label="param DiagnosticDescription(object code) 842647"];
3978 [label="param DiagnosticDescription(bool isWarningAsError) 842648"];
3979 [label="param DiagnosticDescription(string squiggledText) 842649"];
3980 [label="param DiagnosticDescription(object[] arguments) 842650"];
3981 [label="param DiagnosticDescription(LinePosition? startLocation) 842651"];
3982 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 842652"];
3983 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 842653"];
3984 [label="param DiagnosticDescription(Type errorCodeType = null) 842654"];
3985 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 842655"];
3986 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 842656"];
3987 [label="param DiagnosticDescription(bool isSuppressed = false) 842657"];
3988 [label="param DiagnosticDescription(this) 842658"];
3989 [label="_code 842659"];
3990 [label="_isWarningAsError 842660"];
3991 [label="_isSuppressed 842661"];
3992 [label="_squiggledText 842662"];
3993 [label="_arguments 842663"];
3994 [label="_startPosition 842664"];
3995 [label="_argumentOrderDoesNotMatter 842665"];
3996 [label="_errorCodeType 842666"];
3997 [label="_ignoreArgumentsWhenComparing 842667"];
3998 [label="_defaultSeverityOpt 842668"];
3999 [label="_effectiveSeverityOpt 842669"];
4000 [label="_syntaxPredicate 842670"];
4001 [label="_showPredicate 842671"];
4002 [label="_location 842672"];
4003 [label="_argumentsAsStrings 842673"];
4004 [label="_code 842674"];
4005 [label="_isWarningAsError 842675"];
4006 [label="_squiggledText 842676"];
4007 [label="_arguments 842677"];
4008 [label="_startPosition 842678"];
4009 [label="_syntaxPredicate 842679"];
4010 [label="_argumentOrderDoesNotMatter 842680"];
4011 [label="_errorCodeType = errorCodeType ?? code.GetType(); 842681"];
4012 [label="_errorCodeType 842682"];
4013 [label="_defaultSeverityOpt 842683"];
4014 [label="_effectiveSeverityOpt 842684"];
4015 [label="_isSuppressed 842685"];
4016 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 842686"];
4017 [label="refonlyDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)); 842687"];
4018 [label="refonlyDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)) 842688"];
4019 [label="refonlyDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)) 842689"];
4020 [label="param Verify(this ImmutableArray<Diagnostic> actual) 842690"];
4021 [label="param Verify(params DiagnosticDescription[] expected) 842691"];
4022 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 842692"];
4023 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 842693"];
4024 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 842694"];
4025 [label="param Verify(this IEnumerable<Diagnostic> actual) 842695"];
4026 [label="param Verify(params DiagnosticDescription[] expected) 842696"];
4027 [label="Verify(actual, expected, errorCodeOnly: false); 842697"];
4028 [label="Verify(actual, expected, errorCodeOnly: false); 842698"];
4029 [label="Verify(actual, expected, errorCodeOnly: false); 842699"];
4030 [label="Verify(actual, expected, errorCodeOnly: false) 842700"];
4031 [label="param Verify(IEnumerable<Diagnostic> actual) 842701"];
4032 [label="param Verify(DiagnosticDescription[] expected) 842702"];
4033 [label="param Verify(bool errorCodeOnly) 842703"];
4034 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 842704"];
4035 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 842705"];
4036 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 842706"];
4037 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 842707"];
4038 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 842708"];
4039 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 842709"];
4040 [label="=> _defaultSeverityOpt 842710"];
4041 [label="_defaultSeverityOpt 842711"];
4042 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 842712"];
4043 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 842713"];
4044 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 842714"];
4045 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 842715"];
4046 [label="=> _effectiveSeverityOpt 842716"];
4047 [label="_effectiveSeverityOpt 842717"];
4048 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 842718"];
4049 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 842719"];
4050 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 842720"];
4051 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 842721"];
4052 [label="param DiagnosticDescription(Diagnostic d) 842722"];
4053 [label="param DiagnosticDescription(bool errorCodeOnly) 842723"];
4054 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 842724"];
4055 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 842725"];
4056 [label="param DiagnosticDescription(this) 842726"];
4057 [label="_code 842727"];
4058 [label="_isWarningAsError 842728"];
4059 [label="_isSuppressed 842729"];
4060 [label="_squiggledText 842730"];
4061 [label="_arguments 842731"];
4062 [label="_startPosition 842732"];
4063 [label="_argumentOrderDoesNotMatter 842733"];
4064 [label="_errorCodeType 842734"];
4065 [label="_defaultSeverityOpt 842735"];
4066 [label="_effectiveSeverityOpt 842736"];
4067 [label="_syntaxPredicate 842737"];
4068 [label="_code 842738"];
4069 [label="_isWarningAsError 842739"];
4070 [label="_isSuppressed 842740"];
4071 [label="_location 842741"];
4072 [label="includeDefaultSeverity 842742"];
4073 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 842743"];
4074 [label="_defaultSeverityOpt 842744"];
4075 [label="includeEffectiveSeverity 842745"];
4076 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 842746"];
4077 [label="_effectiveSeverityOpt 842747"];
4078 [label="DiagnosticWithInfo dinfo = null; 842748"];
4079 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 842749"];
4080 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 842750"];
4081 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 842751"];
4082 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 842752"];
4083 [label="dinfo = d as DiagnosticWithInfo; 842753"];
4084 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 842754"];
4085 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 842755"];
4086 [label="_errorCodeType 842756"];
4087 [label="_code 842757"];
4088 [label="_ignoreArgumentsWhenComparing 842758"];
4089 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 842759"];
4090 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 842760"];
4091 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 842761"];
4092 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 842762"];
4093 [label="_arguments 842763"];
4094 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 842764"];
4095 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 842765"];
4096 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 842766"];
4097 [label="_arguments = null; 842767"];
4098 [label="_arguments 842768"];
4099 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 842769"];
4100 [label="_startPosition 842770"];
4101 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 842771"];
4102 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 842772"];
4103 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 842773"];
4104 [label="int index = unmatched.IndexOf(d); 842774"];
4105 [label="int index = unmatched.IndexOf(d); 842775"];
4106 [label="param Equals(object obj) 842776"];
4107 [label="param Equals(this) 842777"];
4108 [label="var d = obj as DiagnosticDescription; 842778"];
4109 [label="if (d == null)\n                return false; 842779"];
4110 [label="if (d == null)\n                return false; 842780"];
4111 [label="if (!_code.Equals(d._code))\n                return false; 842781"];
4112 [label="if (!_code.Equals(d._code))\n                return false; 842782"];
4113 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 842783"];
4114 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 842784"];
4115 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 842785"];
4116 [label="if (_squiggledText != d._squiggledText)\n                    return false; 842786"];
4117 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 842787"];
4118 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 842788"];
4119 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 842789"];
4120 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 842790"];
4121 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 842791"];
4122 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 842792"];
4123 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 842793"];
4124 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 842794"];
4125 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 842795"];
4126 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 842796"];
4127 [label="if (d._arguments != null)\n                    return false; 842797"];
4128 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 842798"];
4129 [label="return true; 842799"];
4130 [label="int index = unmatched.IndexOf(d); 842800"];
4131 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 842801"];
4132 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 842802"];
4133 [label="unmatched.RemoveAt(index); 842803"];
4134 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 842804"];
4135 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 842805"];
4136 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 842806"];
4137 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 842807"];
4138 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 842808"];
4139 [label="DiagnosticDescription.GetAssertText(expected, actual) 842809"];
4140 [label="param GetAssertText(DiagnosticDescription[] expected) 842810"];
4141 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 842811"];
4142 [label="const int CSharp = 1; 842812"];
4143 [label="const int VisualBasic = 2; 842813"];
4144 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 842814"];
4145 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 842815"];
4146 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 842816"];
4147 [label="actual.Any() && actual.First() is CSDiagnostic 842817"];
4148 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 842818"];
4149 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 842819"];
4150 [label="int indentDepth = (language == CSharp) ? 4 : 1; 842820"];
4151 [label="(language == CSharp) 842821"];
4152 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 842822"];
4153 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 842823"];
4154 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 842824"];
4155 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 842825"];
4156 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 842826"];
4157 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 842827"];
4158 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 842828"];
4159 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 842829"];
4160 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 842830"];
4161 [label="IsSortedOrEmpty(expected) 842831"];
4162 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 842832"];
4163 [label="new LinePositionComparer() 842833"];
4164 [label="param LinePositionComparer(this) 842834"];
4165 [label="Instance = new LinePositionComparer() 842835"];
4166 [label="var comparer = LinePositionComparer.Instance; 842836"];
4167 [label="DiagnosticDescription last = null; 842837"];
4168 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 842838"];
4169 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 842839"];
4170 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 842840"];
4171 [label="return false; 842841"];
4172 [label="var assertText = new StringBuilder(); 842842"];
4173 [label="assertText.AppendLine(); 842843"];
4174 [label="int i; 842844"];
4175 [label="assertText.AppendLine('Expected:'); 842845"];
4176 [label="assertText.AppendLine('Expected:'); 842846"];
4177 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 842847"];
4178 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 842848"];
4179 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 842849"];
4180 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 842850"];
4181 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 842851"];
4182 [label="GetDiagnosticDescription(d, indentDepth) 842852"];
4183 [label="param GetDiagnosticDescription(DiagnosticDescription d) 842853"];
4184 [label="param GetDiagnosticDescription(int indentDepth) 842854"];
4185 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 842855"];
4186 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 842856"];
4187 [label="d.ToString() 842857"];
4188 [label="param ToString(this) 842858"];
4189 [label="var sb = new StringBuilder(); 842859"];
4190 [label="sb.Append('Diagnostic('); 842860"];
4191 [label="sb.Append('Diagnostic('); 842861"];
4192 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 842862"];
4193 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 842863"];
4194 [label="sb.Append(_errorCodeType.Name); 842864"];
4195 [label="sb.Append(_errorCodeType.Name); 842865"];
4196 [label="sb.Append('.'); 842866"];
4197 [label="sb.Append('.'); 842867"];
4198 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 842868"];
4199 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 842869"];
4200 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 842870"];
4201 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 842871"];
4202 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 842872"];
4203 [label="sb.Append(')'); 842873"];
4204 [label="sb.Append(')'); 842874"];
4205 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 842875"];
4206 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 842876"];
4207 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 842877"];
4208 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 842878"];
4209 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 842879"];
4210 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 842880"];
4211 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 842881"];
4212 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 842882"];
4213 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 842883"];
4214 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 842884"];
4215 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 842885"];
4216 [label="return sb.ToString(); 842886"];
4217 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 842887"];
4218 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 842888"];
4219 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 842889"];
4220 [label="GetCommaSeparatedLines(assertText, expectedText); 842890"];
4221 [label="GetCommaSeparatedLines(assertText, expectedText); 842891"];
4222 [label="GetCommaSeparatedLines(assertText, expectedText) 842892"];
4223 [label="param GetCommaSeparatedLines(StringBuilder sb) 842893"];
4224 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 842894"];
4225 [label="int n = lines.Count; 842895"];
4226 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 842896"];
4227 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 842897"];
4228 [label="sb.Append(lines[i]); 842898"];
4229 [label="sb.Append(lines[i]); 842899"];
4230 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 842900"];
4231 [label="sb.AppendLine(); 842901"];
4232 [label="GetCommaSeparatedLines(assertText, expectedText); 842902"];
4233 [label="assertText.AppendLine('Actual:'); 842903"];
4234 [label="assertText.AppendLine('Actual:'); 842904"];
4235 [label="var actualText = ArrayBuilder<string>.GetInstance(); 842905"];
4236 [label="var e = actual.GetEnumerator(); 842906"];
4237 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 842907"];
4238 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 842908"];
4239 [label="Diagnostic d = e.Current; 842909"];
4240 [label="string message = d.ToString(); 842910"];
4241 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 842911"];
4242 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 842912"];
4243 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 842913"];
4244 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 842914"];
4245 [label="Indent(assertText, indentDepth); 842915"];
4246 [label="Indent(assertText, indentDepth); 842916"];
4247 [label="Indent(assertText, indentDepth) 842917"];
4248 [label="param Indent(StringBuilder sb) 842918"];
4249 [label="param Indent(int count) 842919"];
4250 [label="sb.Append(' ', 4 * count); 842920"];
4251 [label="sb.Append(' ', 4 * count); 842921"];
4252 [label="sb.Append(' ', 4 * count); 842922"];
4253 [label="Indent(assertText, indentDepth); 842923"];
4254 [label="assertText.Append('// '); 842924"];
4255 [label="assertText.Append('// '); 842925"];
4256 [label="assertText.AppendLine(d.ToString()); 842926"];
4257 [label="assertText.AppendLine(d.ToString()); 842927"];
4258 [label="var l = d.Location; 842928"];
4259 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 842929"];
4260 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 842930"];
4261 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 842931"];
4262 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 842932"];
4263 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 842933"];
4264 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 842934"];
4265 [label="param DiagnosticDescription(Diagnostic d) 842935"];
4266 [label="param DiagnosticDescription(bool errorCodeOnly) 842936"];
4267 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 842937"];
4268 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 842938"];
4269 [label="param DiagnosticDescription(this) 842939"];
4270 [label="_code 842940"];
4271 [label="_isWarningAsError 842941"];
4272 [label="_isSuppressed 842942"];
4273 [label="_arguments 842943"];
4274 [label="_startPosition 842944"];
4275 [label="_errorCodeType 842945"];
4276 [label="_defaultSeverityOpt 842946"];
4277 [label="_effectiveSeverityOpt 842947"];
4278 [label="_code 842948"];
4279 [label="_isWarningAsError 842949"];
4280 [label="_isSuppressed 842950"];
4281 [label="_location 842951"];
4282 [label="DiagnosticWithInfo dinfo = null; 842952"];
4283 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 842953"];
4284 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 842954"];
4285 [label="var diffDescription = description; 842955"];
4286 [label="var idx = Array.IndexOf(expected, description); 842956"];
4287 [label="var idx = Array.IndexOf(expected, description); 842957"];
4288 [label="var idx = Array.IndexOf(expected, description); 842958"];
4289 [label="var idx = Array.IndexOf(expected, description); 842959"];
4290 [label="if (d == null)\n                return false; 842960"];
4291 [label="if (d == null)\n                return false; 842961"];
4292 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 842962"];
4293 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 842963"];
4294 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 842964"];
4295 [label="if (_squiggledText != d._squiggledText)\n                    return false; 842965"];
4296 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 842966"];
4297 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 842967"];
4298 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 842968"];
4299 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 842969"];
4300 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 842970"];
4301 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 842971"];
4302 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 842972"];
4303 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 842973"];
4304 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 842974"];
4305 [label="if (d._arguments != null)\n                    return false; 842975"];
4306 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 842976"];
4307 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 842977"];
4308 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 842978"];
4309 [label="diffDescription = expected[idx]; 842979"];
4310 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 842980"];
4311 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 842981"];
4312 [label="GetDiagnosticDescription(description, indentDepth) 842982"];
4313 [label="param GetDiagnosticDescription(DiagnosticDescription d) 842983"];
4314 [label="param GetDiagnosticDescription(int indentDepth) 842984"];
4315 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 842985"];
4316 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 842986"];
4317 [label="d.ToString() 842987"];
4318 [label="param ToString(this) 842988"];
4319 [label="var sb = new StringBuilder(); 842989"];
4320 [label="sb.Append('Diagnostic('); 842990"];
4321 [label="sb.Append('Diagnostic('); 842991"];
4322 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 842992"];
4323 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 842993"];
4324 [label="sb.Append(_errorCodeType.Name); 842994"];
4325 [label="sb.Append(_errorCodeType.Name); 842995"];
4326 [label="sb.Append('.'); 842996"];
4327 [label="sb.Append('.'); 842997"];
4328 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 842998"];
4329 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 842999"];
4330 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 843000"];
4331 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 843001"];
4332 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 843002"];
4333 [label="sb.Append(')'); 843003"];
4334 [label="sb.Append(')'); 843004"];
4335 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 843005"];
4336 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 843006"];
4337 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 843007"];
4338 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 843008"];
4339 [label="sb.Append('.WithLocation('); 843009"];
4340 [label="sb.Append('.WithLocation('); 843010"];
4341 [label="sb.Append(_startPosition.Value.Line + 1); 843011"];
4342 [label="sb.Append(_startPosition.Value.Line + 1); 843012"];
4343 [label="sb.Append(', '); 843013"];
4344 [label="sb.Append(', '); 843014"];
4345 [label="sb.Append(_startPosition.Value.Character + 1); 843015"];
4346 [label="sb.Append(_startPosition.Value.Character + 1); 843016"];
4347 [label="sb.Append(')'); 843017"];
4348 [label="sb.Append(')'); 843018"];
4349 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 843019"];
4350 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 843020"];
4351 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 843021"];
4352 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 843022"];
4353 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 843023"];
4354 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 843024"];
4355 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 843025"];
4356 [label="return sb.ToString(); 843026"];
4357 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 843027"];
4358 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 843028"];
4359 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 843029"];
4360 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 843030"];
4361 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 843031"];
4362 [label="GetDiagnosticDescription(diffDescription, indentDepth) 843032"];
4363 [label="param GetDiagnosticDescription(DiagnosticDescription d) 843033"];
4364 [label="param GetDiagnosticDescription(int indentDepth) 843034"];
4365 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 843035"];
4366 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 843036"];
4367 [label="d.ToString() 843037"];
4368 [label="param ToString(this) 843038"];
4369 [label="var sb = new StringBuilder(); 843039"];
4370 [label="sb.Append('Diagnostic('); 843040"];
4371 [label="sb.Append('Diagnostic('); 843041"];
4372 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 843042"];
4373 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 843043"];
4374 [label="sb.Append(_errorCodeType.Name); 843044"];
4375 [label="sb.Append(_errorCodeType.Name); 843045"];
4376 [label="sb.Append('.'); 843046"];
4377 [label="sb.Append('.'); 843047"];
4378 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 843048"];
4379 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 843049"];
4380 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 843050"];
4381 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 843051"];
4382 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 843052"];
4383 [label="sb.Append(')'); 843053"];
4384 [label="sb.Append(')'); 843054"];
4385 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 843055"];
4386 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 843056"];
4387 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 843057"];
4388 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 843058"];
4389 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 843059"];
4390 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 843060"];
4391 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 843061"];
4392 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 843062"];
4393 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 843063"];
4394 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 843064"];
4395 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 843065"];
4396 [label="return sb.ToString(); 843066"];
4397 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 843067"];
4398 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 843068"];
4399 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 843069"];
4400 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 843070"];
4401 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 843071"];
4402 [label="assertText.AppendLine(); 843072"];
4403 [label="assertText.AppendLine('Diff:'); 843073"];
4404 [label="assertText.AppendLine('Diff:'); 843074"];
4405 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 843075"];
4406 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 843076"];
4407 [label="new[] { '\\r', '\\n' } 843077"];
4408 [label="'\\r' 843078"];
4409 [label="'\\n' 843079"];
4410 [label="new[] { '\\r', '\\n' } 843080"];
4411 [label="new[] { '\\r', '\\n' } 843081"];
4412 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 843082"];
4413 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 843083"];
4414 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 843084"];
4415 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 843085"];
4416 [label="param DiffReport(IEnumerable<T> expected) 843086"];
4417 [label="param DiffReport(IEnumerable<T> actual) 843087"];
4418 [label="param DiffReport(string separator) 843088"];
4419 [label="param DiffReport(IEqualityComparer<T> comparer = null) 843089"];
4420 [label="param DiffReport(Func<T, string> toString = null) 843090"];
4421 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 843091"];
4422 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 843092"];
4423 [label="(comparer != null) 843093"];
4424 [label="EqualityComparer<T>.Default 843094"];
4425 [label="new LCS<T>(EqualityComparer<T>.Default) 843095"];
4426 [label="param LCS(IEqualityComparer<T> comparer) 843096"];
4427 [label="param LCS(this) 843097"];
4428 [label="1 843098"];
4429 [label="DeleteCost = 1 843099"];
4430 [label="1 843100"];
4431 [label="InsertCost = 1 843101"];
4432 [label="2 843102"];
4433 [label="UpdateCost = 2 843103"];
4434 [label="param LongestCommonSubsequence(this) 843104"];
4435 [label="_comparer 843105"];
4436 [label="_comparer 843106"];
4437 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 843107"];
4438 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 843108"];
4439 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 843109"];
4440 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 843110"];
4441 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 843111"];
4442 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 843112"];
4443 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 843113"];
4444 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 843114"];
4445 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 843115"];
4446 [label="lcs.CalculateDiff(expectedList, actualList, toString) 843116"];
4447 [label="param CalculateDiff(IList<T> sequenceA) 843117"];
4448 [label="param CalculateDiff(IList<T> sequenceB) 843118"];
4449 [label="param CalculateDiff(Func<T, string> toString) 843119"];
4450 [label="param CalculateDiff(this) 843120"];
4451 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 843121"];
4452 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 843122"];
4453 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 843123"];
4454 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 843124"];
4455 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 843125"];
4456 [label="param GetEdits(TSequence sequenceA) 843126"];
4457 [label="param GetEdits(int lengthA) 843127"];
4458 [label="param GetEdits(TSequence sequenceB) 843128"];
4459 [label="param GetEdits(int lengthB) 843129"];
4460 [label="param GetEdits(this) 843130"];
4461 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 843131"];
4462 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 843132"];
4463 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 843133"];
4464 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 843134"];
4465 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 843135"];
4466 [label="param ComputeCostMatrix(TSequence sequenceA) 843136"];
4467 [label="param ComputeCostMatrix(int lengthA) 843137"];
4468 [label="param ComputeCostMatrix(TSequence sequenceB) 843138"];
4469 [label="param ComputeCostMatrix(int lengthB) 843139"];
4470 [label="param ComputeCostMatrix(this) 843140"];
4471 [label="var la = lengthA + 1; 843141"];
4472 [label="var la = lengthA + 1; 843142"];
4473 [label="var lb = lengthB + 1; 843143"];
4474 [label="var lb = lengthB + 1; 843144"];
4475 [label="var d = new int[la, lb]; 843145"];
4476 [label="d[0, 0] = 0; 843146"];
4477 [label="d[0, 0] 843147"];
4478 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 843148"];
4479 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 843149"];
4480 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 843150"];
4481 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 843151"];
4482 [label="d[i, 0] 843152"];
4483 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 843153"];
4484 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 843154"];
4485 [label="d[0, j] = d[0, j - 1] + InsertCost; 843155"];
4486 [label="d[0, j] = d[0, j - 1] + InsertCost; 843156"];
4487 [label="d[0, j] 843157"];
4488 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 843158"];
4489 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 843159"];
4490 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 843160"];
4491 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 843161"];
4492 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 843162"];
4493 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 843163"];
4494 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 843164"];
4495 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 843165"];
4496 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 843166"];
4497 [label="param ItemsEqual(IList<T> sequenceA) 843167"];
4498 [label="param ItemsEqual(int indexA) 843168"];
4499 [label="param ItemsEqual(IList<T> sequenceB) 843169"];
4500 [label="param ItemsEqual(int indexB) 843170"];
4501 [label="param ItemsEqual(this) 843171"];
4502 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 843172"];
4503 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 843173"];
4504 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 843174"];
4505 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 843175"];
4506 [label="int m2 = d[i - 1, j] + DeleteCost; 843176"];
4507 [label="int m2 = d[i - 1, j] + DeleteCost; 843177"];
4508 [label="int m3 = d[i, j - 1] + InsertCost; 843178"];
4509 [label="int m3 = d[i, j - 1] + InsertCost; 843179"];
4510 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 843180"];
4511 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 843181"];
4512 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 843182"];
4513 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 843183"];
4514 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 843184"];
4515 [label="d[i, j] 843185"];
4516 [label="return d; 843186"];
4517 [label="int i = lengthA; 843187"];
4518 [label="int j = lengthB; 843188"];
4519 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 843189"];
4520 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 843190"];
4521 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 843191"];
4522 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 843192"];
4523 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 843193"];
4524 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 843194"];
4525 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 843195"];
4526 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 843196"];
4527 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 843197"];
4528 [label="i--; 843198"];
4529 [label="j--; 843199"];
4530 [label="yield return new Edit(EditKind.Update, i, j); 843200"];
4531 [label="yield return new Edit(EditKind.Update, i, j); 843201"];
4532 [label="yield return new Edit(EditKind.Update, i, j); 843202"];
4533 [label="yield return new Edit(EditKind.Update, i, j); 843203"];
4534 [label="new Edit(EditKind.Update, i, j) 843204"];
4535 [label="param Edit(EditKind kind) 843205"];
4536 [label="param Edit(int indexA) 843206"];
4537 [label="param Edit(int indexB) 843207"];
4538 [label="param Edit(this) 843208"];
4539 [label="this.Kind 843209"];
4540 [label="this.IndexA 843210"];
4541 [label="this.IndexB 843211"];
4542 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 843212"];
4543 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 843213"];
4544 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 843214"];
4545 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 843215"];
4546 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 843216"];
4547 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 843217"];
4548 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 843218"];
4549 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 843219"];
4550 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 843220"];
4551 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 843221"];
4552 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 843222"];
4553 [label="actualText.Free(); 843223"];
4554 [label="expectedText.Free(); 843224"];
4555 [label="return assertText.ToString(); 843225"];
4556 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 843226"];
4557 [label="var refoutOptions = EmitOptions.Default.WithEmitMetadataOnly(false).WithIncludePrivateMembers(false); 843227"];
4558 [label="var refoutOptions = EmitOptions.Default.WithEmitMetadataOnly(false).WithIncludePrivateMembers(false); 843228"];
4559 [label="var refoutDiagnostics = compilation.Emit(peStream: new MemoryStream(), metadataPEStream: new MemoryStream(), pdbStream: null,\n                options: refoutOptions, manifestResources: hash_resources).Diagnostics; 843229"];
4560 [label="var refoutDiagnostics = compilation.Emit(peStream: new MemoryStream(), metadataPEStream: new MemoryStream(), pdbStream: null,\n                options: refoutOptions, manifestResources: hash_resources).Diagnostics; 843230"];
4561 [label="var refoutDiagnostics = compilation.Emit(peStream: new MemoryStream(), metadataPEStream: new MemoryStream(), pdbStream: null,\n                options: refoutOptions, manifestResources: hash_resources).Diagnostics; 843231"];
4562 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 843232"];
4563 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 843233"];
4564 [label="param CreateModuleBuilder(CompilationTestData? testData) 843234"];
4565 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 843235"];
4566 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 843236"];
4567 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 843237"];
4568 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 843238"];
4569 [label="GetRuntimeMetadataVersion(emitOptions) 843239"];
4570 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 843240"];
4571 [label="Assembly 843241"];
4572 [label="SourceAssembly 843242"];
4573 [label="GetBoundReferenceManager() 843243"];
4574 [label="GetBoundReferenceManager(); 843244"];
4575 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 843245"];
4576 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 843246"];
4577 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 843247"];
4578 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 843248"];
4579 [label="SourceAssembly 843249"];
4580 [label="GetBoundReferenceManager() 843250"];
4581 [label="GetBoundReferenceManager(); 843251"];
4582 [label="SourceAssembly.IsDelaySigned 843252"];
4583 [label="SourceAssembly 843253"];
4584 [label="GetBoundReferenceManager() 843254"];
4585 [label="GetBoundReferenceManager(); 843255"];
4586 [label="=> 0x30 843256"];
4587 [label="0x30 843257"];
4588 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 843258"];
4589 [label="PEModuleBuilder moduleBeingBuilt; 843259"];
4590 [label="GetBoundReferenceManager(); 843260"];
4591 [label="get\n            {\n                return true;\n            } 843261"];
4592 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 843262"];
4593 [label="Debug.Assert(sourceAssembly is object); 843263"];
4594 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 843264"];
4595 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 843265"];
4596 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 843266"];
4597 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 843267"];
4598 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 843268"];
4599 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 843269"];
4600 [label="PooledHashSet<int>? excludeDiagnostics = null; 843270"];
4601 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 843271"];
4602 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 843272"];
4603 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 843273"];
4604 [label="param GetDiagnostics(CompilationStage stage) 843274"];
4605 [label="param GetDiagnostics(bool includeEarlierStages) 843275"];
4606 [label="var diagnostics = DiagnosticBag.GetInstance(); 843276"];
4607 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 843277"];
4608 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 843278"];
4609 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 843279"];
4610 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 843280"];
4611 [label="param GetDiagnostics(CompilationStage stage) 843281"];
4612 [label="param GetDiagnostics(bool includeEarlierStages) 843282"];
4613 [label="param GetDiagnostics(DiagnosticBag diagnostics) 843283"];
4614 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 843284"];
4615 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 843285"];
4616 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 843286"];
4617 [label="this.SyntaxTrees 843287"];
4618 [label="_syntaxAndDeclarations.GetLazyState() 843288"];
4619 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 843289"];
4620 [label="this.Options 843290"];
4621 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 843291"];
4622 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 843292"];
4623 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 843293"];
4624 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 843294"];
4625 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 843295"];
4626 [label="CheckAssemblyName(builder); 843296"];
4627 [label="CheckAssemblyName(builder); 843297"];
4628 [label="Options 843298"];
4629 [label="Options 843299"];
4630 [label="get\n            {\n                return _options;\n            } 843300"];
4631 [label="return _options; 843301"];
4632 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 843302"];
4633 [label="GetBoundReferenceManager() 843303"];
4634 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 843304"];
4635 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 843305"];
4636 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 843306"];
4637 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 843307"];
4638 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 843308"];
4639 [label="GlobalImports 843309"];
4640 [label="SourceLocation? location = null; 843310"];
4641 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 843311"];
4642 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 843312"];
4643 [label="Assembly 843313"];
4644 [label="SourceAssembly 843314"];
4645 [label="GetBoundReferenceManager() 843315"];
4646 [label="GetBoundReferenceManager(); 843316"];
4647 [label="Assembly.ForceComplete(location, cancellationToken); 843317"];
4648 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 843318"];
4649 [label="_declarationDiagnosticsFrozen = true; 843319"];
4650 [label="_needsGeneratedAttributes_IsFrozen = true; 843320"];
4651 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 843321"];
4652 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 843322"];
4653 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 843323"];
4654 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 843324"];
4655 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 843325"];
4656 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 843326"];
4657 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 843327"];
4658 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 843328"];
4659 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 843329"];
4660 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 843330"];
4661 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 843331"];
4662 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 843332"];
4663 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 843333"];
4664 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 843334"];
4665 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 843335"];
4666 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 843336"];
4667 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 843337"];
4668 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 843338"];
4669 [label="excludeDiagnostics?.Free(); 843339"];
4670 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 843340"];
4671 [label="Debug.Assert(compilation != null); 843341"];
4672 [label="Debug.Assert(diagnostics != null); 843342"];
4673 [label="compilation.PreviousSubmission 843343"];
4674 [label="ScriptCompilationInfo 843344"];
4675 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 843345"];
4676 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 843346"];
4677 [label="MethodSymbol entryPoint = null; 843347"];
4678 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 843348"];
4679 [label="param GetEntryPoint(bool hasDeclarationErrors) 843349"];
4680 [label="param GetEntryPoint(CancellationToken cancellationToken) 843350"];
4681 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 843351"];
4682 [label="EntryPoint? entryPoint; 843352"];
4683 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 843353"];
4684 [label="Debug.Assert(compilation != null); 843354"];
4685 [label="Debug.Assert(diagnostics != null); 843355"];
4686 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 843356"];
4687 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 843357"];
4688 [label="param SetGlobalErrorIfTrue(bool arg) 843358"];
4689 [label="param SetGlobalErrorIfTrue(this) 843359"];
4690 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 843360"];
4691 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 843361"];
4692 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 843362"];
4693 [label="GetBoundReferenceManager(); 843363"];
4694 [label="param CompileNamespace(this) 843364"];
4695 [label="s.Accept(this, null); 843365"];
4696 [label="s.Accept(this, null); 843366"];
4697 [label="param VisitNamedType(NamedTypeSymbol symbol) 843367"];
4698 [label="param VisitNamedType(TypeCompilationState arg) 843368"];
4699 [label="param VisitNamedType(this) 843369"];
4700 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 843370"];
4701 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 843371"];
4702 [label="PassesFilter(_filterOpt, symbol) 843372"];
4703 [label="param PassesFilter(Predicate<Symbol> filterOpt) 843373"];
4704 [label="param PassesFilter(Symbol symbol) 843374"];
4705 [label="return (filterOpt == null) || filterOpt(symbol); 843375"];
4706 [label="return (filterOpt == null) || filterOpt(symbol); 843376"];
4707 [label="arg = null; 843377"];
4708 [label="_cancellationToken.ThrowIfCancellationRequested(); 843378"];
4709 [label="_compilation.Options 843379"];
4710 [label="get\n            {\n                return _options;\n            } 843380"];
4711 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 843381"];
4712 [label="Task worker = CompileNamedTypeAsync(symbol); 843382"];
4713 [label="CompileNamedTypeAsync(symbol) 843383"];
4714 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 843384"];
4715 [label="param CompileNamedTypeAsync(this) 843385"];
4716 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 843386"];
4717 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 843387"];
4718 [label="Task worker = CompileNamedTypeAsync(symbol); 843388"];
4719 [label="_compilerTasks.Push(worker); 843389"];
4720 [label="return null; 843390"];
4721 [label="s.Accept(this, null); 843391"];
4722 [label="if (tasks == null)\n            {\n                return;\n            } 843392"];
4723 [label="if (tasks == null)\n            {\n                return;\n            } 843393"];
4724 [label="curTask.GetAwaiter().GetResult(); 843394"];
4725 [label="methodCompiler.WaitForWorkers(); 843395"];
4726 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 843396"];
4727 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 843397"];
4728 [label="_additionalTypes 843398"];
4729 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 843399"];
4730 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 843400"];
4731 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 843401"];
4732 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 843402"];
4733 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 843403"];
4734 [label="param CompileSynthesizedMethods(this) 843404"];
4735 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 843405"];
4736 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 843406"];
4737 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 843407"];
4738 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 843408"];
4739 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 843409"];
4740 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 843410"];
4741 [label="return GetNeedsGeneratedAttributesInternal(); 843411"];
4742 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 843412"];
4743 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 843413"];
4744 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 843414"];
4745 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 843415"];
4746 [label="return; 843416"];
4747 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 843417"];
4748 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 843418"];
4749 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 843419"];
4750 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 843420"];
4751 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 843421"];
4752 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 843422"];
4753 [label="param CompileSynthesizedMethods(this) 843423"];
4754 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 843424"];
4755 [label="param GetPreviousAnonymousTypes(this) 843425"];
4756 [label="param GetNextAnonymousTypeIndex(this) 843426"];
4757 [label="if (tasks == null)\n            {\n                return;\n            } 843427"];
4758 [label="methodCompiler.WaitForWorkers(); 843428"];
4759 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 843429"];
4760 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 843430"];
4761 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 843431"];
4762 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 843432"];
4763 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 843433"];
4764 [label="GetBoundReferenceManager(); 843434"];
4765 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 843435"];
4766 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 843436"];
4767 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 843437"];
4768 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 843438"];
4769 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 843439"];
4770 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 843440"];
4771 [label="param GenerateModuleInitializer(this) 843441"];
4772 [label="Debug.Assert(_declarationDiagnosticsFrozen); 843442"];
4773 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 843443"];
4774 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 843444"];
4775 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 843445"];
4776 [label="return true; 843446"];
4777 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 843447"];
4778 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 843448"];
4779 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 843449"];
4780 [label="SourceAssembly 843450"];
4781 [label="GetBoundReferenceManager() 843451"];
4782 [label="GetBoundReferenceManager(); 843452"];
4783 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 843453"];
4784 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 843454"];
4785 [label="AddedModulesResourceNames(resourceDiagnostics) 843455"];
4786 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 843456"];
4787 [label="SourceAssembly 843457"];
4788 [label="GetBoundReferenceManager() 843458"];
4789 [label="GetBoundReferenceManager(); 843459"];
4790 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 843460"];
4791 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 843461"];
4792 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 843462"];
4793 [label="var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i]; 843463"];
4794 [label="ImmutableArray<EmbeddedResource> resources; 843464"];
4795 [label="resources 843465"];
4796 [label="resources = m.Module.GetEmbeddedResourcesOrThrow(); 843466"];
4797 [label="foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                } 843467"];
4798 [label="param AddedModulesResourceNames(this) 843468"];
4799 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 843469"];
4800 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 843470"];
4801 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 843471"];
4802 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 843472"];
4803 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 843473"];
4804 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 843474"];
4805 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 843475"];
4806 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 843476"];
4807 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 843477"];
4808 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 843478"];
4809 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 843479"];
4810 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 843480"];
4811 [label="StreamWriter writer = null; 843481"];
4812 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 843482"];
4813 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 843483"];
4814 [label="compilation.SourceAssembly 843484"];
4815 [label="GetBoundReferenceManager() 843485"];
4816 [label="GetBoundReferenceManager(); 843486"];
4817 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 843487"];
4818 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 843488"];
4819 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 843489"];
4820 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 843490"];
4821 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 843491"];
4822 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 843492"];
4823 [label="param DocumentationCommentCompiler(TextWriter writer) 843493"];
4824 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 843494"];
4825 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 843495"];
4826 [label="param DocumentationCommentCompiler(bool processIncludes) 843496"];
4827 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 843497"];
4828 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 843498"];
4829 [label="param DocumentationCommentCompiler(this) 843499"];
4830 [label="param DocumentationCommentCompiler(this) 843500"];
4831 [label="_assemblyName 843501"];
4832 [label="_compilation 843502"];
4833 [label="_writer 843503"];
4834 [label="_filterTree 843504"];
4835 [label="_filterSpanWithinTree 843505"];
4836 [label="_processIncludes 843506"];
4837 [label="_isForSingleSymbol 843507"];
4838 [label="_diagnostics 843508"];
4839 [label="_lazyComparer 843509"];
4840 [label="_includedFileCache 843510"];
4841 [label="_indentDepth 843511"];
4842 [label="_temporaryStringBuilders 843512"];
4843 [label="_writer 843513"];
4844 [label="_filterTree 843514"];
4845 [label="_filterSpanWithinTree 843515"];
4846 [label="_processIncludes 843516"];
4847 [label="_isForSingleSymbol 843517"];
4848 [label="_diagnostics 843518"];
4849 [label="compilation.SourceAssembly 843519"];
4850 [label="GetBoundReferenceManager() 843520"];
4851 [label="GetBoundReferenceManager(); 843521"];
4852 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 843522"];
4853 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 843523"];
4854 [label="Debug.Assert(_assemblyName != null); 843524"];
4855 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 843525"];
4856 [label="WriteLine('<?xml version=\\'1.0\\'?>') 843526"];
4857 [label="param WriteLine(string message) 843527"];
4858 [label="param WriteLine(this) 843528"];
4859 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843529"];
4860 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843530"];
4861 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843531"];
4862 [label="WriteLine('<doc>'); 843532"];
4863 [label="WriteLine('<doc>') 843533"];
4864 [label="param WriteLine(string message) 843534"];
4865 [label="param WriteLine(this) 843535"];
4866 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843536"];
4867 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843537"];
4868 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843538"];
4869 [label="Indent(); 843539"];
4870 [label="_compilation.Options 843540"];
4871 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 843541"];
4872 [label="WriteLine('<assembly>'); 843542"];
4873 [label="WriteLine('<assembly>') 843543"];
4874 [label="param WriteLine(string message) 843544"];
4875 [label="param WriteLine(this) 843545"];
4876 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843546"];
4877 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843547"];
4878 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843548"];
4879 [label="Indent() 843549"];
4880 [label="Indent(); 843550"];
4881 [label="WriteLine('<name>{0}</name>', _assemblyName); 843551"];
4882 [label="WriteLine('<name>{0}</name>', _assemblyName) 843552"];
4883 [label="WriteLine('<name>{0}</name>', _assemblyName) 843553"];
4884 [label="param WriteLine(string format) 843554"];
4885 [label="param WriteLine(params object[] args) 843555"];
4886 [label="param WriteLine(this) 843556"];
4887 [label="WriteLine(string.Format(format, args)); 843557"];
4888 [label="WriteLine(string.Format(format, args)); 843558"];
4889 [label="WriteLine(string.Format(format, args)); 843559"];
4890 [label="WriteLine(string.Format(format, args)) 843560"];
4891 [label="param WriteLine(string message) 843561"];
4892 [label="param WriteLine(this) 843562"];
4893 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843563"];
4894 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843564"];
4895 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843565"];
4896 [label="WriteLine(string.Format(format, args)); 843566"];
4897 [label="Unindent() 843567"];
4898 [label="_indentDepth 843568"];
4899 [label="Debug.Assert(_indentDepth >= 0); 843569"];
4900 [label="Debug.Assert(_indentDepth >= 0); 843570"];
4901 [label="Unindent(); 843571"];
4902 [label="WriteLine('</assembly>'); 843572"];
4903 [label="WriteLine('</assembly>') 843573"];
4904 [label="param WriteLine(string message) 843574"];
4905 [label="param WriteLine(this) 843575"];
4906 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843576"];
4907 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843577"];
4908 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843578"];
4909 [label="WriteLine('<members>'); 843579"];
4910 [label="WriteLine('<members>') 843580"];
4911 [label="param WriteLine(string message) 843581"];
4912 [label="param WriteLine(this) 843582"];
4913 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843583"];
4914 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843584"];
4915 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843585"];
4916 [label="Indent(); 843586"];
4917 [label="Debug.Assert(!_isForSingleSymbol); 843587"];
4918 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 843588"];
4919 [label="_cancellationToken.ThrowIfCancellationRequested(); 843589"];
4920 [label="s.Accept(this); 843590"];
4921 [label="s.Accept(this); 843591"];
4922 [label="s.Accept(this); 843592"];
4923 [label="param VisitNamedType(NamedTypeSymbol symbol) 843593"];
4924 [label="param VisitNamedType(this) 843594"];
4925 [label="_cancellationToken.ThrowIfCancellationRequested(); 843595"];
4926 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 843596"];
4927 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 843597"];
4928 [label="DefaultVisit(symbol); 843598"];
4929 [label="DefaultVisit(symbol) 843599"];
4930 [label="param DefaultVisit(Symbol symbol) 843600"];
4931 [label="param DefaultVisit(this) 843601"];
4932 [label="_cancellationToken.ThrowIfCancellationRequested(); 843602"];
4933 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 843603"];
4934 [label="ShouldSkip(symbol) 843604"];
4935 [label="param ShouldSkip(Symbol symbol) 843605"];
4936 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 843606"];
4937 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 843607"];
4938 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 843608"];
4939 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 843609"];
4940 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 843610"];
4941 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 843611"];
4942 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 843612"];
4943 [label="DocumentationMode maxDocumentationMode; 843613"];
4944 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 843614"];
4945 [label="docCommentNodes 843615"];
4946 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 843616"];
4947 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 843617"];
4948 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 843618"];
4949 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 843619"];
4950 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 843620"];
4951 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 843621"];
4952 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 843622"];
4953 [label="param TryGetDocumentationCommentNodes(this) 843623"];
4954 [label="maxDocumentationMode = DocumentationMode.None; 843624"];
4955 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 843625"];
4956 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 843626"];
4957 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 843627"];
4958 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 843628"];
4959 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 843629"];
4960 [label="currDocumentationMode > maxDocumentationMode 843630"];
4961 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 843631"];
4962 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 843632"];
4963 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 843633"];
4964 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 843634"];
4965 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 843635"];
4966 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 843636"];
4967 [label="return true; 843637"];
4968 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 843638"];
4969 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 843639"];
4970 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 843640"];
4971 [label="return; 843641"];
4972 [label="DefaultVisit(symbol); 843642"];
4973 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 843643"];
4974 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 843644"];
4975 [label="_cancellationToken.ThrowIfCancellationRequested(); 843645"];
4976 [label="member.Accept(this); 843646"];
4977 [label="member.Accept(this); 843647"];
4978 [label="member.Accept(this); 843648"];
4979 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 843649"];
4980 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 843650"];
4981 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 843651"];
4982 [label="DocumentationMode maxDocumentationMode; 843652"];
4983 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 843653"];
4984 [label="docCommentNodes 843654"];
4985 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 843655"];
4986 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 843656"];
4987 [label="maxDocumentationMode = DocumentationMode.None; 843657"];
4988 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 843658"];
4989 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 843659"];
4990 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 843660"];
4991 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 843661"];
4992 [label="currDocumentationMode > maxDocumentationMode 843662"];
4993 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 843663"];
4994 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 843664"];
4995 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 843665"];
4996 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 843666"];
4997 [label="return true; 843667"];
4998 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 843668"];
4999 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 843669"];
5000 [label="return; 843670"];
5001 [label="return; 843671"];
5002 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 843672"];
5003 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 843673"];
5004 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 843674"];
5005 [label="DocumentationMode maxDocumentationMode; 843675"];
5006 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 843676"];
5007 [label="docCommentNodes 843677"];
5008 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 843678"];
5009 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 843679"];
5010 [label="maxDocumentationMode = DocumentationMode.None; 843680"];
5011 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 843681"];
5012 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 843682"];
5013 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 843683"];
5014 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 843684"];
5015 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 843685"];
5016 [label="return true; 843686"];
5017 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 843687"];
5018 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 843688"];
5019 [label="return; 843689"];
5020 [label="Debug.Assert(_indentDepth >= 0); 843690"];
5021 [label="Unindent(); 843691"];
5022 [label="WriteLine('</members>'); 843692"];
5023 [label="WriteLine('</members>') 843693"];
5024 [label="param WriteLine(string message) 843694"];
5025 [label="param WriteLine(this) 843695"];
5026 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843696"];
5027 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843697"];
5028 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843698"];
5029 [label="Unindent(); 843699"];
5030 [label="WriteLine('</doc>'); 843700"];
5031 [label="WriteLine('</doc>') 843701"];
5032 [label="param WriteLine(string message) 843702"];
5033 [label="param WriteLine(this) 843703"];
5034 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843704"];
5035 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843705"];
5036 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 843706"];
5037 [label="Debug.Assert(compiler._indentDepth == 0); 843707"];
5038 [label="Debug.Assert(compiler._indentDepth == 0); 843708"];
5039 [label="writer?.Flush(); 843709"];
5040 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 843710"];
5041 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 843711"];
5042 [label="compilation.SyntaxTrees 843712"];
5043 [label="_syntaxAndDeclarations.GetLazyState() 843713"];
5044 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 843714"];
5045 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 843715"];
5046 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 843716"];
5047 [label="param ReportUnprocessed(CancellationToken cancellationToken) 843717"];
5048 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 843718"];
5049 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 843719"];
5050 [label="param ReportUnusedImports(SyntaxTree? filterTree) 843720"];
5051 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 843721"];
5052 [label="param ReportUnusedImports(CancellationToken cancellationToken) 843722"];
5053 [label="param ReportUnusedImports(this) 843723"];
5054 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 843724"];
5055 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 843725"];
5056 [label="CompleteTrees(filterTree); 843726"];
5057 [label="CompleteTrees(filterTree) 843727"];
5058 [label="param CompleteTrees(SyntaxTree? filterTree) 843728"];
5059 [label="param CompleteTrees(this) 843729"];
5060 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 843730"];
5061 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 843731"];
5062 [label="CompleteTrees(filterTree); 843732"];
5063 [label="SourceAssembly 843733"];
5064 [label="GetBoundReferenceManager() 843734"];
5065 [label="GetBoundReferenceManager(); 843735"];
5066 [label="SourceAssembly.IsDelaySigned 843736"];
5067 [label="SourceAssembly 843737"];
5068 [label="GetBoundReferenceManager() 843738"];
5069 [label="GetBoundReferenceManager(); 843739"];
5070 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 843740"];
5071 [label="CorLibrary 843741"];
5072 [label="return Translate(corLibrary, context.Diagnostics); 843742"];
5073 [label="param Translate(DiagnosticBag diagnostics) 843743"];
5074 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 843744"];
5075 [label="_targetAssembly 843745"];
5076 [label="Debug.Assert((object)assemblySymbol != null); 843746"];
5077 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 843747"];
5078 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 843748"];
5079 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 843749"];
5080 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 843750"];
5081 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 843751"];
5082 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 843752"];
5083 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 843753"];
5084 [label="param ValidateReferencedAssembly(this) 843754"];
5085 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 843755"];
5086 [label="asmRef.Identity 843756"];
5087 [label="=> _targetAssembly.Identity 843757"];
5088 [label="AssemblyIdentity refIdentity = asmRef.Identity; 843758"];
5089 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 843759"];
5090 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 843760"];
5091 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 843761"];
5092 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 843762"];
5093 [label="var refMachine = assembly.Machine; 843763"];
5094 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 843764"];
5095 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 843765"];
5096 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 843766"];
5097 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 843767"];
5098 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 843768"];
5099 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 843769"];
5100 [label="param GetAssemblyReferencesFromAddedModules(this) 843770"];
5101 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 843771"];
5102 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 843772"];
5103 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 843773"];
5104 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 843774"];
5105 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 843775"];
5106 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 843776"];
5107 [label="param Translate(DiagnosticBag diagnostics) 843777"];
5108 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 843778"];
5109 [label="if ((object)module == null)\n            {\n                return null;\n            } 843779"];
5110 [label="param TranslateModule(DiagnosticBag diagnostics) 843780"];
5111 [label="_moduleBeingBuilt 843781"];
5112 [label="_underlyingModule 843782"];
5113 [label="Debug.Assert(moduleBeingBuilt != null); 843783"];
5114 [label="Debug.Assert((object)underlyingModule != null); 843784"];
5115 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 843785"];
5116 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 843786"];
5117 [label="if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                } 843787"];
5118 [label="builder.Add(resource); 843788"];
5119 [label="Compilation.AnonymousTypeManager 843789"];
5120 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 843790"];
5121 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 843791"];
5122 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 843792"];
5123 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 843793"];
5124 [label="GetEmbeddedTypes(context.Diagnostics) 843794"];
5125 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 843795"];
5126 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 843796"];
5127 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 843797"];
5128 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 843798"];
5129 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 843799"];
5130 [label="GetNeedsGeneratedAttributes() 843800"];
5131 [label="_needsGeneratedAttributes_IsFrozen = true; 843801"];
5132 [label="GetNeedsGeneratedAttributesInternal() 843802"];
5133 [label="return GetNeedsGeneratedAttributesInternal(); 843803"];
5134 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 843804"];
5135 [label="ShouldEmitNullablePublicOnlyAttribute() 843805"];
5136 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 843806"];
5137 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 843807"];
5138 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 843808"];
5139 [label="return; 843809"];
5140 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 843810"];
5141 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 843811"];
5142 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 843812"];
5143 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 843813"];
5144 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 843814"];
5145 [label="builder.AddIfNotNull(_lazyNullableAttribute); 843815"];
5146 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 843816"];
5147 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 843817"];
5148 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 843818"];
5149 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 843819"];
5150 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 843820"];
5151 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 843821"];
5152 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 843822"];
5153 [label="Debug.Assert(symbol.IsDefinition); 843823"];
5154 [label="SourceModule 843824"];
5155 [label="Assembly 843825"];
5156 [label="SourceAssembly 843826"];
5157 [label="GetBoundReferenceManager() 843827"];
5158 [label="GetBoundReferenceManager(); 843828"];
5159 [label="return Assembly.Modules[0]; 843829"];
5160 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 843830"];
5161 [label="EmitNullablePublicOnly 843831"];
5162 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 843832"];
5163 [label="Compilation.SourceModule 843833"];
5164 [label="Assembly 843834"];
5165 [label="SourceAssembly 843835"];
5166 [label="GetBoundReferenceManager() 843836"];
5167 [label="GetBoundReferenceManager(); 843837"];
5168 [label="return Assembly.Modules[0]; 843838"];
5169 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 843839"];
5170 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 843840"];
5171 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 843841"];
5172 [label="type.AddNullableTransforms(flagsBuilder); 843842"];
5173 [label="SynthesizedAttributeData attribute; 843843"];
5174 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 843844"];
5175 [label="param GetSynthesizedNestedTypes(this) 843845"];
5176 [label="return null; 843846"];
5177 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 843847"];
5178 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 843848"];
5179 [label="NamedTypeSymbol result; 843849"];
5180 [label="GetBoundReferenceManager(); 843850"];
5181 [label="Debug.Assert(result.SpecialType == specialType); 843851"];
5182 [label="param Translate(SyntaxNode syntaxNodeOpt) 843852"];
5183 [label="param Translate(DiagnosticBag diagnostics) 843853"];
5184 [label="param Translate(bool needDeclaration = false) 843854"];
5185 [label="param Translate(this) 843855"];
5186 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 843856"];
5187 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 843857"];
5188 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 843858"];
5189 [label="param Translate(SyntaxNode syntaxNodeOpt) 843859"];
5190 [label="param Translate(DiagnosticBag diagnostics) 843860"];
5191 [label="param Translate(bool needDeclaration) 843861"];
5192 [label="param Translate(this) 843862"];
5193 [label="object reference; 843863"];
5194 [label="Cci.IMethodReference methodRef; 843864"];
5195 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 843865"];
5196 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 843866"];
5197 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 843867"];
5198 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 843868"];
5199 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 843869"];
5200 [label="bool typeIsGeneric = IsGenericType(container); 843870"];
5201 [label="IsGenericType(container) 843871"];
5202 [label="param IsGenericType(NamedTypeSymbol toCheck) 843872"];
5203 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 843873"];
5204 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 843874"];
5205 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 843875"];
5206 [label="toCheck = toCheck.ContainingType; 843876"];
5207 [label="return false; 843877"];
5208 [label="bool typeIsGeneric = IsGenericType(container); 843878"];
5209 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 843879"];
5210 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 843880"];
5211 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 843881"];
5212 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 843882"];
5213 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 843883"];
5214 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 843884"];
5215 [label="param Translate(SyntaxNode syntaxNodeOpt) 843885"];
5216 [label="param Translate(DiagnosticBag diagnostics) 843886"];
5217 [label="Debug.Assert(diagnostics != null); 843887"];
5218 [label="Debug.Assert(diagnostics != null); 843888"];
5219 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 843889"];
5220 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 843890"];
5221 [label="param Translate(SyntaxNode syntaxNodeOpt) 843891"];
5222 [label="param Translate(DiagnosticBag diagnostics) 843892"];
5223 [label="param Translate(bool fromImplements = false) 843893"];
5224 [label="param Translate(bool needDeclaration = false) 843894"];
5225 [label="Debug.Assert(diagnostics != null); 843895"];
5226 [label="Debug.Assert(diagnostics != null); 843896"];
5227 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 843897"];
5228 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 843898"];
5229 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 843899"];
5230 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 843900"];
5231 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 843901"];
5232 [label="object reference; 843902"];
5233 [label="Cci.INamedTypeReference typeRef; 843903"];
5234 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 843904"];
5235 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 843905"];
5236 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 843906"];
5237 [label="IsGenericType(container) 843907"];
5238 [label="param IsGenericType(NamedTypeSymbol toCheck) 843908"];
5239 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 843909"];
5240 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 843910"];
5241 [label="return false; 843911"];
5242 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 843912"];
5243 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 843913"];
5244 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 843914"];
5245 [label="param Translate(SyntaxNode syntaxNodeOpt) 843915"];
5246 [label="param Translate(DiagnosticBag diagnostics) 843916"];
5247 [label="param Translate(bool fromImplements = false) 843917"];
5248 [label="param Translate(bool needDeclaration = false) 843918"];
5249 [label="Debug.Assert(diagnostics != null); 843919"];
5250 [label="Debug.Assert(diagnostics != null); 843920"];
5251 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 843921"];
5252 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 843922"];
5253 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 843923"];
5254 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 843924"];
5255 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 843925"];
5256 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 843926"];
5257 [label="param Translate(DiagnosticBag diagnostics) 843927"];
5258 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 843928"];
5259 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 843929"];
5260 [label="if ((object)module == null)\n            {\n                return null;\n            } 843930"];
5261 [label="if ((object)module == null)\n            {\n                return null;\n            } 843931"];
5262 [label="Cci.IModuleReference moduleRef; 843932"];
5263 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 843933"];
5264 [label="param Translate(this) 843934"];
5265 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 843935"];
5266 [label="MustBeWrapped(@params.First()) 843936"];
5267 [label="param MustBeWrapped(ParameterSymbol param) 843937"];
5268 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 843938"];
5269 [label="var container = param.ContainingSymbol; 843939"];
5270 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 843940"];
5271 [label="ContainerIsGeneric(container) 843941"];
5272 [label="param ContainerIsGeneric(Symbol container) 843942"];
5273 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 843943"];
5274 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 843944"];
5275 [label="IsGenericType(container.ContainingType) 843945"];
5276 [label="param IsGenericType(NamedTypeSymbol toCheck) 843946"];
5277 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 843947"];
5278 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 843948"];
5279 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 843949"];
5280 [label="toCheck = toCheck.ContainingType; 843950"];
5281 [label="return false; 843951"];
5282 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 843952"];
5283 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 843953"];
5284 [label="return false; 843954"];
5285 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 843955"];
5286 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 843956"];
5287 [label="param MustBeWrapped(ParameterSymbol param) 843957"];
5288 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 843958"];
5289 [label="var container = param.ContainingSymbol; 843959"];
5290 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 843960"];
5291 [label="ContainerIsGeneric(container) 843961"];
5292 [label="param ContainerIsGeneric(Symbol container) 843962"];
5293 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 843963"];
5294 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 843964"];
5295 [label="IsGenericType(container.ContainingType) 843965"];
5296 [label="param IsGenericType(NamedTypeSymbol toCheck) 843966"];
5297 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 843967"];
5298 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 843968"];
5299 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 843969"];
5300 [label="toCheck = toCheck.ContainingType; 843970"];
5301 [label="return false; 843971"];
5302 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 843972"];
5303 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 843973"];
5304 [label="return false; 843974"];
5305 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 843975"];
5306 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 843976"];
5307 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 843977"];
5308 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 843978"];
5309 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 843979"];
5310 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 843980"];
5311 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 843981"];
5312 [label="bool typeIsGeneric = IsGenericType(container); 843982"];
5313 [label="IsGenericType(container) 843983"];
5314 [label="param IsGenericType(NamedTypeSymbol toCheck) 843984"];
5315 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 843985"];
5316 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 843986"];
5317 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 843987"];
5318 [label="toCheck = toCheck.ContainingType; 843988"];
5319 [label="return false; 843989"];
5320 [label="bool typeIsGeneric = IsGenericType(container); 843990"];
5321 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 843991"];
5322 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 843992"];
5323 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 843993"];
5324 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 843994"];
5325 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 843995"];
5326 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 843996"];
5327 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 843997"];
5328 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 843998"];
5329 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 843999"];
5330 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 844000"];
5331 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 844001"];
5332 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 844002"];
5333 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 844003"];
5334 [label="param Translate(SyntaxNode syntaxNodeOpt) 844004"];
5335 [label="param Translate(DiagnosticBag diagnostics) 844005"];
5336 [label="param Translate(bool fromImplements = false) 844006"];
5337 [label="param Translate(bool needDeclaration = false) 844007"];
5338 [label="Debug.Assert(diagnostics != null); 844008"];
5339 [label="Debug.Assert(diagnostics != null); 844009"];
5340 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 844010"];
5341 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 844011"];
5342 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 844012"];
5343 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 844013"];
5344 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 844014"];
5345 [label="object reference; 844015"];
5346 [label="Cci.INamedTypeReference typeRef; 844016"];
5347 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 844017"];
5348 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844018"];
5349 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844019"];
5350 [label="IsGenericType(container) 844020"];
5351 [label="param IsGenericType(NamedTypeSymbol toCheck) 844021"];
5352 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844022"];
5353 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844023"];
5354 [label="return false; 844024"];
5355 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844025"];
5356 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844026"];
5357 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 844027"];
5358 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 844028"];
5359 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 844029"];
5360 [label="bool typeIsGeneric = IsGenericType(container); 844030"];
5361 [label="param IsGenericType(NamedTypeSymbol toCheck) 844031"];
5362 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844032"];
5363 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 844033"];
5364 [label="toCheck = toCheck.ContainingType; 844034"];
5365 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 844035"];
5366 [label="toCheck = toCheck.ContainingType; 844036"];
5367 [label="param MustBeWrapped(ParameterSymbol param) 844037"];
5368 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 844038"];
5369 [label="var container = param.ContainingSymbol; 844039"];
5370 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 844040"];
5371 [label="ContainerIsGeneric(container) 844041"];
5372 [label="param ContainerIsGeneric(Symbol container) 844042"];
5373 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844043"];
5374 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844044"];
5375 [label="IsGenericType(container.ContainingType) 844045"];
5376 [label="param IsGenericType(NamedTypeSymbol toCheck) 844046"];
5377 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844047"];
5378 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844048"];
5379 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 844049"];
5380 [label="toCheck = toCheck.ContainingType; 844050"];
5381 [label="return false; 844051"];
5382 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844052"];
5383 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844053"];
5384 [label="param MustBeWrapped(ParameterSymbol param) 844054"];
5385 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 844055"];
5386 [label="var container = param.ContainingSymbol; 844056"];
5387 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 844057"];
5388 [label="ContainerIsGeneric(container) 844058"];
5389 [label="param ContainerIsGeneric(Symbol container) 844059"];
5390 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844060"];
5391 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844061"];
5392 [label="IsGenericType(container.ContainingType) 844062"];
5393 [label="param IsGenericType(NamedTypeSymbol toCheck) 844063"];
5394 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844064"];
5395 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844065"];
5396 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 844066"];
5397 [label="toCheck = toCheck.ContainingType; 844067"];
5398 [label="return false; 844068"];
5399 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844069"];
5400 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844070"];
5401 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 844071"];
5402 [label="return Translate(corLibrary, context.Diagnostics); 844072"];
5403 [label="param Translate(DiagnosticBag diagnostics) 844073"];
5404 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 844074"];
5405 [label="return SourceModule.GetCustomAttributesToEmit(this); 844075"];
5406 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 844076"];
5407 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 844077"];
5408 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 844078"];
5409 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 844079"];
5410 [label="return GetNeedsGeneratedAttributesInternal(); 844080"];
5411 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 844081"];
5412 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 844082"];
5413 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 844083"];
5414 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 844084"];
5415 [label="return; 844085"];
5416 [label="Debug.Assert(symbol.IsDefinition); 844086"];
5417 [label="GetBoundReferenceManager(); 844087"];
5418 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 844088"];
5419 [label="GetBoundReferenceManager(); 844089"];
5420 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 844090"];
5421 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 844091"];
5422 [label="param SynthesizeNullableAttributeIfNecessary(this) 844092"];
5423 [label="object reference; 844093"];
5424 [label="Cci.INamedTypeReference typeRef; 844094"];
5425 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 844095"];
5426 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844096"];
5427 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844097"];
5428 [label="IsGenericType(container) 844098"];
5429 [label="param IsGenericType(NamedTypeSymbol toCheck) 844099"];
5430 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844100"];
5431 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844101"];
5432 [label="return false; 844102"];
5433 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844103"];
5434 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844104"];
5435 [label="param GetExportedTypes(DiagnosticBag diagnostics) 844105"];
5436 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 844106"];
5437 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder) 844107"];
5438 [label="param GetExportedTypes(NamespaceOrTypeSymbol symbol) 844108"];
5439 [label="param GetExportedTypes(int parentIndex) 844109"];
5440 [label="param GetExportedTypes(ArrayBuilder<Cci.ExportedType> builder) 844110"];
5441 [label="int index; 844111"];
5442 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                }\n\n                Debug.Assert(symbol.IsDefinition);\n                index = builder.Count;\n                builder.Add(new Cci.ExportedType((Cci.ITypeReference)symbol.GetCciAdapter(), parentIndex, isForwarder: false));\n            }\n            else\n            {\n                index = -1;\n            } 844112"];
5443 [label="index = -1; 844113"];
5444 [label="foreach (var member in symbol.GetMembers())\n            {\n                var namespaceOrType = member as NamespaceOrTypeSymbol;\n                if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                }\n            } 844114"];
5445 [label="var namespaceOrType = member as NamespaceOrTypeSymbol; 844115"];
5446 [label="if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                } 844116"];
5447 [label="if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                } 844117"];
5448 [label="GetExportedTypes(namespaceOrType, index, builder); 844118"];
5449 [label="GetExportedTypes(namespaceOrType, index, builder); 844119"];
5450 [label="GetExportedTypes(namespaceOrType, index, builder); 844120"];
5451 [label="GetExportedTypes(namespaceOrType, index, builder) 844121"];
5452 [label="param GetExportedTypes(NamespaceOrTypeSymbol symbol) 844122"];
5453 [label="param GetExportedTypes(int parentIndex) 844123"];
5454 [label="param GetExportedTypes(ArrayBuilder<Cci.ExportedType> builder) 844124"];
5455 [label="int index; 844125"];
5456 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                }\n\n                Debug.Assert(symbol.IsDefinition);\n                index = builder.Count;\n                builder.Add(new Cci.ExportedType((Cci.ITypeReference)symbol.GetCciAdapter(), parentIndex, isForwarder: false));\n            }\n            else\n            {\n                index = -1;\n            } 844126"];
5457 [label="if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                } 844127"];
5458 [label="return; 844128"];
5459 [label="GetExportedTypes(namespaceOrType, index, builder); 844129"];
5460 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 844130"];
5461 [label="sourceAssembly.DeclaringCompilation.Options 844131"];
5462 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 844132"];
5463 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 844133"];
5464 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 844134"];
5465 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 844135"];
5466 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 844136"];
5467 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 844137"];
5468 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 844138"];
5469 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 844139"];
5470 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 844140"];
5471 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 844141"];
5472 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 844142"];
5473 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 844143"];
5474 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 844144"];
5475 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 844145"];
5476 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 844146"];
5477 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 844147"];
5478 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 844148"];
5479 [label="return seenTopLevelForwardedTypes; 844149"];
5480 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 844150"];
5481 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 844151"];
5482 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 844152"];
5483 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 844153"];
5484 [label="param AddEmbeddedResourcesFromAddedModules(this) 844154"];
5485 [label="var modules = _sourceAssembly.Modules; 844155"];
5486 [label="int count = modules.Length; 844156"];
5487 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 844157"];
5488 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 844158"];
5489 [label="var file = (Cci.IFileReference)Translate(modules[i], diagnostics); 844159"];
5490 [label="var file = (Cci.IFileReference)Translate(modules[i], diagnostics); 844160"];
5491 [label="Translate(modules[i], diagnostics) 844161"];
5492 [label="param Translate(ModuleSymbol module) 844162"];
5493 [label="param Translate(DiagnosticBag diagnostics) 844163"];
5494 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 844164"];
5495 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 844165"];
5496 [label="if ((object)module == null)\n            {\n                return null;\n            } 844166"];
5497 [label="if ((object)module == null)\n            {\n                return null;\n            } 844167"];
5498 [label="foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    } 844168"];
5499 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 844169"];
5500 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 844170"];
5501 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 844171"];
5502 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 844172"];
5503 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 844173"];
5504 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 844174"];
5505 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 844175"];
5506 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 844176"];
5507 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 844177"];
5508 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 844178"];
5509 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 844179"];
5510 [label="param Translate(SyntaxNode syntaxNodeOpt) 844180"];
5511 [label="param Translate(DiagnosticBag diagnostics) 844181"];
5512 [label="param Translate(bool fromImplements = false) 844182"];
5513 [label="param Translate(bool needDeclaration = false) 844183"];
5514 [label="Debug.Assert(diagnostics != null); 844184"];
5515 [label="Debug.Assert(diagnostics != null); 844185"];
5516 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 844186"];
5517 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 844187"];
5518 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 844188"];
5519 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 844189"];
5520 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 844190"];
5521 [label="object reference; 844191"];
5522 [label="Cci.INamedTypeReference typeRef; 844192"];
5523 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 844193"];
5524 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844194"];
5525 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844195"];
5526 [label="IsGenericType(container) 844196"];
5527 [label="param IsGenericType(NamedTypeSymbol toCheck) 844197"];
5528 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844198"];
5529 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844199"];
5530 [label="return false; 844200"];
5531 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844201"];
5532 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844202"];
5533 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 844203"];
5534 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 844204"];
5535 [label="get\n            {\n                return true;\n            } 844205"];
5536 [label="return true; 844206"];
5537 [label="object reference; 844207"];
5538 [label="Cci.INamedTypeReference typeRef; 844208"];
5539 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 844209"];
5540 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844210"];
5541 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844211"];
5542 [label="IsGenericType(container) 844212"];
5543 [label="param IsGenericType(NamedTypeSymbol toCheck) 844213"];
5544 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844214"];
5545 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844215"];
5546 [label="return false; 844216"];
5547 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844217"];
5548 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 844218"];
5549 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 844219"];
5550 [label="GetBoundReferenceManager(); 844220"];
5551 [label="Debug.Assert(result.SpecialType == specialType); 844221"];
5552 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 844222"];
5553 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 844223"];
5554 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 844224"];
5555 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 844225"];
5556 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 844226"];
5557 [label="bool typeIsGeneric = IsGenericType(container); 844227"];
5558 [label="IsGenericType(container) 844228"];
5559 [label="param IsGenericType(NamedTypeSymbol toCheck) 844229"];
5560 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844230"];
5561 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844231"];
5562 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 844232"];
5563 [label="toCheck = toCheck.ContainingType; 844233"];
5564 [label="return false; 844234"];
5565 [label="bool typeIsGeneric = IsGenericType(container); 844235"];
5566 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 844236"];
5567 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 844237"];
5568 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 844238"];
5569 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 844239"];
5570 [label="param MustBeWrapped(ParameterSymbol param) 844240"];
5571 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 844241"];
5572 [label="var container = param.ContainingSymbol; 844242"];
5573 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 844243"];
5574 [label="ContainerIsGeneric(container) 844244"];
5575 [label="param ContainerIsGeneric(Symbol container) 844245"];
5576 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844246"];
5577 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844247"];
5578 [label="IsGenericType(container.ContainingType) 844248"];
5579 [label="param IsGenericType(NamedTypeSymbol toCheck) 844249"];
5580 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844250"];
5581 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844251"];
5582 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 844252"];
5583 [label="toCheck = toCheck.ContainingType; 844253"];
5584 [label="return false; 844254"];
5585 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844255"];
5586 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844256"];
5587 [label="param MustBeWrapped(ParameterSymbol param) 844257"];
5588 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 844258"];
5589 [label="var container = param.ContainingSymbol; 844259"];
5590 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 844260"];
5591 [label="ContainerIsGeneric(container) 844261"];
5592 [label="param ContainerIsGeneric(Symbol container) 844262"];
5593 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844263"];
5594 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844264"];
5595 [label="IsGenericType(container.ContainingType) 844265"];
5596 [label="param IsGenericType(NamedTypeSymbol toCheck) 844266"];
5597 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844267"];
5598 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 844268"];
5599 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 844269"];
5600 [label="toCheck = toCheck.ContainingType; 844270"];
5601 [label="return false; 844271"];
5602 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844272"];
5603 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 844273"];
5604 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 844274"];
5605 [label="toCheck = toCheck.ContainingType; 844275"];
5606 [label="Debug.Assert(symbol.IsDefinition); 844276"];
5607 [label="GetBoundReferenceManager(); 844277"];
5608 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 844278"];
5609 [label="GetBoundReferenceManager(); 844279"];
5610 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 844280"];
5611 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 844281"];
5612 [label="param SynthesizeNullableAttributeIfNecessary(this) 844282"];
5613 [label="param Filter(int warningLevelOption) 844283"];
5614 [label="param Filter(NullableContextOptions nullableOption) 844284"];
5615 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 844285"];
5616 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 844286"];
5617 [label="param Filter(CancellationToken cancellationToken) 844287"];
5618 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 844288"];
5619 [label="refoutDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)); 844289"];
5620 [label="refoutDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)); 844290"];
5621 [label="refoutDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)); 844291"];
5622 [label="Diagnostic(ErrorCode.ERR_CryptoHashFailed) 844292"];
5623 [label="param Diagnostic(object code) 844293"];
5624 [label="param Diagnostic(string squiggledText = null) 844294"];
5625 [label="param Diagnostic(object[] arguments = null) 844295"];
5626 [label="param Diagnostic(LinePosition? startLocation = null) 844296"];
5627 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 844297"];
5628 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 844298"];
5629 [label="param Diagnostic(bool isSuppressed = false) 844299"];
5630 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 844300"];
5631 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 844301"];
5632 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 844302"];
5633 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 844303"];
5634 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 844304"];
5635 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 844305"];
5636 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 844306"];
5637 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 844307"];
5638 [label="param Diagnostic(object code) 844308"];
5639 [label="param Diagnostic(string squiggledText = null) 844309"];
5640 [label="param Diagnostic(object[] arguments = null) 844310"];
5641 [label="param Diagnostic(LinePosition? startLocation = null) 844311"];
5642 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 844312"];
5643 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 844313"];
5644 [label="param Diagnostic(bool isSuppressed = false) 844314"];
5645 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 844315"];
5646 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 844316"];
5647 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 844317"];
5648 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 844318"];
5649 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 844319"];
5650 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 844320"];
5651 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 844321"];
5652 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 844322"];
5653 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 844323"];
5654 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 844324"];
5655 [label="param DiagnosticDescription(object code) 844325"];
5656 [label="param DiagnosticDescription(bool isWarningAsError) 844326"];
5657 [label="param DiagnosticDescription(string squiggledText) 844327"];
5658 [label="param DiagnosticDescription(object[] arguments) 844328"];
5659 [label="param DiagnosticDescription(LinePosition? startLocation) 844329"];
5660 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 844330"];
5661 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 844331"];
5662 [label="param DiagnosticDescription(Type errorCodeType = null) 844332"];
5663 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 844333"];
5664 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 844334"];
5665 [label="param DiagnosticDescription(bool isSuppressed = false) 844335"];
5666 [label="param DiagnosticDescription(this) 844336"];
5667 [label="_code 844337"];
5668 [label="_isWarningAsError 844338"];
5669 [label="_isSuppressed 844339"];
5670 [label="_squiggledText 844340"];
5671 [label="_arguments 844341"];
5672 [label="_startPosition 844342"];
5673 [label="_argumentOrderDoesNotMatter 844343"];
5674 [label="_errorCodeType 844344"];
5675 [label="_ignoreArgumentsWhenComparing 844345"];
5676 [label="_defaultSeverityOpt 844346"];
5677 [label="_effectiveSeverityOpt 844347"];
5678 [label="_syntaxPredicate 844348"];
5679 [label="_showPredicate 844349"];
5680 [label="_location 844350"];
5681 [label="_argumentsAsStrings 844351"];
5682 [label="_code 844352"];
5683 [label="_isWarningAsError 844353"];
5684 [label="_squiggledText 844354"];
5685 [label="_arguments 844355"];
5686 [label="_startPosition 844356"];
5687 [label="_syntaxPredicate 844357"];
5688 [label="_argumentOrderDoesNotMatter 844358"];
5689 [label="_errorCodeType = errorCodeType ?? code.GetType(); 844359"];
5690 [label="_errorCodeType 844360"];
5691 [label="_defaultSeverityOpt 844361"];
5692 [label="_effectiveSeverityOpt 844362"];
5693 [label="_isSuppressed 844363"];
5694 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 844364"];
5695 [label="refoutDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)); 844365"];
5696 [label="refoutDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)) 844366"];
5697 [label="refoutDiagnostics.Verify(\n                // error CS8013: Cryptographic failure while creating hashes.\n                Diagnostic(ErrorCode.ERR_CryptoHashFailed)) 844367"];
5698 [label="param Verify(this ImmutableArray<Diagnostic> actual) 844368"];
5699 [label="param Verify(params DiagnosticDescription[] expected) 844369"];
5700 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 844370"];
5701 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 844371"];
5702 [label="param Verify(params DiagnosticDescription[] expected) 844372"];
5703 [label="Verify(actual, expected, errorCodeOnly: false); 844373"];
5704 [label="Verify(actual, expected, errorCodeOnly: false); 844374"];
5705 [label="Verify(actual, expected, errorCodeOnly: false) 844375"];
5706 [label="param Verify(DiagnosticDescription[] expected) 844376"];
5707 [label="param Verify(bool errorCodeOnly) 844377"];
5708 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 844378"];
5709 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 844379"];
5710 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 844380"];
5711 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 844381"];
5712 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 844382"];
5713 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 844383"];
5714 [label="=> _defaultSeverityOpt 844384"];
5715 [label="_defaultSeverityOpt 844385"];
5716 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 844386"];
5717 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 844387"];
5718 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 844388"];
5719 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 844389"];
5720 [label="=> _effectiveSeverityOpt 844390"];
5721 [label="_effectiveSeverityOpt 844391"];
5722 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 844392"];
5723 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 844393"];
5724 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 844394"];
5725 [label="_code 844395"];
5726 [label="_isWarningAsError 844396"];
5727 [label="_isSuppressed 844397"];
5728 [label="_arguments 844398"];
5729 [label="_startPosition 844399"];
5730 [label="_errorCodeType 844400"];
5731 [label="_defaultSeverityOpt 844401"];
5732 [label="_effectiveSeverityOpt 844402"];
5733 [label="_code 844403"];
5734 [label="DiagnosticWithInfo dinfo = null; 844404"];
5735 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 844405"];
5736 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 844406"];
5737 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 844407"];
5738 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 844408"];
5739 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 844409"];
5740 [label="int index = unmatched.IndexOf(d); 844410"];
5741 [label="if (d == null)\n                return false; 844411"];
5742 [label="if (d == null)\n                return false; 844412"];
5743 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 844413"];
5744 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 844414"];
5745 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 844415"];
5746 [label="if (_squiggledText != d._squiggledText)\n                    return false; 844416"];
5747 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 844417"];
5748 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 844418"];
5749 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 844419"];
5750 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 844420"];
5751 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 844421"];
5752 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 844422"];
5753 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 844423"];
5754 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 844424"];
5755 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 844425"];
5756 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 844426"];
5757 [label="if (d._arguments != null)\n                    return false; 844427"];
5758 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 844428"];
5759 [label="return true; 844429"];
5760 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 844430"];
5761 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 844431"];
5762 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 844432"];
5763 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 844433"];
5764 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 844434"];
5765 [label="DiagnosticDescription.GetAssertText(expected, actual) 844435"];
5766 [label="param GetAssertText(DiagnosticDescription[] expected) 844436"];
5767 [label="const int CSharp = 1; 844437"];
5768 [label="const int VisualBasic = 2; 844438"];
5769 [label="int indentDepth = (language == CSharp) ? 4 : 1; 844439"];
5770 [label="(language == CSharp) 844440"];
5771 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 844441"];
5772 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 844442"];
5773 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 844443"];
5774 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 844444"];
5775 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 844445"];
5776 [label="IsSortedOrEmpty(expected) 844446"];
5777 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 844447"];
5778 [label="var comparer = LinePositionComparer.Instance; 844448"];
5779 [label="DiagnosticDescription last = null; 844449"];
5780 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 844450"];
5781 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 844451"];
5782 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 844452"];
5783 [label="return false; 844453"];
5784 [label="var assertText = new StringBuilder(); 844454"];
5785 [label="assertText.AppendLine(); 844455"];
5786 [label="int i; 844456"];
5787 [label="assertText.AppendLine('Expected:'); 844457"];
5788 [label="assertText.AppendLine('Expected:'); 844458"];
5789 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 844459"];
5790 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 844460"];
5791 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 844461"];
5792 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 844462"];
5793 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 844463"];
5794 [label="GetDiagnosticDescription(d, indentDepth) 844464"];
5795 [label="param GetDiagnosticDescription(DiagnosticDescription d) 844465"];
5796 [label="param GetDiagnosticDescription(int indentDepth) 844466"];
5797 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844467"];
5798 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844468"];
5799 [label="d.ToString() 844469"];
5800 [label="param ToString(this) 844470"];
5801 [label="var sb = new StringBuilder(); 844471"];
5802 [label="sb.Append('Diagnostic('); 844472"];
5803 [label="sb.Append('Diagnostic('); 844473"];
5804 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 844474"];
5805 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 844475"];
5806 [label="sb.Append(_errorCodeType.Name); 844476"];
5807 [label="sb.Append(_errorCodeType.Name); 844477"];
5808 [label="sb.Append('.'); 844478"];
5809 [label="sb.Append('.'); 844479"];
5810 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 844480"];
5811 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 844481"];
5812 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 844482"];
5813 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 844483"];
5814 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 844484"];
5815 [label="sb.Append(')'); 844485"];
5816 [label="sb.Append(')'); 844486"];
5817 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 844487"];
5818 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 844488"];
5819 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 844489"];
5820 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 844490"];
5821 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 844491"];
5822 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 844492"];
5823 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 844493"];
5824 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 844494"];
5825 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 844495"];
5826 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 844496"];
5827 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 844497"];
5828 [label="return sb.ToString(); 844498"];
5829 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844499"];
5830 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844500"];
5831 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 844501"];
5832 [label="GetCommaSeparatedLines(assertText, expectedText); 844502"];
5833 [label="GetCommaSeparatedLines(assertText, expectedText); 844503"];
5834 [label="GetCommaSeparatedLines(assertText, expectedText) 844504"];
5835 [label="param GetCommaSeparatedLines(StringBuilder sb) 844505"];
5836 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 844506"];
5837 [label="int n = lines.Count; 844507"];
5838 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 844508"];
5839 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 844509"];
5840 [label="sb.Append(lines[i]); 844510"];
5841 [label="sb.Append(lines[i]); 844511"];
5842 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 844512"];
5843 [label="sb.AppendLine(); 844513"];
5844 [label="GetCommaSeparatedLines(assertText, expectedText); 844514"];
5845 [label="assertText.AppendLine('Actual:'); 844515"];
5846 [label="assertText.AppendLine('Actual:'); 844516"];
5847 [label="var actualText = ArrayBuilder<string>.GetInstance(); 844517"];
5848 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 844518"];
5849 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 844519"];
5850 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 844520"];
5851 [label="Indent(assertText, indentDepth); 844521"];
5852 [label="Indent(assertText, indentDepth); 844522"];
5853 [label="Indent(assertText, indentDepth) 844523"];
5854 [label="param Indent(StringBuilder sb) 844524"];
5855 [label="param Indent(int count) 844525"];
5856 [label="sb.Append(' ', 4 * count); 844526"];
5857 [label="sb.Append(' ', 4 * count); 844527"];
5858 [label="sb.Append(' ', 4 * count); 844528"];
5859 [label="Indent(assertText, indentDepth); 844529"];
5860 [label="assertText.Append('// '); 844530"];
5861 [label="assertText.Append('// '); 844531"];
5862 [label="var l = d.Location; 844532"];
5863 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 844533"];
5864 [label="_code 844534"];
5865 [label="_isWarningAsError 844535"];
5866 [label="_isSuppressed 844536"];
5867 [label="_arguments 844537"];
5868 [label="_startPosition 844538"];
5869 [label="_errorCodeType 844539"];
5870 [label="_defaultSeverityOpt 844540"];
5871 [label="_effectiveSeverityOpt 844541"];
5872 [label="_code 844542"];
5873 [label="DiagnosticWithInfo dinfo = null; 844543"];
5874 [label="var diffDescription = description; 844544"];
5875 [label="if (d == null)\n                return false; 844545"];
5876 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 844546"];
5877 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 844547"];
5878 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 844548"];
5879 [label="if (_squiggledText != d._squiggledText)\n                    return false; 844549"];
5880 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 844550"];
5881 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 844551"];
5882 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 844552"];
5883 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 844553"];
5884 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 844554"];
5885 [label="if (d._arguments != null)\n                    return false; 844555"];
5886 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 844556"];
5887 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 844557"];
5888 [label="diffDescription = expected[idx]; 844558"];
5889 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 844559"];
5890 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 844560"];
5891 [label="GetDiagnosticDescription(description, indentDepth) 844561"];
5892 [label="param GetDiagnosticDescription(DiagnosticDescription d) 844562"];
5893 [label="param GetDiagnosticDescription(int indentDepth) 844563"];
5894 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844564"];
5895 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844565"];
5896 [label="d.ToString() 844566"];
5897 [label="param ToString(this) 844567"];
5898 [label="var sb = new StringBuilder(); 844568"];
5899 [label="sb.Append('Diagnostic('); 844569"];
5900 [label="sb.Append('Diagnostic('); 844570"];
5901 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 844571"];
5902 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 844572"];
5903 [label="sb.Append(_errorCodeType.Name); 844573"];
5904 [label="sb.Append(_errorCodeType.Name); 844574"];
5905 [label="sb.Append('.'); 844575"];
5906 [label="sb.Append('.'); 844576"];
5907 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 844577"];
5908 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 844578"];
5909 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 844579"];
5910 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 844580"];
5911 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 844581"];
5912 [label="sb.Append(')'); 844582"];
5913 [label="sb.Append(')'); 844583"];
5914 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 844584"];
5915 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 844585"];
5916 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 844586"];
5917 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 844587"];
5918 [label="sb.Append('.WithLocation('); 844588"];
5919 [label="sb.Append('.WithLocation('); 844589"];
5920 [label="sb.Append(_startPosition.Value.Line + 1); 844590"];
5921 [label="sb.Append(_startPosition.Value.Line + 1); 844591"];
5922 [label="sb.Append(', '); 844592"];
5923 [label="sb.Append(', '); 844593"];
5924 [label="sb.Append(_startPosition.Value.Character + 1); 844594"];
5925 [label="sb.Append(_startPosition.Value.Character + 1); 844595"];
5926 [label="sb.Append(')'); 844596"];
5927 [label="sb.Append(')'); 844597"];
5928 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 844598"];
5929 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 844599"];
5930 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 844600"];
5931 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 844601"];
5932 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 844602"];
5933 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 844603"];
5934 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 844604"];
5935 [label="return sb.ToString(); 844605"];
5936 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844606"];
5937 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844607"];
5938 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 844608"];
5939 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 844609"];
5940 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 844610"];
5941 [label="GetDiagnosticDescription(diffDescription, indentDepth) 844611"];
5942 [label="param GetDiagnosticDescription(DiagnosticDescription d) 844612"];
5943 [label="param GetDiagnosticDescription(int indentDepth) 844613"];
5944 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844614"];
5945 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844615"];
5946 [label="d.ToString() 844616"];
5947 [label="param ToString(this) 844617"];
5948 [label="var sb = new StringBuilder(); 844618"];
5949 [label="sb.Append('Diagnostic('); 844619"];
5950 [label="sb.Append('Diagnostic('); 844620"];
5951 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 844621"];
5952 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 844622"];
5953 [label="sb.Append(_errorCodeType.Name); 844623"];
5954 [label="sb.Append(_errorCodeType.Name); 844624"];
5955 [label="sb.Append('.'); 844625"];
5956 [label="sb.Append('.'); 844626"];
5957 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 844627"];
5958 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 844628"];
5959 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 844629"];
5960 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 844630"];
5961 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 844631"];
5962 [label="sb.Append(')'); 844632"];
5963 [label="sb.Append(')'); 844633"];
5964 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 844634"];
5965 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 844635"];
5966 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 844636"];
5967 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 844637"];
5968 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 844638"];
5969 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 844639"];
5970 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 844640"];
5971 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 844641"];
5972 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 844642"];
5973 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 844643"];
5974 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 844644"];
5975 [label="return sb.ToString(); 844645"];
5976 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844646"];
5977 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 844647"];
5978 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 844648"];
5979 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 844649"];
5980 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 844650"];
5981 [label="assertText.AppendLine(); 844651"];
5982 [label="assertText.AppendLine('Diff:'); 844652"];
5983 [label="assertText.AppendLine('Diff:'); 844653"];
5984 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 844654"];
5985 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 844655"];
5986 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 844656"];
5987 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 844657"];
5988 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 844658"];
5989 [label="param DiffReport(IEnumerable<T> expected) 844659"];
5990 [label="param DiffReport(IEnumerable<T> actual) 844660"];
5991 [label="param DiffReport(string separator) 844661"];
5992 [label="param DiffReport(IEqualityComparer<T> comparer = null) 844662"];
5993 [label="param DiffReport(Func<T, string> toString = null) 844663"];
5994 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 844664"];
5995 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 844665"];
5996 [label="(comparer != null) 844666"];
5997 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 844667"];
5998 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 844668"];
5999 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 844669"];
6000 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 844670"];
6001 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 844671"];
6002 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 844672"];
6003 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 844673"];
6004 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 844674"];
6005 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 844675"];
6006 [label="lcs.CalculateDiff(expectedList, actualList, toString) 844676"];
6007 [label="param CalculateDiff(IList<T> sequenceA) 844677"];
6008 [label="param CalculateDiff(IList<T> sequenceB) 844678"];
6009 [label="param CalculateDiff(Func<T, string> toString) 844679"];
6010 [label="param CalculateDiff(this) 844680"];
6011 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 844681"];
6012 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 844682"];
6013 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 844683"];
6014 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 844684"];
6015 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 844685"];
6016 [label="param GetEdits(TSequence sequenceA) 844686"];
6017 [label="param GetEdits(int lengthA) 844687"];
6018 [label="param GetEdits(TSequence sequenceB) 844688"];
6019 [label="param GetEdits(int lengthB) 844689"];
6020 [label="param GetEdits(this) 844690"];
6021 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 844691"];
6022 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 844692"];
6023 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 844693"];
6024 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 844694"];
6025 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 844695"];
6026 [label="param ComputeCostMatrix(TSequence sequenceA) 844696"];
6027 [label="param ComputeCostMatrix(int lengthA) 844697"];
6028 [label="param ComputeCostMatrix(TSequence sequenceB) 844698"];
6029 [label="param ComputeCostMatrix(int lengthB) 844699"];
6030 [label="param ComputeCostMatrix(this) 844700"];
6031 [label="var la = lengthA + 1; 844701"];
6032 [label="var la = lengthA + 1; 844702"];
6033 [label="var lb = lengthB + 1; 844703"];
6034 [label="var lb = lengthB + 1; 844704"];
6035 [label="var d = new int[la, lb]; 844705"];
6036 [label="d[0, 0] = 0; 844706"];
6037 [label="d[0, 0] 844707"];
6038 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 844708"];
6039 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 844709"];
6040 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 844710"];
6041 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 844711"];
6042 [label="d[i, 0] 844712"];
6043 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 844713"];
6044 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 844714"];
6045 [label="d[0, j] = d[0, j - 1] + InsertCost; 844715"];
6046 [label="d[0, j] = d[0, j - 1] + InsertCost; 844716"];
6047 [label="d[0, j] 844717"];
6048 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 844718"];
6049 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 844719"];
6050 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 844720"];
6051 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 844721"];
6052 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 844722"];
6053 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 844723"];
6054 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 844724"];
6055 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 844725"];
6056 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 844726"];
6057 [label="param ItemsEqual(IList<T> sequenceA) 844727"];
6058 [label="param ItemsEqual(int indexA) 844728"];
6059 [label="param ItemsEqual(IList<T> sequenceB) 844729"];
6060 [label="param ItemsEqual(int indexB) 844730"];
6061 [label="param ItemsEqual(this) 844731"];
6062 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 844732"];
6063 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 844733"];
6064 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 844734"];
6065 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 844735"];
6066 [label="int m2 = d[i - 1, j] + DeleteCost; 844736"];
6067 [label="int m2 = d[i - 1, j] + DeleteCost; 844737"];
6068 [label="int m3 = d[i, j - 1] + InsertCost; 844738"];
6069 [label="int m3 = d[i, j - 1] + InsertCost; 844739"];
6070 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 844740"];
6071 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 844741"];
6072 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 844742"];
6073 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 844743"];
6074 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 844744"];
6075 [label="d[i, j] 844745"];
6076 [label="return d; 844746"];
6077 [label="int i = lengthA; 844747"];
6078 [label="int j = lengthB; 844748"];
6079 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 844749"];
6080 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 844750"];
6081 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 844751"];
6082 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 844752"];
6083 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 844753"];
6084 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 844754"];
6085 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 844755"];
6086 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 844756"];
6087 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 844757"];
6088 [label="i--; 844758"];
6089 [label="j--; 844759"];
6090 [label="yield return new Edit(EditKind.Update, i, j); 844760"];
6091 [label="yield return new Edit(EditKind.Update, i, j); 844761"];
6092 [label="yield return new Edit(EditKind.Update, i, j); 844762"];
6093 [label="yield return new Edit(EditKind.Update, i, j); 844763"];
6094 [label="new Edit(EditKind.Update, i, j) 844764"];
6095 [label="param Edit(EditKind kind) 844765"];
6096 [label="param Edit(int indexA) 844766"];
6097 [label="param Edit(int indexB) 844767"];
6098 [label="param Edit(this) 844768"];
6099 [label="this.Kind 844769"];
6100 [label="this.IndexA 844770"];
6101 [label="this.IndexB 844771"];
6102 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 844772"];
6103 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 844773"];
6104 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 844774"];
6105 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 844775"];
6106 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 844776"];
6107 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 844777"];
6108 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 844778"];
6109 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 844779"];
6110 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 844780"];
6111 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 844781"];
6112 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 844782"];
6113 [label="actualText.Free(); 844783"];
6114 [label="expectedText.Free(); 844784"];
6115 [label="return assertText.ToString(); 844785"];
6116 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 844786"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 0;
12 -> 1;
13 -> 11;
13 -> 1;
14 -> 1;
15 -> 0;
15 -> 1;
16 -> 14;
17 -> 16;
17 -> 14;
18 -> 14;
19 -> 17;
19 -> 18;
20 -> 18;
21 -> 19;
21 -> 20;
21 -> 18;
22 -> 14;
23 -> 14;
24 -> 14;
25 -> 14;
26 -> 14;
27 -> 14;
28 -> 14;
29 -> 14;
30 -> 22;
30 -> 14;
31 -> 23;
31 -> 14;
32 -> 24;
32 -> 14;
33 -> 25;
33 -> 14;
34 -> 26;
34 -> 14;
35 -> 27;
35 -> 14;
36 -> 28;
36 -> 14;
37 -> 14;
38 -> 37;
38 -> 14;
39 -> 14;
40 -> 30;
40 -> 39;
41 -> 31;
41 -> 39;
42 -> 32;
42 -> 39;
43 -> 33;
43 -> 39;
44 -> 34;
44 -> 39;
45 -> 35;
45 -> 39;
46 -> 36;
46 -> 39;
47 -> 38;
47 -> 39;
48 -> 43;
48 -> 39;
49 -> 45;
49 -> 39;
50 -> 39;
51 -> 48;
51 -> 50;
52 -> 49;
52 -> 50;
53 -> 40;
53 -> 50;
54 -> 53;
54 -> 21;
54 -> 50;
55 -> 54;
56 -> 52;
56 -> 54;
57 -> 51;
57 -> 54;
58 -> 54;
59 -> 55;
59 -> 58;
60 -> 56;
60 -> 58;
61 -> 57;
61 -> 58;
62 -> 55;
62 -> 58;
63 -> 58;
64 -> 61;
64 -> 63;
64 -> 58;
65 -> 0;
65 -> 64;
66 -> 59;
66 -> 58;
67 -> 0;
67 -> 58;
68 -> 67;
68 -> 62;
68 -> 58;
69 -> 58;
70 -> 66;
70 -> 68;
70 -> 69;
70 -> 0;
70 -> 58;
71 -> 70;
71 -> 58;
72 -> 65;
72 -> 58;
73 -> 60;
73 -> 58;
74 -> 58;
75 -> 71;
75 -> 72;
75 -> 73;
75 -> 74;
75 -> 70;
75 -> 0;
75 -> 58;
76 -> 58;
77 -> 75;
77 -> 76;
78 -> 76;
79 -> 76;
80 -> 77;
80 -> 75;
80 -> 79;
80 -> 76;
81 -> 78;
81 -> 76;
82 -> 76;
83 -> 80;
83 -> 75;
83 -> 79;
83 -> 81;
83 -> 82;
83 -> 78;
83 -> 76;
84 -> 76;
85 -> 84;
85 -> 78;
85 -> 76;
86 -> 78;
86 -> 76;
87 -> 76;
88 -> 86;
88 -> 87;
88 -> 78;
88 -> 85;
88 -> 76;
89 -> 77;
89 -> 76;
90 -> 89;
90 -> 55;
90 -> 54;
91 -> 55;
91 -> 39;
92 -> 39;
93 -> 42;
93 -> 92;
93 -> 39;
94 -> 0;
94 -> 39;
95 -> 47;
95 -> 39;
96 -> 44;
96 -> 91;
96 -> 41;
96 -> 42;
96 -> 39;
97 -> 96;
97 -> 39;
98 -> 39;
99 -> 97;
99 -> 98;
100 -> 0;
100 -> 98;
101 -> 100;
102 -> 39;
103 -> 96;
103 -> 55;
103 -> 90;
103 -> 75;
103 -> 21;
103 -> 39;
104 -> 39;
105 -> 104;
106 -> 103;
106 -> 105;
106 -> 39;
107 -> 0;
109 -> 107;
109 -> 108;
110 -> 109;
111 -> 0;
113 -> 111;
113 -> 112;
115 -> 113;
115 -> 114;
116 -> 115;
117 -> 103;
117 -> 104;
118 -> 103;
118 -> 104;
119 -> 103;
119 -> 104;
120 -> 103;
120 -> 104;
121 -> 117;
121 -> 104;
122 -> 120;
122 -> 104;
123 -> 118;
123 -> 104;
124 -> 119;
124 -> 104;
125 -> 104;
126 -> 104;
127 -> 121;
127 -> 126;
128 -> 122;
128 -> 126;
129 -> 123;
129 -> 126;
130 -> 124;
130 -> 126;
131 -> 125;
131 -> 126;
132 -> 125;
132 -> 126;
133 -> 125;
133 -> 126;
134 -> 125;
134 -> 126;
135 -> 126;
136 -> 128;
136 -> 135;
136 -> 126;
137 -> 134;
137 -> 126;
138 -> 130;
138 -> 126;
139 -> 138;
139 -> 106;
139 -> 126;
140 -> 127;
140 -> 126;
141 -> 128;
141 -> 126;
142 -> 139;
142 -> 126;
143 -> 131;
143 -> 126;
144 -> 132;
144 -> 126;
145 -> 133;
145 -> 126;
146 -> 134;
146 -> 126;
147 -> 126;
148 -> 0;
148 -> 126;
149 -> 128;
149 -> 139;
149 -> 126;
150 -> 126;
151 -> 148;
151 -> 150;
152 -> 149;
152 -> 150;
153 -> 149;
153 -> 150;
154 -> 148;
154 -> 150;
155 -> 146;
155 -> 150;
156 -> 147;
156 -> 150;
157 -> 147;
157 -> 150;
158 -> 151;
158 -> 150;
159 -> 152;
159 -> 150;
160 -> 153;
160 -> 150;
161 -> 154;
161 -> 150;
162 -> 155;
162 -> 150;
163 -> 150;
164 -> 163;
164 -> 158;
164 -> 159;
164 -> 160;
164 -> 161;
164 -> 162;
164 -> 0;
164 -> 139;
164 -> 150;
165 -> 163;
165 -> 150;
166 -> 156;
166 -> 163;
166 -> 150;
167 -> 126;
168 -> 140;
168 -> 167;
169 -> 141;
169 -> 167;
170 -> 142;
170 -> 167;
171 -> 143;
171 -> 167;
172 -> 144;
172 -> 167;
173 -> 145;
173 -> 167;
174 -> 146;
174 -> 167;
175 -> 147;
175 -> 167;
176 -> 147;
176 -> 167;
177 -> 147;
177 -> 167;
178 -> 147;
178 -> 167;
179 -> 147;
179 -> 167;
180 -> 147;
180 -> 167;
181 -> 168;
181 -> 167;
182 -> 169;
182 -> 167;
183 -> 170;
183 -> 167;
184 -> 171;
184 -> 167;
185 -> 172;
185 -> 167;
186 -> 173;
186 -> 167;
187 -> 174;
187 -> 167;
188 -> 175;
188 -> 167;
189 -> 176;
189 -> 167;
190 -> 177;
190 -> 167;
191 -> 177;
191 -> 164;
191 -> 167;
192 -> 191;
192 -> 164;
192 -> 165;
192 -> 166;
192 -> 167;
193 -> 178;
193 -> 167;
194 -> 179;
194 -> 167;
195 -> 167;
196 -> 181;
196 -> 195;
197 -> 182;
197 -> 195;
198 -> 183;
198 -> 195;
199 -> 184;
199 -> 195;
200 -> 185;
200 -> 195;
201 -> 186;
201 -> 195;
202 -> 187;
202 -> 195;
203 -> 188;
203 -> 195;
204 -> 189;
204 -> 195;
205 -> 190;
205 -> 195;
206 -> 192;
206 -> 195;
207 -> 193;
207 -> 195;
208 -> 194;
208 -> 195;
209 -> 180;
209 -> 195;
210 -> 196;
210 -> 195;
211 -> 198;
211 -> 195;
212 -> 206;
212 -> 195;
213 -> 202;
213 -> 195;
214 -> 207;
214 -> 195;
215 -> 208;
215 -> 195;
216 -> 195;
217 -> 216;
217 -> 210;
217 -> 211;
217 -> 212;
217 -> 213;
217 -> 214;
217 -> 215;
217 -> 139;
217 -> 192;
217 -> 195;
218 -> 216;
218 -> 195;
219 -> 216;
219 -> 195;
220 -> 216;
220 -> 195;
221 -> 216;
221 -> 195;
222 -> 216;
222 -> 195;
223 -> 216;
223 -> 195;
224 -> 216;
224 -> 195;
225 -> 216;
225 -> 195;
226 -> 216;
226 -> 195;
227 -> 216;
227 -> 195;
228 -> 216;
228 -> 195;
229 -> 216;
229 -> 195;
230 -> 216;
230 -> 195;
231 -> 216;
231 -> 195;
232 -> 216;
232 -> 195;
233 -> 216;
233 -> 195;
234 -> 216;
234 -> 195;
235 -> 216;
235 -> 195;
236 -> 216;
236 -> 195;
237 -> 216;
237 -> 195;
238 -> 216;
238 -> 195;
239 -> 216;
239 -> 195;
240 -> 216;
240 -> 195;
241 -> 216;
241 -> 195;
242 -> 216;
242 -> 195;
243 -> 216;
243 -> 195;
244 -> 195;
245 -> 244;
245 -> 216;
245 -> 195;
246 -> 216;
246 -> 195;
247 -> 246;
247 -> 217;
247 -> 218;
247 -> 219;
247 -> 220;
247 -> 221;
247 -> 222;
247 -> 223;
247 -> 224;
247 -> 225;
247 -> 226;
247 -> 227;
247 -> 228;
247 -> 229;
247 -> 230;
247 -> 231;
247 -> 232;
247 -> 233;
247 -> 234;
247 -> 235;
247 -> 236;
247 -> 237;
247 -> 238;
247 -> 239;
247 -> 240;
247 -> 241;
247 -> 242;
247 -> 243;
247 -> 245;
247 -> 244;
247 -> 195;
248 -> 247;
248 -> 216;
248 -> 195;
249 -> 197;
249 -> 216;
249 -> 195;
250 -> 216;
250 -> 195;
251 -> 195;
252 -> 195;
253 -> 250;
253 -> 252;
254 -> 251;
254 -> 252;
255 -> 254;
255 -> 252;
256 -> 254;
256 -> 252;
257 -> 254;
257 -> 252;
258 -> 253;
258 -> 254;
258 -> 252;
259 -> 251;
259 -> 216;
259 -> 195;
260 -> 216;
260 -> 247;
260 -> 195;
261 -> 260;
261 -> 247;
261 -> 248;
261 -> 249;
261 -> 259;
261 -> 258;
261 -> 256;
261 -> 257;
261 -> 195;
262 -> 261;
262 -> 216;
262 -> 195;
263 -> 216;
263 -> 261;
263 -> 195;
264 -> 263;
264 -> 261;
264 -> 262;
264 -> 195;
265 -> 264;
265 -> 216;
265 -> 195;
266 -> 216;
266 -> 264;
266 -> 195;
267 -> 266;
267 -> 264;
267 -> 265;
267 -> 195;
268 -> 267;
268 -> 216;
268 -> 195;
269 -> 216;
269 -> 267;
269 -> 195;
270 -> 269;
270 -> 267;
270 -> 268;
270 -> 195;
271 -> 270;
271 -> 216;
271 -> 195;
272 -> 216;
272 -> 195;
273 -> 272;
273 -> 270;
273 -> 271;
273 -> 195;
274 -> 273;
274 -> 216;
274 -> 195;
275 -> 205;
275 -> 273;
275 -> 195;
276 -> 195;
277 -> 275;
277 -> 276;
278 -> 276;
279 -> 277;
279 -> 276;
280 -> 279;
280 -> 273;
280 -> 274;
280 -> 276;
281 -> 0;
281 -> 276;
282 -> 281;
282 -> 278;
282 -> 276;
283 -> 282;
283 -> 195;
284 -> 283;
284 -> 216;
284 -> 195;
285 -> 202;
285 -> 195;
286 -> 285;
287 -> 199;
287 -> 286;
287 -> 285;
288 -> 200;
288 -> 286;
288 -> 285;
289 -> 287;
289 -> 288;
289 -> 285;
290 -> 201;
290 -> 286;
290 -> 285;
291 -> 289;
291 -> 290;
291 -> 285;
292 -> 204;
292 -> 195;
293 -> 216;
293 -> 273;
293 -> 274;
293 -> 284;
293 -> 292;
294 -> 292;
295 -> 216;
295 -> 294;
296 -> 295;
296 -> 293;
296 -> 294;
297 -> 203;
297 -> 292;
298 -> 293;
298 -> 296;
298 -> 297;
298 -> 292;
299 -> 298;
299 -> 216;
299 -> 292;
300 -> 205;
300 -> 216;
300 -> 195;
301 -> 216;
301 -> 298;
301 -> 195;
302 -> 195;
303 -> 216;
303 -> 298;
303 -> 302;
303 -> 195;
304 -> 126;
305 -> 129;
305 -> 304;
305 -> 126;
306 -> 129;
306 -> 305;
307 -> 305;
308 -> 306;
308 -> 307;
309 -> 147;
309 -> 307;
310 -> 307;
311 -> 308;
311 -> 310;
311 -> 307;
312 -> 308;
312 -> 307;
313 -> 312;
313 -> 298;
313 -> 299;
313 -> 300;
313 -> 307;
314 -> 307;
315 -> 309;
315 -> 313;
315 -> 307;
316 -> 314;
316 -> 307;
317 -> 315;
317 -> 313;
317 -> 307;
318 -> 316;
318 -> 317;
318 -> 314;
318 -> 313;
318 -> 307;
319 -> 307;
320 -> 307;
321 -> 308;
321 -> 307;
322 -> 321;
322 -> 318;
322 -> 307;
323 -> 322;
324 -> 322;
325 -> 322;
326 -> 309;
326 -> 325;
326 -> 322;
327 -> 322;
328 -> 314;
328 -> 327;
328 -> 325;
328 -> 322;
329 -> 319;
329 -> 322;
329 -> 328;
330 -> 320;
330 -> 322;
331 -> 314;
331 -> 328;
331 -> 307;
332 -> 309;
332 -> 331;
332 -> 307;
333 -> 308;
333 -> 307;
334 -> 307;
335 -> 333;
335 -> 334;
336 -> 315;
336 -> 334;
337 -> 336;
337 -> 331;
337 -> 334;
338 -> 336;
338 -> 331;
338 -> 334;
339 -> 336;
339 -> 331;
339 -> 334;
340 -> 336;
340 -> 331;
340 -> 334;
341 -> 336;
341 -> 331;
341 -> 334;
342 -> 335;
342 -> 334;
343 -> 336;
343 -> 331;
343 -> 342;
343 -> 334;
344 -> 334;
345 -> 341;
345 -> 344;
345 -> 334;
346 -> 343;
346 -> 345;
347 -> 345;
348 -> 346;
348 -> 347;
349 -> 336;
349 -> 347;
350 -> 348;
350 -> 347;
351 -> 349;
351 -> 343;
351 -> 347;
352 -> 347;
353 -> 347;
354 -> 350;
354 -> 353;
355 -> 351;
355 -> 353;
356 -> 351;
356 -> 353;
357 -> 351;
357 -> 353;
358 -> 351;
358 -> 353;
359 -> 352;
359 -> 353;
360 -> 352;
360 -> 353;
361 -> 353;
361 -> 354;
361 -> 355;
361 -> 356;
361 -> 357;
361 -> 358;
361 -> 343;
362 -> 352;
362 -> 345;
363 -> 362;
363 -> 307;
364 -> 309;
364 -> 361;
364 -> 307;
365 -> 329;
365 -> 307;
366 -> 363;
366 -> 307;
367 -> 307;
368 -> 364;
368 -> 367;
369 -> 365;
369 -> 367;
370 -> 366;
370 -> 367;
371 -> 309;
371 -> 367;
372 -> 371;
372 -> 361;
372 -> 367;
373 -> 367;
374 -> 371;
374 -> 373;
375 -> 374;
375 -> 361;
375 -> 373;
376 -> 375;
376 -> 373;
377 -> 376;
377 -> 367;
378 -> 371;
378 -> 361;
378 -> 353;
378 -> 359;
378 -> 367;
379 -> 367;
380 -> 378;
380 -> 379;
381 -> 380;
381 -> 378;
381 -> 379;
382 -> 367;
383 -> 381;
383 -> 382;
384 -> 368;
384 -> 367;
385 -> 369;
385 -> 367;
386 -> 370;
386 -> 367;
387 -> 367;
388 -> 367;
389 -> 372;
389 -> 388;
390 -> 372;
390 -> 388;
391 -> 372;
391 -> 388;
392 -> 377;
392 -> 388;
393 -> 381;
393 -> 388;
394 -> 383;
394 -> 388;
395 -> 383;
395 -> 388;
396 -> 384;
396 -> 388;
397 -> 385;
397 -> 388;
398 -> 386;
398 -> 388;
399 -> 383;
399 -> 388;
400 -> 387;
400 -> 388;
401 -> 387;
401 -> 388;
402 -> 392;
402 -> 388;
403 -> 393;
403 -> 388;
404 -> 394;
404 -> 388;
405 -> 398;
405 -> 383;
405 -> 388;
406 -> 400;
406 -> 388;
407 -> 388;
408 -> 402;
408 -> 407;
409 -> 403;
409 -> 407;
410 -> 404;
410 -> 407;
411 -> 406;
411 -> 407;
412 -> 401;
412 -> 407;
413 -> 411;
413 -> 407;
414 -> 407;
415 -> 414;
415 -> 407;
416 -> 414;
416 -> 407;
417 -> 414;
417 -> 407;
418 -> 414;
418 -> 407;
419 -> 414;
419 -> 407;
420 -> 414;
420 -> 407;
421 -> 414;
421 -> 407;
422 -> 414;
422 -> 407;
423 -> 414;
423 -> 407;
424 -> 414;
424 -> 407;
425 -> 414;
425 -> 407;
426 -> 414;
426 -> 407;
427 -> 414;
427 -> 407;
428 -> 414;
428 -> 407;
429 -> 414;
429 -> 407;
430 -> 414;
430 -> 407;
431 -> 414;
431 -> 407;
432 -> 414;
432 -> 407;
433 -> 414;
433 -> 407;
434 -> 414;
434 -> 407;
435 -> 414;
435 -> 407;
436 -> 414;
436 -> 407;
437 -> 414;
437 -> 407;
438 -> 414;
438 -> 407;
439 -> 414;
439 -> 407;
440 -> 414;
440 -> 407;
441 -> 407;
442 -> 441;
442 -> 414;
442 -> 407;
443 -> 414;
443 -> 407;
444 -> 414;
444 -> 407;
445 -> 407;
446 -> 407;
447 -> 444;
447 -> 446;
448 -> 445;
448 -> 446;
449 -> 448;
449 -> 446;
450 -> 448;
450 -> 446;
451 -> 448;
451 -> 446;
452 -> 447;
452 -> 448;
452 -> 446;
453 -> 445;
453 -> 414;
453 -> 407;
454 -> 414;
454 -> 407;
455 -> 407;
456 -> 405;
456 -> 455;
457 -> 455;
458 -> 456;
458 -> 455;
459 -> 458;
459 -> 405;
460 -> 458;
461 -> 459;
461 -> 460;
462 -> 395;
462 -> 407;
463 -> 462;
464 -> 408;
464 -> 463;
464 -> 462;
465 -> 409;
465 -> 463;
465 -> 462;
466 -> 464;
466 -> 465;
466 -> 462;
467 -> 410;
467 -> 463;
467 -> 462;
468 -> 466;
468 -> 467;
468 -> 462;
469 -> 396;
469 -> 397;
470 -> 414;
470 -> 397;
471 -> 396;
471 -> 470;
471 -> 405;
471 -> 461;
471 -> 397;
472 -> 396;
472 -> 414;
472 -> 397;
473 -> 414;
473 -> 471;
473 -> 407;
474 -> 407;
475 -> 414;
475 -> 471;
475 -> 474;
475 -> 407;
476 -> 387;
476 -> 307;
477 -> 476;
477 -> 305;
478 -> 477;
478 -> 471;
478 -> 126;
479 -> 477;
479 -> 126;
480 -> 103;
480 -> 479;
480 -> 471;
480 -> 472;
480 -> 398;
480 -> 39;
481 -> 480;
481 -> 39;
482 -> 39;
483 -> 481;
483 -> 482;
484 -> 482;
485 -> 483;
485 -> 484;
486 -> 484;
487 -> 485;
487 -> 480;
487 -> 486;
488 -> 486;
489 -> 487;
489 -> 480;
489 -> 488;
489 -> 486;
490 -> 487;
490 -> 480;
490 -> 489;
491 -> 489;
492 -> 490;
492 -> 491;
493 -> 490;
493 -> 491;
494 -> 490;
494 -> 491;
495 -> 490;
495 -> 491;
496 -> 490;
496 -> 491;
497 -> 491;
498 -> 491;
499 -> 491;
500 -> 491;
501 -> 491;
502 -> 0;
502 -> 491;
503 -> 492;
503 -> 491;
504 -> 497;
504 -> 503;
505 -> 503;
506 -> 493;
506 -> 503;
507 -> 494;
507 -> 503;
508 -> 495;
508 -> 503;
509 -> 496;
509 -> 503;
510 -> 498;
510 -> 503;
511 -> 499;
511 -> 503;
512 -> 500;
512 -> 503;
513 -> 501;
513 -> 503;
514 -> 502;
514 -> 503;
515 -> 503;
516 -> 504;
516 -> 515;
517 -> 505;
517 -> 515;
518 -> 506;
518 -> 515;
519 -> 507;
519 -> 515;
520 -> 508;
520 -> 515;
521 -> 509;
521 -> 515;
522 -> 510;
522 -> 515;
523 -> 511;
523 -> 515;
524 -> 512;
524 -> 515;
525 -> 513;
525 -> 515;
526 -> 514;
526 -> 515;
527 -> 517;
527 -> 480;
527 -> 515;
528 -> 527;
528 -> 0;
528 -> 515;
529 -> 517;
529 -> 515;
530 -> 518;
530 -> 515;
531 -> 521;
531 -> 515;
532 -> 525;
532 -> 515;
533 -> 526;
533 -> 515;
534 -> 515;
535 -> 529;
535 -> 534;
536 -> 530;
536 -> 534;
537 -> 531;
537 -> 534;
538 -> 532;
538 -> 534;
539 -> 533;
539 -> 534;
540 -> 535;
540 -> 536;
540 -> 537;
540 -> 534;
541 -> 535;
541 -> 534;
542 -> 540;
542 -> 534;
543 -> 538;
543 -> 541;
543 -> 542;
543 -> 501;
543 -> 540;
543 -> 534;
544 -> 540;
544 -> 534;
545 -> 539;
545 -> 544;
545 -> 0;
545 -> 543;
545 -> 534;
546 -> 515;
547 -> 517;
547 -> 515;
548 -> 516;
548 -> 547;
548 -> 497;
548 -> 545;
548 -> 515;
549 -> 517;
549 -> 515;
550 -> 522;
550 -> 498;
550 -> 515;
551 -> 522;
551 -> 549;
551 -> 550;
551 -> 498;
551 -> 548;
551 -> 515;
552 -> 497;
552 -> 551;
552 -> 491;
553 -> 498;
553 -> 551;
553 -> 491;
554 -> 499;
554 -> 491;
555 -> 500;
555 -> 491;
556 -> 545;
556 -> 491;
557 -> 491;
558 -> 491;
559 -> 552;
559 -> 558;
560 -> 553;
560 -> 558;
561 -> 554;
561 -> 558;
562 -> 555;
562 -> 558;
563 -> 553;
563 -> 558;
564 -> 556;
564 -> 558;
565 -> 557;
565 -> 558;
566 -> 565;
566 -> 558;
567 -> 565;
567 -> 558;
568 -> 565;
568 -> 558;
569 -> 565;
569 -> 558;
570 -> 565;
570 -> 558;
571 -> 559;
571 -> 558;
572 -> 559;
572 -> 552;
572 -> 558;
573 -> 559;
573 -> 558;
574 -> 563;
574 -> 571;
574 -> 558;
575 -> 0;
575 -> 558;
576 -> 559;
576 -> 565;
576 -> 558;
577 -> 560;
577 -> 565;
577 -> 558;
578 -> 561;
578 -> 565;
578 -> 558;
579 -> 562;
579 -> 565;
579 -> 558;
580 -> 563;
580 -> 565;
580 -> 558;
581 -> 564;
581 -> 565;
581 -> 558;
582 -> 557;
582 -> 489;
583 -> 489;
584 -> 490;
584 -> 582;
584 -> 583;
584 -> 577;
584 -> 578;
584 -> 579;
584 -> 580;
584 -> 581;
584 -> 576;
584 -> 574;
584 -> 552;
584 -> 554;
584 -> 555;
584 -> 489;
585 -> 487;
585 -> 584;
585 -> 486;
586 -> 585;
586 -> 484;
587 -> 586;
587 -> 482;
588 -> 587;
588 -> 584;
588 -> 482;
589 -> 482;
590 -> 587;
590 -> 589;
590 -> 584;
590 -> 482;
591 -> 0;
591 -> 482;
592 -> 590;
592 -> 591;
592 -> 482;
593 -> 46;
593 -> 592;
593 -> 39;
594 -> 480;
594 -> 39;
595 -> 14;
595 -> 594;
595 -> 592;
595 -> 1;
596 -> 595;
596 -> 1;
597 -> 1;
598 -> 1;
599 -> 596;
599 -> 598;
600 -> 597;
600 -> 598;
601 -> 597;
601 -> 598;
602 -> 597;
602 -> 598;
603 -> 597;
603 -> 598;
604 -> 597;
604 -> 598;
605 -> 597;
605 -> 598;
606 -> 597;
606 -> 598;
607 -> 597;
607 -> 598;
608 -> 597;
608 -> 598;
609 -> 598;
610 -> 598;
611 -> 603;
611 -> 610;
611 -> 598;
612 -> 599;
612 -> 595;
612 -> 598;
613 -> 598;
614 -> 612;
614 -> 613;
615 -> 614;
615 -> 612;
615 -> 613;
616 -> 611;
616 -> 615;
616 -> 598;
617 -> 600;
617 -> 598;
618 -> 616;
618 -> 617;
618 -> 598;
619 -> 618;
620 -> 0;
620 -> 619;
621 -> 620;
621 -> 618;
622 -> 618;
623 -> 622;
623 -> 618;
624 -> 623;
625 -> 609;
625 -> 598;
626 -> 608;
626 -> 598;
627 -> 624;
627 -> 598;
628 -> 598;
629 -> 607;
629 -> 598;
630 -> 600;
630 -> 598;
631 -> 604;
631 -> 598;
632 -> 605;
632 -> 598;
633 -> 606;
633 -> 598;
634 -> 601;
634 -> 598;
635 -> 625;
635 -> 626;
635 -> 627;
635 -> 628;
635 -> 629;
635 -> 630;
635 -> 631;
635 -> 632;
635 -> 633;
635 -> 634;
635 -> 599;
635 -> 609;
635 -> 615;
635 -> 598;
636 -> 635;
636 -> 628;
637 -> 636;
637 -> 635;
637 -> 628;
638 -> 635;
638 -> 628;
639 -> 635;
639 -> 628;
640 -> 635;
640 -> 628;
641 -> 635;
641 -> 628;
642 -> 635;
642 -> 628;
643 -> 635;
643 -> 628;
644 -> 635;
644 -> 628;
645 -> 635;
645 -> 628;
646 -> 635;
646 -> 628;
647 -> 646;
647 -> 637;
647 -> 628;
648 -> 638;
648 -> 628;
649 -> 644;
649 -> 628;
650 -> 628;
651 -> 648;
651 -> 650;
652 -> 649;
652 -> 650;
653 -> 646;
653 -> 650;
654 -> 651;
654 -> 650;
655 -> 650;
656 -> 654;
656 -> 655;
657 -> 653;
657 -> 655;
658 -> 655;
659 -> 657;
659 -> 658;
660 -> 658;
661 -> 659;
661 -> 660;
662 -> 660;
663 -> 661;
663 -> 662;
664 -> 663;
664 -> 637;
664 -> 662;
665 -> 663;
665 -> 664;
666 -> 664;
667 -> 665;
667 -> 666;
668 -> 666;
669 -> 667;
669 -> 668;
670 -> 668;
671 -> 669;
671 -> 665;
671 -> 670;
672 -> 671;
672 -> 668;
673 -> 672;
673 -> 666;
674 -> 665;
674 -> 666;
675 -> 666;
676 -> 663;
676 -> 673;
676 -> 664;
677 -> 663;
677 -> 673;
677 -> 662;
678 -> 677;
678 -> 660;
679 -> 661;
679 -> 673;
679 -> 660;
680 -> 661;
680 -> 679;
680 -> 660;
681 -> 680;
681 -> 658;
682 -> 681;
682 -> 655;
683 -> 682;
683 -> 655;
684 -> 656;
684 -> 679;
684 -> 655;
685 -> 650;
686 -> 684;
686 -> 685;
686 -> 650;
687 -> 650;
688 -> 687;
688 -> 650;
689 -> 0;
689 -> 650;
690 -> 652;
690 -> 650;
691 -> 687;
691 -> 650;
692 -> 0;
692 -> 650;
693 -> 690;
693 -> 691;
693 -> 692;
693 -> 653;
693 -> 679;
693 -> 0;
693 -> 688;
693 -> 650;
694 -> 650;
696 -> 695;
697 -> 693;
697 -> 694;
698 -> 693;
698 -> 694;
699 -> 693;
699 -> 694;
700 -> 693;
700 -> 694;
701 -> 693;
701 -> 694;
702 -> 693;
702 -> 694;
703 -> 693;
703 -> 694;
704 -> 694;
705 -> 697;
705 -> 704;
705 -> 694;
706 -> 697;
706 -> 693;
706 -> 705;
707 -> 697;
707 -> 706;
707 -> 0;
708 -> 694;
709 -> 694;
710 -> 696;
710 -> 694;
711 -> 697;
711 -> 706;
711 -> 694;
712 -> 694;
713 -> 710;
713 -> 711;
713 -> 712;
713 -> 695;
713 -> 694;
714 -> 697;
714 -> 706;
714 -> 713;
715 -> 698;
715 -> 713;
716 -> 699;
716 -> 713;
717 -> 700;
717 -> 713;
718 -> 701;
718 -> 713;
719 -> 702;
719 -> 713;
720 -> 703;
720 -> 713;
721 -> 709;
721 -> 713;
722 -> 713;
723 -> 714;
723 -> 722;
724 -> 714;
724 -> 722;
725 -> 714;
725 -> 722;
726 -> 714;
726 -> 722;
727 -> 714;
727 -> 722;
728 -> 714;
728 -> 722;
729 -> 715;
729 -> 722;
730 -> 716;
730 -> 722;
731 -> 717;
731 -> 722;
732 -> 718;
732 -> 722;
733 -> 719;
733 -> 722;
734 -> 720;
734 -> 722;
735 -> 721;
735 -> 722;
736 -> 722;
737 -> 727;
737 -> 706;
737 -> 722;
738 -> 727;
738 -> 706;
738 -> 722;
739 -> 727;
739 -> 706;
739 -> 722;
740 -> 725;
740 -> 722;
741 -> 740;
741 -> 722;
742 -> 726;
742 -> 729;
742 -> 722;
743 -> 722;
744 -> 722;
745 -> 722;
746 -> 725;
746 -> 722;
747 -> 743;
747 -> 722;
748 -> 732;
748 -> 746;
748 -> 747;
748 -> 706;
748 -> 722;
749 -> 722;
750 -> 733;
750 -> 749;
750 -> 722;
751 -> 744;
751 -> 722;
752 -> 724;
752 -> 751;
753 -> 0;
753 -> 752;
754 -> 753;
754 -> 0;
754 -> 722;
755 -> 738;
755 -> 722;
756 -> 0;
756 -> 722;
757 -> 755;
757 -> 0;
757 -> 722;
758 -> 755;
758 -> 0;
758 -> 722;
759 -> 753;
759 -> 0;
759 -> 758;
760 -> 753;
760 -> 722;
761 -> 731;
761 -> 760;
762 -> 753;
762 -> 722;
763 -> 736;
763 -> 694;
764 -> 762;
764 -> 694;
765 -> 697;
765 -> 764;
765 -> 748;
765 -> 694;
766 -> 0;
766 -> 650;
767 -> 766;
767 -> 628;
768 -> 628;
769 -> 767;
769 -> 768;
769 -> 628;
770 -> 638;
770 -> 628;
771 -> 767;
771 -> 628;
772 -> 628;
773 -> 770;
773 -> 771;
773 -> 772;
773 -> 646;
773 -> 765;
773 -> 628;
774 -> 773;
774 -> 772;
775 -> 772;
776 -> 774;
776 -> 775;
777 -> 775;
778 -> 776;
778 -> 773;
778 -> 777;
779 -> 778;
779 -> 775;
780 -> 776;
780 -> 775;
781 -> 780;
781 -> 772;
782 -> 772;
783 -> 781;
783 -> 782;
784 -> 781;
784 -> 782;
785 -> 782;
786 -> 784;
786 -> 785;
787 -> 785;
788 -> 787;
789 -> 786;
789 -> 782;
790 -> 784;
790 -> 782;
791 -> 782;
792 -> 791;
793 -> 792;
794 -> 773;
794 -> 772;
795 -> 772;
796 -> 773;
796 -> 795;
796 -> 789;
796 -> 628;
797 -> 628;
798 -> 642;
798 -> 797;
798 -> 628;
799 -> 798;
800 -> 628;
801 -> 646;
801 -> 796;
801 -> 628;
802 -> 801;
803 -> 646;
803 -> 802;
804 -> 802;
805 -> 803;
805 -> 804;
806 -> 805;
806 -> 796;
806 -> 804;
807 -> 806;
807 -> 804;
808 -> 805;
808 -> 804;
809 -> 808;
809 -> 802;
810 -> 802;
811 -> 809;
811 -> 801;
812 -> 638;
812 -> 801;
813 -> 796;
813 -> 801;
814 -> 799;
814 -> 801;
815 -> 801;
816 -> 801;
817 -> 811;
817 -> 816;
818 -> 812;
818 -> 816;
819 -> 813;
819 -> 816;
820 -> 814;
820 -> 816;
821 -> 815;
821 -> 816;
822 -> 817;
822 -> 816;
823 -> 818;
823 -> 816;
824 -> 0;
824 -> 816;
825 -> 819;
825 -> 816;
826 -> 820;
826 -> 816;
827 -> 816;
828 -> 822;
828 -> 827;
829 -> 823;
829 -> 827;
830 -> 824;
830 -> 827;
831 -> 825;
831 -> 827;
832 -> 826;
832 -> 827;
833 -> 821;
833 -> 827;
834 -> 828;
834 -> 809;
834 -> 827;
835 -> 828;
835 -> 827;
836 -> 831;
836 -> 827;
837 -> 832;
837 -> 827;
838 -> 830;
838 -> 827;
839 -> 829;
839 -> 827;
840 -> 827;
841 -> 840;
842 -> 827;
843 -> 842;
843 -> 834;
843 -> 835;
843 -> 836;
843 -> 837;
843 -> 838;
843 -> 839;
843 -> 840;
843 -> 809;
843 -> 799;
843 -> 841;
843 -> 827;
844 -> 843;
844 -> 842;
845 -> 842;
846 -> 843;
846 -> 845;
846 -> 827;
847 -> 827;
848 -> 847;
848 -> 842;
848 -> 827;
849 -> 0;
849 -> 827;
850 -> 849;
850 -> 0;
850 -> 827;
851 -> 850;
851 -> 842;
851 -> 827;
852 -> 827;
853 -> 852;
853 -> 842;
853 -> 827;
854 -> 842;
854 -> 827;
855 -> 842;
855 -> 827;
856 -> 842;
856 -> 827;
857 -> 842;
857 -> 827;
858 -> 842;
858 -> 827;
859 -> 828;
859 -> 846;
859 -> 827;
860 -> 859;
860 -> 0;
860 -> 827;
861 -> 860;
861 -> 827;
862 -> 861;
862 -> 842;
862 -> 827;
863 -> 842;
863 -> 846;
863 -> 848;
863 -> 827;
864 -> 828;
864 -> 827;
865 -> 842;
865 -> 827;
866 -> 863;
866 -> 864;
866 -> 865;
866 -> 846;
866 -> 848;
866 -> 851;
866 -> 853;
866 -> 854;
866 -> 855;
866 -> 862;
866 -> 856;
866 -> 857;
866 -> 858;
866 -> 847;
866 -> 850;
866 -> 852;
866 -> 827;
867 -> 828;
867 -> 866;
867 -> 827;
868 -> 628;
869 -> 639;
869 -> 868;
869 -> 628;
870 -> 640;
870 -> 815;
870 -> 628;
871 -> 628;
872 -> 641;
872 -> 871;
872 -> 628;
873 -> 628;
874 -> 643;
874 -> 873;
874 -> 628;
875 -> 815;
875 -> 628;
876 -> 635;
876 -> 875;
876 -> 866;
876 -> 870;
876 -> 598;
877 -> 635;
877 -> 628;
878 -> 635;
878 -> 628;
879 -> 635;
879 -> 628;
880 -> 635;
880 -> 628;
881 -> 635;
881 -> 628;
882 -> 635;
882 -> 628;
883 -> 635;
883 -> 628;
884 -> 635;
884 -> 628;
885 -> 628;
886 -> 879;
886 -> 628;
887 -> 881;
887 -> 628;
888 -> 0;
888 -> 628;
889 -> 628;
890 -> 883;
890 -> 628;
891 -> 628;
892 -> 888;
892 -> 891;
893 -> 889;
893 -> 891;
894 -> 890;
894 -> 891;
895 -> 884;
895 -> 891;
896 -> 891;
897 -> 892;
897 -> 891;
898 -> 893;
898 -> 891;
899 -> 896;
899 -> 891;
900 -> 894;
900 -> 891;
901 -> 891;
902 -> 897;
902 -> 901;
903 -> 898;
903 -> 901;
904 -> 899;
904 -> 901;
905 -> 900;
905 -> 901;
906 -> 895;
906 -> 901;
907 -> 901;
908 -> 902;
908 -> 0;
908 -> 901;
909 -> 908;
909 -> 903;
909 -> 901;
910 -> 909;
911 -> 906;
911 -> 910;
912 -> 910;
913 -> 911;
913 -> 876;
913 -> 912;
914 -> 912;
915 -> 913;
915 -> 909;
916 -> 909;
917 -> 906;
917 -> 916;
918 -> 917;
918 -> 876;
918 -> 916;
919 -> 918;
919 -> 909;
920 -> 919;
921 -> 915;
921 -> 876;
921 -> 919;
922 -> 905;
922 -> 919;
923 -> 920;
923 -> 921;
923 -> 922;
923 -> 876;
923 -> 919;
924 -> 923;
924 -> 920;
925 -> 923;
925 -> 920;
926 -> 923;
926 -> 920;
927 -> 923;
927 -> 920;
928 -> 920;
929 -> 928;
929 -> 920;
930 -> 920;
931 -> 925;
931 -> 930;
932 -> 931;
932 -> 920;
933 -> 926;
933 -> 920;
934 -> 928;
934 -> 920;
935 -> 932;
935 -> 923;
935 -> 933;
935 -> 934;
935 -> 929;
935 -> 920;
936 -> 909;
937 -> 915;
937 -> 909;
938 -> 905;
938 -> 876;
938 -> 935;
938 -> 937;
939 -> 937;
939 -> 876;
939 -> 938;
940 -> 902;
940 -> 0;
940 -> 901;
941 -> 907;
941 -> 940;
942 -> 941;
942 -> 906;
942 -> 907;
942 -> 938;
942 -> 940;
943 -> 940;
944 -> 940;
945 -> 906;
945 -> 944;
946 -> 945;
946 -> 942;
946 -> 944;
947 -> 946;
947 -> 940;
948 -> 940;
949 -> 906;
949 -> 948;
950 -> 949;
950 -> 947;
950 -> 948;
951 -> 950;
951 -> 940;
952 -> 905;
952 -> 947;
952 -> 940;
953 -> 940;
954 -> 906;
954 -> 953;
955 -> 954;
955 -> 952;
955 -> 953;
956 -> 954;
956 -> 952;
956 -> 953;
957 -> 956;
957 -> 940;
958 -> 905;
958 -> 957;
958 -> 940;
959 -> 905;
959 -> 940;
960 -> 940;
961 -> 940;
962 -> 960;
962 -> 961;
963 -> 960;
963 -> 961;
964 -> 960;
964 -> 961;
965 -> 959;
965 -> 961;
966 -> 906;
966 -> 961;
967 -> 961;
968 -> 966;
968 -> 967;
969 -> 968;
969 -> 958;
969 -> 967;
970 -> 967;
971 -> 969;
971 -> 970;
972 -> 971;
972 -> 970;
973 -> 972;
973 -> 969;
973 -> 970;
974 -> 970;
975 -> 973;
975 -> 974;
976 -> 975;
976 -> 973;
976 -> 974;
977 -> 976;
977 -> 974;
978 -> 977;
978 -> 961;
979 -> 965;
979 -> 961;
980 -> 978;
980 -> 979;
980 -> 977;
980 -> 958;
980 -> 961;
981 -> 961;
982 -> 961;
983 -> 962;
983 -> 982;
983 -> 961;
984 -> 961;
985 -> 966;
985 -> 984;
986 -> 984;
987 -> 985;
987 -> 986;
988 -> 986;
989 -> 987;
989 -> 988;
990 -> 989;
990 -> 980;
990 -> 988;
991 -> 989;
991 -> 980;
991 -> 988;
992 -> 991;
992 -> 986;
993 -> 987;
993 -> 980;
993 -> 986;
994 -> 993;
994 -> 961;
995 -> 981;
995 -> 961;
996 -> 965;
996 -> 961;
997 -> 995;
997 -> 996;
997 -> 994;
997 -> 958;
997 -> 993;
997 -> 961;
998 -> 961;
999 -> 998;
1000 -> 999;
1001 -> 1000;
1002 -> 998;
1003 -> 1002;
1004 -> 1003;
1005 -> 997;
1005 -> 998;
1006 -> 1005;
1006 -> 997;
1006 -> 998;
1007 -> 998;
1008 -> 1005;
1008 -> 997;
1008 -> 1007;
1008 -> 998;
1009 -> 1008;
1010 -> 1005;
1010 -> 997;
1010 -> 1008;
1011 -> 1009;
1011 -> 1008;
1012 -> 1008;
1013 -> 1005;
1013 -> 1011;
1013 -> 998;
1014 -> 997;
1014 -> 998;
1015 -> 997;
1015 -> 998;
1016 -> 1015;
1016 -> 1013;
1016 -> 998;
1017 -> 1005;
1017 -> 1013;
1017 -> 998;
1018 -> 962;
1018 -> 961;
1019 -> 1018;
1020 -> 1019;
1020 -> 966;
1020 -> 1018;
1021 -> 1018;
1022 -> 1021;
1022 -> 966;
1022 -> 1018;
1023 -> 966;
1023 -> 1013;
1023 -> 1020;
1023 -> 1022;
1023 -> 961;
1024 -> 961;
1025 -> 964;
1025 -> 1024;
1025 -> 961;
1026 -> 962;
1026 -> 961;
1027 -> 963;
1027 -> 961;
1028 -> 965;
1028 -> 961;
1029 -> 961;
1030 -> 1026;
1030 -> 1029;
1031 -> 1027;
1031 -> 1029;
1032 -> 1028;
1032 -> 1029;
1033 -> 966;
1033 -> 1029;
1034 -> 1029;
1035 -> 1030;
1035 -> 1034;
1035 -> 1029;
1036 -> 1033;
1036 -> 1023;
1036 -> 1029;
1037 -> 1036;
1038 -> 1033;
1038 -> 1036;
1039 -> 1037;
1039 -> 1036;
1040 -> 1032;
1040 -> 1036;
1041 -> 1036;
1042 -> 1036;
1043 -> 1038;
1043 -> 1042;
1044 -> 1039;
1044 -> 1042;
1045 -> 1040;
1045 -> 1042;
1046 -> 1041;
1046 -> 1042;
1047 -> 1041;
1047 -> 1042;
1048 -> 1042;
1049 -> 1043;
1049 -> 1042;
1050 -> 1046;
1050 -> 1042;
1051 -> 1047;
1051 -> 1042;
1052 -> 1048;
1052 -> 1042;
1053 -> 1045;
1053 -> 1042;
1054 -> 1042;
1055 -> 1042;
1056 -> 1049;
1056 -> 1055;
1057 -> 1050;
1057 -> 1055;
1058 -> 1051;
1058 -> 1055;
1059 -> 1052;
1059 -> 1055;
1060 -> 1053;
1060 -> 1055;
1061 -> 1054;
1061 -> 1055;
1062 -> 1055;
1063 -> 1062;
1063 -> 1055;
1064 -> 1062;
1064 -> 1055;
1065 -> 1062;
1065 -> 1055;
1066 -> 1062;
1066 -> 1055;
1067 -> 1062;
1067 -> 1055;
1068 -> 1062;
1068 -> 1055;
1069 -> 1056;
1069 -> 1062;
1069 -> 1055;
1070 -> 1057;
1070 -> 1062;
1070 -> 1055;
1071 -> 1058;
1071 -> 1062;
1071 -> 1055;
1072 -> 1059;
1072 -> 1062;
1072 -> 1055;
1073 -> 1060;
1073 -> 1062;
1073 -> 1055;
1074 -> 0;
1074 -> 1055;
1075 -> 1074;
1075 -> 1062;
1075 -> 1055;
1076 -> 1055;
1077 -> 1062;
1077 -> 1076;
1078 -> 1076;
1079 -> 1077;
1079 -> 1062;
1079 -> 1064;
1079 -> 1070;
1079 -> 1078;
1079 -> 1076;
1080 -> 1076;
1081 -> 1077;
1081 -> 1062;
1081 -> 1063;
1081 -> 1069;
1081 -> 1080;
1082 -> 1081;
1082 -> 1062;
1082 -> 1074;
1082 -> 1080;
1083 -> 1079;
1083 -> 1082;
1083 -> 1062;
1083 -> 1074;
1083 -> 1076;
1084 -> 1083;
1084 -> 1055;
1085 -> 1084;
1086 -> 1085;
1086 -> 1062;
1086 -> 1084;
1087 -> 1042;
1088 -> 1043;
1088 -> 1087;
1089 -> 1088;
1089 -> 1074;
1089 -> 1087;
1090 -> 1088;
1090 -> 1074;
1090 -> 1087;
1091 -> 1090;
1091 -> 1087;
1092 -> 1088;
1092 -> 1074;
1092 -> 1087;
1093 -> 1092;
1093 -> 1042;
1094 -> 1093;
1094 -> 1054;
1094 -> 1092;
1094 -> 1062;
1094 -> 1063;
1094 -> 1069;
1094 -> 1064;
1094 -> 1070;
1094 -> 1065;
1094 -> 1071;
1094 -> 1066;
1094 -> 1072;
1094 -> 1067;
1094 -> 1075;
1094 -> 1068;
1094 -> 1086;
1094 -> 1073;
1094 -> 1041;
1094 -> 1048;
1094 -> 958;
1094 -> 1085;
1094 -> 1042;
1095 -> 1042;
1096 -> 1094;
1096 -> 1095;
1097 -> 1094;
1097 -> 1095;
1098 -> 1097;
1098 -> 1094;
1098 -> 1095;
1099 -> 1096;
1099 -> 1095;
1100 -> 1096;
1100 -> 1095;
1101 -> 1095;
1102 -> 1100;
1102 -> 1101;
1103 -> 1097;
1103 -> 1101;
1104 -> 1102;
1104 -> 1098;
1104 -> 0;
1104 -> 1101;
1105 -> 1101;
1106 -> 1102;
1106 -> 1098;
1106 -> 0;
1106 -> 1101;
1107 -> 1102;
1107 -> 1098;
1107 -> 0;
1107 -> 1106;
1108 -> 1102;
1108 -> 1098;
1108 -> 0;
1108 -> 1101;
1109 -> 1102;
1109 -> 1098;
1109 -> 0;
1109 -> 1101;
1110 -> 1102;
1110 -> 1098;
1110 -> 0;
1110 -> 1101;
1111 -> 1102;
1111 -> 1098;
1111 -> 0;
1111 -> 1101;
1112 -> 1102;
1112 -> 1098;
1112 -> 0;
1112 -> 1101;
1113 -> 1101;
1114 -> 1102;
1114 -> 1101;
1115 -> 1113;
1115 -> 1101;
1116 -> 1103;
1116 -> 1098;
1116 -> 1114;
1116 -> 1115;
1116 -> 1101;
1117 -> 1101;
1118 -> 1102;
1118 -> 1101;
1119 -> 1117;
1119 -> 1101;
1120 -> 1101;
1121 -> 1118;
1121 -> 1120;
1122 -> 1119;
1122 -> 1120;
1123 -> 1103;
1123 -> 1120;
1124 -> 1120;
1125 -> 1121;
1125 -> 1116;
1125 -> 1120;
1126 -> 1120;
1127 -> 1126;
1127 -> 1101;
1128 -> 1127;
1128 -> 1101;
1129 -> 1102;
1129 -> 1125;
1129 -> 0;
1129 -> 1128;
1130 -> 0;
1130 -> 1129;
1131 -> 1102;
1131 -> 1125;
1131 -> 0;
1131 -> 1101;
1132 -> 1131;
1132 -> 1101;
1133 -> 1130;
1133 -> 1132;
1134 -> 1133;
1134 -> 0;
1134 -> 1095;
1135 -> 1133;
1135 -> 1095;
1136 -> 1095;
1137 -> 1135;
1137 -> 1136;
1138 -> 1137;
1138 -> 1136;
1139 -> 1138;
1140 -> 1095;
1141 -> 1140;
1141 -> 1096;
1141 -> 1133;
1141 -> 1095;
1142 -> 1096;
1142 -> 1133;
1142 -> 1140;
1142 -> 1141;
1143 -> 1141;
1144 -> 1142;
1144 -> 1141;
1145 -> 1143;
1145 -> 1141;
1146 -> 1141;
1147 -> 1144;
1147 -> 1146;
1148 -> 1145;
1148 -> 1146;
1149 -> 1097;
1149 -> 1146;
1150 -> 1146;
1151 -> 1146;
1151 -> 1141;
1152 -> 1141;
1153 -> 1152;
1153 -> 1141;
1154 -> 1150;
1154 -> 1153;
1155 -> 1141;
1156 -> 1154;
1156 -> 1155;
1156 -> 1141;
1157 -> 1156;
1157 -> 1151;
1157 -> 1141;
1158 -> 1151;
1158 -> 1141;
1159 -> 1139;
1159 -> 1158;
1160 -> 1139;
1160 -> 1095;
1161 -> 1095;
1162 -> 1096;
1162 -> 1147;
1162 -> 1161;
1162 -> 1095;
1163 -> 1162;
1163 -> 1095;
1164 -> 1095;
1165 -> 1163;
1165 -> 1164;
1166 -> 1097;
1166 -> 1164;
1167 -> 1165;
1167 -> 1162;
1167 -> 0;
1167 -> 1164;
1168 -> 1164;
1169 -> 1165;
1169 -> 1162;
1169 -> 0;
1169 -> 1164;
1170 -> 1165;
1170 -> 1162;
1170 -> 0;
1170 -> 1169;
1171 -> 1165;
1171 -> 1162;
1171 -> 0;
1171 -> 1164;
1172 -> 1165;
1172 -> 1162;
1172 -> 0;
1172 -> 1164;
1173 -> 1165;
1173 -> 1162;
1173 -> 0;
1173 -> 1164;
1174 -> 1165;
1174 -> 1162;
1174 -> 0;
1174 -> 1164;
1175 -> 1165;
1175 -> 1162;
1175 -> 0;
1175 -> 1164;
1176 -> 1164;
1177 -> 1176;
1177 -> 1164;
1178 -> 1164;
1179 -> 1178;
1179 -> 1164;
1180 -> 1164;
1181 -> 1179;
1181 -> 1180;
1182 -> 1166;
1182 -> 1180;
1183 -> 1180;
1184 -> 1180;
1185 -> 1184;
1185 -> 1164;
1186 -> 1185;
1186 -> 1164;
1187 -> 1165;
1188 -> 1165;
1189 -> 1187;
1189 -> 1188;
1190 -> 1166;
1190 -> 1188;
1191 -> 1189;
1191 -> 1165;
1191 -> 0;
1191 -> 1188;
1192 -> 1189;
1192 -> 1165;
1192 -> 1188;
1193 -> 1188;
1194 -> 1192;
1194 -> 1193;
1194 -> 1188;
1195 -> 1192;
1195 -> 1188;
1196 -> 1188;
1197 -> 1195;
1197 -> 1196;
1198 -> 1190;
1198 -> 1196;
1199 -> 1197;
1199 -> 1165;
1199 -> 0;
1199 -> 1196;
1200 -> 1196;
1201 -> 1197;
1201 -> 1165;
1201 -> 0;
1201 -> 1196;
1202 -> 1197;
1202 -> 1165;
1202 -> 0;
1202 -> 1201;
1203 -> 1197;
1203 -> 1165;
1203 -> 0;
1203 -> 1196;
1204 -> 1197;
1204 -> 1165;
1204 -> 0;
1204 -> 1196;
1205 -> 1197;
1205 -> 1165;
1205 -> 0;
1205 -> 1196;
1206 -> 1197;
1206 -> 1165;
1206 -> 0;
1206 -> 1196;
1207 -> 1197;
1207 -> 1165;
1207 -> 0;
1207 -> 1196;
1208 -> 1198;
1208 -> 1165;
1208 -> 1197;
1208 -> 1196;
1209 -> 1208;
1210 -> 1165;
1211 -> 1209;
1211 -> 1210;
1212 -> 1211;
1212 -> 1210;
1213 -> 1212;
1214 -> 1095;
1215 -> 1213;
1215 -> 1214;
1216 -> 1096;
1216 -> 1208;
1216 -> 1095;
1217 -> 1095;
1218 -> 1216;
1218 -> 1217;
1219 -> 1216;
1219 -> 1217;
1220 -> 1219;
1220 -> 1216;
1220 -> 1217;
1221 -> 1218;
1221 -> 1217;
1222 -> 1217;
1223 -> 1221;
1223 -> 1222;
1224 -> 1219;
1224 -> 1222;
1225 -> 1223;
1225 -> 1220;
1225 -> 0;
1225 -> 1222;
1226 -> 1225;
1227 -> 1218;
1227 -> 1217;
1228 -> 1217;
1229 -> 1227;
1229 -> 1228;
1230 -> 1219;
1230 -> 1228;
1231 -> 1229;
1231 -> 1220;
1231 -> 0;
1231 -> 1228;
1232 -> 1228;
1233 -> 1229;
1233 -> 1220;
1233 -> 0;
1233 -> 1228;
1234 -> 1229;
1234 -> 1220;
1234 -> 1233;
1235 -> 1233;
1236 -> 1234;
1236 -> 1235;
1237 -> 1236;
1237 -> 1220;
1237 -> 0;
1237 -> 1235;
1238 -> 1235;
1239 -> 1236;
1239 -> 1220;
1239 -> 0;
1240 -> 1236;
1240 -> 1220;
1240 -> 0;
1240 -> 1235;
1241 -> 1236;
1241 -> 1220;
1241 -> 0;
1241 -> 1235;
1242 -> 1236;
1242 -> 1220;
1242 -> 0;
1242 -> 1235;
1243 -> 1236;
1243 -> 1220;
1243 -> 0;
1243 -> 1235;
1244 -> 1236;
1244 -> 1220;
1244 -> 0;
1244 -> 1235;
1245 -> 1236;
1246 -> 1217;
1247 -> 1245;
1247 -> 1246;
1248 -> 1247;
1248 -> 1246;
1249 -> 1248;
1250 -> 1217;
1251 -> 1219;
1251 -> 1250;
1252 -> 1250;
1253 -> 1251;
1253 -> 1236;
1253 -> 1252;
1253 -> 1250;
1254 -> 1250;
1255 -> 1251;
1255 -> 1236;
1255 -> 1254;
1256 -> 1253;
1256 -> 1217;
1257 -> 1218;
1257 -> 1256;
1258 -> 1256;
1259 -> 1257;
1259 -> 1258;
1260 -> 1219;
1260 -> 1258;
1261 -> 1259;
1261 -> 1236;
1261 -> 1258;
1262 -> 1256;
1263 -> 1042;
1264 -> 1054;
1264 -> 1263;
1265 -> 1264;
1265 -> 1261;
1265 -> 1263;
1266 -> 1263;
1267 -> 1265;
1267 -> 1266;
1267 -> 1263;
1268 -> 1263;
1269 -> 1265;
1269 -> 1268;
1269 -> 1261;
1269 -> 1263;
1270 -> 1042;
1271 -> 1048;
1271 -> 1042;
1272 -> 1271;
1272 -> 1269;
1272 -> 1042;
1273 -> 1033;
1273 -> 1269;
1273 -> 1036;
1274 -> 1037;
1274 -> 1036;
1275 -> 1273;
1275 -> 1274;
1275 -> 1269;
1275 -> 1036;
1276 -> 1033;
1276 -> 1275;
1276 -> 1029;
1277 -> 1033;
1277 -> 1275;
1277 -> 1029;
1278 -> 1023;
1278 -> 961;
1279 -> 1278;
1279 -> 1275;
1279 -> 961;
1280 -> 1277;
1280 -> 961;
1281 -> 940;
1282 -> 906;
1282 -> 1280;
1282 -> 1281;
1282 -> 940;
1283 -> 905;
1283 -> 1280;
1283 -> 901;
1284 -> 902;
1284 -> 0;
1284 -> 901;
1285 -> 904;
1285 -> 901;
1286 -> 907;
1286 -> 901;
1287 -> 905;
1287 -> 901;
1288 -> 1285;
1288 -> 1286;
1288 -> 1287;
1288 -> 906;
1288 -> 896;
1288 -> 1283;
1288 -> 901;
1289 -> 901;
1290 -> 891;
1291 -> 896;
1291 -> 1288;
1291 -> 891;
1292 -> 885;
1292 -> 628;
1293 -> 887;
1293 -> 1291;
1293 -> 1292;
1293 -> 890;
1293 -> 884;
1293 -> 876;
1293 -> 628;
1294 -> 885;
1294 -> 628;
1295 -> 877;
1295 -> 628;
1296 -> 879;
1296 -> 628;
1297 -> 878;
1297 -> 880;
1297 -> 1296;
1298 -> 1296;
1299 -> 884;
1299 -> 1296;
1300 -> 1295;
1300 -> 1296;
1301 -> 878;
1301 -> 1296;
1302 -> 880;
1302 -> 1296;
1303 -> 1293;
1303 -> 1296;
1304 -> 1298;
1304 -> 1296;
1305 -> 882;
1305 -> 1296;
1306 -> 883;
1306 -> 1296;
1307 -> 1296;
1308 -> 1299;
1308 -> 1307;
1309 -> 1300;
1309 -> 1307;
1310 -> 1301;
1310 -> 1307;
1311 -> 1302;
1311 -> 1307;
1312 -> 1303;
1312 -> 1307;
1313 -> 1304;
1313 -> 1307;
1314 -> 1305;
1314 -> 1307;
1315 -> 1306;
1315 -> 1307;
1316 -> 1307;
1317 -> 1308;
1317 -> 1316;
1317 -> 1307;
1318 -> 1307;
1319 -> 1313;
1319 -> 1318;
1319 -> 1307;
1320 -> 1307;
1321 -> 1308;
1321 -> 1320;
1322 -> 1321;
1322 -> 1293;
1322 -> 1320;
1323 -> 1322;
1323 -> 1307;
1324 -> 1307;
1325 -> 1307;
1326 -> 1314;
1326 -> 1307;
1327 -> 1308;
1327 -> 1326;
1328 -> 1309;
1328 -> 1326;
1329 -> 1312;
1329 -> 1326;
1330 -> 1313;
1330 -> 1326;
1331 -> 1315;
1331 -> 1326;
1332 -> 1326;
1333 -> 1327;
1333 -> 1332;
1334 -> 1328;
1334 -> 1332;
1335 -> 1329;
1335 -> 1332;
1336 -> 1330;
1336 -> 1332;
1337 -> 1331;
1337 -> 1332;
1338 -> 1337;
1338 -> 1332;
1339 -> 1332;
1340 -> 1338;
1340 -> 1339;
1341 -> 1333;
1341 -> 1339;
1342 -> 1339;
1343 -> 1341;
1343 -> 1293;
1343 -> 1342;
1343 -> 1339;
1344 -> 1343;
1345 -> 1341;
1345 -> 1343;
1346 -> 1343;
1347 -> 1345;
1347 -> 1346;
1348 -> 1343;
1349 -> 1348;
1349 -> 1345;
1350 -> 1349;
1350 -> 1343;
1351 -> 1343;
1352 -> 1341;
1352 -> 1351;
1353 -> 1352;
1353 -> 1345;
1353 -> 1351;
1354 -> 1351;
1355 -> 1353;
1355 -> 1354;
1356 -> 1355;
1356 -> 1353;
1356 -> 1354;
1357 -> 1354;
1358 -> 1356;
1358 -> 1357;
1359 -> 1357;
1360 -> 1358;
1360 -> 1359;
1361 -> 1360;
1361 -> 1359;
1362 -> 1360;
1362 -> 1357;
1363 -> 1356;
1363 -> 1357;
1364 -> 1357;
1365 -> 1363;
1365 -> 1364;
1366 -> 1365;
1366 -> 1362;
1366 -> 1364;
1367 -> 1366;
1367 -> 1357;
1368 -> 1367;
1368 -> 1343;
1369 -> 1350;
1369 -> 1368;
1369 -> 1343;
1370 -> 1345;
1370 -> 1369;
1372 -> 0;
1374 -> 1371;
1374 -> 1373;
1375 -> 1372;
1375 -> 1373;
1376 -> 1373;
1377 -> 1376;
1377 -> 1373;
1378 -> 1374;
1378 -> 1376;
1378 -> 1373;
1379 -> 1375;
1379 -> 1376;
1379 -> 1373;
1380 -> 1373;
1381 -> 1380;
1381 -> 1370;
1382 -> 1341;
1382 -> 1367;
1382 -> 1343;
1383 -> 1381;
1383 -> 1343;
1384 -> 1343;
1385 -> 1382;
1385 -> 1383;
1385 -> 1384;
1385 -> 1378;
1385 -> 1379;
1385 -> 1367;
1385 -> 0;
1385 -> 1343;
1386 -> 1341;
1386 -> 1385;
1386 -> 1339;
1387 -> 1386;
1387 -> 1332;
1388 -> 1387;
1388 -> 1385;
1388 -> 1332;
1389 -> 1387;
1389 -> 1385;
1389 -> 1332;
1390 -> 1336;
1390 -> 1389;
1390 -> 1298;
1390 -> 1385;
1390 -> 1332;
1391 -> 1387;
1391 -> 1390;
1391 -> 1332;
1392 -> 1332;
1393 -> 1391;
1393 -> 1392;
1393 -> 1332;
1394 -> 1393;
1395 -> 1308;
1395 -> 1307;
1396 -> 1309;
1396 -> 1307;
1397 -> 1310;
1397 -> 1307;
1398 -> 1311;
1398 -> 1307;
1399 -> 1312;
1399 -> 1307;
1400 -> 1313;
1400 -> 1307;
1401 -> 1314;
1401 -> 1307;
1402 -> 1394;
1402 -> 1307;
1403 -> 1315;
1403 -> 1307;
1404 -> 1307;
1405 -> 1307;
1406 -> 1395;
1406 -> 1405;
1407 -> 1396;
1407 -> 1405;
1408 -> 1397;
1408 -> 1405;
1409 -> 1398;
1409 -> 1405;
1410 -> 1399;
1410 -> 1405;
1411 -> 1400;
1411 -> 1405;
1412 -> 1401;
1412 -> 1405;
1413 -> 1402;
1413 -> 1405;
1414 -> 1403;
1414 -> 1405;
1415 -> 1404;
1415 -> 1405;
1416 -> 1405;
1417 -> 1416;
1417 -> 1405;
1418 -> 1416;
1418 -> 1405;
1419 -> 1416;
1419 -> 1405;
1420 -> 1416;
1420 -> 1405;
1421 -> 1416;
1421 -> 1405;
1422 -> 1416;
1422 -> 1405;
1423 -> 1416;
1423 -> 1405;
1424 -> 1416;
1424 -> 1405;
1425 -> 1416;
1425 -> 1405;
1426 -> 1416;
1426 -> 1405;
1427 -> 1416;
1427 -> 1405;
1428 -> 1405;
1429 -> 1406;
1429 -> 1428;
1429 -> 1405;
1430 -> 1405;
1431 -> 1411;
1431 -> 1430;
1431 -> 1405;
1432 -> 1406;
1432 -> 1416;
1432 -> 1405;
1433 -> 1407;
1433 -> 1416;
1433 -> 1405;
1434 -> 1408;
1434 -> 1416;
1434 -> 1405;
1435 -> 1414;
1435 -> 1416;
1435 -> 1405;
1436 -> 1411;
1436 -> 1416;
1436 -> 1405;
1437 -> 1412;
1437 -> 1416;
1437 -> 1405;
1438 -> 1413;
1438 -> 1416;
1438 -> 1405;
1439 -> 1410;
1439 -> 1416;
1439 -> 1405;
1440 -> 1410;
1440 -> 1405;
1441 -> 1405;
1442 -> 1440;
1442 -> 1441;
1443 -> 1416;
1443 -> 1441;
1444 -> 1442;
1444 -> 1441;
1445 -> 1405;
1446 -> 1408;
1446 -> 1409;
1446 -> 1405;
1447 -> 1409;
1447 -> 1416;
1447 -> 1405;
1448 -> 1307;
1449 -> 1308;
1449 -> 1448;
1450 -> 1449;
1450 -> 1390;
1450 -> 1448;
1451 -> 1450;
1451 -> 1307;
1452 -> 1451;
1453 -> 1452;
1453 -> 1404;
1453 -> 1451;
1454 -> 1307;
1455 -> 1308;
1455 -> 1454;
1456 -> 1454;
1457 -> 1455;
1457 -> 1456;
1458 -> 1456;
1459 -> 1457;
1459 -> 1458;
1460 -> 1458;
1461 -> 1459;
1461 -> 1460;
1462 -> 1461;
1462 -> 1390;
1462 -> 1460;
1463 -> 1461;
1463 -> 1390;
1463 -> 1460;
1464 -> 1463;
1464 -> 1458;
1465 -> 1459;
1465 -> 1390;
1465 -> 1458;
1466 -> 1454;
1467 -> 1465;
1467 -> 1307;
1468 -> 1307;
1469 -> 1467;
1469 -> 1468;
1470 -> 1404;
1470 -> 1468;
1471 -> 1469;
1471 -> 1465;
1471 -> 1468;
1472 -> 1307;
1473 -> 1307;
1474 -> 1404;
1474 -> 1473;
1475 -> 1474;
1475 -> 1416;
1475 -> 1426;
1475 -> 1453;
1475 -> 1473;
1476 -> 1473;
1477 -> 1475;
1477 -> 1476;
1477 -> 1473;
1478 -> 1473;
1479 -> 1478;
1479 -> 1473;
1480 -> 1475;
1480 -> 1479;
1480 -> 1416;
1480 -> 1417;
1480 -> 1432;
1480 -> 1418;
1480 -> 1434;
1480 -> 1419;
1480 -> 1447;
1480 -> 1420;
1480 -> 1436;
1480 -> 1421;
1480 -> 1439;
1480 -> 1422;
1480 -> 1433;
1480 -> 1423;
1480 -> 1437;
1480 -> 1424;
1480 -> 1425;
1480 -> 1438;
1480 -> 1426;
1480 -> 1453;
1480 -> 1427;
1480 -> 1435;
1480 -> 1452;
1480 -> 1471;
1480 -> 876;
1480 -> 1473;
1481 -> 1307;
1482 -> 1307;
1483 -> 1309;
1483 -> 1482;
1483 -> 1307;
1484 -> 1313;
1484 -> 1483;
1485 -> 1309;
1485 -> 1484;
1485 -> 1480;
1485 -> 1483;
1486 -> 1485;
1486 -> 1483;
1487 -> 1313;
1487 -> 1483;
1488 -> 1483;
1489 -> 1486;
1489 -> 1488;
1490 -> 1487;
1490 -> 1488;
1491 -> 1404;
1491 -> 1488;
1492 -> 1489;
1492 -> 1488;
1493 -> 1483;
1494 -> 1313;
1494 -> 1483;
1495 -> 1309;
1495 -> 1494;
1495 -> 1485;
1495 -> 1483;
1496 -> 1495;
1496 -> 1483;
1497 -> 1313;
1497 -> 1483;
1498 -> 1483;
1499 -> 1496;
1499 -> 1498;
1500 -> 1497;
1500 -> 1498;
1501 -> 1404;
1501 -> 1498;
1502 -> 1499;
1502 -> 1498;
1503 -> 1483;
1504 -> 1483;
1505 -> 1308;
1505 -> 1504;
1506 -> 1505;
1506 -> 1495;
1506 -> 1504;
1507 -> 1506;
1507 -> 1483;
1508 -> 1404;
1508 -> 1483;
1509 -> 1309;
1509 -> 1483;
1510 -> 1313;
1510 -> 1483;
1511 -> 1483;
1512 -> 1507;
1512 -> 1511;
1513 -> 0;
1513 -> 1511;
1514 -> 1507;
1514 -> 1513;
1514 -> 0;
1514 -> 1483;
1515 -> 1507;
1515 -> 1511;
1516 -> 1515;
1516 -> 1514;
1516 -> 1511;
1517 -> 1507;
1517 -> 1511;
1518 -> 1511;
1519 -> 1507;
1519 -> 1518;
1519 -> 1516;
1519 -> 1483;
1520 -> 1483;
1521 -> 1404;
1521 -> 1520;
1522 -> 1521;
1522 -> 1519;
1522 -> 1520;
1523 -> 1520;
1524 -> 1522;
1524 -> 1523;
1524 -> 1520;
1525 -> 1520;
1526 -> 1525;
1526 -> 1520;
1527 -> 1483;
1528 -> 1309;
1528 -> 1522;
1528 -> 1483;
1529 -> 1483;
1530 -> 1528;
1530 -> 1529;
1530 -> 1483;
1531 -> 1307;
1532 -> 1309;
1532 -> 1531;
1532 -> 1307;
1533 -> 1404;
1533 -> 1522;
1533 -> 1309;
1533 -> 1307;
1534 -> 1307;
1535 -> 1308;
1535 -> 1534;
1536 -> 1535;
1536 -> 1522;
1536 -> 1534;
1537 -> 1536;
1537 -> 1307;
1538 -> 1307;
1539 -> 1314;
1539 -> 1538;
1539 -> 1307;
1540 -> 1308;
1540 -> 1539;
1541 -> 1313;
1541 -> 1539;
1542 -> 1315;
1542 -> 1539;
1543 -> 1539;
1544 -> 1540;
1544 -> 1543;
1545 -> 1541;
1545 -> 1543;
1546 -> 1542;
1546 -> 1543;
1547 -> 1543;
1548 -> 1544;
1548 -> 1547;
1549 -> 1547;
1550 -> 1548;
1550 -> 1549;
1551 -> 1549;
1552 -> 1550;
1552 -> 1551;
1553 -> 1552;
1553 -> 1537;
1553 -> 1551;
1554 -> 1552;
1554 -> 1537;
1554 -> 1551;
1555 -> 1554;
1555 -> 1549;
1556 -> 1550;
1556 -> 1537;
1556 -> 1549;
1557 -> 1556;
1557 -> 1543;
1558 -> 1546;
1558 -> 1543;
1559 -> 1558;
1559 -> 1557;
1559 -> 876;
1559 -> 1556;
1559 -> 1543;
1560 -> 1543;
1561 -> 1545;
1561 -> 1559;
1561 -> 1543;
1562 -> 1539;
1563 -> 1539;
1564 -> 1309;
1564 -> 1563;
1564 -> 1539;
1565 -> 1394;
1565 -> 1563;
1565 -> 1539;
1566 -> 1564;
1566 -> 1565;
1566 -> 1539;
1567 -> 1296;
1568 -> 1298;
1568 -> 1296;
1569 -> 1568;
1569 -> 1561;
1569 -> 1296;
1570 -> 1295;
1570 -> 1569;
1571 -> 1298;
1571 -> 1569;
1572 -> 1569;
1573 -> 1570;
1573 -> 1572;
1574 -> 1571;
1574 -> 1572;
1575 -> 884;
1575 -> 1572;
1576 -> 1575;
1576 -> 1569;
1576 -> 1572;
1577 -> 1575;
1577 -> 1569;
1577 -> 1572;
1578 -> 1569;
1579 -> 881;
1579 -> 1296;
1580 -> 1298;
1580 -> 1296;
1581 -> 883;
1581 -> 1296;
1582 -> 1579;
1582 -> 1580;
1582 -> 1581;
1582 -> 884;
1582 -> 1569;
1582 -> 876;
1582 -> 1296;
1583 -> 1296;
1584 -> 1293;
1584 -> 1582;
1584 -> 1296;
1585 -> 628;
1586 -> 635;
1586 -> 1585;
1586 -> 1582;
1586 -> 598;
1587 -> 635;
1587 -> 628;
1588 -> 635;
1588 -> 628;
1589 -> 635;
1589 -> 628;
1590 -> 635;
1590 -> 628;
1591 -> 635;
1591 -> 628;
1592 -> 635;
1592 -> 628;
1593 -> 635;
1593 -> 628;
1594 -> 628;
1595 -> 1587;
1595 -> 628;
1596 -> 1589;
1596 -> 628;
1597 -> 1594;
1597 -> 628;
1598 -> 1593;
1598 -> 1595;
1598 -> 1596;
1598 -> 1597;
1598 -> 1586;
1598 -> 1594;
1598 -> 628;
1599 -> 1587;
1599 -> 1598;
1599 -> 628;
1600 -> 628;
1601 -> 1593;
1601 -> 1600;
1602 -> 1600;
1603 -> 1601;
1603 -> 1602;
1604 -> 1603;
1604 -> 1598;
1604 -> 1602;
1605 -> 1603;
1605 -> 1598;
1605 -> 1602;
1606 -> 1605;
1606 -> 1600;
1607 -> 1601;
1607 -> 1598;
1607 -> 1600;
1608 -> 1607;
1608 -> 628;
1609 -> 628;
1610 -> 1594;
1610 -> 628;
1611 -> 628;
1612 -> 1610;
1612 -> 1611;
1613 -> 1593;
1613 -> 1611;
1614 -> 1611;
1615 -> 1613;
1615 -> 1614;
1616 -> 1614;
1617 -> 1615;
1617 -> 1616;
1618 -> 1617;
1618 -> 1608;
1618 -> 1616;
1619 -> 1617;
1619 -> 1608;
1619 -> 1616;
1620 -> 1619;
1620 -> 1614;
1621 -> 1615;
1621 -> 1608;
1621 -> 1614;
1622 -> 1621;
1622 -> 1611;
1623 -> 1611;
1624 -> 1623;
1624 -> 1622;
1624 -> 1621;
1624 -> 1611;
1625 -> 1611;
1626 -> 1625;
1626 -> 628;
1627 -> 1591;
1627 -> 628;
1628 -> 1594;
1628 -> 628;
1629 -> 1592;
1629 -> 628;
1630 -> 1627;
1630 -> 1628;
1630 -> 1629;
1630 -> 1593;
1630 -> 1621;
1630 -> 1586;
1630 -> 628;
1631 -> 628;
1632 -> 1592;
1632 -> 1586;
1632 -> 1630;
1632 -> 628;
1633 -> 628;
1634 -> 1590;
1634 -> 628;
1635 -> 628;
1640 -> 1637;
1640 -> 1636;
1641 -> 1638;
1641 -> 1636;
1642 -> 1639;
1642 -> 1636;
1643 -> 1636;
1644 -> 1593;
1644 -> 628;
1645 -> 1634;
1645 -> 628;
1646 -> 1588;
1646 -> 628;
1647 -> 1633;
1647 -> 628;
1648 -> 1592;
1648 -> 628;
1649 -> 628;
1650 -> 628;
1651 -> 1644;
1651 -> 1650;
1652 -> 1645;
1652 -> 1650;
1653 -> 1646;
1653 -> 1650;
1654 -> 1647;
1654 -> 1650;
1655 -> 1648;
1655 -> 1650;
1656 -> 1649;
1656 -> 1650;
1657 -> 1649;
1657 -> 1650;
1658 -> 1650;
1659 -> 1650;
1660 -> 1653;
1660 -> 1659;
1660 -> 1650;
1661 -> 1650;
1662 -> 1651;
1662 -> 1661;
1663 -> 1661;
1664 -> 1662;
1664 -> 1663;
1665 -> 1664;
1665 -> 1632;
1665 -> 1663;
1666 -> 1664;
1666 -> 1632;
1666 -> 1663;
1667 -> 1666;
1667 -> 1661;
1668 -> 1662;
1668 -> 1632;
1668 -> 1661;
1669 -> 1668;
1669 -> 1650;
1670 -> 1669;
1670 -> 1652;
1670 -> 1650;
1671 -> 1651;
1671 -> 1650;
1672 -> 1658;
1672 -> 1650;
1673 -> 1656;
1673 -> 1650;
1674 -> 1657;
1674 -> 1650;
1675 -> 1650;
1676 -> 1654;
1676 -> 1650;
1677 -> 1655;
1677 -> 1650;
1678 -> 1650;
1679 -> 1670;
1679 -> 1678;
1680 -> 1671;
1680 -> 1678;
1681 -> 1672;
1681 -> 1678;
1682 -> 1673;
1682 -> 1678;
1683 -> 1674;
1683 -> 1678;
1684 -> 1675;
1684 -> 1678;
1685 -> 1675;
1685 -> 1678;
1686 -> 1676;
1686 -> 1678;
1687 -> 1677;
1687 -> 1678;
1688 -> 1675;
1688 -> 1678;
1689 -> 1678;
1690 -> 1689;
1690 -> 1678;
1691 -> 1689;
1691 -> 1678;
1692 -> 1689;
1692 -> 1678;
1693 -> 1689;
1693 -> 1678;
1694 -> 1689;
1694 -> 1678;
1695 -> 1689;
1695 -> 1678;
1696 -> 1689;
1696 -> 1678;
1697 -> 1689;
1697 -> 1678;
1698 -> 1689;
1698 -> 1678;
1699 -> 1689;
1699 -> 1678;
1700 -> 1689;
1700 -> 1678;
1701 -> 1689;
1701 -> 1678;
1702 -> 1679;
1702 -> 1689;
1702 -> 1678;
1703 -> 1680;
1703 -> 1689;
1703 -> 1678;
1704 -> 1681;
1704 -> 1689;
1704 -> 1678;
1705 -> 1682;
1705 -> 1689;
1705 -> 1678;
1706 -> 1683;
1706 -> 1689;
1706 -> 1678;
1707 -> 1684;
1707 -> 1689;
1707 -> 1678;
1708 -> 1685;
1708 -> 1689;
1708 -> 1678;
1709 -> 1686;
1709 -> 1689;
1709 -> 1678;
1710 -> 1687;
1710 -> 1689;
1710 -> 1678;
1711 -> 1650;
1712 -> 1651;
1712 -> 1711;
1713 -> 1711;
1714 -> 1712;
1714 -> 1713;
1715 -> 1714;
1715 -> 1668;
1715 -> 1713;
1716 -> 1714;
1716 -> 1668;
1716 -> 1713;
1717 -> 1716;
1717 -> 1711;
1718 -> 1712;
1718 -> 1668;
1718 -> 1711;
1719 -> 1718;
1719 -> 1650;
1720 -> 1719;
1720 -> 1675;
1720 -> 1718;
1720 -> 1689;
1720 -> 1690;
1720 -> 1702;
1720 -> 1691;
1720 -> 1703;
1720 -> 1692;
1720 -> 1704;
1720 -> 1693;
1720 -> 1705;
1720 -> 1694;
1720 -> 1706;
1720 -> 1695;
1720 -> 1707;
1720 -> 1696;
1720 -> 1708;
1720 -> 1697;
1720 -> 1709;
1720 -> 1698;
1720 -> 1699;
1720 -> 1700;
1720 -> 1701;
1720 -> 1710;
1720 -> 1649;
1720 -> 1633;
1720 -> 1632;
1720 -> 1650;
1721 -> 1650;
1722 -> 1720;
1722 -> 1721;
1723 -> 1720;
1723 -> 1721;
1724 -> 1723;
1724 -> 1720;
1724 -> 1721;
1725 -> 1722;
1725 -> 1724;
1725 -> 1721;
1726 -> 1725;
1727 -> 1725;
1728 -> 1725;
1729 -> 1727;
1729 -> 1728;
1730 -> 1723;
1730 -> 1728;
1731 -> 1730;
1731 -> 1724;
1731 -> 1728;
1732 -> 1728;
1733 -> 1731;
1734 -> 1725;
1735 -> 1725;
1736 -> 1734;
1736 -> 1735;
1737 -> 1723;
1737 -> 1735;
1738 -> 1737;
1738 -> 1724;
1738 -> 1735;
1739 -> 1735;
1740 -> 1738;
1741 -> 1725;
1742 -> 1723;
1742 -> 1741;
1743 -> 1742;
1743 -> 1724;
1743 -> 1741;
1744 -> 1725;
1745 -> 1725;
1746 -> 1745;
1746 -> 1725;
1747 -> 1725;
1748 -> 1725;
1749 -> 1747;
1749 -> 1748;
1750 -> 1723;
1750 -> 1748;
1751 -> 1750;
1751 -> 1724;
1751 -> 1748;
1752 -> 1748;
1753 -> 1751;
1754 -> 1725;
1755 -> 1723;
1755 -> 1754;
1756 -> 1755;
1756 -> 1724;
1756 -> 1743;
1756 -> 1754;
1757 -> 1725;
1758 -> 1723;
1758 -> 1724;
1758 -> 1721;
1759 -> 1722;
1759 -> 1724;
1759 -> 1743;
1759 -> 1756;
1759 -> 1721;
1760 -> 1722;
1760 -> 1724;
1760 -> 1721;
1761 -> 1760;
1762 -> 1723;
1762 -> 1761;
1763 -> 1762;
1763 -> 1724;
1763 -> 1743;
1763 -> 1756;
1763 -> 1761;
1764 -> 1761;
1765 -> 1762;
1765 -> 1724;
1765 -> 1743;
1765 -> 1756;
1765 -> 1763;
1765 -> 1764;
1765 -> 1761;
1766 -> 1760;
1767 -> 1760;
1768 -> 1760;
1769 -> 1767;
1769 -> 1768;
1770 -> 1723;
1770 -> 1768;
1771 -> 1770;
1771 -> 1724;
1771 -> 1768;
1772 -> 1768;
1773 -> 1771;
1774 -> 1760;
1775 -> 1723;
1775 -> 1774;
1776 -> 1775;
1776 -> 1724;
1776 -> 1743;
1776 -> 1756;
1776 -> 1763;
1776 -> 1774;
1777 -> 1774;
1778 -> 1775;
1778 -> 1724;
1778 -> 1743;
1778 -> 1756;
1778 -> 1763;
1778 -> 1776;
1778 -> 1777;
1778 -> 1774;
1779 -> 1760;
1780 -> 1760;
1781 -> 1760;
1782 -> 1780;
1782 -> 1781;
1783 -> 1723;
1783 -> 1781;
1784 -> 1783;
1784 -> 1724;
1784 -> 1781;
1785 -> 1781;
1786 -> 1784;
1787 -> 1650;
1788 -> 1675;
1788 -> 1776;
1788 -> 1787;
1788 -> 1650;
1789 -> 1658;
1789 -> 1650;
1790 -> 1650;
1791 -> 1656;
1791 -> 1790;
1791 -> 1650;
1792 -> 1791;
1793 -> 1651;
1793 -> 1792;
1794 -> 1792;
1795 -> 1793;
1795 -> 1776;
1795 -> 1794;
1796 -> 1794;
1797 -> 1795;
1797 -> 1791;
1798 -> 1797;
1799 -> 1654;
1799 -> 1797;
1800 -> 1655;
1800 -> 1797;
1801 -> 1797;
1802 -> 1798;
1802 -> 1801;
1803 -> 1798;
1803 -> 1801;
1804 -> 1799;
1804 -> 1801;
1805 -> 1800;
1805 -> 1801;
1806 -> 1802;
1806 -> 1801;
1807 -> 1591;
1807 -> 628;
1808 -> 1633;
1808 -> 628;
1809 -> 1592;
1809 -> 628;
1810 -> 1807;
1810 -> 1808;
1810 -> 1809;
1810 -> 1593;
1810 -> 1806;
1810 -> 628;
1811 -> 628;
1812 -> 635;
1812 -> 628;
1813 -> 635;
1813 -> 628;
1814 -> 635;
1814 -> 628;
1815 -> 635;
1815 -> 628;
1816 -> 628;
1817 -> 1815;
1817 -> 1810;
1817 -> 1816;
1817 -> 628;
1818 -> 1812;
1818 -> 628;
1819 -> 628;
1820 -> 1818;
1820 -> 1819;
1821 -> 1815;
1821 -> 1819;
1822 -> 1819;
1823 -> 1821;
1823 -> 1810;
1823 -> 1822;
1823 -> 1819;
1824 -> 628;
1825 -> 635;
1825 -> 628;
1826 -> 628;
1827 -> 1825;
1827 -> 1826;
1828 -> 1826;
1829 -> 1827;
1829 -> 1828;
1830 -> 1810;
1830 -> 1826;
1831 -> 628;
1832 -> 635;
1832 -> 628;
1833 -> 635;
1833 -> 628;
1834 -> 628;
1835 -> 1833;
1835 -> 1834;
1836 -> 1835;
1836 -> 1810;
1836 -> 1834;
1837 -> 1836;
1837 -> 628;
1838 -> 1837;
1838 -> 1810;
1838 -> 628;
1839 -> 1837;
1839 -> 628;
1840 -> 1833;
1840 -> 1810;
1840 -> 628;
1841 -> 628;
1842 -> 635;
1842 -> 1841;
1842 -> 1810;
1842 -> 598;
1843 -> 635;
1843 -> 628;
1844 -> 635;
1844 -> 628;
1845 -> 628;
1846 -> 635;
1846 -> 1845;
1846 -> 1842;
1846 -> 598;
1847 -> 635;
1847 -> 628;
1848 -> 1847;
1848 -> 1846;
1848 -> 628;
1849 -> 635;
1849 -> 628;
1850 -> 635;
1850 -> 628;
1851 -> 1849;
1851 -> 1848;
1851 -> 628;
1852 -> 628;
1853 -> 1850;
1853 -> 1848;
1853 -> 1852;
1854 -> 1853;
1854 -> 628;
1855 -> 628;
1856 -> 635;
1856 -> 628;
1857 -> 635;
1857 -> 628;
1858 -> 1856;
1858 -> 1854;
1858 -> 628;
1859 -> 1857;
1859 -> 1858;
1859 -> 1854;
1859 -> 628;
1860 -> 628;
1861 -> 635;
1861 -> 628;
1862 -> 635;
1862 -> 628;
1863 -> 1861;
1863 -> 1859;
1863 -> 628;
1864 -> 1862;
1864 -> 1863;
1864 -> 1859;
1864 -> 628;
1865 -> 628;
1866 -> 635;
1866 -> 628;
1867 -> 635;
1867 -> 628;
1868 -> 628;
1869 -> 1867;
1869 -> 1864;
1869 -> 628;
1870 -> 1868;
1870 -> 1869;
1870 -> 1864;
1870 -> 628;
1871 -> 628;
1872 -> 1868;
1872 -> 1870;
1872 -> 1871;
1872 -> 628;
1873 -> 1868;
1873 -> 1870;
1873 -> 1872;
1874 -> 1873;
1874 -> 1872;
1875 -> 628;
1876 -> 635;
1876 -> 628;
1877 -> 635;
1877 -> 628;
1878 -> 1877;
1878 -> 628;
1879 -> 1876;
1879 -> 628;
1880 -> 1877;
1880 -> 1873;
1880 -> 628;
1881 -> 1878;
1881 -> 1879;
1881 -> 1880;
1881 -> 1877;
1881 -> 1873;
1881 -> 628;
1882 -> 628;
1883 -> 635;
1883 -> 628;
1884 -> 1883;
1884 -> 1881;
1884 -> 628;
1885 -> 628;
1886 -> 1835;
1886 -> 1884;
1886 -> 1834;
1887 -> 1886;
1887 -> 628;
1888 -> 1887;
1888 -> 1884;
1888 -> 628;
1889 -> 1887;
1889 -> 628;
1890 -> 1833;
1890 -> 1884;
1890 -> 628;
1891 -> 635;
1891 -> 628;
1892 -> 1891;
1892 -> 628;
1893 -> 1892;
1893 -> 1891;
1893 -> 1884;
1893 -> 628;
1894 -> 628;
1895 -> 1893;
1895 -> 1894;
1896 -> 1895;
1896 -> 1893;
1896 -> 1894;
1897 -> 1849;
1897 -> 1896;
1897 -> 628;
1898 -> 1896;
1899 -> 635;
1899 -> 628;
1900 -> 635;
1900 -> 628;
1901 -> 1900;
1901 -> 1896;
1901 -> 628;
1902 -> 1900;
1902 -> 1896;
1902 -> 628;
1903 -> 1902;
1904 -> 1900;
1904 -> 1903;
1905 -> 1904;
1905 -> 1896;
1905 -> 1903;
1906 -> 1903;
1907 -> 1904;
1907 -> 1896;
1907 -> 1903;
1908 -> 1904;
1908 -> 1896;
1908 -> 1903;
1909 -> 1903;
1910 -> 1905;
1910 -> 1896;
1910 -> 1909;
1911 -> 1910;
1911 -> 1903;
1912 -> 1905;
1912 -> 1903;
1913 -> 1906;
1913 -> 1903;
1914 -> 1903;
1915 -> 1912;
1915 -> 1914;
1916 -> 1913;
1916 -> 1914;
1917 -> 1914;
1918 -> 1917;
1918 -> 1914;
1919 -> 1915;
1919 -> 1896;
1919 -> 1914;
1920 -> 1916;
1920 -> 1914;
1921 -> 1914;
1922 -> 1918;
1922 -> 1921;
1923 -> 1919;
1923 -> 1921;
1924 -> 1920;
1924 -> 1921;
1925 -> 1921;
1926 -> 1923;
1926 -> 1925;
1926 -> 1921;
1927 -> 1914;
1928 -> 1914;
1929 -> 1915;
1929 -> 1919;
1929 -> 1928;
1930 -> 1929;
1930 -> 1914;
1931 -> 1917;
1931 -> 1914;
1932 -> 1931;
1932 -> 1903;
1933 -> 1906;
1933 -> 1903;
1934 -> 1933;
1934 -> 1902;
1935 -> 1934;
1935 -> 1900;
1935 -> 1902;
1936 -> 1902;
1937 -> 1900;
1937 -> 1919;
1937 -> 1935;
1937 -> 1933;
1937 -> 1936;
1937 -> 1902;
1938 -> 1900;
1938 -> 1919;
1938 -> 1935;
1938 -> 628;
1939 -> 635;
1939 -> 628;
1940 -> 0;
1940 -> 628;
1941 -> 635;
1941 -> 1940;
1941 -> 1938;
1941 -> 0;
1941 -> 598;
1942 -> 1900;
1942 -> 1941;
1942 -> 628;
1943 -> 635;
1943 -> 628;
1944 -> 628;
1945 -> 635;
1945 -> 1944;
1945 -> 1941;
1945 -> 598;
1946 -> 635;
1946 -> 628;
1947 -> 1946;
1947 -> 1945;
1947 -> 628;
1948 -> 635;
1948 -> 628;
1949 -> 628;
1950 -> 1948;
1950 -> 1949;
1951 -> 1949;
1952 -> 1950;
1952 -> 1951;
1953 -> 1952;
1953 -> 1947;
1953 -> 1951;
1954 -> 1952;
1954 -> 1947;
1954 -> 1951;
1955 -> 1954;
1955 -> 1949;
1956 -> 1950;
1956 -> 1947;
1956 -> 1949;
1957 -> 1956;
1957 -> 628;
1958 -> 1957;
1958 -> 598;
1959 -> 598;
1960 -> 598;
1961 -> 602;
1961 -> 1960;
1961 -> 598;
1962 -> 609;
1962 -> 598;
1963 -> 1962;
1963 -> 1957;
1963 -> 598;
1964 -> 1;
1965 -> 1;
1966 -> 1964;
1966 -> 1965;
1967 -> 1966;
1967 -> 1965;
1968 -> 1965;
1969 -> 1967;
1969 -> 1968;
1970 -> 1968;
1971 -> 1969;
1971 -> 1970;
1971 -> 1968;
1972 -> 1968;
1972 -> 1;
1973 -> 1963;
1973 -> 1964;
1973 -> 1;
1974 -> 0;
1974 -> 1;
1975 -> 1;
1976 -> 1972;
1976 -> 1975;
1977 -> 1964;
1977 -> 1975;
1978 -> 1974;
1978 -> 1975;
1979 -> 1964;
1979 -> 1975;
1980 -> 1964;
1980 -> 1975;
1981 -> 1964;
1981 -> 1975;
1982 -> 1964;
1982 -> 1975;
1983 -> 1964;
1983 -> 1975;
1984 -> 1976;
1984 -> 1975;
1985 -> 1980;
1985 -> 1975;
1986 -> 1977;
1986 -> 1975;
1987 -> 1975;
1988 -> 1985;
1988 -> 1987;
1989 -> 1986;
1989 -> 1987;
1990 -> 1988;
1990 -> 1987;
1991 -> 1987;
1992 -> 1990;
1992 -> 1991;
1993 -> 1992;
1993 -> 1991;
1994 -> 1993;
1995 -> 0;
1995 -> 1994;
1996 -> 1995;
1997 -> 1996;
1998 -> 1996;
1999 -> 0;
1999 -> 1998;
2000 -> 1999;
2000 -> 1997;
2000 -> 1996;
2001 -> 2000;
2001 -> 1994;
2002 -> 1987;
2003 -> 1989;
2003 -> 2002;
2003 -> 1987;
2004 -> 2001;
2004 -> 1987;
2005 -> 1989;
2005 -> 1987;
2006 -> 1987;
2007 -> 2004;
2007 -> 2006;
2008 -> 2005;
2008 -> 2006;
2009 -> 2007;
2009 -> 2006;
2010 -> 2006;
2011 -> 2009;
2011 -> 2010;
2012 -> 2011;
2012 -> 2010;
2013 -> 2012;
2014 -> 2012;
2015 -> 2013;
2015 -> 2014;
2016 -> 2015;
2016 -> 2014;
2017 -> 2016;
2018 -> 2017;
2018 -> 2016;
2019 -> 2012;
2020 -> 2018;
2020 -> 2019;
2020 -> 2012;
2021 -> 2020;
2022 -> 2018;
2022 -> 2020;
2023 -> 2017;
2024 -> 2017;
2025 -> 2023;
2025 -> 2024;
2025 -> 2017;
2026 -> 2023;
2026 -> 2025;
2027 -> 2023;
2028 -> 2023;
2028 -> 2027;
2029 -> 0;
2029 -> 2006;
2030 -> 2008;
2030 -> 2006;
2031 -> 2030;
2031 -> 1964;
2031 -> 1973;
2031 -> 2006;
2032 -> 2031;
2033 -> 2007;
2033 -> 2032;
2033 -> 1964;
2033 -> 1973;
2033 -> 1963;
2033 -> 2000;
2033 -> 2023;
2033 -> 2031;
2034 -> 2031;
2035 -> 2031;
2036 -> 2034;
2036 -> 2035;
2037 -> 2036;
2037 -> 2035;
2038 -> 2037;
2038 -> 2033;
2038 -> 2035;
2039 -> 2035;
2040 -> 2039;
2040 -> 2031;
2041 -> 2031;
2042 -> 2040;
2042 -> 2041;
2042 -> 2031;
2043 -> 1987;
2044 -> 1989;
2044 -> 1987;
2045 -> 2001;
2045 -> 2044;
2045 -> 2000;
2045 -> 2038;
2045 -> 1987;
2046 -> 1978;
2046 -> 1975;
2047 -> 1979;
2047 -> 1975;
2048 -> 1981;
2048 -> 1975;
2049 -> 1982;
2049 -> 1975;
2050 -> 1983;
2050 -> 1975;
2051 -> 1975;
2052 -> 1984;
2052 -> 2051;
2053 -> 2045;
2053 -> 2051;
2054 -> 2046;
2054 -> 2051;
2055 -> 2047;
2055 -> 2051;
2056 -> 2048;
2056 -> 2051;
2057 -> 2049;
2057 -> 2051;
2058 -> 2050;
2058 -> 2051;
2059 -> 2052;
2059 -> 2051;
2060 -> 2054;
2060 -> 2051;
2061 -> 2055;
2061 -> 2051;
2062 -> 2056;
2062 -> 2051;
2063 -> 2057;
2063 -> 2051;
2064 -> 2058;
2064 -> 2051;
2065 -> 2051;
2066 -> 2065;
2066 -> 2051;
2067 -> 2051;
2068 -> 2059;
2068 -> 2067;
2069 -> 2060;
2069 -> 2067;
2070 -> 2061;
2070 -> 2067;
2071 -> 2062;
2071 -> 2067;
2072 -> 2063;
2072 -> 2067;
2073 -> 2064;
2073 -> 2067;
2074 -> 2066;
2074 -> 2067;
2075 -> 2070;
2075 -> 2067;
2076 -> 2072;
2076 -> 2067;
2077 -> 2067;
2078 -> 2075;
2078 -> 2077;
2079 -> 2076;
2079 -> 2077;
2080 -> 2068;
2080 -> 2077;
2081 -> 2080;
2081 -> 1971;
2081 -> 2077;
2082 -> 2081;
2083 -> 2079;
2083 -> 2081;
2084 -> 2078;
2084 -> 2081;
2085 -> 2081;
2086 -> 2082;
2086 -> 2085;
2087 -> 2083;
2087 -> 2085;
2088 -> 2084;
2088 -> 2085;
2089 -> 2082;
2089 -> 2085;
2090 -> 2085;
2091 -> 2088;
2091 -> 2090;
2091 -> 2085;
2092 -> 0;
2092 -> 2091;
2093 -> 2086;
2093 -> 2085;
2094 -> 0;
2094 -> 2085;
2095 -> 2094;
2095 -> 2089;
2095 -> 2085;
2096 -> 2085;
2097 -> 2093;
2097 -> 2095;
2097 -> 2096;
2097 -> 2045;
2097 -> 2085;
2098 -> 2092;
2098 -> 2085;
2099 -> 2087;
2099 -> 2085;
2100 -> 2085;
2101 -> 2097;
2101 -> 2098;
2101 -> 2099;
2101 -> 2100;
2101 -> 2085;
2102 -> 2085;
2103 -> 2102;
2104 -> 2102;
2105 -> 2101;
2105 -> 2104;
2105 -> 2102;
2106 -> 2103;
2106 -> 2102;
2107 -> 2102;
2108 -> 2105;
2108 -> 2101;
2108 -> 2104;
2108 -> 2106;
2108 -> 2107;
2108 -> 2103;
2108 -> 2102;
2109 -> 2102;
2110 -> 2109;
2110 -> 2103;
2110 -> 2102;
2111 -> 2103;
2111 -> 2102;
2112 -> 2102;
2113 -> 2111;
2113 -> 2112;
2113 -> 2103;
2113 -> 2110;
2113 -> 2102;
2114 -> 2082;
2114 -> 2067;
2115 -> 2067;
2116 -> 2069;
2116 -> 2115;
2116 -> 2067;
2117 -> 0;
2117 -> 2067;
2118 -> 2074;
2118 -> 2067;
2119 -> 2071;
2119 -> 2114;
2119 -> 2053;
2119 -> 2069;
2119 -> 2067;
2120 -> 2119;
2120 -> 2067;
2121 -> 2067;
2122 -> 2120;
2122 -> 2121;
2123 -> 0;
2123 -> 2121;
2124 -> 2123;
2125 -> 2067;
2126 -> 2119;
2126 -> 2082;
2126 -> 2101;
2126 -> 2045;
2126 -> 0;
2126 -> 2067;
2127 -> 2067;
2128 -> 2127;
2129 -> 2127;
2130 -> 2127;
2131 -> 2129;
2131 -> 2130;
2132 -> 2129;
2132 -> 2130;
2133 -> 2129;
2133 -> 2130;
2134 -> 2129;
2134 -> 2130;
2135 -> 2130;
2136 -> 2126;
2136 -> 2135;
2136 -> 2130;
2137 -> 2134;
2137 -> 2130;
2138 -> 2131;
2138 -> 2130;
2139 -> 2132;
2139 -> 2130;
2140 -> 2133;
2140 -> 2130;
2141 -> 2134;
2141 -> 2130;
2142 -> 2130;
2143 -> 0;
2143 -> 2130;
2144 -> 2130;
2145 -> 2143;
2145 -> 2144;
2146 -> 2143;
2146 -> 2144;
2147 -> 2141;
2147 -> 2144;
2148 -> 2142;
2148 -> 2144;
2149 -> 2142;
2149 -> 2144;
2150 -> 2145;
2150 -> 2144;
2151 -> 2146;
2151 -> 2144;
2152 -> 2147;
2152 -> 2144;
2153 -> 2144;
2154 -> 2153;
2154 -> 2144;
2155 -> 2148;
2155 -> 2153;
2155 -> 2144;
2156 -> 2130;
2157 -> 2138;
2157 -> 2156;
2158 -> 2139;
2158 -> 2156;
2159 -> 2140;
2159 -> 2156;
2160 -> 2141;
2160 -> 2156;
2161 -> 2142;
2161 -> 2156;
2162 -> 2142;
2162 -> 2156;
2163 -> 2142;
2163 -> 2156;
2164 -> 2142;
2164 -> 2156;
2165 -> 2142;
2165 -> 2156;
2166 -> 2142;
2166 -> 2156;
2167 -> 2157;
2167 -> 2156;
2168 -> 2158;
2168 -> 2156;
2169 -> 2159;
2169 -> 2156;
2170 -> 2160;
2170 -> 2156;
2171 -> 2161;
2171 -> 2156;
2172 -> 2162;
2172 -> 2156;
2173 -> 2163;
2173 -> 2156;
2174 -> 2164;
2174 -> 2156;
2175 -> 2165;
2175 -> 2156;
2176 -> 2156;
2177 -> 2167;
2177 -> 2176;
2178 -> 2168;
2178 -> 2176;
2179 -> 2169;
2179 -> 2176;
2180 -> 2170;
2180 -> 2176;
2181 -> 2171;
2181 -> 2176;
2182 -> 2172;
2182 -> 2176;
2183 -> 2173;
2183 -> 2176;
2184 -> 2174;
2184 -> 2176;
2185 -> 2175;
2185 -> 2176;
2186 -> 2166;
2186 -> 2176;
2187 -> 2180;
2187 -> 2176;
2188 -> 2184;
2188 -> 2176;
2189 -> 2185;
2189 -> 2176;
2190 -> 2176;
2191 -> 2190;
2191 -> 2176;
2192 -> 2190;
2192 -> 2176;
2193 -> 2190;
2193 -> 2176;
2194 -> 2190;
2194 -> 2176;
2195 -> 2190;
2195 -> 2176;
2196 -> 2190;
2196 -> 2176;
2197 -> 2190;
2197 -> 2176;
2198 -> 2190;
2198 -> 2176;
2199 -> 2190;
2199 -> 2176;
2200 -> 2190;
2200 -> 2176;
2201 -> 2190;
2201 -> 2176;
2202 -> 2190;
2202 -> 2176;
2203 -> 2190;
2203 -> 2176;
2204 -> 2190;
2204 -> 2176;
2205 -> 2190;
2205 -> 2176;
2206 -> 2190;
2206 -> 2176;
2207 -> 2190;
2207 -> 2176;
2208 -> 2190;
2208 -> 2176;
2209 -> 2190;
2209 -> 2176;
2210 -> 2190;
2210 -> 2176;
2211 -> 2190;
2211 -> 2176;
2212 -> 2190;
2212 -> 2176;
2213 -> 2190;
2213 -> 2176;
2214 -> 2190;
2214 -> 2176;
2215 -> 2190;
2215 -> 2176;
2216 -> 2190;
2216 -> 2176;
2217 -> 2176;
2218 -> 2217;
2218 -> 2190;
2218 -> 2176;
2219 -> 2190;
2219 -> 2176;
2220 -> 2190;
2220 -> 2176;
2221 -> 2176;
2222 -> 2176;
2223 -> 2220;
2223 -> 2222;
2224 -> 2221;
2224 -> 2222;
2225 -> 2224;
2225 -> 2222;
2226 -> 2224;
2226 -> 2222;
2227 -> 2224;
2227 -> 2222;
2228 -> 2223;
2228 -> 2224;
2228 -> 2222;
2229 -> 2221;
2229 -> 2190;
2229 -> 2176;
2230 -> 2190;
2230 -> 2176;
2231 -> 2176;
2232 -> 2231;
2233 -> 0;
2233 -> 2231;
2234 -> 2233;
2234 -> 2232;
2234 -> 2231;
2235 -> 2234;
2235 -> 2176;
2236 -> 2235;
2236 -> 2190;
2236 -> 2176;
2237 -> 2180;
2237 -> 2176;
2238 -> 2237;
2239 -> 2177;
2239 -> 2238;
2239 -> 2237;
2240 -> 2178;
2240 -> 2238;
2240 -> 2237;
2241 -> 2239;
2241 -> 2240;
2241 -> 2237;
2242 -> 2179;
2242 -> 2238;
2242 -> 2237;
2243 -> 2241;
2243 -> 2242;
2243 -> 2237;
2244 -> 2182;
2244 -> 2176;
2245 -> 2244;
2246 -> 2190;
2246 -> 2245;
2247 -> 2181;
2247 -> 2244;
2248 -> 2183;
2248 -> 2190;
2248 -> 2176;
2249 -> 2190;
2249 -> 2126;
2249 -> 2176;
2250 -> 2176;
2251 -> 2190;
2251 -> 2126;
2251 -> 2250;
2251 -> 2176;
2252 -> 2130;
2253 -> 2126;
2254 -> 2126;
2255 -> 2126;
2256 -> 2126;
2257 -> 2126;
2258 -> 2254;
2258 -> 2126;
2259 -> 2126;
2260 -> 2126;
2261 -> 2126;
2262 -> 2126;
2263 -> 2126;
2264 -> 2126;
2265 -> 2264;
2265 -> 2126;
2266 -> 2264;
2266 -> 2126;
2267 -> 2264;
2267 -> 2126;
2268 -> 2265;
2268 -> 2126;
2269 -> 2266;
2269 -> 2126;
2270 -> 2267;
2270 -> 2126;
2271 -> 2268;
2271 -> 2264;
2272 -> 2269;
2272 -> 2264;
2273 -> 2270;
2273 -> 2264;
2274 -> 2264;
2275 -> 2264;
2276 -> 2275;
2277 -> 2271;
2277 -> 2276;
2277 -> 2275;
2278 -> 2272;
2278 -> 2276;
2278 -> 2275;
2279 -> 2277;
2279 -> 2278;
2279 -> 2275;
2280 -> 2273;
2280 -> 2276;
2280 -> 2275;
2281 -> 2279;
2281 -> 2280;
2281 -> 2275;
2282 -> 2264;
2283 -> 2264;
2284 -> 2264;
2285 -> 2264;
2285 -> 2130;
2286 -> 2067;
2287 -> 2286;
2288 -> 2287;
2289 -> 2288;
2290 -> 2264;
2291 -> 2264;
2292 -> 2290;
2292 -> 2264;
2293 -> 2291;
2293 -> 2264;
2294 -> 2290;
2294 -> 2264;
2295 -> 2290;
2295 -> 2264;
2296 -> 2264;
2297 -> 2296;
2297 -> 0;
2297 -> 2264;
2298 -> 2290;
2298 -> 2264;
2299 -> 2290;
2299 -> 2264;
2300 -> 2290;
2300 -> 2264;
2301 -> 2290;
2301 -> 2264;
2302 -> 2290;
2302 -> 2264;
2303 -> 2290;
2303 -> 2286;
2304 -> 2286;
2305 -> 0;
2305 -> 2286;
2306 -> 2073;
2306 -> 2290;
2306 -> 2067;
2307 -> 1;
2308 -> 1;
2309 -> 2307;
2309 -> 1;
2310 -> 11;
2310 -> 1;
2311 -> 2308;
2311 -> 2310;
2311 -> 2309;
2311 -> 2264;
2311 -> 11;
2311 -> 13;
2311 -> 2307;
2311 -> 2290;
2311 -> 1;
2312 -> 2311;
2312 -> 2308;
2313 -> 2311;
2313 -> 2308;
2314 -> 2311;
2314 -> 2308;
2315 -> 2311;
2315 -> 2308;
2316 -> 2311;
2316 -> 2308;
2317 -> 2308;
2318 -> 2311;
2318 -> 2317;
2319 -> 2318;
2319 -> 2317;
2320 -> 2317;
2321 -> 2319;
2321 -> 2320;
2322 -> 2320;
2323 -> 2322;
2324 -> 2323;
2325 -> 2311;
2326 -> 2311;
2326 -> 2323;
2327 -> 2311;
2327 -> 2320;
2328 -> 2327;
2328 -> 2320;
2329 -> 2327;
2329 -> 2311;
2329 -> 2328;
2330 -> 2329;
2330 -> 2317;
2331 -> 2317;
2332 -> 2330;
2332 -> 2331;
2332 -> 2317;
2333 -> 2330;
2333 -> 2332;
2334 -> 2308;
2335 -> 2333;
2335 -> 2334;
2335 -> 2308;
2336 -> 2308;
2337 -> 2336;
2338 -> 2337;
2339 -> 2333;
2339 -> 2337;
2340 -> 2336;
2341 -> 2340;
2342 -> 2341;
2343 -> 2342;
2344 -> 2340;
2345 -> 2344;
2346 -> 2345;
2347 -> 2333;
2347 -> 2340;
2348 -> 2333;
2348 -> 2340;
2349 -> 2333;
2349 -> 2340;
2350 -> 2348;
2350 -> 2340;
2351 -> 2347;
2351 -> 2340;
2352 -> 2340;
2353 -> 2349;
2353 -> 2333;
2353 -> 2340;
2354 -> 2340;
2355 -> 2351;
2355 -> 2354;
2356 -> 2352;
2356 -> 2354;
2357 -> 2353;
2357 -> 2354;
2358 -> 2349;
2358 -> 2354;
2359 -> 2357;
2359 -> 2354;
2360 -> 2356;
2360 -> 2354;
2361 -> 2358;
2361 -> 2333;
2361 -> 2360;
2362 -> 2358;
2362 -> 2333;
2362 -> 2361;
2362 -> 2354;
2363 -> 2359;
2363 -> 2362;
2363 -> 2333;
2363 -> 2361;
2363 -> 2354;
2364 -> 2355;
2364 -> 2354;
2365 -> 2354;
2366 -> 2364;
2366 -> 2365;
2367 -> 2358;
2367 -> 2365;
2368 -> 2366;
2368 -> 2365;
2369 -> 2365;
2370 -> 2368;
2370 -> 2369;
2371 -> 2367;
2371 -> 2369;
2372 -> 2369;
2373 -> 2370;
2373 -> 2372;
2373 -> 2369;
2374 -> 2369;
2375 -> 2371;
2375 -> 2363;
2375 -> 2374;
2376 -> 2374;
2377 -> 2375;
2377 -> 2369;
2378 -> 2370;
2378 -> 2369;
2379 -> 2377;
2379 -> 2363;
2379 -> 2378;
2379 -> 2369;
2380 -> 2365;
2381 -> 2367;
2381 -> 2379;
2381 -> 2380;
2382 -> 2380;
2383 -> 2381;
2383 -> 2365;
2384 -> 2363;
2384 -> 2354;
2385 -> 2354;
2386 -> 2384;
2386 -> 2385;
2386 -> 2354;
2387 -> 2386;
2388 -> 2387;
2388 -> 2383;
2389 -> 2388;
2389 -> 2386;
2390 -> 2363;
2390 -> 2386;
2391 -> 2389;
2391 -> 2386;
2392 -> 2386;
2393 -> 2354;
2394 -> 2391;
2394 -> 2383;
2394 -> 2354;
2395 -> 2354;
2396 -> 2394;
2396 -> 2395;
2396 -> 2354;
2397 -> 2355;
2397 -> 2354;
2398 -> 2356;
2398 -> 2354;
2399 -> 2391;
2399 -> 2383;
2399 -> 2354;
2400 -> 2354;
2401 -> 2397;
2401 -> 2400;
2402 -> 2398;
2402 -> 2400;
2403 -> 2399;
2403 -> 2400;
2404 -> 2358;
2404 -> 2400;
2405 -> 2404;
2405 -> 2400;
2406 -> 2401;
2406 -> 2400;
2407 -> 2402;
2407 -> 2400;
2408 -> 2405;
2408 -> 2406;
2408 -> 2407;
2408 -> 2391;
2408 -> 2400;
2409 -> 2400;
2410 -> 2408;
2410 -> 2400;
2411 -> 2400;
2412 -> 2411;
2413 -> 2403;
2413 -> 2411;
2414 -> 2411;
2415 -> 2413;
2415 -> 2414;
2415 -> 2411;
2416 -> 2403;
2416 -> 2411;
2417 -> 2410;
2417 -> 2411;
2418 -> 2413;
2418 -> 2411;
2419 -> 2416;
2419 -> 2417;
2419 -> 2418;
2419 -> 2410;
2419 -> 2411;
2420 -> 2408;
2420 -> 2419;
2421 -> 2333;
2421 -> 2340;
2422 -> 2421;
2422 -> 2420;
2422 -> 2340;
2423 -> 2422;
2424 -> 2423;
2424 -> 2422;
2425 -> 2422;
2426 -> 2424;
2426 -> 2425;
2427 -> 2421;
2427 -> 2425;
2428 -> 2425;
2429 -> 2427;
2429 -> 2428;
2430 -> 2429;
2430 -> 2428;
2431 -> 2429;
2431 -> 2425;
2432 -> 2426;
2432 -> 2431;
2432 -> 2423;
2432 -> 2429;
2432 -> 2425;
2433 -> 2425;
2434 -> 2427;
2434 -> 2433;
2435 -> 2434;
2435 -> 2432;
2435 -> 2433;
2436 -> 2434;
2436 -> 2432;
2436 -> 2433;
2437 -> 2436;
2437 -> 2425;
2438 -> 2425;
2439 -> 2438;
2439 -> 2437;
2439 -> 2432;
2439 -> 2425;
2440 -> 2438;
2440 -> 2439;
2441 -> 2437;
2441 -> 2440;
2441 -> 2438;
2442 -> 2422;
2443 -> 2421;
2443 -> 2422;
2444 -> 2443;
2444 -> 2441;
2444 -> 2422;
2445 -> 2422;
2446 -> 2423;
2446 -> 2444;
2446 -> 2422;
2447 -> 2421;
2447 -> 2446;
2447 -> 2422;
2448 -> 2444;
2448 -> 2422;
2449 -> 2422;
2450 -> 2421;
2450 -> 2447;
2450 -> 2340;
2451 -> 2340;
2452 -> 2451;
2453 -> 2452;
2454 -> 2450;
2454 -> 2452;
2455 -> 2340;
2456 -> 2333;
2456 -> 2450;
2456 -> 2340;
2457 -> 2340;
2458 -> 2333;
2458 -> 2340;
2459 -> 2333;
2459 -> 2340;
2460 -> 2459;
2460 -> 2450;
2460 -> 2340;
2461 -> 2340;
2462 -> 2461;
2463 -> 2450;
2463 -> 2461;
2464 -> 2333;
2464 -> 2340;
2465 -> 2333;
2465 -> 2340;
2466 -> 2340;
2467 -> 2465;
2467 -> 2466;
2468 -> 2467;
2468 -> 2450;
2468 -> 2466;
2469 -> 2467;
2469 -> 2450;
2469 -> 2466;
2470 -> 2469;
2470 -> 2340;
2471 -> 2340;
2472 -> 2471;
2472 -> 2470;
2472 -> 2450;
2472 -> 2340;
2473 -> 2471;
2473 -> 2472;
2474 -> 2470;
2474 -> 2473;
2474 -> 2471;
2475 -> 2464;
2475 -> 2474;
2475 -> 2473;
2476 -> 2475;
2476 -> 2452;
2477 -> 2333;
2477 -> 2340;
2478 -> 2333;
2478 -> 2340;
2479 -> 2477;
2479 -> 0;
2479 -> 2340;
2480 -> 2340;
2481 -> 2477;
2481 -> 2340;
2482 -> 2478;
2482 -> 2481;
2482 -> 2475;
2482 -> 2340;
2483 -> 2482;
2484 -> 2483;
2485 -> 2483;
2485 -> 2482;
2486 -> 2477;
2486 -> 2482;
2487 -> 2485;
2487 -> 2477;
2487 -> 2340;
2488 -> 2485;
2488 -> 2340;
2489 -> 2488;
2489 -> 2461;
2490 -> 2333;
2490 -> 2340;
2491 -> 2333;
2491 -> 2340;
2492 -> 2490;
2492 -> 2488;
2492 -> 2340;
2493 -> 2340;
2494 -> 2492;
2494 -> 2493;
2495 -> 2492;
2495 -> 2493;
2496 -> 2491;
2496 -> 2493;
2497 -> 2493;
2498 -> 2496;
2498 -> 2497;
2499 -> 2497;
2500 -> 2498;
2500 -> 2499;
2500 -> 2488;
2500 -> 2497;
2501 -> 2500;
2501 -> 2497;
2502 -> 2501;
2502 -> 2493;
2503 -> 2495;
2503 -> 2493;
2504 -> 2494;
2504 -> 2503;
2504 -> 2500;
2504 -> 2488;
2504 -> 2493;
2505 -> 2493;
2506 -> 2496;
2506 -> 2505;
2507 -> 2506;
2507 -> 2504;
2507 -> 2505;
2508 -> 2493;
2509 -> 2507;
2509 -> 2502;
2509 -> 2493;
2510 -> 2333;
2510 -> 2340;
2511 -> 2340;
2512 -> 2510;
2512 -> 2511;
2513 -> 2511;
2514 -> 2512;
2514 -> 2513;
2514 -> 2509;
2514 -> 2511;
2515 -> 2514;
2515 -> 2340;
2516 -> 2340;
2517 -> 2515;
2517 -> 2516;
2517 -> 2340;
2518 -> 2517;
2518 -> 2461;
2519 -> 2336;
2520 -> 2519;
2521 -> 2517;
2521 -> 2519;
2522 -> 2336;
2523 -> 2517;
2523 -> 2522;
2524 -> 2333;
2524 -> 2336;
2525 -> 2336;
2526 -> 2308;
2527 -> 2308;
2528 -> 2311;
2528 -> 2523;
2529 -> 2528;
2529 -> 2523;
2530 -> 2311;
2530 -> 2523;
2530 -> 2529;
2531 -> 2523;
2532 -> 2531;
2533 -> 2531;
2533 -> 2523;
2533 -> 2530;
2534 -> 2533;
2534 -> 2523;
2535 -> 2311;
2535 -> 2523;
2536 -> 2530;
2536 -> 2523;
2537 -> 2523;
2538 -> 2523;
2539 -> 2534;
2539 -> 2538;
2540 -> 2535;
2540 -> 2538;
2541 -> 2536;
2541 -> 2538;
2542 -> 2537;
2542 -> 2538;
2543 -> 2535;
2543 -> 2538;
2544 -> 2537;
2544 -> 2538;
2545 -> 2539;
2545 -> 2538;
2546 -> 2540;
2546 -> 2538;
2547 -> 2541;
2547 -> 2538;
2548 -> 2542;
2548 -> 2538;
2549 -> 2543;
2549 -> 2538;
2550 -> 0;
2550 -> 2538;
2551 -> 2538;
2552 -> 2545;
2552 -> 2551;
2553 -> 2546;
2553 -> 2551;
2554 -> 2547;
2554 -> 2551;
2555 -> 2548;
2555 -> 2551;
2556 -> 2549;
2556 -> 2551;
2557 -> 2550;
2557 -> 2551;
2558 -> 2544;
2558 -> 2551;
2559 -> 2551;
2560 -> 2552;
2560 -> 2533;
2560 -> 2559;
2560 -> 2551;
2561 -> 2553;
2561 -> 2551;
2562 -> 2554;
2562 -> 2551;
2563 -> 2555;
2563 -> 2551;
2564 -> 2556;
2564 -> 2551;
2565 -> 2551;
2566 -> 2560;
2566 -> 2565;
2567 -> 2561;
2567 -> 2565;
2568 -> 2562;
2568 -> 2565;
2569 -> 2563;
2569 -> 2565;
2570 -> 2564;
2570 -> 2565;
2571 -> 2565;
2571 -> 2566;
2571 -> 2569;
2571 -> 2570;
2571 -> 2568;
2571 -> 2567;
2571 -> 2560;
2572 -> 2571;
2572 -> 2565;
2573 -> 2566;
2573 -> 2571;
2573 -> 2565;
2574 -> 2558;
2574 -> 2551;
2575 -> 2558;
2575 -> 2551;
2576 -> 2558;
2576 -> 2551;
2577 -> 2558;
2577 -> 2551;
2578 -> 2558;
2578 -> 2551;
2579 -> 2558;
2579 -> 2551;
2580 -> 2558;
2580 -> 2551;
2581 -> 2558;
2581 -> 2551;
2582 -> 2558;
2582 -> 2551;
2583 -> 2558;
2583 -> 2551;
2584 -> 2552;
2584 -> 2551;
2585 -> 2552;
2585 -> 2558;
2585 -> 2551;
2586 -> 2557;
2586 -> 2551;
2587 -> 2586;
2587 -> 2558;
2587 -> 2551;
2588 -> 2551;
2589 -> 2553;
2589 -> 2571;
2589 -> 2588;
2589 -> 2551;
2590 -> 2589;
2590 -> 2551;
2591 -> 2552;
2591 -> 2571;
2591 -> 2590;
2592 -> 2552;
2592 -> 2571;
2592 -> 2591;
2592 -> 2558;
2592 -> 2551;
2593 -> 2558;
2593 -> 2571;
2593 -> 2551;
2594 -> 2552;
2594 -> 2551;
2595 -> 2558;
2595 -> 2551;
2596 -> 2593;
2596 -> 2594;
2596 -> 2595;
2596 -> 2571;
2596 -> 2574;
2596 -> 2585;
2596 -> 2575;
2596 -> 2576;
2596 -> 2577;
2596 -> 2578;
2596 -> 2579;
2596 -> 2580;
2596 -> 2581;
2596 -> 2582;
2596 -> 2583;
2596 -> 2592;
2596 -> 2587;
2596 -> 2591;
2596 -> 2586;
2596 -> 2551;
2597 -> 2308;
2598 -> 2312;
2598 -> 2597;
2598 -> 2308;
2599 -> 2308;
2600 -> 2313;
2600 -> 2599;
2600 -> 2308;
2601 -> 2308;
2602 -> 2314;
2602 -> 2601;
2602 -> 2308;
2603 -> 2308;
2604 -> 2311;
2604 -> 2308;
2605 -> 2604;
2606 -> 0;
2606 -> 2604;
2607 -> 2605;
2607 -> 2606;
2607 -> 2604;
2608 -> 0;
2608 -> 2308;
2609 -> 2308;
2610 -> 2308;
2611 -> 2608;
2611 -> 2610;
2612 -> 2609;
2612 -> 2610;
2613 -> 2610;
2614 -> 2611;
2614 -> 2610;
2615 -> 2612;
2615 -> 2610;
2616 -> 2613;
2616 -> 2610;
2617 -> 2610;
2618 -> 2614;
2618 -> 2617;
2619 -> 2615;
2619 -> 2617;
2620 -> 2616;
2620 -> 2617;
2621 -> 2617;
2622 -> 2618;
2622 -> 0;
2622 -> 2617;
2623 -> 2622;
2623 -> 2619;
2623 -> 2617;
2624 -> 2623;
2625 -> 2624;
2626 -> 2625;
2627 -> 2623;
2628 -> 2596;
2629 -> 2596;
2630 -> 2623;
2631 -> 2596;
2632 -> 2618;
2632 -> 0;
2632 -> 2617;
2633 -> 2621;
2633 -> 2632;
2634 -> 2632;
2635 -> 2632;
2636 -> 2632;
2637 -> 2311;
2637 -> 2636;
2638 -> 2637;
2638 -> 2596;
2638 -> 2636;
2639 -> 2638;
2639 -> 2632;
2640 -> 2632;
2641 -> 2632;
2642 -> 2632;
2643 -> 2641;
2643 -> 2642;
2644 -> 2641;
2644 -> 2642;
2645 -> 2641;
2645 -> 2642;
2646 -> 2642;
2647 -> 2646;
2648 -> 2647;
2649 -> 2642;
2650 -> 2642;
2651 -> 2643;
2651 -> 2650;
2651 -> 2642;
2652 -> 2642;
2653 -> 2652;
2654 -> 2653;
2655 -> 2596;
2655 -> 2653;
2656 -> 2649;
2656 -> 2642;
2657 -> 2642;
2658 -> 2657;
2659 -> 2658;
2660 -> 2596;
2660 -> 2658;
2661 -> 2657;
2662 -> 2657;
2663 -> 2657;
2664 -> 2663;
2665 -> 2664;
2666 -> 2657;
2667 -> 2666;
2668 -> 2667;
2669 -> 2596;
2669 -> 0;
2669 -> 2657;
2670 -> 2657;
2671 -> 2596;
2672 -> 2596;
2672 -> 2657;
2673 -> 2596;
2673 -> 2657;
2674 -> 2596;
2674 -> 2657;
2675 -> 2673;
2675 -> 2596;
2675 -> 2657;
2676 -> 2657;
2677 -> 2657;
2678 -> 2675;
2678 -> 2677;
2679 -> 2676;
2679 -> 2677;
2680 -> 2674;
2680 -> 2677;
2681 -> 2679;
2681 -> 2677;
2682 -> 2677;
2683 -> 2677;
2684 -> 2682;
2684 -> 2683;
2685 -> 2684;
2685 -> 2683;
2686 -> 2683;
2687 -> 2686;
2688 -> 2687;
2689 -> 2687;
2690 -> 2689;
2691 -> 2680;
2691 -> 2678;
2691 -> 2687;
2692 -> 2686;
2693 -> 2692;
2694 -> 2683;
2695 -> 2683;
2696 -> 2680;
2696 -> 2691;
2696 -> 2683;
2697 -> 2683;
2698 -> 2696;
2698 -> 2697;
2698 -> 2683;
2699 -> 2695;
2699 -> 2683;
2700 -> 2696;
2700 -> 2699;
2700 -> 2691;
2700 -> 2683;
2701 -> 2684;
2701 -> 2683;
2702 -> 2683;
2703 -> 2701;
2703 -> 2702;
2704 -> 2703;
2704 -> 2702;
2705 -> 2702;
2706 -> 2702;
2707 -> 2706;
2708 -> 2706;
2709 -> 2700;
2709 -> 2708;
2709 -> 2706;
2710 -> 2707;
2710 -> 2706;
2711 -> 2700;
2711 -> 2710;
2711 -> 2706;
2712 -> 2673;
2712 -> 2657;
2713 -> 2676;
2714 -> 2713;
2715 -> 2714;
2716 -> 2711;
2716 -> 2714;
2717 -> 2676;
2718 -> 2657;
2719 -> 2718;
2720 -> 2719;
2721 -> 2718;
2722 -> 2718;
2723 -> 2596;
2723 -> 2657;
2724 -> 2723;
2724 -> 2657;
2725 -> 2657;
2726 -> 2657;
2727 -> 2725;
2727 -> 2726;
2728 -> 2727;
2728 -> 2726;
2729 -> 2726;
2730 -> 2729;
2731 -> 2730;
2732 -> 2730;
2733 -> 2732;
2734 -> 2729;
2735 -> 2734;
2736 -> 2726;
2737 -> 2726;
2738 -> 2726;
2739 -> 2737;
2739 -> 2726;
2740 -> 2727;
2740 -> 2726;
2741 -> 2726;
2742 -> 2740;
2742 -> 2741;
2743 -> 2742;
2743 -> 2741;
2744 -> 2741;
2745 -> 2741;
2746 -> 2745;
2747 -> 2745;
2748 -> 2746;
2748 -> 2745;
2749 -> 2657;
2750 -> 2749;
2751 -> 2750;
2752 -> 2711;
2752 -> 2750;
2753 -> 2657;
2754 -> 2596;
2754 -> 2657;
2755 -> 2596;
2755 -> 2657;
2756 -> 2657;
2757 -> 2754;
2757 -> 2756;
2758 -> 2756;
2759 -> 2757;
2759 -> 2711;
2759 -> 2758;
2760 -> 2758;
2761 -> 2759;
2761 -> 2657;
2762 -> 2755;
2762 -> 2657;
2763 -> 2761;
2763 -> 2762;
2763 -> 2657;
2764 -> 2657;
2765 -> 2763;
2766 -> 2763;
2766 -> 2596;
2766 -> 2657;
2767 -> 2596;
2767 -> 2657;
2768 -> 2596;
2768 -> 2657;
2769 -> 2767;
2769 -> 2657;
2770 -> 2769;
2770 -> 2763;
2770 -> 2657;
2771 -> 2767;
2771 -> 2770;
2771 -> 2657;
2772 -> 2657;
2773 -> 2768;
2773 -> 2772;
2774 -> 2772;
2775 -> 2774;
2776 -> 2775;
2777 -> 2773;
2777 -> 2770;
2777 -> 2776;
2778 -> 2773;
2778 -> 2770;
2778 -> 2776;
2779 -> 2778;
2779 -> 2775;
2780 -> 2773;
2780 -> 2770;
2780 -> 2775;
2781 -> 2772;
2782 -> 2780;
2782 -> 2657;
2783 -> 2657;
2784 -> 2768;
2784 -> 2783;
2785 -> 2784;
2785 -> 2780;
2785 -> 2783;
2786 -> 2785;
2787 -> 2786;
2787 -> 2785;
2788 -> 2785;
2789 -> 2787;
2789 -> 2788;
2789 -> 2785;
2790 -> 2789;
2790 -> 2785;
2791 -> 2790;
2791 -> 2784;
2791 -> 2785;
2792 -> 2784;
2792 -> 2789;
2792 -> 2791;
2792 -> 2783;
2793 -> 2792;
2793 -> 2657;
2794 -> 2793;
2795 -> 2767;
2795 -> 2794;
2795 -> 2657;
2796 -> 2794;
2796 -> 2775;
2797 -> 2794;
2797 -> 2657;
2798 -> 2596;
2798 -> 2657;
2799 -> 2596;
2799 -> 2657;
2800 -> 2799;
2800 -> 2794;
2800 -> 2657;
2801 -> 2596;
2801 -> 2794;
2801 -> 2657;
2802 -> 2657;
2803 -> 2643;
2803 -> 2642;
2804 -> 2803;
2805 -> 2803;
2806 -> 2642;
2807 -> 2645;
2807 -> 2806;
2807 -> 2642;
2808 -> 2643;
2808 -> 2642;
2809 -> 2644;
2809 -> 2642;
2810 -> 2642;
2811 -> 2808;
2811 -> 2810;
2812 -> 2809;
2812 -> 2810;
2813 -> 2810;
2814 -> 2811;
2814 -> 2813;
2814 -> 2810;
2815 -> 2794;
2816 -> 2794;
2817 -> 2794;
2818 -> 2794;
2818 -> 0;
2819 -> 2794;
2820 -> 2794;
2820 -> 0;
2821 -> 2794;
2821 -> 0;
2822 -> 2794;
2822 -> 0;
2823 -> 2794;
2823 -> 0;
2824 -> 2794;
2824 -> 0;
2825 -> 2794;
2825 -> 0;
2826 -> 2794;
2827 -> 2826;
2827 -> 2794;
2828 -> 2794;
2829 -> 2794;
2830 -> 2794;
2831 -> 0;
2831 -> 2794;
2832 -> 2794;
2832 -> 2830;
2832 -> 0;
2832 -> 2826;
2833 -> 2832;
2833 -> 0;
2833 -> 2794;
2834 -> 2832;
2834 -> 2794;
2835 -> 2794;
2836 -> 2834;
2836 -> 2835;
2837 -> 2836;
2837 -> 2835;
2838 -> 2837;
2839 -> 2832;
2840 -> 2839;
2840 -> 2832;
2841 -> 2794;
2841 -> 2832;
2842 -> 2832;
2843 -> 2832;
2844 -> 2843;
2844 -> 2832;
2845 -> 2842;
2845 -> 2844;
2846 -> 2832;
2847 -> 2845;
2847 -> 2846;
2847 -> 2832;
2848 -> 2847;
2848 -> 2839;
2848 -> 2832;
2849 -> 2839;
2849 -> 2832;
2850 -> 2838;
2850 -> 2849;
2851 -> 2832;
2851 -> 2839;
2851 -> 2844;
2852 -> 2851;
2852 -> 2846;
2852 -> 2832;
2853 -> 2838;
2853 -> 2794;
2854 -> 2851;
2854 -> 0;
2854 -> 2794;
2855 -> 2851;
2855 -> 0;
2856 -> 2851;
2856 -> 0;
2856 -> 2794;
2857 -> 2851;
2857 -> 0;
2857 -> 2794;
2858 -> 2851;
2858 -> 0;
2858 -> 2794;
2859 -> 2851;
2859 -> 0;
2859 -> 2794;
2860 -> 2851;
2860 -> 0;
2860 -> 2794;
2861 -> 2851;
2861 -> 0;
2862 -> 2851;
2863 -> 2851;
2863 -> 0;
2864 -> 2851;
2865 -> 2851;
2865 -> 0;
2866 -> 2851;
2866 -> 0;
2867 -> 2851;
2867 -> 0;
2868 -> 2851;
2868 -> 0;
2869 -> 2851;
2869 -> 0;
2870 -> 2851;
2871 -> 2851;
2872 -> 2870;
2872 -> 2871;
2873 -> 2872;
2873 -> 2871;
2874 -> 2873;
2875 -> 2794;
2876 -> 2874;
2876 -> 2875;
2877 -> 2851;
2877 -> 2794;
2878 -> 2794;
2879 -> 2877;
2879 -> 2878;
2880 -> 2851;
2880 -> 2878;
2881 -> 2879;
2881 -> 2851;
2881 -> 0;
2881 -> 2878;
2882 -> 2881;
2883 -> 2794;
2884 -> 2870;
2884 -> 2883;
2885 -> 2884;
2885 -> 2883;
2886 -> 2885;
2887 -> 2851;
2888 -> 2851;
2889 -> 2887;
2889 -> 2851;
2890 -> 2794;
2891 -> 2889;
2891 -> 2890;
2891 -> 2794;
2892 -> 2889;
2893 -> 2794;
2894 -> 2794;
2895 -> 2894;
2895 -> 2892;
2895 -> 2794;
2896 -> 2311;
2896 -> 2892;
2896 -> 2810;
2897 -> 2632;
2898 -> 2311;
2898 -> 2892;
2898 -> 2897;
2898 -> 2632;
2899 -> 2618;
2899 -> 0;
2899 -> 2617;
2900 -> 2620;
2900 -> 2617;
2901 -> 2621;
2901 -> 2617;
2902 -> 2617;
2903 -> 2610;
2904 -> 2311;
2904 -> 2892;
2904 -> 2605;
2904 -> 2596;
2904 -> 2607;
2904 -> 2308;
2905 -> 2605;
2905 -> 2904;
2905 -> 2308;
2906 -> 2904;
2906 -> 2311;
2907 -> 2311;
2907 -> 2905;
2908 -> 2311;
2909 -> 2311;
2910 -> 2908;
2910 -> 2909;
2911 -> 2908;
2911 -> 2909;
2912 -> 2908;
2912 -> 2909;
2913 -> 2909;
2914 -> 2911;
2914 -> 2913;
2914 -> 2909;
2915 -> 2911;
2915 -> 2909;
2916 -> 2912;
2916 -> 2909;
2917 -> 2909;
2918 -> 2909;
2919 -> 2915;
2919 -> 2918;
2920 -> 2916;
2920 -> 2918;
2921 -> 2917;
2921 -> 2918;
2922 -> 2918;
2923 -> 2922;
2923 -> 2918;
2924 -> 2918;
2925 -> 2919;
2925 -> 2924;
2925 -> 2918;
2926 -> 2919;
2926 -> 2922;
2926 -> 2918;
2927 -> 2920;
2927 -> 2922;
2927 -> 2918;
2928 -> 2909;
2929 -> 2910;
2929 -> 2928;
2930 -> 2929;
2930 -> 2905;
2930 -> 2928;
2931 -> 2929;
2931 -> 2905;
2931 -> 2928;
2932 -> 2931;
2932 -> 2928;
2933 -> 2929;
2933 -> 2905;
2933 -> 2928;
2934 -> 2933;
2934 -> 2909;
2935 -> 2934;
2935 -> 2917;
2935 -> 2933;
2935 -> 2922;
2935 -> 2923;
2935 -> 2926;
2935 -> 2927;
2935 -> 2596;
2935 -> 2909;
2936 -> 2909;
2937 -> 2935;
2937 -> 2936;
2938 -> 2935;
2938 -> 2936;
2939 -> 2938;
2939 -> 2935;
2939 -> 2936;
2940 -> 2937;
2940 -> 2939;
2940 -> 2936;
2941 -> 2938;
2941 -> 2940;
2942 -> 2940;
2943 -> 2941;
2943 -> 2942;
2944 -> 2941;
2944 -> 2942;
2945 -> 2944;
2945 -> 2941;
2945 -> 2942;
2946 -> 2943;
2946 -> 2942;
2947 -> 2942;
2948 -> 2946;
2948 -> 2947;
2948 -> 2942;
2949 -> 2948;
2950 -> 2944;
2950 -> 2945;
2950 -> 2949;
2950 -> 2948;
2951 -> 2944;
2951 -> 2945;
2951 -> 2950;
2953 -> 2952;
2954 -> 2952;
2955 -> 2943;
2955 -> 2951;
2955 -> 2942;
2956 -> 2942;
2957 -> 2955;
2957 -> 2956;
2958 -> 2955;
2958 -> 2956;
2959 -> 2955;
2959 -> 2956;
2960 -> 2956;
2961 -> 2957;
2961 -> 2958;
2961 -> 2956;
2962 -> 2957;
2962 -> 2955;
2962 -> 2956;
2963 -> 2958;
2963 -> 2962;
2963 -> 2956;
2964 -> 2956;
2965 -> 2957;
2965 -> 2963;
2965 -> 2958;
2965 -> 2956;
2966 -> 2962;
2966 -> 2956;
2967 -> 2963;
2967 -> 2956;
2968 -> 2956;
2969 -> 2967;
2969 -> 2968;
2969 -> 2956;
2970 -> 2967;
2970 -> 2969;
2971 -> 2957;
2971 -> 2970;
2971 -> 2958;
2971 -> 2956;
2972 -> 2970;
2973 -> 2308;
2974 -> 2308;
2975 -> 2974;
2976 -> 2970;
2976 -> 2974;
2977 -> 2308;
2978 -> 2308;
2979 -> 2978;
2980 -> 2970;
2980 -> 2978;
2981 -> 2311;
2981 -> 2308;
2982 -> 2311;
2982 -> 2308;
2983 -> 2308;
2984 -> 2982;
2984 -> 2983;
2985 -> 2984;
2985 -> 2970;
2985 -> 2983;
2986 -> 2985;
2986 -> 2308;
2987 -> 2986;
2987 -> 2970;
2987 -> 2308;
2988 -> 2986;
2988 -> 2308;
2989 -> 2982;
2989 -> 2970;
2989 -> 2308;
2990 -> 2986;
2990 -> 2987;
2991 -> 2981;
2991 -> 2970;
2991 -> 2987;
2992 -> 2987;
2993 -> 2990;
2993 -> 2992;
2994 -> 2991;
2994 -> 2992;
2995 -> 2982;
2995 -> 2992;
2996 -> 2995;
2996 -> 2970;
2996 -> 2992;
2997 -> 2993;
2997 -> 2992;
2998 -> 2996;
2998 -> 2997;
2998 -> 2992;
2999 -> 2992;
3000 -> 2993;
3000 -> 2992;
3001 -> 2999;
3001 -> 2992;
3002 -> 2995;
3002 -> 2970;
3002 -> 3000;
3002 -> 3001;
3002 -> 2992;
3003 -> 2993;
3003 -> 2992;
3004 -> 2992;
3005 -> 2992;
3006 -> 3003;
3006 -> 3005;
3007 -> 3004;
3007 -> 3005;
3008 -> 3007;
3008 -> 3005;
3009 -> 3005;
3010 -> 3006;
3010 -> 3009;
3010 -> 3005;
3011 -> 3006;
3011 -> 3007;
3011 -> 3005;
3012 -> 2993;
3012 -> 2992;
3013 -> 3004;
3013 -> 2992;
3014 -> 2995;
3014 -> 3002;
3014 -> 3012;
3014 -> 3013;
3014 -> 3011;
3014 -> 2992;
3015 -> 3014;
3015 -> 3004;
3015 -> 2992;
3016 -> 2993;
3016 -> 3015;
3017 -> 3014;
3017 -> 3015;
3018 -> 2994;
3018 -> 3015;
3019 -> 3015;
3020 -> 3016;
3020 -> 3019;
3021 -> 3017;
3021 -> 3019;
3022 -> 3018;
3022 -> 3019;
3023 -> 2995;
3023 -> 3019;
3024 -> 3023;
3024 -> 3014;
3024 -> 3019;
3025 -> 3019;
3026 -> 3021;
3026 -> 3025;
3027 -> 3026;
3027 -> 3014;
3027 -> 3025;
3028 -> 3027;
3028 -> 3019;
3029 -> 3024;
3029 -> 3014;
3029 -> 3019;
3030 -> 3023;
3030 -> 3014;
3030 -> 0;
3030 -> 3019;
3031 -> 3028;
3031 -> 3014;
3031 -> 3019;
3032 -> 3030;
3032 -> 3031;
3032 -> 3019;
3033 -> 3020;
3033 -> 3014;
3033 -> 3019;
3034 -> 3020;
3034 -> 3014;
3034 -> 3019;
3035 -> 3019;
3036 -> 3023;
3036 -> 3014;
3036 -> 3035;
3036 -> 3019;
3037 -> 3015;
3038 -> 2992;
3039 -> 2993;
3039 -> 3014;
3039 -> 3038;
3039 -> 2992;
3040 -> 3014;
3040 -> 2992;
3041 -> 3014;
3041 -> 2992;
3042 -> 2311;
3042 -> 3041;
3042 -> 3039;
3042 -> 1;
3043 -> 2311;
3043 -> 2308;
3044 -> 3043;
3044 -> 3042;
3044 -> 2308;
3045 -> 2311;
3045 -> 2308;
3046 -> 2311;
3046 -> 2308;
3047 -> 3046;
3047 -> 3044;
3047 -> 2308;
3048 -> 2308;
3049 -> 3048;
3049 -> 3047;
3049 -> 3044;
3049 -> 2308;
3050 -> 3047;
3050 -> 3048;
3050 -> 3044;
3050 -> 3049;
3051 -> 2308;
3052 -> 2311;
3052 -> 2308;
3053 -> 2311;
3053 -> 2308;
3054 -> 3052;
3054 -> 3050;
3054 -> 2308;
3055 -> 3053;
3055 -> 3050;
3055 -> 2308;
3056 -> 3052;
3056 -> 2308;
3057 -> 2308;
3058 -> 3055;
3058 -> 3057;
3059 -> 3056;
3059 -> 3057;
3060 -> 3053;
3060 -> 3057;
3061 -> 3058;
3061 -> 3050;
3061 -> 3057;
3062 -> 3061;
3063 -> 3058;
3063 -> 3050;
3063 -> 3061;
3064 -> 3061;
3065 -> 3064;
3065 -> 3063;
3065 -> 3050;
3065 -> 3061;
3066 -> 3063;
3066 -> 3064;
3066 -> 3050;
3066 -> 3065;
3067 -> 3059;
3067 -> 3050;
3067 -> 3065;
3068 -> 3065;
3069 -> 3066;
3069 -> 3068;
3070 -> 3067;
3070 -> 3068;
3071 -> 3060;
3071 -> 3068;
3072 -> 3071;
3072 -> 3066;
3072 -> 3068;
3073 -> 3069;
3073 -> 3068;
3074 -> 3072;
3074 -> 3073;
3074 -> 3068;
3075 -> 3068;
3076 -> 3069;
3076 -> 3075;
3076 -> 3068;
3077 -> 3068;
3078 -> 3069;
3078 -> 3068;
3079 -> 3077;
3079 -> 3068;
3080 -> 3071;
3080 -> 3066;
3080 -> 3078;
3080 -> 3079;
3080 -> 3068;
3081 -> 3069;
3081 -> 3068;
3082 -> 3070;
3082 -> 3068;
3083 -> 3068;
3084 -> 3081;
3084 -> 3083;
3085 -> 3082;
3085 -> 3083;
3086 -> 3071;
3086 -> 3083;
3087 -> 3084;
3087 -> 3080;
3087 -> 3083;
3088 -> 3083;
3089 -> 3087;
3089 -> 3088;
3089 -> 3083;
3090 -> 3087;
3090 -> 3080;
3090 -> 3088;
3090 -> 3083;
3091 -> 3084;
3091 -> 3083;
3092 -> 3086;
3092 -> 3089;
3093 -> 3084;
3093 -> 3089;
3094 -> 3089;
3095 -> 3089;
3096 -> 3092;
3096 -> 3095;
3097 -> 3093;
3097 -> 3095;
3098 -> 3094;
3098 -> 3095;
3099 -> 3098;
3099 -> 3095;
3100 -> 3098;
3100 -> 3095;
3101 -> 3095;
3102 -> 3096;
3102 -> 3101;
3102 -> 3095;
3103 -> 3095;
3104 -> 3097;
3104 -> 3103;
3104 -> 3095;
3105 -> 3096;
3105 -> 3098;
3105 -> 3095;
3106 -> 3097;
3106 -> 3098;
3106 -> 3095;
3107 -> 3069;
3107 -> 3068;
3108 -> 3094;
3108 -> 3068;
3109 -> 3071;
3109 -> 3090;
3109 -> 3107;
3109 -> 3108;
3109 -> 3105;
3109 -> 3106;
3109 -> 3068;
3110 -> 3109;
3110 -> 3068;
3111 -> 3062;
3111 -> 3110;
3111 -> 3109;
3111 -> 3065;
3112 -> 3059;
3112 -> 3050;
3112 -> 3061;
3113 -> 3058;
3113 -> 3061;
3114 -> 3062;
3114 -> 3111;
3114 -> 3061;
3115 -> 3061;
3116 -> 3058;
3116 -> 3114;
3117 -> 0;
3117 -> 3116;
3118 -> 3116;
3119 -> 3059;
3119 -> 3050;
3119 -> 3117;
3119 -> 3116;
3120 -> 3062;
3120 -> 3119;
3120 -> 3061;
3121 -> 3114;
3121 -> 3057;
3122 -> 2311;
3122 -> 3121;
3122 -> 3120;
3122 -> 3114;
3122 -> 1;
3123 -> 2311;
3123 -> 2308;
3124 -> 3123;
3124 -> 3122;
3124 -> 2308;
3125 -> 2311;
3125 -> 2308;
3126 -> 3125;
3126 -> 3124;
3126 -> 2308;
3127 -> 3126;
3128 -> 2308;
3129 -> 3127;
3129 -> 3128;
3130 -> 2311;
3130 -> 3128;
3131 -> 3130;
3131 -> 3127;
3131 -> 3128;
3132 -> 2308;
3133 -> 2308;
3134 -> 3131;
3134 -> 3133;
3135 -> 2311;
3135 -> 3133;
3136 -> 3133;
3137 -> 3134;
3137 -> 3133;
3138 -> 3133;
3139 -> 3137;
3139 -> 3138;
3140 -> 3135;
3140 -> 3138;
3141 -> 3138;
3142 -> 3140;
3142 -> 3141;
3143 -> 3141;
3144 -> 3143;
3144 -> 3142;
3144 -> 3141;
3145 -> 3141;
3146 -> 3142;
3146 -> 3145;
3147 -> 3146;
3147 -> 3131;
3147 -> 3144;
3147 -> 3145;
3148 -> 3147;
3148 -> 3141;
3149 -> 3148;
3149 -> 3138;
3150 -> 3138;
3151 -> 3140;
3151 -> 3150;
3152 -> 3151;
3152 -> 3147;
3152 -> 3150;
3153 -> 3152;
3153 -> 3138;
3154 -> 3153;
3155 -> 3149;
3155 -> 3154;
3155 -> 3153;
3156 -> 3155;
3157 -> 3133;
3158 -> 3136;
3158 -> 3133;
3159 -> 3135;
3159 -> 3152;
3159 -> 3133;
3160 -> 3158;
3160 -> 3159;
3160 -> 3136;
3160 -> 3152;
3160 -> 3133;
3161 -> 3136;
3161 -> 3133;
3162 -> 3135;
3162 -> 3160;
3162 -> 3133;
3163 -> 3136;
3163 -> 3133;
3164 -> 3135;
3164 -> 3162;
3164 -> 3133;
3165 -> 3136;
3165 -> 3133;
3166 -> 3135;
3166 -> 3164;
3166 -> 3133;
3167 -> 3136;
3167 -> 3133;
3168 -> 3135;
3168 -> 3166;
3168 -> 3133;
3169 -> 3136;
3169 -> 3133;
3170 -> 3135;
3170 -> 3168;
3170 -> 3133;
3171 -> 3136;
3171 -> 3133;
3172 -> 3135;
3172 -> 3170;
3172 -> 3133;
3173 -> 3136;
3173 -> 3133;
3174 -> 3135;
3174 -> 3172;
3174 -> 3133;
3175 -> 3136;
3175 -> 3174;
3175 -> 3133;
3176 -> 2308;
3177 -> 2311;
3177 -> 2308;
3178 -> 2308;
3179 -> 2308;
3180 -> 3175;
3181 -> 3180;
3181 -> 3175;
3181 -> 0;
3182 -> 3181;
3183 -> 3180;
3183 -> 3175;
3183 -> 3181;
3184 -> 2311;
3184 -> 2308;
3185 -> 3184;
3185 -> 3182;
3185 -> 2308;
3186 -> 3184;
3186 -> 3182;
3186 -> 0;
3186 -> 3185;
3187 -> 0;
3187 -> 3186;
3188 -> 0;
3188 -> 3187;
3189 -> 2311;
3189 -> 2308;
3190 -> 2311;
3190 -> 2308;
3191 -> 3189;
3191 -> 2308;
3192 -> 3189;
3192 -> 3188;
3192 -> 2308;
3193 -> 2308;
3194 -> 3190;
3194 -> 3193;
3195 -> 3193;
3196 -> 3195;
3197 -> 3196;
3198 -> 3188;
3198 -> 3196;
3199 -> 3193;
3200 -> 3188;
3200 -> 2308;
3201 -> 2308;
3202 -> 3190;
3202 -> 3201;
3203 -> 2311;
3203 -> 2308;
3204 -> 2311;
3204 -> 2308;
3205 -> 2311;
3205 -> 2308;
3206 -> 2311;
3206 -> 2308;
3207 -> 2308;
3208 -> 3206;
3208 -> 3188;
3208 -> 3207;
3209 -> 3207;
3210 -> 3209;
3211 -> 3210;
3212 -> 3208;
3212 -> 3210;
3213 -> 3207;
3214 -> 3208;
3214 -> 2308;
3215 -> 3214;
3215 -> 3203;
3215 -> 3208;
3215 -> 2308;
3216 -> 2308;
3217 -> 3216;
3217 -> 2308;
3218 -> 3205;
3218 -> 3217;
3218 -> 3188;
3218 -> 3216;
3218 -> 3208;
3218 -> 2308;
3219 -> 2308;
3220 -> 3216;
3220 -> 3218;
3220 -> 2308;
3221 -> 3220;
3222 -> 3216;
3222 -> 3220;
3222 -> 2308;
3223 -> 3221;
3223 -> 2308;
3224 -> 2311;
3224 -> 3223;
3224 -> 3222;
3224 -> 1;
3225 -> 2311;
3225 -> 2308;
3226 -> 2311;
3226 -> 2308;
3227 -> 2308;
3228 -> 2311;
3228 -> 3227;
3228 -> 3224;
3228 -> 1;
3229 -> 2308;
3230 -> 3228;
3230 -> 0;
3230 -> 3229;
3231 -> 3229;
3232 -> 3228;
3233 -> 3228;
3233 -> 3229;
3234 -> 3229;
3235 -> 3234;
3236 -> 3228;
3236 -> 3234;
3237 -> 3229;
3238 -> 3229;
3239 -> 2311;
3239 -> 2308;
3240 -> 2311;
3240 -> 2308;
3241 -> 2311;
3241 -> 2308;
3242 -> 2311;
3242 -> 2308;
3243 -> 2311;
3243 -> 2308;
3244 -> 2311;
3244 -> 2308;
3245 -> 3239;
3245 -> 2308;
3246 -> 3245;
3246 -> 3228;
3246 -> 2308;
3247 -> 2308;
3248 -> 3242;
3248 -> 3247;
3248 -> 2308;
3249 -> 3239;
3249 -> 2308;
3250 -> 3240;
3250 -> 2308;
3251 -> 3241;
3251 -> 2308;
3252 -> 3243;
3252 -> 2308;
3253 -> 2308;
3254 -> 3249;
3254 -> 3253;
3255 -> 3250;
3255 -> 3253;
3256 -> 3251;
3256 -> 3253;
3257 -> 3252;
3257 -> 3253;
3258 -> 3244;
3258 -> 3253;
3259 -> 3253;
3260 -> 3253;
3261 -> 3254;
3261 -> 3246;
3261 -> 3253;
3262 -> 3261;
3262 -> 3246;
3262 -> 3253;
3263 -> 3254;
3263 -> 3246;
3263 -> 3253;
3264 -> 3254;
3264 -> 3263;
3264 -> 3253;
3265 -> 3257;
3265 -> 3264;
3266 -> 3254;
3266 -> 3263;
3266 -> 3265;
3267 -> 3261;
3267 -> 3265;
3268 -> 3265;
3269 -> 3267;
3269 -> 3268;
3270 -> 3268;
3271 -> 3269;
3271 -> 3270;
3271 -> 3268;
3272 -> 3271;
3273 -> 3269;
3273 -> 3263;
3273 -> 3271;
3274 -> 3268;
3275 -> 3274;
3275 -> 3265;
3276 -> 3266;
3276 -> 3275;
3276 -> 3265;
3277 -> 3254;
3277 -> 3276;
3278 -> 3254;
3278 -> 3263;
3278 -> 3276;
3279 -> 3253;
3280 -> 3258;
3280 -> 3263;
3280 -> 3279;
3280 -> 3253;
3281 -> 3254;
3281 -> 3263;
3281 -> 3253;
3282 -> 2308;
3283 -> 3242;
3283 -> 3282;
3283 -> 2308;
3284 -> 3281;
3284 -> 3283;
3285 -> 2311;
3285 -> 2308;
3286 -> 2311;
3286 -> 2308;
3287 -> 2311;
3287 -> 2308;
3288 -> 2311;
3288 -> 2308;
3289 -> 2308;
3290 -> 3287;
3290 -> 3289;
3290 -> 2308;
3291 -> 3285;
3291 -> 3284;
3291 -> 2308;
3292 -> 3285;
3292 -> 3291;
3293 -> 3286;
3293 -> 3291;
3294 -> 3287;
3294 -> 3291;
3295 -> 3291;
3296 -> 3291;
3297 -> 3292;
3297 -> 3296;
3298 -> 3293;
3298 -> 3296;
3299 -> 3294;
3299 -> 3296;
3300 -> 3295;
3300 -> 3296;
3301 -> 3295;
3301 -> 3296;
3302 -> 3288;
3302 -> 3296;
3303 -> 3297;
3303 -> 3284;
3303 -> 3296;
3304 -> 3296;
3305 -> 3299;
3305 -> 3304;
3305 -> 3296;
3306 -> 3297;
3306 -> 3303;
3306 -> 3296;
3307 -> 3297;
3307 -> 3303;
3307 -> 3306;
3308 -> 3297;
3308 -> 3303;
3308 -> 0;
3308 -> 3296;
3309 -> 3297;
3309 -> 3303;
3309 -> 3296;
3310 -> 3301;
3310 -> 3309;
3311 -> 3310;
3312 -> 3310;
3313 -> 3297;
3313 -> 3303;
3313 -> 3310;
3314 -> 3310;
3315 -> 3313;
3315 -> 3314;
3316 -> 3314;
3317 -> 3315;
3317 -> 3316;
3318 -> 3316;
3319 -> 3317;
3319 -> 3318;
3319 -> 3316;
3320 -> 3316;
3321 -> 3320;
3321 -> 3314;
3322 -> 3297;
3322 -> 3303;
3322 -> 3321;
3323 -> 3297;
3323 -> 3303;
3323 -> 3296;
3324 -> 3302;
3324 -> 3303;
3324 -> 3296;
3325 -> 3297;
3325 -> 3303;
3325 -> 3296;
3326 -> 2311;
3326 -> 2308;
3327 -> 2311;
3327 -> 2308;
3328 -> 2311;
3328 -> 2308;
3329 -> 2311;
3329 -> 2308;
3330 -> 2311;
3330 -> 2308;
3331 -> 2311;
3331 -> 2308;
3332 -> 2308;
3333 -> 3328;
3333 -> 3332;
3333 -> 2308;
3334 -> 3326;
3334 -> 3324;
3334 -> 2308;
3335 -> 3326;
3335 -> 3324;
3335 -> 3334;
3336 -> 3326;
3336 -> 3324;
3336 -> 0;
3336 -> 2308;
3337 -> 3326;
3337 -> 3324;
3337 -> 2308;
3338 -> 3330;
3338 -> 3337;
3339 -> 3326;
3339 -> 3324;
3339 -> 2308;
3340 -> 2311;
3340 -> 2308;
3341 -> 2311;
3341 -> 2308;
3342 -> 2311;
3342 -> 2308;
3343 -> 3342;
3343 -> 3324;
3343 -> 2308;
3344 -> 3340;
3344 -> 2308;
3345 -> 2308;
3346 -> 3340;
3346 -> 3345;
3346 -> 2308;
3347 -> 2308;
3348 -> 3340;
3348 -> 2308;
3349 -> 3347;
3349 -> 2308;
3350 -> 3324;
3351 -> 3326;
3351 -> 3350;
3351 -> 2308;
3352 -> 3326;
3352 -> 3350;
3352 -> 3351;
3353 -> 3326;
3353 -> 3350;
3353 -> 0;
3353 -> 2308;
3354 -> 3326;
3354 -> 3350;
3354 -> 2308;
3355 -> 3330;
3355 -> 3354;
3356 -> 3326;
3356 -> 3350;
3356 -> 2308;
3357 -> 2311;
3357 -> 2308;
3358 -> 2311;
3358 -> 2308;
3359 -> 3357;
3359 -> 2308;
3360 -> 2308;
3361 -> 3359;
3361 -> 3360;
3361 -> 3350;
3361 -> 2308;
3362 -> 3357;
3362 -> 2308;
3363 -> 3362;
3363 -> 3350;
3363 -> 3361;
3363 -> 2308;
3364 -> 2308;
3365 -> 3363;
3365 -> 3364;
3366 -> 3365;
3366 -> 3363;
3366 -> 3364;
3367 -> 3365;
3367 -> 3363;
3367 -> 3366;
3368 -> 3367;
3368 -> 3366;
3369 -> 3366;
3370 -> 3368;
3370 -> 3369;
3371 -> 3370;
3371 -> 3363;
3371 -> 0;
3371 -> 3369;
3372 -> 3370;
3372 -> 3363;
3372 -> 3369;
3373 -> 3369;
3374 -> 3372;
3374 -> 3373;
3375 -> 3373;
3376 -> 3374;
3376 -> 3375;
3376 -> 3373;
3377 -> 3376;
3378 -> 3374;
3378 -> 3363;
3378 -> 3376;
3379 -> 3373;
3380 -> 3379;
3380 -> 3369;
3381 -> 3371;
3381 -> 3380;
3381 -> 3369;
3382 -> 3364;
3383 -> 3382;
3383 -> 2308;
3384 -> 3363;
3384 -> 3383;
3384 -> 2308;
3385 -> 3357;
3385 -> 2308;
3386 -> 3384;
3386 -> 2308;
3387 -> 2308;
3388 -> 3386;
3388 -> 3387;
3389 -> 3388;
3389 -> 3386;
3389 -> 3387;
3390 -> 3388;
3390 -> 3386;
3390 -> 3389;
3391 -> 3390;
3391 -> 3389;
3392 -> 3389;
3393 -> 3391;
3393 -> 3392;
3394 -> 3393;
3394 -> 3386;
3394 -> 0;
3394 -> 3392;
3395 -> 3393;
3395 -> 3386;
3395 -> 3392;
3396 -> 3392;
3397 -> 3395;
3397 -> 3396;
3398 -> 3396;
3399 -> 3397;
3399 -> 3398;
3399 -> 3396;
3400 -> 3399;
3401 -> 3397;
3401 -> 3386;
3401 -> 3399;
3402 -> 3396;
3403 -> 3402;
3403 -> 3392;
3404 -> 3394;
3404 -> 3403;
3404 -> 3392;
3405 -> 3387;
3406 -> 3384;
3406 -> 2308;
3407 -> 3357;
3407 -> 3406;
3408 -> 3406;
3409 -> 3407;
3409 -> 3408;
3409 -> 3350;
3409 -> 3386;
3409 -> 3406;
3410 -> 3286;
3410 -> 3409;
3411 -> 3287;
3411 -> 3409;
3412 -> 3410;
3412 -> 3409;
3413 -> 3411;
3413 -> 3409;
3414 -> 3409;
3415 -> 3409;
3416 -> 3409;
3417 -> 3413;
3417 -> 3416;
3417 -> 3409;
3418 -> 3409;
3419 -> 3409;
3419 -> 3418;
3420 -> 3409;
3420 -> 0;
3421 -> 3409;
3422 -> 3415;
3422 -> 3421;
3423 -> 3422;
3424 -> 3422;
3425 -> 3409;
3425 -> 3422;
3426 -> 3422;
3427 -> 3425;
3427 -> 3426;
3428 -> 3426;
3429 -> 3427;
3429 -> 3428;
3430 -> 3428;
3431 -> 3429;
3431 -> 3430;
3431 -> 3428;
3432 -> 3428;
3433 -> 3432;
3433 -> 3426;
3434 -> 3409;
3434 -> 3433;
3435 -> 3409;
3436 -> 2311;
3436 -> 2308;
3437 -> 2311;
3437 -> 2308;
3438 -> 2311;
3438 -> 2308;
3439 -> 3436;
3439 -> 3409;
3439 -> 2308;
3440 -> 2308;
3441 -> 3439;
3441 -> 3440;
3441 -> 2308;
3442 -> 3437;
3442 -> 0;
3442 -> 3441;
3443 -> 3439;
3443 -> 3437;
3443 -> 3441;
3444 -> 3437;
3444 -> 0;
3444 -> 3443;
3445 -> 3286;
3445 -> 3443;
3446 -> 3287;
3446 -> 3443;
3447 -> 3445;
3447 -> 3443;
3448 -> 3446;
3448 -> 3443;
3449 -> 3443;
3450 -> 3443;
3451 -> 3443;
3452 -> 3448;
3452 -> 3451;
3452 -> 3443;
3453 -> 3443;
3454 -> 3443;
3454 -> 3453;
3455 -> 3443;
3455 -> 0;
3456 -> 3443;
3457 -> 3450;
3457 -> 3456;
3458 -> 3457;
3459 -> 3457;
3460 -> 3443;
3460 -> 3457;
3461 -> 3457;
3462 -> 3460;
3462 -> 3461;
3463 -> 3461;
3464 -> 3462;
3464 -> 3463;
3465 -> 3463;
3466 -> 3464;
3466 -> 3465;
3466 -> 3463;
3467 -> 3463;
3468 -> 3467;
3468 -> 3461;
3469 -> 3443;
3469 -> 3468;
3470 -> 3443;
3471 -> 3326;
3471 -> 3443;
3471 -> 2308;
3472 -> 3326;
3472 -> 3443;
3472 -> 3471;
3473 -> 3326;
3473 -> 3443;
3473 -> 0;
3473 -> 2308;
3474 -> 3326;
3474 -> 3443;
3474 -> 2308;
3475 -> 3330;
3475 -> 3474;
3476 -> 3326;
3476 -> 3443;
3476 -> 2308;
3477 -> 3342;
3477 -> 3443;
3477 -> 2308;
3478 -> 3443;
3478 -> 3364;
3479 -> 3478;
3479 -> 3443;
3479 -> 3364;
3480 -> 3478;
3480 -> 3443;
3480 -> 3479;
3481 -> 3480;
3481 -> 3479;
3482 -> 3479;
3483 -> 3481;
3483 -> 3482;
3484 -> 3483;
3484 -> 3443;
3484 -> 0;
3484 -> 3482;
3485 -> 3483;
3485 -> 3443;
3485 -> 3482;
3486 -> 3482;
3487 -> 3485;
3487 -> 3486;
3488 -> 3486;
3489 -> 3487;
3489 -> 3488;
3489 -> 3486;
3490 -> 3489;
3491 -> 3487;
3491 -> 3443;
3491 -> 3489;
3492 -> 3486;
3493 -> 3492;
3493 -> 3482;
3494 -> 3484;
3494 -> 3493;
3494 -> 3482;
3495 -> 3443;
3495 -> 3387;
3496 -> 3495;
3496 -> 3443;
3496 -> 3387;
3497 -> 3495;
3497 -> 3443;
3497 -> 3496;
3498 -> 3497;
3498 -> 3496;
3499 -> 3496;
3500 -> 3498;
3500 -> 3499;
3501 -> 3500;
3501 -> 3443;
3501 -> 0;
3501 -> 3499;
3502 -> 3500;
3502 -> 3443;
3502 -> 3499;
3503 -> 3499;
3504 -> 3502;
3504 -> 3503;
3505 -> 3503;
3506 -> 3504;
3506 -> 3505;
3506 -> 3503;
3507 -> 3506;
3508 -> 3504;
3508 -> 3443;
3508 -> 3506;
3509 -> 3503;
3510 -> 3509;
3510 -> 3499;
3511 -> 3501;
3511 -> 3510;
3511 -> 3499;
3512 -> 3254;
3512 -> 3443;
3512 -> 3253;
3513 -> 3512;
3513 -> 3443;
3513 -> 3253;
3514 -> 3254;
3514 -> 3443;
3514 -> 3253;
3515 -> 3257;
3515 -> 3514;
3516 -> 3254;
3516 -> 3443;
3516 -> 3515;
3517 -> 3512;
3517 -> 3515;
3518 -> 3515;
3519 -> 3517;
3519 -> 3518;
3520 -> 3518;
3521 -> 3519;
3521 -> 3520;
3521 -> 3518;
3522 -> 3521;
3523 -> 3519;
3523 -> 3443;
3523 -> 3521;
3524 -> 3518;
3525 -> 3524;
3525 -> 3515;
3526 -> 3516;
3526 -> 3525;
3526 -> 3515;
3527 -> 3254;
3527 -> 3526;
3528 -> 3254;
3528 -> 3443;
3528 -> 3526;
3529 -> 3258;
3529 -> 3443;
3529 -> 3279;
3529 -> 3253;
3530 -> 3466;
3531 -> 3464;
3531 -> 3443;
3531 -> 3466;
3532 -> 2308;
3533 -> 2981;
3533 -> 3443;
3534 -> 3533;
3534 -> 3443;
3535 -> 3443;
3536 -> 3443;
3537 -> 2308;
3538 -> 3536;
3538 -> 3128;
3539 -> 3536;
3539 -> 3133;
3540 -> 3539;
3540 -> 3133;
3541 -> 3540;
3541 -> 3138;
3542 -> 3536;
3542 -> 3141;
3543 -> 3542;
3543 -> 3138;
3544 -> 3536;
3544 -> 3138;
3545 -> 3544;
3546 -> 3543;
3546 -> 3545;
3546 -> 3544;
3547 -> 3546;
3548 -> 3189;
3548 -> 3536;
3548 -> 2308;
3549 -> 3536;
3549 -> 3196;
3550 -> 3536;
3550 -> 2308;
3551 -> 3536;
3551 -> 3210;
3552 -> 3536;
3552 -> 2308;
3553 -> 3552;
3553 -> 3203;
3553 -> 3536;
3553 -> 2308;
3554 -> 3216;
3554 -> 3536;
3555 -> 3536;
3556 -> 3216;
3556 -> 3536;
3557 -> 3556;
3557 -> 3554;
3557 -> 3536;
3558 -> 3536;
3559 -> 3557;
3559 -> 3558;
3559 -> 3536;
3560 -> 3204;
3560 -> 3559;
3561 -> 3557;
3561 -> 3559;
3562 -> 3559;
3563 -> 3560;
3563 -> 3562;
3564 -> 3561;
3564 -> 3562;
3565 -> 3206;
3565 -> 3562;
3566 -> 3564;
3566 -> 3563;
3566 -> 3562;
3567 -> 3566;
3568 -> 3326;
3568 -> 3567;
3568 -> 2308;
3569 -> 3326;
3569 -> 3567;
3569 -> 3568;
3570 -> 3326;
3570 -> 3567;
3570 -> 0;
3570 -> 2308;
3571 -> 3326;
3571 -> 3567;
3571 -> 2308;
3572 -> 3330;
3572 -> 3571;
3573 -> 3572;
3574 -> 3572;
3575 -> 3326;
3575 -> 3567;
3575 -> 3572;
3576 -> 3572;
3577 -> 3575;
3577 -> 3576;
3578 -> 3576;
3579 -> 3577;
3579 -> 3578;
3580 -> 3578;
3581 -> 3579;
3581 -> 3580;
3581 -> 3578;
3582 -> 3578;
3583 -> 3582;
3583 -> 3576;
3584 -> 3326;
3584 -> 3567;
3584 -> 3583;
3585 -> 3326;
3585 -> 3567;
3585 -> 2308;
3586 -> 3342;
3586 -> 3567;
3586 -> 2308;
3587 -> 3189;
3587 -> 3567;
3587 -> 2308;
3588 -> 3567;
3588 -> 3196;
3589 -> 3567;
3589 -> 2308;
3590 -> 3567;
3590 -> 3210;
3591 -> 3567;
3591 -> 2308;
3592 -> 3591;
3592 -> 3203;
3592 -> 3567;
3592 -> 2308;
3593 -> 3286;
3593 -> 3567;
3594 -> 3287;
3594 -> 3567;
3595 -> 3593;
3595 -> 3567;
3596 -> 3594;
3596 -> 3567;
3597 -> 3567;
3598 -> 3567;
3599 -> 3567;
3600 -> 3596;
3600 -> 3599;
3600 -> 3567;
3601 -> 3567;
3602 -> 3567;
3602 -> 3601;
3603 -> 3567;
3603 -> 0;
3604 -> 3567;
3605 -> 3598;
3605 -> 3604;
3606 -> 3605;
3607 -> 3605;
3608 -> 3567;
3608 -> 3605;
3609 -> 3605;
3610 -> 3608;
3610 -> 3609;
3611 -> 3609;
3612 -> 3610;
3612 -> 3611;
3613 -> 3611;
3614 -> 3612;
3614 -> 3613;
3614 -> 3611;
3615 -> 3611;
3616 -> 3615;
3616 -> 3609;
3617 -> 3567;
3617 -> 3616;
3618 -> 3567;
3619 -> 2311;
3619 -> 2308;
3620 -> 2311;
3620 -> 3567;
3620 -> 2308;
3621 -> 3567;
3622 -> 3567;
3622 -> 3621;
3623 -> 3621;
3624 -> 3623;
3624 -> 3622;
3624 -> 3567;
3624 -> 3621;
3625 -> 3622;
3625 -> 3623;
3625 -> 3567;
3625 -> 3624;
3626 -> 3624;
3627 -> 3567;
3627 -> 3624;
3628 -> 3624;
3629 -> 3625;
3629 -> 3628;
3630 -> 3626;
3630 -> 3628;
3631 -> 3627;
3631 -> 3628;
3632 -> 3628;
3633 -> 3629;
3633 -> 3625;
3633 -> 0;
3633 -> 3628;
3634 -> 3633;
3635 -> 3629;
3635 -> 3625;
3635 -> 3628;
3636 -> 3635;
3637 -> 3635;
3638 -> 3636;
3638 -> 3637;
3638 -> 3635;
3639 -> 3636;
3639 -> 3638;
3640 -> 3634;
3640 -> 3638;
3641 -> 3631;
3641 -> 3638;
3642 -> 3638;
3643 -> 3639;
3643 -> 3642;
3644 -> 3640;
3644 -> 3642;
3645 -> 3641;
3645 -> 3642;
3646 -> 3642;
3647 -> 3643;
3647 -> 3625;
3647 -> 3635;
3647 -> 0;
3647 -> 3642;
3648 -> 3643;
3648 -> 3625;
3648 -> 3635;
3648 -> 0;
3648 -> 3647;
3649 -> 3648;
3650 -> 3638;
3651 -> 3567;
3651 -> 3625;
3652 -> 3567;
3653 -> 3567;
3653 -> 3625;
3653 -> 3652;
3654 -> 3653;
3654 -> 3567;
3655 -> 3567;
3656 -> 3567;
3657 -> 3567;
3658 -> 3656;
3658 -> 3657;
3659 -> 3625;
3659 -> 3657;
3660 -> 3655;
3660 -> 3657;
3661 -> 3657;
3662 -> 3659;
3662 -> 3661;
3662 -> 3657;
3663 -> 3659;
3663 -> 3625;
3663 -> 3661;
3663 -> 3657;
3664 -> 3567;
3665 -> 3567;
3665 -> 3625;
3665 -> 3664;
3666 -> 3665;
3666 -> 3567;
3667 -> 3656;
3667 -> 3666;
3668 -> 3567;
3668 -> 3625;
3668 -> 3666;
3669 -> 3655;
3669 -> 3666;
3670 -> 3666;
3671 -> 3667;
3671 -> 3670;
3672 -> 3668;
3672 -> 3670;
3673 -> 3669;
3673 -> 3670;
3674 -> 3670;
3675 -> 3672;
3675 -> 3674;
3675 -> 3670;
3676 -> 3666;
3677 -> 3656;
3677 -> 3567;
3678 -> 3567;
3679 -> 2311;
3679 -> 3668;
3679 -> 3567;
3679 -> 3678;
3680 -> 2311;
3680 -> 2308;
3681 -> 0;
3681 -> 2308;
3682 -> 3052;
3682 -> 3668;
3682 -> 2308;
3683 -> 2311;
3683 -> 2308;
3684 -> 3683;
3684 -> 3668;
3684 -> 2308;
3685 -> 2311;
3685 -> 2308;
3686 -> 3685;
3686 -> 3684;
3686 -> 2308;
3687 -> 2311;
3687 -> 3686;
3687 -> 2308;
3688 -> 2311;
3688 -> 2308;
3689 -> 2311;
3689 -> 2308;
3690 -> 3688;
3690 -> 2308;
3691 -> 3689;
3691 -> 3686;
3691 -> 3690;
3691 -> 2308;
3692 -> 2311;
3692 -> 2308;
3693 -> 2308;
3694 -> 2311;
3694 -> 3693;
3694 -> 3691;
3694 -> 1;
3695 -> 3326;
3695 -> 3694;
3695 -> 2308;
3696 -> 3326;
3696 -> 3694;
3696 -> 3695;
3697 -> 3326;
3697 -> 3694;
3697 -> 0;
3697 -> 2308;
3698 -> 3326;
3698 -> 3694;
3698 -> 2308;
3699 -> 3330;
3699 -> 3698;
3700 -> 3326;
3700 -> 3694;
3700 -> 2308;
3701 -> 3286;
3701 -> 3694;
3702 -> 3287;
3702 -> 3694;
3703 -> 3701;
3703 -> 3694;
3704 -> 3702;
3704 -> 3694;
3705 -> 3694;
3706 -> 3694;
3707 -> 3694;
3708 -> 3704;
3708 -> 3707;
3708 -> 3694;
3709 -> 3694;
3710 -> 3694;
3710 -> 3709;
3711 -> 3694;
3711 -> 0;
3712 -> 3694;
3713 -> 3706;
3713 -> 3712;
3714 -> 3713;
3715 -> 3713;
3716 -> 3694;
3716 -> 3713;
3717 -> 3713;
3718 -> 3716;
3718 -> 3717;
3719 -> 3717;
3720 -> 3718;
3720 -> 3719;
3721 -> 3719;
3722 -> 3720;
3722 -> 3721;
3722 -> 3719;
3723 -> 3719;
3724 -> 3723;
3724 -> 3717;
3725 -> 3694;
3725 -> 3724;
3726 -> 3694;
3727 -> 3437;
3727 -> 0;
3727 -> 3694;
3728 -> 3699;
3729 -> 3699;
3730 -> 3326;
3730 -> 3694;
3730 -> 3699;
3731 -> 3699;
3732 -> 3730;
3732 -> 3731;
3733 -> 3731;
3734 -> 3732;
3734 -> 3733;
3735 -> 3733;
3736 -> 3734;
3736 -> 3735;
3736 -> 3733;
3737 -> 3733;
3738 -> 3737;
3738 -> 3731;
3739 -> 3326;
3739 -> 3694;
3739 -> 3738;
3740 -> 3184;
3740 -> 3694;
3741 -> 0;
3741 -> 3740;
3742 -> 3342;
3742 -> 3741;
3742 -> 2308;
3743 -> 3326;
3743 -> 3741;
3743 -> 2308;
3744 -> 3326;
3744 -> 3741;
3744 -> 3743;
3745 -> 3326;
3745 -> 3741;
3745 -> 0;
3745 -> 2308;
3746 -> 3326;
3746 -> 3741;
3746 -> 2308;
3747 -> 3330;
3747 -> 3746;
3748 -> 3326;
3748 -> 3741;
3748 -> 2308;
3749 -> 3741;
3749 -> 0;
3749 -> 3229;
3750 -> 3741;
3751 -> 3741;
3751 -> 3229;
3752 -> 3254;
3752 -> 3741;
3752 -> 3253;
3753 -> 3752;
3753 -> 3741;
3753 -> 3253;
3754 -> 3254;
3754 -> 3741;
3754 -> 3253;
3755 -> 3257;
3755 -> 3754;
3756 -> 3254;
3756 -> 3741;
3756 -> 3755;
3757 -> 3752;
3757 -> 3755;
3758 -> 3755;
3759 -> 3757;
3759 -> 3758;
3760 -> 3758;
3761 -> 3759;
3761 -> 3760;
3761 -> 3758;
3762 -> 3761;
3763 -> 3759;
3763 -> 3741;
3763 -> 3761;
3764 -> 3758;
3765 -> 3764;
3765 -> 3755;
3766 -> 3756;
3766 -> 3765;
3766 -> 3755;
3767 -> 3254;
3767 -> 3766;
3768 -> 3254;
3768 -> 3741;
3768 -> 3766;
3769 -> 3258;
3769 -> 3741;
3769 -> 3279;
3769 -> 3253;
3770 -> 3741;
3770 -> 3364;
3771 -> 3770;
3771 -> 3741;
3771 -> 3364;
3772 -> 3770;
3772 -> 3741;
3772 -> 3771;
3773 -> 3772;
3773 -> 3771;
3774 -> 3771;
3775 -> 3773;
3775 -> 3774;
3776 -> 3775;
3776 -> 3741;
3776 -> 0;
3776 -> 3774;
3777 -> 3775;
3777 -> 3741;
3777 -> 3774;
3778 -> 3774;
3779 -> 3777;
3779 -> 3778;
3780 -> 3778;
3781 -> 3779;
3781 -> 3780;
3781 -> 3778;
3782 -> 3781;
3783 -> 3779;
3783 -> 3741;
3783 -> 3781;
3784 -> 3778;
3785 -> 3784;
3785 -> 3774;
3786 -> 3776;
3786 -> 3785;
3786 -> 3774;
3787 -> 3741;
3787 -> 3387;
3788 -> 3787;
3788 -> 3741;
3788 -> 3387;
3789 -> 3787;
3789 -> 3741;
3789 -> 3788;
3790 -> 3789;
3790 -> 3788;
3791 -> 3788;
3792 -> 3790;
3792 -> 3791;
3793 -> 3792;
3793 -> 3741;
3793 -> 0;
3793 -> 3791;
3794 -> 3792;
3794 -> 3741;
3794 -> 3791;
3795 -> 3791;
3796 -> 3794;
3796 -> 3795;
3797 -> 3795;
3798 -> 3796;
3798 -> 3797;
3798 -> 3795;
3799 -> 3798;
3800 -> 3796;
3800 -> 3741;
3800 -> 3798;
3801 -> 3795;
3802 -> 3801;
3802 -> 3791;
3803 -> 3793;
3803 -> 3802;
3803 -> 3791;
3804 -> 3286;
3804 -> 3741;
3805 -> 3287;
3805 -> 3741;
3806 -> 3804;
3806 -> 3741;
3807 -> 3805;
3807 -> 3741;
3808 -> 3741;
3809 -> 3741;
3810 -> 3741;
3811 -> 3807;
3811 -> 3810;
3811 -> 3741;
3812 -> 3741;
3813 -> 3741;
3813 -> 3812;
3814 -> 3741;
3814 -> 0;
3815 -> 3741;
3816 -> 3809;
3816 -> 3815;
3817 -> 3816;
3818 -> 3816;
3819 -> 3741;
3819 -> 3816;
3820 -> 3816;
3821 -> 3819;
3821 -> 3820;
3822 -> 3820;
3823 -> 3821;
3823 -> 3822;
3824 -> 3822;
3825 -> 3823;
3825 -> 3824;
3825 -> 3822;
3826 -> 3822;
3827 -> 3826;
3827 -> 3820;
3828 -> 3741;
3828 -> 3827;
3829 -> 3741;
3830 -> 3437;
3830 -> 0;
3830 -> 3741;
3831 -> 0;
3831 -> 3830;
3832 -> 3831;
3832 -> 3438;
3832 -> 3741;
3832 -> 3830;
3833 -> 3830;
3834 -> 3832;
3834 -> 3833;
3835 -> 3254;
3835 -> 3832;
3835 -> 3253;
3836 -> 3835;
3836 -> 3832;
3836 -> 3253;
3837 -> 3254;
3837 -> 3832;
3837 -> 3253;
3838 -> 3257;
3838 -> 3837;
3839 -> 3254;
3839 -> 3832;
3839 -> 3838;
3840 -> 3835;
3840 -> 3838;
3841 -> 3838;
3842 -> 3840;
3842 -> 3841;
3843 -> 3841;
3844 -> 3842;
3844 -> 3843;
3844 -> 3841;
3845 -> 3844;
3846 -> 3842;
3846 -> 3832;
3846 -> 3844;
3847 -> 3841;
3848 -> 3847;
3848 -> 3838;
3849 -> 3839;
3849 -> 3848;
3849 -> 3838;
3850 -> 3254;
3850 -> 3849;
3851 -> 3254;
3851 -> 3832;
3851 -> 3849;
3852 -> 3258;
3852 -> 3832;
3852 -> 3279;
3852 -> 3253;
3853 -> 3326;
3853 -> 3832;
3853 -> 2308;
3854 -> 3326;
3854 -> 3832;
3854 -> 3853;
3855 -> 3326;
3855 -> 3832;
3855 -> 0;
3855 -> 2308;
3856 -> 3326;
3856 -> 3832;
3856 -> 2308;
3857 -> 3330;
3857 -> 3856;
3858 -> 3326;
3858 -> 3832;
3858 -> 2308;
3859 -> 3342;
3859 -> 3832;
3859 -> 2308;
3860 -> 3286;
3860 -> 3832;
3861 -> 3287;
3861 -> 3832;
3862 -> 3860;
3862 -> 3832;
3863 -> 3861;
3863 -> 3832;
3864 -> 3832;
3865 -> 3832;
3866 -> 3832;
3867 -> 3863;
3867 -> 3866;
3867 -> 3832;
3868 -> 3832;
3869 -> 3832;
3869 -> 3868;
3870 -> 3832;
3870 -> 0;
3871 -> 3832;
3872 -> 3865;
3872 -> 3871;
3873 -> 3872;
3874 -> 3872;
3875 -> 3832;
3875 -> 3872;
3876 -> 3872;
3877 -> 3875;
3877 -> 3876;
3878 -> 3876;
3879 -> 3877;
3879 -> 3878;
3880 -> 3878;
3881 -> 3879;
3881 -> 3880;
3881 -> 3878;
3882 -> 3878;
3883 -> 3882;
3883 -> 3876;
3884 -> 3832;
3884 -> 3883;
3885 -> 3832;
3886 -> 3832;
3886 -> 3364;
3887 -> 3886;
3887 -> 3832;
3887 -> 3364;
3888 -> 3886;
3888 -> 3832;
3888 -> 3887;
3889 -> 3888;
3889 -> 3887;
3890 -> 3887;
3891 -> 3889;
3891 -> 3890;
3892 -> 3891;
3892 -> 3832;
3892 -> 0;
3892 -> 3890;
3893 -> 3891;
3893 -> 3832;
3893 -> 3890;
3894 -> 3890;
3895 -> 3893;
3895 -> 3894;
3896 -> 3894;
3897 -> 3895;
3897 -> 3896;
3897 -> 3894;
3898 -> 3897;
3899 -> 3895;
3899 -> 3832;
3899 -> 3897;
3900 -> 3894;
3901 -> 3900;
3901 -> 3890;
3902 -> 3892;
3902 -> 3901;
3902 -> 3890;
3903 -> 3832;
3903 -> 3387;
3904 -> 3903;
3904 -> 3832;
3904 -> 3387;
3905 -> 3903;
3905 -> 3832;
3905 -> 3904;
3906 -> 3905;
3906 -> 3904;
3907 -> 3904;
3908 -> 3906;
3908 -> 3907;
3909 -> 3908;
3909 -> 3832;
3909 -> 0;
3909 -> 3907;
3910 -> 3908;
3910 -> 3832;
3910 -> 3907;
3911 -> 3907;
3912 -> 3910;
3912 -> 3911;
3913 -> 3911;
3914 -> 3912;
3914 -> 3913;
3914 -> 3911;
3915 -> 3914;
3916 -> 3912;
3916 -> 3832;
3916 -> 3914;
3917 -> 3911;
3918 -> 3917;
3918 -> 3907;
3919 -> 3909;
3919 -> 3918;
3919 -> 3907;
3920 -> 3881;
3921 -> 3879;
3921 -> 3832;
3921 -> 3881;
3922 -> 3189;
3922 -> 3832;
3922 -> 2308;
3923 -> 3832;
3923 -> 3196;
3924 -> 3832;
3924 -> 2308;
3925 -> 3832;
3925 -> 3210;
3926 -> 3832;
3926 -> 2308;
3927 -> 3926;
3927 -> 3203;
3927 -> 3832;
3927 -> 2308;
3928 -> 3206;
3928 -> 3832;
3929 -> 2311;
3929 -> 2308;
3930 -> 2311;
3930 -> 2308;
3931 -> 2311;
3931 -> 2308;
3932 -> 2311;
3932 -> 2308;
3933 -> 2311;
3933 -> 2308;
3934 -> 2308;
3935 -> 2311;
3935 -> 3832;
3936 -> 2311;
3936 -> 3935;
3937 -> 3936;
3937 -> 1;
3938 -> 1;
3939 -> 0;
3939 -> 1;
3940 -> 1;
3941 -> 3939;
3941 -> 3940;
3942 -> 3938;
3942 -> 3940;
3943 -> 3938;
3943 -> 3940;
3944 -> 3938;
3944 -> 3940;
3945 -> 3938;
3945 -> 3940;
3946 -> 3938;
3946 -> 3940;
3947 -> 3938;
3947 -> 3940;
3948 -> 3941;
3948 -> 3940;
3949 -> 3942;
3949 -> 3940;
3950 -> 3943;
3950 -> 3940;
3951 -> 3944;
3951 -> 3940;
3952 -> 3945;
3952 -> 3940;
3953 -> 3946;
3953 -> 3940;
3954 -> 3947;
3954 -> 3940;
3955 -> 3940;
3956 -> 3948;
3956 -> 3955;
3957 -> 3949;
3957 -> 3955;
3958 -> 3950;
3958 -> 3955;
3959 -> 3951;
3959 -> 3955;
3960 -> 3952;
3960 -> 3955;
3961 -> 3953;
3961 -> 3955;
3962 -> 3954;
3962 -> 3955;
3963 -> 3956;
3963 -> 3955;
3964 -> 3956;
3964 -> 3955;
3965 -> 3955;
3966 -> 3957;
3966 -> 3955;
3967 -> 3958;
3967 -> 3955;
3968 -> 3959;
3968 -> 3955;
3969 -> 3960;
3969 -> 3955;
3970 -> 3961;
3970 -> 3955;
3972 -> 3971;
3974 -> 3973;
3975 -> 3962;
3975 -> 3955;
3976 -> 3955;
3977 -> 3964;
3977 -> 3976;
3978 -> 3965;
3978 -> 3976;
3979 -> 3966;
3979 -> 3976;
3980 -> 3967;
3980 -> 3976;
3981 -> 3968;
3981 -> 3976;
3982 -> 3969;
3982 -> 3976;
3983 -> 3970;
3983 -> 3976;
3984 -> 3964;
3984 -> 3976;
3985 -> 3975;
3985 -> 3976;
3986 -> 3965;
3986 -> 3976;
3987 -> 3965;
3987 -> 3976;
3988 -> 3965;
3988 -> 3976;
3989 -> 3988;
3989 -> 3976;
3990 -> 3988;
3990 -> 3976;
3991 -> 3988;
3991 -> 3976;
3992 -> 3988;
3992 -> 3976;
3993 -> 3988;
3993 -> 3976;
3994 -> 3988;
3994 -> 3976;
3995 -> 3988;
3995 -> 3976;
3996 -> 3988;
3996 -> 3976;
3997 -> 3988;
3997 -> 3976;
3998 -> 3988;
3998 -> 3976;
3999 -> 3988;
3999 -> 3976;
4000 -> 3988;
4000 -> 3976;
4001 -> 3988;
4001 -> 3976;
4002 -> 3988;
4002 -> 3976;
4003 -> 3988;
4003 -> 3976;
4004 -> 3977;
4004 -> 3988;
4004 -> 3976;
4005 -> 3978;
4005 -> 3988;
4005 -> 3976;
4006 -> 3979;
4006 -> 3988;
4006 -> 3976;
4007 -> 3980;
4007 -> 3988;
4007 -> 3976;
4008 -> 3981;
4008 -> 3988;
4008 -> 3976;
4009 -> 3982;
4009 -> 3988;
4009 -> 3976;
4010 -> 3983;
4010 -> 3988;
4010 -> 3976;
4011 -> 3984;
4011 -> 3976;
4012 -> 4011;
4012 -> 3988;
4012 -> 3976;
4013 -> 3985;
4013 -> 3988;
4013 -> 3976;
4014 -> 3986;
4014 -> 3988;
4014 -> 3976;
4015 -> 3987;
4015 -> 3988;
4015 -> 3976;
4016 -> 3965;
4016 -> 3940;
4017 -> 4016;
4017 -> 1;
4018 -> 4017;
4018 -> 3938;
4018 -> 1;
4019 -> 1;
4020 -> 3937;
4020 -> 4019;
4021 -> 3938;
4021 -> 4019;
4022 -> 4020;
4022 -> 4019;
4023 -> 4021;
4023 -> 4019;
4024 -> 4019;
4025 -> 4022;
4025 -> 4024;
4026 -> 4023;
4026 -> 4024;
4027 -> 4025;
4027 -> 4024;
4028 -> 4026;
4028 -> 4024;
4029 -> 4024;
4030 -> 4024;
4031 -> 4027;
4031 -> 4030;
4032 -> 4028;
4032 -> 4030;
4033 -> 4029;
4033 -> 4030;
4034 -> 4030;
4035 -> 4032;
4035 -> 4034;
4035 -> 4030;
4036 -> 4032;
4036 -> 4030;
4037 -> 4036;
4037 -> 3938;
4037 -> 4018;
4037 -> 4004;
4037 -> 4005;
4037 -> 4015;
4037 -> 4006;
4037 -> 4007;
4037 -> 4008;
4037 -> 4010;
4037 -> 4012;
4037 -> 3997;
4037 -> 4013;
4037 -> 4014;
4037 -> 4009;
4037 -> 4001;
4037 -> 4002;
4037 -> 4003;
4037 -> 3964;
4037 -> 4030;
4038 -> 4030;
4039 -> 4036;
4039 -> 4038;
4039 -> 3938;
4039 -> 4018;
4039 -> 4004;
4039 -> 4005;
4039 -> 4015;
4039 -> 4006;
4039 -> 4007;
4039 -> 4008;
4039 -> 4010;
4039 -> 4012;
4039 -> 3997;
4039 -> 4013;
4039 -> 4014;
4039 -> 4009;
4039 -> 4001;
4039 -> 4002;
4039 -> 4003;
4039 -> 3964;
4039 -> 4030;
4040 -> 4039;
4040 -> 4038;
4041 -> 4040;
4041 -> 4039;
4041 -> 4038;
4042 -> 4032;
4042 -> 4030;
4043 -> 4042;
4043 -> 4041;
4043 -> 4030;
4044 -> 4030;
4045 -> 4042;
4045 -> 4044;
4045 -> 4041;
4045 -> 4030;
4046 -> 4045;
4046 -> 4044;
4047 -> 4046;
4047 -> 4045;
4047 -> 4044;
4048 -> 4031;
4048 -> 4030;
4049 -> 4033;
4049 -> 4041;
4049 -> 4047;
4049 -> 4030;
4050 -> 4048;
4050 -> 4049;
4050 -> 4030;
4051 -> 4030;
4052 -> 4050;
4052 -> 4051;
4053 -> 4050;
4053 -> 4051;
4054 -> 4050;
4054 -> 4051;
4055 -> 4050;
4055 -> 4051;
4056 -> 4050;
4056 -> 4051;
4057 -> 4056;
4057 -> 4051;
4058 -> 4056;
4058 -> 4051;
4059 -> 4056;
4059 -> 4051;
4060 -> 4056;
4060 -> 4051;
4061 -> 4056;
4061 -> 4051;
4062 -> 4056;
4062 -> 4051;
4063 -> 4056;
4063 -> 4051;
4064 -> 4056;
4064 -> 4051;
4065 -> 4056;
4065 -> 4051;
4066 -> 4056;
4066 -> 4051;
4067 -> 4056;
4067 -> 4051;
4068 -> 4052;
4068 -> 4050;
4068 -> 4056;
4068 -> 4051;
4069 -> 4052;
4069 -> 4050;
4069 -> 4056;
4069 -> 4051;
4070 -> 4052;
4070 -> 4050;
4070 -> 4056;
4070 -> 4051;
4071 -> 4052;
4071 -> 4050;
4071 -> 4056;
4071 -> 4051;
4072 -> 4054;
4072 -> 4051;
4073 -> 4072;
4074 -> 4073;
4074 -> 4056;
4074 -> 4051;
4075 -> 4055;
4075 -> 4051;
4076 -> 4075;
4077 -> 4076;
4077 -> 4056;
4077 -> 4051;
4078 -> 4051;
4079 -> 4051;
4080 -> 4052;
4080 -> 4050;
4080 -> 4079;
4080 -> 4051;
4081 -> 4052;
4081 -> 4050;
4081 -> 4051;
4082 -> 0;
4082 -> 4051;
4083 -> 4052;
4083 -> 4080;
4084 -> 4080;
4085 -> 4083;
4085 -> 4084;
4085 -> 4080;
4086 -> 4083;
4086 -> 4081;
4086 -> 4056;
4086 -> 4085;
4087 -> 4052;
4087 -> 4081;
4087 -> 4056;
4087 -> 4085;
4088 -> 4053;
4088 -> 4056;
4088 -> 4051;
4089 -> 4056;
4089 -> 4088;
4089 -> 4051;
4090 -> 4056;
4090 -> 4071;
4090 -> 4081;
4090 -> 4089;
4091 -> 4089;
4092 -> 4083;
4092 -> 4091;
4092 -> 4089;
4093 -> 4083;
4093 -> 4081;
4093 -> 4056;
4093 -> 4092;
4094 -> 4089;
4095 -> 4056;
4095 -> 4093;
4095 -> 4094;
4095 -> 4089;
4096 -> 4056;
4096 -> 4093;
4096 -> 4081;
4096 -> 4094;
4096 -> 4089;
4097 -> 4095;
4098 -> 4097;
4098 -> 4056;
4098 -> 4095;
4099 -> 4056;
4099 -> 4071;
4099 -> 4081;
4099 -> 4051;
4100 -> 4099;
4100 -> 4056;
4100 -> 4051;
4101 -> 4050;
4101 -> 4099;
4101 -> 4087;
4101 -> 4069;
4101 -> 4070;
4101 -> 4060;
4101 -> 4098;
4101 -> 4100;
4101 -> 4063;
4101 -> 4086;
4101 -> 4088;
4101 -> 4074;
4101 -> 4077;
4101 -> 4067;
4101 -> 4056;
4101 -> 4071;
4101 -> 4030;
4102 -> 4032;
4102 -> 4030;
4103 -> 4102;
4103 -> 4047;
4103 -> 4030;
4104 -> 4103;
4105 -> 4104;
4105 -> 4101;
4105 -> 4047;
4105 -> 4103;
4106 -> 4105;
4106 -> 4104;
4107 -> 4105;
4107 -> 4104;
4108 -> 4106;
4108 -> 4104;
4109 -> 4104;
4110 -> 4108;
4110 -> 4109;
4110 -> 4104;
4111 -> 4108;
4111 -> 4105;
4111 -> 4104;
4112 -> 4107;
4112 -> 4105;
4112 -> 4111;
4112 -> 4104;
4113 -> 4107;
4113 -> 4112;
4113 -> 4108;
4113 -> 4104;
4114 -> 4107;
4114 -> 4112;
4114 -> 4108;
4114 -> 4104;
4115 -> 4107;
4115 -> 4112;
4115 -> 4104;
4116 -> 4107;
4116 -> 4112;
4116 -> 4108;
4116 -> 4115;
4117 -> 4104;
4118 -> 4107;
4118 -> 4112;
4118 -> 4117;
4118 -> 4104;
4119 -> 4118;
4120 -> 4104;
4121 -> 4107;
4121 -> 4112;
4121 -> 4120;
4121 -> 4104;
4122 -> 4104;
4123 -> 4108;
4123 -> 4112;
4123 -> 4122;
4123 -> 4104;
4124 -> 4107;
4124 -> 4112;
4124 -> 4108;
4124 -> 4104;
4125 -> 4104;
4126 -> 4107;
4126 -> 4112;
4126 -> 4125;
4126 -> 4104;
4127 -> 4126;
4128 -> 4107;
4128 -> 4112;
4128 -> 4108;
4128 -> 4104;
4129 -> 4104;
4130 -> 4105;
4130 -> 4129;
4130 -> 4112;
4130 -> 4103;
4131 -> 4103;
4132 -> 4130;
4132 -> 4131;
4132 -> 4103;
4133 -> 4130;
4133 -> 4132;
4134 -> 4030;
4135 -> 4101;
4135 -> 4133;
4135 -> 4134;
4135 -> 4030;
4136 -> 4030;
4137 -> 4032;
4137 -> 4030;
4138 -> 4031;
4138 -> 4030;
4139 -> 4030;
4140 -> 4137;
4140 -> 4139;
4141 -> 4138;
4141 -> 4139;
4142 -> 4139;
4143 -> 4139;
4144 -> 4141;
4144 -> 4139;
4145 -> 4144;
4145 -> 4133;
4145 -> 4139;
4146 -> 4133;
4146 -> 4139;
4147 -> 4145;
4147 -> 4139;
4148 -> 4142;
4148 -> 4147;
4149 -> 4148;
4149 -> 4139;
4150 -> 4148;
4150 -> 4139;
4151 -> 4150;
4151 -> 4139;
4152 -> 4140;
4152 -> 4139;
4153 -> 4152;
4153 -> 4133;
4153 -> 4139;
4154 -> 4139;
4155 -> 4152;
4155 -> 4154;
4155 -> 4133;
4155 -> 4139;
4156 -> 4140;
4156 -> 4139;
4157 -> 4156;
4157 -> 4155;
4157 -> 4139;
4158 -> 4139;
4159 -> 4156;
4159 -> 4158;
4159 -> 4155;
4159 -> 4139;
4160 -> 4140;
4160 -> 4139;
4161 -> 4139;
4162 -> 4160;
4162 -> 4161;
4164 -> 4163;
4165 -> 4163;
4166 -> 4165;
4166 -> 4161;
4167 -> 4161;
4168 -> 4162;
4168 -> 4161;
4169 -> 4168;
4169 -> 4159;
4169 -> 4161;
4170 -> 4169;
4171 -> 4170;
4172 -> 4139;
4173 -> 4172;
4173 -> 4139;
4174 -> 4139;
4175 -> 4139;
4176 -> 4172;
4176 -> 4175;
4176 -> 4173;
4176 -> 4139;
4177 -> 4139;
4178 -> 4140;
4178 -> 4139;
4179 -> 4178;
4179 -> 4159;
4179 -> 4139;
4180 -> 4179;
4181 -> 4151;
4181 -> 4179;
4182 -> 4179;
4183 -> 4180;
4183 -> 4182;
4184 -> 4181;
4184 -> 4182;
4185 -> 4182;
4186 -> 4185;
4186 -> 4184;
4186 -> 4182;
4187 -> 4182;
4188 -> 4183;
4188 -> 4187;
4189 -> 4187;
4190 -> 4187;
4191 -> 4189;
4191 -> 4190;
4191 -> 4187;
4192 -> 4187;
4193 -> 4188;
4193 -> 4159;
4193 -> 4192;
4193 -> 4187;
4194 -> 4188;
4194 -> 4159;
4194 -> 4193;
4195 -> 4189;
4195 -> 4194;
4195 -> 4191;
4195 -> 4193;
4196 -> 4193;
4197 -> 4189;
4197 -> 4196;
4197 -> 4195;
4197 -> 4193;
4198 -> 4188;
4198 -> 4159;
4198 -> 4193;
4199 -> 4189;
4199 -> 4198;
4199 -> 4197;
4199 -> 4193;
4200 -> 4187;
4201 -> 4188;
4201 -> 4159;
4201 -> 4200;
4201 -> 4187;
4202 -> 4188;
4202 -> 4159;
4202 -> 4187;
4203 -> 4187;
4204 -> 4189;
4204 -> 4203;
4204 -> 4199;
4204 -> 4187;
4205 -> 4187;
4206 -> 4188;
4206 -> 4159;
4206 -> 4205;
4206 -> 4187;
4207 -> 4187;
4208 -> 4188;
4208 -> 4159;
4208 -> 4207;
4208 -> 4187;
4209 -> 4188;
4209 -> 4159;
4209 -> 4187;
4210 -> 4187;
4211 -> 4188;
4211 -> 4159;
4211 -> 4210;
4211 -> 4187;
4212 -> 4187;
4213 -> 4188;
4213 -> 4159;
4213 -> 4212;
4213 -> 4187;
4214 -> 4187;
4215 -> 4188;
4215 -> 4159;
4215 -> 4214;
4215 -> 4187;
4216 -> 4189;
4216 -> 4204;
4216 -> 4187;
4217 -> 4216;
4217 -> 4182;
4218 -> 4186;
4218 -> 4217;
4218 -> 4182;
4219 -> 4177;
4219 -> 4218;
4219 -> 4179;
4220 -> 4172;
4220 -> 4139;
4221 -> 4177;
4221 -> 4139;
4222 -> 4139;
4223 -> 4220;
4223 -> 4222;
4224 -> 4221;
4224 -> 4222;
4225 -> 4224;
4225 -> 4219;
4225 -> 4222;
4226 -> 4222;
4227 -> 4226;
4227 -> 4225;
4227 -> 4222;
4228 -> 4224;
4228 -> 4226;
4228 -> 4219;
4228 -> 4227;
4229 -> 4223;
4229 -> 4228;
4229 -> 4176;
4229 -> 4227;
4230 -> 4227;
4231 -> 4223;
4231 -> 4229;
4231 -> 4227;
4232 -> 4139;
4233 -> 4139;
4234 -> 4172;
4234 -> 4233;
4234 -> 4231;
4234 -> 4139;
4235 -> 4139;
4236 -> 4141;
4236 -> 4159;
4236 -> 4139;
4237 -> 4139;
4238 -> 4236;
4238 -> 4139;
4239 -> 4236;
4239 -> 4238;
4240 -> 4239;
4240 -> 4238;
4241 -> 4240;
4241 -> 4238;
4242 -> 4238;
4243 -> 4238;
4244 -> 4149;
4244 -> 4238;
4245 -> 4172;
4245 -> 4244;
4246 -> 4151;
4246 -> 4244;
4247 -> 4244;
4248 -> 4245;
4248 -> 4247;
4249 -> 4246;
4249 -> 4247;
4250 -> 4247;
4251 -> 4250;
4251 -> 4249;
4251 -> 4247;
4252 -> 4248;
4252 -> 4250;
4252 -> 4251;
4252 -> 4234;
4252 -> 4247;
4253 -> 4244;
4254 -> 4244;
4255 -> 4172;
4255 -> 4254;
4255 -> 4252;
4255 -> 4244;
4256 -> 4239;
4256 -> 4240;
4256 -> 4244;
4257 -> 4172;
4257 -> 4256;
4257 -> 4255;
4257 -> 4244;
4258 -> 4239;
4258 -> 4256;
4258 -> 4244;
4259 -> 4258;
4259 -> 4256;
4259 -> 4244;
4260 -> 4239;
4260 -> 4238;
4261 -> 4238;
4262 -> 4153;
4262 -> 4238;
4263 -> 4157;
4263 -> 4238;
4264 -> 4238;
4265 -> 4260;
4265 -> 4264;
4266 -> 4261;
4266 -> 4264;
4267 -> 4262;
4267 -> 4264;
4268 -> 4263;
4268 -> 4264;
4269 -> 4261;
4269 -> 4264;
4270 -> 4269;
4270 -> 4264;
4271 -> 4269;
4271 -> 4264;
4272 -> 4269;
4272 -> 4264;
4273 -> 4269;
4273 -> 4264;
4274 -> 4269;
4274 -> 4264;
4275 -> 4269;
4275 -> 4264;
4276 -> 4269;
4276 -> 4264;
4277 -> 4269;
4277 -> 4264;
4278 -> 4265;
4278 -> 4256;
4278 -> 4269;
4278 -> 4264;
4279 -> 4265;
4279 -> 4256;
4279 -> 4269;
4279 -> 4264;
4280 -> 4265;
4280 -> 4256;
4280 -> 4269;
4280 -> 4264;
4281 -> 4265;
4281 -> 4256;
4281 -> 4269;
4281 -> 4264;
4282 -> 4264;
4283 -> 4265;
4283 -> 4256;
4283 -> 4264;
4284 -> 4269;
4284 -> 4281;
4284 -> 4283;
4285 -> 4261;
4285 -> 4238;
4286 -> 4140;
4286 -> 4238;
4287 -> 4261;
4287 -> 4238;
4288 -> 4286;
4288 -> 4287;
4288 -> 4281;
4288 -> 4283;
4288 -> 4279;
4288 -> 4280;
4288 -> 4269;
4288 -> 4266;
4288 -> 4267;
4288 -> 4268;
4288 -> 4238;
4289 -> 4238;
4290 -> 4289;
4291 -> 4288;
4291 -> 4290;
4291 -> 4289;
4292 -> 4288;
4292 -> 4289;
4293 -> 4288;
4293 -> 4289;
4294 -> 4288;
4294 -> 4289;
4295 -> 4288;
4295 -> 4294;
4296 -> 4289;
4297 -> 4288;
4297 -> 4296;
4297 -> 4289;
4298 -> 4289;
4299 -> 4288;
4299 -> 4298;
4299 -> 4289;
4300 -> 4289;
4301 -> 4288;
4301 -> 4300;
4301 -> 4289;
4302 -> 4288;
4302 -> 4289;
4303 -> 4289;
4304 -> 4288;
4304 -> 4303;
4304 -> 4289;
4305 -> 4304;
4306 -> 4288;
4306 -> 4289;
4307 -> 4238;
4308 -> 4288;
4308 -> 4307;
4308 -> 4238;
4309 -> 4140;
4309 -> 4288;
4309 -> 4308;
4310 -> 4261;
4310 -> 4238;
4311 -> 4151;
4311 -> 4238;
4312 -> 4238;
4313 -> 4310;
4313 -> 4312;
4314 -> 4311;
4314 -> 4312;
4315 -> 4312;
4316 -> 4315;
4316 -> 4314;
4316 -> 4312;
4317 -> 4312;
4318 -> 4313;
4318 -> 4317;
4319 -> 4317;
4320 -> 4317;
4321 -> 4319;
4321 -> 4320;
4321 -> 4317;
4322 -> 4317;
4323 -> 4318;
4323 -> 4288;
4323 -> 4322;
4323 -> 4317;
4324 -> 4318;
4324 -> 4288;
4324 -> 4323;
4325 -> 4319;
4325 -> 4324;
4325 -> 4321;
4325 -> 4323;
4326 -> 4323;
4327 -> 4319;
4327 -> 4326;
4327 -> 4325;
4327 -> 4323;
4328 -> 4318;
4328 -> 4288;
4328 -> 4323;
4329 -> 4319;
4329 -> 4328;
4329 -> 4327;
4329 -> 4323;
4330 -> 4317;
4331 -> 4318;
4331 -> 4288;
4331 -> 4330;
4331 -> 4317;
4332 -> 4318;
4332 -> 4288;
4332 -> 4317;
4333 -> 4317;
4334 -> 4319;
4334 -> 4333;
4334 -> 4329;
4334 -> 4317;
4335 -> 4317;
4336 -> 4318;
4336 -> 4288;
4336 -> 4335;
4336 -> 4317;
4337 -> 4317;
4338 -> 4318;
4338 -> 4288;
4338 -> 4337;
4338 -> 4317;
4339 -> 4338;
4340 -> 4319;
4340 -> 4339;
4340 -> 4334;
4340 -> 4338;
4341 -> 4338;
4342 -> 4319;
4342 -> 4341;
4342 -> 4340;
4342 -> 4338;
4343 -> 4338;
4344 -> 4319;
4344 -> 4343;
4344 -> 4342;
4344 -> 4338;
4345 -> 4338;
4346 -> 4319;
4346 -> 4345;
4346 -> 4344;
4346 -> 4338;
4347 -> 4338;
4348 -> 4319;
4348 -> 4347;
4348 -> 4346;
4348 -> 4338;
4349 -> 4318;
4349 -> 4288;
4349 -> 4317;
4350 -> 4317;
4351 -> 4318;
4351 -> 4288;
4351 -> 4350;
4351 -> 4317;
4352 -> 4317;
4353 -> 4318;
4353 -> 4288;
4353 -> 4352;
4353 -> 4317;
4354 -> 4317;
4355 -> 4318;
4355 -> 4288;
4355 -> 4354;
4355 -> 4317;
4356 -> 4319;
4356 -> 4348;
4356 -> 4317;
4357 -> 4356;
4357 -> 4312;
4358 -> 4316;
4358 -> 4357;
4358 -> 4312;
4359 -> 4172;
4359 -> 4358;
4359 -> 4257;
4359 -> 4238;
4360 -> 4309;
4360 -> 4238;
4361 -> 4151;
4361 -> 4238;
4362 -> 4238;
4363 -> 4360;
4363 -> 4362;
4364 -> 4361;
4364 -> 4362;
4365 -> 4362;
4366 -> 4365;
4366 -> 4364;
4366 -> 4362;
4367 -> 4362;
4368 -> 4363;
4368 -> 4367;
4369 -> 4367;
4370 -> 4367;
4371 -> 4369;
4371 -> 4370;
4371 -> 4367;
4372 -> 4367;
4373 -> 4368;
4373 -> 4288;
4373 -> 4372;
4373 -> 4367;
4374 -> 4368;
4374 -> 4288;
4374 -> 4373;
4375 -> 4369;
4375 -> 4374;
4375 -> 4371;
4375 -> 4373;
4376 -> 4373;
4377 -> 4369;
4377 -> 4376;
4377 -> 4375;
4377 -> 4373;
4378 -> 4368;
4378 -> 4288;
4378 -> 4373;
4379 -> 4369;
4379 -> 4378;
4379 -> 4377;
4379 -> 4373;
4380 -> 4367;
4381 -> 4368;
4381 -> 4288;
4381 -> 4380;
4381 -> 4367;
4382 -> 4368;
4382 -> 4288;
4382 -> 4367;
4383 -> 4367;
4384 -> 4369;
4384 -> 4383;
4384 -> 4379;
4384 -> 4367;
4385 -> 4367;
4386 -> 4368;
4386 -> 4288;
4386 -> 4385;
4386 -> 4367;
4387 -> 4367;
4388 -> 4368;
4388 -> 4288;
4388 -> 4387;
4388 -> 4367;
4389 -> 4368;
4389 -> 4288;
4389 -> 4367;
4390 -> 4367;
4391 -> 4368;
4391 -> 4288;
4391 -> 4390;
4391 -> 4367;
4392 -> 4367;
4393 -> 4368;
4393 -> 4288;
4393 -> 4392;
4393 -> 4367;
4394 -> 4367;
4395 -> 4368;
4395 -> 4288;
4395 -> 4394;
4395 -> 4367;
4396 -> 4369;
4396 -> 4384;
4396 -> 4367;
4397 -> 4396;
4397 -> 4362;
4398 -> 4366;
4398 -> 4397;
4398 -> 4362;
4399 -> 4235;
4399 -> 4398;
4399 -> 4238;
4400 -> 4139;
4401 -> 4238;
4401 -> 4400;
4401 -> 4139;
4402 -> 4172;
4402 -> 4359;
4402 -> 4401;
4403 -> 4139;
4404 -> 4172;
4404 -> 4403;
4404 -> 4402;
4404 -> 4139;
4405 -> 4177;
4405 -> 4139;
4406 -> 4235;
4406 -> 4139;
4410 -> 4408;
4410 -> 4407;
4411 -> 4409;
4411 -> 4407;
4412 -> 4407;
4413 -> 0;
4413 -> 4139;
4414 -> 4139;
4415 -> 4139;
4416 -> 4405;
4416 -> 4415;
4417 -> 4406;
4417 -> 4415;
4418 -> 4413;
4418 -> 4415;
4419 -> 4414;
4419 -> 4415;
4420 -> 4414;
4420 -> 4415;
4421 -> 4415;
4422 -> 4419;
4422 -> 4421;
4422 -> 4415;
4423 -> 4422;
4423 -> 4415;
4424 -> 0;
4426 -> 4424;
4426 -> 4425;
4427 -> 4425;
4429 -> 4428;
4431 -> 4430;
4433 -> 4432;
4434 -> 4427;
4435 -> 4427;
4435 -> 4425;
4436 -> 4426;
4436 -> 4427;
4436 -> 4425;
4437 -> 4425;
4438 -> 4415;
4439 -> 4438;
4439 -> 4420;
4439 -> 4415;
4440 -> 4416;
4440 -> 4415;
4441 -> 4417;
4441 -> 4415;
4442 -> 4418;
4442 -> 4415;
4443 -> 4440;
4443 -> 4415;
4444 -> 4441;
4444 -> 4415;
4445 -> 4439;
4445 -> 4415;
4446 -> 4415;
4447 -> 4443;
4447 -> 4446;
4448 -> 4444;
4448 -> 4446;
4449 -> 4445;
4449 -> 4446;
4450 -> 4423;
4450 -> 4446;
4451 -> 4447;
4451 -> 4446;
4452 -> 4447;
4452 -> 4440;
4452 -> 4446;
4453 -> 4448;
4453 -> 4446;
4454 -> 4448;
4454 -> 4441;
4454 -> 4446;
4455 -> 4446;
4456 -> 4451;
4456 -> 4455;
4457 -> 4452;
4457 -> 4455;
4458 -> 4453;
4458 -> 4455;
4459 -> 4454;
4459 -> 4455;
4460 -> 4450;
4460 -> 4455;
4461 -> 4456;
4461 -> 4455;
4462 -> 4457;
4462 -> 4455;
4463 -> 4458;
4463 -> 4455;
4464 -> 4459;
4464 -> 4455;
4465 -> 4455;
4466 -> 4461;
4466 -> 4465;
4467 -> 4462;
4467 -> 4465;
4468 -> 4463;
4468 -> 4465;
4469 -> 4464;
4469 -> 4465;
4470 -> 4460;
4470 -> 4465;
4471 -> 4465;
4472 -> 4467;
4472 -> 4471;
4472 -> 4465;
4473 -> 4465;
4474 -> 4469;
4474 -> 4473;
4474 -> 4465;
4475 -> 4472;
4475 -> 4474;
4475 -> 4465;
4476 -> 4465;
4477 -> 4476;
4477 -> 4475;
4477 -> 4465;
4478 -> 4465;
4479 -> 4478;
4479 -> 4467;
4479 -> 4465;
4480 -> 4479;
4481 -> 4475;
4481 -> 4477;
4481 -> 4480;
4481 -> 4479;
4482 -> 4481;
4482 -> 4478;
4482 -> 4480;
4482 -> 4475;
4482 -> 4479;
4483 -> 4465;
4484 -> 4483;
4484 -> 4469;
4484 -> 4465;
4485 -> 4484;
4486 -> 4475;
4486 -> 4477;
4486 -> 4482;
4486 -> 4485;
4486 -> 4484;
4487 -> 4486;
4487 -> 4485;
4487 -> 4483;
4487 -> 4475;
4487 -> 4484;
4488 -> 4465;
4489 -> 4488;
4489 -> 4467;
4489 -> 4465;
4490 -> 4489;
4491 -> 4490;
4491 -> 4469;
4491 -> 4489;
4492 -> 4491;
4493 -> 4475;
4493 -> 4477;
4493 -> 4482;
4493 -> 4487;
4493 -> 4492;
4493 -> 4491;
4494 -> 4466;
4494 -> 4491;
4495 -> 4468;
4495 -> 4491;
4496 -> 4491;
4497 -> 4494;
4497 -> 4496;
4498 -> 4492;
4498 -> 4496;
4499 -> 4495;
4499 -> 4496;
4500 -> 4492;
4500 -> 4496;
4501 -> 4470;
4501 -> 4496;
4502 -> 4497;
4502 -> 4440;
4502 -> 4498;
4502 -> 4496;
4503 -> 4499;
4503 -> 4441;
4503 -> 4500;
4503 -> 4496;
4504 -> 4501;
4504 -> 0;
4504 -> 4502;
4504 -> 4503;
4504 -> 4440;
4504 -> 4441;
4504 -> 4496;
4505 -> 4493;
4505 -> 4504;
4505 -> 4491;
4506 -> 4491;
4507 -> 4475;
4507 -> 4477;
4507 -> 4482;
4507 -> 4487;
4507 -> 4506;
4507 -> 4490;
4507 -> 4491;
4508 -> 4491;
4509 -> 4475;
4509 -> 4477;
4509 -> 4482;
4509 -> 4487;
4509 -> 4488;
4509 -> 4508;
4509 -> 4491;
4510 -> 4505;
4510 -> 4491;
4511 -> 4507;
4511 -> 4491;
4512 -> 4510;
4512 -> 4511;
4512 -> 4491;
4513 -> 4509;
4513 -> 4491;
4514 -> 4512;
4514 -> 4513;
4514 -> 4491;
4515 -> 4514;
4515 -> 4488;
4515 -> 4490;
4515 -> 4475;
4515 -> 4491;
4516 -> 4475;
4516 -> 4465;
4517 -> 4457;
4517 -> 4455;
4518 -> 4459;
4518 -> 4455;
4519 -> 4455;
4520 -> 4517;
4520 -> 4519;
4520 -> 4455;
4521 -> 4518;
4521 -> 4519;
4521 -> 4455;
4522 -> 4520;
4522 -> 4521;
4522 -> 4455;
4523 -> 4516;
4523 -> 4475;
4523 -> 4477;
4523 -> 4482;
4523 -> 4487;
4523 -> 4515;
4523 -> 4517;
4523 -> 4518;
4523 -> 4522;
4524 -> 4522;
4525 -> 4516;
4525 -> 4475;
4525 -> 4477;
4525 -> 4482;
4525 -> 4487;
4525 -> 4515;
4525 -> 4524;
4525 -> 4518;
4525 -> 4522;
4526 -> 4516;
4526 -> 4475;
4526 -> 4477;
4526 -> 4482;
4526 -> 4487;
4526 -> 4515;
4526 -> 4517;
4526 -> 4518;
4526 -> 4525;
4527 -> 4525;
4528 -> 4517;
4528 -> 4527;
4529 -> 4518;
4529 -> 4527;
4530 -> 4527;
4531 -> 0;
4531 -> 4527;
4532 -> 4528;
4532 -> 4527;
4533 -> 4529;
4533 -> 4527;
4534 -> 4527;
4535 -> 4531;
4535 -> 4534;
4536 -> 4532;
4536 -> 4534;
4537 -> 4533;
4537 -> 4534;
4538 -> 4530;
4538 -> 4534;
4539 -> 4535;
4539 -> 4538;
4539 -> 4534;
4540 -> 4536;
4540 -> 4538;
4540 -> 4534;
4541 -> 4537;
4541 -> 4538;
4541 -> 4534;
4542 -> 4455;
4543 -> 4528;
4543 -> 4542;
4543 -> 4455;
4544 -> 4455;
4545 -> 4529;
4545 -> 4544;
4545 -> 4455;
4546 -> 4530;
4546 -> 4539;
4546 -> 4540;
4546 -> 4541;
4546 -> 4446;
4547 -> 4546;
4548 -> 4547;
4549 -> 4448;
4549 -> 4441;
4549 -> 4504;
4549 -> 4546;
4549 -> 4547;
4550 -> 4449;
4550 -> 4549;
4550 -> 4438;
4550 -> 4547;
4551 -> 4442;
4551 -> 4548;
4551 -> 4415;
4552 -> 4172;
4552 -> 4551;
4552 -> 4404;
4552 -> 4139;
4553 -> 4235;
4553 -> 4399;
4553 -> 4139;
4554 -> 4177;
4554 -> 4228;
4554 -> 4139;
4555 -> 4172;
4555 -> 4552;
4555 -> 4139;
4556 -> 4019;
4557 -> 1;
4558 -> 0;
4558 -> 4557;
4558 -> 4288;
4558 -> 1;
4559 -> 1;
4560 -> 4558;
4560 -> 1;
4561 -> 11;
4561 -> 1;
4562 -> 4560;
4562 -> 4559;
4563 -> 4560;
4563 -> 4559;
4564 -> 4560;
4564 -> 4559;
4565 -> 4560;
4565 -> 4559;
4566 -> 4560;
4566 -> 4559;
4567 -> 4559;
4568 -> 4560;
4568 -> 4567;
4569 -> 4567;
4570 -> 4568;
4570 -> 4569;
4571 -> 4569;
4572 -> 4571;
4573 -> 4572;
4574 -> 4560;
4574 -> 4572;
4575 -> 4567;
4576 -> 4559;
4577 -> 4568;
4577 -> 4576;
4577 -> 4559;
4578 -> 4559;
4579 -> 4578;
4580 -> 4579;
4581 -> 4568;
4581 -> 4579;
4582 -> 4578;
4583 -> 4578;
4584 -> 4583;
4585 -> 4568;
4585 -> 4583;
4586 -> 4568;
4586 -> 4578;
4587 -> 4578;
4588 -> 4559;
4589 -> 4559;
4590 -> 4568;
4591 -> 4568;
4592 -> 4568;
4593 -> 4568;
4594 -> 4559;
4595 -> 4562;
4595 -> 4594;
4595 -> 4559;
4596 -> 4559;
4597 -> 4563;
4597 -> 4596;
4597 -> 4559;
4598 -> 4559;
4599 -> 4564;
4599 -> 4598;
4599 -> 4559;
4600 -> 4559;
4601 -> 0;
4601 -> 4559;
4602 -> 4559;
4603 -> 4559;
4604 -> 4601;
4604 -> 4603;
4605 -> 4602;
4605 -> 4603;
4606 -> 4603;
4607 -> 4604;
4607 -> 4603;
4608 -> 4605;
4608 -> 4603;
4609 -> 4606;
4609 -> 4603;
4610 -> 4603;
4611 -> 4607;
4611 -> 4610;
4612 -> 4608;
4612 -> 4610;
4613 -> 4609;
4613 -> 4610;
4614 -> 4610;
4615 -> 4611;
4615 -> 0;
4615 -> 4610;
4616 -> 4615;
4616 -> 4612;
4616 -> 4610;
4617 -> 4616;
4618 -> 4617;
4619 -> 4618;
4620 -> 4616;
4621 -> 4568;
4622 -> 4568;
4623 -> 4616;
4624 -> 4568;
4625 -> 4611;
4625 -> 0;
4625 -> 4610;
4626 -> 4614;
4626 -> 4625;
4627 -> 4625;
4628 -> 4625;
4629 -> 4625;
4630 -> 4560;
4630 -> 4629;
4631 -> 4630;
4631 -> 4568;
4631 -> 4629;
4632 -> 4631;
4632 -> 4625;
4633 -> 4625;
4634 -> 4625;
4635 -> 4625;
4636 -> 4634;
4636 -> 4635;
4637 -> 4634;
4637 -> 4635;
4638 -> 4634;
4638 -> 4635;
4639 -> 4635;
4640 -> 4635;
4641 -> 4635;
4642 -> 4636;
4642 -> 4641;
4642 -> 4635;
4643 -> 4635;
4644 -> 4643;
4645 -> 4644;
4646 -> 4568;
4646 -> 4644;
4647 -> 4640;
4647 -> 4635;
4648 -> 4636;
4648 -> 4635;
4649 -> 4648;
4650 -> 4648;
4651 -> 4635;
4652 -> 4638;
4652 -> 4651;
4652 -> 4635;
4653 -> 4636;
4653 -> 4635;
4654 -> 4637;
4654 -> 4635;
4655 -> 4635;
4656 -> 4653;
4656 -> 4655;
4657 -> 4654;
4657 -> 4655;
4658 -> 4655;
4659 -> 4656;
4659 -> 4658;
4659 -> 4655;
4660 -> 4560;
4660 -> 4568;
4660 -> 4655;
4661 -> 4625;
4662 -> 4560;
4662 -> 4568;
4662 -> 4661;
4662 -> 4625;
4663 -> 4611;
4663 -> 0;
4663 -> 4610;
4664 -> 4613;
4664 -> 4610;
4665 -> 4614;
4665 -> 4610;
4666 -> 4610;
4667 -> 4603;
4668 -> 4600;
4668 -> 4559;
4669 -> 4600;
4669 -> 4559;
4670 -> 4560;
4671 -> 4560;
4672 -> 4560;
4673 -> 4560;
4674 -> 4673;
4674 -> 4568;
4675 -> 4674;
4675 -> 4560;
4676 -> 4560;
4677 -> 4560;
4678 -> 4560;
4679 -> 4568;
4679 -> 4560;
4680 -> 4560;
4681 -> 4680;
4681 -> 4560;
4682 -> 4568;
4683 -> 4568;
4683 -> 4560;
4684 -> 4560;
4685 -> 4560;
4686 -> 4568;
4686 -> 4560;
4687 -> 4560;
4688 -> 4686;
4688 -> 4687;
4689 -> 4560;
4689 -> 4687;
4690 -> 4688;
4690 -> 4687;
4691 -> 4560;
4692 -> 4560;
4693 -> 4568;
4693 -> 4560;
4694 -> 4560;
4695 -> 4694;
4695 -> 4568;
4696 -> 4568;
4697 -> 4695;
4697 -> 4696;
4698 -> 4695;
4698 -> 4696;
4699 -> 4695;
4699 -> 4696;
4700 -> 4699;
4700 -> 4695;
4700 -> 4696;
4701 -> 4697;
4701 -> 4696;
4702 -> 4696;
4703 -> 4700;
4703 -> 4702;
4704 -> 4701;
4704 -> 4702;
4705 -> 4702;
4706 -> 4703;
4706 -> 4705;
4706 -> 4702;
4707 -> 4696;
4708 -> 4699;
4708 -> 4695;
4708 -> 4696;
4709 -> 4696;
4710 -> 4699;
4710 -> 4708;
4710 -> 4709;
4711 -> 4710;
4711 -> 4696;
4712 -> 4697;
4712 -> 4711;
4713 -> 4711;
4714 -> 4712;
4714 -> 4713;
4715 -> 4699;
4715 -> 4713;
4716 -> 4713;
4717 -> 4715;
4717 -> 4708;
4717 -> 4713;
4718 -> 4717;
4718 -> 4711;
4719 -> 4718;
4719 -> 4711;
4720 -> 4696;
4721 -> 4695;
4721 -> 4720;
4721 -> 4719;
4721 -> 4568;
4722 -> 4560;
4723 -> 4721;
4723 -> 4722;
4723 -> 4560;
4724 -> 4721;
4725 -> 4560;
4726 -> 4560;
4727 -> 4560;
4727 -> 4726;
4728 -> 4726;
4728 -> 4724;
4729 -> 4728;
4729 -> 4560;
4730 -> 4560;
4731 -> 4560;
4732 -> 4729;
4732 -> 4731;
4733 -> 4730;
4733 -> 4731;
4734 -> 4560;
4734 -> 4731;
4735 -> 4732;
4735 -> 4731;
4736 -> 4560;
4737 -> 4560;
4737 -> 4736;
4738 -> 4737;
4738 -> 4736;
4739 -> 4738;
4739 -> 4736;
4740 -> 4736;
4740 -> 4724;
4741 -> 4740;
4741 -> 4736;
4742 -> 4741;
4742 -> 4736;
4743 -> 4740;
4743 -> 4736;
4744 -> 4743;
4745 -> 4742;
4745 -> 4744;
4745 -> 4743;
4746 -> 4745;
4747 -> 4736;
4748 -> 4740;
4748 -> 4560;
4749 -> 4560;
4750 -> 4560;
4751 -> 4748;
4751 -> 4750;
4752 -> 4749;
4752 -> 4750;
4753 -> 4560;
4753 -> 4750;
4754 -> 4751;
4754 -> 4750;
4755 -> 4740;
4755 -> 4560;
4756 -> 4740;
4756 -> 4560;
4757 -> 4740;
4757 -> 4722;
4757 -> 4560;
4758 -> 4560;
4759 -> 4560;
4759 -> 4740;
4760 -> 4560;
4761 -> 4759;
4761 -> 4760;
4761 -> 4560;
4762 -> 4560;
4763 -> 4560;
4763 -> 4740;
4764 -> 4740;
4764 -> 4560;
4765 -> 4560;
4766 -> 4568;
4766 -> 4765;
4766 -> 4560;
4767 -> 4560;
4767 -> 4740;
4768 -> 4740;
4769 -> 4767;
4769 -> 4768;
4770 -> 4767;
4770 -> 4768;
4771 -> 4560;
4771 -> 4768;
4772 -> 4771;
4772 -> 4740;
4772 -> 4768;
4773 -> 4771;
4773 -> 4740;
4773 -> 4768;
4774 -> 4740;
4775 -> 4568;
4775 -> 4740;
4775 -> 4560;
4776 -> 4559;
4777 -> 4560;
4777 -> 4559;
4778 -> 4559;
4779 -> 4778;
4779 -> 4559;
4780 -> 4559;
4781 -> 4780;
4782 -> 4740;
4782 -> 4780;
4783 -> 4559;
4784 -> 4778;
4784 -> 4559;
4785 -> 4559;
4786 -> 4784;
4786 -> 4785;
4787 -> 4785;
4788 -> 4787;
4789 -> 4740;
4789 -> 4787;
4790 -> 4740;
4790 -> 4785;
4791 -> 4785;
4792 -> 4791;
4792 -> 4790;
4792 -> 4740;
4792 -> 4785;
4793 -> 4790;
4793 -> 4791;
4793 -> 4740;
4793 -> 4792;
4794 -> 4792;
4795 -> 4794;
4795 -> 4792;
4796 -> 4793;
4796 -> 4792;
4797 -> 4796;
4797 -> 4792;
4798 -> 4785;
4799 -> 4798;
4799 -> 4559;
4800 -> 4778;
4800 -> 4559;
4801 -> 4559;
4802 -> 4559;
4803 -> 4559;
4804 -> 4802;
4804 -> 4559;
4805 -> 4559;
4806 -> 4559;
4807 -> 4777;
4807 -> 4806;
4808 -> 4804;
4808 -> 4806;
4809 -> 4805;
4809 -> 4806;
4810 -> 4805;
4810 -> 4806;
4811 -> 4806;
4812 -> 4806;
4813 -> 4807;
4813 -> 4812;
4813 -> 4806;
4814 -> 4806;
4815 -> 4814;
4816 -> 4796;
4816 -> 4814;
4817 -> 4811;
4817 -> 4806;
4818 -> 4809;
4818 -> 4806;
4819 -> 4810;
4819 -> 4806;
4820 -> 4806;
4821 -> 4808;
4821 -> 4806;
4822 -> 4806;
4823 -> 4817;
4823 -> 4822;
4824 -> 4818;
4824 -> 4822;
4825 -> 4819;
4825 -> 4822;
4826 -> 4820;
4826 -> 4822;
4827 -> 4820;
4827 -> 4822;
4828 -> 4821;
4828 -> 4822;
4829 -> 4820;
4829 -> 4822;
4830 -> 4822;
4831 -> 4830;
4831 -> 4822;
4832 -> 4830;
4832 -> 4822;
4833 -> 4830;
4833 -> 4822;
4834 -> 4830;
4834 -> 4822;
4835 -> 4830;
4835 -> 4822;
4836 -> 4830;
4836 -> 4822;
4837 -> 4830;
4837 -> 4822;
4838 -> 4830;
4838 -> 4822;
4839 -> 4830;
4839 -> 4822;
4840 -> 4830;
4840 -> 4822;
4841 -> 4830;
4841 -> 4822;
4842 -> 4830;
4842 -> 4822;
4843 -> 4823;
4843 -> 4830;
4843 -> 4822;
4844 -> 4824;
4844 -> 4830;
4844 -> 4822;
4845 -> 4825;
4845 -> 4830;
4845 -> 4822;
4846 -> 4826;
4846 -> 4830;
4846 -> 4822;
4847 -> 4827;
4847 -> 4830;
4847 -> 4822;
4848 -> 4828;
4848 -> 4830;
4848 -> 4822;
4849 -> 4806;
4850 -> 4849;
4851 -> 4796;
4851 -> 4849;
4852 -> 4796;
4852 -> 4820;
4852 -> 4830;
4852 -> 4831;
4852 -> 4832;
4852 -> 4560;
4852 -> 4833;
4852 -> 4843;
4852 -> 4834;
4852 -> 4844;
4852 -> 4835;
4852 -> 4845;
4852 -> 4836;
4852 -> 4846;
4852 -> 4837;
4852 -> 4847;
4852 -> 4838;
4852 -> 4848;
4852 -> 4839;
4852 -> 4840;
4852 -> 4841;
4852 -> 4842;
4852 -> 4777;
4852 -> 4805;
4852 -> 4802;
4852 -> 4806;
4853 -> 4806;
4854 -> 4852;
4855 -> 4852;
4856 -> 4852;
4857 -> 4855;
4857 -> 4856;
4858 -> 4852;
4858 -> 4856;
4859 -> 4858;
4859 -> 4852;
4859 -> 4856;
4860 -> 4856;
4861 -> 4859;
4862 -> 4852;
4863 -> 4852;
4864 -> 4862;
4864 -> 4863;
4865 -> 4852;
4865 -> 4863;
4866 -> 4865;
4866 -> 4852;
4866 -> 4863;
4867 -> 4863;
4868 -> 4866;
4869 -> 4852;
4870 -> 4852;
4871 -> 4870;
4871 -> 4852;
4872 -> 4871;
4873 -> 4871;
4874 -> 4872;
4874 -> 4873;
4875 -> 4852;
4875 -> 4873;
4876 -> 4875;
4876 -> 4852;
4876 -> 4873;
4877 -> 4873;
4878 -> 4876;
4879 -> 4871;
4880 -> 4871;
4881 -> 4871;
4882 -> 4852;
4882 -> 4881;
4882 -> 4871;
4883 -> 4871;
4884 -> 4881;
4884 -> 4883;
4885 -> 4881;
4885 -> 4883;
4886 -> 4852;
4886 -> 4883;
4887 -> 4884;
4887 -> 4883;
4888 -> 4885;
4888 -> 4883;
4889 -> 4887;
4889 -> 4888;
4889 -> 4883;
4890 -> 4883;
4891 -> 4889;
4891 -> 4890;
4892 -> 4886;
4892 -> 4890;
4893 -> 4892;
4893 -> 4852;
4893 -> 4890;
4894 -> 4890;
4895 -> 4893;
4896 -> 4883;
4897 -> 4871;
4898 -> 4897;
4898 -> 4852;
4898 -> 4879;
4899 -> 4897;
4900 -> 4897;
4900 -> 4852;
4900 -> 4879;
4900 -> 4898;
4900 -> 4899;
4901 -> 4871;
4902 -> 4871;
4903 -> 4871;
4904 -> 4902;
4904 -> 4903;
4905 -> 4852;
4905 -> 4903;
4906 -> 4905;
4906 -> 4852;
4906 -> 4903;
4907 -> 4903;
4908 -> 4906;
4909 -> 4852;
4910 -> 4852;
4911 -> 4909;
4911 -> 4910;
4912 -> 4852;
4912 -> 4910;
4913 -> 4912;
4913 -> 4852;
4913 -> 4910;
4914 -> 4910;
4915 -> 4913;
4916 -> 4852;
4917 -> 4852;
4917 -> 4853;
4918 -> 4852;
4918 -> 4879;
4918 -> 4898;
4918 -> 4853;
4919 -> 4852;
4919 -> 4879;
4919 -> 4898;
4919 -> 4918;
4920 -> 4852;
4920 -> 4918;
4921 -> 4920;
4921 -> 4918;
4921 -> 4919;
4921 -> 4852;
4921 -> 4879;
4921 -> 4898;
4922 -> 4918;
4923 -> 4921;
4923 -> 4922;
4924 -> 4921;
4924 -> 4922;
4925 -> 4924;
4925 -> 4921;
4925 -> 4922;
4926 -> 4922;
4927 -> 4924;
4927 -> 4925;
4927 -> 4926;
4927 -> 4922;
4928 -> 4923;
4928 -> 4922;
4929 -> 4922;
4930 -> 4928;
4930 -> 4929;
4931 -> 4924;
4931 -> 4929;
4932 -> 4931;
4932 -> 4925;
4932 -> 4929;
4933 -> 4930;
4933 -> 4929;
4934 -> 4929;
4935 -> 4933;
4935 -> 4934;
4936 -> 4935;
4936 -> 4934;
4937 -> 4936;
4937 -> 4932;
4937 -> 4934;
4938 -> 4929;
4939 -> 4931;
4939 -> 4937;
4939 -> 4938;
4939 -> 4929;
4940 -> 4930;
4940 -> 4929;
4941 -> 4940;
4941 -> 4937;
4941 -> 4929;
4942 -> 4941;
4942 -> 4929;
4943 -> 4929;
4944 -> 4929;
4945 -> 4944;
4945 -> 4929;
4946 -> 4930;
4946 -> 4929;
4947 -> 4943;
4947 -> 4929;
4948 -> 4944;
4948 -> 4929;
4949 -> 4929;
4950 -> 4946;
4950 -> 4949;
4951 -> 4947;
4951 -> 4949;
4952 -> 4948;
4952 -> 4949;
4953 -> 4931;
4953 -> 4949;
4954 -> 0;
4954 -> 4949;
4955 -> 4949;
4956 -> 4949;
4957 -> 4950;
4957 -> 4941;
4957 -> 4949;
4958 -> 4957;
4958 -> 4941;
4959 -> 4958;
4959 -> 4954;
4959 -> 4957;
4960 -> 4959;
4960 -> 4957;
4961 -> 4957;
4962 -> 4953;
4962 -> 4961;
4962 -> 4957;
4963 -> 4962;
4963 -> 4957;
4964 -> 4949;
4965 -> 4956;
4965 -> 4964;
4965 -> 4949;
4966 -> 0;
4966 -> 4965;
4967 -> 4949;
4968 -> 4967;
4968 -> 4929;
4969 -> 4966;
4969 -> 0;
4969 -> 4929;
4970 -> 4960;
4970 -> 0;
4970 -> 4969;
4971 -> 4969;
4972 -> 4922;
4973 -> 4924;
4973 -> 4962;
4973 -> 4922;
4974 -> 4923;
4974 -> 4962;
4974 -> 4973;
4975 -> 4924;
4975 -> 4974;
4976 -> 4924;
4976 -> 4974;
4977 -> 4976;
4977 -> 4974;
4977 -> 4975;
4978 -> 4974;
4979 -> 4978;
4980 -> 4977;
4980 -> 4979;
4980 -> 4978;
4981 -> 4977;
4981 -> 4978;
4982 -> 4978;
4983 -> 4978;
4984 -> 4983;
4984 -> 4978;
4985 -> 4982;
4985 -> 4978;
4986 -> 4983;
4986 -> 4978;
4987 -> 0;
4987 -> 4978;
4988 -> 4978;
4989 -> 4978;
4990 -> 4977;
4991 -> 4990;
4991 -> 4987;
4991 -> 4977;
4992 -> 4991;
4992 -> 4977;
4993 -> 4977;
4994 -> 4978;
4995 -> 4989;
4995 -> 4994;
4995 -> 4978;
4996 -> 0;
4996 -> 4995;
4997 -> 4978;
4998 -> 4996;
4998 -> 0;
4998 -> 4978;
4999 -> 4992;
4999 -> 0;
4999 -> 4998;
5000 -> 4998;
5001 -> 4977;
5002 -> 4977;
5003 -> 4977;
5004 -> 4977;
5005 -> 4977;
5006 -> 4977;
5007 -> 5006;
5007 -> 4977;
5008 -> 5005;
5008 -> 4977;
5009 -> 5006;
5009 -> 4977;
5010 -> 0;
5010 -> 4977;
5011 -> 4977;
5012 -> 4977;
5013 -> 4977;
5014 -> 5012;
5014 -> 5013;
5014 -> 4977;
5015 -> 0;
5015 -> 5014;
5016 -> 4977;
5017 -> 5015;
5017 -> 0;
5017 -> 4977;
5018 -> 5010;
5018 -> 0;
5018 -> 5017;
5019 -> 5017;
5020 -> 4977;
5021 -> 4977;
5022 -> 4977;
5023 -> 4977;
5024 -> 5022;
5024 -> 5023;
5025 -> 4852;
5025 -> 5023;
5026 -> 5025;
5026 -> 4977;
5026 -> 5023;
5027 -> 5023;
5028 -> 5026;
5029 -> 4977;
5030 -> 4977;
5031 -> 4977;
5032 -> 5030;
5032 -> 5031;
5033 -> 4852;
5033 -> 5031;
5034 -> 5033;
5034 -> 4977;
5034 -> 5031;
5035 -> 5031;
5036 -> 5034;
5037 -> 4806;
5038 -> 4820;
5038 -> 4977;
5038 -> 5037;
5038 -> 4806;
5039 -> 4811;
5039 -> 4806;
5040 -> 4806;
5041 -> 4809;
5041 -> 5040;
5041 -> 4806;
5042 -> 5041;
5043 -> 5042;
5044 -> 5043;
5045 -> 4977;
5046 -> 4977;
5047 -> 4977;
5048 -> 4802;
5048 -> 4559;
5049 -> 4559;
5050 -> 4560;
5050 -> 4559;
5051 -> 4560;
5051 -> 4559;
5052 -> 4560;
5052 -> 4559;
5053 -> 4560;
5053 -> 4559;
5054 -> 4559;
5055 -> 5053;
5055 -> 4977;
5055 -> 5054;
5055 -> 4559;
5056 -> 5050;
5056 -> 4559;
5057 -> 4559;
5058 -> 5056;
5058 -> 5057;
5059 -> 5053;
5059 -> 5057;
5060 -> 5057;
5061 -> 5059;
5061 -> 4977;
5061 -> 5060;
5061 -> 5057;
5062 -> 4559;
5063 -> 4559;
5064 -> 5063;
5065 -> 4977;
5065 -> 5063;
5066 -> 4559;
5067 -> 4559;
5068 -> 5067;
5069 -> 4977;
5069 -> 5067;
5070 -> 4560;
5070 -> 4559;
5071 -> 4559;
5072 -> 5070;
5072 -> 4977;
5073 -> 5072;
5073 -> 4977;
5074 -> 4977;
5075 -> 4977;
5076 -> 4977;
5077 -> 4977;
5078 -> 4977;
5078 -> 5077;
5079 -> 5073;
5079 -> 5077;
5080 -> 5077;
5081 -> 5078;
5081 -> 5080;
5082 -> 5078;
5082 -> 5080;
5083 -> 5079;
5083 -> 5080;
5084 -> 4977;
5084 -> 5080;
5085 -> 5084;
5085 -> 4977;
5085 -> 5080;
5086 -> 5080;
5087 -> 5082;
5087 -> 5086;
5088 -> 5087;
5088 -> 5080;
5089 -> 5085;
5089 -> 4977;
5089 -> 5080;
5090 -> 5084;
5090 -> 4977;
5090 -> 0;
5090 -> 5080;
5091 -> 5088;
5091 -> 4977;
5091 -> 5080;
5092 -> 5090;
5092 -> 5091;
5092 -> 5080;
5093 -> 5081;
5093 -> 4977;
5093 -> 5080;
5094 -> 5081;
5094 -> 4977;
5094 -> 5080;
5095 -> 5080;
5096 -> 5084;
5096 -> 4977;
5096 -> 5095;
5096 -> 5080;
5097 -> 5077;
5098 -> 4560;
5098 -> 4559;
5099 -> 4559;
5100 -> 4559;
5101 -> 4560;
5101 -> 4977;
5101 -> 4559;
5102 -> 4560;
5102 -> 4977;
5102 -> 5101;
5103 -> 4560;
5103 -> 5101;
5104 -> 5101;
5105 -> 5102;
5105 -> 5104;
5106 -> 5103;
5106 -> 5104;
5107 -> 5106;
5107 -> 5105;
5108 -> 5105;
5109 -> 5105;
5110 -> 5107;
5110 -> 5105;
5111 -> 5105;
5112 -> 5105;
5113 -> 5105;
5114 -> 5105;
5115 -> 5106;
5115 -> 4977;
5115 -> 5105;
5116 -> 5104;
5116 -> 5105;
5116 -> 5115;
5117 -> 5116;
5117 -> 5105;
5118 -> 5116;
5118 -> 5117;
5119 -> 4559;
5120 -> 4559;
5121 -> 4559;
5122 -> 5118;
5122 -> 5121;
5123 -> 4559;
5124 -> 4559;
5125 -> 5118;
5125 -> 5124;
5126 -> 5124;
5127 -> 5125;
5127 -> 5124;
5128 -> 5124;
5129 -> 5127;
5129 -> 5128;
5130 -> 5128;
5131 -> 5130;
5132 -> 5130;
5133 -> 5118;
5133 -> 5130;
5134 -> 5133;
5134 -> 5128;
5135 -> 5128;
5136 -> 5118;
5136 -> 5128;
5137 -> 5136;
5138 -> 5134;
5138 -> 5137;
5138 -> 5136;
5139 -> 5138;
5140 -> 5124;
5141 -> 5126;
5141 -> 5124;
5142 -> 5126;
5142 -> 5124;
5143 -> 5126;
5143 -> 5124;
5144 -> 5126;
5144 -> 5124;
5145 -> 5126;
5145 -> 5124;
5146 -> 5126;
5146 -> 5124;
5147 -> 5126;
5147 -> 5124;
5148 -> 5126;
5148 -> 5124;
5149 -> 4559;
5150 -> 4560;
5150 -> 4559;
5151 -> 4559;
5152 -> 4559;
5153 -> 4560;
5153 -> 5118;
5153 -> 4559;
5154 -> 4559;
5155 -> 5154;
5156 -> 5155;
5157 -> 5156;
5158 -> 5118;
5158 -> 5156;
5159 -> 5154;
5160 -> 5118;
5160 -> 4559;
5161 -> 4559;
5162 -> 4560;
5162 -> 4559;
5163 -> 4559;
5164 -> 5163;
5165 -> 5164;
5166 -> 5165;
5167 -> 5118;
5167 -> 5165;
5168 -> 5163;
5169 -> 5118;
5169 -> 4559;
5170 -> 5169;
5170 -> 5162;
5170 -> 5118;
5170 -> 4559;
5171 -> 4559;
5172 -> 5171;
5172 -> 4559;
5173 -> 4559;
5174 -> 4560;
5174 -> 4559;
5175 -> 4560;
5175 -> 4559;
5176 -> 4559;
5177 -> 4559;
5178 -> 5118;
5178 -> 0;
5178 -> 5177;
5179 -> 5177;
5180 -> 5118;
5181 -> 5118;
5181 -> 5177;
5182 -> 4560;
5182 -> 4559;
5183 -> 4560;
5183 -> 4559;
5184 -> 4560;
5184 -> 4559;
5185 -> 4560;
5185 -> 4559;
5186 -> 4559;
5187 -> 4560;
5187 -> 5186;
5187 -> 4559;
5188 -> 4559;
5189 -> 5182;
5189 -> 5188;
5190 -> 5183;
5190 -> 5188;
5191 -> 5184;
5191 -> 5188;
5192 -> 5185;
5192 -> 5188;
5193 -> 5188;
5194 -> 5188;
5195 -> 4560;
5195 -> 5118;
5195 -> 5188;
5196 -> 5195;
5196 -> 5118;
5196 -> 5188;
5197 -> 4560;
5197 -> 5118;
5197 -> 5188;
5198 -> 5191;
5198 -> 5197;
5199 -> 4560;
5199 -> 5118;
5199 -> 5198;
5200 -> 5195;
5200 -> 5198;
5201 -> 5198;
5202 -> 5200;
5202 -> 5201;
5203 -> 5201;
5204 -> 5202;
5204 -> 5203;
5204 -> 5201;
5205 -> 5204;
5206 -> 5202;
5206 -> 5118;
5206 -> 5204;
5207 -> 5201;
5208 -> 5207;
5208 -> 5198;
5209 -> 5199;
5209 -> 5208;
5209 -> 5198;
5210 -> 4560;
5210 -> 5209;
5211 -> 4560;
5211 -> 5118;
5211 -> 5209;
5212 -> 5188;
5213 -> 5192;
5213 -> 5118;
5213 -> 5212;
5213 -> 5188;
5214 -> 4559;
5215 -> 4560;
5215 -> 4559;
5216 -> 4560;
5216 -> 4559;
5217 -> 4559;
5218 -> 5216;
5218 -> 5217;
5218 -> 4559;
5219 -> 5215;
5219 -> 5118;
5220 -> 5216;
5220 -> 5118;
5221 -> 5219;
5221 -> 5118;
5222 -> 5220;
5222 -> 5118;
5223 -> 5118;
5224 -> 5118;
5225 -> 5118;
5226 -> 5222;
5226 -> 5225;
5226 -> 5118;
5227 -> 5118;
5228 -> 5118;
5228 -> 5227;
5229 -> 5118;
5229 -> 0;
5230 -> 5118;
5231 -> 5224;
5231 -> 5230;
5232 -> 5231;
5233 -> 5231;
5234 -> 5118;
5234 -> 5231;
5235 -> 5231;
5236 -> 5234;
5236 -> 5235;
5237 -> 5235;
5238 -> 5236;
5238 -> 5237;
5239 -> 5237;
5240 -> 5238;
5240 -> 5239;
5240 -> 5237;
5241 -> 5237;
5242 -> 5241;
5242 -> 5235;
5243 -> 5118;
5243 -> 5242;
5244 -> 5118;
5245 -> 4560;
5245 -> 4559;
5246 -> 4560;
5246 -> 4559;
5247 -> 4560;
5247 -> 4559;
5248 -> 4560;
5248 -> 4559;
5249 -> 4559;
5250 -> 5246;
5250 -> 5249;
5250 -> 4559;
5251 -> 4560;
5251 -> 5118;
5251 -> 4559;
5252 -> 4560;
5252 -> 5118;
5252 -> 5251;
5253 -> 4560;
5253 -> 5118;
5253 -> 0;
5253 -> 4559;
5254 -> 4560;
5254 -> 5118;
5254 -> 4559;
5255 -> 5248;
5255 -> 5254;
5256 -> 4560;
5256 -> 5118;
5256 -> 4559;
5257 -> 4560;
5257 -> 4559;
5258 -> 4560;
5258 -> 5118;
5258 -> 4559;
5259 -> 4560;
5259 -> 4559;
5260 -> 4559;
5261 -> 4560;
5261 -> 5260;
5261 -> 4559;
5262 -> 4559;
5263 -> 5262;
5263 -> 4559;
5264 -> 4560;
5264 -> 4559;
5265 -> 4559;
5266 -> 4559;
5267 -> 5118;
5267 -> 5266;
5268 -> 5267;
5268 -> 5118;
5268 -> 5266;
5269 -> 5267;
5269 -> 5118;
5269 -> 5268;
5270 -> 5269;
5270 -> 5268;
5271 -> 5268;
5272 -> 5270;
5272 -> 5271;
5273 -> 5272;
5273 -> 5118;
5273 -> 0;
5273 -> 5271;
5274 -> 5272;
5274 -> 5118;
5274 -> 5271;
5275 -> 5271;
5276 -> 5274;
5276 -> 5275;
5277 -> 5275;
5278 -> 5276;
5278 -> 5277;
5278 -> 5275;
5279 -> 5278;
5280 -> 5276;
5280 -> 5118;
5280 -> 5278;
5281 -> 5275;
5282 -> 5281;
5282 -> 5271;
5283 -> 5273;
5283 -> 5282;
5283 -> 5271;
5284 -> 5266;
5285 -> 5284;
5285 -> 4559;
5286 -> 4559;
5287 -> 5118;
5287 -> 5286;
5288 -> 5287;
5288 -> 5118;
5288 -> 5286;
5289 -> 5287;
5289 -> 5118;
5289 -> 5288;
5290 -> 5289;
5290 -> 5288;
5291 -> 5288;
5292 -> 5290;
5292 -> 5291;
5293 -> 5292;
5293 -> 5118;
5293 -> 0;
5293 -> 5291;
5294 -> 5292;
5294 -> 5118;
5294 -> 5291;
5295 -> 5291;
5296 -> 5294;
5296 -> 5295;
5297 -> 5295;
5298 -> 5296;
5298 -> 5297;
5298 -> 5295;
5299 -> 5298;
5300 -> 5296;
5300 -> 5118;
5300 -> 5298;
5301 -> 5295;
5302 -> 5301;
5302 -> 5291;
5303 -> 5293;
5303 -> 5302;
5303 -> 5291;
5304 -> 5286;
5305 -> 4559;
5306 -> 5182;
5306 -> 5118;
5306 -> 5188;
5307 -> 5306;
5307 -> 5118;
5307 -> 5188;
5308 -> 5182;
5308 -> 5118;
5308 -> 5188;
5309 -> 5182;
5309 -> 5308;
5309 -> 5188;
5310 -> 5191;
5310 -> 5309;
5311 -> 5182;
5311 -> 5308;
5311 -> 5310;
5312 -> 5306;
5312 -> 5310;
5313 -> 5310;
5314 -> 5312;
5314 -> 5313;
5315 -> 5313;
5316 -> 5314;
5316 -> 5315;
5316 -> 5313;
5317 -> 5316;
5318 -> 5314;
5318 -> 5308;
5318 -> 5316;
5319 -> 5313;
5320 -> 5319;
5320 -> 5310;
5321 -> 5311;
5321 -> 5320;
5321 -> 5310;
5322 -> 5182;
5322 -> 5321;
5323 -> 5182;
5323 -> 5308;
5323 -> 5321;
5324 -> 5192;
5324 -> 5308;
5324 -> 5212;
5324 -> 5188;
5325 -> 4560;
5325 -> 5308;
5325 -> 4559;
5326 -> 4560;
5326 -> 5308;
5326 -> 5325;
5327 -> 4560;
5327 -> 5308;
5327 -> 0;
5327 -> 4559;
5328 -> 4560;
5328 -> 5308;
5328 -> 4559;
5329 -> 5248;
5329 -> 5328;
5330 -> 4560;
5330 -> 5308;
5330 -> 4559;
5331 -> 4560;
5331 -> 5308;
5331 -> 4559;
5332 -> 5215;
5332 -> 5308;
5333 -> 5216;
5333 -> 5308;
5334 -> 5332;
5334 -> 5308;
5335 -> 5333;
5335 -> 5308;
5336 -> 5308;
5337 -> 5308;
5338 -> 5308;
5339 -> 5335;
5339 -> 5338;
5339 -> 5308;
5340 -> 5308;
5341 -> 5308;
5341 -> 5340;
5342 -> 5308;
5342 -> 0;
5343 -> 5308;
5344 -> 5337;
5344 -> 5343;
5345 -> 5344;
5346 -> 5344;
5347 -> 5308;
5347 -> 5344;
5348 -> 5344;
5349 -> 5347;
5349 -> 5348;
5350 -> 5348;
5351 -> 5349;
5351 -> 5350;
5352 -> 5350;
5353 -> 5351;
5353 -> 5352;
5353 -> 5350;
5354 -> 5350;
5355 -> 5354;
5355 -> 5348;
5356 -> 5308;
5356 -> 5355;
5357 -> 5308;
5358 -> 5182;
5358 -> 5308;
5358 -> 5188;
5359 -> 5358;
5359 -> 5308;
5359 -> 5188;
5360 -> 5358;
5360 -> 5310;
5361 -> 5360;
5361 -> 5313;
5362 -> 5361;
5362 -> 5315;
5362 -> 5313;
5363 -> 5362;
5364 -> 5361;
5364 -> 5308;
5364 -> 5362;
5365 -> 5353;
5366 -> 5351;
5366 -> 5308;
5366 -> 5353;
5367 -> 5308;
5367 -> 5266;
5368 -> 5367;
5368 -> 5308;
5368 -> 5266;
5369 -> 5367;
5369 -> 5308;
5369 -> 5368;
5370 -> 5369;
5370 -> 5368;
5371 -> 5368;
5372 -> 5370;
5372 -> 5371;
5373 -> 5372;
5373 -> 5308;
5373 -> 0;
5373 -> 5371;
5374 -> 5372;
5374 -> 5308;
5374 -> 5371;
5375 -> 5371;
5376 -> 5374;
5376 -> 5375;
5377 -> 5375;
5378 -> 5376;
5378 -> 5377;
5378 -> 5375;
5379 -> 5378;
5380 -> 5376;
5380 -> 5308;
5380 -> 5378;
5381 -> 5375;
5382 -> 5381;
5382 -> 5371;
5383 -> 5373;
5383 -> 5382;
5383 -> 5371;
5384 -> 5308;
5384 -> 5286;
5385 -> 5384;
5385 -> 5308;
5385 -> 5286;
5386 -> 5384;
5386 -> 5308;
5386 -> 5385;
5387 -> 5386;
5387 -> 5385;
5388 -> 5385;
5389 -> 5387;
5389 -> 5388;
5390 -> 5389;
5390 -> 5308;
5390 -> 0;
5390 -> 5388;
5391 -> 5389;
5391 -> 5308;
5391 -> 5388;
5392 -> 5388;
5393 -> 5391;
5393 -> 5392;
5394 -> 5392;
5395 -> 5393;
5395 -> 5394;
5395 -> 5392;
5396 -> 5395;
5397 -> 5393;
5397 -> 5308;
5397 -> 5395;
5398 -> 5392;
5399 -> 5398;
5399 -> 5388;
5400 -> 5390;
5400 -> 5399;
5400 -> 5388;
5401 -> 4559;
5402 -> 5070;
5402 -> 5308;
5403 -> 5402;
5403 -> 5308;
5404 -> 5308;
5405 -> 4559;
5406 -> 5308;
5406 -> 5121;
5407 -> 5308;
5407 -> 5124;
5408 -> 5407;
5408 -> 5124;
5409 -> 5408;
5409 -> 5128;
5410 -> 5308;
5410 -> 5130;
5411 -> 5410;
5411 -> 5128;
5412 -> 5308;
5412 -> 5128;
5413 -> 5412;
5414 -> 5411;
5414 -> 5413;
5414 -> 5412;
5415 -> 5414;
5416 -> 4560;
5416 -> 5308;
5416 -> 4559;
5417 -> 5308;
5417 -> 5156;
5418 -> 5308;
5418 -> 4559;
5419 -> 5308;
5419 -> 5165;
5420 -> 5308;
5420 -> 4559;
5421 -> 5420;
5421 -> 5162;
5421 -> 5308;
5421 -> 4559;
5422 -> 4560;
5422 -> 5308;
5423 -> 5329;
5424 -> 5329;
5425 -> 4560;
5425 -> 5308;
5425 -> 5329;
5426 -> 5329;
5427 -> 5425;
5427 -> 5426;
5428 -> 5426;
5429 -> 5427;
5429 -> 5428;
5430 -> 5428;
5431 -> 5429;
5431 -> 5430;
5431 -> 5428;
5432 -> 5428;
5433 -> 5432;
5433 -> 5426;
5434 -> 4560;
5434 -> 5308;
5434 -> 5433;
5435 -> 4560;
5435 -> 4559;
5436 -> 4560;
5436 -> 5308;
5436 -> 4559;
5437 -> 5308;
5438 -> 5308;
5438 -> 5437;
5439 -> 5308;
5439 -> 5437;
5440 -> 5308;
5440 -> 5437;
5441 -> 5437;
5442 -> 5438;
5442 -> 5308;
5442 -> 0;
5442 -> 5437;
5443 -> 5442;
5444 -> 5438;
5444 -> 5308;
5444 -> 5437;
5445 -> 5444;
5446 -> 5444;
5447 -> 5445;
5447 -> 5446;
5447 -> 5444;
5448 -> 5445;
5448 -> 5447;
5449 -> 5443;
5449 -> 5447;
5450 -> 5440;
5450 -> 5447;
5451 -> 5447;
5452 -> 5448;
5452 -> 5451;
5453 -> 5449;
5453 -> 5451;
5454 -> 5450;
5454 -> 5451;
5455 -> 5451;
5456 -> 5452;
5456 -> 5308;
5456 -> 5444;
5456 -> 0;
5456 -> 5451;
5457 -> 5452;
5457 -> 5308;
5457 -> 5444;
5457 -> 0;
5457 -> 5456;
5458 -> 5457;
5459 -> 5447;
5460 -> 5308;
5461 -> 5308;
5462 -> 5461;
5462 -> 5308;
5463 -> 5308;
5464 -> 5308;
5465 -> 5308;
5466 -> 5464;
5466 -> 5465;
5467 -> 5464;
5467 -> 5465;
5468 -> 5463;
5468 -> 5465;
5469 -> 5465;
5470 -> 5467;
5470 -> 5469;
5470 -> 5465;
5471 -> 5467;
5471 -> 5464;
5471 -> 5469;
5471 -> 5465;
5472 -> 5463;
5472 -> 5464;
5473 -> 5464;
5474 -> 5464;
5474 -> 5473;
5475 -> 5464;
5475 -> 5473;
5476 -> 5472;
5476 -> 5473;
5477 -> 5473;
5478 -> 5475;
5478 -> 5477;
5478 -> 5473;
5479 -> 5464;
5479 -> 5308;
5480 -> 5308;
5481 -> 4560;
5481 -> 5464;
5481 -> 5308;
5481 -> 5480;
5482 -> 4560;
5482 -> 4559;
5483 -> 4560;
5483 -> 4559;
5484 -> 4560;
5484 -> 4559;
5485 -> 5484;
5485 -> 5464;
5485 -> 4559;
5486 -> 5485;
5486 -> 5464;
5486 -> 4559;
5487 -> 4559;
5488 -> 5487;
5488 -> 5486;
5488 -> 4559;
5489 -> 5485;
5489 -> 5487;
5489 -> 5464;
5489 -> 5488;
5490 -> 5483;
5490 -> 5488;
5491 -> 5488;
5492 -> 5489;
5492 -> 5491;
5493 -> 5490;
5493 -> 5491;
5494 -> 5491;
5494 -> 5489;
5495 -> 5492;
5495 -> 5491;
5496 -> 5491;
5497 -> 5492;
5497 -> 5496;
5497 -> 5491;
5498 -> 5485;
5498 -> 5487;
5498 -> 5492;
5498 -> 5488;
5499 -> 4560;
5499 -> 4559;
5500 -> 0;
5500 -> 4559;
5501 -> 4560;
5501 -> 5498;
5501 -> 4559;
5502 -> 4560;
5502 -> 5498;
5502 -> 5501;
5503 -> 4560;
5503 -> 5498;
5503 -> 0;
5503 -> 4559;
5504 -> 4560;
5504 -> 5498;
5504 -> 4559;
5505 -> 5248;
5505 -> 5504;
5506 -> 4560;
5506 -> 5498;
5506 -> 4559;
5507 -> 4560;
5507 -> 5498;
5507 -> 4559;
5508 -> 5215;
5508 -> 5498;
5509 -> 5216;
5509 -> 5498;
5510 -> 5508;
5510 -> 5498;
5511 -> 5509;
5511 -> 5498;
5512 -> 5498;
5513 -> 5498;
5514 -> 5498;
5515 -> 5511;
5515 -> 5514;
5515 -> 5498;
5516 -> 5498;
5517 -> 5498;
5517 -> 5516;
5518 -> 5498;
5518 -> 0;
5519 -> 5498;
5520 -> 5513;
5520 -> 5519;
5521 -> 5520;
5522 -> 5520;
5523 -> 5498;
5523 -> 5520;
5524 -> 5520;
5525 -> 5523;
5525 -> 5524;
5526 -> 5524;
5527 -> 5525;
5527 -> 5526;
5528 -> 5526;
5529 -> 5527;
5529 -> 5528;
5529 -> 5526;
5530 -> 5526;
5531 -> 5530;
5531 -> 5524;
5532 -> 5498;
5532 -> 5531;
5533 -> 5498;
5534 -> 4560;
5534 -> 5498;
5534 -> 4559;
5535 -> 4560;
5535 -> 4559;
5536 -> 4559;
5537 -> 5505;
5538 -> 5505;
5539 -> 4560;
5539 -> 5498;
5539 -> 5505;
5540 -> 5505;
5541 -> 5539;
5541 -> 5540;
5542 -> 5540;
5543 -> 5541;
5543 -> 5542;
5544 -> 5542;
5545 -> 5543;
5545 -> 5544;
5545 -> 5542;
5546 -> 5542;
5547 -> 5546;
5547 -> 5540;
5548 -> 4560;
5548 -> 5498;
5548 -> 5547;
5549 -> 5498;
5549 -> 0;
5549 -> 5177;
5550 -> 5498;
5551 -> 5498;
5551 -> 5177;
5552 -> 5182;
5552 -> 5498;
5552 -> 5188;
5553 -> 5552;
5553 -> 5498;
5553 -> 5188;
5554 -> 5182;
5554 -> 5498;
5554 -> 5188;
5555 -> 5191;
5555 -> 5554;
5556 -> 5182;
5556 -> 5498;
5556 -> 5555;
5557 -> 5552;
5557 -> 5555;
5558 -> 5555;
5559 -> 5557;
5559 -> 5558;
5560 -> 5558;
5561 -> 5559;
5561 -> 5560;
5561 -> 5558;
5562 -> 5561;
5563 -> 5559;
5563 -> 5498;
5563 -> 5561;
5564 -> 5558;
5565 -> 5564;
5565 -> 5555;
5566 -> 5556;
5566 -> 5565;
5566 -> 5555;
5567 -> 5182;
5567 -> 5566;
5568 -> 5182;
5568 -> 5498;
5568 -> 5566;
5569 -> 5192;
5569 -> 5498;
5569 -> 5212;
5569 -> 5188;
5570 -> 5498;
5570 -> 5266;
5571 -> 5570;
5571 -> 5498;
5571 -> 5266;
5572 -> 5570;
5572 -> 5498;
5572 -> 5571;
5573 -> 5572;
5573 -> 5571;
5574 -> 5571;
5575 -> 5573;
5575 -> 5574;
5576 -> 5575;
5576 -> 5498;
5576 -> 0;
5576 -> 5574;
5577 -> 5575;
5577 -> 5498;
5577 -> 5574;
5578 -> 5574;
5579 -> 5577;
5579 -> 5578;
5580 -> 5578;
5581 -> 5579;
5581 -> 5580;
5581 -> 5578;
5582 -> 5581;
5583 -> 5579;
5583 -> 5498;
5583 -> 5581;
5584 -> 5578;
5585 -> 5584;
5585 -> 5574;
5586 -> 5576;
5586 -> 5585;
5586 -> 5574;
5587 -> 5498;
5587 -> 5286;
5588 -> 5587;
5588 -> 5498;
5588 -> 5286;
5589 -> 5587;
5589 -> 5498;
5589 -> 5588;
5590 -> 5589;
5590 -> 5588;
5591 -> 5588;
5592 -> 5590;
5592 -> 5591;
5593 -> 5592;
5593 -> 5498;
5593 -> 0;
5593 -> 5591;
5594 -> 5592;
5594 -> 5498;
5594 -> 5591;
5595 -> 5591;
5596 -> 5594;
5596 -> 5595;
5597 -> 5595;
5598 -> 5596;
5598 -> 5597;
5598 -> 5595;
5599 -> 5598;
5600 -> 5596;
5600 -> 5498;
5600 -> 5598;
5601 -> 5595;
5602 -> 5601;
5602 -> 5591;
5603 -> 5593;
5603 -> 5602;
5603 -> 5591;
5604 -> 5529;
5605 -> 5527;
5605 -> 5498;
5605 -> 5529;
5606 -> 4560;
5606 -> 5498;
5606 -> 4559;
5607 -> 5498;
5607 -> 5156;
5608 -> 5498;
5608 -> 4559;
5609 -> 5498;
5609 -> 5165;
5610 -> 5498;
5610 -> 4559;
5611 -> 5610;
5611 -> 5162;
5611 -> 5498;
5611 -> 4559;
5612 -> 4560;
5612 -> 5498;
5613 -> 4560;
5613 -> 4559;
5614 -> 4560;
5614 -> 4559;
5615 -> 4560;
5615 -> 4559;
5616 -> 4560;
5616 -> 4559;
5617 -> 4560;
5617 -> 4559;
5618 -> 4559;
5619 -> 5498;
5619 -> 1;
5620 -> 1;
5621 -> 0;
5621 -> 1;
5622 -> 1;
5623 -> 5621;
5623 -> 5622;
5624 -> 5620;
5624 -> 5622;
5625 -> 5620;
5625 -> 5622;
5626 -> 5620;
5626 -> 5622;
5627 -> 5620;
5627 -> 5622;
5628 -> 5620;
5628 -> 5622;
5629 -> 5620;
5629 -> 5622;
5630 -> 5623;
5630 -> 5622;
5631 -> 5624;
5631 -> 5622;
5632 -> 5625;
5632 -> 5622;
5633 -> 5626;
5633 -> 5622;
5634 -> 5627;
5634 -> 5622;
5635 -> 5628;
5635 -> 5622;
5636 -> 5629;
5636 -> 5622;
5637 -> 5622;
5638 -> 5630;
5638 -> 5637;
5639 -> 5631;
5639 -> 5637;
5640 -> 5632;
5640 -> 5637;
5641 -> 5633;
5641 -> 5637;
5642 -> 5634;
5642 -> 5637;
5643 -> 5635;
5643 -> 5637;
5644 -> 5636;
5644 -> 5637;
5645 -> 5638;
5645 -> 5637;
5646 -> 5638;
5646 -> 5637;
5647 -> 5637;
5648 -> 5639;
5648 -> 5637;
5649 -> 5640;
5649 -> 5637;
5650 -> 5641;
5650 -> 5637;
5651 -> 5642;
5651 -> 5637;
5652 -> 5643;
5652 -> 5637;
5653 -> 5644;
5653 -> 5637;
5654 -> 5637;
5655 -> 5646;
5655 -> 5654;
5656 -> 5647;
5656 -> 5654;
5657 -> 5648;
5657 -> 5654;
5658 -> 5649;
5658 -> 5654;
5659 -> 5650;
5659 -> 5654;
5660 -> 5651;
5660 -> 5654;
5661 -> 5652;
5661 -> 5654;
5662 -> 5646;
5662 -> 5654;
5663 -> 5653;
5663 -> 5654;
5664 -> 5647;
5664 -> 5654;
5665 -> 5647;
5665 -> 5654;
5666 -> 5647;
5666 -> 5654;
5667 -> 5666;
5667 -> 5654;
5668 -> 5666;
5668 -> 5654;
5669 -> 5666;
5669 -> 5654;
5670 -> 5666;
5670 -> 5654;
5671 -> 5666;
5671 -> 5654;
5672 -> 5666;
5672 -> 5654;
5673 -> 5666;
5673 -> 5654;
5674 -> 5666;
5674 -> 5654;
5675 -> 5666;
5675 -> 5654;
5676 -> 5666;
5676 -> 5654;
5677 -> 5666;
5677 -> 5654;
5678 -> 5666;
5678 -> 5654;
5679 -> 5666;
5679 -> 5654;
5680 -> 5666;
5680 -> 5654;
5681 -> 5666;
5681 -> 5654;
5682 -> 5655;
5682 -> 5666;
5682 -> 5654;
5683 -> 5656;
5683 -> 5666;
5683 -> 5654;
5684 -> 5657;
5684 -> 5666;
5684 -> 5654;
5685 -> 5658;
5685 -> 5666;
5685 -> 5654;
5686 -> 5659;
5686 -> 5666;
5686 -> 5654;
5687 -> 5660;
5687 -> 5666;
5687 -> 5654;
5688 -> 5661;
5688 -> 5666;
5688 -> 5654;
5689 -> 5662;
5689 -> 5654;
5690 -> 5689;
5690 -> 5666;
5690 -> 5654;
5691 -> 5663;
5691 -> 5666;
5691 -> 5654;
5692 -> 5664;
5692 -> 5666;
5692 -> 5654;
5693 -> 5665;
5693 -> 5666;
5693 -> 5654;
5694 -> 5647;
5694 -> 5622;
5695 -> 5694;
5695 -> 1;
5696 -> 5695;
5696 -> 5620;
5696 -> 1;
5697 -> 1;
5698 -> 5619;
5698 -> 5697;
5699 -> 5620;
5699 -> 5697;
5700 -> 5699;
5700 -> 5697;
5701 -> 5697;
5702 -> 5700;
5702 -> 5701;
5703 -> 5702;
5703 -> 5701;
5704 -> 5701;
5705 -> 5701;
5706 -> 5703;
5706 -> 5705;
5707 -> 5704;
5707 -> 5705;
5708 -> 5705;
5709 -> 5706;
5709 -> 5708;
5709 -> 5705;
5710 -> 5706;
5710 -> 5705;
5711 -> 5710;
5711 -> 5620;
5711 -> 5696;
5711 -> 5682;
5711 -> 5683;
5711 -> 5693;
5711 -> 5684;
5711 -> 5685;
5711 -> 5686;
5711 -> 5688;
5711 -> 5690;
5711 -> 5675;
5711 -> 5691;
5711 -> 5692;
5711 -> 5687;
5711 -> 5679;
5711 -> 5680;
5711 -> 5681;
5711 -> 5646;
5711 -> 5705;
5712 -> 5705;
5713 -> 5710;
5713 -> 5712;
5713 -> 5620;
5713 -> 5696;
5713 -> 5682;
5713 -> 5683;
5713 -> 5693;
5713 -> 5684;
5713 -> 5685;
5713 -> 5686;
5713 -> 5688;
5713 -> 5690;
5713 -> 5675;
5713 -> 5691;
5713 -> 5692;
5713 -> 5687;
5713 -> 5679;
5713 -> 5680;
5713 -> 5681;
5713 -> 5646;
5713 -> 5705;
5714 -> 5713;
5714 -> 5712;
5715 -> 5714;
5715 -> 5713;
5715 -> 5712;
5716 -> 5706;
5716 -> 5705;
5717 -> 5716;
5717 -> 5715;
5717 -> 5705;
5718 -> 5705;
5719 -> 5716;
5719 -> 5718;
5719 -> 5715;
5719 -> 5705;
5720 -> 5719;
5720 -> 5718;
5721 -> 5720;
5721 -> 5719;
5721 -> 5718;
5722 -> 5707;
5722 -> 5715;
5722 -> 5721;
5722 -> 5705;
5723 -> 5698;
5723 -> 5722;
5723 -> 5705;
5724 -> 5705;
5725 -> 5723;
5725 -> 5724;
5726 -> 5723;
5726 -> 5724;
5727 -> 5723;
5727 -> 5724;
5728 -> 5723;
5728 -> 5724;
5729 -> 5723;
5729 -> 5724;
5730 -> 5723;
5730 -> 5724;
5731 -> 5723;
5731 -> 5724;
5732 -> 5723;
5732 -> 5724;
5733 -> 5723;
5733 -> 5724;
5734 -> 5724;
5735 -> 5724;
5736 -> 0;
5736 -> 5724;
5737 -> 5723;
5738 -> 5706;
5738 -> 5705;
5739 -> 5738;
5739 -> 5721;
5739 -> 5705;
5740 -> 5739;
5741 -> 5740;
5742 -> 5723;
5742 -> 5741;
5742 -> 5740;
5743 -> 5723;
5743 -> 5740;
5744 -> 5723;
5744 -> 5740;
5745 -> 5723;
5745 -> 5740;
5746 -> 5723;
5746 -> 5745;
5747 -> 5740;
5748 -> 5723;
5748 -> 5747;
5748 -> 5740;
5749 -> 5748;
5750 -> 5740;
5751 -> 5723;
5751 -> 5750;
5751 -> 5740;
5752 -> 5740;
5753 -> 5723;
5753 -> 5752;
5753 -> 5740;
5754 -> 5723;
5754 -> 5740;
5755 -> 5740;
5756 -> 5723;
5756 -> 5755;
5756 -> 5740;
5757 -> 5756;
5758 -> 5723;
5758 -> 5740;
5759 -> 5740;
5760 -> 5739;
5761 -> 5705;
5762 -> 5723;
5762 -> 5761;
5762 -> 5705;
5763 -> 5705;
5764 -> 5706;
5764 -> 5705;
5765 -> 5705;
5766 -> 5764;
5766 -> 5765;
5767 -> 5765;
5768 -> 5765;
5769 -> 5723;
5769 -> 5765;
5770 -> 5769;
5770 -> 5765;
5771 -> 5766;
5771 -> 5765;
5772 -> 5765;
5773 -> 5766;
5773 -> 5765;
5774 -> 5765;
5775 -> 5766;
5775 -> 5765;
5776 -> 5765;
5777 -> 5775;
5777 -> 5776;
5778 -> 4165;
5778 -> 5776;
5779 -> 5776;
5780 -> 5777;
5780 -> 5776;
5781 -> 5780;
5781 -> 5723;
5781 -> 5776;
5782 -> 5781;
5783 -> 5782;
5784 -> 5765;
5785 -> 5784;
5785 -> 5765;
5786 -> 5765;
5787 -> 5765;
5788 -> 5784;
5788 -> 5787;
5788 -> 5785;
5788 -> 5765;
5789 -> 5765;
5790 -> 5766;
5790 -> 5765;
5791 -> 5790;
5791 -> 5723;
5791 -> 5765;
5792 -> 5791;
5793 -> 5770;
5793 -> 5791;
5794 -> 5791;
5795 -> 5792;
5795 -> 5794;
5796 -> 5793;
5796 -> 5794;
5797 -> 5794;
5798 -> 5797;
5798 -> 5796;
5798 -> 5794;
5799 -> 5794;
5800 -> 5795;
5800 -> 5799;
5801 -> 5799;
5802 -> 5799;
5803 -> 5801;
5803 -> 5802;
5803 -> 5799;
5804 -> 5799;
5805 -> 5800;
5805 -> 5723;
5805 -> 5804;
5805 -> 5799;
5806 -> 5800;
5806 -> 5723;
5806 -> 5805;
5807 -> 5801;
5807 -> 5806;
5807 -> 5803;
5807 -> 5805;
5808 -> 5805;
5809 -> 5801;
5809 -> 5808;
5809 -> 5807;
5809 -> 5805;
5810 -> 5800;
5810 -> 5723;
5810 -> 5805;
5811 -> 5801;
5811 -> 5810;
5811 -> 5809;
5811 -> 5805;
5812 -> 5799;
5813 -> 5800;
5813 -> 5723;
5813 -> 5812;
5813 -> 5799;
5814 -> 5800;
5814 -> 5723;
5814 -> 5799;
5815 -> 5799;
5816 -> 5801;
5816 -> 5815;
5816 -> 5811;
5816 -> 5799;
5817 -> 5799;
5818 -> 5800;
5818 -> 5723;
5818 -> 5817;
5818 -> 5799;
5819 -> 5799;
5820 -> 5800;
5820 -> 5723;
5820 -> 5819;
5820 -> 5799;
5821 -> 5800;
5821 -> 5723;
5821 -> 5799;
5822 -> 5799;
5823 -> 5800;
5823 -> 5723;
5823 -> 5822;
5823 -> 5799;
5824 -> 5799;
5825 -> 5800;
5825 -> 5723;
5825 -> 5824;
5825 -> 5799;
5826 -> 5799;
5827 -> 5800;
5827 -> 5723;
5827 -> 5826;
5827 -> 5799;
5828 -> 5801;
5828 -> 5816;
5828 -> 5799;
5829 -> 5828;
5829 -> 5794;
5830 -> 5798;
5830 -> 5829;
5830 -> 5794;
5831 -> 5789;
5831 -> 5830;
5831 -> 5791;
5832 -> 5784;
5832 -> 5765;
5833 -> 5789;
5833 -> 5765;
5834 -> 5765;
5835 -> 5832;
5835 -> 5834;
5836 -> 5833;
5836 -> 5834;
5837 -> 5836;
5837 -> 5831;
5837 -> 5834;
5838 -> 5834;
5839 -> 5838;
5839 -> 5837;
5839 -> 5834;
5840 -> 5836;
5840 -> 5838;
5840 -> 5831;
5840 -> 5839;
5841 -> 5835;
5841 -> 5840;
5841 -> 5788;
5841 -> 5839;
5842 -> 5839;
5843 -> 5835;
5843 -> 5841;
5843 -> 5839;
5844 -> 5765;
5845 -> 5765;
5846 -> 5784;
5846 -> 5845;
5846 -> 5843;
5846 -> 5765;
5847 -> 5765;
5848 -> 5765;
5849 -> 5723;
5850 -> 5723;
5851 -> 5784;
5851 -> 5723;
5852 -> 5770;
5852 -> 5723;
5853 -> 5723;
5854 -> 5851;
5854 -> 5853;
5855 -> 5852;
5855 -> 5853;
5856 -> 5853;
5857 -> 5856;
5857 -> 5855;
5857 -> 5853;
5858 -> 5854;
5858 -> 5856;
5858 -> 5857;
5858 -> 5846;
5858 -> 5853;
5859 -> 5723;
5860 -> 5723;
5861 -> 5784;
5861 -> 5860;
5861 -> 5858;
5861 -> 5723;
5862 -> 5723;
5863 -> 5862;
5863 -> 5723;
5864 -> 5723;
5865 -> 5723;
5866 -> 5723;
5867 -> 5723;
5868 -> 5723;
5869 -> 5723;
5870 -> 5723;
5871 -> 5723;
5872 -> 5723;
5873 -> 5723;
5874 -> 5723;
5875 -> 5723;
5876 -> 5723;
5877 -> 5723;
5878 -> 5723;
5879 -> 5723;
5879 -> 5878;
5880 -> 5723;
5881 -> 5723;
5882 -> 5723;
5883 -> 5723;
5884 -> 5723;
5885 -> 5884;
5886 -> 5723;
5887 -> 5723;
5888 -> 5766;
5888 -> 5723;
5888 -> 5887;
5889 -> 5723;
5890 -> 5770;
5890 -> 5723;
5891 -> 5723;
5892 -> 5889;
5892 -> 5891;
5893 -> 5890;
5893 -> 5891;
5894 -> 5891;
5895 -> 5894;
5895 -> 5893;
5895 -> 5891;
5896 -> 5891;
5897 -> 5892;
5897 -> 5896;
5898 -> 5896;
5899 -> 5896;
5900 -> 5898;
5900 -> 5899;
5900 -> 5896;
5901 -> 5896;
5902 -> 5897;
5902 -> 5723;
5902 -> 5901;
5902 -> 5896;
5903 -> 5897;
5903 -> 5723;
5903 -> 5902;
5904 -> 5898;
5904 -> 5903;
5904 -> 5900;
5904 -> 5902;
5905 -> 5902;
5906 -> 5898;
5906 -> 5905;
5906 -> 5904;
5906 -> 5902;
5907 -> 5897;
5907 -> 5723;
5907 -> 5902;
5908 -> 5898;
5908 -> 5907;
5908 -> 5906;
5908 -> 5902;
5909 -> 5896;
5910 -> 5897;
5910 -> 5723;
5910 -> 5909;
5910 -> 5896;
5911 -> 5897;
5911 -> 5723;
5911 -> 5896;
5912 -> 5896;
5913 -> 5898;
5913 -> 5912;
5913 -> 5908;
5913 -> 5896;
5914 -> 5896;
5915 -> 5897;
5915 -> 5723;
5915 -> 5914;
5915 -> 5896;
5916 -> 5896;
5917 -> 5897;
5917 -> 5723;
5917 -> 5916;
5917 -> 5896;
5918 -> 5917;
5919 -> 5898;
5919 -> 5918;
5919 -> 5913;
5919 -> 5917;
5920 -> 5917;
5921 -> 5898;
5921 -> 5920;
5921 -> 5919;
5921 -> 5917;
5922 -> 5917;
5923 -> 5898;
5923 -> 5922;
5923 -> 5921;
5923 -> 5917;
5924 -> 5917;
5925 -> 5898;
5925 -> 5924;
5925 -> 5923;
5925 -> 5917;
5926 -> 5917;
5927 -> 5898;
5927 -> 5926;
5927 -> 5925;
5927 -> 5917;
5928 -> 5897;
5928 -> 5723;
5928 -> 5896;
5929 -> 5896;
5930 -> 5897;
5930 -> 5723;
5930 -> 5929;
5930 -> 5896;
5931 -> 5896;
5932 -> 5897;
5932 -> 5723;
5932 -> 5931;
5932 -> 5896;
5933 -> 5896;
5934 -> 5897;
5934 -> 5723;
5934 -> 5933;
5934 -> 5896;
5935 -> 5898;
5935 -> 5927;
5935 -> 5896;
5936 -> 5935;
5936 -> 5891;
5937 -> 5895;
5937 -> 5936;
5937 -> 5891;
5938 -> 5784;
5938 -> 5937;
5938 -> 5861;
5938 -> 5723;
5939 -> 5888;
5939 -> 5723;
5940 -> 5770;
5940 -> 5723;
5941 -> 5723;
5942 -> 5939;
5942 -> 5941;
5943 -> 5940;
5943 -> 5941;
5944 -> 5941;
5945 -> 5944;
5945 -> 5943;
5945 -> 5941;
5946 -> 5941;
5947 -> 5942;
5947 -> 5946;
5948 -> 5946;
5949 -> 5946;
5950 -> 5948;
5950 -> 5949;
5950 -> 5946;
5951 -> 5946;
5952 -> 5947;
5952 -> 5723;
5952 -> 5951;
5952 -> 5946;
5953 -> 5947;
5953 -> 5723;
5953 -> 5952;
5954 -> 5948;
5954 -> 5953;
5954 -> 5950;
5954 -> 5952;
5955 -> 5952;
5956 -> 5948;
5956 -> 5955;
5956 -> 5954;
5956 -> 5952;
5957 -> 5947;
5957 -> 5723;
5957 -> 5952;
5958 -> 5948;
5958 -> 5957;
5958 -> 5956;
5958 -> 5952;
5959 -> 5946;
5960 -> 5947;
5960 -> 5723;
5960 -> 5959;
5960 -> 5946;
5961 -> 5947;
5961 -> 5723;
5961 -> 5946;
5962 -> 5946;
5963 -> 5948;
5963 -> 5962;
5963 -> 5958;
5963 -> 5946;
5964 -> 5946;
5965 -> 5947;
5965 -> 5723;
5965 -> 5964;
5965 -> 5946;
5966 -> 5946;
5967 -> 5947;
5967 -> 5723;
5967 -> 5966;
5967 -> 5946;
5968 -> 5947;
5968 -> 5723;
5968 -> 5946;
5969 -> 5946;
5970 -> 5947;
5970 -> 5723;
5970 -> 5969;
5970 -> 5946;
5971 -> 5946;
5972 -> 5947;
5972 -> 5723;
5972 -> 5971;
5972 -> 5946;
5973 -> 5946;
5974 -> 5947;
5974 -> 5723;
5974 -> 5973;
5974 -> 5946;
5975 -> 5948;
5975 -> 5963;
5975 -> 5946;
5976 -> 5975;
5976 -> 5941;
5977 -> 5945;
5977 -> 5976;
5977 -> 5941;
5978 -> 5847;
5978 -> 5977;
5978 -> 5723;
5979 -> 5765;
5980 -> 5723;
5980 -> 5979;
5980 -> 5765;
5981 -> 5784;
5981 -> 5938;
5981 -> 5980;
5982 -> 5765;
5983 -> 5784;
5983 -> 5982;
5983 -> 5981;
5983 -> 5765;
5984 -> 5789;
5984 -> 5765;
5985 -> 5847;
5985 -> 5765;
5986 -> 0;
5986 -> 5765;
5987 -> 5765;
5988 -> 5765;
5989 -> 5984;
5989 -> 5988;
5990 -> 5985;
5990 -> 5988;
5991 -> 5986;
5991 -> 5988;
5992 -> 5987;
5992 -> 5988;
5993 -> 5987;
5993 -> 5988;
5994 -> 5988;
5995 -> 5992;
5995 -> 5994;
5995 -> 5988;
5996 -> 5995;
5996 -> 5988;
5997 -> 4423;
5997 -> 5996;
5998 -> 5988;
5999 -> 5998;
5999 -> 5993;
5999 -> 5988;
6000 -> 5989;
6000 -> 5988;
6001 -> 5990;
6001 -> 5988;
6002 -> 5991;
6002 -> 5988;
6003 -> 6000;
6003 -> 5988;
6004 -> 6001;
6004 -> 5988;
6005 -> 5999;
6005 -> 5988;
6006 -> 5988;
6007 -> 6003;
6007 -> 6006;
6008 -> 6004;
6008 -> 6006;
6009 -> 6005;
6009 -> 6006;
6010 -> 5997;
6010 -> 6006;
6011 -> 6007;
6011 -> 6006;
6012 -> 6007;
6012 -> 6000;
6012 -> 6006;
6013 -> 6008;
6013 -> 6006;
6014 -> 6008;
6014 -> 6001;
6014 -> 6006;
6015 -> 6006;
6016 -> 6011;
6016 -> 6015;
6017 -> 6012;
6017 -> 6015;
6018 -> 6013;
6018 -> 6015;
6019 -> 6014;
6019 -> 6015;
6020 -> 6010;
6020 -> 6015;
6021 -> 6016;
6021 -> 6015;
6022 -> 6017;
6022 -> 6015;
6023 -> 6018;
6023 -> 6015;
6024 -> 6019;
6024 -> 6015;
6025 -> 6015;
6026 -> 6021;
6026 -> 6025;
6027 -> 6022;
6027 -> 6025;
6028 -> 6023;
6028 -> 6025;
6029 -> 6024;
6029 -> 6025;
6030 -> 6020;
6030 -> 6025;
6031 -> 6025;
6032 -> 6027;
6032 -> 6031;
6032 -> 6025;
6033 -> 6025;
6034 -> 6029;
6034 -> 6033;
6034 -> 6025;
6035 -> 6032;
6035 -> 6034;
6035 -> 6025;
6036 -> 6025;
6037 -> 6036;
6037 -> 6035;
6037 -> 6025;
6038 -> 6025;
6039 -> 6038;
6039 -> 6027;
6039 -> 6025;
6040 -> 6039;
6041 -> 6035;
6041 -> 6037;
6041 -> 6040;
6041 -> 6039;
6042 -> 6041;
6042 -> 6038;
6042 -> 6040;
6042 -> 6035;
6042 -> 6039;
6043 -> 6025;
6044 -> 6043;
6044 -> 6029;
6044 -> 6025;
6045 -> 6044;
6046 -> 6035;
6046 -> 6037;
6046 -> 6042;
6046 -> 6045;
6046 -> 6044;
6047 -> 6046;
6047 -> 6045;
6047 -> 6043;
6047 -> 6035;
6047 -> 6044;
6048 -> 6025;
6049 -> 6048;
6049 -> 6027;
6049 -> 6025;
6050 -> 6049;
6051 -> 6050;
6051 -> 6029;
6051 -> 6049;
6052 -> 6051;
6053 -> 6035;
6053 -> 6037;
6053 -> 6042;
6053 -> 6047;
6053 -> 6052;
6053 -> 6051;
6054 -> 6026;
6054 -> 6051;
6055 -> 6028;
6055 -> 6051;
6056 -> 6051;
6057 -> 6054;
6057 -> 6056;
6058 -> 6052;
6058 -> 6056;
6059 -> 6055;
6059 -> 6056;
6060 -> 6052;
6060 -> 6056;
6061 -> 6030;
6061 -> 6056;
6062 -> 6057;
6062 -> 6000;
6062 -> 6058;
6062 -> 6056;
6063 -> 6059;
6063 -> 6001;
6063 -> 6060;
6063 -> 6056;
6064 -> 6061;
6064 -> 0;
6064 -> 6062;
6064 -> 6063;
6064 -> 6000;
6064 -> 6001;
6064 -> 6056;
6065 -> 6053;
6065 -> 6064;
6065 -> 6051;
6066 -> 6051;
6067 -> 6035;
6067 -> 6037;
6067 -> 6042;
6067 -> 6047;
6067 -> 6066;
6067 -> 6050;
6067 -> 6051;
6068 -> 6051;
6069 -> 6035;
6069 -> 6037;
6069 -> 6042;
6069 -> 6047;
6069 -> 6048;
6069 -> 6068;
6069 -> 6051;
6070 -> 6065;
6070 -> 6051;
6071 -> 6067;
6071 -> 6051;
6072 -> 6070;
6072 -> 6071;
6072 -> 6051;
6073 -> 6069;
6073 -> 6051;
6074 -> 6072;
6074 -> 6073;
6074 -> 6051;
6075 -> 6074;
6075 -> 6048;
6075 -> 6050;
6075 -> 6035;
6075 -> 6051;
6076 -> 6035;
6076 -> 6025;
6077 -> 6017;
6077 -> 6015;
6078 -> 6019;
6078 -> 6015;
6079 -> 6015;
6080 -> 6077;
6080 -> 6079;
6080 -> 6015;
6081 -> 6078;
6081 -> 6079;
6081 -> 6015;
6082 -> 6080;
6082 -> 6081;
6082 -> 6015;
6083 -> 6076;
6083 -> 6035;
6083 -> 6037;
6083 -> 6042;
6083 -> 6047;
6083 -> 6075;
6083 -> 6077;
6083 -> 6078;
6083 -> 6082;
6084 -> 6082;
6085 -> 6076;
6085 -> 6035;
6085 -> 6037;
6085 -> 6042;
6085 -> 6047;
6085 -> 6075;
6085 -> 6084;
6085 -> 6078;
6085 -> 6082;
6086 -> 6076;
6086 -> 6035;
6086 -> 6037;
6086 -> 6042;
6086 -> 6047;
6086 -> 6075;
6086 -> 6077;
6086 -> 6078;
6086 -> 6085;
6087 -> 6085;
6088 -> 6077;
6088 -> 6087;
6089 -> 6078;
6089 -> 6087;
6090 -> 6087;
6091 -> 0;
6091 -> 6087;
6092 -> 6088;
6092 -> 6087;
6093 -> 6089;
6093 -> 6087;
6094 -> 6087;
6095 -> 6091;
6095 -> 6094;
6096 -> 6092;
6096 -> 6094;
6097 -> 6093;
6097 -> 6094;
6098 -> 6090;
6098 -> 6094;
6099 -> 6095;
6099 -> 6098;
6099 -> 6094;
6100 -> 6096;
6100 -> 6098;
6100 -> 6094;
6101 -> 6097;
6101 -> 6098;
6101 -> 6094;
6102 -> 6015;
6103 -> 6088;
6103 -> 6102;
6103 -> 6015;
6104 -> 6015;
6105 -> 6089;
6105 -> 6104;
6105 -> 6015;
6106 -> 6090;
6106 -> 6099;
6106 -> 6100;
6106 -> 6101;
6106 -> 6006;
6107 -> 6106;
6108 -> 6107;
6109 -> 6008;
6109 -> 6001;
6109 -> 6064;
6109 -> 6106;
6109 -> 6107;
6110 -> 6009;
6110 -> 6109;
6110 -> 5998;
6110 -> 6107;
6111 -> 6002;
6111 -> 6108;
6111 -> 5988;
6112 -> 5784;
6112 -> 6111;
6112 -> 5983;
6112 -> 5765;
6113 -> 5847;
6113 -> 5978;
6113 -> 5765;
6114 -> 5789;
6114 -> 5840;
6114 -> 5765;
6115 -> 5784;
6115 -> 6112;
6115 -> 5765;
6116 -> 5697;
}