digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 847683"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 847684"];
3 [label="param CompilationEmitTests(this) 847685"];
4 [label="param EmitMetadataTestBase(this) 847686"];
5 [label="param CSharpTestBase(this) 847687"];
6 [label="param CommonTestBase(this) 847688"];
7 [label="param TestBase(this) 847689"];
8 [label="_temp 847690"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 847691"];
10 [label="param RefAssembly_StrongNameProvider_Arm64(this) 847692"];
11 [label="var signedDllOptions = TestOptions.SigningReleaseDll.\n                 WithCryptoKeyFile(SigningTestHelpers.KeyPairFile).\n                 WithPlatform(Platform.Arm64).\n                 WithDeterministic(true); 847693"];
12 [label="var signedDllOptions = TestOptions.SigningReleaseDll.\n                 WithCryptoKeyFile(SigningTestHelpers.KeyPairFile).\n                 WithPlatform(Platform.Arm64).\n                 WithDeterministic(true); 847694"];
13 [label="var comp = CreateCompilation('public class C{}', options: signedDllOptions); 847695"];
14 [label="'public class C{}' 847696"];
15 [label="param operator(string source) 847697"];
16 [label="source 847698"];
17 [label="new CSharpTestSource(source) 847699"];
18 [label="param CSharpTestSource(object value) 847700"];
19 [label="param CSharpTestSource(this) 847701"];
20 [label="Value 847702"];
21 [label="var comp = CreateCompilation('public class C{}', options: signedDllOptions); 847703"];
22 [label="var comp = CreateCompilation('public class C{}', options: signedDllOptions); 847704"];
23 [label="CreateCompilation('public class C{}', options: signedDllOptions) 847705"];
24 [label="param CreateCompilation(CSharpTestSource source) 847706"];
25 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 847707"];
26 [label="param CreateCompilation(CSharpCompilationOptions options = null) 847708"];
27 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 847709"];
28 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 847710"];
29 [label="param CreateCompilation(string assemblyName = '') 847711"];
30 [label="param CreateCompilation(string sourceFileName = '') 847712"];
31 [label="param CreateCompilation(bool skipUsesIsNullable = false) 847713"];
32 [label="source 847714"];
33 [label="targetFramework 847715"];
34 [label="references 847716"];
35 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 847717"];
36 [label="param GetReferences(TargetFramework tf) 847718"];
37 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 847719"];
38 [label="var references = GetReferences(tf); 847720"];
39 [label="GetReferences(tf) 847721"];
40 [label="param GetReferences(TargetFramework targetFramework) 847722"];
41 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 847723"];
42 [label="StandardReferences 847724"];
43 [label="RuntimeUtilities.IsCoreClrRuntime 847725"];
44 [label="NetStandard20References 847726"];
45 [label="ImmutableArray.Create<MetadataReference>(NetStandard20.netstandard, NetStandard20.mscorlib, NetStandard20.SystemRuntime, NetStandard20.SystemCore, NetStandard20.SystemDynamicRuntime, NetStandard20.SystemLinq, NetStandard20.SystemLinqExpressions) 847727"];
46 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 847728"];
47 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 847729"];
48 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 847730"];
49 [label="return references; 847731"];
50 [label="options 847732"];
51 [label="parseOptions 847733"];
52 [label="assemblyName 847734"];
53 [label="sourceFileName 847735"];
54 [label="skipUsesIsNullable 847736"];
55 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 847737"];
56 [label="param CreateEmptyCompilation(CSharpTestSource source) 847738"];
57 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 847739"];
58 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 847740"];
59 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 847741"];
60 [label="param CreateEmptyCompilation(string assemblyName = '') 847742"];
61 [label="param CreateEmptyCompilation(string sourceFileName = '') 847743"];
62 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 847744"];
63 [label="source 847745"];
64 [label="references 847746"];
65 [label="options 847747"];
66 [label="parseOptions 847748"];
67 [label="assemblyName 847749"];
68 [label="sourceFileName 847750"];
69 [label="skipUsesIsNullable 847751"];
70 [label="null 847752"];
71 [label="experimentalFeature: null 847753"];
72 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 847754"];
73 [label="param CreateCompilationCore(CSharpTestSource source) 847755"];
74 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 847756"];
75 [label="param CreateCompilationCore(CSharpCompilationOptions options) 847757"];
76 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 847758"];
77 [label="param CreateCompilationCore(string assemblyName) 847759"];
78 [label="param CreateCompilationCore(string sourceFileName) 847760"];
79 [label="param CreateCompilationCore(bool skipUsesIsNullable) 847761"];
80 [label="param CreateCompilationCore(MessageID? experimentalFeature) 847762"];
81 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 847763"];
82 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 847764"];
83 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 847765"];
84 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 847766"];
85 [label="param GetSyntaxTrees(string sourceFileName = '') 847767"];
86 [label="param GetSyntaxTrees(this) 847768"];
87 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 847769"];
88 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 847770"];
89 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 847771"];
90 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 847772"];
91 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 847773"];
92 [label="param Parse(string text) 847774"];
93 [label="param Parse(string filename = '') 847775"];
94 [label="param Parse(CSharpParseOptions options = null) 847776"];
95 [label="param Parse(Encoding encoding = null) 847777"];
96 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 847778"];
97 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 847779"];
98 [label="options = TestOptions.Regular; 847780"];
99 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 847781"];
100 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 847782"];
101 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 847783"];
102 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 847784"];
103 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 847785"];
104 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 847786"];
105 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 847787"];
106 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 847788"];
107 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 847789"];
108 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 847790"];
109 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 847791"];
110 [label="param CheckSerializable(SyntaxTree tree) 847792"];
111 [label="var stream = new MemoryStream(); 847793"];
112 [label="var root = tree.GetRoot(); 847794"];
113 [label="var root = tree.GetRoot(); 847795"];
114 [label="root.SerializeTo(stream); 847796"];
115 [label="root.SerializeTo(stream); 847797"];
116 [label="root.SerializeTo(stream); 847798"];
117 [label="stream.Position = 0; 847799"];
118 [label="stream.Position 847800"];
119 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 847801"];
120 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 847802"];
121 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 847803"];
122 [label="return tree; 847804"];
123 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 847805"];
124 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 847806"];
125 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 847807"];
126 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 847808"];
127 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 847809"];
128 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 847810"];
129 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 847811"];
130 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 847812"];
131 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 847813"];
132 [label="param ValidateIOperations(Func<Compilation> createCompilation) 847814"];
133 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 847815"];
134 [label="return; 847816"];
135 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 847817"];
136 [label="var compilation = createCompilationLambda(); 847818"];
137 [label="var compilation = createCompilationLambda(); 847819"];
138 [label="return Guid.NewGuid().ToString('D'); 847820"];
139 [label="var compilation = createCompilationLambda(); 847821"];
140 [label="OutputKind.ConsoleApplication 847822"];
141 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 847823"];
142 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 847824"];
143 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 847825"];
144 [label="OutputKind.DynamicallyLinkedLibrary 847826"];
145 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 847827"];
146 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 847828"];
147 [label="true 847829"];
148 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 847830"];
149 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 847831"];
150 [label="param Create(string? assemblyName) 847832"];
151 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 847833"];
152 [label="param Create(IEnumerable<MetadataReference>? references = null) 847834"];
153 [label="param Create(CSharpCompilationOptions? options = null) 847835"];
154 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 847836"];
155 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 847837"];
156 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 847838"];
157 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 847839"];
158 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 847840"];
159 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 847841"];
160 [label="param Create(string? assemblyName) 847842"];
161 [label="param Create(CSharpCompilationOptions options) 847843"];
162 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 847844"];
163 [label="param Create(IEnumerable<MetadataReference>? references) 847845"];
164 [label="param Create(CSharpCompilation? previousSubmission) 847846"];
165 [label="param Create(Type? returnType) 847847"];
166 [label="param Create(Type? hostObjectType) 847848"];
167 [label="param Create(bool isSubmission) 847849"];
168 [label="RoslynDebug.Assert(options != null); 847850"];
169 [label="RoslynDebug.Assert(options != null); 847851"];
170 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 847852"];
171 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 847853"];
172 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 847854"];
173 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 847855"];
174 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 847856"];
175 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 847857"];
176 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 847858"];
177 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 847859"];
178 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 847860"];
179 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 847861"];
180 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 847862"];
181 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 847863"];
182 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 847864"];
183 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 847865"];
184 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 847866"];
185 [label="param SyntaxAndDeclarationManager(string scriptClassName) 847867"];
186 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 847868"];
187 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 847869"];
188 [label="param SyntaxAndDeclarationManager(bool isSubmission) 847870"];
189 [label="param SyntaxAndDeclarationManager(State state) 847871"];
190 [label="param SyntaxAndDeclarationManager(this) 847872"];
191 [label="externalSyntaxTrees 847873"];
192 [label="scriptClassName 847874"];
193 [label="resolver 847875"];
194 [label="messageProvider 847876"];
195 [label="isSubmission 847877"];
196 [label="param SyntaxAndDeclarationManager(this) 847878"];
197 [label="param SyntaxAndDeclarationManager(this) 847879"];
198 [label="_lazyState 847880"];
199 [label="_lazyState 847881"];
200 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 847882"];
201 [label="param CSharpCompilation(string? assemblyName) 847883"];
202 [label="param CSharpCompilation(CSharpCompilationOptions options) 847884"];
203 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 847885"];
204 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 847886"];
205 [label="param CSharpCompilation(Type? submissionReturnType) 847887"];
206 [label="param CSharpCompilation(Type? hostObjectType) 847888"];
207 [label="param CSharpCompilation(bool isSubmission) 847889"];
208 [label="param CSharpCompilation(ReferenceManager? referenceManager) 847890"];
209 [label="param CSharpCompilation(bool reuseReferenceManager) 847891"];
210 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 847892"];
211 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 847893"];
212 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 847894"];
213 [label="param CSharpCompilation(this) 847895"];
214 [label="assemblyName 847896"];
215 [label="options 847897"];
216 [label="references 847898"];
217 [label="previousSubmission 847899"];
218 [label="submissionReturnType 847900"];
219 [label="hostObjectType 847901"];
220 [label="isSubmission 847902"];
221 [label="referenceManager 847903"];
222 [label="reuseReferenceManager 847904"];
223 [label="syntaxAndDeclarations 847905"];
224 [label="syntaxAndDeclarations.ExternalSyntaxTrees 847906"];
225 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 847907"];
226 [label="semanticModelProvider 847908"];
227 [label="eventQueue 847909"];
228 [label="param CSharpCompilation(this) 847910"];
229 [label="param CSharpCompilation(string? assemblyName) 847911"];
230 [label="param CSharpCompilation(CSharpCompilationOptions options) 847912"];
231 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 847913"];
232 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 847914"];
233 [label="param CSharpCompilation(Type? submissionReturnType) 847915"];
234 [label="param CSharpCompilation(Type? hostObjectType) 847916"];
235 [label="param CSharpCompilation(bool isSubmission) 847917"];
236 [label="param CSharpCompilation(ReferenceManager? referenceManager) 847918"];
237 [label="param CSharpCompilation(bool reuseReferenceManager) 847919"];
238 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 847920"];
239 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 847921"];
240 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 847922"];
241 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 847923"];
242 [label="param CSharpCompilation(this) 847924"];
243 [label="assemblyName 847925"];
244 [label="references 847926"];
245 [label="features 847927"];
246 [label="isSubmission 847928"];
247 [label="semanticModelProvider 847929"];
248 [label="eventQueue 847930"];
249 [label="param CSharpCompilation(this) 847931"];
250 [label="param CSharpCompilation(this) 847932"];
251 [label="_options 847933"];
252 [label="_globalImports 847934"];
253 [label="_previousSubmissionImports 847935"];
254 [label="_globalNamespaceAlias 847936"];
255 [label="_scriptClass 847937"];
256 [label="_lazyHostObjectTypeSymbol 847938"];
257 [label="_lazyImportInfos 847939"];
258 [label="_conversions 847940"];
259 [label="_anonymousTypeManager 847941"];
260 [label="_lazyGlobalNamespace 847942"];
261 [label="builtInOperators 847943"];
262 [label="_lazyAssemblySymbol 847944"];
263 [label="_referenceManager 847945"];
264 [label="_syntaxAndDeclarations 847946"];
265 [label="_lazyEntryPoint 847947"];
266 [label="_lazyEmitNullablePublicOnly 847948"];
267 [label="_lazyCompilationUnitCompletedTrees 847949"];
268 [label="NullableAnalysisData 847950"];
269 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 847951"];
270 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 847952"];
271 [label="_externAliasTargets 847953"];
272 [label="_moduleInitializerMethods 847954"];
273 [label="_binderFactories 847955"];
274 [label="_ignoreAccessibilityBinderFactories 847956"];
275 [label="_lazyDeclarationDiagnostics 847957"];
276 [label="_declarationDiagnosticsFrozen 847958"];
277 [label="new DiagnosticBag() 847959"];
278 [label="_additionalCodegenWarnings = new DiagnosticBag() 847960"];
279 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 847961"];
280 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 847962"];
281 [label="WellKnownMemberSignatureComparer 847963"];
282 [label="_options 847964"];
283 [label="this.builtInOperators = new BuiltInOperators(this); 847965"];
284 [label="this.builtInOperators = new BuiltInOperators(this); 847966"];
285 [label="new BuiltInOperators(this) 847967"];
286 [label="param BuiltInOperators(CSharpCompilation compilation) 847968"];
287 [label="param BuiltInOperators(this) 847969"];
288 [label="_compilation 847970"];
289 [label="_builtInUnaryOperators 847971"];
290 [label="_builtInOperators 847972"];
291 [label="_compilation 847973"];
292 [label="this.builtInOperators 847974"];
293 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 847975"];
294 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 847976"];
295 [label="_scriptClass 847977"];
296 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 847978"];
297 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 847979"];
298 [label="_globalImports 847980"];
299 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 847981"];
300 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 847982"];
301 [label="_previousSubmissionImports 847983"];
302 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 847984"];
303 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 847985"];
304 [label="_globalNamespaceAlias 847986"];
305 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 847987"];
306 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 847988"];
307 [label="_anonymousTypeManager 847989"];
308 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 847990"];
309 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 847991"];
310 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 847992"];
311 [label="LanguageVersion? result = null; 847993"];
312 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 847994"];
313 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 847995"];
314 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 847996"];
315 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 847997"];
316 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 847998"];
317 [label="this.LanguageVersion 847999"];
318 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 848000"];
319 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848001"];
320 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848002"];
321 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848003"];
322 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848004"];
323 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848005"];
324 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848006"];
325 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 848007"];
326 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 848008"];
327 [label="this.Options 848009"];
328 [label="get\n            {\n                return _options;\n            } 848010"];
329 [label="return _options; 848011"];
330 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 848012"];
331 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 848013"];
332 [label="_referenceManager 848014"];
333 [label="_syntaxAndDeclarations 848015"];
334 [label="Debug.Assert(_lazyAssemblySymbol is null); 848016"];
335 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 848017"];
336 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 848018"];
337 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 848019"];
338 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 848020"];
339 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 848021"];
340 [label="compilation.AddSyntaxTrees(syntaxTrees) 848022"];
341 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 848023"];
342 [label="param AddSyntaxTrees(this) 848024"];
343 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 848025"];
344 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 848026"];
345 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 848027"];
346 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 848028"];
347 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 848029"];
348 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 848030"];
349 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 848031"];
350 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 848032"];
351 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 848033"];
352 [label="bool reuseReferenceManager = true; 848034"];
353 [label="int i = 0; 848035"];
354 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 848036"];
355 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 848037"];
356 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 848038"];
357 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 848039"];
358 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 848040"];
359 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 848041"];
360 [label="externalSyntaxTrees.Add(tree); 848042"];
361 [label="externalSyntaxTrees.Add(tree); 848043"];
362 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 848044"];
363 [label="i++; 848045"];
364 [label="externalSyntaxTrees.Free(); 848046"];
365 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 848047"];
366 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 848048"];
367 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 848049"];
368 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 848050"];
369 [label="param AddSyntaxTrees(this) 848051"];
370 [label="var scriptClassName = this.ScriptClassName; 848052"];
371 [label="var resolver = this.Resolver; 848053"];
372 [label="var messageProvider = this.MessageProvider; 848054"];
373 [label="var isSubmission = this.IsSubmission; 848055"];
374 [label="var state = _lazyState; 848056"];
375 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 848057"];
376 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 848058"];
377 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 848059"];
378 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 848060"];
379 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 848061"];
380 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 848062"];
381 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 848063"];
382 [label="param WithExternalSyntaxTrees(this) 848064"];
383 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 848065"];
384 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 848066"];
385 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 848067"];
386 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 848068"];
387 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 848069"];
388 [label="param SyntaxAndDeclarationManager(string scriptClassName) 848070"];
389 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 848071"];
390 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 848072"];
391 [label="param SyntaxAndDeclarationManager(bool isSubmission) 848073"];
392 [label="param SyntaxAndDeclarationManager(State state) 848074"];
393 [label="param SyntaxAndDeclarationManager(this) 848075"];
394 [label="param SyntaxAndDeclarationManager(this) 848076"];
395 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 848077"];
396 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 848078"];
397 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 848079"];
398 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 848080"];
399 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 848081"];
400 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 848082"];
401 [label="param Update(ReferenceManager referenceManager) 848083"];
402 [label="param Update(bool reuseReferenceManager) 848084"];
403 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 848085"];
404 [label="param Update(this) 848086"];
405 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 848087"];
406 [label="this.PreviousSubmission 848088"];
407 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 848089"];
408 [label="ScriptCompilationInfo 848090"];
409 [label="ScriptCompilationInfo?.PreviousScriptCompilation 848091"];
410 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 848092"];
411 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 848093"];
412 [label="this.SubmissionReturnType 848094"];
413 [label="=> ScriptCompilationInfo 848095"];
414 [label="ScriptCompilationInfo 848096"];
415 [label="this.HostObjectType 848097"];
416 [label="=> ScriptCompilationInfo 848098"];
417 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 848099"];
418 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 848100"];
419 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 848101"];
420 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 848102"];
421 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 848103"];
422 [label="param CSharpCompilation(string? assemblyName) 848104"];
423 [label="param CSharpCompilation(CSharpCompilationOptions options) 848105"];
424 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 848106"];
425 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 848107"];
426 [label="param CSharpCompilation(Type? submissionReturnType) 848108"];
427 [label="param CSharpCompilation(Type? hostObjectType) 848109"];
428 [label="param CSharpCompilation(bool isSubmission) 848110"];
429 [label="param CSharpCompilation(ReferenceManager? referenceManager) 848111"];
430 [label="param CSharpCompilation(bool reuseReferenceManager) 848112"];
431 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 848113"];
432 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 848114"];
433 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 848115"];
434 [label="param CSharpCompilation(this) 848116"];
435 [label="previousSubmission 848117"];
436 [label="submissionReturnType 848118"];
437 [label="hostObjectType 848119"];
438 [label="syntaxAndDeclarations.ExternalSyntaxTrees 848120"];
439 [label="eventQueue 848121"];
440 [label="param CSharpCompilation(this) 848122"];
441 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 848123"];
442 [label="param CSharpCompilation(Type? submissionReturnType) 848124"];
443 [label="param CSharpCompilation(Type? hostObjectType) 848125"];
444 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 848126"];
445 [label="param CSharpCompilation(this) 848127"];
446 [label="eventQueue 848128"];
447 [label="param CSharpCompilation(this) 848129"];
448 [label="_options 848130"];
449 [label="_globalImports 848131"];
450 [label="_previousSubmissionImports 848132"];
451 [label="_globalNamespaceAlias 848133"];
452 [label="_scriptClass 848134"];
453 [label="_lazyHostObjectTypeSymbol 848135"];
454 [label="_lazyImportInfos 848136"];
455 [label="_conversions 848137"];
456 [label="_anonymousTypeManager 848138"];
457 [label="_lazyGlobalNamespace 848139"];
458 [label="builtInOperators 848140"];
459 [label="_lazyAssemblySymbol 848141"];
460 [label="_referenceManager 848142"];
461 [label="_syntaxAndDeclarations 848143"];
462 [label="_lazyEntryPoint 848144"];
463 [label="_lazyEmitNullablePublicOnly 848145"];
464 [label="_lazyCompilationUnitCompletedTrees 848146"];
465 [label="NullableAnalysisData 848147"];
466 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 848148"];
467 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 848149"];
468 [label="_externAliasTargets 848150"];
469 [label="_moduleInitializerMethods 848151"];
470 [label="_binderFactories 848152"];
471 [label="_ignoreAccessibilityBinderFactories 848153"];
472 [label="_lazyDeclarationDiagnostics 848154"];
473 [label="_declarationDiagnosticsFrozen 848155"];
474 [label="new DiagnosticBag() 848156"];
475 [label="_additionalCodegenWarnings = new DiagnosticBag() 848157"];
476 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 848158"];
477 [label="this.builtInOperators = new BuiltInOperators(this); 848159"];
478 [label="this.builtInOperators = new BuiltInOperators(this); 848160"];
479 [label="new BuiltInOperators(this) 848161"];
480 [label="param BuiltInOperators(CSharpCompilation compilation) 848162"];
481 [label="param BuiltInOperators(this) 848163"];
482 [label="_compilation 848164"];
483 [label="_builtInUnaryOperators 848165"];
484 [label="_builtInOperators 848166"];
485 [label="_compilation 848167"];
486 [label="this.builtInOperators 848168"];
487 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 848169"];
488 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 848170"];
489 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 848171"];
490 [label="LanguageVersion? result = null; 848172"];
491 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 848173"];
492 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 848174"];
493 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 848175"];
494 [label="result = version; 848176"];
495 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 848177"];
496 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848178"];
497 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848179"];
498 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848180"];
499 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848181"];
500 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848182"];
501 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 848183"];
502 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 848184"];
503 [label="referenceManager.AssertCanReuseForCompilation(this); 848185"];
504 [label="referenceManager.AssertCanReuseForCompilation(this); 848186"];
505 [label="_referenceManager 848187"];
506 [label="Debug.Assert(_lazyAssemblySymbol is null); 848188"];
507 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 848189"];
508 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 848190"];
509 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 848191"];
510 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 848192"];
511 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 848193"];
512 [label="return compilation; 848194"];
513 [label="var compilation = createCompilationLambda(); 848195"];
514 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 848196"];
515 [label="IsNullableEnabled(compilation) 848197"];
516 [label="param IsNullableEnabled(CSharpCompilation compilation) 848198"];
517 [label="compilation.SyntaxTrees 848199"];
518 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 848200"];
519 [label="_syntaxAndDeclarations.GetLazyState() 848201"];
520 [label="param GetLazyState(this) 848202"];
521 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 848203"];
522 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 848204"];
523 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 848205"];
524 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 848206"];
525 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 848207"];
526 [label="param CreateState(string scriptClassName) 848208"];
527 [label="param CreateState(SourceReferenceResolver resolver) 848209"];
528 [label="param CreateState(CommonMessageProvider messageProvider) 848210"];
529 [label="param CreateState(bool isSubmission) 848211"];
530 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 848212"];
531 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 848213"];
532 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 848214"];
533 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 848215"];
534 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 848216"];
535 [label="var declTable = DeclarationTable.Empty; 848217"];
536 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 848218"];
537 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848219"];
538 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848220"];
539 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848221"];
540 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848222"];
541 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848223"];
542 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848224"];
543 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848225"];
544 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848226"];
545 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848227"];
546 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848228"];
547 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 848229"];
548 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 848230"];
549 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 848231"];
550 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 848232"];
551 [label="param AppendAllSyntaxTrees(string scriptClassName) 848233"];
552 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 848234"];
553 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 848235"];
554 [label="param AppendAllSyntaxTrees(bool isSubmission) 848236"];
555 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 848237"];
556 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 848238"];
557 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 848239"];
558 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 848240"];
559 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 848241"];
560 [label="var sourceCodeKind = tree.Options.Kind; 848242"];
561 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 848243"];
562 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 848244"];
563 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 848245"];
564 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 848246"];
565 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 848247"];
566 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 848248"];
567 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 848249"];
568 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 848250"];
569 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 848251"];
570 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 848252"];
571 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 848253"];
572 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 848254"];
573 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 848255"];
574 [label="declMapBuilder.Add(tree, lazyRoot); 848256"];
575 [label="declMapBuilder.Add(tree, lazyRoot); 848257"];
576 [label="declMapBuilder.Add(tree, lazyRoot); 848258"];
577 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 848259"];
578 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 848260"];
579 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 848261"];
580 [label="treesBuilder.Add(tree); 848262"];
581 [label="treesBuilder.Add(tree); 848263"];
582 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 848264"];
583 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 848265"];
584 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 848266"];
585 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 848267"];
586 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 848268"];
587 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 848269"];
588 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 848270"];
589 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 848271"];
590 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 848272"];
591 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 848273"];
592 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 848274"];
593 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 848275"];
594 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 848276"];
595 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 848277"];
596 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 848278"];
597 [label="param State(DeclarationTable declarationTable) 848279"];
598 [label="param State(this) 848280"];
599 [label="OrdinalMap 848281"];
600 [label="LoadDirectiveMap 848282"];
601 [label="LoadedSyntaxTreeMap 848283"];
602 [label="RootNamespaces 848284"];
603 [label="DeclarationTable 848285"];
604 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 848286"];
605 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 848287"];
606 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 848288"];
607 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 848289"];
608 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 848290"];
609 [label="this.SyntaxTrees 848291"];
610 [label="this.OrdinalMap 848292"];
611 [label="this.LoadDirectiveMap 848293"];
612 [label="this.LoadedSyntaxTreeMap 848294"];
613 [label="this.RootNamespaces 848295"];
614 [label="this.DeclarationTable 848296"];
615 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 848297"];
616 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 848298"];
617 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 848299"];
618 [label="return _lazyState; 848300"];
619 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 848301"];
620 [label="var trees = compilation.SyntaxTrees; 848302"];
621 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 848303"];
622 [label="var options = (CSharpParseOptions)trees[0].Options; 848304"];
623 [label="var options = (CSharpParseOptions)trees[0].Options; 848305"];
624 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 848306"];
625 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 848307"];
626 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 848308"];
627 [label="return compilation; 848309"];
628 [label="comp.VerifyDiagnostics(); 848310"];
629 [label="comp.VerifyDiagnostics(); 848311"];
630 [label="comp.VerifyDiagnostics() 848312"];
631 [label="param VerifyDiagnostics(this TCompilation c) 848313"];
632 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 848314"];
633 [label="var diagnostics = c.GetDiagnostics(); 848315"];
634 [label="c.GetDiagnostics() 848316"];
635 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 848317"];
636 [label="param GetDiagnostics(this) 848318"];
637 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 848319"];
638 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 848320"];
639 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 848321"];
640 [label="GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken) 848322"];
641 [label="param GetDiagnostics(CompilationStage stage) 848323"];
642 [label="param GetDiagnostics(bool includeEarlierStages) 848324"];
643 [label="param GetDiagnostics(CancellationToken cancellationToken) 848325"];
644 [label="param GetDiagnostics(this) 848326"];
645 [label="var diagnostics = DiagnosticBag.GetInstance(); 848327"];
646 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 848328"];
647 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 848329"];
648 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 848330"];
649 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 848331"];
650 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 848332"];
651 [label="param GetDiagnostics(CompilationStage stage) 848333"];
652 [label="param GetDiagnostics(bool includeEarlierStages) 848334"];
653 [label="param GetDiagnostics(DiagnosticBag diagnostics) 848335"];
654 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 848336"];
655 [label="param GetDiagnostics(this) 848337"];
656 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 848338"];
657 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 848339"];
658 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 848340"];
659 [label="this.SyntaxTrees 848341"];
660 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 848342"];
661 [label="_syntaxAndDeclarations.GetLazyState() 848343"];
662 [label="param GetLazyState(this) 848344"];
663 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 848345"];
664 [label="var syntaxTrees = this.SyntaxTrees; 848346"];
665 [label="this.Options 848347"];
666 [label="get\n            {\n                return _options;\n            } 848348"];
667 [label="return _options; 848349"];
668 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 848350"];
669 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 848351"];
670 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 848352"];
671 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 848353"];
672 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 848354"];
673 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 848355"];
674 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 848356"];
675 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 848357"];
676 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 848358"];
677 [label="ImmutableArray<LoadDirective> loadDirectives; 848359"];
678 [label="loadDirectives 848360"];
679 [label="syntaxAndDeclarations.GetLazyState() 848361"];
680 [label="param GetLazyState(this) 848362"];
681 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 848363"];
682 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 848364"];
683 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 848365"];
684 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 848366"];
685 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 848367"];
686 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 848368"];
687 [label="cancellationToken.ThrowIfCancellationRequested(); 848369"];
688 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 848370"];
689 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 848371"];
690 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 848372"];
691 [label="CheckAssemblyName(builder); 848373"];
692 [label="CheckAssemblyName(builder); 848374"];
693 [label="CheckAssemblyName(builder); 848375"];
694 [label="get { return _syntaxAndDeclarations.MessageProvider; } 848376"];
695 [label="return _syntaxAndDeclarations.MessageProvider; 848377"];
696 [label="Options 848378"];
697 [label="get\n            {\n                return _options;\n            } 848379"];
698 [label="return _options; 848380"];
699 [label="builder.AddRange(Options.Errors); 848381"];
700 [label="Options 848382"];
701 [label="get\n            {\n                return _options;\n            } 848383"];
702 [label="return _options; 848384"];
703 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 848385"];
704 [label="cancellationToken.ThrowIfCancellationRequested(); 848386"];
705 [label="GetBoundReferenceManager() 848387"];
706 [label="param GetBoundReferenceManager(this) 848388"];
707 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 848389"];
708 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 848390"];
709 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 848391"];
710 [label="get { return this.Declarations.ReferenceDirectives; } 848392"];
711 [label="this.Declarations 848393"];
712 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 848394"];
713 [label="_syntaxAndDeclarations.GetLazyState() 848395"];
714 [label="param GetLazyState(this) 848396"];
715 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 848397"];
716 [label="return this.Declarations.ReferenceDirectives; 848398"];
717 [label="get { return _options; } 848399"];
718 [label="return _options; 848400"];
719 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 848401"];
720 [label="_syntaxAndDeclarations.GetLazyState() 848402"];
721 [label="Debug.Assert(_lazyAssemblySymbol is object); 848403"];
722 [label="return _referenceManager; 848404"];
723 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 848405"];
724 [label="cancellationToken.ThrowIfCancellationRequested(); 848406"];
725 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 848407"];
726 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 848408"];
727 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 848409"];
728 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 848410"];
729 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 848411"];
730 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 848412"];
731 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 848413"];
732 [label="param GetSourceDeclarationDiagnostics(this) 848414"];
733 [label="GlobalImports 848415"];
734 [label="=> _globalImports.Value 848416"];
735 [label="_globalImports.Value 848417"];
736 [label="_globalImports.Value 848418"];
737 [label="=> Imports.FromGlobalUsings(this) 848419"];
738 [label="this 848420"];
739 [label="Imports.FromGlobalUsings(this) 848421"];
740 [label="Imports.FromGlobalUsings(this) 848422"];
741 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 848423"];
742 [label="ScriptCompilationInfo 848424"];
743 [label="ScriptCompilationInfo?.PreviousScriptCompilation 848425"];
744 [label="GlobalImports.Complete(cancellationToken); 848426"];
745 [label="GlobalImports.Complete(cancellationToken); 848427"];
746 [label="GlobalImports.Complete(cancellationToken); 848428"];
747 [label="SourceLocation? location = null; 848429"];
748 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 848430"];
749 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 848431"];
750 [label="Assembly 848432"];
751 [label="get\n            {\n                return SourceAssembly;\n            } 848433"];
752 [label="SourceAssembly 848434"];
753 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 848435"];
754 [label="GetBoundReferenceManager() 848436"];
755 [label="param GetBoundReferenceManager(this) 848437"];
756 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 848438"];
757 [label="return _referenceManager; 848439"];
758 [label="GetBoundReferenceManager(); 848440"];
759 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 848441"];
760 [label="return _lazyAssemblySymbol; 848442"];
761 [label="return SourceAssembly; 848443"];
762 [label="Assembly.ForceComplete(location, cancellationToken); 848444"];
763 [label="Assembly.ForceComplete(location, cancellationToken); 848445"];
764 [label="Assembly.ForceComplete(location, cancellationToken); 848446"];
765 [label="Assembly.ForceComplete(location, cancellationToken); 848447"];
766 [label="Assembly.ForceComplete(location, cancellationToken); 848448"];
767 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 848449"];
768 [label="Declarations 848450"];
769 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 848451"];
770 [label="_syntaxAndDeclarations.GetLazyState() 848452"];
771 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 848453"];
772 [label="return Declarations.GetMergedRoot(this); 848454"];
773 [label="return Declarations.GetMergedRoot(this); 848455"];
774 [label="return Declarations.GetMergedRoot(this); 848456"];
775 [label="_syntaxAndDeclarations.GetLazyState() 848457"];
776 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 848458"];
777 [label="SourceAssembly 848459"];
778 [label="GetBoundReferenceManager() 848460"];
779 [label="param GetBoundReferenceManager(this) 848461"];
780 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 848462"];
781 [label="return _referenceManager; 848463"];
782 [label="GetBoundReferenceManager(); 848464"];
783 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 848465"];
784 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 848466"];
785 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 848467"];
786 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 848468"];
787 [label="var diagnostics = new DiagnosticBag(); 848469"];
788 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 848470"];
789 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 848471"];
790 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 848472"];
791 [label="return _lazyDeclarationDiagnostics; 848473"];
792 [label="param SymbolDeclaredEvent(Symbol symbol) 848474"];
793 [label="param SymbolDeclaredEvent(this) 848475"];
794 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 848476"];
795 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 848477"];
796 [label="param GetUnaliasedReferencedAssemblies(this) 848478"];
797 [label="GetBoundReferenceManager() 848479"];
798 [label="param GetBoundReferenceManager(this) 848480"];
799 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 848481"];
800 [label="return _referenceManager; 848482"];
801 [label="var referenceManager = GetBoundReferenceManager(); 848483"];
802 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 848484"];
803 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 848485"];
804 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 848486"];
805 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 848487"];
806 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 848488"];
807 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 848489"];
808 [label="return _additionalCodegenWarnings; 848490"];
809 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 848491"];
810 [label="return _referenceManager; 848492"];
811 [label="GetBoundReferenceManager(); 848493"];
812 [label="param GetSpecialType(SpecialType specialType) 848494"];
813 [label="param GetSpecialType(this) 848495"];
814 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 848496"];
815 [label="NamedTypeSymbol result; 848497"];
816 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 848498"];
817 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 848499"];
818 [label="Assembly 848500"];
819 [label="GetBoundReferenceManager() 848501"];
820 [label="GetBoundReferenceManager(); 848502"];
821 [label="result = Assembly.GetSpecialType(specialType); 848503"];
822 [label="result = Assembly.GetSpecialType(specialType); 848504"];
823 [label="Debug.Assert(result.SpecialType == specialType); 848505"];
824 [label="return result; 848506"];
825 [label="param ShouldEmitNullableAttributes(Symbol symbol) 848507"];
826 [label="param ShouldEmitNullableAttributes(this) 848508"];
827 [label="RoslynDebug.Assert(symbol is object); 848509"];
828 [label="RoslynDebug.Assert(symbol is object); 848510"];
829 [label="Debug.Assert(symbol.IsDefinition); 848511"];
830 [label="SourceModule 848512"];
831 [label="get\n            {\n                return Assembly.Modules[0];\n            } 848513"];
832 [label="Assembly 848514"];
833 [label="get\n            {\n                return SourceAssembly;\n            } 848515"];
834 [label="SourceAssembly 848516"];
835 [label="GetBoundReferenceManager() 848517"];
836 [label="param GetBoundReferenceManager(this) 848518"];
837 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 848519"];
838 [label="return _referenceManager; 848520"];
839 [label="GetBoundReferenceManager(); 848521"];
840 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 848522"];
841 [label="return Assembly.Modules[0]; 848523"];
842 [label="return Assembly.Modules[0]; 848524"];
843 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 848525"];
844 [label="EmitNullablePublicOnly 848526"];
845 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 848527"];
846 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 848528"];
847 [label="SyntaxTrees 848529"];
848 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 848530"];
849 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 848531"];
850 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 848532"];
851 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 848533"];
852 [label="_lazyEmitNullablePublicOnly 848534"];
853 [label="return _lazyEmitNullablePublicOnly.Value(); 848535"];
854 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 848536"];
855 [label="return true; 848537"];
856 [label="Debug.Assert(symbol.IsDefinition); 848538"];
857 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 848539"];
858 [label="return _referenceManager; 848540"];
859 [label="GetBoundReferenceManager(); 848541"];
860 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 848542"];
861 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 848543"];
862 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 848544"];
863 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 848545"];
864 [label="_declarationDiagnosticsFrozen = true; 848546"];
865 [label="_declarationDiagnosticsFrozen 848547"];
866 [label="_needsGeneratedAttributes_IsFrozen = true; 848548"];
867 [label="_needsGeneratedAttributes_IsFrozen 848549"];
868 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 848550"];
869 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 848551"];
870 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 848552"];
871 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 848553"];
872 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 848554"];
873 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 848555"];
874 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 848556"];
875 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 848557"];
876 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 848558"];
877 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 848559"];
878 [label="param GetClsComplianceDiagnostics(this) 848560"];
879 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 848561"];
880 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 848562"];
881 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 848563"];
882 [label="var builder = DiagnosticBag.GetInstance(); 848564"];
883 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 848565"];
884 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 848566"];
885 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 848567"];
886 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 848568"];
887 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 848569"];
888 [label="param CheckCompliance(CSharpCompilation compilation) 848570"];
889 [label="param CheckCompliance(DiagnosticBag diagnostics) 848571"];
890 [label="param CheckCompliance(CancellationToken cancellationToken) 848572"];
891 [label="param CheckCompliance(SyntaxTree filterTree = null) 848573"];
892 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 848574"];
893 [label="var queue = new ConcurrentQueue<Diagnostic>(); 848575"];
894 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 848576"];
895 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 848577"];
896 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 848578"];
897 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 848579"];
898 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 848580"];
899 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 848581"];
900 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 848582"];
901 [label="param ClsComplianceChecker(CSharpCompilation compilation) 848583"];
902 [label="param ClsComplianceChecker(SyntaxTree filterTree) 848584"];
903 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 848585"];
904 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 848586"];
905 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 848587"];
906 [label="param ClsComplianceChecker(this) 848588"];
907 [label="param ClsComplianceChecker(this) 848589"];
908 [label="_compilation 848590"];
909 [label="_filterTree 848591"];
910 [label="_filterSpanWithinTree 848592"];
911 [label="_diagnostics 848593"];
912 [label="_declaredOrInheritedCompliance 848594"];
913 [label="_compilerTasks 848595"];
914 [label="_compilation 848596"];
915 [label="_filterTree 848597"];
916 [label="_filterSpanWithinTree 848598"];
917 [label="_diagnostics 848599"];
918 [label="_cancellationToken 848600"];
919 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 848601"];
920 [label="_declaredOrInheritedCompliance 848602"];
921 [label="ConcurrentAnalysis 848603"];
922 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 848604"];
923 [label="null 848605"];
924 [label="_filterTree == null 848606"];
925 [label="_compilation.Options 848607"];
926 [label="get\n            {\n                return _options;\n            } 848608"];
927 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 848609"];
928 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 848610"];
929 [label="_compilerTasks = new ConcurrentStack<Task>(); 848611"];
930 [label="_compilerTasks 848612"];
931 [label="compilation.Assembly 848613"];
932 [label="get\n            {\n                return SourceAssembly;\n            } 848614"];
933 [label="GetBoundReferenceManager() 848615"];
934 [label="param GetBoundReferenceManager(this) 848616"];
935 [label="GetBoundReferenceManager(); 848617"];
936 [label="checker.Visit(compilation.Assembly); 848618"];
937 [label="checker.Visit(compilation.Assembly); 848619"];
938 [label="checker.Visit(compilation.Assembly); 848620"];
939 [label="param VisitAssembly(AssemblySymbol symbol) 848621"];
940 [label="param VisitAssembly(this) 848622"];
941 [label="_cancellationToken.ThrowIfCancellationRequested(); 848623"];
942 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 848624"];
943 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 848625"];
944 [label="GetDeclaredOrInheritedCompliance(symbol) 848626"];
945 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 848627"];
946 [label="param GetDeclaredOrInheritedCompliance(this) 848628"];
947 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 848629"];
948 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 848630"];
949 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 848631"];
950 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 848632"];
951 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 848633"];
952 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 848634"];
953 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 848635"];
954 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 848636"];
955 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 848637"];
956 [label="Compliance compliance; 848638"];
957 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 848639"];
958 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 848640"];
959 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 848641"];
960 [label="Location ignoredLocation; 848642"];
961 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 848643"];
962 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 848644"];
963 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 848645"];
964 [label="param GetDeclaredCompliance(Symbol symbol) 848646"];
965 [label="param GetDeclaredCompliance(out Location attributeLocation) 848647"];
966 [label="param GetDeclaredCompliance(this) 848648"];
967 [label="attributeLocation = null; 848649"];
968 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 848650"];
969 [label="return null; 848651"];
970 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 848652"];
971 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 848653"];
972 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 848654"];
973 [label="compliance = Compliance.ImpliedFalse; 848655"];
974 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 848656"];
975 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 848657"];
976 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 848658"];
977 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 848659"];
978 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 848660"];
979 [label="IsTrue(assemblyCompliance) 848661"];
980 [label="param IsTrue(Compliance compliance) 848662"];
981 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 848663"];
982 [label="return false; 848664"];
983 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 848665"];
984 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 848666"];
985 [label="ModuleSymbol module = symbol.Modules[i]; 848667"];
986 [label="Location attributeLocation; 848668"];
987 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 848669"];
988 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 848670"];
989 [label="GetDeclaredCompliance(module, out attributeLocation) 848671"];
990 [label="param GetDeclaredCompliance(Symbol symbol) 848672"];
991 [label="param GetDeclaredCompliance(out Location attributeLocation) 848673"];
992 [label="param GetDeclaredCompliance(this) 848674"];
993 [label="attributeLocation = null; 848675"];
994 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 848676"];
995 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 848677"];
996 [label="i == 0 848678"];
997 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 848679"];
998 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 848680"];
999 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 848681"];
1000 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 848682"];
1001 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 848683"];
1002 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 848684"];
1003 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 848685"];
1004 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 848686"];
1005 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 848687"];
1006 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 848688"];
1007 [label="GetDeclaredOrInheritedCompliance(sourceModule) 848689"];
1008 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 848690"];
1009 [label="param GetDeclaredOrInheritedCompliance(this) 848691"];
1010 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 848692"];
1011 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 848693"];
1012 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 848694"];
1013 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 848695"];
1014 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 848696"];
1015 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 848697"];
1016 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 848698"];
1017 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 848699"];
1018 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 848700"];
1019 [label="Compliance compliance; 848701"];
1020 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 848702"];
1021 [label="Location ignoredLocation; 848703"];
1022 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 848704"];
1023 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 848705"];
1024 [label="param GetDeclaredCompliance(out Location attributeLocation) 848706"];
1025 [label="param GetDeclaredCompliance(this) 848707"];
1026 [label="attributeLocation = null; 848708"];
1027 [label="return null; 848709"];
1028 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 848710"];
1029 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 848711"];
1030 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 848712"];
1031 [label="GetInheritedCompliance(symbol) 848713"];
1032 [label="param GetInheritedCompliance(Symbol symbol) 848714"];
1033 [label="param GetInheritedCompliance(this) 848715"];
1034 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 848716"];
1035 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 848717"];
1036 [label="System.Diagnostics.Debug.Assert((object)containing != null); 848718"];
1037 [label="System.Diagnostics.Debug.Assert((object)containing != null); 848719"];
1038 [label="return GetDeclaredOrInheritedCompliance(containing); 848720"];
1039 [label="GetDeclaredOrInheritedCompliance(containing) 848721"];
1040 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 848722"];
1041 [label="param GetDeclaredOrInheritedCompliance(this) 848723"];
1042 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 848724"];
1043 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 848725"];
1044 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 848726"];
1045 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 848727"];
1046 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 848728"];
1047 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 848729"];
1048 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 848730"];
1049 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 848731"];
1050 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 848732"];
1051 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 848733"];
1052 [label="return compliance; 848734"];
1053 [label="IsTrue(GetInheritedCompliance(symbol)) 848735"];
1054 [label="param IsTrue(Compliance compliance) 848736"];
1055 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 848737"];
1056 [label="return false; 848738"];
1057 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 848739"];
1058 [label="param IsTrue(Compliance compliance) 848740"];
1059 [label="Visit(symbol.GlobalNamespace); 848741"];
1060 [label="Visit(symbol.GlobalNamespace); 848742"];
1061 [label="param VisitNamespace(NamespaceSymbol symbol) 848743"];
1062 [label="param VisitNamespace(this) 848744"];
1063 [label="_cancellationToken.ThrowIfCancellationRequested(); 848745"];
1064 [label="if (DoNotVisit(symbol)) return; 848746"];
1065 [label="DoNotVisit(symbol) 848747"];
1066 [label="param DoNotVisit(Symbol symbol) 848748"];
1067 [label="param DoNotVisit(this) 848749"];
1068 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 848750"];
1069 [label="return false; 848751"];
1070 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 848752"];
1071 [label="GetDeclaredOrInheritedCompliance(symbol) 848753"];
1072 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 848754"];
1073 [label="param GetDeclaredOrInheritedCompliance(this) 848755"];
1074 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 848756"];
1075 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 848757"];
1076 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 848758"];
1077 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 848759"];
1078 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 848760"];
1079 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 848761"];
1080 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 848762"];
1081 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 848763"];
1082 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 848764"];
1083 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 848765"];
1084 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 848766"];
1085 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 848767"];
1086 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 848768"];
1087 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 848769"];
1088 [label="return compliance; 848770"];
1089 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 848771"];
1090 [label="param IsTrue(Compliance compliance) 848772"];
1091 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 848773"];
1092 [label="return false; 848774"];
1093 [label="ConcurrentAnalysis 848775"];
1094 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 848776"];
1095 [label="null 848777"];
1096 [label="_filterTree == null 848778"];
1097 [label="_compilation.Options 848779"];
1098 [label="get\n            {\n                return _options;\n            } 848780"];
1099 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 848781"];
1100 [label="VisitNamespaceMembersAsTasks(symbol); 848782"];
1101 [label="VisitNamespaceMembersAsTasks(symbol) 848783"];
1102 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 848784"];
1103 [label="param VisitNamespaceMembersAsTasks(this) 848785"];
1104 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 848786"];
1105 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 848787"];
1106 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 848788"];
1107 [label="VisitNamespaceMembersAsTasks(symbol); 848789"];
1108 [label="checker.WaitForWorkers() 848790"];
1109 [label="param WaitForWorkers(this) 848791"];
1110 [label="var tasks = _compilerTasks; 848792"];
1111 [label="if (tasks == null)\n            {\n                return;\n            } 848793"];
1112 [label="if (tasks == null)\n            {\n                return;\n            } 848794"];
1113 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 848795"];
1114 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 848796"];
1115 [label="curTask.GetAwaiter().GetResult(); 848797"];
1116 [label="checker.WaitForWorkers(); 848798"];
1117 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 848799"];
1118 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 848800"];
1119 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 848801"];
1120 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 848802"];
1121 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 848803"];
1122 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 848804"];
1123 [label="return _lazyClsComplianceDiagnostics; 848805"];
1124 [label="return result.AsImmutable().Concat(clsDiagnostics); 848806"];
1125 [label="return result.AsImmutable().Concat(clsDiagnostics); 848807"];
1126 [label="return result.AsImmutable().Concat(clsDiagnostics); 848808"];
1127 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 848809"];
1128 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 848810"];
1129 [label="cancellationToken.ThrowIfCancellationRequested(); 848811"];
1130 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 848812"];
1131 [label="var methodBodyDiagnostics = DiagnosticBag.GetInstance(); 848813"];
1132 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 848814"];
1133 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 848815"];
1134 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken) 848816"];
1135 [label="param GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics) 848817"];
1136 [label="param GetDiagnosticsForAllMethodBodies(CancellationToken cancellationToken) 848818"];
1137 [label="param GetDiagnosticsForAllMethodBodies(this) 848819"];
1138 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 848820"];
1139 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 848821"];
1140 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 848822"];
1141 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 848823"];
1142 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken) 848824"];
1143 [label="param CompileMethodBodies(CSharpCompilation compilation) 848825"];
1144 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 848826"];
1145 [label="param CompileMethodBodies(bool emittingPdb) 848827"];
1146 [label="param CompileMethodBodies(bool emitTestCoverageData) 848828"];
1147 [label="param CompileMethodBodies(bool hasDeclarationErrors) 848829"];
1148 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 848830"];
1149 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 848831"];
1150 [label="param CompileMethodBodies(CancellationToken cancellationToken) 848832"];
1151 [label="Debug.Assert(compilation != null); 848833"];
1152 [label="Debug.Assert(compilation != null); 848834"];
1153 [label="Debug.Assert(diagnostics != null); 848835"];
1154 [label="Debug.Assert(diagnostics != null); 848836"];
1155 [label="compilation.PreviousSubmission 848837"];
1156 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 848838"];
1157 [label="ScriptCompilationInfo 848839"];
1158 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 848840"];
1159 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 848841"];
1160 [label="MethodSymbol entryPoint = null; 848842"];
1161 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 848843"];
1162 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 848844"];
1163 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 848845"];
1164 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 848846"];
1165 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 848847"];
1166 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 848848"];
1167 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 848849"];
1168 [label="param GetEntryPoint(CSharpCompilation compilation) 848850"];
1169 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 848851"];
1170 [label="param GetEntryPoint(bool hasDeclarationErrors) 848852"];
1171 [label="param GetEntryPoint(DiagnosticBag diagnostics) 848853"];
1172 [label="param GetEntryPoint(CancellationToken cancellationToken) 848854"];
1173 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 848855"];
1174 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 848856"];
1175 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 848857"];
1176 [label="param GetEntryPointAndDiagnostics(this) 848858"];
1177 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 848859"];
1178 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 848860"];
1179 [label="EntryPoint? entryPoint; 848861"];
1180 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 848862"];
1181 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 848863"];
1182 [label="GetBoundReferenceManager() 848864"];
1183 [label="GetBoundReferenceManager(); 848865"];
1184 [label="this.Options 848866"];
1185 [label="return _options; 848867"];
1186 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 848868"];
1187 [label="this.ScriptClass 848869"];
1188 [label="get { return _scriptClass.Value; } 848870"];
1189 [label="return _scriptClass.Value; 848871"];
1190 [label="_scriptClass.Value 848872"];
1191 [label="param BindScriptClass(this) 848873"];
1192 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 848874"];
1193 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 848875"];
1194 [label="get { return this.SourceModule.GetPublicSymbol(); } 848876"];
1195 [label="this.SourceModule 848877"];
1196 [label="get\n            {\n                return Assembly.Modules[0];\n            } 848878"];
1197 [label="GetBoundReferenceManager() 848879"];
1198 [label="param GetBoundReferenceManager(this) 848880"];
1199 [label="GetBoundReferenceManager(); 848881"];
1200 [label="return this.SourceModule.GetPublicSymbol(); 848882"];
1201 [label="get\n            {\n                return this.SyntaxTrees;\n            } 848883"];
1202 [label="this.SyntaxTrees 848884"];
1203 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 848885"];
1204 [label="param GetLazyState(this) 848886"];
1205 [label="return this.SyntaxTrees; 848887"];
1206 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 848888"];
1207 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 848889"];
1208 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 848890"];
1209 [label="null 848891"];
1210 [label="ImmutableArray<Diagnostic>.Empty 848892"];
1211 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 848893"];
1212 [label="param EntryPoint(MethodSymbol? methodSymbol) 848894"];
1213 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 848895"];
1214 [label="param EntryPoint(this) 848896"];
1215 [label="MethodSymbol 848897"];
1216 [label="this.MethodSymbol 848898"];
1217 [label="this.Diagnostics 848899"];
1218 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 848900"];
1219 [label="entryPoint = EntryPoint.None; 848901"];
1220 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 848902"];
1221 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 848903"];
1222 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 848904"];
1223 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 848905"];
1224 [label="return _lazyEntryPoint; 848906"];
1225 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 848907"];
1226 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 848908"];
1227 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 848909"];
1228 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 848910"];
1229 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 848911"];
1230 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 848912"];
1231 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 848913"];
1232 [label="return null; 848914"];
1233 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 848915"];
1234 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 848916"];
1235 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 848917"];
1236 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 848918"];
1237 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 848919"];
1238 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 848920"];
1239 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 848921"];
1240 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 848922"];
1241 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 848923"];
1242 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 848924"];
1243 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 848925"];
1244 [label="param MethodCompiler(CSharpCompilation compilation) 848926"];
1245 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 848927"];
1246 [label="param MethodCompiler(bool emittingPdb) 848928"];
1247 [label="param MethodCompiler(bool emitTestCoverageData) 848929"];
1248 [label="param MethodCompiler(bool hasDeclarationErrors) 848930"];
1249 [label="param MethodCompiler(DiagnosticBag diagnostics) 848931"];
1250 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 848932"];
1251 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 848933"];
1252 [label="param MethodCompiler(CancellationToken cancellationToken) 848934"];
1253 [label="param MethodCompiler(this) 848935"];
1254 [label="param MethodCompiler(this) 848936"];
1255 [label="_compilation 848937"];
1256 [label="_emittingPdb 848938"];
1257 [label="_emitTestCoverageData 848939"];
1258 [label="_diagnostics 848940"];
1259 [label="_hasDeclarationErrors 848941"];
1260 [label="_moduleBeingBuiltOpt 848942"];
1261 [label="_filterOpt 848943"];
1262 [label="_debugDocumentProvider 848944"];
1263 [label="_entryPointOpt 848945"];
1264 [label="_compilerTasks 848946"];
1265 [label="_globalHasErrors 848947"];
1266 [label="Debug.Assert(compilation != null); 848948"];
1267 [label="Debug.Assert(compilation != null); 848949"];
1268 [label="Debug.Assert(diagnostics != null); 848950"];
1269 [label="Debug.Assert(diagnostics != null); 848951"];
1270 [label="_compilation 848952"];
1271 [label="_moduleBeingBuiltOpt 848953"];
1272 [label="_emittingPdb 848954"];
1273 [label="_cancellationToken 848955"];
1274 [label="_diagnostics 848956"];
1275 [label="_filterOpt 848957"];
1276 [label="_entryPointOpt 848958"];
1277 [label="_hasDeclarationErrors 848959"];
1278 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 848960"];
1279 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 848961"];
1280 [label="param SetGlobalErrorIfTrue(bool arg) 848962"];
1281 [label="param SetGlobalErrorIfTrue(this) 848963"];
1282 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 848964"];
1283 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 848965"];
1284 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 848966"];
1285 [label="_emitTestCoverageData 848967"];
1286 [label="compilation.Options 848968"];
1287 [label="get\n            {\n                return _options;\n            } 848969"];
1288 [label="return _options; 848970"];
1289 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 848971"];
1290 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 848972"];
1291 [label="methodCompiler._compilerTasks 848973"];
1292 [label="compilation.SourceModule 848974"];
1293 [label="get\n            {\n                return Assembly.Modules[0];\n            } 848975"];
1294 [label="Assembly 848976"];
1295 [label="get\n            {\n                return SourceAssembly;\n            } 848977"];
1296 [label="SourceAssembly 848978"];
1297 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 848979"];
1298 [label="GetBoundReferenceManager() 848980"];
1299 [label="param GetBoundReferenceManager(this) 848981"];
1300 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 848982"];
1301 [label="return _referenceManager; 848983"];
1302 [label="GetBoundReferenceManager(); 848984"];
1303 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 848985"];
1304 [label="return Assembly.Modules[0]; 848986"];
1305 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 848987"];
1306 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 848988"];
1307 [label="param CompileNamespace(NamespaceSymbol symbol) 848989"];
1308 [label="param CompileNamespace(this) 848990"];
1309 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 848991"];
1310 [label="s.Accept(this, null); 848992"];
1311 [label="s.Accept(this, null); 848993"];
1312 [label="s.Accept(this, null); 848994"];
1313 [label="param VisitNamedType(NamedTypeSymbol symbol) 848995"];
1314 [label="param VisitNamedType(TypeCompilationState arg) 848996"];
1315 [label="param VisitNamedType(this) 848997"];
1316 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 848998"];
1317 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 848999"];
1318 [label="PassesFilter(_filterOpt, symbol) 849000"];
1319 [label="param PassesFilter(Predicate<Symbol> filterOpt) 849001"];
1320 [label="param PassesFilter(Symbol symbol) 849002"];
1321 [label="return (filterOpt == null) || filterOpt(symbol); 849003"];
1322 [label="return (filterOpt == null) || filterOpt(symbol); 849004"];
1323 [label="arg = null; 849005"];
1324 [label="_cancellationToken.ThrowIfCancellationRequested(); 849006"];
1325 [label="_compilation.Options 849007"];
1326 [label="get\n            {\n                return _options;\n            } 849008"];
1327 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 849009"];
1328 [label="Task worker = CompileNamedTypeAsync(symbol); 849010"];
1329 [label="CompileNamedTypeAsync(symbol) 849011"];
1330 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 849012"];
1331 [label="param CompileNamedTypeAsync(this) 849013"];
1332 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 849014"];
1333 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 849015"];
1334 [label="Task worker = CompileNamedTypeAsync(symbol); 849016"];
1335 [label="_compilerTasks.Push(worker); 849017"];
1336 [label="return null; 849018"];
1337 [label="s.Accept(this, null); 849019"];
1338 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 849020"];
1339 [label="methodCompiler.WaitForWorkers() 849021"];
1340 [label="param WaitForWorkers(this) 849022"];
1341 [label="var tasks = _compilerTasks; 849023"];
1342 [label="if (tasks == null)\n            {\n                return;\n            } 849024"];
1343 [label="if (tasks == null)\n            {\n                return;\n            } 849025"];
1344 [label="Task curTask; 849026"];
1345 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 849027"];
1346 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 849028"];
1347 [label="curTask.GetAwaiter().GetResult(); 849029"];
1348 [label="methodCompiler.WaitForWorkers(); 849030"];
1349 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 849031"];
1350 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 849032"];
1351 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 849033"];
1352 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 849034"];
1353 [label="compilation.AdditionalCodegenWarnings 849035"];
1354 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 849036"];
1355 [label="return _additionalCodegenWarnings; 849037"];
1356 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 849038"];
1357 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 849039"];
1358 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 849040"];
1359 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 849041"];
1360 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 849042"];
1361 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 849043"];
1362 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 849044"];
1363 [label="param WarnUnusedFields(CSharpCompilation compilation) 849045"];
1364 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 849046"];
1365 [label="param WarnUnusedFields(CancellationToken cancellationToken) 849047"];
1366 [label="compilation.Assembly 849048"];
1367 [label="get\n            {\n                return SourceAssembly;\n            } 849049"];
1368 [label="SourceAssembly 849050"];
1369 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 849051"];
1370 [label="GetBoundReferenceManager() 849052"];
1371 [label="param GetBoundReferenceManager(this) 849053"];
1372 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 849054"];
1373 [label="return _referenceManager; 849055"];
1374 [label="GetBoundReferenceManager(); 849056"];
1375 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 849057"];
1376 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 849058"];
1377 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 849059"];
1378 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 849060"];
1379 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 849061"];
1380 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 849062"];
1381 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 849063"];
1382 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 849064"];
1383 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 849065"];
1384 [label="new[] { '\\r\\n', '\\r', '\\n' } 849066"];
1385 [label="'\\r\\n' 849067"];
1386 [label="'\\r' 849068"];
1387 [label="'\\n' 849069"];
1388 [label="new[] { '\\r\\n', '\\r', '\\n' } 849070"];
1389 [label="new[] { '\\r\\n', '\\r', '\\n' } 849071"];
1390 [label="new[] { '\\r\\n', '\\r', '\\n' } 849072"];
1391 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 849073"];
1392 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 849074"];
1393 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 849075"];
1394 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 849076"];
1395 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 849077"];
1396 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken) 849078"];
1397 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 849079"];
1398 [label="param WriteDocumentationCommentXml(string? assemblyName) 849080"];
1399 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 849081"];
1400 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 849082"];
1401 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 849083"];
1402 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 849084"];
1403 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 849085"];
1404 [label="StreamWriter writer = null; 849086"];
1405 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 849087"];
1406 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 849088"];
1407 [label="compilation.SourceAssembly 849089"];
1408 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 849090"];
1409 [label="GetBoundReferenceManager() 849091"];
1410 [label="param GetBoundReferenceManager(this) 849092"];
1411 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 849093"];
1412 [label="return _referenceManager; 849094"];
1413 [label="GetBoundReferenceManager(); 849095"];
1414 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 849096"];
1415 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 849097"];
1416 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 849098"];
1417 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 849099"];
1418 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 849100"];
1419 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 849101"];
1420 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 849102"];
1421 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 849103"];
1422 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 849104"];
1423 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 849105"];
1424 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 849106"];
1425 [label="param DocumentationCommentCompiler(string assemblyName) 849107"];
1426 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 849108"];
1427 [label="param DocumentationCommentCompiler(TextWriter writer) 849109"];
1428 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 849110"];
1429 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 849111"];
1430 [label="param DocumentationCommentCompiler(bool processIncludes) 849112"];
1431 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 849113"];
1432 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 849114"];
1433 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 849115"];
1434 [label="param DocumentationCommentCompiler(this) 849116"];
1435 [label="param DocumentationCommentCompiler(this) 849117"];
1436 [label="_assemblyName 849118"];
1437 [label="_compilation 849119"];
1438 [label="_writer 849120"];
1439 [label="_filterTree 849121"];
1440 [label="_filterSpanWithinTree 849122"];
1441 [label="_processIncludes 849123"];
1442 [label="_isForSingleSymbol 849124"];
1443 [label="_diagnostics 849125"];
1444 [label="_lazyComparer 849126"];
1445 [label="_includedFileCache 849127"];
1446 [label="_indentDepth 849128"];
1447 [label="_temporaryStringBuilders 849129"];
1448 [label="_assemblyName 849130"];
1449 [label="_compilation 849131"];
1450 [label="_writer 849132"];
1451 [label="_filterTree 849133"];
1452 [label="_filterSpanWithinTree 849134"];
1453 [label="_processIncludes 849135"];
1454 [label="_isForSingleSymbol 849136"];
1455 [label="_diagnostics 849137"];
1456 [label="_cancellationToken 849138"];
1457 [label="compilation.SourceAssembly 849139"];
1458 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 849140"];
1459 [label="GetBoundReferenceManager() 849141"];
1460 [label="param GetBoundReferenceManager(this) 849142"];
1461 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 849143"];
1462 [label="return _referenceManager; 849144"];
1463 [label="GetBoundReferenceManager(); 849145"];
1464 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 849146"];
1465 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 849147"];
1466 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 849148"];
1467 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 849149"];
1468 [label="param VisitNamespace(NamespaceSymbol symbol) 849150"];
1469 [label="param VisitNamespace(this) 849151"];
1470 [label="_cancellationToken.ThrowIfCancellationRequested(); 849152"];
1471 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 849153"];
1472 [label="Debug.Assert(_assemblyName != null); 849154"];
1473 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 849155"];
1474 [label="WriteLine('<?xml version=\\'1.0\\'?>') 849156"];
1475 [label="param WriteLine(string message) 849157"];
1476 [label="param WriteLine(this) 849158"];
1477 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849159"];
1478 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849160"];
1479 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849161"];
1480 [label="WriteLine('<doc>'); 849162"];
1481 [label="WriteLine('<doc>') 849163"];
1482 [label="param WriteLine(string message) 849164"];
1483 [label="param WriteLine(this) 849165"];
1484 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849166"];
1485 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849167"];
1486 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849168"];
1487 [label="Indent() 849169"];
1488 [label="param Indent(this) 849170"];
1489 [label="_indentDepth 849171"];
1490 [label="Indent(); 849172"];
1491 [label="_compilation.Options 849173"];
1492 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 849174"];
1493 [label="WriteLine('<assembly>'); 849175"];
1494 [label="WriteLine('<assembly>') 849176"];
1495 [label="param WriteLine(string message) 849177"];
1496 [label="param WriteLine(this) 849178"];
1497 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849179"];
1498 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849180"];
1499 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849181"];
1500 [label="Indent() 849182"];
1501 [label="param Indent(this) 849183"];
1502 [label="_indentDepth 849184"];
1503 [label="Indent(); 849185"];
1504 [label="WriteLine('<name>{0}</name>', _assemblyName); 849186"];
1505 [label="WriteLine('<name>{0}</name>', _assemblyName) 849187"];
1506 [label="WriteLine('<name>{0}</name>', _assemblyName) 849188"];
1507 [label="param WriteLine(string format) 849189"];
1508 [label="param WriteLine(params object[] args) 849190"];
1509 [label="param WriteLine(this) 849191"];
1510 [label="WriteLine(string.Format(format, args)); 849192"];
1511 [label="WriteLine(string.Format(format, args)); 849193"];
1512 [label="WriteLine(string.Format(format, args)); 849194"];
1513 [label="WriteLine(string.Format(format, args)) 849195"];
1514 [label="param WriteLine(string message) 849196"];
1515 [label="param WriteLine(this) 849197"];
1516 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849198"];
1517 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849199"];
1518 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849200"];
1519 [label="WriteLine(string.Format(format, args)); 849201"];
1520 [label="Unindent() 849202"];
1521 [label="param Unindent(this) 849203"];
1522 [label="_indentDepth 849204"];
1523 [label="Debug.Assert(_indentDepth >= 0); 849205"];
1524 [label="Debug.Assert(_indentDepth >= 0); 849206"];
1525 [label="Unindent(); 849207"];
1526 [label="WriteLine('</assembly>'); 849208"];
1527 [label="WriteLine('</assembly>') 849209"];
1528 [label="param WriteLine(string message) 849210"];
1529 [label="param WriteLine(this) 849211"];
1530 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849212"];
1531 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849213"];
1532 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849214"];
1533 [label="WriteLine('<members>'); 849215"];
1534 [label="WriteLine('<members>') 849216"];
1535 [label="param WriteLine(string message) 849217"];
1536 [label="param WriteLine(this) 849218"];
1537 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849219"];
1538 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849220"];
1539 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849221"];
1540 [label="Indent() 849222"];
1541 [label="param Indent(this) 849223"];
1542 [label="_indentDepth 849224"];
1543 [label="Indent(); 849225"];
1544 [label="Debug.Assert(!_isForSingleSymbol); 849226"];
1545 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 849227"];
1546 [label="_cancellationToken.ThrowIfCancellationRequested(); 849228"];
1547 [label="s.Accept(this); 849229"];
1548 [label="s.Accept(this); 849230"];
1549 [label="s.Accept(this); 849231"];
1550 [label="param VisitNamedType(NamedTypeSymbol symbol) 849232"];
1551 [label="param VisitNamedType(this) 849233"];
1552 [label="_cancellationToken.ThrowIfCancellationRequested(); 849234"];
1553 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 849235"];
1554 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 849236"];
1555 [label="DefaultVisit(symbol); 849237"];
1556 [label="DefaultVisit(symbol) 849238"];
1557 [label="param DefaultVisit(Symbol symbol) 849239"];
1558 [label="param DefaultVisit(this) 849240"];
1559 [label="_cancellationToken.ThrowIfCancellationRequested(); 849241"];
1560 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 849242"];
1561 [label="ShouldSkip(symbol) 849243"];
1562 [label="param ShouldSkip(Symbol symbol) 849244"];
1563 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 849245"];
1564 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 849246"];
1565 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 849247"];
1566 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 849248"];
1567 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 849249"];
1568 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 849250"];
1569 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 849251"];
1570 [label="DocumentationMode maxDocumentationMode; 849252"];
1571 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 849253"];
1572 [label="docCommentNodes 849254"];
1573 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 849255"];
1574 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 849256"];
1575 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 849257"];
1576 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 849258"];
1577 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 849259"];
1578 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 849260"];
1579 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 849261"];
1580 [label="param TryGetDocumentationCommentNodes(this) 849262"];
1581 [label="maxDocumentationMode = DocumentationMode.None; 849263"];
1582 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 849264"];
1583 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 849265"];
1584 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 849266"];
1585 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 849267"];
1586 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 849268"];
1587 [label="currDocumentationMode > maxDocumentationMode 849269"];
1588 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 849270"];
1589 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 849271"];
1590 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 849272"];
1591 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 849273"];
1592 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 849274"];
1593 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 849275"];
1594 [label="return true; 849276"];
1595 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 849277"];
1596 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 849278"];
1597 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 849279"];
1598 [label="return; 849280"];
1599 [label="DefaultVisit(symbol); 849281"];
1600 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 849282"];
1601 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 849283"];
1602 [label="_cancellationToken.ThrowIfCancellationRequested(); 849284"];
1603 [label="member.Accept(this); 849285"];
1604 [label="member.Accept(this); 849286"];
1605 [label="member.Accept(this); 849287"];
1606 [label="return; 849288"];
1607 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 849289"];
1608 [label="Unindent() 849290"];
1609 [label="Debug.Assert(_indentDepth >= 0); 849291"];
1610 [label="Unindent(); 849292"];
1611 [label="WriteLine('</members>'); 849293"];
1612 [label="WriteLine('</members>') 849294"];
1613 [label="param WriteLine(string message) 849295"];
1614 [label="param WriteLine(this) 849296"];
1615 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849297"];
1616 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849298"];
1617 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849299"];
1618 [label="Unindent() 849300"];
1619 [label="_indentDepth 849301"];
1620 [label="Debug.Assert(_indentDepth >= 0); 849302"];
1621 [label="Debug.Assert(_indentDepth >= 0); 849303"];
1622 [label="Unindent(); 849304"];
1623 [label="WriteLine('</doc>'); 849305"];
1624 [label="WriteLine('</doc>') 849306"];
1625 [label="param WriteLine(string message) 849307"];
1626 [label="param WriteLine(this) 849308"];
1627 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849309"];
1628 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849310"];
1629 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 849311"];
1630 [label="Debug.Assert(compiler._indentDepth == 0); 849312"];
1631 [label="Debug.Assert(compiler._indentDepth == 0); 849313"];
1632 [label="writer?.Flush(); 849314"];
1633 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 849315"];
1634 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 849316"];
1635 [label="compilation.SyntaxTrees 849317"];
1636 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 849318"];
1637 [label="_syntaxAndDeclarations.GetLazyState() 849319"];
1638 [label="param GetLazyState(this) 849320"];
1639 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 849321"];
1640 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 849322"];
1641 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 849323"];
1642 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 849324"];
1643 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 849325"];
1644 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 849326"];
1645 [label="param ReportUnprocessed(SyntaxTree tree) 849327"];
1646 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 849328"];
1647 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 849329"];
1648 [label="param ReportUnprocessed(CancellationToken cancellationToken) 849330"];
1649 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 849331"];
1650 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 849332"];
1651 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 849333"];
1652 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 849334"];
1653 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken) 849335"];
1654 [label="param ReportUnusedImports(SyntaxTree? filterTree) 849336"];
1655 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 849337"];
1656 [label="param ReportUnusedImports(CancellationToken cancellationToken) 849338"];
1657 [label="param ReportUnusedImports(this) 849339"];
1658 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 849340"];
1659 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 849341"];
1660 [label="CompleteTrees(filterTree); 849342"];
1661 [label="CompleteTrees(filterTree) 849343"];
1662 [label="param CompleteTrees(SyntaxTree? filterTree) 849344"];
1663 [label="param CompleteTrees(this) 849345"];
1664 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 849346"];
1665 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 849347"];
1666 [label="CompleteTrees(filterTree); 849348"];
1667 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 849349"];
1668 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 849350"];
1669 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 849351"];
1670 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 849352"];
1671 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 849353"];
1672 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 849354"];
1673 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 849355"];
1674 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 849356"];
1675 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 849357"];
1676 [label="return diagnostics.ToReadOnlyAndFree(); 849358"];
1677 [label="diagnostics.Verify(expected); 849359"];
1678 [label="diagnostics.Verify(expected); 849360"];
1679 [label="diagnostics.Verify(expected) 849361"];
1680 [label="param Verify(this ImmutableArray<Diagnostic> actual) 849362"];
1681 [label="param Verify(params DiagnosticDescription[] expected) 849363"];
1682 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 849364"];
1683 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 849365"];
1684 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 849366"];
1685 [label="param Verify(this IEnumerable<Diagnostic> actual) 849367"];
1686 [label="param Verify(params DiagnosticDescription[] expected) 849368"];
1687 [label="Verify(actual, expected, errorCodeOnly: false); 849369"];
1688 [label="Verify(actual, expected, errorCodeOnly: false); 849370"];
1689 [label="Verify(actual, expected, errorCodeOnly: false); 849371"];
1690 [label="Verify(actual, expected, errorCodeOnly: false) 849372"];
1691 [label="param Verify(IEnumerable<Diagnostic> actual) 849373"];
1692 [label="param Verify(DiagnosticDescription[] expected) 849374"];
1693 [label="param Verify(bool errorCodeOnly) 849375"];
1694 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 849376"];
1695 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 849377"];
1696 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 849378"];
1697 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 849379"];
1698 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 849380"];
1699 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 849381"];
1700 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 849382"];
1701 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 849383"];
1702 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 849384"];
1703 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 849385"];
1704 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 849386"];
1705 [label="{ } 849387"];
1706 [label="None = { } 849388"];
1707 [label="null 849389"];
1708 [label="Any = null 849390"];
1709 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 849391"];
1710 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 849392"];
1711 [label="DiagnosticDescription.GetAssertText(expected, actual) 849393"];
1712 [label="param GetAssertText(DiagnosticDescription[] expected) 849394"];
1713 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 849395"];
1714 [label="const int CSharp = 1; 849396"];
1715 [label="const int VisualBasic = 2; 849397"];
1716 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 849398"];
1717 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 849399"];
1718 [label="actual.Any() && actual.First() is CSDiagnostic 849400"];
1719 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 849401"];
1720 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 849402"];
1721 [label="int indentDepth = (language == CSharp) ? 4 : 1; 849403"];
1722 [label="(language == CSharp) 849404"];
1723 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 849405"];
1724 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 849406"];
1725 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 849407"];
1726 [label="IsSortedOrEmpty(expected) 849408"];
1727 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 849409"];
1728 [label="new LinePositionComparer() 849410"];
1729 [label="param LinePositionComparer(this) 849411"];
1730 [label="Instance = new LinePositionComparer() 849412"];
1731 [label="var comparer = LinePositionComparer.Instance; 849413"];
1732 [label="DiagnosticDescription last = null; 849414"];
1733 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 849415"];
1734 [label="return true; 849416"];
1735 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 849417"];
1736 [label="actual = Sort(actual); 849418"];
1737 [label="Sort(actual) 849419"];
1738 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 849420"];
1739 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 849421"];
1740 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 849422"];
1741 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 849423"];
1742 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 849424"];
1743 [label="var assertText = new StringBuilder(); 849425"];
1744 [label="assertText.AppendLine(); 849426"];
1745 [label="int i; 849427"];
1746 [label="assertText.AppendLine('Expected:'); 849428"];
1747 [label="assertText.AppendLine('Expected:'); 849429"];
1748 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 849430"];
1749 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 849431"];
1750 [label="GetCommaSeparatedLines(assertText, expectedText); 849432"];
1751 [label="GetCommaSeparatedLines(assertText, expectedText); 849433"];
1752 [label="GetCommaSeparatedLines(assertText, expectedText) 849434"];
1753 [label="param GetCommaSeparatedLines(StringBuilder sb) 849435"];
1754 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 849436"];
1755 [label="int n = lines.Count; 849437"];
1756 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 849438"];
1757 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 849439"];
1758 [label="GetCommaSeparatedLines(assertText, expectedText); 849440"];
1759 [label="assertText.AppendLine('Actual:'); 849441"];
1760 [label="assertText.AppendLine('Actual:'); 849442"];
1761 [label="var actualText = ArrayBuilder<string>.GetInstance(); 849443"];
1762 [label="var e = actual.GetEnumerator(); 849444"];
1763 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 849445"];
1764 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 849446"];
1765 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 849447"];
1766 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 849448"];
1767 [label="assertText.AppendLine('Diff:'); 849449"];
1768 [label="assertText.AppendLine('Diff:'); 849450"];
1769 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 849451"];
1770 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 849452"];
1771 [label="new[] { '\\r', '\\n' } 849453"];
1772 [label="'\\r' 849454"];
1773 [label="'\\n' 849455"];
1774 [label="new[] { '\\r', '\\n' } 849456"];
1775 [label="new[] { '\\r', '\\n' } 849457"];
1776 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 849458"];
1777 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 849459"];
1778 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 849460"];
1779 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 849461"];
1780 [label="param DiffReport(IEnumerable<T> expected) 849462"];
1781 [label="param DiffReport(IEnumerable<T> actual) 849463"];
1782 [label="param DiffReport(string separator) 849464"];
1783 [label="param DiffReport(IEqualityComparer<T> comparer = null) 849465"];
1784 [label="param DiffReport(Func<T, string> toString = null) 849466"];
1785 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 849467"];
1786 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 849468"];
1787 [label="(comparer != null) 849469"];
1788 [label="EqualityComparer<T>.Default 849470"];
1789 [label="new LCS<T>(EqualityComparer<T>.Default) 849471"];
1790 [label="param LCS(IEqualityComparer<T> comparer) 849472"];
1791 [label="param LCS(this) 849473"];
1792 [label="1 849474"];
1793 [label="DeleteCost = 1 849475"];
1794 [label="1 849476"];
1795 [label="InsertCost = 1 849477"];
1796 [label="2 849478"];
1797 [label="UpdateCost = 2 849479"];
1798 [label="param LongestCommonSubsequence(this) 849480"];
1799 [label="_comparer 849481"];
1800 [label="_comparer 849482"];
1801 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 849483"];
1802 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 849484"];
1803 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 849485"];
1804 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 849486"];
1805 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 849487"];
1806 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 849488"];
1807 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 849489"];
1808 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 849490"];
1809 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 849491"];
1810 [label="lcs.CalculateDiff(expectedList, actualList, toString) 849492"];
1811 [label="param CalculateDiff(IList<T> sequenceA) 849493"];
1812 [label="param CalculateDiff(IList<T> sequenceB) 849494"];
1813 [label="param CalculateDiff(Func<T, string> toString) 849495"];
1814 [label="param CalculateDiff(this) 849496"];
1815 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 849497"];
1816 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 849498"];
1817 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 849499"];
1818 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 849500"];
1819 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 849501"];
1820 [label="param GetEdits(TSequence sequenceA) 849502"];
1821 [label="param GetEdits(int lengthA) 849503"];
1822 [label="param GetEdits(TSequence sequenceB) 849504"];
1823 [label="param GetEdits(int lengthB) 849505"];
1824 [label="param GetEdits(this) 849506"];
1825 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 849507"];
1826 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 849508"];
1827 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 849509"];
1828 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 849510"];
1829 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 849511"];
1830 [label="param ComputeCostMatrix(TSequence sequenceA) 849512"];
1831 [label="param ComputeCostMatrix(int lengthA) 849513"];
1832 [label="param ComputeCostMatrix(TSequence sequenceB) 849514"];
1833 [label="param ComputeCostMatrix(int lengthB) 849515"];
1834 [label="param ComputeCostMatrix(this) 849516"];
1835 [label="var la = lengthA + 1; 849517"];
1836 [label="var la = lengthA + 1; 849518"];
1837 [label="var lb = lengthB + 1; 849519"];
1838 [label="var lb = lengthB + 1; 849520"];
1839 [label="var d = new int[la, lb]; 849521"];
1840 [label="d[0, 0] = 0; 849522"];
1841 [label="d[0, 0] 849523"];
1842 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 849524"];
1843 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 849525"];
1844 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 849526"];
1845 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 849527"];
1846 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 849528"];
1847 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 849529"];
1848 [label="return d; 849530"];
1849 [label="int i = lengthA; 849531"];
1850 [label="int j = lengthB; 849532"];
1851 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 849533"];
1852 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 849534"];
1853 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 849535"];
1854 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 849536"];
1855 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 849537"];
1856 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 849538"];
1857 [label="param GetEdits(this) 849539"];
1858 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 849540"];
1859 [label="param CalculateDiff(this) 849541"];
1860 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 849542"];
1861 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 849543"];
1862 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 849544"];
1863 [label="actualText.Free(); 849545"];
1864 [label="expectedText.Free(); 849546"];
1865 [label="return assertText.ToString(); 849547"];
1866 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 849548"];
1867 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 849549"];
1868 [label="diagnostics.Verify(expected); 849550"];
1869 [label="VerifyAssemblyIds(c, diagnostics); 849551"];
1870 [label="VerifyAssemblyIds(c, diagnostics); 849552"];
1871 [label="VerifyAssemblyIds(c, diagnostics) 849553"];
1872 [label="param VerifyAssemblyIds(TCompilation c) 849554"];
1873 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 849555"];
1874 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 849556"];
1875 [label="VerifyAssemblyIds(c, diagnostics); 849557"];
1876 [label="return c; 849558"];
1877 [label="var (image, refImage) = EmitRefOut(comp); 849559"];
1878 [label="EmitRefOut(comp) 849560"];
1879 [label="param EmitRefOut(CSharpCompilation comp) 849561"];
1880 [label="using (var output = new MemoryStream())\n            using (var metadataOutput = new MemoryStream())\n            {\n                var options = EmitOptions.Default.WithIncludePrivateMembers(false);\n                comp.VerifyEmitDiagnostics();\n                var result = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: options);\n                return (output.ToImmutable(), metadataOutput.ToImmutable());\n            } 849562"];
1881 [label="using (var metadataOutput = new MemoryStream())\n            {\n                var options = EmitOptions.Default.WithIncludePrivateMembers(false);\n                comp.VerifyEmitDiagnostics();\n                var result = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: options);\n                return (output.ToImmutable(), metadataOutput.ToImmutable());\n            } 849563"];
1882 [label="var options = EmitOptions.Default.WithIncludePrivateMembers(false); 849564"];
1883 [label="comp.VerifyEmitDiagnostics(); 849565"];
1884 [label="comp.VerifyEmitDiagnostics(); 849566"];
1885 [label="comp.VerifyEmitDiagnostics() 849567"];
1886 [label="param VerifyEmitDiagnostics(this TCompilation c) 849568"];
1887 [label="param VerifyEmitDiagnostics(params DiagnosticDescription[] expected) 849569"];
1888 [label="return VerifyEmitDiagnostics(c, EmitOptions.Default, expected); 849570"];
1889 [label="return VerifyEmitDiagnostics(c, EmitOptions.Default, expected); 849571"];
1890 [label="return VerifyEmitDiagnostics(c, EmitOptions.Default, expected); 849572"];
1891 [label="VerifyEmitDiagnostics(c, EmitOptions.Default, expected) 849573"];
1892 [label="param VerifyEmitDiagnostics(this TCompilation c) 849574"];
1893 [label="param VerifyEmitDiagnostics(EmitOptions options) 849575"];
1894 [label="param VerifyEmitDiagnostics(params DiagnosticDescription[] expected) 849576"];
1895 [label="c.GetEmitDiagnostics(options: options).Verify(expected); 849577"];
1896 [label="c.GetEmitDiagnostics(options: options).Verify(expected); 849578"];
1897 [label="c.GetEmitDiagnostics(options: options).Verify(expected); 849579"];
1898 [label="c.GetEmitDiagnostics(options: options) 849580"];
1899 [label="param GetEmitDiagnostics(this TCompilation c) 849581"];
1900 [label="param GetEmitDiagnostics(EmitOptions options = null) 849582"];
1901 [label="param GetEmitDiagnostics(IEnumerable<ResourceDescription> manifestResources = null) 849583"];
1902 [label="MonoHelpers.IsRunningOnMono() 849584"];
1903 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 849585"];
1904 [label="var pdbStream = MonoHelpers.IsRunningOnMono() ? null : new MemoryStream(); 849586"];
1905 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 849587"];
1906 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 849588"];
1907 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 849589"];
1908 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 849590"];
1909 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 849591"];
1910 [label="param CreateModuleBuilder(EmitOptions emitOptions) 849592"];
1911 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 849593"];
1912 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 849594"];
1913 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 849595"];
1914 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 849596"];
1915 [label="param CreateModuleBuilder(CompilationTestData? testData) 849597"];
1916 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 849598"];
1917 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 849599"];
1918 [label="param CreateModuleBuilder(this) 849600"];
1919 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 849601"];
1920 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 849602"];
1921 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 849603"];
1922 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 849604"];
1923 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 849605"];
1924 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 849606"];
1925 [label="param GetRuntimeMetadataVersion(this) 849607"];
1926 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 849608"];
1927 [label="GetRuntimeMetadataVersion(emitOptions) 849609"];
1928 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 849610"];
1929 [label="param GetRuntimeMetadataVersion(this) 849611"];
1930 [label="Assembly 849612"];
1931 [label="get\n            {\n                return SourceAssembly;\n            } 849613"];
1932 [label="SourceAssembly 849614"];
1933 [label="GetBoundReferenceManager() 849615"];
1934 [label="param GetBoundReferenceManager(this) 849616"];
1935 [label="GetBoundReferenceManager(); 849617"];
1936 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 849618"];
1937 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 849619"];
1938 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 849620"];
1939 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 849621"];
1940 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 849622"];
1941 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 849623"];
1942 [label="return runtimeMDVersion; 849624"];
1943 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 849625"];
1944 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 849626"];
1945 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 849627"];
1946 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 849628"];
1947 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 849629"];
1948 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 849630"];
1949 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 849631"];
1950 [label="get { return SourceAssembly.IsDelaySigned; } 849632"];
1951 [label="SourceAssembly 849633"];
1952 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 849634"];
1953 [label="GetBoundReferenceManager() 849635"];
1954 [label="param GetBoundReferenceManager(this) 849636"];
1955 [label="GetBoundReferenceManager(); 849637"];
1956 [label="return SourceAssembly.IsDelaySigned; 849638"];
1957 [label="SourceAssembly.IsDelaySigned 849639"];
1958 [label="get\n            {\n                return _options;\n            } 849640"];
1959 [label="get { return SourceAssembly.StrongNameKeys; } 849641"];
1960 [label="SourceAssembly 849642"];
1961 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 849643"];
1962 [label="GetBoundReferenceManager() 849644"];
1963 [label="param GetBoundReferenceManager(this) 849645"];
1964 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 849646"];
1965 [label="return _referenceManager; 849647"];
1966 [label="GetBoundReferenceManager(); 849648"];
1967 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 849649"];
1968 [label="return SourceAssembly.StrongNameKeys; 849650"];
1969 [label="=> 0x30 849651"];
1970 [label="0x30 849652"];
1971 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 849653"];
1972 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 849654"];
1973 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 849655"];
1974 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 849656"];
1975 [label="PEModuleBuilder moduleBeingBuilt; 849657"];
1976 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 849658"];
1977 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 849659"];
1978 [label="_options.OutputKind.IsValid() 849660"];
1979 [label="_options.OutputKind 849661"];
1980 [label="SourceAssembly 849662"];
1981 [label="GetBoundReferenceManager() 849663"];
1982 [label="GetBoundReferenceManager(); 849664"];
1983 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 849665"];
1984 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 849666"];
1985 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 849667"];
1986 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 849668"];
1987 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 849669"];
1988 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 849670"];
1989 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 849671"];
1990 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 849672"];
1991 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 849673"];
1992 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 849674"];
1993 [label="param PEAssemblyBuilder(OutputKind outputKind) 849675"];
1994 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 849676"];
1995 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 849677"];
1996 [label="param PEAssemblyBuilder(this) 849678"];
1997 [label="sourceAssembly 849679"];
1998 [label="emitOptions 849680"];
1999 [label="outputKind 849681"];
2000 [label="serializationProperties 849682"];
2001 [label="manifestResources 849683"];
2002 [label="ImmutableArray<NamedTypeSymbol>.Empty 849684"];
2003 [label="param PEAssemblyBuilder(this) 849685"];
2004 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 849686"];
2005 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 849687"];
2006 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 849688"];
2007 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 849689"];
2008 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 849690"];
2009 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 849691"];
2010 [label="param PEAssemblyBuilderBase(this) 849692"];
2011 [label="0 849693"];
2012 [label="sourceAssembly.Modules[0] 849694"];
2013 [label="emitOptions 849695"];
2014 [label="outputKind 849696"];
2015 [label="serializationProperties 849697"];
2016 [label="manifestResources 849698"];
2017 [label="param PEAssemblyBuilderBase(this) 849699"];
2018 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 849700"];
2019 [label="param PEModuleBuilder(EmitOptions emitOptions) 849701"];
2020 [label="param PEModuleBuilder(OutputKind outputKind) 849702"];
2021 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 849703"];
2022 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 849704"];
2023 [label="param PEModuleBuilder(this) 849705"];
2024 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 849706"];
2025 [label="sourceModule 849707"];
2026 [label="serializationProperties 849708"];
2027 [label="manifestResources 849709"];
2028 [label="outputKind 849710"];
2029 [label="emitOptions 849711"];
2030 [label="new ModuleCompilationState() 849712"];
2031 [label="param ModuleCompilationState(this) 849713"];
2032 [label="param PEModuleBuilder(this) 849714"];
2033 [label="param PEModuleBuilder(this) 849715"];
2034 [label="get\n            {\n                return true;\n            } 849716"];
2035 [label="return true; 849717"];
2036 [label="param PEModuleBuilder(this) 849718"];
2037 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 849719"];
2038 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 849720"];
2039 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 849721"];
2040 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 849722"];
2041 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 849723"];
2042 [label="new ConcurrentSet<TypeSymbol>() 849724"];
2043 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 849725"];
2044 [label="_embeddedTypesManagerOpt 849726"];
2045 [label="_metadataName 849727"];
2046 [label="_fixedImplementationTypes 849728"];
2047 [label="_needsGeneratedAttributes 849729"];
2048 [label="_needsGeneratedAttributes_IsFrozen 849730"];
2049 [label="var specifiedName = sourceModule.MetadataName; 849731"];
2050 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 849732"];
2051 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 849733"];
2052 [label="_metadataName 849734"];
2053 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 849735"];
2054 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 849736"];
2055 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 849737"];
2056 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 849738"];
2057 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 849739"];
2058 [label="_sourceAssembly 849740"];
2059 [label="_lazyEmbeddedAttribute 849741"];
2060 [label="_lazyIsReadOnlyAttribute 849742"];
2061 [label="_lazyIsByRefLikeAttribute 849743"];
2062 [label="_lazyIsUnmanagedAttribute 849744"];
2063 [label="_lazyNullableAttribute 849745"];
2064 [label="_lazyNullableContextAttribute 849746"];
2065 [label="_lazyNullablePublicOnlyAttribute 849747"];
2066 [label="_lazyNativeIntegerAttribute 849748"];
2067 [label="_metadataName 849749"];
2068 [label="Debug.Assert(sourceAssembly is object); 849750"];
2069 [label="_sourceAssembly 849751"];
2070 [label="_additionalTypes = additionalTypes.NullToEmpty(); 849752"];
2071 [label="_additionalTypes 849753"];
2072 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 849754"];
2073 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 849755"];
2074 [label="(emitOptions.OutputNameOverride == null) 849756"];
2075 [label="sourceAssembly.MetadataName 849757"];
2076 [label="_metadataName 849758"];
2077 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 849759"];
2078 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 849760"];
2079 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 849761"];
2080 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 849762"];
2081 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 849763"];
2082 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 849764"];
2083 [label="moduleBeingBuilt.SourceLinkStreamOpt 849765"];
2084 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 849766"];
2085 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 849767"];
2086 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 849768"];
2087 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 849769"];
2088 [label="return moduleBeingBuilt; 849770"];
2089 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 849771"];
2090 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 849772"];
2091 [label="param CompileMethods(bool emittingPdb) 849773"];
2092 [label="param CompileMethods(bool emitMetadataOnly) 849774"];
2093 [label="param CompileMethods(bool emitTestCoverageData) 849775"];
2094 [label="param CompileMethods(DiagnosticBag diagnostics) 849776"];
2095 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 849777"];
2096 [label="param CompileMethods(CancellationToken cancellationToken) 849778"];
2097 [label="param CompileMethods(this) 849779"];
2098 [label="PooledHashSet<int>? excludeDiagnostics = null; 849780"];
2099 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 849781"];
2100 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 849782"];
2101 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 849783"];
2102 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 849784"];
2103 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 849785"];
2104 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 849786"];
2105 [label="param GetDiagnostics(CompilationStage stage) 849787"];
2106 [label="param GetDiagnostics(bool includeEarlierStages) 849788"];
2107 [label="param GetDiagnostics(CancellationToken cancellationToken) 849789"];
2108 [label="param GetDiagnostics(this) 849790"];
2109 [label="var diagnostics = DiagnosticBag.GetInstance(); 849791"];
2110 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 849792"];
2111 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 849793"];
2112 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 849794"];
2113 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 849795"];
2114 [label="param GetDiagnostics(CompilationStage stage) 849796"];
2115 [label="param GetDiagnostics(bool includeEarlierStages) 849797"];
2116 [label="param GetDiagnostics(DiagnosticBag diagnostics) 849798"];
2117 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 849799"];
2118 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 849800"];
2119 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 849801"];
2120 [label="this.SyntaxTrees 849802"];
2121 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 849803"];
2122 [label="_syntaxAndDeclarations.GetLazyState() 849804"];
2123 [label="param GetLazyState(this) 849805"];
2124 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 849806"];
2125 [label="this.Options 849807"];
2126 [label="get\n            {\n                return _options;\n            } 849808"];
2127 [label="return _options; 849809"];
2128 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 849810"];
2129 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 849811"];
2130 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 849812"];
2131 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 849813"];
2132 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 849814"];
2133 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 849815"];
2134 [label="CheckAssemblyName(builder); 849816"];
2135 [label="CheckAssemblyName(builder); 849817"];
2136 [label="Options 849818"];
2137 [label="get\n            {\n                return _options;\n            } 849819"];
2138 [label="Options 849820"];
2139 [label="get\n            {\n                return _options;\n            } 849821"];
2140 [label="return _options; 849822"];
2141 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 849823"];
2142 [label="GetBoundReferenceManager() 849824"];
2143 [label="param GetBoundReferenceManager(this) 849825"];
2144 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 849826"];
2145 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 849827"];
2146 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 849828"];
2147 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 849829"];
2148 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 849830"];
2149 [label="param GetSourceDeclarationDiagnostics(this) 849831"];
2150 [label="GlobalImports 849832"];
2151 [label="SourceLocation? location = null; 849833"];
2152 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 849834"];
2153 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 849835"];
2154 [label="Assembly 849836"];
2155 [label="SourceAssembly 849837"];
2156 [label="GetBoundReferenceManager() 849838"];
2157 [label="param GetBoundReferenceManager(this) 849839"];
2158 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 849840"];
2159 [label="return _referenceManager; 849841"];
2160 [label="GetBoundReferenceManager(); 849842"];
2161 [label="Assembly.ForceComplete(location, cancellationToken); 849843"];
2162 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 849844"];
2163 [label="_declarationDiagnosticsFrozen = true; 849845"];
2164 [label="_needsGeneratedAttributes_IsFrozen = true; 849846"];
2165 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 849847"];
2166 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 849848"];
2167 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 849849"];
2168 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 849850"];
2169 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 849851"];
2170 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 849852"];
2171 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 849853"];
2172 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 849854"];
2173 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 849855"];
2174 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 849856"];
2175 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 849857"];
2176 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 849858"];
2177 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 849859"];
2178 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 849860"];
2179 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 849861"];
2180 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 849862"];
2181 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 849863"];
2182 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 849864"];
2183 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 849865"];
2184 [label="excludeDiagnostics?.Free(); 849866"];
2185 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 849867"];
2186 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 849868"];
2187 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 849869"];
2188 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 849870"];
2189 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 849871"];
2190 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 849872"];
2191 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 849873"];
2192 [label="param AddDebugSourceDocumentsForChecksumDirectives(SyntaxTree tree) 849874"];
2193 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 849875"];
2194 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 849876"];
2195 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 849877"];
2196 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 849878"];
2197 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 849879"];
2198 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 849880"];
2199 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 849881"];
2200 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 849882"];
2201 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 849883"];
2202 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 849884"];
2203 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 849885"];
2204 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 849886"];
2205 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 849887"];
2206 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 849888"];
2207 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 849889"];
2208 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 849890"];
2209 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 849891"];
2210 [label="param CompileMethodBodies(CSharpCompilation compilation) 849892"];
2211 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 849893"];
2212 [label="param CompileMethodBodies(bool emittingPdb) 849894"];
2213 [label="param CompileMethodBodies(bool emitTestCoverageData) 849895"];
2214 [label="param CompileMethodBodies(bool hasDeclarationErrors) 849896"];
2215 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 849897"];
2216 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 849898"];
2217 [label="param CompileMethodBodies(CancellationToken cancellationToken) 849899"];
2218 [label="Debug.Assert(compilation != null); 849900"];
2219 [label="Debug.Assert(compilation != null); 849901"];
2220 [label="Debug.Assert(diagnostics != null); 849902"];
2221 [label="Debug.Assert(diagnostics != null); 849903"];
2222 [label="compilation.PreviousSubmission 849904"];
2223 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 849905"];
2224 [label="ScriptCompilationInfo 849906"];
2225 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 849907"];
2226 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 849908"];
2227 [label="MethodSymbol entryPoint = null; 849909"];
2228 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 849910"];
2229 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 849911"];
2230 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 849912"];
2231 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 849913"];
2232 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 849914"];
2233 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 849915"];
2234 [label="param GetEntryPoint(bool hasDeclarationErrors) 849916"];
2235 [label="param GetEntryPoint(CancellationToken cancellationToken) 849917"];
2236 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 849918"];
2237 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 849919"];
2238 [label="return _lazyEntryPoint; 849920"];
2239 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 849921"];
2240 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 849922"];
2241 [label="Debug.Assert(compilation != null); 849923"];
2242 [label="Debug.Assert(compilation != null); 849924"];
2243 [label="Debug.Assert(diagnostics != null); 849925"];
2244 [label="Debug.Assert(diagnostics != null); 849926"];
2245 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 849927"];
2246 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 849928"];
2247 [label="param SetGlobalErrorIfTrue(bool arg) 849929"];
2248 [label="param SetGlobalErrorIfTrue(this) 849930"];
2249 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 849931"];
2250 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 849932"];
2251 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 849933"];
2252 [label="_debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile); 849934"];
2253 [label="_debugDocumentProvider 849935"];
2254 [label="GetBoundReferenceManager() 849936"];
2255 [label="param GetBoundReferenceManager(this) 849937"];
2256 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 849938"];
2257 [label="return _referenceManager; 849939"];
2258 [label="GetBoundReferenceManager(); 849940"];
2259 [label="s.Accept(this, null); 849941"];
2260 [label="param VisitNamedType(NamedTypeSymbol symbol) 849942"];
2261 [label="param VisitNamedType(TypeCompilationState arg) 849943"];
2262 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 849944"];
2263 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 849945"];
2264 [label="PassesFilter(_filterOpt, symbol) 849946"];
2265 [label="param PassesFilter(Predicate<Symbol> filterOpt) 849947"];
2266 [label="param PassesFilter(Symbol symbol) 849948"];
2267 [label="return (filterOpt == null) || filterOpt(symbol); 849949"];
2268 [label="return (filterOpt == null) || filterOpt(symbol); 849950"];
2269 [label="arg = null; 849951"];
2270 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 849952"];
2271 [label="if (tasks == null)\n            {\n                return;\n            } 849953"];
2272 [label="if (tasks == null)\n            {\n                return;\n            } 849954"];
2273 [label="methodCompiler.WaitForWorkers(); 849955"];
2274 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 849956"];
2275 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 849957"];
2276 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 849958"];
2277 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 849959"];
2278 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 849960"];
2279 [label="=> _additionalTypes 849961"];
2280 [label="_additionalTypes 849962"];
2281 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 849963"];
2282 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 849964"];
2283 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 849965"];
2284 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 849966"];
2285 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 849967"];
2286 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 849968"];
2287 [label="param CompileSynthesizedMethods(this) 849969"];
2288 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 849970"];
2289 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 849971"];
2290 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 849972"];
2291 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 849973"];
2292 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 849974"];
2293 [label="param GetEmbeddedTypes(this) 849975"];
2294 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 849976"];
2295 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 849977"];
2296 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 849978"];
2297 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 849979"];
2298 [label="param CreateEmbeddedAttributesIfNeeded(this) 849980"];
2299 [label="GetNeedsGeneratedAttributes() 849981"];
2300 [label="param GetNeedsGeneratedAttributes(this) 849982"];
2301 [label="_needsGeneratedAttributes_IsFrozen = true; 849983"];
2302 [label="_needsGeneratedAttributes_IsFrozen 849984"];
2303 [label="GetNeedsGeneratedAttributesInternal() 849985"];
2304 [label="param GetNeedsGeneratedAttributesInternal(this) 849986"];
2305 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 849987"];
2306 [label="return GetNeedsGeneratedAttributesInternal(); 849988"];
2307 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 849989"];
2308 [label="ShouldEmitNullablePublicOnlyAttribute() 849990"];
2309 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 849991"];
2310 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 849992"];
2311 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 849993"];
2312 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 849994"];
2313 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 849995"];
2314 [label="return; 849996"];
2315 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 849997"];
2316 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 849998"];
2317 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 849999"];
2318 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 850000"];
2319 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 850001"];
2320 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 850002"];
2321 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 850003"];
2322 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 850004"];
2323 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 850005"];
2324 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 850006"];
2325 [label="builder.AddIfNotNull(_lazyNullableAttribute); 850007"];
2326 [label="builder.AddIfNotNull(_lazyNullableAttribute); 850008"];
2327 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 850009"];
2328 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 850010"];
2329 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 850011"];
2330 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 850012"];
2331 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 850013"];
2332 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 850014"];
2333 [label="return builder.ToImmutableAndFree(); 850015"];
2334 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 850016"];
2335 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 850017"];
2336 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 850018"];
2337 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 850019"];
2338 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 850020"];
2339 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 850021"];
2340 [label="param CompileSynthesizedMethods(this) 850022"];
2341 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 850023"];
2342 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 850024"];
2343 [label="compilation.AnonymousTypeManager 850025"];
2344 [label="get\n            {\n                return _anonymousTypeManager;\n            } 850026"];
2345 [label="return _anonymousTypeManager; 850027"];
2346 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 850028"];
2347 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 850029"];
2348 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 850030"];
2349 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 850031"];
2350 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 850032"];
2351 [label="param GetPreviousAnonymousTypes(this) 850033"];
2352 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 850034"];
2353 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 850035"];
2354 [label="param GetNextAnonymousTypeIndex(this) 850036"];
2355 [label="return 0; 850037"];
2356 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 850038"];
2357 [label="methodCompiler.WaitForWorkers() 850039"];
2358 [label="var tasks = _compilerTasks; 850040"];
2359 [label="if (tasks == null)\n            {\n                return;\n            } 850041"];
2360 [label="if (tasks == null)\n            {\n                return;\n            } 850042"];
2361 [label="methodCompiler.WaitForWorkers(); 850043"];
2362 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 850044"];
2363 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 850045"];
2364 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 850046"];
2365 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 850047"];
2366 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 850048"];
2367 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 850049"];
2368 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 850050"];
2369 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 850051"];
2370 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 850052"];
2371 [label="GetBoundReferenceManager() 850053"];
2372 [label="param GetBoundReferenceManager(this) 850054"];
2373 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850055"];
2374 [label="return _referenceManager; 850056"];
2375 [label="GetBoundReferenceManager(); 850057"];
2376 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 850058"];
2377 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 850059"];
2378 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 850060"];
2379 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 850061"];
2380 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 850062"];
2381 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 850063"];
2382 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 850064"];
2383 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 850065"];
2384 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 850066"];
2385 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 850067"];
2386 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 850068"];
2387 [label="param GenerateModuleInitializer(this) 850069"];
2388 [label="Debug.Assert(_declarationDiagnosticsFrozen); 850070"];
2389 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 850071"];
2390 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 850072"];
2391 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 850073"];
2392 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 850074"];
2393 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 850075"];
2394 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 850076"];
2395 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 850077"];
2396 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 850078"];
2397 [label="return true; 850079"];
2398 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 850080"];
2399 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 850081"];
2400 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 850082"];
2401 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 850083"];
2402 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 850084"];
2403 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 850085"];
2404 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 850086"];
2405 [label="param GenerateResourcesAndDocumentationComments(this) 850087"];
2406 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 850088"];
2407 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 850089"];
2408 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 850090"];
2409 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 850091"];
2410 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 850092"];
2411 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 850093"];
2412 [label="SourceAssembly 850094"];
2413 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 850095"];
2414 [label="GetBoundReferenceManager() 850096"];
2415 [label="param GetBoundReferenceManager(this) 850097"];
2416 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850098"];
2417 [label="return _referenceManager; 850099"];
2418 [label="GetBoundReferenceManager(); 850100"];
2419 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 850101"];
2420 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 850102"];
2421 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 850103"];
2422 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 850104"];
2423 [label="AddedModulesResourceNames(resourceDiagnostics) 850105"];
2424 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 850106"];
2425 [label="param AddedModulesResourceNames(this) 850107"];
2426 [label="SourceAssembly 850108"];
2427 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 850109"];
2428 [label="GetBoundReferenceManager() 850110"];
2429 [label="param GetBoundReferenceManager(this) 850111"];
2430 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850112"];
2431 [label="return _referenceManager; 850113"];
2432 [label="GetBoundReferenceManager(); 850114"];
2433 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 850115"];
2434 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 850116"];
2435 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 850117"];
2436 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 850118"];
2437 [label="param AddedModulesResourceNames(this) 850119"];
2438 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 850120"];
2439 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 850121"];
2440 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 850122"];
2441 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 850123"];
2442 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 850124"];
2443 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 850125"];
2444 [label="cancellationToken.ThrowIfCancellationRequested(); 850126"];
2445 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 850127"];
2446 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 850128"];
2447 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 850129"];
2448 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 850130"];
2449 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 850131"];
2450 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 850132"];
2451 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 850133"];
2452 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 850134"];
2453 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 850135"];
2454 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 850136"];
2455 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 850137"];
2456 [label="param WriteDocumentationCommentXml(string? assemblyName) 850138"];
2457 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 850139"];
2458 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 850140"];
2459 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 850141"];
2460 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 850142"];
2461 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 850143"];
2462 [label="StreamWriter writer = null; 850144"];
2463 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 850145"];
2464 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 850146"];
2465 [label="compilation.SourceAssembly 850147"];
2466 [label="GetBoundReferenceManager() 850148"];
2467 [label="param GetBoundReferenceManager(this) 850149"];
2468 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850150"];
2469 [label="return _referenceManager; 850151"];
2470 [label="GetBoundReferenceManager(); 850152"];
2471 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 850153"];
2472 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 850154"];
2473 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 850155"];
2474 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 850156"];
2475 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 850157"];
2476 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 850158"];
2477 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 850159"];
2478 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 850160"];
2479 [label="param DocumentationCommentCompiler(TextWriter writer) 850161"];
2480 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 850162"];
2481 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 850163"];
2482 [label="param DocumentationCommentCompiler(bool processIncludes) 850164"];
2483 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 850165"];
2484 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 850166"];
2485 [label="param DocumentationCommentCompiler(this) 850167"];
2486 [label="param DocumentationCommentCompiler(this) 850168"];
2487 [label="_assemblyName 850169"];
2488 [label="_compilation 850170"];
2489 [label="_writer 850171"];
2490 [label="_filterTree 850172"];
2491 [label="_filterSpanWithinTree 850173"];
2492 [label="_processIncludes 850174"];
2493 [label="_isForSingleSymbol 850175"];
2494 [label="_diagnostics 850176"];
2495 [label="_lazyComparer 850177"];
2496 [label="_includedFileCache 850178"];
2497 [label="_indentDepth 850179"];
2498 [label="_temporaryStringBuilders 850180"];
2499 [label="_writer 850181"];
2500 [label="_filterTree 850182"];
2501 [label="_filterSpanWithinTree 850183"];
2502 [label="_processIncludes 850184"];
2503 [label="_isForSingleSymbol 850185"];
2504 [label="_diagnostics 850186"];
2505 [label="compilation.SourceAssembly 850187"];
2506 [label="GetBoundReferenceManager() 850188"];
2507 [label="param GetBoundReferenceManager(this) 850189"];
2508 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850190"];
2509 [label="return _referenceManager; 850191"];
2510 [label="GetBoundReferenceManager(); 850192"];
2511 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 850193"];
2512 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 850194"];
2513 [label="Debug.Assert(_assemblyName != null); 850195"];
2514 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 850196"];
2515 [label="WriteLine('<?xml version=\\'1.0\\'?>') 850197"];
2516 [label="param WriteLine(string message) 850198"];
2517 [label="param WriteLine(this) 850199"];
2518 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850200"];
2519 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850201"];
2520 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850202"];
2521 [label="WriteLine('<doc>'); 850203"];
2522 [label="WriteLine('<doc>') 850204"];
2523 [label="param WriteLine(string message) 850205"];
2524 [label="param WriteLine(this) 850206"];
2525 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850207"];
2526 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850208"];
2527 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850209"];
2528 [label="Indent(); 850210"];
2529 [label="WriteLine('<assembly>'); 850211"];
2530 [label="WriteLine('<assembly>') 850212"];
2531 [label="param WriteLine(string message) 850213"];
2532 [label="param WriteLine(this) 850214"];
2533 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850215"];
2534 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850216"];
2535 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850217"];
2536 [label="Indent(); 850218"];
2537 [label="WriteLine('<name>{0}</name>', _assemblyName); 850219"];
2538 [label="WriteLine('<name>{0}</name>', _assemblyName) 850220"];
2539 [label="WriteLine('<name>{0}</name>', _assemblyName) 850221"];
2540 [label="param WriteLine(string format) 850222"];
2541 [label="param WriteLine(params object[] args) 850223"];
2542 [label="param WriteLine(this) 850224"];
2543 [label="WriteLine(string.Format(format, args)); 850225"];
2544 [label="WriteLine(string.Format(format, args)); 850226"];
2545 [label="WriteLine(string.Format(format, args)); 850227"];
2546 [label="WriteLine(string.Format(format, args)) 850228"];
2547 [label="param WriteLine(string message) 850229"];
2548 [label="param WriteLine(this) 850230"];
2549 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850231"];
2550 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850232"];
2551 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850233"];
2552 [label="WriteLine(string.Format(format, args)); 850234"];
2553 [label="Debug.Assert(_indentDepth >= 0); 850235"];
2554 [label="Unindent(); 850236"];
2555 [label="WriteLine('</assembly>'); 850237"];
2556 [label="WriteLine('</assembly>') 850238"];
2557 [label="param WriteLine(string message) 850239"];
2558 [label="param WriteLine(this) 850240"];
2559 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850241"];
2560 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850242"];
2561 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850243"];
2562 [label="WriteLine('<members>'); 850244"];
2563 [label="WriteLine('<members>') 850245"];
2564 [label="param WriteLine(string message) 850246"];
2565 [label="param WriteLine(this) 850247"];
2566 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850248"];
2567 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850249"];
2568 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850250"];
2569 [label="Indent(); 850251"];
2570 [label="Debug.Assert(!_isForSingleSymbol); 850252"];
2571 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 850253"];
2572 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 850254"];
2573 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 850255"];
2574 [label="DocumentationMode maxDocumentationMode; 850256"];
2575 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 850257"];
2576 [label="docCommentNodes 850258"];
2577 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 850259"];
2578 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 850260"];
2579 [label="maxDocumentationMode = DocumentationMode.None; 850261"];
2580 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 850262"];
2581 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 850263"];
2582 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 850264"];
2583 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 850265"];
2584 [label="currDocumentationMode > maxDocumentationMode 850266"];
2585 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 850267"];
2586 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 850268"];
2587 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 850269"];
2588 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 850270"];
2589 [label="return true; 850271"];
2590 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 850272"];
2591 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 850273"];
2592 [label="return; 850274"];
2593 [label="return; 850275"];
2594 [label="Unindent(); 850276"];
2595 [label="WriteLine('</members>'); 850277"];
2596 [label="WriteLine('</members>') 850278"];
2597 [label="param WriteLine(string message) 850279"];
2598 [label="param WriteLine(this) 850280"];
2599 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850281"];
2600 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850282"];
2601 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850283"];
2602 [label="Unindent(); 850284"];
2603 [label="WriteLine('</doc>'); 850285"];
2604 [label="WriteLine('</doc>') 850286"];
2605 [label="param WriteLine(string message) 850287"];
2606 [label="param WriteLine(this) 850288"];
2607 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850289"];
2608 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850290"];
2609 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 850291"];
2610 [label="Debug.Assert(compiler._indentDepth == 0); 850292"];
2611 [label="Debug.Assert(compiler._indentDepth == 0); 850293"];
2612 [label="writer?.Flush(); 850294"];
2613 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 850295"];
2614 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 850296"];
2615 [label="compilation.SyntaxTrees 850297"];
2616 [label="_syntaxAndDeclarations.GetLazyState() 850298"];
2617 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 850299"];
2618 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 850300"];
2619 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 850301"];
2620 [label="param ReportUnprocessed(CancellationToken cancellationToken) 850302"];
2621 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 850303"];
2622 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 850304"];
2623 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 850305"];
2624 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 850306"];
2625 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 850307"];
2626 [label="param ReportUnusedImports(SyntaxTree? filterTree) 850308"];
2627 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 850309"];
2628 [label="param ReportUnusedImports(CancellationToken cancellationToken) 850310"];
2629 [label="param ReportUnusedImports(this) 850311"];
2630 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 850312"];
2631 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 850313"];
2632 [label="CompleteTrees(filterTree); 850314"];
2633 [label="CompleteTrees(filterTree) 850315"];
2634 [label="param CompleteTrees(SyntaxTree? filterTree) 850316"];
2635 [label="param CompleteTrees(this) 850317"];
2636 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 850318"];
2637 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 850319"];
2638 [label="CompleteTrees(filterTree); 850320"];
2639 [label="get { return SourceAssembly.StrongNameKeys; } 850321"];
2640 [label="SourceAssembly 850322"];
2641 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 850323"];
2642 [label="GetBoundReferenceManager() 850324"];
2643 [label="param GetBoundReferenceManager(this) 850325"];
2644 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850326"];
2645 [label="return _referenceManager; 850327"];
2646 [label="GetBoundReferenceManager(); 850328"];
2647 [label="this.SourceModule 850329"];
2648 [label="Assembly 850330"];
2649 [label="SourceAssembly 850331"];
2650 [label="GetBoundReferenceManager() 850332"];
2651 [label="param GetBoundReferenceManager(this) 850333"];
2652 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850334"];
2653 [label="return _referenceManager; 850335"];
2654 [label="GetBoundReferenceManager(); 850336"];
2655 [label="return Assembly.Modules[0]; 850337"];
2656 [label="get { return SourceAssembly.IsDelaySigned; } 850338"];
2657 [label="SourceAssembly 850339"];
2658 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 850340"];
2659 [label="GetBoundReferenceManager() 850341"];
2660 [label="param GetBoundReferenceManager(this) 850342"];
2661 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850343"];
2662 [label="return _referenceManager; 850344"];
2663 [label="GetBoundReferenceManager(); 850345"];
2664 [label="SourceAssembly.IsDelaySigned 850346"];
2665 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 850347"];
2666 [label="param GetCorLibraryReferenceToEmit(this) 850348"];
2667 [label="CorLibrary 850349"];
2668 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 850350"];
2669 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 850351"];
2670 [label="AssemblySymbol corLibrary = CorLibrary; 850352"];
2671 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 850353"];
2672 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 850354"];
2673 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 850355"];
2674 [label="return Translate(corLibrary, context.Diagnostics); 850356"];
2675 [label="return Translate(corLibrary, context.Diagnostics); 850357"];
2676 [label="Translate(corLibrary, context.Diagnostics) 850358"];
2677 [label="param Translate(AssemblySymbol assembly) 850359"];
2678 [label="param Translate(DiagnosticBag diagnostics) 850360"];
2679 [label="param Translate(this) 850361"];
2680 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 850362"];
2681 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 850363"];
2682 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 850364"];
2683 [label="Cci.IModuleReference reference; 850365"];
2684 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 850366"];
2685 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 850367"];
2686 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 850368"];
2687 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 850369"];
2688 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 850370"];
2689 [label="new AssemblyReference(assembly) 850371"];
2690 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 850372"];
2691 [label="param AssemblyReference(this) 850373"];
2692 [label="_targetAssembly 850374"];
2693 [label="Debug.Assert((object)assemblySymbol != null); 850375"];
2694 [label="Debug.Assert((object)assemblySymbol != null); 850376"];
2695 [label="_targetAssembly 850377"];
2696 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 850378"];
2697 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 850379"];
2698 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 850380"];
2699 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 850381"];
2700 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 850382"];
2701 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 850383"];
2702 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 850384"];
2703 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 850385"];
2704 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 850386"];
2705 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 850387"];
2706 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 850388"];
2707 [label="param ValidateReferencedAssembly(this) 850389"];
2708 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 850390"];
2709 [label="asmRef.Identity 850391"];
2710 [label="=> _targetAssembly.Identity 850392"];
2711 [label="_targetAssembly.Identity 850393"];
2712 [label="AssemblyIdentity refIdentity = asmRef.Identity; 850394"];
2713 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 850395"];
2714 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 850396"];
2715 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 850397"];
2716 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 850398"];
2717 [label="var refMachine = assembly.Machine; 850399"];
2718 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 850400"];
2719 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 850401"];
2720 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 850402"];
2721 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 850403"];
2722 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 850404"];
2723 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 850405"];
2724 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 850406"];
2725 [label="return cachedAsmRef; 850407"];
2726 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 850408"];
2727 [label="=> _targetAssembly.Identity 850409"];
2728 [label="_targetAssembly.Identity 850410"];
2729 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 850411"];
2730 [label="param GetAssemblyReferencesFromAddedModules(this) 850412"];
2731 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 850413"];
2732 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 850414"];
2733 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 850415"];
2734 [label="param GetAssemblyReferencesFromAddedModules(this) 850416"];
2735 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 850417"];
2736 [label="param GetFiles(EmitContext context) 850418"];
2737 [label="param GetFiles(this) 850419"];
2738 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 850420"];
2739 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 850421"];
2740 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 850422"];
2741 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 850423"];
2742 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 850424"];
2743 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 850425"];
2744 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 850426"];
2745 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 850427"];
2746 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 850428"];
2747 [label="var modules = sourceAssSymbol.Modules; 850429"];
2748 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 850430"];
2749 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 850431"];
2750 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 850432"];
2751 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 850433"];
2752 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 850434"];
2753 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 850435"];
2754 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 850436"];
2755 [label="builder.Free(); 850437"];
2756 [label="return lazyFiles; 850438"];
2757 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 850439"];
2758 [label="=> _embeddedTypesManagerOpt 850440"];
2759 [label="_embeddedTypesManagerOpt 850441"];
2760 [label="param GetAnonymousTypeDefinitions(EmitContext context) 850442"];
2761 [label="param GetAnonymousTypeDefinitions(this) 850443"];
2762 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 850444"];
2763 [label="Compilation.AnonymousTypeManager 850445"];
2764 [label="get\n            {\n                return _anonymousTypeManager;\n            } 850446"];
2765 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 850447"];
2766 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 850448"];
2767 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 850449"];
2768 [label="param GetAdditionalTopLevelTypeDefinitions(this) 850450"];
2769 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 850451"];
2770 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 850452"];
2771 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 850453"];
2772 [label="=> _additionalTypes 850454"];
2773 [label="_additionalTypes 850455"];
2774 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 850456"];
2775 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 850457"];
2776 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 850458"];
2777 [label="param GetEmbeddedTypeDefinitions(this) 850459"];
2778 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 850460"];
2779 [label="GetEmbeddedTypes(context.Diagnostics) 850461"];
2780 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 850462"];
2781 [label="param GetEmbeddedTypes(this) 850463"];
2782 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 850464"];
2783 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 850465"];
2784 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 850466"];
2785 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 850467"];
2786 [label="param CreateEmbeddedAttributesIfNeeded(this) 850468"];
2787 [label="GetNeedsGeneratedAttributes() 850469"];
2788 [label="param GetNeedsGeneratedAttributes(this) 850470"];
2789 [label="_needsGeneratedAttributes_IsFrozen = true; 850471"];
2790 [label="_needsGeneratedAttributes_IsFrozen 850472"];
2791 [label="GetNeedsGeneratedAttributesInternal() 850473"];
2792 [label="param GetNeedsGeneratedAttributesInternal(this) 850474"];
2793 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 850475"];
2794 [label="return GetNeedsGeneratedAttributesInternal(); 850476"];
2795 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 850477"];
2796 [label="ShouldEmitNullablePublicOnlyAttribute() 850478"];
2797 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 850479"];
2798 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 850480"];
2799 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 850481"];
2800 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 850482"];
2801 [label="return; 850483"];
2802 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 850484"];
2803 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 850485"];
2804 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 850486"];
2805 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 850487"];
2806 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 850488"];
2807 [label="builder.AddIfNotNull(_lazyNullableAttribute); 850489"];
2808 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 850490"];
2809 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 850491"];
2810 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 850492"];
2811 [label="return builder.ToImmutableAndFree(); 850493"];
2812 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 850494"];
2813 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 850495"];
2814 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 850496"];
2815 [label="param GetTopLevelSourceTypeDefinitions(this) 850497"];
2816 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 850498"];
2817 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 850499"];
2818 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 850500"];
2819 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 850501"];
2820 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 850502"];
2821 [label="var ns = namespacesToProcess.Pop(); 850503"];
2822 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 850504"];
2823 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 850505"];
2824 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 850506"];
2825 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 850507"];
2826 [label="Debug.Assert(symbol.IsDefinition); 850508"];
2827 [label="SourceModule 850509"];
2828 [label="Assembly 850510"];
2829 [label="SourceAssembly 850511"];
2830 [label="GetBoundReferenceManager() 850512"];
2831 [label="param GetBoundReferenceManager(this) 850513"];
2832 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850514"];
2833 [label="return _referenceManager; 850515"];
2834 [label="GetBoundReferenceManager(); 850516"];
2835 [label="return Assembly.Modules[0]; 850517"];
2836 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 850518"];
2837 [label="EmitNullablePublicOnly 850519"];
2838 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 850520"];
2839 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 850521"];
2840 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 850522"];
2841 [label="param SynthesizeNullableAttributeIfNecessary(this) 850523"];
2842 [label="Compilation.SourceModule 850524"];
2843 [label="get\n            {\n                return Assembly.Modules[0];\n            } 850525"];
2844 [label="Assembly 850526"];
2845 [label="SourceAssembly 850527"];
2846 [label="GetBoundReferenceManager() 850528"];
2847 [label="param GetBoundReferenceManager(this) 850529"];
2848 [label="GetBoundReferenceManager(); 850530"];
2849 [label="return Assembly.Modules[0]; 850531"];
2850 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 850532"];
2851 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 850533"];
2852 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 850534"];
2853 [label="type.AddNullableTransforms(flagsBuilder); 850535"];
2854 [label="type.AddNullableTransforms(flagsBuilder); 850536"];
2855 [label="SynthesizedAttributeData attribute; 850537"];
2856 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 850538"];
2857 [label="attribute = null; 850539"];
2858 [label="flagsBuilder.Free(); 850540"];
2859 [label="return attribute; 850541"];
2860 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 850542"];
2861 [label="new LexicalOrderSymbolComparer() 850543"];
2862 [label="param LexicalOrderSymbolComparer(this) 850544"];
2863 [label="Instance = new LexicalOrderSymbolComparer() 850545"];
2864 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 850546"];
2865 [label="param GetSynthesizedNestedTypes(this) 850547"];
2866 [label="return null; 850548"];
2867 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 850549"];
2868 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 850550"];
2869 [label="param GetSourceAssemblyAttributes(this) 850551"];
2870 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 850552"];
2871 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 850553"];
2872 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 850554"];
2873 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 850555"];
2874 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 850556"];
2875 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 850557"];
2876 [label="NamedTypeSymbol result; 850558"];
2877 [label="GetBoundReferenceManager() 850559"];
2878 [label="GetBoundReferenceManager(); 850560"];
2879 [label="Debug.Assert(result.SpecialType == specialType); 850561"];
2880 [label="SourceAssembly 850562"];
2881 [label="GetBoundReferenceManager() 850563"];
2882 [label="param GetBoundReferenceManager(this) 850564"];
2883 [label="GetBoundReferenceManager(); 850565"];
2884 [label="GetBoundReferenceManager() 850566"];
2885 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 850567"];
2886 [label="param Translate(MethodSymbol methodSymbol) 850568"];
2887 [label="param Translate(SyntaxNode syntaxNodeOpt) 850569"];
2888 [label="param Translate(DiagnosticBag diagnostics) 850570"];
2889 [label="param Translate(BoundArgListOperator optArgList = null) 850571"];
2890 [label="param Translate(bool needDeclaration = false) 850572"];
2891 [label="param Translate(this) 850573"];
2892 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 850574"];
2893 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 850575"];
2894 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 850576"];
2895 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 850577"];
2896 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 850578"];
2897 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 850579"];
2898 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 850580"];
2899 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 850581"];
2900 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 850582"];
2901 [label="param Translate(MethodSymbol methodSymbol) 850583"];
2902 [label="param Translate(SyntaxNode syntaxNodeOpt) 850584"];
2903 [label="param Translate(DiagnosticBag diagnostics) 850585"];
2904 [label="param Translate(bool needDeclaration) 850586"];
2905 [label="param Translate(this) 850587"];
2906 [label="object reference; 850588"];
2907 [label="Cci.IMethodReference methodRef; 850589"];
2908 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 850590"];
2909 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 850591"];
2910 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 850592"];
2911 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 850593"];
2912 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 850594"];
2913 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 850595"];
2914 [label="bool typeIsGeneric = IsGenericType(container); 850596"];
2915 [label="IsGenericType(container) 850597"];
2916 [label="param IsGenericType(NamedTypeSymbol toCheck) 850598"];
2917 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850599"];
2918 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850600"];
2919 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 850601"];
2920 [label="toCheck = toCheck.ContainingType; 850602"];
2921 [label="return false; 850603"];
2922 [label="bool typeIsGeneric = IsGenericType(container); 850604"];
2923 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 850605"];
2924 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 850606"];
2925 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 850607"];
2926 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 850608"];
2927 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 850609"];
2928 [label="return methodSymbol.GetCciAdapter(); 850610"];
2929 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 850611"];
2930 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 850612"];
2931 [label="return unexpandedMethodRef; 850613"];
2932 [label="param Translate(TypeSymbol typeSymbol) 850614"];
2933 [label="param Translate(SyntaxNode syntaxNodeOpt) 850615"];
2934 [label="param Translate(DiagnosticBag diagnostics) 850616"];
2935 [label="param Translate(this) 850617"];
2936 [label="Debug.Assert(diagnostics != null); 850618"];
2937 [label="Debug.Assert(diagnostics != null); 850619"];
2938 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 850620"];
2939 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 850621"];
2940 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 850622"];
2941 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 850623"];
2942 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 850624"];
2943 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 850625"];
2944 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 850626"];
2945 [label="param Translate(SyntaxNode syntaxNodeOpt) 850627"];
2946 [label="param Translate(DiagnosticBag diagnostics) 850628"];
2947 [label="param Translate(bool fromImplements = false) 850629"];
2948 [label="param Translate(bool needDeclaration = false) 850630"];
2949 [label="param Translate(this) 850631"];
2950 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 850632"];
2951 [label="Debug.Assert(diagnostics != null); 850633"];
2952 [label="Debug.Assert(diagnostics != null); 850634"];
2953 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850635"];
2954 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850636"];
2955 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 850637"];
2956 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850638"];
2957 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850639"];
2958 [label="object reference; 850640"];
2959 [label="Cci.INamedTypeReference typeRef; 850641"];
2960 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 850642"];
2961 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850643"];
2962 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850644"];
2963 [label="IsGenericType(container) 850645"];
2964 [label="param IsGenericType(NamedTypeSymbol toCheck) 850646"];
2965 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850647"];
2966 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850648"];
2967 [label="return false; 850649"];
2968 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850650"];
2969 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850651"];
2970 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 850652"];
2971 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 850653"];
2972 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 850654"];
2973 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 850655"];
2974 [label="param Translate(SyntaxNode syntaxNodeOpt) 850656"];
2975 [label="param Translate(DiagnosticBag diagnostics) 850657"];
2976 [label="param Translate(bool fromImplements = false) 850658"];
2977 [label="param Translate(bool needDeclaration = false) 850659"];
2978 [label="param Translate(this) 850660"];
2979 [label="Debug.Assert(diagnostics != null); 850661"];
2980 [label="Debug.Assert(diagnostics != null); 850662"];
2981 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850663"];
2982 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850664"];
2983 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 850665"];
2984 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850666"];
2985 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850667"];
2986 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 850668"];
2987 [label="param Translate(ModuleSymbol module) 850669"];
2988 [label="param Translate(DiagnosticBag diagnostics) 850670"];
2989 [label="param Translate(this) 850671"];
2990 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 850672"];
2991 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 850673"];
2992 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 850674"];
2993 [label="if ((object)module == null)\n            {\n                return null;\n            } 850675"];
2994 [label="if ((object)module == null)\n            {\n                return null;\n            } 850676"];
2995 [label="Cci.IModuleReference moduleRef; 850677"];
2996 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 850678"];
2997 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 850679"];
2998 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 850680"];
2999 [label="return moduleRef; 850681"];
3000 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850682"];
3001 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850683"];
3002 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 850684"];
3003 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850685"];
3004 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850686"];
3005 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 850687"];
3006 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 850688"];
3007 [label="param Translate(this) 850689"];
3008 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 850690"];
3009 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 850691"];
3010 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 850692"];
3011 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 850693"];
3012 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 850694"];
3013 [label="MustBeWrapped(@params.First()) 850695"];
3014 [label="param MustBeWrapped(ParameterSymbol param) 850696"];
3015 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 850697"];
3016 [label="var container = param.ContainingSymbol; 850698"];
3017 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 850699"];
3018 [label="ContainerIsGeneric(container) 850700"];
3019 [label="param ContainerIsGeneric(Symbol container) 850701"];
3020 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850702"];
3021 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850703"];
3022 [label="IsGenericType(container.ContainingType) 850704"];
3023 [label="param IsGenericType(NamedTypeSymbol toCheck) 850705"];
3024 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850706"];
3025 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850707"];
3026 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 850708"];
3027 [label="toCheck = toCheck.ContainingType; 850709"];
3028 [label="return false; 850710"];
3029 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850711"];
3030 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850712"];
3031 [label="return false; 850713"];
3032 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 850714"];
3033 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 850715"];
3034 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 850716"];
3035 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 850717"];
3036 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 850718"];
3037 [label="param MustBeWrapped(ParameterSymbol param) 850719"];
3038 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 850720"];
3039 [label="var container = param.ContainingSymbol; 850721"];
3040 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 850722"];
3041 [label="ContainerIsGeneric(container) 850723"];
3042 [label="param ContainerIsGeneric(Symbol container) 850724"];
3043 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850725"];
3044 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850726"];
3045 [label="IsGenericType(container.ContainingType) 850727"];
3046 [label="param IsGenericType(NamedTypeSymbol toCheck) 850728"];
3047 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850729"];
3048 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850730"];
3049 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 850731"];
3050 [label="toCheck = toCheck.ContainingType; 850732"];
3051 [label="return false; 850733"];
3052 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850734"];
3053 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850735"];
3054 [label="return false; 850736"];
3055 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 850737"];
3056 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 850738"];
3057 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 850739"];
3058 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 850740"];
3059 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 850741"];
3060 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 850742"];
3061 [label="param Translate(SyntaxNode syntaxNodeOpt) 850743"];
3062 [label="param Translate(DiagnosticBag diagnostics) 850744"];
3063 [label="param Translate(bool fromImplements = false) 850745"];
3064 [label="param Translate(bool needDeclaration = false) 850746"];
3065 [label="Debug.Assert(diagnostics != null); 850747"];
3066 [label="Debug.Assert(diagnostics != null); 850748"];
3067 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850749"];
3068 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850750"];
3069 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 850751"];
3070 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850752"];
3071 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850753"];
3072 [label="object reference; 850754"];
3073 [label="Cci.INamedTypeReference typeRef; 850755"];
3074 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 850756"];
3075 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850757"];
3076 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850758"];
3077 [label="IsGenericType(container) 850759"];
3078 [label="param IsGenericType(NamedTypeSymbol toCheck) 850760"];
3079 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850761"];
3080 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850762"];
3081 [label="return false; 850763"];
3082 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850764"];
3083 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850765"];
3084 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 850766"];
3085 [label="param IsPlatformType(Cci.ITypeReference typeRef) 850767"];
3086 [label="param IsPlatformType(Cci.PlatformType platformType) 850768"];
3087 [label="param IsPlatformType(this) 850769"];
3088 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 850770"];
3089 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 850771"];
3090 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 850772"];
3091 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 850773"];
3092 [label="return namedType.SpecialType == (SpecialType)platformType; 850774"];
3093 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 850775"];
3094 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 850776"];
3095 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 850777"];
3096 [label="param Translate(SyntaxNode syntaxNodeOpt) 850778"];
3097 [label="param Translate(DiagnosticBag diagnostics) 850779"];
3098 [label="param Translate(bool fromImplements = false) 850780"];
3099 [label="param Translate(bool needDeclaration = false) 850781"];
3100 [label="Debug.Assert(diagnostics != null); 850782"];
3101 [label="Debug.Assert(diagnostics != null); 850783"];
3102 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850784"];
3103 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850785"];
3104 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 850786"];
3105 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850787"];
3106 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850788"];
3107 [label="object reference; 850789"];
3108 [label="Cci.INamedTypeReference typeRef; 850790"];
3109 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 850791"];
3110 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850792"];
3111 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850793"];
3112 [label="IsGenericType(container) 850794"];
3113 [label="param IsGenericType(NamedTypeSymbol toCheck) 850795"];
3114 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850796"];
3115 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850797"];
3116 [label="return false; 850798"];
3117 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850799"];
3118 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850800"];
3119 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 850801"];
3120 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850802"];
3121 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850803"];
3122 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 850804"];
3123 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850805"];
3124 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850806"];
3125 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 850807"];
3126 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 850808"];
3127 [label="param MustBeWrapped(ParameterSymbol param) 850809"];
3128 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 850810"];
3129 [label="var container = param.ContainingSymbol; 850811"];
3130 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 850812"];
3131 [label="ContainerIsGeneric(container) 850813"];
3132 [label="param ContainerIsGeneric(Symbol container) 850814"];
3133 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850815"];
3134 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850816"];
3135 [label="IsGenericType(container.ContainingType) 850817"];
3136 [label="param IsGenericType(NamedTypeSymbol toCheck) 850818"];
3137 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850819"];
3138 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850820"];
3139 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 850821"];
3140 [label="toCheck = toCheck.ContainingType; 850822"];
3141 [label="return false; 850823"];
3142 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850824"];
3143 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850825"];
3144 [label="param MustBeWrapped(ParameterSymbol param) 850826"];
3145 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 850827"];
3146 [label="var container = param.ContainingSymbol; 850828"];
3147 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 850829"];
3148 [label="ContainerIsGeneric(container) 850830"];
3149 [label="param ContainerIsGeneric(Symbol container) 850831"];
3150 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850832"];
3151 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850833"];
3152 [label="IsGenericType(container.ContainingType) 850834"];
3153 [label="param IsGenericType(NamedTypeSymbol toCheck) 850835"];
3154 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850836"];
3155 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850837"];
3156 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 850838"];
3157 [label="toCheck = toCheck.ContainingType; 850839"];
3158 [label="return false; 850840"];
3159 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850841"];
3160 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 850842"];
3161 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 850843"];
3162 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 850844"];
3163 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 850845"];
3164 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 850846"];
3165 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 850847"];
3166 [label="bool typeIsGeneric = IsGenericType(container); 850848"];
3167 [label="IsGenericType(container) 850849"];
3168 [label="param IsGenericType(NamedTypeSymbol toCheck) 850850"];
3169 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850851"];
3170 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850852"];
3171 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 850853"];
3172 [label="toCheck = toCheck.ContainingType; 850854"];
3173 [label="return false; 850855"];
3174 [label="bool typeIsGeneric = IsGenericType(container); 850856"];
3175 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 850857"];
3176 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 850858"];
3177 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 850859"];
3178 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 850860"];
3179 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 850861"];
3180 [label="toCheck = toCheck.ContainingType; 850862"];
3181 [label="param GetSourceAssemblySecurityAttributes(this) 850863"];
3182 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 850864"];
3183 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 850865"];
3184 [label="return Translate(corLibrary, context.Diagnostics); 850866"];
3185 [label="param Translate(DiagnosticBag diagnostics) 850867"];
3186 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 850868"];
3187 [label="return (Cci.IAssemblyReference)reference; 850869"];
3188 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 850870"];
3189 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 850871"];
3190 [label="param GetSourceModuleAttributes(this) 850872"];
3191 [label="return SourceModule.GetCustomAttributesToEmit(this); 850873"];
3192 [label="return SourceModule.GetCustomAttributesToEmit(this); 850874"];
3193 [label="return SourceModule.GetCustomAttributesToEmit(this); 850875"];
3194 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 850876"];
3195 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 850877"];
3196 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 850878"];
3197 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 850879"];
3198 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 850880"];
3199 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 850881"];
3200 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 850882"];
3201 [label="return GetNeedsGeneratedAttributesInternal(); 850883"];
3202 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 850884"];
3203 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 850885"];
3204 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 850886"];
3205 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 850887"];
3206 [label="return; 850888"];
3207 [label="Debug.Assert(symbol.IsDefinition); 850889"];
3208 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850890"];
3209 [label="return _referenceManager; 850891"];
3210 [label="GetBoundReferenceManager(); 850892"];
3211 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 850893"];
3212 [label="param GetBoundReferenceManager(this) 850894"];
3213 [label="GetBoundReferenceManager(); 850895"];
3214 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 850896"];
3215 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 850897"];
3216 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 850898"];
3217 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 850899"];
3218 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 850900"];
3219 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 850901"];
3220 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 850902"];
3221 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 850903"];
3222 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 850904"];
3223 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 850905"];
3224 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 850906"];
3225 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 850907"];
3226 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 850908"];
3227 [label="param SynthesizeNullableAttributeIfNecessary(this) 850909"];
3228 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 850910"];
3229 [label="return null; 850911"];
3230 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850912"];
3231 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850913"];
3232 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 850914"];
3233 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850915"];
3234 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850916"];
3235 [label="object reference; 850917"];
3236 [label="Cci.INamedTypeReference typeRef; 850918"];
3237 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 850919"];
3238 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850920"];
3239 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850921"];
3240 [label="IsGenericType(container) 850922"];
3241 [label="param IsGenericType(NamedTypeSymbol toCheck) 850923"];
3242 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850924"];
3243 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850925"];
3244 [label="return false; 850926"];
3245 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850927"];
3246 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850928"];
3247 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 850929"];
3248 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 850930"];
3249 [label="Debug.Assert(symbol.IsDefinition); 850931"];
3250 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 850932"];
3251 [label="return _referenceManager; 850933"];
3252 [label="GetBoundReferenceManager(); 850934"];
3253 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 850935"];
3254 [label="param GetBoundReferenceManager(this) 850936"];
3255 [label="GetBoundReferenceManager(); 850937"];
3256 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 850938"];
3257 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 850939"];
3258 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 850940"];
3259 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 850941"];
3260 [label="param Translate(SyntaxNode syntaxNodeOpt) 850942"];
3261 [label="param Translate(DiagnosticBag diagnostics) 850943"];
3262 [label="param Translate(bool fromImplements = false) 850944"];
3263 [label="param Translate(bool needDeclaration = false) 850945"];
3264 [label="Debug.Assert(diagnostics != null); 850946"];
3265 [label="Debug.Assert(diagnostics != null); 850947"];
3266 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850948"];
3267 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 850949"];
3268 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 850950"];
3269 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850951"];
3270 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 850952"];
3271 [label="object reference; 850953"];
3272 [label="Cci.INamedTypeReference typeRef; 850954"];
3273 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 850955"];
3274 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850956"];
3275 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850957"];
3276 [label="IsGenericType(container) 850958"];
3277 [label="param IsGenericType(NamedTypeSymbol toCheck) 850959"];
3278 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850960"];
3279 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 850961"];
3280 [label="return false; 850962"];
3281 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850963"];
3282 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 850964"];
3283 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 850965"];
3284 [label="param GetExportedTypes(DiagnosticBag diagnostics) 850966"];
3285 [label="param GetExportedTypes(this) 850967"];
3286 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 850968"];
3287 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 850969"];
3288 [label="CalculateExportedTypes() 850970"];
3289 [label="param CalculateExportedTypes(this) 850971"];
3290 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 850972"];
3291 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 850973"];
3292 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 850974"];
3293 [label="var modules = sourceAssembly.Modules; 850975"];
3294 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 850976"];
3295 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 850977"];
3296 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 850978"];
3297 [label="sourceAssembly.DeclaringCompilation.Options 850979"];
3298 [label="get\n            {\n                return _options;\n            } 850980"];
3299 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 850981"];
3300 [label="GetForwardedTypes(sourceAssembly, builder); 850982"];
3301 [label="GetForwardedTypes(sourceAssembly, builder); 850983"];
3302 [label="GetForwardedTypes(sourceAssembly, builder) 850984"];
3303 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 850985"];
3304 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 850986"];
3305 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 850987"];
3306 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 850988"];
3307 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 850989"];
3308 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 850990"];
3309 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 850991"];
3310 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 850992"];
3311 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 850993"];
3312 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 850994"];
3313 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 850995"];
3314 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 850996"];
3315 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 850997"];
3316 [label="sourceAssembly.DeclaringCompilation.Options 850998"];
3317 [label="get\n            {\n                return _options;\n            } 850999"];
3318 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 851000"];
3319 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 851001"];
3320 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 851002"];
3321 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 851003"];
3322 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 851004"];
3323 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 851005"];
3324 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 851006"];
3325 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 851007"];
3326 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 851008"];
3327 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 851009"];
3328 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 851010"];
3329 [label="return seenTopLevelForwardedTypes; 851011"];
3330 [label="GetForwardedTypes(sourceAssembly, builder); 851012"];
3331 [label="return builder.ToImmutableAndFree(); 851013"];
3332 [label="_lazyExportedTypes = CalculateExportedTypes(); 851014"];
3333 [label="_lazyExportedTypes 851015"];
3334 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 851016"];
3335 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 851017"];
3336 [label="return _lazyExportedTypes; 851018"];
3337 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 851019"];
3338 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 851020"];
3339 [label="param AddEmbeddedResourcesFromAddedModules(this) 851021"];
3340 [label="var modules = _sourceAssembly.Modules; 851022"];
3341 [label="int count = modules.Length; 851023"];
3342 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 851024"];
3343 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 851025"];
3344 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 851026"];
3345 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 851027"];
3346 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 851028"];
3347 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851029"];
3348 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851030"];
3349 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 851031"];
3350 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851032"];
3351 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851033"];
3352 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 851034"];
3353 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 851035"];
3354 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 851036"];
3355 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 851037"];
3356 [label="param Translate(SyntaxNode syntaxNodeOpt) 851038"];
3357 [label="param Translate(DiagnosticBag diagnostics) 851039"];
3358 [label="param Translate(bool fromImplements = false) 851040"];
3359 [label="param Translate(bool needDeclaration = false) 851041"];
3360 [label="Debug.Assert(diagnostics != null); 851042"];
3361 [label="Debug.Assert(diagnostics != null); 851043"];
3362 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851044"];
3363 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851045"];
3364 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 851046"];
3365 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851047"];
3366 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851048"];
3367 [label="object reference; 851049"];
3368 [label="Cci.INamedTypeReference typeRef; 851050"];
3369 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 851051"];
3370 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851052"];
3371 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851053"];
3372 [label="IsGenericType(container) 851054"];
3373 [label="param IsGenericType(NamedTypeSymbol toCheck) 851055"];
3374 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851056"];
3375 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851057"];
3376 [label="return false; 851058"];
3377 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851059"];
3378 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851060"];
3379 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 851061"];
3380 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 851062"];
3381 [label="=> _sourceAssembly 851063"];
3382 [label="_sourceAssembly 851064"];
3383 [label="=> _metadataName 851065"];
3384 [label="_metadataName 851066"];
3385 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 851067"];
3386 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851068"];
3387 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851069"];
3388 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 851070"];
3389 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851071"];
3390 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851072"];
3391 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 851073"];
3392 [label="param MemberVisibility(Symbol symbol) 851074"];
3393 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 851075"];
3394 [label="return Cci.TypeMemberVisibility.Public; 851076"];
3395 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 851077"];
3396 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 851078"];
3397 [label="param Translate(SyntaxNode syntaxNodeOpt) 851079"];
3398 [label="param Translate(DiagnosticBag diagnostics) 851080"];
3399 [label="param Translate(bool fromImplements = false) 851081"];
3400 [label="param Translate(bool needDeclaration = false) 851082"];
3401 [label="Debug.Assert(diagnostics != null); 851083"];
3402 [label="Debug.Assert(diagnostics != null); 851084"];
3403 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851085"];
3404 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851086"];
3405 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 851087"];
3406 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851088"];
3407 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851089"];
3408 [label="object reference; 851090"];
3409 [label="Cci.INamedTypeReference typeRef; 851091"];
3410 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 851092"];
3411 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851093"];
3412 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851094"];
3413 [label="IsGenericType(container) 851095"];
3414 [label="param IsGenericType(NamedTypeSymbol toCheck) 851096"];
3415 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851097"];
3416 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851098"];
3417 [label="return false; 851099"];
3418 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851100"];
3419 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851101"];
3420 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 851102"];
3421 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 851103"];
3422 [label="get { return _metadataName; } 851104"];
3423 [label="return _metadataName; 851105"];
3424 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851106"];
3425 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851107"];
3426 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 851108"];
3427 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851109"];
3428 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851110"];
3429 [label="object reference; 851111"];
3430 [label="Cci.INamedTypeReference typeRef; 851112"];
3431 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 851113"];
3432 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851114"];
3433 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851115"];
3434 [label="IsGenericType(container) 851116"];
3435 [label="param IsGenericType(NamedTypeSymbol toCheck) 851117"];
3436 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851118"];
3437 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851119"];
3438 [label="return false; 851120"];
3439 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851121"];
3440 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851122"];
3441 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 851123"];
3442 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 851124"];
3443 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 851125"];
3444 [label="GetBoundReferenceManager() 851126"];
3445 [label="GetBoundReferenceManager(); 851127"];
3446 [label="Debug.Assert(result.SpecialType == specialType); 851128"];
3447 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 851129"];
3448 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 851130"];
3449 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 851131"];
3450 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 851132"];
3451 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 851133"];
3452 [label="bool typeIsGeneric = IsGenericType(container); 851134"];
3453 [label="IsGenericType(container) 851135"];
3454 [label="param IsGenericType(NamedTypeSymbol toCheck) 851136"];
3455 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851137"];
3456 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851138"];
3457 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 851139"];
3458 [label="toCheck = toCheck.ContainingType; 851140"];
3459 [label="return false; 851141"];
3460 [label="bool typeIsGeneric = IsGenericType(container); 851142"];
3461 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 851143"];
3462 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 851144"];
3463 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 851145"];
3464 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 851146"];
3465 [label="param MustBeWrapped(ParameterSymbol param) 851147"];
3466 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 851148"];
3467 [label="var container = param.ContainingSymbol; 851149"];
3468 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 851150"];
3469 [label="ContainerIsGeneric(container) 851151"];
3470 [label="param ContainerIsGeneric(Symbol container) 851152"];
3471 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851153"];
3472 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851154"];
3473 [label="IsGenericType(container.ContainingType) 851155"];
3474 [label="param IsGenericType(NamedTypeSymbol toCheck) 851156"];
3475 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851157"];
3476 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851158"];
3477 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 851159"];
3478 [label="toCheck = toCheck.ContainingType; 851160"];
3479 [label="return false; 851161"];
3480 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851162"];
3481 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851163"];
3482 [label="param MustBeWrapped(ParameterSymbol param) 851164"];
3483 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 851165"];
3484 [label="var container = param.ContainingSymbol; 851166"];
3485 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 851167"];
3486 [label="ContainerIsGeneric(container) 851168"];
3487 [label="param ContainerIsGeneric(Symbol container) 851169"];
3488 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851170"];
3489 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851171"];
3490 [label="IsGenericType(container.ContainingType) 851172"];
3491 [label="param IsGenericType(NamedTypeSymbol toCheck) 851173"];
3492 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851174"];
3493 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851175"];
3494 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 851176"];
3495 [label="toCheck = toCheck.ContainingType; 851177"];
3496 [label="return false; 851178"];
3497 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851179"];
3498 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851180"];
3499 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 851181"];
3500 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 851182"];
3501 [label="param Translate(SyntaxNode syntaxNodeOpt) 851183"];
3502 [label="param Translate(DiagnosticBag diagnostics) 851184"];
3503 [label="param Translate(bool fromImplements = false) 851185"];
3504 [label="param Translate(bool needDeclaration = false) 851186"];
3505 [label="Debug.Assert(diagnostics != null); 851187"];
3506 [label="Debug.Assert(diagnostics != null); 851188"];
3507 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851189"];
3508 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851190"];
3509 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 851191"];
3510 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851192"];
3511 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851193"];
3512 [label="object reference; 851194"];
3513 [label="Cci.INamedTypeReference typeRef; 851195"];
3514 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 851196"];
3515 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851197"];
3516 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851198"];
3517 [label="IsGenericType(container) 851199"];
3518 [label="param IsGenericType(NamedTypeSymbol toCheck) 851200"];
3519 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851201"];
3520 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851202"];
3521 [label="return false; 851203"];
3522 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851204"];
3523 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851205"];
3524 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 851206"];
3525 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 851207"];
3526 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 851208"];
3527 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 851209"];
3528 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 851210"];
3529 [label="GetBoundReferenceManager() 851211"];
3530 [label="param GetBoundReferenceManager(this) 851212"];
3531 [label="GetBoundReferenceManager(); 851213"];
3532 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 851214"];
3533 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 851215"];
3534 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 851216"];
3535 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 851217"];
3536 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 851218"];
3537 [label="bool typeIsGeneric = IsGenericType(container); 851219"];
3538 [label="IsGenericType(container) 851220"];
3539 [label="param IsGenericType(NamedTypeSymbol toCheck) 851221"];
3540 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851222"];
3541 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851223"];
3542 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 851224"];
3543 [label="toCheck = toCheck.ContainingType; 851225"];
3544 [label="return false; 851226"];
3545 [label="bool typeIsGeneric = IsGenericType(container); 851227"];
3546 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 851228"];
3547 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 851229"];
3548 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 851230"];
3549 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 851231"];
3550 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851232"];
3551 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851233"];
3552 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 851234"];
3553 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851235"];
3554 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851236"];
3555 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 851237"];
3556 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 851238"];
3557 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 851239"];
3558 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 851240"];
3559 [label="param Translate(SyntaxNode syntaxNodeOpt) 851241"];
3560 [label="param Translate(DiagnosticBag diagnostics) 851242"];
3561 [label="param Translate(bool fromImplements = false) 851243"];
3562 [label="param Translate(bool needDeclaration = false) 851244"];
3563 [label="Debug.Assert(diagnostics != null); 851245"];
3564 [label="Debug.Assert(diagnostics != null); 851246"];
3565 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851247"];
3566 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 851248"];
3567 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 851249"];
3568 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851250"];
3569 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 851251"];
3570 [label="object reference; 851252"];
3571 [label="Cci.INamedTypeReference typeRef; 851253"];
3572 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 851254"];
3573 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851255"];
3574 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851256"];
3575 [label="IsGenericType(container) 851257"];
3576 [label="param IsGenericType(NamedTypeSymbol toCheck) 851258"];
3577 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851259"];
3578 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851260"];
3579 [label="return false; 851261"];
3580 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851262"];
3581 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 851263"];
3582 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 851264"];
3583 [label="param MustBeWrapped(ParameterSymbol param) 851265"];
3584 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 851266"];
3585 [label="var container = param.ContainingSymbol; 851267"];
3586 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 851268"];
3587 [label="ContainerIsGeneric(container) 851269"];
3588 [label="param ContainerIsGeneric(Symbol container) 851270"];
3589 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851271"];
3590 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851272"];
3591 [label="IsGenericType(container.ContainingType) 851273"];
3592 [label="param IsGenericType(NamedTypeSymbol toCheck) 851274"];
3593 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851275"];
3594 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851276"];
3595 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 851277"];
3596 [label="toCheck = toCheck.ContainingType; 851278"];
3597 [label="return false; 851279"];
3598 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851280"];
3599 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851281"];
3600 [label="param MustBeWrapped(ParameterSymbol param) 851282"];
3601 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 851283"];
3602 [label="var container = param.ContainingSymbol; 851284"];
3603 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 851285"];
3604 [label="ContainerIsGeneric(container) 851286"];
3605 [label="param ContainerIsGeneric(Symbol container) 851287"];
3606 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851288"];
3607 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851289"];
3608 [label="IsGenericType(container.ContainingType) 851290"];
3609 [label="param IsGenericType(NamedTypeSymbol toCheck) 851291"];
3610 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851292"];
3611 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 851293"];
3612 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 851294"];
3613 [label="toCheck = toCheck.ContainingType; 851295"];
3614 [label="return false; 851296"];
3615 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851297"];
3616 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 851298"];
3617 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 851299"];
3618 [label="toCheck = toCheck.ContainingType; 851300"];
3619 [label="Debug.Assert(symbol.IsDefinition); 851301"];
3620 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851302"];
3621 [label="return _referenceManager; 851303"];
3622 [label="GetBoundReferenceManager(); 851304"];
3623 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 851305"];
3624 [label="param GetBoundReferenceManager(this) 851306"];
3625 [label="GetBoundReferenceManager(); 851307"];
3626 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 851308"];
3627 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 851309"];
3628 [label="param SynthesizeNullableAttributeIfNecessary(this) 851310"];
3629 [label="param GetSymbolToLocationMap(this) 851311"];
3630 [label="var result = new MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation>(); 851312"];
3631 [label="var namespacesAndTypesToProcess = new Stack<NamespaceOrTypeSymbol>(); 851313"];
3632 [label="namespacesAndTypesToProcess.Push(SourceModule.GlobalNamespace); 851314"];
3633 [label="namespacesAndTypesToProcess.Push(SourceModule.GlobalNamespace); 851315"];
3634 [label="Location location = null; 851316"];
3635 [label="while (namespacesAndTypesToProcess.Count > 0)\n            {\n                NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop();\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                }\n            } 851317"];
3636 [label="while (namespacesAndTypesToProcess.Count > 0)\n            {\n                NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop();\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                }\n            } 851318"];
3637 [label="NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop(); 851319"];
3638 [label="switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                } 851320"];
3639 [label="location = GetSmallestSourceLocationOrNull(symbol); 851321"];
3640 [label="GetSmallestSourceLocationOrNull(symbol) 851322"];
3641 [label="param GetSmallestSourceLocationOrNull(Symbol symbol) 851323"];
3642 [label="param GetSmallestSourceLocationOrNull(this) 851324"];
3643 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 851325"];
3644 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 851326"];
3645 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 851327"];
3646 [label="Location result = null; 851328"];
3647 [label="foreach (var loc in symbol.Locations)\n            {\n                if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                }\n            } 851329"];
3648 [label="if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                } 851330"];
3649 [label="if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                } 851331"];
3650 [label="result = loc; 851332"];
3651 [label="return result; 851333"];
3652 [label="if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        } 851334"];
3653 [label="if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        } 851335"];
3654 [label="foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            } 851336"];
3655 [label="switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                } 851337"];
3656 [label="namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member); 851338"];
3657 [label="location = GetSmallestSourceLocationOrNull(symbol); 851339"];
3658 [label="GetSmallestSourceLocationOrNull(symbol) 851340"];
3659 [label="param GetSmallestSourceLocationOrNull(Symbol symbol) 851341"];
3660 [label="param GetSmallestSourceLocationOrNull(this) 851342"];
3661 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 851343"];
3662 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 851344"];
3663 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 851345"];
3664 [label="if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        } 851346"];
3665 [label="if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        } 851347"];
3666 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 851348"];
3667 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 851349"];
3668 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 851350"];
3669 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()) 851351"];
3670 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 851352"];
3671 [label="param AddSymbolLocation(Location location) 851353"];
3672 [label="param AddSymbolLocation(Cci.IDefinition definition) 851354"];
3673 [label="param AddSymbolLocation(this) 851355"];
3674 [label="FileLinePositionSpan span = location.GetLineSpan(); 851356"];
3675 [label="Cci.DebugSourceDocument doc = DebugDocumentsBuilder.TryGetDebugDocument(span.Path, basePath: location.SourceTree.FilePath); 851357"];
3676 [label="Cci.DebugSourceDocument doc = DebugDocumentsBuilder.TryGetDebugDocument(span.Path, basePath: location.SourceTree.FilePath); 851358"];
3677 [label="Cci.DebugSourceDocument doc = DebugDocumentsBuilder.TryGetDebugDocument(span.Path, basePath: location.SourceTree.FilePath); 851359"];
3678 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 851360"];
3679 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 851361"];
3680 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 851362"];
3681 [label="foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            } 851363"];
3682 [label="switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                } 851364"];
3683 [label="var method = (MethodSymbol)member; 851365"];
3684 [label="if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        } 851366"];
3685 [label="AddSymbolLocation(result, member); 851367"];
3686 [label="AddSymbolLocation(result, member); 851368"];
3687 [label="AddSymbolLocation(result, member) 851369"];
3688 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 851370"];
3689 [label="param AddSymbolLocation(Symbol symbol) 851371"];
3690 [label="param AddSymbolLocation(this) 851372"];
3691 [label="var location = GetSmallestSourceLocationOrNull(symbol); 851373"];
3692 [label="GetSmallestSourceLocationOrNull(symbol) 851374"];
3693 [label="param GetSmallestSourceLocationOrNull(Symbol symbol) 851375"];
3694 [label="param GetSmallestSourceLocationOrNull(this) 851376"];
3695 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 851377"];
3696 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 851378"];
3697 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 851379"];
3698 [label="foreach (var loc in symbol.Locations)\n            {\n                if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                }\n            } 851380"];
3699 [label="if (location != null)\n            {\n                AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n            } 851381"];
3700 [label="if (location != null)\n            {\n                AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n            } 851382"];
3701 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 851383"];
3702 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 851384"];
3703 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 851385"];
3704 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()) 851386"];
3705 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 851387"];
3706 [label="param AddSymbolLocation(Location location) 851388"];
3707 [label="param AddSymbolLocation(Cci.IDefinition definition) 851389"];
3708 [label="param AddSymbolLocation(this) 851390"];
3709 [label="Cci.DebugSourceDocument doc = DebugDocumentsBuilder.TryGetDebugDocument(span.Path, basePath: location.SourceTree.FilePath); 851391"];
3710 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 851392"];
3711 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 851393"];
3712 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 851394"];
3713 [label="AddSymbolLocation(result, member); 851395"];
3714 [label="return result; 851396"];
3715 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 851397"];
3716 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851398"];
3717 [label="return _referenceManager; 851399"];
3718 [label="GetBoundReferenceManager(); 851400"];
3719 [label="c.GetEmitDiagnostics(options: options).Verify(expected); 851401"];
3720 [label="c.GetEmitDiagnostics(options: options).Verify(expected) 851402"];
3721 [label="param Verify(this ImmutableArray<Diagnostic> actual) 851403"];
3722 [label="param Verify(params DiagnosticDescription[] expected) 851404"];
3723 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 851405"];
3724 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 851406"];
3725 [label="param Verify(params DiagnosticDescription[] expected) 851407"];
3726 [label="Verify(actual, expected, errorCodeOnly: false); 851408"];
3727 [label="Verify(actual, expected, errorCodeOnly: false); 851409"];
3728 [label="Verify(actual, expected, errorCodeOnly: false) 851410"];
3729 [label="param Verify(DiagnosticDescription[] expected) 851411"];
3730 [label="param Verify(bool errorCodeOnly) 851412"];
3731 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 851413"];
3732 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 851414"];
3733 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 851415"];
3734 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 851416"];
3735 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 851417"];
3736 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 851418"];
3737 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 851419"];
3738 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 851420"];
3739 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 851421"];
3740 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 851422"];
3741 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 851423"];
3742 [label="DiagnosticDescription.GetAssertText(expected, actual) 851424"];
3743 [label="param GetAssertText(DiagnosticDescription[] expected) 851425"];
3744 [label="const int CSharp = 1; 851426"];
3745 [label="const int VisualBasic = 2; 851427"];
3746 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 851428"];
3747 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 851429"];
3748 [label="actual.Any() && actual.First() is CSDiagnostic 851430"];
3749 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 851431"];
3750 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 851432"];
3751 [label="int indentDepth = (language == CSharp) ? 4 : 1; 851433"];
3752 [label="(language == CSharp) 851434"];
3753 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 851435"];
3754 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 851436"];
3755 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 851437"];
3756 [label="IsSortedOrEmpty(expected) 851438"];
3757 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 851439"];
3758 [label="var comparer = LinePositionComparer.Instance; 851440"];
3759 [label="DiagnosticDescription last = null; 851441"];
3760 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 851442"];
3761 [label="return true; 851443"];
3762 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 851444"];
3763 [label="Sort(actual) 851445"];
3764 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 851446"];
3765 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 851447"];
3766 [label="var assertText = new StringBuilder(); 851448"];
3767 [label="assertText.AppendLine(); 851449"];
3768 [label="int i; 851450"];
3769 [label="assertText.AppendLine('Expected:'); 851451"];
3770 [label="assertText.AppendLine('Expected:'); 851452"];
3771 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 851453"];
3772 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 851454"];
3773 [label="GetCommaSeparatedLines(assertText, expectedText); 851455"];
3774 [label="GetCommaSeparatedLines(assertText, expectedText); 851456"];
3775 [label="GetCommaSeparatedLines(assertText, expectedText) 851457"];
3776 [label="param GetCommaSeparatedLines(StringBuilder sb) 851458"];
3777 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 851459"];
3778 [label="int n = lines.Count; 851460"];
3779 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 851461"];
3780 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 851462"];
3781 [label="GetCommaSeparatedLines(assertText, expectedText); 851463"];
3782 [label="assertText.AppendLine('Actual:'); 851464"];
3783 [label="assertText.AppendLine('Actual:'); 851465"];
3784 [label="var actualText = ArrayBuilder<string>.GetInstance(); 851466"];
3785 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 851467"];
3786 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 851468"];
3787 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 851469"];
3788 [label="assertText.AppendLine('Diff:'); 851470"];
3789 [label="assertText.AppendLine('Diff:'); 851471"];
3790 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 851472"];
3791 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 851473"];
3792 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 851474"];
3793 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 851475"];
3794 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 851476"];
3795 [label="param DiffReport(IEnumerable<T> expected) 851477"];
3796 [label="param DiffReport(IEnumerable<T> actual) 851478"];
3797 [label="param DiffReport(string separator) 851479"];
3798 [label="param DiffReport(IEqualityComparer<T> comparer = null) 851480"];
3799 [label="param DiffReport(Func<T, string> toString = null) 851481"];
3800 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 851482"];
3801 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 851483"];
3802 [label="(comparer != null) 851484"];
3803 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 851485"];
3804 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 851486"];
3805 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 851487"];
3806 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 851488"];
3807 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 851489"];
3808 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 851490"];
3809 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 851491"];
3810 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 851492"];
3811 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 851493"];
3812 [label="lcs.CalculateDiff(expectedList, actualList, toString) 851494"];
3813 [label="param CalculateDiff(IList<T> sequenceA) 851495"];
3814 [label="param CalculateDiff(IList<T> sequenceB) 851496"];
3815 [label="param CalculateDiff(Func<T, string> toString) 851497"];
3816 [label="param CalculateDiff(this) 851498"];
3817 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 851499"];
3818 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 851500"];
3819 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 851501"];
3820 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 851502"];
3821 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 851503"];
3822 [label="param GetEdits(TSequence sequenceA) 851504"];
3823 [label="param GetEdits(int lengthA) 851505"];
3824 [label="param GetEdits(TSequence sequenceB) 851506"];
3825 [label="param GetEdits(int lengthB) 851507"];
3826 [label="param GetEdits(this) 851508"];
3827 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 851509"];
3828 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 851510"];
3829 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 851511"];
3830 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 851512"];
3831 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 851513"];
3832 [label="param ComputeCostMatrix(TSequence sequenceA) 851514"];
3833 [label="param ComputeCostMatrix(int lengthA) 851515"];
3834 [label="param ComputeCostMatrix(TSequence sequenceB) 851516"];
3835 [label="param ComputeCostMatrix(int lengthB) 851517"];
3836 [label="param ComputeCostMatrix(this) 851518"];
3837 [label="var la = lengthA + 1; 851519"];
3838 [label="var la = lengthA + 1; 851520"];
3839 [label="var lb = lengthB + 1; 851521"];
3840 [label="var lb = lengthB + 1; 851522"];
3841 [label="var d = new int[la, lb]; 851523"];
3842 [label="d[0, 0] = 0; 851524"];
3843 [label="d[0, 0] 851525"];
3844 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 851526"];
3845 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 851527"];
3846 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 851528"];
3847 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 851529"];
3848 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 851530"];
3849 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 851531"];
3850 [label="return d; 851532"];
3851 [label="int i = lengthA; 851533"];
3852 [label="int j = lengthB; 851534"];
3853 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 851535"];
3854 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 851536"];
3855 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 851537"];
3856 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 851538"];
3857 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 851539"];
3858 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 851540"];
3859 [label="param GetEdits(this) 851541"];
3860 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 851542"];
3861 [label="param CalculateDiff(this) 851543"];
3862 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 851544"];
3863 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 851545"];
3864 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 851546"];
3865 [label="actualText.Free(); 851547"];
3866 [label="expectedText.Free(); 851548"];
3867 [label="return assertText.ToString(); 851549"];
3868 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 851550"];
3869 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 851551"];
3870 [label="return c; 851552"];
3871 [label="var result = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: options); 851553"];
3872 [label="var result = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: options); 851554"];
3873 [label="var result = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: options); 851555"];
3874 [label="var result = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: options); 851556"];
3875 [label="var result = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: options); 851557"];
3876 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 851558"];
3877 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 851559"];
3878 [label="param CreateModuleBuilder(CompilationTestData? testData) 851560"];
3879 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 851561"];
3880 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 851562"];
3881 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 851563"];
3882 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 851564"];
3883 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 851565"];
3884 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 851566"];
3885 [label="GetRuntimeMetadataVersion(emitOptions) 851567"];
3886 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 851568"];
3887 [label="Assembly 851569"];
3888 [label="SourceAssembly 851570"];
3889 [label="GetBoundReferenceManager() 851571"];
3890 [label="param GetBoundReferenceManager(this) 851572"];
3891 [label="GetBoundReferenceManager(); 851573"];
3892 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 851574"];
3893 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 851575"];
3894 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 851576"];
3895 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 851577"];
3896 [label="SourceAssembly 851578"];
3897 [label="GetBoundReferenceManager() 851579"];
3898 [label="param GetBoundReferenceManager(this) 851580"];
3899 [label="GetBoundReferenceManager(); 851581"];
3900 [label="SourceAssembly.IsDelaySigned 851582"];
3901 [label="SourceAssembly 851583"];
3902 [label="GetBoundReferenceManager() 851584"];
3903 [label="param GetBoundReferenceManager(this) 851585"];
3904 [label="GetBoundReferenceManager(); 851586"];
3905 [label="=> 0x30 851587"];
3906 [label="0x30 851588"];
3907 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 851589"];
3908 [label="PEModuleBuilder moduleBeingBuilt; 851590"];
3909 [label="GetBoundReferenceManager() 851591"];
3910 [label="GetBoundReferenceManager(); 851592"];
3911 [label="get\n            {\n                return true;\n            } 851593"];
3912 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 851594"];
3913 [label="Debug.Assert(sourceAssembly is object); 851595"];
3914 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 851596"];
3915 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 851597"];
3916 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 851598"];
3917 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 851599"];
3918 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 851600"];
3919 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 851601"];
3920 [label="PooledHashSet<int>? excludeDiagnostics = null; 851602"];
3921 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 851603"];
3922 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 851604"];
3923 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 851605"];
3924 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 851606"];
3925 [label="param GetDiagnostics(CompilationStage stage) 851607"];
3926 [label="param GetDiagnostics(bool includeEarlierStages) 851608"];
3927 [label="var diagnostics = DiagnosticBag.GetInstance(); 851609"];
3928 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 851610"];
3929 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 851611"];
3930 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 851612"];
3931 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 851613"];
3932 [label="param GetDiagnostics(CompilationStage stage) 851614"];
3933 [label="param GetDiagnostics(bool includeEarlierStages) 851615"];
3934 [label="param GetDiagnostics(DiagnosticBag diagnostics) 851616"];
3935 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 851617"];
3936 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 851618"];
3937 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 851619"];
3938 [label="this.SyntaxTrees 851620"];
3939 [label="_syntaxAndDeclarations.GetLazyState() 851621"];
3940 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 851622"];
3941 [label="this.Options 851623"];
3942 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 851624"];
3943 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 851625"];
3944 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 851626"];
3945 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 851627"];
3946 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 851628"];
3947 [label="CheckAssemblyName(builder); 851629"];
3948 [label="CheckAssemblyName(builder); 851630"];
3949 [label="Options 851631"];
3950 [label="Options 851632"];
3951 [label="get\n            {\n                return _options;\n            } 851633"];
3952 [label="return _options; 851634"];
3953 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 851635"];
3954 [label="GetBoundReferenceManager() 851636"];
3955 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 851637"];
3956 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 851638"];
3957 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 851639"];
3958 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 851640"];
3959 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 851641"];
3960 [label="GlobalImports 851642"];
3961 [label="SourceLocation? location = null; 851643"];
3962 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 851644"];
3963 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 851645"];
3964 [label="Assembly 851646"];
3965 [label="SourceAssembly 851647"];
3966 [label="GetBoundReferenceManager() 851648"];
3967 [label="param GetBoundReferenceManager(this) 851649"];
3968 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851650"];
3969 [label="return _referenceManager; 851651"];
3970 [label="GetBoundReferenceManager(); 851652"];
3971 [label="Assembly.ForceComplete(location, cancellationToken); 851653"];
3972 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 851654"];
3973 [label="_declarationDiagnosticsFrozen = true; 851655"];
3974 [label="_needsGeneratedAttributes_IsFrozen = true; 851656"];
3975 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 851657"];
3976 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 851658"];
3977 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 851659"];
3978 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 851660"];
3979 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 851661"];
3980 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 851662"];
3981 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 851663"];
3982 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 851664"];
3983 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 851665"];
3984 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 851666"];
3985 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 851667"];
3986 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 851668"];
3987 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 851669"];
3988 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 851670"];
3989 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 851671"];
3990 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 851672"];
3991 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 851673"];
3992 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 851674"];
3993 [label="excludeDiagnostics?.Free(); 851675"];
3994 [label="Debug.Assert(compilation != null); 851676"];
3995 [label="Debug.Assert(diagnostics != null); 851677"];
3996 [label="compilation.PreviousSubmission 851678"];
3997 [label="ScriptCompilationInfo 851679"];
3998 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 851680"];
3999 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 851681"];
4000 [label="MethodSymbol entryPoint = null; 851682"];
4001 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 851683"];
4002 [label="param GetEntryPoint(bool hasDeclarationErrors) 851684"];
4003 [label="param GetEntryPoint(CancellationToken cancellationToken) 851685"];
4004 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 851686"];
4005 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 851687"];
4006 [label="Debug.Assert(compilation != null); 851688"];
4007 [label="Debug.Assert(diagnostics != null); 851689"];
4008 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 851690"];
4009 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 851691"];
4010 [label="param SetGlobalErrorIfTrue(bool arg) 851692"];
4011 [label="param SetGlobalErrorIfTrue(this) 851693"];
4012 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 851694"];
4013 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 851695"];
4014 [label="GetBoundReferenceManager() 851696"];
4015 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851697"];
4016 [label="return _referenceManager; 851698"];
4017 [label="GetBoundReferenceManager(); 851699"];
4018 [label="param VisitNamedType(NamedTypeSymbol symbol) 851700"];
4019 [label="param VisitNamedType(TypeCompilationState arg) 851701"];
4020 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 851702"];
4021 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 851703"];
4022 [label="PassesFilter(_filterOpt, symbol) 851704"];
4023 [label="param PassesFilter(Predicate<Symbol> filterOpt) 851705"];
4024 [label="param PassesFilter(Symbol symbol) 851706"];
4025 [label="return (filterOpt == null) || filterOpt(symbol); 851707"];
4026 [label="return (filterOpt == null) || filterOpt(symbol); 851708"];
4027 [label="arg = null; 851709"];
4028 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 851710"];
4029 [label="if (tasks == null)\n            {\n                return;\n            } 851711"];
4030 [label="if (tasks == null)\n            {\n                return;\n            } 851712"];
4031 [label="methodCompiler.WaitForWorkers(); 851713"];
4032 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 851714"];
4033 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 851715"];
4034 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 851716"];
4035 [label="_additionalTypes 851717"];
4036 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 851718"];
4037 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 851719"];
4038 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 851720"];
4039 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 851721"];
4040 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 851722"];
4041 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 851723"];
4042 [label="param CompileSynthesizedMethods(this) 851724"];
4043 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 851725"];
4044 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 851726"];
4045 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 851727"];
4046 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 851728"];
4047 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 851729"];
4048 [label="return GetNeedsGeneratedAttributesInternal(); 851730"];
4049 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 851731"];
4050 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 851732"];
4051 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 851733"];
4052 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 851734"];
4053 [label="return; 851735"];
4054 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 851736"];
4055 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 851737"];
4056 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 851738"];
4057 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 851739"];
4058 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 851740"];
4059 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 851741"];
4060 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 851742"];
4061 [label="param CompileSynthesizedMethods(this) 851743"];
4062 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 851744"];
4063 [label="param GetPreviousAnonymousTypes(this) 851745"];
4064 [label="methodCompiler.WaitForWorkers(); 851746"];
4065 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 851747"];
4066 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 851748"];
4067 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 851749"];
4068 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 851750"];
4069 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 851751"];
4070 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851752"];
4071 [label="return _referenceManager; 851753"];
4072 [label="GetBoundReferenceManager(); 851754"];
4073 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 851755"];
4074 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 851756"];
4075 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 851757"];
4076 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 851758"];
4077 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 851759"];
4078 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 851760"];
4079 [label="param GenerateModuleInitializer(this) 851761"];
4080 [label="Debug.Assert(_declarationDiagnosticsFrozen); 851762"];
4081 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 851763"];
4082 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 851764"];
4083 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 851765"];
4084 [label="return true; 851766"];
4085 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 851767"];
4086 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 851768"];
4087 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 851769"];
4088 [label="SourceAssembly 851770"];
4089 [label="GetBoundReferenceManager() 851771"];
4090 [label="param GetBoundReferenceManager(this) 851772"];
4091 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851773"];
4092 [label="return _referenceManager; 851774"];
4093 [label="GetBoundReferenceManager(); 851775"];
4094 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 851776"];
4095 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 851777"];
4096 [label="AddedModulesResourceNames(resourceDiagnostics) 851778"];
4097 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 851779"];
4098 [label="SourceAssembly 851780"];
4099 [label="GetBoundReferenceManager() 851781"];
4100 [label="param GetBoundReferenceManager(this) 851782"];
4101 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851783"];
4102 [label="return _referenceManager; 851784"];
4103 [label="GetBoundReferenceManager(); 851785"];
4104 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 851786"];
4105 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 851787"];
4106 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 851788"];
4107 [label="param AddedModulesResourceNames(this) 851789"];
4108 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 851790"];
4109 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 851791"];
4110 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 851792"];
4111 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 851793"];
4112 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 851794"];
4113 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 851795"];
4114 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 851796"];
4115 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 851797"];
4116 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 851798"];
4117 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 851799"];
4118 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 851800"];
4119 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 851801"];
4120 [label="StreamWriter writer = null; 851802"];
4121 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 851803"];
4122 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 851804"];
4123 [label="compilation.SourceAssembly 851805"];
4124 [label="GetBoundReferenceManager() 851806"];
4125 [label="param GetBoundReferenceManager(this) 851807"];
4126 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851808"];
4127 [label="return _referenceManager; 851809"];
4128 [label="GetBoundReferenceManager(); 851810"];
4129 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 851811"];
4130 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 851812"];
4131 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 851813"];
4132 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 851814"];
4133 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 851815"];
4134 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 851816"];
4135 [label="param DocumentationCommentCompiler(TextWriter writer) 851817"];
4136 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 851818"];
4137 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 851819"];
4138 [label="param DocumentationCommentCompiler(bool processIncludes) 851820"];
4139 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 851821"];
4140 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 851822"];
4141 [label="param DocumentationCommentCompiler(this) 851823"];
4142 [label="param DocumentationCommentCompiler(this) 851824"];
4143 [label="_assemblyName 851825"];
4144 [label="_compilation 851826"];
4145 [label="_writer 851827"];
4146 [label="_filterTree 851828"];
4147 [label="_filterSpanWithinTree 851829"];
4148 [label="_processIncludes 851830"];
4149 [label="_isForSingleSymbol 851831"];
4150 [label="_diagnostics 851832"];
4151 [label="_lazyComparer 851833"];
4152 [label="_includedFileCache 851834"];
4153 [label="_indentDepth 851835"];
4154 [label="_temporaryStringBuilders 851836"];
4155 [label="_writer 851837"];
4156 [label="_filterTree 851838"];
4157 [label="_filterSpanWithinTree 851839"];
4158 [label="_processIncludes 851840"];
4159 [label="_isForSingleSymbol 851841"];
4160 [label="_diagnostics 851842"];
4161 [label="compilation.SourceAssembly 851843"];
4162 [label="GetBoundReferenceManager() 851844"];
4163 [label="param GetBoundReferenceManager(this) 851845"];
4164 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851846"];
4165 [label="return _referenceManager; 851847"];
4166 [label="GetBoundReferenceManager(); 851848"];
4167 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 851849"];
4168 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 851850"];
4169 [label="Debug.Assert(_assemblyName != null); 851851"];
4170 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 851852"];
4171 [label="WriteLine('<?xml version=\\'1.0\\'?>') 851853"];
4172 [label="param WriteLine(string message) 851854"];
4173 [label="param WriteLine(this) 851855"];
4174 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851856"];
4175 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851857"];
4176 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851858"];
4177 [label="WriteLine('<doc>'); 851859"];
4178 [label="WriteLine('<doc>') 851860"];
4179 [label="param WriteLine(string message) 851861"];
4180 [label="param WriteLine(this) 851862"];
4181 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851863"];
4182 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851864"];
4183 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851865"];
4184 [label="Indent(); 851866"];
4185 [label="WriteLine('<assembly>'); 851867"];
4186 [label="WriteLine('<assembly>') 851868"];
4187 [label="param WriteLine(string message) 851869"];
4188 [label="param WriteLine(this) 851870"];
4189 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851871"];
4190 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851872"];
4191 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851873"];
4192 [label="Indent(); 851874"];
4193 [label="WriteLine('<name>{0}</name>', _assemblyName); 851875"];
4194 [label="WriteLine('<name>{0}</name>', _assemblyName) 851876"];
4195 [label="WriteLine('<name>{0}</name>', _assemblyName) 851877"];
4196 [label="param WriteLine(string format) 851878"];
4197 [label="param WriteLine(params object[] args) 851879"];
4198 [label="param WriteLine(this) 851880"];
4199 [label="WriteLine(string.Format(format, args)); 851881"];
4200 [label="WriteLine(string.Format(format, args)); 851882"];
4201 [label="WriteLine(string.Format(format, args)); 851883"];
4202 [label="WriteLine(string.Format(format, args)) 851884"];
4203 [label="param WriteLine(string message) 851885"];
4204 [label="param WriteLine(this) 851886"];
4205 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851887"];
4206 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851888"];
4207 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851889"];
4208 [label="WriteLine(string.Format(format, args)); 851890"];
4209 [label="Debug.Assert(_indentDepth >= 0); 851891"];
4210 [label="Unindent(); 851892"];
4211 [label="WriteLine('</assembly>'); 851893"];
4212 [label="WriteLine('</assembly>') 851894"];
4213 [label="param WriteLine(string message) 851895"];
4214 [label="param WriteLine(this) 851896"];
4215 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851897"];
4216 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851898"];
4217 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851899"];
4218 [label="WriteLine('<members>'); 851900"];
4219 [label="WriteLine('<members>') 851901"];
4220 [label="param WriteLine(string message) 851902"];
4221 [label="param WriteLine(this) 851903"];
4222 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851904"];
4223 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851905"];
4224 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851906"];
4225 [label="Indent(); 851907"];
4226 [label="Debug.Assert(!_isForSingleSymbol); 851908"];
4227 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 851909"];
4228 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 851910"];
4229 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 851911"];
4230 [label="DocumentationMode maxDocumentationMode; 851912"];
4231 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 851913"];
4232 [label="docCommentNodes 851914"];
4233 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 851915"];
4234 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 851916"];
4235 [label="maxDocumentationMode = DocumentationMode.None; 851917"];
4236 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 851918"];
4237 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 851919"];
4238 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 851920"];
4239 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 851921"];
4240 [label="currDocumentationMode > maxDocumentationMode 851922"];
4241 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 851923"];
4242 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 851924"];
4243 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 851925"];
4244 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 851926"];
4245 [label="return true; 851927"];
4246 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 851928"];
4247 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 851929"];
4248 [label="return; 851930"];
4249 [label="return; 851931"];
4250 [label="Unindent(); 851932"];
4251 [label="WriteLine('</members>'); 851933"];
4252 [label="WriteLine('</members>') 851934"];
4253 [label="param WriteLine(string message) 851935"];
4254 [label="param WriteLine(this) 851936"];
4255 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851937"];
4256 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851938"];
4257 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851939"];
4258 [label="Unindent(); 851940"];
4259 [label="WriteLine('</doc>'); 851941"];
4260 [label="WriteLine('</doc>') 851942"];
4261 [label="param WriteLine(string message) 851943"];
4262 [label="param WriteLine(this) 851944"];
4263 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851945"];
4264 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851946"];
4265 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 851947"];
4266 [label="Debug.Assert(compiler._indentDepth == 0); 851948"];
4267 [label="Debug.Assert(compiler._indentDepth == 0); 851949"];
4268 [label="writer?.Flush(); 851950"];
4269 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 851951"];
4270 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 851952"];
4271 [label="compilation.SyntaxTrees 851953"];
4272 [label="_syntaxAndDeclarations.GetLazyState() 851954"];
4273 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 851955"];
4274 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 851956"];
4275 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 851957"];
4276 [label="param ReportUnprocessed(CancellationToken cancellationToken) 851958"];
4277 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 851959"];
4278 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 851960"];
4279 [label="param ReportUnusedImports(SyntaxTree? filterTree) 851961"];
4280 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 851962"];
4281 [label="param ReportUnusedImports(CancellationToken cancellationToken) 851963"];
4282 [label="param ReportUnusedImports(this) 851964"];
4283 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 851965"];
4284 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 851966"];
4285 [label="CompleteTrees(filterTree); 851967"];
4286 [label="CompleteTrees(filterTree) 851968"];
4287 [label="param CompleteTrees(SyntaxTree? filterTree) 851969"];
4288 [label="param CompleteTrees(this) 851970"];
4289 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 851971"];
4290 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 851972"];
4291 [label="CompleteTrees(filterTree); 851973"];
4292 [label="SourceAssembly 851974"];
4293 [label="GetBoundReferenceManager() 851975"];
4294 [label="param GetBoundReferenceManager(this) 851976"];
4295 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851977"];
4296 [label="return _referenceManager; 851978"];
4297 [label="GetBoundReferenceManager(); 851979"];
4298 [label="SourceAssembly 851980"];
4299 [label="GetBoundReferenceManager() 851981"];
4300 [label="param GetBoundReferenceManager(this) 851982"];
4301 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 851983"];
4302 [label="return _referenceManager; 851984"];
4303 [label="GetBoundReferenceManager(); 851985"];
4304 [label="SourceAssembly.IsDelaySigned 851986"];
4305 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 851987"];
4306 [label="CorLibrary 851988"];
4307 [label="return Translate(corLibrary, context.Diagnostics); 851989"];
4308 [label="param Translate(DiagnosticBag diagnostics) 851990"];
4309 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 851991"];
4310 [label="_targetAssembly 851992"];
4311 [label="Debug.Assert((object)assemblySymbol != null); 851993"];
4312 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 851994"];
4313 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 851995"];
4314 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 851996"];
4315 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 851997"];
4316 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 851998"];
4317 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 851999"];
4318 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 852000"];
4319 [label="param ValidateReferencedAssembly(this) 852001"];
4320 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 852002"];
4321 [label="asmRef.Identity 852003"];
4322 [label="=> _targetAssembly.Identity 852004"];
4323 [label="AssemblyIdentity refIdentity = asmRef.Identity; 852005"];
4324 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 852006"];
4325 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 852007"];
4326 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 852008"];
4327 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 852009"];
4328 [label="var refMachine = assembly.Machine; 852010"];
4329 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 852011"];
4330 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 852012"];
4331 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 852013"];
4332 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 852014"];
4333 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 852015"];
4334 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 852016"];
4335 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 852017"];
4336 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 852018"];
4337 [label="param GetAssemblyReferencesFromAddedModules(this) 852019"];
4338 [label="var modules = sourceAssSymbol.Modules; 852020"];
4339 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 852021"];
4340 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 852022"];
4341 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 852023"];
4342 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 852024"];
4343 [label="param GetAnonymousTypeDefinitions(EmitContext context) 852025"];
4344 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 852026"];
4345 [label="Compilation.AnonymousTypeManager 852027"];
4346 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 852028"];
4347 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 852029"];
4348 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 852030"];
4349 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 852031"];
4350 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 852032"];
4351 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 852033"];
4352 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 852034"];
4353 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 852035"];
4354 [label="GetEmbeddedTypes(context.Diagnostics) 852036"];
4355 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 852037"];
4356 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 852038"];
4357 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 852039"];
4358 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 852040"];
4359 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 852041"];
4360 [label="GetNeedsGeneratedAttributes() 852042"];
4361 [label="_needsGeneratedAttributes_IsFrozen = true; 852043"];
4362 [label="GetNeedsGeneratedAttributesInternal() 852044"];
4363 [label="return GetNeedsGeneratedAttributesInternal(); 852045"];
4364 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 852046"];
4365 [label="ShouldEmitNullablePublicOnlyAttribute() 852047"];
4366 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 852048"];
4367 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 852049"];
4368 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 852050"];
4369 [label="return; 852051"];
4370 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 852052"];
4371 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 852053"];
4372 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 852054"];
4373 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 852055"];
4374 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 852056"];
4375 [label="builder.AddIfNotNull(_lazyNullableAttribute); 852057"];
4376 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 852058"];
4377 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 852059"];
4378 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 852060"];
4379 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 852061"];
4380 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 852062"];
4381 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 852063"];
4382 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 852064"];
4383 [label="Debug.Assert(symbol.IsDefinition); 852065"];
4384 [label="SourceModule 852066"];
4385 [label="Assembly 852067"];
4386 [label="SourceAssembly 852068"];
4387 [label="GetBoundReferenceManager() 852069"];
4388 [label="param GetBoundReferenceManager(this) 852070"];
4389 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852071"];
4390 [label="return _referenceManager; 852072"];
4391 [label="GetBoundReferenceManager(); 852073"];
4392 [label="return Assembly.Modules[0]; 852074"];
4393 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 852075"];
4394 [label="EmitNullablePublicOnly 852076"];
4395 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 852077"];
4396 [label="Compilation.SourceModule 852078"];
4397 [label="Assembly 852079"];
4398 [label="SourceAssembly 852080"];
4399 [label="GetBoundReferenceManager() 852081"];
4400 [label="param GetBoundReferenceManager(this) 852082"];
4401 [label="GetBoundReferenceManager(); 852083"];
4402 [label="return Assembly.Modules[0]; 852084"];
4403 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 852085"];
4404 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 852086"];
4405 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 852087"];
4406 [label="type.AddNullableTransforms(flagsBuilder); 852088"];
4407 [label="SynthesizedAttributeData attribute; 852089"];
4408 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 852090"];
4409 [label="param GetSynthesizedNestedTypes(this) 852091"];
4410 [label="return null; 852092"];
4411 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 852093"];
4412 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 852094"];
4413 [label="NamedTypeSymbol result; 852095"];
4414 [label="GetBoundReferenceManager() 852096"];
4415 [label="GetBoundReferenceManager(); 852097"];
4416 [label="Debug.Assert(result.SpecialType == specialType); 852098"];
4417 [label="param Translate(SyntaxNode syntaxNodeOpt) 852099"];
4418 [label="param Translate(DiagnosticBag diagnostics) 852100"];
4419 [label="param Translate(bool needDeclaration = false) 852101"];
4420 [label="param Translate(this) 852102"];
4421 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 852103"];
4422 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 852104"];
4423 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 852105"];
4424 [label="param Translate(SyntaxNode syntaxNodeOpt) 852106"];
4425 [label="param Translate(DiagnosticBag diagnostics) 852107"];
4426 [label="param Translate(bool needDeclaration) 852108"];
4427 [label="param Translate(this) 852109"];
4428 [label="object reference; 852110"];
4429 [label="Cci.IMethodReference methodRef; 852111"];
4430 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 852112"];
4431 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 852113"];
4432 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 852114"];
4433 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 852115"];
4434 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 852116"];
4435 [label="bool typeIsGeneric = IsGenericType(container); 852117"];
4436 [label="IsGenericType(container) 852118"];
4437 [label="param IsGenericType(NamedTypeSymbol toCheck) 852119"];
4438 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852120"];
4439 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852121"];
4440 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852122"];
4441 [label="toCheck = toCheck.ContainingType; 852123"];
4442 [label="return false; 852124"];
4443 [label="bool typeIsGeneric = IsGenericType(container); 852125"];
4444 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852126"];
4445 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852127"];
4446 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852128"];
4447 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 852129"];
4448 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 852130"];
4449 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 852131"];
4450 [label="param Translate(SyntaxNode syntaxNodeOpt) 852132"];
4451 [label="param Translate(DiagnosticBag diagnostics) 852133"];
4452 [label="Debug.Assert(diagnostics != null); 852134"];
4453 [label="Debug.Assert(diagnostics != null); 852135"];
4454 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 852136"];
4455 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 852137"];
4456 [label="param Translate(SyntaxNode syntaxNodeOpt) 852138"];
4457 [label="param Translate(DiagnosticBag diagnostics) 852139"];
4458 [label="param Translate(bool fromImplements = false) 852140"];
4459 [label="param Translate(bool needDeclaration = false) 852141"];
4460 [label="Debug.Assert(diagnostics != null); 852142"];
4461 [label="Debug.Assert(diagnostics != null); 852143"];
4462 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852144"];
4463 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852145"];
4464 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 852146"];
4465 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852147"];
4466 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852148"];
4467 [label="object reference; 852149"];
4468 [label="Cci.INamedTypeReference typeRef; 852150"];
4469 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 852151"];
4470 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852152"];
4471 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852153"];
4472 [label="IsGenericType(container) 852154"];
4473 [label="param IsGenericType(NamedTypeSymbol toCheck) 852155"];
4474 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852156"];
4475 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852157"];
4476 [label="return false; 852158"];
4477 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852159"];
4478 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852160"];
4479 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 852161"];
4480 [label="param Translate(SyntaxNode syntaxNodeOpt) 852162"];
4481 [label="param Translate(DiagnosticBag diagnostics) 852163"];
4482 [label="param Translate(bool fromImplements = false) 852164"];
4483 [label="param Translate(bool needDeclaration = false) 852165"];
4484 [label="Debug.Assert(diagnostics != null); 852166"];
4485 [label="Debug.Assert(diagnostics != null); 852167"];
4486 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852168"];
4487 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852169"];
4488 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 852170"];
4489 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852171"];
4490 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852172"];
4491 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 852173"];
4492 [label="param Translate(DiagnosticBag diagnostics) 852174"];
4493 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 852175"];
4494 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 852176"];
4495 [label="if ((object)module == null)\n            {\n                return null;\n            } 852177"];
4496 [label="if ((object)module == null)\n            {\n                return null;\n            } 852178"];
4497 [label="Cci.IModuleReference moduleRef; 852179"];
4498 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 852180"];
4499 [label="param Translate(this) 852181"];
4500 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 852182"];
4501 [label="MustBeWrapped(@params.First()) 852183"];
4502 [label="param MustBeWrapped(ParameterSymbol param) 852184"];
4503 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 852185"];
4504 [label="var container = param.ContainingSymbol; 852186"];
4505 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 852187"];
4506 [label="ContainerIsGeneric(container) 852188"];
4507 [label="param ContainerIsGeneric(Symbol container) 852189"];
4508 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852190"];
4509 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852191"];
4510 [label="IsGenericType(container.ContainingType) 852192"];
4511 [label="param IsGenericType(NamedTypeSymbol toCheck) 852193"];
4512 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852194"];
4513 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852195"];
4514 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852196"];
4515 [label="toCheck = toCheck.ContainingType; 852197"];
4516 [label="return false; 852198"];
4517 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852199"];
4518 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852200"];
4519 [label="return false; 852201"];
4520 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 852202"];
4521 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 852203"];
4522 [label="param MustBeWrapped(ParameterSymbol param) 852204"];
4523 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 852205"];
4524 [label="var container = param.ContainingSymbol; 852206"];
4525 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 852207"];
4526 [label="ContainerIsGeneric(container) 852208"];
4527 [label="param ContainerIsGeneric(Symbol container) 852209"];
4528 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852210"];
4529 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852211"];
4530 [label="IsGenericType(container.ContainingType) 852212"];
4531 [label="param IsGenericType(NamedTypeSymbol toCheck) 852213"];
4532 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852214"];
4533 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852215"];
4534 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852216"];
4535 [label="toCheck = toCheck.ContainingType; 852217"];
4536 [label="return false; 852218"];
4537 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852219"];
4538 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852220"];
4539 [label="return false; 852221"];
4540 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 852222"];
4541 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 852223"];
4542 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 852224"];
4543 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 852225"];
4544 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 852226"];
4545 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 852227"];
4546 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 852228"];
4547 [label="bool typeIsGeneric = IsGenericType(container); 852229"];
4548 [label="IsGenericType(container) 852230"];
4549 [label="param IsGenericType(NamedTypeSymbol toCheck) 852231"];
4550 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852232"];
4551 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852233"];
4552 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852234"];
4553 [label="toCheck = toCheck.ContainingType; 852235"];
4554 [label="return false; 852236"];
4555 [label="bool typeIsGeneric = IsGenericType(container); 852237"];
4556 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852238"];
4557 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852239"];
4558 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852240"];
4559 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 852241"];
4560 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852242"];
4561 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852243"];
4562 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 852244"];
4563 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852245"];
4564 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852246"];
4565 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 852247"];
4566 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 852248"];
4567 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 852249"];
4568 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 852250"];
4569 [label="param Translate(SyntaxNode syntaxNodeOpt) 852251"];
4570 [label="param Translate(DiagnosticBag diagnostics) 852252"];
4571 [label="param Translate(bool fromImplements = false) 852253"];
4572 [label="param Translate(bool needDeclaration = false) 852254"];
4573 [label="Debug.Assert(diagnostics != null); 852255"];
4574 [label="Debug.Assert(diagnostics != null); 852256"];
4575 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852257"];
4576 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852258"];
4577 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 852259"];
4578 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852260"];
4579 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852261"];
4580 [label="object reference; 852262"];
4581 [label="Cci.INamedTypeReference typeRef; 852263"];
4582 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 852264"];
4583 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852265"];
4584 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852266"];
4585 [label="IsGenericType(container) 852267"];
4586 [label="param IsGenericType(NamedTypeSymbol toCheck) 852268"];
4587 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852269"];
4588 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852270"];
4589 [label="return false; 852271"];
4590 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852272"];
4591 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852273"];
4592 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 852274"];
4593 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 852275"];
4594 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 852276"];
4595 [label="bool typeIsGeneric = IsGenericType(container); 852277"];
4596 [label="param IsGenericType(NamedTypeSymbol toCheck) 852278"];
4597 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852279"];
4598 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852280"];
4599 [label="toCheck = toCheck.ContainingType; 852281"];
4600 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852282"];
4601 [label="toCheck = toCheck.ContainingType; 852283"];
4602 [label="param MustBeWrapped(ParameterSymbol param) 852284"];
4603 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 852285"];
4604 [label="var container = param.ContainingSymbol; 852286"];
4605 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 852287"];
4606 [label="ContainerIsGeneric(container) 852288"];
4607 [label="param ContainerIsGeneric(Symbol container) 852289"];
4608 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852290"];
4609 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852291"];
4610 [label="IsGenericType(container.ContainingType) 852292"];
4611 [label="param IsGenericType(NamedTypeSymbol toCheck) 852293"];
4612 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852294"];
4613 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852295"];
4614 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852296"];
4615 [label="toCheck = toCheck.ContainingType; 852297"];
4616 [label="return false; 852298"];
4617 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852299"];
4618 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852300"];
4619 [label="param MustBeWrapped(ParameterSymbol param) 852301"];
4620 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 852302"];
4621 [label="var container = param.ContainingSymbol; 852303"];
4622 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 852304"];
4623 [label="ContainerIsGeneric(container) 852305"];
4624 [label="param ContainerIsGeneric(Symbol container) 852306"];
4625 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852307"];
4626 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852308"];
4627 [label="IsGenericType(container.ContainingType) 852309"];
4628 [label="param IsGenericType(NamedTypeSymbol toCheck) 852310"];
4629 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852311"];
4630 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852312"];
4631 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852313"];
4632 [label="toCheck = toCheck.ContainingType; 852314"];
4633 [label="return false; 852315"];
4634 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852316"];
4635 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852317"];
4636 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 852318"];
4637 [label="return Translate(corLibrary, context.Diagnostics); 852319"];
4638 [label="param Translate(DiagnosticBag diagnostics) 852320"];
4639 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 852321"];
4640 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 852322"];
4641 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 852323"];
4642 [label="return SourceModule.GetCustomAttributesToEmit(this); 852324"];
4643 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 852325"];
4644 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 852326"];
4645 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 852327"];
4646 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 852328"];
4647 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 852329"];
4648 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 852330"];
4649 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 852331"];
4650 [label="return GetNeedsGeneratedAttributesInternal(); 852332"];
4651 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 852333"];
4652 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 852334"];
4653 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 852335"];
4654 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 852336"];
4655 [label="return; 852337"];
4656 [label="Debug.Assert(symbol.IsDefinition); 852338"];
4657 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852339"];
4658 [label="return _referenceManager; 852340"];
4659 [label="GetBoundReferenceManager(); 852341"];
4660 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 852342"];
4661 [label="param GetBoundReferenceManager(this) 852343"];
4662 [label="GetBoundReferenceManager(); 852344"];
4663 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 852345"];
4664 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 852346"];
4665 [label="param SynthesizeNullableAttributeIfNecessary(this) 852347"];
4666 [label="object reference; 852348"];
4667 [label="Cci.INamedTypeReference typeRef; 852349"];
4668 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 852350"];
4669 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852351"];
4670 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852352"];
4671 [label="IsGenericType(container) 852353"];
4672 [label="param IsGenericType(NamedTypeSymbol toCheck) 852354"];
4673 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852355"];
4674 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852356"];
4675 [label="return false; 852357"];
4676 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852358"];
4677 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852359"];
4678 [label="param GetExportedTypes(DiagnosticBag diagnostics) 852360"];
4679 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 852361"];
4680 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 852362"];
4681 [label="var modules = sourceAssembly.Modules; 852363"];
4682 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 852364"];
4683 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 852365"];
4684 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 852366"];
4685 [label="sourceAssembly.DeclaringCompilation.Options 852367"];
4686 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 852368"];
4687 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 852369"];
4688 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 852370"];
4689 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 852371"];
4690 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 852372"];
4691 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 852373"];
4692 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 852374"];
4693 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 852375"];
4694 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 852376"];
4695 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 852377"];
4696 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 852378"];
4697 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 852379"];
4698 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 852380"];
4699 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 852381"];
4700 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 852382"];
4701 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 852383"];
4702 [label="return seenTopLevelForwardedTypes; 852384"];
4703 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 852385"];
4704 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 852386"];
4705 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 852387"];
4706 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 852388"];
4707 [label="param AddEmbeddedResourcesFromAddedModules(this) 852389"];
4708 [label="var modules = _sourceAssembly.Modules; 852390"];
4709 [label="int count = modules.Length; 852391"];
4710 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 852392"];
4711 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 852393"];
4712 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 852394"];
4713 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 852395"];
4714 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852396"];
4715 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852397"];
4716 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 852398"];
4717 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852399"];
4718 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852400"];
4719 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 852401"];
4720 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 852402"];
4721 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 852403"];
4722 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 852404"];
4723 [label="param Translate(SyntaxNode syntaxNodeOpt) 852405"];
4724 [label="param Translate(DiagnosticBag diagnostics) 852406"];
4725 [label="param Translate(bool fromImplements = false) 852407"];
4726 [label="param Translate(bool needDeclaration = false) 852408"];
4727 [label="Debug.Assert(diagnostics != null); 852409"];
4728 [label="Debug.Assert(diagnostics != null); 852410"];
4729 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852411"];
4730 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852412"];
4731 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 852413"];
4732 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852414"];
4733 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852415"];
4734 [label="object reference; 852416"];
4735 [label="Cci.INamedTypeReference typeRef; 852417"];
4736 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 852418"];
4737 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852419"];
4738 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852420"];
4739 [label="IsGenericType(container) 852421"];
4740 [label="param IsGenericType(NamedTypeSymbol toCheck) 852422"];
4741 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852423"];
4742 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852424"];
4743 [label="return false; 852425"];
4744 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852426"];
4745 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852427"];
4746 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 852428"];
4747 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 852429"];
4748 [label="object reference; 852430"];
4749 [label="Cci.INamedTypeReference typeRef; 852431"];
4750 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 852432"];
4751 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852433"];
4752 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852434"];
4753 [label="IsGenericType(container) 852435"];
4754 [label="param IsGenericType(NamedTypeSymbol toCheck) 852436"];
4755 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852437"];
4756 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852438"];
4757 [label="return false; 852439"];
4758 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852440"];
4759 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852441"];
4760 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 852442"];
4761 [label="GetBoundReferenceManager() 852443"];
4762 [label="GetBoundReferenceManager(); 852444"];
4763 [label="Debug.Assert(result.SpecialType == specialType); 852445"];
4764 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 852446"];
4765 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 852447"];
4766 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 852448"];
4767 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 852449"];
4768 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 852450"];
4769 [label="bool typeIsGeneric = IsGenericType(container); 852451"];
4770 [label="IsGenericType(container) 852452"];
4771 [label="param IsGenericType(NamedTypeSymbol toCheck) 852453"];
4772 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852454"];
4773 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852455"];
4774 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852456"];
4775 [label="toCheck = toCheck.ContainingType; 852457"];
4776 [label="return false; 852458"];
4777 [label="bool typeIsGeneric = IsGenericType(container); 852459"];
4778 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852460"];
4779 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852461"];
4780 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852462"];
4781 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 852463"];
4782 [label="param MustBeWrapped(ParameterSymbol param) 852464"];
4783 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 852465"];
4784 [label="var container = param.ContainingSymbol; 852466"];
4785 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 852467"];
4786 [label="ContainerIsGeneric(container) 852468"];
4787 [label="param ContainerIsGeneric(Symbol container) 852469"];
4788 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852470"];
4789 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852471"];
4790 [label="IsGenericType(container.ContainingType) 852472"];
4791 [label="param IsGenericType(NamedTypeSymbol toCheck) 852473"];
4792 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852474"];
4793 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852475"];
4794 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852476"];
4795 [label="toCheck = toCheck.ContainingType; 852477"];
4796 [label="return false; 852478"];
4797 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852479"];
4798 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852480"];
4799 [label="param MustBeWrapped(ParameterSymbol param) 852481"];
4800 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 852482"];
4801 [label="var container = param.ContainingSymbol; 852483"];
4802 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 852484"];
4803 [label="ContainerIsGeneric(container) 852485"];
4804 [label="param ContainerIsGeneric(Symbol container) 852486"];
4805 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852487"];
4806 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852488"];
4807 [label="IsGenericType(container.ContainingType) 852489"];
4808 [label="param IsGenericType(NamedTypeSymbol toCheck) 852490"];
4809 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852491"];
4810 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852492"];
4811 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852493"];
4812 [label="toCheck = toCheck.ContainingType; 852494"];
4813 [label="return false; 852495"];
4814 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852496"];
4815 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852497"];
4816 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852498"];
4817 [label="toCheck = toCheck.ContainingType; 852499"];
4818 [label="Debug.Assert(symbol.IsDefinition); 852500"];
4819 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852501"];
4820 [label="return _referenceManager; 852502"];
4821 [label="GetBoundReferenceManager(); 852503"];
4822 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 852504"];
4823 [label="param GetBoundReferenceManager(this) 852505"];
4824 [label="GetBoundReferenceManager(); 852506"];
4825 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 852507"];
4826 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 852508"];
4827 [label="param SynthesizeNullableAttributeIfNecessary(this) 852509"];
4828 [label="return Translate(corLibrary, context.Diagnostics); 852510"];
4829 [label="param Translate(DiagnosticBag diagnostics) 852511"];
4830 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 852512"];
4831 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 852513"];
4832 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 852514"];
4833 [label="return getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly); 852515"];
4834 [label="return getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly); 852516"];
4835 [label="getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly) 852517"];
4836 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 852518"];
4837 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 852519"];
4838 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 852520"];
4839 [label="var modules = sourceAssSymbol.Modules; 852521"];
4840 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 852522"];
4841 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 852523"];
4842 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 852524"];
4843 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 852525"];
4844 [label="return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>(); 852526"];
4845 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 852527"];
4846 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 852528"];
4847 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 852529"];
4848 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 852530"];
4849 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 852531"];
4850 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 852532"];
4851 [label="return GetNeedsGeneratedAttributesInternal(); 852533"];
4852 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 852534"];
4853 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 852535"];
4854 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 852536"];
4855 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 852537"];
4856 [label="return; 852538"];
4857 [label="SourceAssembly 852539"];
4858 [label="GetBoundReferenceManager() 852540"];
4859 [label="param GetBoundReferenceManager(this) 852541"];
4860 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852542"];
4861 [label="return _referenceManager; 852543"];
4862 [label="GetBoundReferenceManager(); 852544"];
4863 [label="GetBoundReferenceManager() 852545"];
4864 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 852546"];
4865 [label="Debug.Assert(symbol.IsDefinition); 852547"];
4866 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852548"];
4867 [label="return _referenceManager; 852549"];
4868 [label="GetBoundReferenceManager(); 852550"];
4869 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 852551"];
4870 [label="param GetBoundReferenceManager(this) 852552"];
4871 [label="GetBoundReferenceManager(); 852553"];
4872 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 852554"];
4873 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 852555"];
4874 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 852556"];
4875 [label="GetBoundReferenceManager() 852557"];
4876 [label="GetBoundReferenceManager(); 852558"];
4877 [label="Debug.Assert(result.SpecialType == specialType); 852559"];
4878 [label="SourceAssembly 852560"];
4879 [label="GetBoundReferenceManager() 852561"];
4880 [label="param GetBoundReferenceManager(this) 852562"];
4881 [label="GetBoundReferenceManager(); 852563"];
4882 [label="GetBoundReferenceManager() 852564"];
4883 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 852565"];
4884 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 852566"];
4885 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 852567"];
4886 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 852568"];
4887 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 852569"];
4888 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 852570"];
4889 [label="bool typeIsGeneric = IsGenericType(container); 852571"];
4890 [label="IsGenericType(container) 852572"];
4891 [label="param IsGenericType(NamedTypeSymbol toCheck) 852573"];
4892 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852574"];
4893 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852575"];
4894 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852576"];
4895 [label="toCheck = toCheck.ContainingType; 852577"];
4896 [label="return false; 852578"];
4897 [label="bool typeIsGeneric = IsGenericType(container); 852579"];
4898 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852580"];
4899 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852581"];
4900 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 852582"];
4901 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 852583"];
4902 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 852584"];
4903 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 852585"];
4904 [label="param Translate(SyntaxNode syntaxNodeOpt) 852586"];
4905 [label="param Translate(DiagnosticBag diagnostics) 852587"];
4906 [label="param Translate(bool fromImplements = false) 852588"];
4907 [label="param Translate(bool needDeclaration = false) 852589"];
4908 [label="Debug.Assert(diagnostics != null); 852590"];
4909 [label="Debug.Assert(diagnostics != null); 852591"];
4910 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852592"];
4911 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852593"];
4912 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 852594"];
4913 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852595"];
4914 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852596"];
4915 [label="object reference; 852597"];
4916 [label="Cci.INamedTypeReference typeRef; 852598"];
4917 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 852599"];
4918 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852600"];
4919 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852601"];
4920 [label="IsGenericType(container) 852602"];
4921 [label="param IsGenericType(NamedTypeSymbol toCheck) 852603"];
4922 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852604"];
4923 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852605"];
4924 [label="return false; 852606"];
4925 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852607"];
4926 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852608"];
4927 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 852609"];
4928 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852610"];
4929 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 852611"];
4930 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 852612"];
4931 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852613"];
4932 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 852614"];
4933 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 852615"];
4934 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 852616"];
4935 [label="param MustBeWrapped(ParameterSymbol param) 852617"];
4936 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 852618"];
4937 [label="var container = param.ContainingSymbol; 852619"];
4938 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 852620"];
4939 [label="ContainerIsGeneric(container) 852621"];
4940 [label="param ContainerIsGeneric(Symbol container) 852622"];
4941 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852623"];
4942 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852624"];
4943 [label="IsGenericType(container.ContainingType) 852625"];
4944 [label="param IsGenericType(NamedTypeSymbol toCheck) 852626"];
4945 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852627"];
4946 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852628"];
4947 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852629"];
4948 [label="toCheck = toCheck.ContainingType; 852630"];
4949 [label="return false; 852631"];
4950 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852632"];
4951 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852633"];
4952 [label="param MustBeWrapped(ParameterSymbol param) 852634"];
4953 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 852635"];
4954 [label="var container = param.ContainingSymbol; 852636"];
4955 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 852637"];
4956 [label="ContainerIsGeneric(container) 852638"];
4957 [label="param ContainerIsGeneric(Symbol container) 852639"];
4958 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852640"];
4959 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852641"];
4960 [label="IsGenericType(container.ContainingType) 852642"];
4961 [label="param IsGenericType(NamedTypeSymbol toCheck) 852643"];
4962 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852644"];
4963 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852645"];
4964 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852646"];
4965 [label="toCheck = toCheck.ContainingType; 852647"];
4966 [label="return false; 852648"];
4967 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852649"];
4968 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 852650"];
4969 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 852651"];
4970 [label="toCheck = toCheck.ContainingType; 852652"];
4971 [label="return Translate(corLibrary, context.Diagnostics); 852653"];
4972 [label="param Translate(DiagnosticBag diagnostics) 852654"];
4973 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 852655"];
4974 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 852656"];
4975 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 852657"];
4976 [label="param SynthesizeNullableAttributeIfNecessary(this) 852658"];
4977 [label="object reference; 852659"];
4978 [label="Cci.INamedTypeReference typeRef; 852660"];
4979 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 852661"];
4980 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852662"];
4981 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852663"];
4982 [label="IsGenericType(container) 852664"];
4983 [label="param IsGenericType(NamedTypeSymbol toCheck) 852665"];
4984 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852666"];
4985 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 852667"];
4986 [label="return false; 852668"];
4987 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852669"];
4988 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 852670"];
4989 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 852671"];
4990 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852672"];
4991 [label="return _referenceManager; 852673"];
4992 [label="GetBoundReferenceManager(); 852674"];
4993 [label="return (output.ToImmutable(), metadataOutput.ToImmutable()); 852675"];
4994 [label="return (output.ToImmutable(), metadataOutput.ToImmutable()); 852676"];
4995 [label="return (output.ToImmutable(), metadataOutput.ToImmutable()); 852677"];
4996 [label="return (output.ToImmutable(), metadataOutput.ToImmutable()); 852678"];
4997 [label="output.ToImmutable() 852679"];
4998 [label="metadataOutput.ToImmutable() 852680"];
4999 [label="var (image, refImage) = EmitRefOut(comp); 852681"];
5000 [label="var refOnlyImage = EmitRefOnly(comp); 852682"];
5001 [label="EmitRefOnly(comp) 852683"];
5002 [label="param EmitRefOnly(CSharpCompilation comp) 852684"];
5003 [label="using (var output = new MemoryStream())\n            {\n                var options = EmitOptions.Default.WithEmitMetadataOnly(true).WithIncludePrivateMembers(false);\n                comp.VerifyEmitDiagnostics();\n                var result = comp.Emit(output,\n                    options: options);\n                return output.ToImmutable();\n            } 852685"];
5004 [label="var options = EmitOptions.Default.WithEmitMetadataOnly(true).WithIncludePrivateMembers(false); 852686"];
5005 [label="var options = EmitOptions.Default.WithEmitMetadataOnly(true).WithIncludePrivateMembers(false); 852687"];
5006 [label="comp.VerifyEmitDiagnostics(); 852688"];
5007 [label="comp.VerifyEmitDiagnostics(); 852689"];
5008 [label="comp.VerifyEmitDiagnostics() 852690"];
5009 [label="param VerifyEmitDiagnostics(this TCompilation c) 852691"];
5010 [label="param VerifyEmitDiagnostics(params DiagnosticDescription[] expected) 852692"];
5011 [label="return VerifyEmitDiagnostics(c, EmitOptions.Default, expected); 852693"];
5012 [label="return VerifyEmitDiagnostics(c, EmitOptions.Default, expected); 852694"];
5013 [label="return VerifyEmitDiagnostics(c, EmitOptions.Default, expected); 852695"];
5014 [label="VerifyEmitDiagnostics(c, EmitOptions.Default, expected) 852696"];
5015 [label="param VerifyEmitDiagnostics(this TCompilation c) 852697"];
5016 [label="param VerifyEmitDiagnostics(EmitOptions options) 852698"];
5017 [label="param VerifyEmitDiagnostics(params DiagnosticDescription[] expected) 852699"];
5018 [label="c.GetEmitDiagnostics(options: options).Verify(expected); 852700"];
5019 [label="c.GetEmitDiagnostics(options: options).Verify(expected); 852701"];
5020 [label="c.GetEmitDiagnostics(options: options).Verify(expected); 852702"];
5021 [label="c.GetEmitDiagnostics(options: options) 852703"];
5022 [label="param GetEmitDiagnostics(this TCompilation c) 852704"];
5023 [label="param GetEmitDiagnostics(EmitOptions options = null) 852705"];
5024 [label="param GetEmitDiagnostics(IEnumerable<ResourceDescription> manifestResources = null) 852706"];
5025 [label="MonoHelpers.IsRunningOnMono() 852707"];
5026 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 852708"];
5027 [label="var pdbStream = MonoHelpers.IsRunningOnMono() ? null : new MemoryStream(); 852709"];
5028 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 852710"];
5029 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 852711"];
5030 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 852712"];
5031 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 852713"];
5032 [label="return c.Emit(new MemoryStream(), pdbStream: pdbStream, options: options, manifestResources: manifestResources).Diagnostics; 852714"];
5033 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 852715"];
5034 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 852716"];
5035 [label="param CreateModuleBuilder(CompilationTestData? testData) 852717"];
5036 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 852718"];
5037 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 852719"];
5038 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 852720"];
5039 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 852721"];
5040 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 852722"];
5041 [label="GetRuntimeMetadataVersion(emitOptions) 852723"];
5042 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 852724"];
5043 [label="Assembly 852725"];
5044 [label="SourceAssembly 852726"];
5045 [label="GetBoundReferenceManager() 852727"];
5046 [label="param GetBoundReferenceManager(this) 852728"];
5047 [label="GetBoundReferenceManager(); 852729"];
5048 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 852730"];
5049 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 852731"];
5050 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 852732"];
5051 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 852733"];
5052 [label="SourceAssembly 852734"];
5053 [label="GetBoundReferenceManager() 852735"];
5054 [label="param GetBoundReferenceManager(this) 852736"];
5055 [label="GetBoundReferenceManager(); 852737"];
5056 [label="SourceAssembly.IsDelaySigned 852738"];
5057 [label="SourceAssembly 852739"];
5058 [label="GetBoundReferenceManager() 852740"];
5059 [label="param GetBoundReferenceManager(this) 852741"];
5060 [label="GetBoundReferenceManager(); 852742"];
5061 [label="=> 0x30 852743"];
5062 [label="0x30 852744"];
5063 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 852745"];
5064 [label="PEModuleBuilder moduleBeingBuilt; 852746"];
5065 [label="GetBoundReferenceManager() 852747"];
5066 [label="GetBoundReferenceManager(); 852748"];
5067 [label="get\n            {\n                return true;\n            } 852749"];
5068 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 852750"];
5069 [label="Debug.Assert(sourceAssembly is object); 852751"];
5070 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 852752"];
5071 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 852753"];
5072 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 852754"];
5073 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 852755"];
5074 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 852756"];
5075 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 852757"];
5076 [label="PooledHashSet<int>? excludeDiagnostics = null; 852758"];
5077 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 852759"];
5078 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 852760"];
5079 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 852761"];
5080 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 852762"];
5081 [label="param GetDiagnostics(CompilationStage stage) 852763"];
5082 [label="param GetDiagnostics(bool includeEarlierStages) 852764"];
5083 [label="var diagnostics = DiagnosticBag.GetInstance(); 852765"];
5084 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 852766"];
5085 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 852767"];
5086 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 852768"];
5087 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 852769"];
5088 [label="param GetDiagnostics(CompilationStage stage) 852770"];
5089 [label="param GetDiagnostics(bool includeEarlierStages) 852771"];
5090 [label="param GetDiagnostics(DiagnosticBag diagnostics) 852772"];
5091 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 852773"];
5092 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 852774"];
5093 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 852775"];
5094 [label="this.SyntaxTrees 852776"];
5095 [label="_syntaxAndDeclarations.GetLazyState() 852777"];
5096 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 852778"];
5097 [label="this.Options 852779"];
5098 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 852780"];
5099 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 852781"];
5100 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 852782"];
5101 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 852783"];
5102 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 852784"];
5103 [label="CheckAssemblyName(builder); 852785"];
5104 [label="CheckAssemblyName(builder); 852786"];
5105 [label="Options 852787"];
5106 [label="Options 852788"];
5107 [label="get\n            {\n                return _options;\n            } 852789"];
5108 [label="return _options; 852790"];
5109 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 852791"];
5110 [label="GetBoundReferenceManager() 852792"];
5111 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 852793"];
5112 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 852794"];
5113 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 852795"];
5114 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 852796"];
5115 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 852797"];
5116 [label="GlobalImports 852798"];
5117 [label="SourceLocation? location = null; 852799"];
5118 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 852800"];
5119 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 852801"];
5120 [label="Assembly 852802"];
5121 [label="SourceAssembly 852803"];
5122 [label="GetBoundReferenceManager() 852804"];
5123 [label="param GetBoundReferenceManager(this) 852805"];
5124 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852806"];
5125 [label="return _referenceManager; 852807"];
5126 [label="GetBoundReferenceManager(); 852808"];
5127 [label="Assembly.ForceComplete(location, cancellationToken); 852809"];
5128 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 852810"];
5129 [label="_declarationDiagnosticsFrozen = true; 852811"];
5130 [label="_needsGeneratedAttributes_IsFrozen = true; 852812"];
5131 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 852813"];
5132 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 852814"];
5133 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 852815"];
5134 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 852816"];
5135 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 852817"];
5136 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 852818"];
5137 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 852819"];
5138 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 852820"];
5139 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 852821"];
5140 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 852822"];
5141 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 852823"];
5142 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 852824"];
5143 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 852825"];
5144 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 852826"];
5145 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 852827"];
5146 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 852828"];
5147 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 852829"];
5148 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 852830"];
5149 [label="excludeDiagnostics?.Free(); 852831"];
5150 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 852832"];
5151 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 852833"];
5152 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 852834"];
5153 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 852835"];
5154 [label="Debug.Assert(compilation != null); 852836"];
5155 [label="Debug.Assert(diagnostics != null); 852837"];
5156 [label="compilation.PreviousSubmission 852838"];
5157 [label="ScriptCompilationInfo 852839"];
5158 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 852840"];
5159 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 852841"];
5160 [label="MethodSymbol entryPoint = null; 852842"];
5161 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 852843"];
5162 [label="param GetEntryPoint(bool hasDeclarationErrors) 852844"];
5163 [label="param GetEntryPoint(CancellationToken cancellationToken) 852845"];
5164 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 852846"];
5165 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 852847"];
5166 [label="Debug.Assert(compilation != null); 852848"];
5167 [label="Debug.Assert(diagnostics != null); 852849"];
5168 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 852850"];
5169 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 852851"];
5170 [label="param SetGlobalErrorIfTrue(bool arg) 852852"];
5171 [label="param SetGlobalErrorIfTrue(this) 852853"];
5172 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 852854"];
5173 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 852855"];
5174 [label="GetBoundReferenceManager() 852856"];
5175 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852857"];
5176 [label="return _referenceManager; 852858"];
5177 [label="GetBoundReferenceManager(); 852859"];
5178 [label="param VisitNamedType(TypeCompilationState arg) 852860"];
5179 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 852861"];
5180 [label="PassesFilter(_filterOpt, symbol) 852862"];
5181 [label="param PassesFilter(Predicate<Symbol> filterOpt) 852863"];
5182 [label="param PassesFilter(Symbol symbol) 852864"];
5183 [label="return (filterOpt == null) || filterOpt(symbol); 852865"];
5184 [label="return (filterOpt == null) || filterOpt(symbol); 852866"];
5185 [label="arg = null; 852867"];
5186 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 852868"];
5187 [label="if (tasks == null)\n            {\n                return;\n            } 852869"];
5188 [label="if (tasks == null)\n            {\n                return;\n            } 852870"];
5189 [label="methodCompiler.WaitForWorkers(); 852871"];
5190 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 852872"];
5191 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 852873"];
5192 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 852874"];
5193 [label="_additionalTypes 852875"];
5194 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 852876"];
5195 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 852877"];
5196 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 852878"];
5197 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 852879"];
5198 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 852880"];
5199 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 852881"];
5200 [label="param CompileSynthesizedMethods(this) 852882"];
5201 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 852883"];
5202 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 852884"];
5203 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 852885"];
5204 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 852886"];
5205 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 852887"];
5206 [label="return GetNeedsGeneratedAttributesInternal(); 852888"];
5207 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 852889"];
5208 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 852890"];
5209 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 852891"];
5210 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 852892"];
5211 [label="return; 852893"];
5212 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 852894"];
5213 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 852895"];
5214 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 852896"];
5215 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 852897"];
5216 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 852898"];
5217 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 852899"];
5218 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 852900"];
5219 [label="param CompileSynthesizedMethods(this) 852901"];
5220 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 852902"];
5221 [label="param GetPreviousAnonymousTypes(this) 852903"];
5222 [label="methodCompiler.WaitForWorkers(); 852904"];
5223 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 852905"];
5224 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 852906"];
5225 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 852907"];
5226 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 852908"];
5227 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 852909"];
5228 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 852910"];
5229 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 852911"];
5230 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 852912"];
5231 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 852913"];
5232 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 852914"];
5233 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 852915"];
5234 [label="param GenerateModuleInitializer(this) 852916"];
5235 [label="Debug.Assert(_declarationDiagnosticsFrozen); 852917"];
5236 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 852918"];
5237 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 852919"];
5238 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 852920"];
5239 [label="return true; 852921"];
5240 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 852922"];
5241 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 852923"];
5242 [label="SourceAssembly 852924"];
5243 [label="GetBoundReferenceManager() 852925"];
5244 [label="param GetBoundReferenceManager(this) 852926"];
5245 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852927"];
5246 [label="return _referenceManager; 852928"];
5247 [label="GetBoundReferenceManager(); 852929"];
5248 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 852930"];
5249 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 852931"];
5250 [label="AddedModulesResourceNames(resourceDiagnostics) 852932"];
5251 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 852933"];
5252 [label="SourceAssembly 852934"];
5253 [label="GetBoundReferenceManager() 852935"];
5254 [label="param GetBoundReferenceManager(this) 852936"];
5255 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852937"];
5256 [label="return _referenceManager; 852938"];
5257 [label="GetBoundReferenceManager(); 852939"];
5258 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 852940"];
5259 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 852941"];
5260 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 852942"];
5261 [label="param AddedModulesResourceNames(this) 852943"];
5262 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 852944"];
5263 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 852945"];
5264 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 852946"];
5265 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 852947"];
5266 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 852948"];
5267 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 852949"];
5268 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 852950"];
5269 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 852951"];
5270 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 852952"];
5271 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 852953"];
5272 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 852954"];
5273 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 852955"];
5274 [label="StreamWriter writer = null; 852956"];
5275 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 852957"];
5276 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 852958"];
5277 [label="compilation.SourceAssembly 852959"];
5278 [label="GetBoundReferenceManager() 852960"];
5279 [label="param GetBoundReferenceManager(this) 852961"];
5280 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 852962"];
5281 [label="return _referenceManager; 852963"];
5282 [label="GetBoundReferenceManager(); 852964"];
5283 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 852965"];
5284 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 852966"];
5285 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 852967"];
5286 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 852968"];
5287 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 852969"];
5288 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 852970"];
5289 [label="param DocumentationCommentCompiler(TextWriter writer) 852971"];
5290 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 852972"];
5291 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 852973"];
5292 [label="param DocumentationCommentCompiler(bool processIncludes) 852974"];
5293 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 852975"];
5294 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 852976"];
5295 [label="param DocumentationCommentCompiler(this) 852977"];
5296 [label="param DocumentationCommentCompiler(this) 852978"];
5297 [label="_assemblyName 852979"];
5298 [label="_compilation 852980"];
5299 [label="_writer 852981"];
5300 [label="_filterTree 852982"];
5301 [label="_filterSpanWithinTree 852983"];
5302 [label="_processIncludes 852984"];
5303 [label="_isForSingleSymbol 852985"];
5304 [label="_diagnostics 852986"];
5305 [label="_lazyComparer 852987"];
5306 [label="_includedFileCache 852988"];
5307 [label="_indentDepth 852989"];
5308 [label="_temporaryStringBuilders 852990"];
5309 [label="_writer 852991"];
5310 [label="_filterTree 852992"];
5311 [label="_filterSpanWithinTree 852993"];
5312 [label="_processIncludes 852994"];
5313 [label="_isForSingleSymbol 852995"];
5314 [label="_diagnostics 852996"];
5315 [label="compilation.SourceAssembly 852997"];
5316 [label="GetBoundReferenceManager() 852998"];
5317 [label="param GetBoundReferenceManager(this) 852999"];
5318 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 853000"];
5319 [label="return _referenceManager; 853001"];
5320 [label="GetBoundReferenceManager(); 853002"];
5321 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 853003"];
5322 [label="Debug.Assert(_assemblyName != null); 853004"];
5323 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 853005"];
5324 [label="WriteLine('<?xml version=\\'1.0\\'?>') 853006"];
5325 [label="param WriteLine(string message) 853007"];
5326 [label="param WriteLine(this) 853008"];
5327 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853009"];
5328 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853010"];
5329 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853011"];
5330 [label="WriteLine('<doc>'); 853012"];
5331 [label="WriteLine('<doc>') 853013"];
5332 [label="param WriteLine(string message) 853014"];
5333 [label="param WriteLine(this) 853015"];
5334 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853016"];
5335 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853017"];
5336 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853018"];
5337 [label="Indent(); 853019"];
5338 [label="WriteLine('<assembly>'); 853020"];
5339 [label="WriteLine('<assembly>') 853021"];
5340 [label="param WriteLine(string message) 853022"];
5341 [label="param WriteLine(this) 853023"];
5342 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853024"];
5343 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853025"];
5344 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853026"];
5345 [label="Indent(); 853027"];
5346 [label="WriteLine('<name>{0}</name>', _assemblyName); 853028"];
5347 [label="WriteLine('<name>{0}</name>', _assemblyName) 853029"];
5348 [label="WriteLine('<name>{0}</name>', _assemblyName) 853030"];
5349 [label="param WriteLine(string format) 853031"];
5350 [label="param WriteLine(params object[] args) 853032"];
5351 [label="param WriteLine(this) 853033"];
5352 [label="WriteLine(string.Format(format, args)); 853034"];
5353 [label="WriteLine(string.Format(format, args)); 853035"];
5354 [label="WriteLine(string.Format(format, args)); 853036"];
5355 [label="WriteLine(string.Format(format, args)) 853037"];
5356 [label="param WriteLine(string message) 853038"];
5357 [label="param WriteLine(this) 853039"];
5358 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853040"];
5359 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853041"];
5360 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853042"];
5361 [label="WriteLine(string.Format(format, args)); 853043"];
5362 [label="Debug.Assert(_indentDepth >= 0); 853044"];
5363 [label="Unindent(); 853045"];
5364 [label="WriteLine('</assembly>'); 853046"];
5365 [label="WriteLine('</assembly>') 853047"];
5366 [label="param WriteLine(string message) 853048"];
5367 [label="param WriteLine(this) 853049"];
5368 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853050"];
5369 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853051"];
5370 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853052"];
5371 [label="WriteLine('<members>'); 853053"];
5372 [label="WriteLine('<members>') 853054"];
5373 [label="param WriteLine(string message) 853055"];
5374 [label="param WriteLine(this) 853056"];
5375 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853057"];
5376 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853058"];
5377 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853059"];
5378 [label="Indent(); 853060"];
5379 [label="Debug.Assert(!_isForSingleSymbol); 853061"];
5380 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 853062"];
5381 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 853063"];
5382 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 853064"];
5383 [label="DocumentationMode maxDocumentationMode; 853065"];
5384 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 853066"];
5385 [label="docCommentNodes 853067"];
5386 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 853068"];
5387 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 853069"];
5388 [label="maxDocumentationMode = DocumentationMode.None; 853070"];
5389 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 853071"];
5390 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 853072"];
5391 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 853073"];
5392 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 853074"];
5393 [label="currDocumentationMode > maxDocumentationMode 853075"];
5394 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 853076"];
5395 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 853077"];
5396 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 853078"];
5397 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 853079"];
5398 [label="return true; 853080"];
5399 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 853081"];
5400 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 853082"];
5401 [label="return; 853083"];
5402 [label="return; 853084"];
5403 [label="Unindent(); 853085"];
5404 [label="WriteLine('</members>'); 853086"];
5405 [label="WriteLine('</members>') 853087"];
5406 [label="param WriteLine(string message) 853088"];
5407 [label="param WriteLine(this) 853089"];
5408 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853090"];
5409 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853091"];
5410 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853092"];
5411 [label="Unindent(); 853093"];
5412 [label="WriteLine('</doc>'); 853094"];
5413 [label="WriteLine('</doc>') 853095"];
5414 [label="param WriteLine(string message) 853096"];
5415 [label="param WriteLine(this) 853097"];
5416 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853098"];
5417 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853099"];
5418 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 853100"];
5419 [label="Debug.Assert(compiler._indentDepth == 0); 853101"];
5420 [label="Debug.Assert(compiler._indentDepth == 0); 853102"];
5421 [label="writer?.Flush(); 853103"];
5422 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 853104"];
5423 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 853105"];
5424 [label="compilation.SyntaxTrees 853106"];
5425 [label="_syntaxAndDeclarations.GetLazyState() 853107"];
5426 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 853108"];
5427 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 853109"];
5428 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 853110"];
5429 [label="param ReportUnprocessed(CancellationToken cancellationToken) 853111"];
5430 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 853112"];
5431 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 853113"];
5432 [label="param ReportUnusedImports(SyntaxTree? filterTree) 853114"];
5433 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 853115"];
5434 [label="param ReportUnusedImports(CancellationToken cancellationToken) 853116"];
5435 [label="param ReportUnusedImports(this) 853117"];
5436 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 853118"];
5437 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 853119"];
5438 [label="CompleteTrees(filterTree); 853120"];
5439 [label="CompleteTrees(filterTree) 853121"];
5440 [label="param CompleteTrees(SyntaxTree? filterTree) 853122"];
5441 [label="param CompleteTrees(this) 853123"];
5442 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 853124"];
5443 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 853125"];
5444 [label="CompleteTrees(filterTree); 853126"];
5445 [label="SourceAssembly 853127"];
5446 [label="GetBoundReferenceManager() 853128"];
5447 [label="param GetBoundReferenceManager(this) 853129"];
5448 [label="GetBoundReferenceManager(); 853130"];
5449 [label="this.SourceModule 853131"];
5450 [label="Assembly 853132"];
5451 [label="SourceAssembly 853133"];
5452 [label="GetBoundReferenceManager() 853134"];
5453 [label="param GetBoundReferenceManager(this) 853135"];
5454 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 853136"];
5455 [label="return _referenceManager; 853137"];
5456 [label="GetBoundReferenceManager(); 853138"];
5457 [label="return Assembly.Modules[0]; 853139"];
5458 [label="SourceAssembly 853140"];
5459 [label="GetBoundReferenceManager() 853141"];
5460 [label="param GetBoundReferenceManager(this) 853142"];
5461 [label="GetBoundReferenceManager(); 853143"];
5462 [label="SourceAssembly.IsDelaySigned 853144"];
5463 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 853145"];
5464 [label="CorLibrary 853146"];
5465 [label="return Translate(corLibrary, context.Diagnostics); 853147"];
5466 [label="param Translate(DiagnosticBag diagnostics) 853148"];
5467 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 853149"];
5468 [label="_targetAssembly 853150"];
5469 [label="Debug.Assert((object)assemblySymbol != null); 853151"];
5470 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 853152"];
5471 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 853153"];
5472 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 853154"];
5473 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 853155"];
5474 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 853156"];
5475 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 853157"];
5476 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 853158"];
5477 [label="param ValidateReferencedAssembly(this) 853159"];
5478 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 853160"];
5479 [label="asmRef.Identity 853161"];
5480 [label="=> _targetAssembly.Identity 853162"];
5481 [label="AssemblyIdentity refIdentity = asmRef.Identity; 853163"];
5482 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 853164"];
5483 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 853165"];
5484 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 853166"];
5485 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 853167"];
5486 [label="var refMachine = assembly.Machine; 853168"];
5487 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 853169"];
5488 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 853170"];
5489 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 853171"];
5490 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 853172"];
5491 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 853173"];
5492 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 853174"];
5493 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 853175"];
5494 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 853176"];
5495 [label="param GetAssemblyReferencesFromAddedModules(this) 853177"];
5496 [label="var modules = sourceAssSymbol.Modules; 853178"];
5497 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 853179"];
5498 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 853180"];
5499 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 853181"];
5500 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 853182"];
5501 [label="Compilation.AnonymousTypeManager 853183"];
5502 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 853184"];
5503 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 853185"];
5504 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 853186"];
5505 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 853187"];
5506 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 853188"];
5507 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 853189"];
5508 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 853190"];
5509 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 853191"];
5510 [label="GetEmbeddedTypes(context.Diagnostics) 853192"];
5511 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 853193"];
5512 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 853194"];
5513 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 853195"];
5514 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 853196"];
5515 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 853197"];
5516 [label="GetNeedsGeneratedAttributes() 853198"];
5517 [label="_needsGeneratedAttributes_IsFrozen = true; 853199"];
5518 [label="GetNeedsGeneratedAttributesInternal() 853200"];
5519 [label="return GetNeedsGeneratedAttributesInternal(); 853201"];
5520 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 853202"];
5521 [label="ShouldEmitNullablePublicOnlyAttribute() 853203"];
5522 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 853204"];
5523 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 853205"];
5524 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 853206"];
5525 [label="return; 853207"];
5526 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 853208"];
5527 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 853209"];
5528 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 853210"];
5529 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 853211"];
5530 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 853212"];
5531 [label="builder.AddIfNotNull(_lazyNullableAttribute); 853213"];
5532 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 853214"];
5533 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 853215"];
5534 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 853216"];
5535 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 853217"];
5536 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 853218"];
5537 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 853219"];
5538 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 853220"];
5539 [label="Debug.Assert(symbol.IsDefinition); 853221"];
5540 [label="SourceModule 853222"];
5541 [label="Assembly 853223"];
5542 [label="SourceAssembly 853224"];
5543 [label="GetBoundReferenceManager() 853225"];
5544 [label="param GetBoundReferenceManager(this) 853226"];
5545 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 853227"];
5546 [label="return _referenceManager; 853228"];
5547 [label="GetBoundReferenceManager(); 853229"];
5548 [label="return Assembly.Modules[0]; 853230"];
5549 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 853231"];
5550 [label="EmitNullablePublicOnly 853232"];
5551 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 853233"];
5552 [label="Compilation.SourceModule 853234"];
5553 [label="Assembly 853235"];
5554 [label="SourceAssembly 853236"];
5555 [label="GetBoundReferenceManager() 853237"];
5556 [label="param GetBoundReferenceManager(this) 853238"];
5557 [label="GetBoundReferenceManager(); 853239"];
5558 [label="return Assembly.Modules[0]; 853240"];
5559 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 853241"];
5560 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 853242"];
5561 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 853243"];
5562 [label="type.AddNullableTransforms(flagsBuilder); 853244"];
5563 [label="SynthesizedAttributeData attribute; 853245"];
5564 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 853246"];
5565 [label="param GetSynthesizedNestedTypes(this) 853247"];
5566 [label="return null; 853248"];
5567 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 853249"];
5568 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 853250"];
5569 [label="NamedTypeSymbol result; 853251"];
5570 [label="Debug.Assert(result.SpecialType == specialType); 853252"];
5571 [label="param Translate(DiagnosticBag diagnostics) 853253"];
5572 [label="param Translate(bool needDeclaration = false) 853254"];
5573 [label="param Translate(this) 853255"];
5574 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 853256"];
5575 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 853257"];
5576 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 853258"];
5577 [label="param Translate(SyntaxNode syntaxNodeOpt) 853259"];
5578 [label="param Translate(DiagnosticBag diagnostics) 853260"];
5579 [label="param Translate(bool needDeclaration) 853261"];
5580 [label="param Translate(this) 853262"];
5581 [label="object reference; 853263"];
5582 [label="Cci.IMethodReference methodRef; 853264"];
5583 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 853265"];
5584 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 853266"];
5585 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 853267"];
5586 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 853268"];
5587 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 853269"];
5588 [label="bool typeIsGeneric = IsGenericType(container); 853270"];
5589 [label="IsGenericType(container) 853271"];
5590 [label="param IsGenericType(NamedTypeSymbol toCheck) 853272"];
5591 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853273"];
5592 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853274"];
5593 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853275"];
5594 [label="toCheck = toCheck.ContainingType; 853276"];
5595 [label="return false; 853277"];
5596 [label="bool typeIsGeneric = IsGenericType(container); 853278"];
5597 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 853279"];
5598 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 853280"];
5599 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 853281"];
5600 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 853282"];
5601 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 853283"];
5602 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 853284"];
5603 [label="param Translate(SyntaxNode syntaxNodeOpt) 853285"];
5604 [label="param Translate(DiagnosticBag diagnostics) 853286"];
5605 [label="Debug.Assert(diagnostics != null); 853287"];
5606 [label="Debug.Assert(diagnostics != null); 853288"];
5607 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 853289"];
5608 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 853290"];
5609 [label="param Translate(SyntaxNode syntaxNodeOpt) 853291"];
5610 [label="param Translate(DiagnosticBag diagnostics) 853292"];
5611 [label="param Translate(bool fromImplements = false) 853293"];
5612 [label="param Translate(bool needDeclaration = false) 853294"];
5613 [label="Debug.Assert(diagnostics != null); 853295"];
5614 [label="Debug.Assert(diagnostics != null); 853296"];
5615 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853297"];
5616 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853298"];
5617 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 853299"];
5618 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853300"];
5619 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853301"];
5620 [label="object reference; 853302"];
5621 [label="Cci.INamedTypeReference typeRef; 853303"];
5622 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 853304"];
5623 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853305"];
5624 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853306"];
5625 [label="IsGenericType(container) 853307"];
5626 [label="param IsGenericType(NamedTypeSymbol toCheck) 853308"];
5627 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853309"];
5628 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853310"];
5629 [label="return false; 853311"];
5630 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853312"];
5631 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853313"];
5632 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 853314"];
5633 [label="param Translate(SyntaxNode syntaxNodeOpt) 853315"];
5634 [label="param Translate(DiagnosticBag diagnostics) 853316"];
5635 [label="param Translate(bool fromImplements = false) 853317"];
5636 [label="param Translate(bool needDeclaration = false) 853318"];
5637 [label="Debug.Assert(diagnostics != null); 853319"];
5638 [label="Debug.Assert(diagnostics != null); 853320"];
5639 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853321"];
5640 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853322"];
5641 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 853323"];
5642 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853324"];
5643 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853325"];
5644 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 853326"];
5645 [label="param Translate(DiagnosticBag diagnostics) 853327"];
5646 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 853328"];
5647 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 853329"];
5648 [label="if ((object)module == null)\n            {\n                return null;\n            } 853330"];
5649 [label="if ((object)module == null)\n            {\n                return null;\n            } 853331"];
5650 [label="Cci.IModuleReference moduleRef; 853332"];
5651 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 853333"];
5652 [label="param Translate(this) 853334"];
5653 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 853335"];
5654 [label="MustBeWrapped(@params.First()) 853336"];
5655 [label="param MustBeWrapped(ParameterSymbol param) 853337"];
5656 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 853338"];
5657 [label="var container = param.ContainingSymbol; 853339"];
5658 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 853340"];
5659 [label="ContainerIsGeneric(container) 853341"];
5660 [label="param ContainerIsGeneric(Symbol container) 853342"];
5661 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853343"];
5662 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853344"];
5663 [label="IsGenericType(container.ContainingType) 853345"];
5664 [label="param IsGenericType(NamedTypeSymbol toCheck) 853346"];
5665 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853347"];
5666 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853348"];
5667 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853349"];
5668 [label="toCheck = toCheck.ContainingType; 853350"];
5669 [label="return false; 853351"];
5670 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853352"];
5671 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853353"];
5672 [label="return false; 853354"];
5673 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 853355"];
5674 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 853356"];
5675 [label="param MustBeWrapped(ParameterSymbol param) 853357"];
5676 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 853358"];
5677 [label="var container = param.ContainingSymbol; 853359"];
5678 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 853360"];
5679 [label="ContainerIsGeneric(container) 853361"];
5680 [label="param ContainerIsGeneric(Symbol container) 853362"];
5681 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853363"];
5682 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853364"];
5683 [label="IsGenericType(container.ContainingType) 853365"];
5684 [label="param IsGenericType(NamedTypeSymbol toCheck) 853366"];
5685 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853367"];
5686 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853368"];
5687 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853369"];
5688 [label="toCheck = toCheck.ContainingType; 853370"];
5689 [label="return false; 853371"];
5690 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853372"];
5691 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853373"];
5692 [label="return false; 853374"];
5693 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 853375"];
5694 [label="param Translate(SyntaxNode syntaxNodeOpt) 853376"];
5695 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 853377"];
5696 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 853378"];
5697 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 853379"];
5698 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 853380"];
5699 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 853381"];
5700 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 853382"];
5701 [label="bool typeIsGeneric = IsGenericType(container); 853383"];
5702 [label="IsGenericType(container) 853384"];
5703 [label="param IsGenericType(NamedTypeSymbol toCheck) 853385"];
5704 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853386"];
5705 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853387"];
5706 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853388"];
5707 [label="toCheck = toCheck.ContainingType; 853389"];
5708 [label="return false; 853390"];
5709 [label="bool typeIsGeneric = IsGenericType(container); 853391"];
5710 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 853392"];
5711 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 853393"];
5712 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 853394"];
5713 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 853395"];
5714 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853396"];
5715 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853397"];
5716 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 853398"];
5717 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853399"];
5718 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853400"];
5719 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 853401"];
5720 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 853402"];
5721 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 853403"];
5722 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 853404"];
5723 [label="param Translate(SyntaxNode syntaxNodeOpt) 853405"];
5724 [label="param Translate(DiagnosticBag diagnostics) 853406"];
5725 [label="param Translate(bool fromImplements = false) 853407"];
5726 [label="param Translate(bool needDeclaration = false) 853408"];
5727 [label="Debug.Assert(diagnostics != null); 853409"];
5728 [label="Debug.Assert(diagnostics != null); 853410"];
5729 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853411"];
5730 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853412"];
5731 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 853413"];
5732 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853414"];
5733 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853415"];
5734 [label="object reference; 853416"];
5735 [label="Cci.INamedTypeReference typeRef; 853417"];
5736 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 853418"];
5737 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853419"];
5738 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853420"];
5739 [label="IsGenericType(container) 853421"];
5740 [label="param IsGenericType(NamedTypeSymbol toCheck) 853422"];
5741 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853423"];
5742 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853424"];
5743 [label="return false; 853425"];
5744 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853426"];
5745 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853427"];
5746 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 853428"];
5747 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 853429"];
5748 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 853430"];
5749 [label="bool typeIsGeneric = IsGenericType(container); 853431"];
5750 [label="param IsGenericType(NamedTypeSymbol toCheck) 853432"];
5751 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853433"];
5752 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853434"];
5753 [label="toCheck = toCheck.ContainingType; 853435"];
5754 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853436"];
5755 [label="toCheck = toCheck.ContainingType; 853437"];
5756 [label="param MustBeWrapped(ParameterSymbol param) 853438"];
5757 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 853439"];
5758 [label="var container = param.ContainingSymbol; 853440"];
5759 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 853441"];
5760 [label="ContainerIsGeneric(container) 853442"];
5761 [label="param ContainerIsGeneric(Symbol container) 853443"];
5762 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853444"];
5763 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853445"];
5764 [label="IsGenericType(container.ContainingType) 853446"];
5765 [label="param IsGenericType(NamedTypeSymbol toCheck) 853447"];
5766 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853448"];
5767 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853449"];
5768 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853450"];
5769 [label="toCheck = toCheck.ContainingType; 853451"];
5770 [label="return false; 853452"];
5771 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853453"];
5772 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853454"];
5773 [label="param MustBeWrapped(ParameterSymbol param) 853455"];
5774 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 853456"];
5775 [label="var container = param.ContainingSymbol; 853457"];
5776 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 853458"];
5777 [label="ContainerIsGeneric(container) 853459"];
5778 [label="param ContainerIsGeneric(Symbol container) 853460"];
5779 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853461"];
5780 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853462"];
5781 [label="IsGenericType(container.ContainingType) 853463"];
5782 [label="param IsGenericType(NamedTypeSymbol toCheck) 853464"];
5783 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853465"];
5784 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853466"];
5785 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853467"];
5786 [label="toCheck = toCheck.ContainingType; 853468"];
5787 [label="return false; 853469"];
5788 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853470"];
5789 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853471"];
5790 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 853472"];
5791 [label="return Translate(corLibrary, context.Diagnostics); 853473"];
5792 [label="param Translate(DiagnosticBag diagnostics) 853474"];
5793 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 853475"];
5794 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 853476"];
5795 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 853477"];
5796 [label="return SourceModule.GetCustomAttributesToEmit(this); 853478"];
5797 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 853479"];
5798 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 853480"];
5799 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 853481"];
5800 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 853482"];
5801 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 853483"];
5802 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 853484"];
5803 [label="return GetNeedsGeneratedAttributesInternal(); 853485"];
5804 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 853486"];
5805 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 853487"];
5806 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 853488"];
5807 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 853489"];
5808 [label="return; 853490"];
5809 [label="Debug.Assert(symbol.IsDefinition); 853491"];
5810 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 853492"];
5811 [label="return _referenceManager; 853493"];
5812 [label="GetBoundReferenceManager(); 853494"];
5813 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 853495"];
5814 [label="param GetBoundReferenceManager(this) 853496"];
5815 [label="GetBoundReferenceManager(); 853497"];
5816 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 853498"];
5817 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 853499"];
5818 [label="param SynthesizeNullableAttributeIfNecessary(this) 853500"];
5819 [label="object reference; 853501"];
5820 [label="Cci.INamedTypeReference typeRef; 853502"];
5821 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 853503"];
5822 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853504"];
5823 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853505"];
5824 [label="IsGenericType(container) 853506"];
5825 [label="param IsGenericType(NamedTypeSymbol toCheck) 853507"];
5826 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853508"];
5827 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853509"];
5828 [label="return false; 853510"];
5829 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853511"];
5830 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853512"];
5831 [label="param GetExportedTypes(DiagnosticBag diagnostics) 853513"];
5832 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 853514"];
5833 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 853515"];
5834 [label="var modules = sourceAssembly.Modules; 853516"];
5835 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 853517"];
5836 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 853518"];
5837 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 853519"];
5838 [label="sourceAssembly.DeclaringCompilation.Options 853520"];
5839 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 853521"];
5840 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 853522"];
5841 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 853523"];
5842 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 853524"];
5843 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 853525"];
5844 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 853526"];
5845 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 853527"];
5846 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 853528"];
5847 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 853529"];
5848 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 853530"];
5849 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 853531"];
5850 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 853532"];
5851 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 853533"];
5852 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 853534"];
5853 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 853535"];
5854 [label="return seenTopLevelForwardedTypes; 853536"];
5855 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 853537"];
5856 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 853538"];
5857 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 853539"];
5858 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 853540"];
5859 [label="param AddEmbeddedResourcesFromAddedModules(this) 853541"];
5860 [label="var modules = _sourceAssembly.Modules; 853542"];
5861 [label="int count = modules.Length; 853543"];
5862 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 853544"];
5863 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 853545"];
5864 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 853546"];
5865 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 853547"];
5866 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853548"];
5867 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853549"];
5868 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 853550"];
5869 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853551"];
5870 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853552"];
5871 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 853553"];
5872 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 853554"];
5873 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 853555"];
5874 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 853556"];
5875 [label="param Translate(SyntaxNode syntaxNodeOpt) 853557"];
5876 [label="param Translate(DiagnosticBag diagnostics) 853558"];
5877 [label="param Translate(bool fromImplements = false) 853559"];
5878 [label="param Translate(bool needDeclaration = false) 853560"];
5879 [label="Debug.Assert(diagnostics != null); 853561"];
5880 [label="Debug.Assert(diagnostics != null); 853562"];
5881 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853563"];
5882 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 853564"];
5883 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 853565"];
5884 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853566"];
5885 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 853567"];
5886 [label="object reference; 853568"];
5887 [label="Cci.INamedTypeReference typeRef; 853569"];
5888 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 853570"];
5889 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853571"];
5890 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853572"];
5891 [label="IsGenericType(container) 853573"];
5892 [label="param IsGenericType(NamedTypeSymbol toCheck) 853574"];
5893 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853575"];
5894 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853576"];
5895 [label="return false; 853577"];
5896 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853578"];
5897 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853579"];
5898 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 853580"];
5899 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 853581"];
5900 [label="object reference; 853582"];
5901 [label="Cci.INamedTypeReference typeRef; 853583"];
5902 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 853584"];
5903 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853585"];
5904 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853586"];
5905 [label="IsGenericType(container) 853587"];
5906 [label="param IsGenericType(NamedTypeSymbol toCheck) 853588"];
5907 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853589"];
5908 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853590"];
5909 [label="return false; 853591"];
5910 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853592"];
5911 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 853593"];
5912 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 853594"];
5913 [label="GetBoundReferenceManager() 853595"];
5914 [label="GetBoundReferenceManager(); 853596"];
5915 [label="Debug.Assert(result.SpecialType == specialType); 853597"];
5916 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 853598"];
5917 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 853599"];
5918 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 853600"];
5919 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 853601"];
5920 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 853602"];
5921 [label="bool typeIsGeneric = IsGenericType(container); 853603"];
5922 [label="IsGenericType(container) 853604"];
5923 [label="param IsGenericType(NamedTypeSymbol toCheck) 853605"];
5924 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853606"];
5925 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853607"];
5926 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853608"];
5927 [label="toCheck = toCheck.ContainingType; 853609"];
5928 [label="return false; 853610"];
5929 [label="bool typeIsGeneric = IsGenericType(container); 853611"];
5930 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 853612"];
5931 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 853613"];
5932 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 853614"];
5933 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 853615"];
5934 [label="param MustBeWrapped(ParameterSymbol param) 853616"];
5935 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 853617"];
5936 [label="var container = param.ContainingSymbol; 853618"];
5937 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 853619"];
5938 [label="ContainerIsGeneric(container) 853620"];
5939 [label="param ContainerIsGeneric(Symbol container) 853621"];
5940 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853622"];
5941 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853623"];
5942 [label="IsGenericType(container.ContainingType) 853624"];
5943 [label="param IsGenericType(NamedTypeSymbol toCheck) 853625"];
5944 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853626"];
5945 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853627"];
5946 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853628"];
5947 [label="toCheck = toCheck.ContainingType; 853629"];
5948 [label="return false; 853630"];
5949 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853631"];
5950 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853632"];
5951 [label="param MustBeWrapped(ParameterSymbol param) 853633"];
5952 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 853634"];
5953 [label="var container = param.ContainingSymbol; 853635"];
5954 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 853636"];
5955 [label="ContainerIsGeneric(container) 853637"];
5956 [label="param ContainerIsGeneric(Symbol container) 853638"];
5957 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853639"];
5958 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853640"];
5959 [label="IsGenericType(container.ContainingType) 853641"];
5960 [label="param IsGenericType(NamedTypeSymbol toCheck) 853642"];
5961 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853643"];
5962 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 853644"];
5963 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853645"];
5964 [label="toCheck = toCheck.ContainingType; 853646"];
5965 [label="return false; 853647"];
5966 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853648"];
5967 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 853649"];
5968 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 853650"];
5969 [label="toCheck = toCheck.ContainingType; 853651"];
5970 [label="Debug.Assert(symbol.IsDefinition); 853652"];
5971 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 853653"];
5972 [label="return _referenceManager; 853654"];
5973 [label="GetBoundReferenceManager(); 853655"];
5974 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 853656"];
5975 [label="param GetBoundReferenceManager(this) 853657"];
5976 [label="GetBoundReferenceManager(); 853658"];
5977 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 853659"];
5978 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 853660"];
5979 [label="param SynthesizeNullableAttributeIfNecessary(this) 853661"];
5980 [label="var result = new MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation>(); 853662"];
5981 [label="var namespacesAndTypesToProcess = new Stack<NamespaceOrTypeSymbol>(); 853663"];
5982 [label="Location location = null; 853664"];
5983 [label="while (namespacesAndTypesToProcess.Count > 0)\n            {\n                NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop();\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                }\n            } 853665"];
5984 [label="param GetSmallestSourceLocationOrNull(this) 853666"];
5985 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 853667"];
5986 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 853668"];
5987 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 853669"];
5988 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 853670"];
5989 [label="param AddSymbolLocation(Cci.IDefinition definition) 853671"];
5990 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 853672"];
5991 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 853673"];
5992 [label="param GetSmallestSourceLocationOrNull(this) 853674"];
5993 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 853675"];
5994 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 853676"];
5995 [label="param AddSymbolLocation(Cci.IDefinition definition) 853677"];
5996 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 853678"];
5997 [label="return result; 853679"];
5998 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 853680"];
5999 [label="return _referenceManager; 853681"];
6000 [label="GetBoundReferenceManager(); 853682"];
6001 [label="c.GetEmitDiagnostics(options: options).Verify(expected); 853683"];
6002 [label="c.GetEmitDiagnostics(options: options).Verify(expected) 853684"];
6003 [label="param Verify(params DiagnosticDescription[] expected) 853685"];
6004 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 853686"];
6005 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 853687"];
6006 [label="param Verify(params DiagnosticDescription[] expected) 853688"];
6007 [label="Verify(actual, expected, errorCodeOnly: false); 853689"];
6008 [label="Verify(actual, expected, errorCodeOnly: false); 853690"];
6009 [label="Verify(actual, expected, errorCodeOnly: false) 853691"];
6010 [label="param Verify(DiagnosticDescription[] expected) 853692"];
6011 [label="param Verify(bool errorCodeOnly) 853693"];
6012 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 853694"];
6013 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 853695"];
6014 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 853696"];
6015 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 853697"];
6016 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 853698"];
6017 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 853699"];
6018 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 853700"];
6019 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 853701"];
6020 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 853702"];
6021 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 853703"];
6022 [label="DiagnosticDescription.GetAssertText(expected, actual) 853704"];
6023 [label="param GetAssertText(DiagnosticDescription[] expected) 853705"];
6024 [label="const int CSharp = 1; 853706"];
6025 [label="const int VisualBasic = 2; 853707"];
6026 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 853708"];
6027 [label="actual.Any() && actual.First() is CSDiagnostic 853709"];
6028 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 853710"];
6029 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 853711"];
6030 [label="int indentDepth = (language == CSharp) ? 4 : 1; 853712"];
6031 [label="(language == CSharp) 853713"];
6032 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 853714"];
6033 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 853715"];
6034 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 853716"];
6035 [label="IsSortedOrEmpty(expected) 853717"];
6036 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 853718"];
6037 [label="var comparer = LinePositionComparer.Instance; 853719"];
6038 [label="DiagnosticDescription last = null; 853720"];
6039 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 853721"];
6040 [label="return true; 853722"];
6041 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 853723"];
6042 [label="Sort(actual) 853724"];
6043 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 853725"];
6044 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 853726"];
6045 [label="var assertText = new StringBuilder(); 853727"];
6046 [label="assertText.AppendLine(); 853728"];
6047 [label="int i; 853729"];
6048 [label="assertText.AppendLine('Expected:'); 853730"];
6049 [label="assertText.AppendLine('Expected:'); 853731"];
6050 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 853732"];
6051 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 853733"];
6052 [label="GetCommaSeparatedLines(assertText, expectedText); 853734"];
6053 [label="GetCommaSeparatedLines(assertText, expectedText); 853735"];
6054 [label="GetCommaSeparatedLines(assertText, expectedText) 853736"];
6055 [label="param GetCommaSeparatedLines(StringBuilder sb) 853737"];
6056 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 853738"];
6057 [label="int n = lines.Count; 853739"];
6058 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 853740"];
6059 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 853741"];
6060 [label="GetCommaSeparatedLines(assertText, expectedText); 853742"];
6061 [label="assertText.AppendLine('Actual:'); 853743"];
6062 [label="assertText.AppendLine('Actual:'); 853744"];
6063 [label="var actualText = ArrayBuilder<string>.GetInstance(); 853745"];
6064 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 853746"];
6065 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 853747"];
6066 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 853748"];
6067 [label="assertText.AppendLine('Diff:'); 853749"];
6068 [label="assertText.AppendLine('Diff:'); 853750"];
6069 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 853751"];
6070 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 853752"];
6071 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 853753"];
6072 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 853754"];
6073 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 853755"];
6074 [label="param DiffReport(IEnumerable<T> expected) 853756"];
6075 [label="param DiffReport(IEnumerable<T> actual) 853757"];
6076 [label="param DiffReport(string separator) 853758"];
6077 [label="param DiffReport(IEqualityComparer<T> comparer = null) 853759"];
6078 [label="param DiffReport(Func<T, string> toString = null) 853760"];
6079 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 853761"];
6080 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 853762"];
6081 [label="(comparer != null) 853763"];
6082 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 853764"];
6083 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 853765"];
6084 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 853766"];
6085 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 853767"];
6086 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 853768"];
6087 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 853769"];
6088 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 853770"];
6089 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 853771"];
6090 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 853772"];
6091 [label="lcs.CalculateDiff(expectedList, actualList, toString) 853773"];
6092 [label="param CalculateDiff(IList<T> sequenceA) 853774"];
6093 [label="param CalculateDiff(IList<T> sequenceB) 853775"];
6094 [label="param CalculateDiff(Func<T, string> toString) 853776"];
6095 [label="param CalculateDiff(this) 853777"];
6096 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 853778"];
6097 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 853779"];
6098 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 853780"];
6099 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 853781"];
6100 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 853782"];
6101 [label="param GetEdits(TSequence sequenceA) 853783"];
6102 [label="param GetEdits(int lengthA) 853784"];
6103 [label="param GetEdits(TSequence sequenceB) 853785"];
6104 [label="param GetEdits(int lengthB) 853786"];
6105 [label="param GetEdits(this) 853787"];
6106 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 853788"];
6107 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 853789"];
6108 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 853790"];
6109 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 853791"];
6110 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 853792"];
6111 [label="param ComputeCostMatrix(TSequence sequenceA) 853793"];
6112 [label="param ComputeCostMatrix(int lengthA) 853794"];
6113 [label="param ComputeCostMatrix(TSequence sequenceB) 853795"];
6114 [label="param ComputeCostMatrix(int lengthB) 853796"];
6115 [label="param ComputeCostMatrix(this) 853797"];
6116 [label="var la = lengthA + 1; 853798"];
6117 [label="var la = lengthA + 1; 853799"];
6118 [label="var lb = lengthB + 1; 853800"];
6119 [label="var lb = lengthB + 1; 853801"];
6120 [label="var d = new int[la, lb]; 853802"];
6121 [label="d[0, 0] = 0; 853803"];
6122 [label="d[0, 0] 853804"];
6123 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 853805"];
6124 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 853806"];
6125 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 853807"];
6126 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 853808"];
6127 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 853809"];
6128 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 853810"];
6129 [label="return d; 853811"];
6130 [label="int i = lengthA; 853812"];
6131 [label="int j = lengthB; 853813"];
6132 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 853814"];
6133 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 853815"];
6134 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 853816"];
6135 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 853817"];
6136 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 853818"];
6137 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 853819"];
6138 [label="param GetEdits(this) 853820"];
6139 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 853821"];
6140 [label="param CalculateDiff(this) 853822"];
6141 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 853823"];
6142 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 853824"];
6143 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 853825"];
6144 [label="actualText.Free(); 853826"];
6145 [label="expectedText.Free(); 853827"];
6146 [label="return assertText.ToString(); 853828"];
6147 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 853829"];
6148 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 853830"];
6149 [label="return c; 853831"];
6150 [label="var result = comp.Emit(output,\n                    options: options); 853832"];
6151 [label="var result = comp.Emit(output,\n                    options: options); 853833"];
6152 [label="var result = comp.Emit(output,\n                    options: options); 853834"];
6153 [label="var result = comp.Emit(output,\n                    options: options); 853835"];
6154 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 853836"];
6155 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 853837"];
6156 [label="param CreateModuleBuilder(CompilationTestData? testData) 853838"];
6157 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 853839"];
6158 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 853840"];
6159 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 853841"];
6160 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 853842"];
6161 [label="GetRuntimeMetadataVersion(emitOptions) 853843"];
6162 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 853844"];
6163 [label="Assembly 853845"];
6164 [label="SourceAssembly 853846"];
6165 [label="GetBoundReferenceManager() 853847"];
6166 [label="param GetBoundReferenceManager(this) 853848"];
6167 [label="GetBoundReferenceManager(); 853849"];
6168 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 853850"];
6169 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 853851"];
6170 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 853852"];
6171 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 853853"];
6172 [label="SourceAssembly 853854"];
6173 [label="GetBoundReferenceManager() 853855"];
6174 [label="param GetBoundReferenceManager(this) 853856"];
6175 [label="GetBoundReferenceManager(); 853857"];
6176 [label="SourceAssembly.IsDelaySigned 853858"];
6177 [label="SourceAssembly 853859"];
6178 [label="GetBoundReferenceManager() 853860"];
6179 [label="param GetBoundReferenceManager(this) 853861"];
6180 [label="GetBoundReferenceManager(); 853862"];
6181 [label="=> 0x30 853863"];
6182 [label="0x30 853864"];
6183 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 853865"];
6184 [label="PEModuleBuilder moduleBeingBuilt; 853866"];
6185 [label="GetBoundReferenceManager() 853867"];
6186 [label="GetBoundReferenceManager(); 853868"];
6187 [label="get\n            {\n                return true;\n            } 853869"];
6188 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 853870"];
6189 [label="Debug.Assert(sourceAssembly is object); 853871"];
6190 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 853872"];
6191 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 853873"];
6192 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 853874"];
6193 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 853875"];
6194 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 853876"];
6195 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 853877"];
6196 [label="PooledHashSet<int>? excludeDiagnostics = null; 853878"];
6197 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 853879"];
6198 [label="excludeDiagnostics = PooledHashSet<int>.GetInstance(); 853880"];
6199 [label="excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody); 853881"];
6200 [label="excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody); 853882"];
6201 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 853883"];
6202 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 853884"];
6203 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 853885"];
6204 [label="param GetDiagnostics(CompilationStage stage) 853886"];
6205 [label="param GetDiagnostics(bool includeEarlierStages) 853887"];
6206 [label="var diagnostics = DiagnosticBag.GetInstance(); 853888"];
6207 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 853889"];
6208 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 853890"];
6209 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 853891"];
6210 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 853892"];
6211 [label="param GetDiagnostics(CompilationStage stage) 853893"];
6212 [label="param GetDiagnostics(bool includeEarlierStages) 853894"];
6213 [label="param GetDiagnostics(DiagnosticBag diagnostics) 853895"];
6214 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 853896"];
6215 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 853897"];
6216 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 853898"];
6217 [label="this.SyntaxTrees 853899"];
6218 [label="_syntaxAndDeclarations.GetLazyState() 853900"];
6219 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 853901"];
6220 [label="this.Options 853902"];
6221 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 853903"];
6222 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 853904"];
6223 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 853905"];
6224 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 853906"];
6225 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 853907"];
6226 [label="CheckAssemblyName(builder); 853908"];
6227 [label="CheckAssemblyName(builder); 853909"];
6228 [label="Options 853910"];
6229 [label="Options 853911"];
6230 [label="get\n            {\n                return _options;\n            } 853912"];
6231 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 853913"];
6232 [label="GetBoundReferenceManager() 853914"];
6233 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 853915"];
6234 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 853916"];
6235 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 853917"];
6236 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 853918"];
6237 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 853919"];
6238 [label="GlobalImports 853920"];
6239 [label="SourceLocation? location = null; 853921"];
6240 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 853922"];
6241 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 853923"];
6242 [label="Assembly 853924"];
6243 [label="SourceAssembly 853925"];
6244 [label="GetBoundReferenceManager() 853926"];
6245 [label="param GetBoundReferenceManager(this) 853927"];
6246 [label="GetBoundReferenceManager(); 853928"];
6247 [label="Assembly.ForceComplete(location, cancellationToken); 853929"];
6248 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 853930"];
6249 [label="_declarationDiagnosticsFrozen = true; 853931"];
6250 [label="_needsGeneratedAttributes_IsFrozen = true; 853932"];
6251 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 853933"];
6252 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 853934"];
6253 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 853935"];
6254 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 853936"];
6255 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 853937"];
6256 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 853938"];
6257 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 853939"];
6258 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 853940"];
6259 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 853941"];
6260 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 853942"];
6261 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 853943"];
6262 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 853944"];
6263 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 853945"];
6264 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 853946"];
6265 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 853947"];
6266 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 853948"];
6267 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 853949"];
6268 [label="excludeDiagnostics?.Free(); 853950"];
6269 [label="if (hasDeclarationErrors)\n                {\n                    return false;\n                } 853951"];
6270 [label="if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                } 853952"];
6271 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken); 853953"];
6272 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken) 853954"];
6273 [label="param ProcessSynthesizedMembers(CSharpCompilation compilation) 853955"];
6274 [label="param ProcessSynthesizedMembers(PEModuleBuilder moduleBeingBuilt) 853956"];
6275 [label="param ProcessSynthesizedMembers(CancellationToken cancellationToken) 853957"];
6276 [label="Debug.Assert(moduleBeingBuilt != null); 853958"];
6277 [label="Debug.Assert(moduleBeingBuilt != null); 853959"];
6278 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 853960"];
6279 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 853961"];
6280 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 853962"];
6281 [label="new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken) 853963"];
6282 [label="param SynthesizedMetadataCompiler(PEModuleBuilder moduleBeingBuilt) 853964"];
6283 [label="param SynthesizedMetadataCompiler(CancellationToken cancellationToken) 853965"];
6284 [label="param SynthesizedMetadataCompiler(this) 853966"];
6285 [label="param SynthesizedMetadataCompiler(this) 853967"];
6286 [label="_moduleBeingBuilt 853968"];
6287 [label="Debug.Assert(moduleBeingBuilt != null); 853969"];
6288 [label="Debug.Assert(moduleBeingBuilt != null); 853970"];
6289 [label="_moduleBeingBuilt 853971"];
6290 [label="_cancellationToken 853972"];
6291 [label="compilation.SourceModule 853973"];
6292 [label="get\n            {\n                return Assembly.Modules[0];\n            } 853974"];
6293 [label="GetBoundReferenceManager() 853975"];
6294 [label="param GetBoundReferenceManager(this) 853976"];
6295 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 853977"];
6296 [label="return _referenceManager; 853978"];
6297 [label="GetBoundReferenceManager(); 853979"];
6298 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 853980"];
6299 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 853981"];
6300 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 853982"];
6301 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 853983"];
6302 [label="param VisitNamespace(NamespaceSymbol symbol) 853984"];
6303 [label="param VisitNamespace(this) 853985"];
6304 [label="_cancellationToken.ThrowIfCancellationRequested(); 853986"];
6305 [label="foreach (var s in symbol.GetMembers())\n            {\n                s.Accept(this);\n            } 853987"];
6306 [label="s.Accept(this); 853988"];
6307 [label="s.Accept(this); 853989"];
6308 [label="param VisitNamedType(NamedTypeSymbol symbol) 853990"];
6309 [label="param VisitNamedType(this) 853991"];
6310 [label="_cancellationToken.ThrowIfCancellationRequested(); 853992"];
6311 [label="var sourceTypeSymbol = symbol as SourceMemberContainerTypeSymbol; 853993"];
6312 [label="if ((object)sourceTypeSymbol != null)\n            {\n                if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                }\n            } 853994"];
6313 [label="if ((object)sourceTypeSymbol != null)\n            {\n                if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                }\n            } 853995"];
6314 [label="if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                } 853996"];
6315 [label="if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                } 853997"];
6316 [label="foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    } 853998"];
6317 [label="foreach (Symbol member in symbol.GetMembers())\n            {\n                switch (member.Kind)\n                {\n                    case SymbolKind.Property:\n                    case SymbolKind.NamedType:\n                        member.Accept(this);\n                        break;\n                }\n            } 853999"];
6318 [label="switch (member.Kind)\n                {\n                    case SymbolKind.Property:\n                    case SymbolKind.NamedType:\n                        member.Accept(this);\n                        break;\n                } 854000"];
6319 [label="return true; 854001"];
6320 [label="SourceAssembly 854002"];
6321 [label="GetBoundReferenceManager() 854003"];
6322 [label="param GetBoundReferenceManager(this) 854004"];
6323 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 854005"];
6324 [label="return _referenceManager; 854006"];
6325 [label="GetBoundReferenceManager(); 854007"];
6326 [label="SourceAssembly 854008"];
6327 [label="GetBoundReferenceManager() 854009"];
6328 [label="param GetBoundReferenceManager(this) 854010"];
6329 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 854011"];
6330 [label="return _referenceManager; 854012"];
6331 [label="GetBoundReferenceManager(); 854013"];
6332 [label="SourceAssembly.IsDelaySigned 854014"];
6333 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 854015"];
6334 [label="CorLibrary 854016"];
6335 [label="return Translate(corLibrary, context.Diagnostics); 854017"];
6336 [label="param Translate(DiagnosticBag diagnostics) 854018"];
6337 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 854019"];
6338 [label="_targetAssembly 854020"];
6339 [label="Debug.Assert((object)assemblySymbol != null); 854021"];
6340 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 854022"];
6341 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 854023"];
6342 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 854024"];
6343 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 854025"];
6344 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 854026"];
6345 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 854027"];
6346 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 854028"];
6347 [label="param ValidateReferencedAssembly(this) 854029"];
6348 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 854030"];
6349 [label="asmRef.Identity 854031"];
6350 [label="=> _targetAssembly.Identity 854032"];
6351 [label="AssemblyIdentity refIdentity = asmRef.Identity; 854033"];
6352 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 854034"];
6353 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 854035"];
6354 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 854036"];
6355 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 854037"];
6356 [label="var refMachine = assembly.Machine; 854038"];
6357 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 854039"];
6358 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 854040"];
6359 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 854041"];
6360 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 854042"];
6361 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 854043"];
6362 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 854044"];
6363 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 854045"];
6364 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 854046"];
6365 [label="param GetAssemblyReferencesFromAddedModules(this) 854047"];
6366 [label="getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly) 854048"];
6367 [label="var modules = sourceAssSymbol.Modules; 854049"];
6368 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 854050"];
6369 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 854051"];
6370 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 854052"];
6371 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 854053"];
6372 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 854054"];
6373 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 854055"];
6374 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 854056"];
6375 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 854057"];
6376 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 854058"];
6377 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 854059"];
6378 [label="GetEmbeddedTypes(context.Diagnostics) 854060"];
6379 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 854061"];
6380 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 854062"];
6381 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 854063"];
6382 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 854064"];
6383 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 854065"];
6384 [label="GetNeedsGeneratedAttributes() 854066"];
6385 [label="_needsGeneratedAttributes_IsFrozen = true; 854067"];
6386 [label="GetNeedsGeneratedAttributesInternal() 854068"];
6387 [label="return GetNeedsGeneratedAttributesInternal(); 854069"];
6388 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 854070"];
6389 [label="ShouldEmitNullablePublicOnlyAttribute() 854071"];
6390 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 854072"];
6391 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 854073"];
6392 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 854074"];
6393 [label="return; 854075"];
6394 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 854076"];
6395 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 854077"];
6396 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 854078"];
6397 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 854079"];
6398 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 854080"];
6399 [label="builder.AddIfNotNull(_lazyNullableAttribute); 854081"];
6400 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 854082"];
6401 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 854083"];
6402 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 854084"];
6403 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 854085"];
6404 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 854086"];
6405 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 854087"];
6406 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 854088"];
6407 [label="Debug.Assert(symbol.IsDefinition); 854089"];
6408 [label="SourceModule 854090"];
6409 [label="Assembly 854091"];
6410 [label="SourceAssembly 854092"];
6411 [label="GetBoundReferenceManager() 854093"];
6412 [label="param GetBoundReferenceManager(this) 854094"];
6413 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 854095"];
6414 [label="return _referenceManager; 854096"];
6415 [label="GetBoundReferenceManager(); 854097"];
6416 [label="return Assembly.Modules[0]; 854098"];
6417 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 854099"];
6418 [label="EmitNullablePublicOnly 854100"];
6419 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 854101"];
6420 [label="Compilation.SourceModule 854102"];
6421 [label="Assembly 854103"];
6422 [label="SourceAssembly 854104"];
6423 [label="GetBoundReferenceManager() 854105"];
6424 [label="param GetBoundReferenceManager(this) 854106"];
6425 [label="GetBoundReferenceManager(); 854107"];
6426 [label="return Assembly.Modules[0]; 854108"];
6427 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 854109"];
6428 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 854110"];
6429 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 854111"];
6430 [label="type.AddNullableTransforms(flagsBuilder); 854112"];
6431 [label="SynthesizedAttributeData attribute; 854113"];
6432 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 854114"];
6433 [label="param GetSynthesizedNestedTypes(this) 854115"];
6434 [label="return null; 854116"];
6435 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 854117"];
6436 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 854118"];
6437 [label="NamedTypeSymbol result; 854119"];
6438 [label="GetBoundReferenceManager() 854120"];
6439 [label="GetBoundReferenceManager(); 854121"];
6440 [label="Debug.Assert(result.SpecialType == specialType); 854122"];
6441 [label="param Translate(bool needDeclaration = false) 854123"];
6442 [label="param Translate(this) 854124"];
6443 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 854125"];
6444 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 854126"];
6445 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 854127"];
6446 [label="param Translate(SyntaxNode syntaxNodeOpt) 854128"];
6447 [label="param Translate(DiagnosticBag diagnostics) 854129"];
6448 [label="param Translate(bool needDeclaration) 854130"];
6449 [label="param Translate(this) 854131"];
6450 [label="object reference; 854132"];
6451 [label="Cci.IMethodReference methodRef; 854133"];
6452 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 854134"];
6453 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 854135"];
6454 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 854136"];
6455 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 854137"];
6456 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 854138"];
6457 [label="bool typeIsGeneric = IsGenericType(container); 854139"];
6458 [label="IsGenericType(container) 854140"];
6459 [label="param IsGenericType(NamedTypeSymbol toCheck) 854141"];
6460 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854142"];
6461 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854143"];
6462 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 854144"];
6463 [label="toCheck = toCheck.ContainingType; 854145"];
6464 [label="return false; 854146"];
6465 [label="bool typeIsGeneric = IsGenericType(container); 854147"];
6466 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 854148"];
6467 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 854149"];
6468 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 854150"];
6469 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 854151"];
6470 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 854152"];
6471 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 854153"];
6472 [label="param Translate(SyntaxNode syntaxNodeOpt) 854154"];
6473 [label="param Translate(DiagnosticBag diagnostics) 854155"];
6474 [label="Debug.Assert(diagnostics != null); 854156"];
6475 [label="Debug.Assert(diagnostics != null); 854157"];
6476 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 854158"];
6477 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 854159"];
6478 [label="param Translate(SyntaxNode syntaxNodeOpt) 854160"];
6479 [label="param Translate(DiagnosticBag diagnostics) 854161"];
6480 [label="param Translate(bool fromImplements = false) 854162"];
6481 [label="param Translate(bool needDeclaration = false) 854163"];
6482 [label="Debug.Assert(diagnostics != null); 854164"];
6483 [label="Debug.Assert(diagnostics != null); 854165"];
6484 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 854166"];
6485 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 854167"];
6486 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 854168"];
6487 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 854169"];
6488 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 854170"];
6489 [label="object reference; 854171"];
6490 [label="Cci.INamedTypeReference typeRef; 854172"];
6491 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 854173"];
6492 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854174"];
6493 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854175"];
6494 [label="IsGenericType(container) 854176"];
6495 [label="param IsGenericType(NamedTypeSymbol toCheck) 854177"];
6496 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854178"];
6497 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854179"];
6498 [label="return false; 854180"];
6499 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854181"];
6500 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854182"];
6501 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 854183"];
6502 [label="param Translate(SyntaxNode syntaxNodeOpt) 854184"];
6503 [label="param Translate(DiagnosticBag diagnostics) 854185"];
6504 [label="param Translate(bool fromImplements = false) 854186"];
6505 [label="param Translate(bool needDeclaration = false) 854187"];
6506 [label="Debug.Assert(diagnostics != null); 854188"];
6507 [label="Debug.Assert(diagnostics != null); 854189"];
6508 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 854190"];
6509 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 854191"];
6510 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 854192"];
6511 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 854193"];
6512 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 854194"];
6513 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 854195"];
6514 [label="param Translate(DiagnosticBag diagnostics) 854196"];
6515 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 854197"];
6516 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 854198"];
6517 [label="if ((object)module == null)\n            {\n                return null;\n            } 854199"];
6518 [label="if ((object)module == null)\n            {\n                return null;\n            } 854200"];
6519 [label="Cci.IModuleReference moduleRef; 854201"];
6520 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 854202"];
6521 [label="param Translate(this) 854203"];
6522 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 854204"];
6523 [label="MustBeWrapped(@params.First()) 854205"];
6524 [label="param MustBeWrapped(ParameterSymbol param) 854206"];
6525 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 854207"];
6526 [label="var container = param.ContainingSymbol; 854208"];
6527 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 854209"];
6528 [label="ContainerIsGeneric(container) 854210"];
6529 [label="param ContainerIsGeneric(Symbol container) 854211"];
6530 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854212"];
6531 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854213"];
6532 [label="IsGenericType(container.ContainingType) 854214"];
6533 [label="param IsGenericType(NamedTypeSymbol toCheck) 854215"];
6534 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854216"];
6535 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854217"];
6536 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 854218"];
6537 [label="toCheck = toCheck.ContainingType; 854219"];
6538 [label="return false; 854220"];
6539 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854221"];
6540 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854222"];
6541 [label="return false; 854223"];
6542 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 854224"];
6543 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 854225"];
6544 [label="param MustBeWrapped(ParameterSymbol param) 854226"];
6545 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 854227"];
6546 [label="var container = param.ContainingSymbol; 854228"];
6547 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 854229"];
6548 [label="ContainerIsGeneric(container) 854230"];
6549 [label="param ContainerIsGeneric(Symbol container) 854231"];
6550 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854232"];
6551 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854233"];
6552 [label="IsGenericType(container.ContainingType) 854234"];
6553 [label="param IsGenericType(NamedTypeSymbol toCheck) 854235"];
6554 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854236"];
6555 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854237"];
6556 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 854238"];
6557 [label="toCheck = toCheck.ContainingType; 854239"];
6558 [label="return false; 854240"];
6559 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854241"];
6560 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854242"];
6561 [label="return false; 854243"];
6562 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 854244"];
6563 [label="param Translate(SyntaxNode syntaxNodeOpt) 854245"];
6564 [label="param Translate(DiagnosticBag diagnostics) 854246"];
6565 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 854247"];
6566 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 854248"];
6567 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 854249"];
6568 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 854250"];
6569 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 854251"];
6570 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 854252"];
6571 [label="bool typeIsGeneric = IsGenericType(container); 854253"];
6572 [label="IsGenericType(container) 854254"];
6573 [label="param IsGenericType(NamedTypeSymbol toCheck) 854255"];
6574 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854256"];
6575 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854257"];
6576 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 854258"];
6577 [label="toCheck = toCheck.ContainingType; 854259"];
6578 [label="return false; 854260"];
6579 [label="bool typeIsGeneric = IsGenericType(container); 854261"];
6580 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 854262"];
6581 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 854263"];
6582 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 854264"];
6583 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 854265"];
6584 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 854266"];
6585 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 854267"];
6586 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 854268"];
6587 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 854269"];
6588 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 854270"];
6589 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 854271"];
6590 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 854272"];
6591 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 854273"];
6592 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 854274"];
6593 [label="param Translate(SyntaxNode syntaxNodeOpt) 854275"];
6594 [label="param Translate(DiagnosticBag diagnostics) 854276"];
6595 [label="param Translate(bool fromImplements = false) 854277"];
6596 [label="param Translate(bool needDeclaration = false) 854278"];
6597 [label="Debug.Assert(diagnostics != null); 854279"];
6598 [label="Debug.Assert(diagnostics != null); 854280"];
6599 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 854281"];
6600 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 854282"];
6601 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 854283"];
6602 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 854284"];
6603 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 854285"];
6604 [label="object reference; 854286"];
6605 [label="Cci.INamedTypeReference typeRef; 854287"];
6606 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 854288"];
6607 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854289"];
6608 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854290"];
6609 [label="IsGenericType(container) 854291"];
6610 [label="param IsGenericType(NamedTypeSymbol toCheck) 854292"];
6611 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854293"];
6612 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854294"];
6613 [label="return false; 854295"];
6614 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854296"];
6615 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854297"];
6616 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 854298"];
6617 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 854299"];
6618 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 854300"];
6619 [label="bool typeIsGeneric = IsGenericType(container); 854301"];
6620 [label="param IsGenericType(NamedTypeSymbol toCheck) 854302"];
6621 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854303"];
6622 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 854304"];
6623 [label="toCheck = toCheck.ContainingType; 854305"];
6624 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 854306"];
6625 [label="toCheck = toCheck.ContainingType; 854307"];
6626 [label="param MustBeWrapped(ParameterSymbol param) 854308"];
6627 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 854309"];
6628 [label="var container = param.ContainingSymbol; 854310"];
6629 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 854311"];
6630 [label="ContainerIsGeneric(container) 854312"];
6631 [label="param ContainerIsGeneric(Symbol container) 854313"];
6632 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854314"];
6633 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854315"];
6634 [label="IsGenericType(container.ContainingType) 854316"];
6635 [label="param IsGenericType(NamedTypeSymbol toCheck) 854317"];
6636 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854318"];
6637 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854319"];
6638 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 854320"];
6639 [label="toCheck = toCheck.ContainingType; 854321"];
6640 [label="return false; 854322"];
6641 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854323"];
6642 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854324"];
6643 [label="param MustBeWrapped(ParameterSymbol param) 854325"];
6644 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 854326"];
6645 [label="var container = param.ContainingSymbol; 854327"];
6646 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 854328"];
6647 [label="ContainerIsGeneric(container) 854329"];
6648 [label="param ContainerIsGeneric(Symbol container) 854330"];
6649 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854331"];
6650 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854332"];
6651 [label="IsGenericType(container.ContainingType) 854333"];
6652 [label="param IsGenericType(NamedTypeSymbol toCheck) 854334"];
6653 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854335"];
6654 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854336"];
6655 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 854337"];
6656 [label="toCheck = toCheck.ContainingType; 854338"];
6657 [label="return false; 854339"];
6658 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854340"];
6659 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 854341"];
6660 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 854342"];
6661 [label="return Translate(corLibrary, context.Diagnostics); 854343"];
6662 [label="param Translate(DiagnosticBag diagnostics) 854344"];
6663 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 854345"];
6664 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 854346"];
6665 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 854347"];
6666 [label="return SourceModule.GetCustomAttributesToEmit(this); 854348"];
6667 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 854349"];
6668 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 854350"];
6669 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 854351"];
6670 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 854352"];
6671 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 854353"];
6672 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 854354"];
6673 [label="return GetNeedsGeneratedAttributesInternal(); 854355"];
6674 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 854356"];
6675 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 854357"];
6676 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 854358"];
6677 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 854359"];
6678 [label="return; 854360"];
6679 [label="Debug.Assert(symbol.IsDefinition); 854361"];
6680 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 854362"];
6681 [label="return _referenceManager; 854363"];
6682 [label="GetBoundReferenceManager(); 854364"];
6683 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 854365"];
6684 [label="param GetBoundReferenceManager(this) 854366"];
6685 [label="GetBoundReferenceManager(); 854367"];
6686 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 854368"];
6687 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 854369"];
6688 [label="param SynthesizeNullableAttributeIfNecessary(this) 854370"];
6689 [label="object reference; 854371"];
6690 [label="Cci.INamedTypeReference typeRef; 854372"];
6691 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 854373"];
6692 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854374"];
6693 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854375"];
6694 [label="IsGenericType(container) 854376"];
6695 [label="param IsGenericType(NamedTypeSymbol toCheck) 854377"];
6696 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854378"];
6697 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 854379"];
6698 [label="return false; 854380"];
6699 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854381"];
6700 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 854382"];
6701 [label="param GetExportedTypes(DiagnosticBag diagnostics) 854383"];
6702 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 854384"];
6703 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 854385"];
6704 [label="var modules = sourceAssembly.Modules; 854386"];
6705 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 854387"];
6706 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 854388"];
6707 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 854389"];
6708 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 854390"];
6709 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 854391"];
6710 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 854392"];
6711 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 854393"];
6712 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 854394"];
6713 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 854395"];
6714 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 854396"];
6715 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 854397"];
6716 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 854398"];
6717 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 854399"];
6718 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 854400"];
6719 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 854401"];
6720 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 854402"];
6721 [label="return seenTopLevelForwardedTypes; 854403"];
6722 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 854404"];
6723 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 854405"];
6724 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 854406"];
6725 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 854407"];
6726 [label="GetBoundReferenceManager() 854408"];
6727 [label="GetBoundReferenceManager(); 854409"];
6728 [label="Debug.Assert(result.SpecialType == specialType); 854410"];
6729 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 854411"];
6730 [label="return _referenceManager; 854412"];
6731 [label="GetBoundReferenceManager(); 854413"];
6732 [label="return output.ToImmutable(); 854414"];
6733 [label="return output.ToImmutable(); 854415"];
6734 [label="VerifySigned(image); 854416"];
6735 [label="VerifySigned(image); 854417"];
6736 [label="VerifySigned(image) 854418"];
6737 [label="param VerifySigned(ImmutableArray<byte> image) 854419"];
6738 [label="param VerifySigned(bool expectSigned = true) 854420"];
6739 [label="param VerifySigned(this) 854421"];
6740 [label="using (var reader = new PEReader(image))\n            {\n                var flags = reader.PEHeaders.CorHeader.Flags;\n                CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned));\n            } 854422"];
6741 [label="using (var reader = new PEReader(image))\n            {\n                var flags = reader.PEHeaders.CorHeader.Flags;\n                CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned));\n            } 854423"];
6742 [label="var flags = reader.PEHeaders.CorHeader.Flags; 854424"];
6743 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854425"];
6744 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854426"];
6745 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854427"];
6746 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854428"];
6747 [label="VerifySigned(refImage); 854429"];
6748 [label="VerifySigned(refImage); 854430"];
6749 [label="VerifySigned(refImage) 854431"];
6750 [label="param VerifySigned(ImmutableArray<byte> image) 854432"];
6751 [label="param VerifySigned(bool expectSigned = true) 854433"];
6752 [label="param VerifySigned(this) 854434"];
6753 [label="using (var reader = new PEReader(image))\n            {\n                var flags = reader.PEHeaders.CorHeader.Flags;\n                CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned));\n            } 854435"];
6754 [label="using (var reader = new PEReader(image))\n            {\n                var flags = reader.PEHeaders.CorHeader.Flags;\n                CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned));\n            } 854436"];
6755 [label="var flags = reader.PEHeaders.CorHeader.Flags; 854437"];
6756 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854438"];
6757 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854439"];
6758 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854440"];
6759 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854441"];
6760 [label="VerifySigned(refOnlyImage); 854442"];
6761 [label="VerifySigned(refOnlyImage); 854443"];
6762 [label="VerifySigned(refOnlyImage) 854444"];
6763 [label="param VerifySigned(ImmutableArray<byte> image) 854445"];
6764 [label="param VerifySigned(bool expectSigned = true) 854446"];
6765 [label="param VerifySigned(this) 854447"];
6766 [label="using (var reader = new PEReader(image))\n            {\n                var flags = reader.PEHeaders.CorHeader.Flags;\n                CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned));\n            } 854448"];
6767 [label="using (var reader = new PEReader(image))\n            {\n                var flags = reader.PEHeaders.CorHeader.Flags;\n                CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned));\n            } 854449"];
6768 [label="var flags = reader.PEHeaders.CorHeader.Flags; 854450"];
6769 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854451"];
6770 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854452"];
6771 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854453"];
6772 [label="CustomAssert.Equal(expectSigned, flags.HasFlag(CorFlags.StrongNameSigned)); 854454"];
6773 [label="VerifyIdentitiesMatch(image, refImage, expectPublicKey: true); 854455"];
6774 [label="VerifyIdentitiesMatch(image, refImage, expectPublicKey: true); 854456"];
6775 [label="VerifyIdentitiesMatch(image, refImage, expectPublicKey: true) 854457"];
6776 [label="param VerifyIdentitiesMatch(ImmutableArray<byte> firstImage) 854458"];
6777 [label="param VerifyIdentitiesMatch(ImmutableArray<byte> secondImage) 854459"];
6778 [label="param VerifyIdentitiesMatch(bool expectMatch = true) 854460"];
6779 [label="param VerifyIdentitiesMatch(bool expectPublicKey = false) 854461"];
6780 [label="var id1 = ModuleMetadata.CreateFromImage(firstImage).GetMetadataReader().ReadAssemblyIdentityOrThrow(); 854462"];
6781 [label="var id1 = ModuleMetadata.CreateFromImage(firstImage).GetMetadataReader().ReadAssemblyIdentityOrThrow(); 854463"];
6782 [label="var id2 = ModuleMetadata.CreateFromImage(secondImage).GetMetadataReader().ReadAssemblyIdentityOrThrow(); 854464"];
6783 [label="var id2 = ModuleMetadata.CreateFromImage(secondImage).GetMetadataReader().ReadAssemblyIdentityOrThrow(); 854465"];
6784 [label="CustomAssert.Equal(expectMatch, id1 == id2); 854466"];
6785 [label="CustomAssert.Equal(expectMatch, id1 == id2); 854467"];
6786 [label="CustomAssert.Equal(expectMatch, id1 == id2); 854468"];
6787 [label="if (expectPublicKey)\n            {\n                CustomAssert.True(id1.HasPublicKey);\n                CustomAssert.True(id2.HasPublicKey);\n            } 854469"];
6788 [label="CustomAssert.True(id1.HasPublicKey); 854470"];
6789 [label="CustomAssert.True(id2.HasPublicKey); 854471"];
6790 [label="VerifyIdentitiesMatch(image, refOnlyImage, expectPublicKey: true); 854472"];
6791 [label="VerifyIdentitiesMatch(image, refOnlyImage, expectPublicKey: true); 854473"];
6792 [label="VerifyIdentitiesMatch(image, refOnlyImage, expectPublicKey: true); 854474"];
6793 [label="VerifyIdentitiesMatch(image, refOnlyImage, expectPublicKey: true) 854475"];
6794 [label="param VerifyIdentitiesMatch(ImmutableArray<byte> firstImage) 854476"];
6795 [label="param VerifyIdentitiesMatch(ImmutableArray<byte> secondImage) 854477"];
6796 [label="param VerifyIdentitiesMatch(bool expectMatch = true) 854478"];
6797 [label="param VerifyIdentitiesMatch(bool expectPublicKey = false) 854479"];
6798 [label="var id1 = ModuleMetadata.CreateFromImage(firstImage).GetMetadataReader().ReadAssemblyIdentityOrThrow(); 854480"];
6799 [label="var id1 = ModuleMetadata.CreateFromImage(firstImage).GetMetadataReader().ReadAssemblyIdentityOrThrow(); 854481"];
6800 [label="var id2 = ModuleMetadata.CreateFromImage(secondImage).GetMetadataReader().ReadAssemblyIdentityOrThrow(); 854482"];
6801 [label="CustomAssert.Equal(expectMatch, id1 == id2); 854483"];
6802 [label="CustomAssert.Equal(expectMatch, id1 == id2); 854484"];
6803 [label="CustomAssert.Equal(expectMatch, id1 == id2); 854485"];
6804 [label="if (expectPublicKey)\n            {\n                CustomAssert.True(id1.HasPublicKey);\n                CustomAssert.True(id2.HasPublicKey);\n            } 854486"];
6805 [label="CustomAssert.True(id1.HasPublicKey); 854487"];
6806 [label="CustomAssert.True(id2.HasPublicKey); 854488"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 0;
11 -> 1;
12 -> 1;
13 -> 1;
14 -> 1;
15 -> 13;
15 -> 14;
16 -> 15;
16 -> 14;
17 -> 14;
18 -> 16;
18 -> 17;
19 -> 17;
20 -> 18;
20 -> 19;
20 -> 17;
21 -> 17;
21 -> 1;
22 -> 11;
22 -> 1;
23 -> 1;
24 -> 21;
24 -> 23;
25 -> 13;
25 -> 23;
26 -> 22;
26 -> 23;
27 -> 13;
27 -> 23;
28 -> 13;
28 -> 23;
29 -> 13;
29 -> 23;
30 -> 13;
30 -> 23;
31 -> 13;
31 -> 23;
32 -> 24;
32 -> 23;
33 -> 28;
33 -> 23;
34 -> 25;
34 -> 23;
35 -> 23;
36 -> 33;
36 -> 35;
37 -> 34;
37 -> 35;
38 -> 36;
38 -> 35;
39 -> 35;
40 -> 38;
40 -> 39;
41 -> 40;
41 -> 39;
42 -> 41;
43 -> 0;
43 -> 42;
44 -> 43;
45 -> 44;
46 -> 45;
46 -> 42;
47 -> 35;
48 -> 37;
48 -> 47;
48 -> 35;
49 -> 46;
49 -> 48;
50 -> 26;
50 -> 23;
51 -> 27;
51 -> 23;
52 -> 29;
52 -> 23;
53 -> 30;
53 -> 23;
54 -> 31;
54 -> 23;
55 -> 23;
56 -> 32;
56 -> 55;
57 -> 49;
57 -> 55;
58 -> 50;
58 -> 55;
59 -> 51;
59 -> 55;
60 -> 52;
60 -> 55;
61 -> 53;
61 -> 55;
62 -> 54;
62 -> 55;
63 -> 56;
63 -> 55;
64 -> 57;
64 -> 55;
65 -> 58;
65 -> 55;
66 -> 59;
66 -> 55;
67 -> 60;
67 -> 55;
68 -> 61;
68 -> 55;
69 -> 62;
69 -> 55;
70 -> 55;
71 -> 70;
71 -> 55;
72 -> 55;
73 -> 63;
73 -> 72;
74 -> 64;
74 -> 72;
75 -> 65;
75 -> 72;
76 -> 66;
76 -> 72;
77 -> 67;
77 -> 72;
78 -> 68;
78 -> 72;
79 -> 69;
79 -> 72;
80 -> 71;
80 -> 72;
81 -> 76;
81 -> 72;
82 -> 78;
82 -> 72;
83 -> 72;
84 -> 81;
84 -> 83;
85 -> 82;
85 -> 83;
86 -> 73;
86 -> 83;
87 -> 86;
87 -> 20;
87 -> 83;
88 -> 87;
89 -> 85;
89 -> 87;
90 -> 84;
90 -> 87;
91 -> 87;
92 -> 88;
92 -> 91;
93 -> 89;
93 -> 91;
94 -> 90;
94 -> 91;
95 -> 88;
95 -> 91;
96 -> 91;
97 -> 94;
97 -> 96;
97 -> 91;
98 -> 0;
98 -> 97;
99 -> 92;
99 -> 91;
100 -> 0;
100 -> 91;
101 -> 100;
101 -> 95;
101 -> 91;
102 -> 91;
103 -> 99;
103 -> 101;
103 -> 102;
103 -> 0;
103 -> 91;
104 -> 103;
104 -> 91;
105 -> 98;
105 -> 91;
106 -> 93;
106 -> 91;
107 -> 91;
108 -> 104;
108 -> 105;
108 -> 106;
108 -> 107;
108 -> 103;
108 -> 0;
108 -> 91;
109 -> 91;
110 -> 108;
110 -> 109;
111 -> 109;
112 -> 109;
113 -> 110;
113 -> 108;
113 -> 112;
113 -> 109;
114 -> 111;
114 -> 109;
115 -> 109;
116 -> 113;
116 -> 108;
116 -> 112;
116 -> 114;
116 -> 115;
116 -> 111;
116 -> 109;
117 -> 109;
118 -> 117;
118 -> 111;
118 -> 109;
119 -> 111;
119 -> 109;
120 -> 109;
121 -> 119;
121 -> 120;
121 -> 111;
121 -> 118;
121 -> 109;
122 -> 110;
122 -> 109;
123 -> 122;
123 -> 88;
123 -> 87;
124 -> 88;
124 -> 72;
125 -> 72;
126 -> 75;
126 -> 125;
126 -> 72;
127 -> 0;
127 -> 72;
128 -> 80;
128 -> 72;
129 -> 77;
129 -> 124;
129 -> 74;
129 -> 75;
129 -> 72;
130 -> 129;
130 -> 72;
131 -> 72;
132 -> 130;
132 -> 131;
133 -> 0;
133 -> 131;
134 -> 133;
135 -> 72;
136 -> 129;
136 -> 88;
136 -> 123;
136 -> 108;
136 -> 45;
136 -> 0;
136 -> 11;
136 -> 72;
137 -> 72;
138 -> 137;
139 -> 136;
139 -> 138;
139 -> 72;
140 -> 0;
142 -> 140;
142 -> 141;
143 -> 142;
144 -> 0;
146 -> 144;
146 -> 145;
148 -> 146;
148 -> 147;
149 -> 148;
150 -> 136;
150 -> 137;
151 -> 136;
151 -> 137;
152 -> 136;
152 -> 137;
153 -> 136;
153 -> 137;
154 -> 150;
154 -> 137;
155 -> 153;
155 -> 137;
156 -> 151;
156 -> 137;
157 -> 152;
157 -> 137;
158 -> 137;
159 -> 137;
160 -> 154;
160 -> 159;
161 -> 155;
161 -> 159;
162 -> 156;
162 -> 159;
163 -> 157;
163 -> 159;
164 -> 158;
164 -> 159;
165 -> 158;
165 -> 159;
166 -> 158;
166 -> 159;
167 -> 158;
167 -> 159;
168 -> 159;
169 -> 161;
169 -> 168;
169 -> 159;
170 -> 167;
170 -> 159;
171 -> 163;
171 -> 159;
172 -> 171;
172 -> 139;
172 -> 159;
173 -> 160;
173 -> 159;
174 -> 161;
174 -> 159;
175 -> 172;
175 -> 159;
176 -> 164;
176 -> 159;
177 -> 165;
177 -> 159;
178 -> 166;
178 -> 159;
179 -> 167;
179 -> 159;
180 -> 159;
181 -> 0;
181 -> 159;
182 -> 161;
182 -> 172;
182 -> 159;
183 -> 159;
184 -> 181;
184 -> 183;
185 -> 182;
185 -> 183;
186 -> 182;
186 -> 183;
187 -> 181;
187 -> 183;
188 -> 179;
188 -> 183;
189 -> 180;
189 -> 183;
190 -> 180;
190 -> 183;
191 -> 184;
191 -> 183;
192 -> 185;
192 -> 183;
193 -> 186;
193 -> 183;
194 -> 187;
194 -> 183;
195 -> 188;
195 -> 183;
196 -> 183;
197 -> 196;
197 -> 191;
197 -> 192;
197 -> 193;
197 -> 194;
197 -> 195;
197 -> 0;
197 -> 172;
197 -> 183;
198 -> 196;
198 -> 183;
199 -> 189;
199 -> 196;
199 -> 183;
200 -> 159;
201 -> 173;
201 -> 200;
202 -> 174;
202 -> 200;
203 -> 175;
203 -> 200;
204 -> 176;
204 -> 200;
205 -> 177;
205 -> 200;
206 -> 178;
206 -> 200;
207 -> 179;
207 -> 200;
208 -> 180;
208 -> 200;
209 -> 180;
209 -> 200;
210 -> 180;
210 -> 200;
211 -> 180;
211 -> 200;
212 -> 180;
212 -> 200;
213 -> 180;
213 -> 200;
214 -> 201;
214 -> 200;
215 -> 202;
215 -> 200;
216 -> 203;
216 -> 200;
217 -> 204;
217 -> 200;
218 -> 205;
218 -> 200;
219 -> 206;
219 -> 200;
220 -> 207;
220 -> 200;
221 -> 208;
221 -> 200;
222 -> 209;
222 -> 200;
223 -> 210;
223 -> 200;
224 -> 210;
224 -> 197;
224 -> 200;
225 -> 224;
225 -> 197;
225 -> 198;
225 -> 199;
225 -> 200;
226 -> 211;
226 -> 200;
227 -> 212;
227 -> 200;
228 -> 200;
229 -> 214;
229 -> 228;
230 -> 215;
230 -> 228;
231 -> 216;
231 -> 228;
232 -> 217;
232 -> 228;
233 -> 218;
233 -> 228;
234 -> 219;
234 -> 228;
235 -> 220;
235 -> 228;
236 -> 221;
236 -> 228;
237 -> 222;
237 -> 228;
238 -> 223;
238 -> 228;
239 -> 225;
239 -> 228;
240 -> 226;
240 -> 228;
241 -> 227;
241 -> 228;
242 -> 213;
242 -> 228;
243 -> 229;
243 -> 228;
244 -> 231;
244 -> 228;
245 -> 239;
245 -> 228;
246 -> 235;
246 -> 228;
247 -> 240;
247 -> 228;
248 -> 241;
248 -> 228;
249 -> 228;
250 -> 249;
250 -> 243;
250 -> 244;
250 -> 245;
250 -> 246;
250 -> 247;
250 -> 248;
250 -> 172;
250 -> 225;
250 -> 228;
251 -> 249;
251 -> 228;
252 -> 249;
252 -> 228;
253 -> 249;
253 -> 228;
254 -> 249;
254 -> 228;
255 -> 249;
255 -> 228;
256 -> 249;
256 -> 228;
257 -> 249;
257 -> 228;
258 -> 249;
258 -> 228;
259 -> 249;
259 -> 228;
260 -> 249;
260 -> 228;
261 -> 249;
261 -> 228;
262 -> 249;
262 -> 228;
263 -> 249;
263 -> 228;
264 -> 249;
264 -> 228;
265 -> 249;
265 -> 228;
266 -> 249;
266 -> 228;
267 -> 249;
267 -> 228;
268 -> 249;
268 -> 228;
269 -> 249;
269 -> 228;
270 -> 249;
270 -> 228;
271 -> 249;
271 -> 228;
272 -> 249;
272 -> 228;
273 -> 249;
273 -> 228;
274 -> 249;
274 -> 228;
275 -> 249;
275 -> 228;
276 -> 249;
276 -> 228;
277 -> 228;
278 -> 277;
278 -> 249;
278 -> 228;
279 -> 249;
279 -> 228;
280 -> 279;
280 -> 250;
280 -> 251;
280 -> 252;
280 -> 253;
280 -> 254;
280 -> 255;
280 -> 256;
280 -> 257;
280 -> 258;
280 -> 259;
280 -> 260;
280 -> 261;
280 -> 262;
280 -> 263;
280 -> 264;
280 -> 265;
280 -> 266;
280 -> 267;
280 -> 268;
280 -> 269;
280 -> 270;
280 -> 271;
280 -> 272;
280 -> 273;
280 -> 274;
280 -> 275;
280 -> 276;
280 -> 278;
280 -> 277;
280 -> 228;
281 -> 280;
281 -> 249;
281 -> 228;
282 -> 230;
282 -> 249;
282 -> 228;
283 -> 249;
283 -> 228;
284 -> 228;
285 -> 228;
286 -> 283;
286 -> 285;
287 -> 284;
287 -> 285;
288 -> 287;
288 -> 285;
289 -> 287;
289 -> 285;
290 -> 287;
290 -> 285;
291 -> 286;
291 -> 287;
291 -> 285;
292 -> 284;
292 -> 249;
292 -> 228;
293 -> 249;
293 -> 280;
293 -> 228;
294 -> 293;
294 -> 280;
294 -> 281;
294 -> 282;
294 -> 292;
294 -> 291;
294 -> 289;
294 -> 290;
294 -> 228;
295 -> 294;
295 -> 249;
295 -> 228;
296 -> 249;
296 -> 294;
296 -> 228;
297 -> 296;
297 -> 294;
297 -> 295;
297 -> 228;
298 -> 297;
298 -> 249;
298 -> 228;
299 -> 249;
299 -> 297;
299 -> 228;
300 -> 299;
300 -> 297;
300 -> 298;
300 -> 228;
301 -> 300;
301 -> 249;
301 -> 228;
302 -> 249;
302 -> 300;
302 -> 228;
303 -> 302;
303 -> 300;
303 -> 301;
303 -> 228;
304 -> 303;
304 -> 249;
304 -> 228;
305 -> 249;
305 -> 228;
306 -> 305;
306 -> 303;
306 -> 304;
306 -> 228;
307 -> 306;
307 -> 249;
307 -> 228;
308 -> 238;
308 -> 306;
308 -> 228;
309 -> 228;
310 -> 308;
310 -> 309;
311 -> 309;
312 -> 310;
312 -> 309;
313 -> 312;
313 -> 306;
313 -> 307;
313 -> 309;
314 -> 0;
314 -> 309;
315 -> 314;
315 -> 311;
315 -> 309;
316 -> 315;
316 -> 228;
317 -> 316;
317 -> 249;
317 -> 228;
318 -> 235;
318 -> 228;
319 -> 318;
320 -> 232;
320 -> 319;
320 -> 318;
321 -> 233;
321 -> 319;
321 -> 318;
322 -> 320;
322 -> 321;
322 -> 318;
323 -> 234;
323 -> 319;
323 -> 318;
324 -> 322;
324 -> 323;
324 -> 318;
325 -> 237;
325 -> 228;
326 -> 249;
326 -> 306;
326 -> 307;
326 -> 317;
326 -> 325;
327 -> 325;
328 -> 249;
328 -> 327;
329 -> 328;
329 -> 326;
329 -> 327;
330 -> 236;
330 -> 325;
331 -> 326;
331 -> 329;
331 -> 330;
331 -> 325;
332 -> 331;
332 -> 249;
332 -> 325;
333 -> 238;
333 -> 249;
333 -> 228;
334 -> 249;
334 -> 331;
334 -> 228;
335 -> 228;
336 -> 249;
336 -> 331;
336 -> 335;
336 -> 228;
337 -> 159;
338 -> 162;
338 -> 337;
338 -> 159;
339 -> 162;
339 -> 338;
340 -> 338;
341 -> 339;
341 -> 340;
342 -> 180;
342 -> 340;
343 -> 340;
344 -> 341;
344 -> 343;
344 -> 340;
345 -> 341;
345 -> 340;
346 -> 345;
346 -> 331;
346 -> 332;
346 -> 333;
346 -> 340;
347 -> 340;
348 -> 342;
348 -> 346;
348 -> 340;
349 -> 347;
349 -> 340;
350 -> 348;
350 -> 346;
350 -> 340;
351 -> 349;
351 -> 350;
351 -> 347;
351 -> 346;
351 -> 340;
352 -> 340;
353 -> 340;
354 -> 341;
354 -> 340;
355 -> 354;
355 -> 351;
355 -> 340;
356 -> 355;
357 -> 355;
358 -> 355;
359 -> 342;
359 -> 358;
359 -> 355;
360 -> 355;
361 -> 347;
361 -> 360;
361 -> 358;
361 -> 355;
362 -> 352;
362 -> 355;
362 -> 361;
363 -> 353;
363 -> 355;
364 -> 347;
364 -> 361;
364 -> 340;
365 -> 342;
365 -> 364;
365 -> 340;
366 -> 341;
366 -> 340;
367 -> 340;
368 -> 366;
368 -> 367;
369 -> 348;
369 -> 367;
370 -> 369;
370 -> 364;
370 -> 367;
371 -> 369;
371 -> 364;
371 -> 367;
372 -> 369;
372 -> 364;
372 -> 367;
373 -> 369;
373 -> 364;
373 -> 367;
374 -> 369;
374 -> 364;
374 -> 367;
375 -> 368;
375 -> 367;
376 -> 369;
376 -> 364;
376 -> 375;
376 -> 367;
377 -> 367;
378 -> 374;
378 -> 377;
378 -> 367;
379 -> 376;
379 -> 378;
380 -> 378;
381 -> 379;
381 -> 380;
382 -> 369;
382 -> 380;
383 -> 381;
383 -> 380;
384 -> 382;
384 -> 376;
384 -> 380;
385 -> 380;
386 -> 380;
387 -> 383;
387 -> 386;
388 -> 384;
388 -> 386;
389 -> 384;
389 -> 386;
390 -> 384;
390 -> 386;
391 -> 384;
391 -> 386;
392 -> 385;
392 -> 386;
393 -> 385;
393 -> 386;
394 -> 386;
394 -> 387;
394 -> 388;
394 -> 389;
394 -> 390;
394 -> 391;
394 -> 376;
395 -> 385;
395 -> 378;
396 -> 395;
396 -> 340;
397 -> 342;
397 -> 394;
397 -> 340;
398 -> 362;
398 -> 340;
399 -> 396;
399 -> 340;
400 -> 340;
401 -> 397;
401 -> 400;
402 -> 398;
402 -> 400;
403 -> 399;
403 -> 400;
404 -> 342;
404 -> 400;
405 -> 404;
405 -> 394;
405 -> 400;
406 -> 400;
407 -> 404;
407 -> 406;
408 -> 407;
408 -> 394;
408 -> 406;
409 -> 408;
409 -> 406;
410 -> 409;
410 -> 400;
411 -> 404;
411 -> 394;
411 -> 386;
411 -> 392;
411 -> 400;
412 -> 400;
413 -> 411;
413 -> 412;
414 -> 413;
414 -> 411;
414 -> 412;
415 -> 400;
416 -> 414;
416 -> 415;
417 -> 401;
417 -> 400;
418 -> 402;
418 -> 400;
419 -> 403;
419 -> 400;
420 -> 400;
421 -> 400;
422 -> 405;
422 -> 421;
423 -> 405;
423 -> 421;
424 -> 405;
424 -> 421;
425 -> 410;
425 -> 421;
426 -> 414;
426 -> 421;
427 -> 416;
427 -> 421;
428 -> 416;
428 -> 421;
429 -> 417;
429 -> 421;
430 -> 418;
430 -> 421;
431 -> 419;
431 -> 421;
432 -> 416;
432 -> 421;
433 -> 420;
433 -> 421;
434 -> 420;
434 -> 421;
435 -> 425;
435 -> 421;
436 -> 426;
436 -> 421;
437 -> 427;
437 -> 421;
438 -> 431;
438 -> 416;
438 -> 421;
439 -> 433;
439 -> 421;
440 -> 421;
441 -> 435;
441 -> 440;
442 -> 436;
442 -> 440;
443 -> 437;
443 -> 440;
444 -> 439;
444 -> 440;
445 -> 434;
445 -> 440;
446 -> 444;
446 -> 440;
447 -> 440;
448 -> 447;
448 -> 440;
449 -> 447;
449 -> 440;
450 -> 447;
450 -> 440;
451 -> 447;
451 -> 440;
452 -> 447;
452 -> 440;
453 -> 447;
453 -> 440;
454 -> 447;
454 -> 440;
455 -> 447;
455 -> 440;
456 -> 447;
456 -> 440;
457 -> 447;
457 -> 440;
458 -> 447;
458 -> 440;
459 -> 447;
459 -> 440;
460 -> 447;
460 -> 440;
461 -> 447;
461 -> 440;
462 -> 447;
462 -> 440;
463 -> 447;
463 -> 440;
464 -> 447;
464 -> 440;
465 -> 447;
465 -> 440;
466 -> 447;
466 -> 440;
467 -> 447;
467 -> 440;
468 -> 447;
468 -> 440;
469 -> 447;
469 -> 440;
470 -> 447;
470 -> 440;
471 -> 447;
471 -> 440;
472 -> 447;
472 -> 440;
473 -> 447;
473 -> 440;
474 -> 440;
475 -> 474;
475 -> 447;
475 -> 440;
476 -> 447;
476 -> 440;
477 -> 447;
477 -> 440;
478 -> 440;
479 -> 440;
480 -> 477;
480 -> 479;
481 -> 478;
481 -> 479;
482 -> 481;
482 -> 479;
483 -> 481;
483 -> 479;
484 -> 481;
484 -> 479;
485 -> 480;
485 -> 481;
485 -> 479;
486 -> 478;
486 -> 447;
486 -> 440;
487 -> 447;
487 -> 440;
488 -> 440;
489 -> 438;
489 -> 488;
490 -> 488;
491 -> 489;
491 -> 488;
492 -> 491;
492 -> 438;
493 -> 491;
494 -> 492;
494 -> 493;
495 -> 428;
495 -> 440;
496 -> 495;
497 -> 441;
497 -> 496;
497 -> 495;
498 -> 442;
498 -> 496;
498 -> 495;
499 -> 497;
499 -> 498;
499 -> 495;
500 -> 443;
500 -> 496;
500 -> 495;
501 -> 499;
501 -> 500;
501 -> 495;
502 -> 429;
502 -> 430;
503 -> 447;
503 -> 430;
504 -> 429;
504 -> 503;
504 -> 438;
504 -> 494;
504 -> 430;
505 -> 429;
505 -> 447;
505 -> 430;
506 -> 447;
506 -> 504;
506 -> 440;
507 -> 440;
508 -> 447;
508 -> 504;
508 -> 507;
508 -> 440;
509 -> 420;
509 -> 340;
510 -> 509;
510 -> 338;
511 -> 510;
511 -> 504;
511 -> 159;
512 -> 510;
512 -> 159;
513 -> 136;
513 -> 512;
513 -> 504;
513 -> 505;
513 -> 431;
513 -> 72;
514 -> 513;
514 -> 72;
515 -> 72;
516 -> 514;
516 -> 515;
517 -> 515;
518 -> 516;
518 -> 517;
519 -> 517;
520 -> 518;
520 -> 513;
520 -> 519;
521 -> 519;
522 -> 520;
522 -> 513;
522 -> 521;
522 -> 519;
523 -> 520;
523 -> 513;
523 -> 522;
524 -> 522;
525 -> 523;
525 -> 524;
526 -> 523;
526 -> 524;
527 -> 523;
527 -> 524;
528 -> 523;
528 -> 524;
529 -> 523;
529 -> 524;
530 -> 524;
531 -> 524;
532 -> 524;
533 -> 524;
534 -> 524;
535 -> 0;
535 -> 524;
536 -> 525;
536 -> 524;
537 -> 530;
537 -> 536;
538 -> 536;
539 -> 526;
539 -> 536;
540 -> 527;
540 -> 536;
541 -> 528;
541 -> 536;
542 -> 529;
542 -> 536;
543 -> 531;
543 -> 536;
544 -> 532;
544 -> 536;
545 -> 533;
545 -> 536;
546 -> 534;
546 -> 536;
547 -> 535;
547 -> 536;
548 -> 536;
549 -> 537;
549 -> 548;
550 -> 538;
550 -> 548;
551 -> 539;
551 -> 548;
552 -> 540;
552 -> 548;
553 -> 541;
553 -> 548;
554 -> 542;
554 -> 548;
555 -> 543;
555 -> 548;
556 -> 544;
556 -> 548;
557 -> 545;
557 -> 548;
558 -> 546;
558 -> 548;
559 -> 547;
559 -> 548;
560 -> 550;
560 -> 513;
560 -> 548;
561 -> 560;
561 -> 0;
561 -> 548;
562 -> 550;
562 -> 548;
563 -> 551;
563 -> 548;
564 -> 554;
564 -> 548;
565 -> 558;
565 -> 548;
566 -> 559;
566 -> 548;
567 -> 548;
568 -> 562;
568 -> 567;
569 -> 563;
569 -> 567;
570 -> 564;
570 -> 567;
571 -> 565;
571 -> 567;
572 -> 566;
572 -> 567;
573 -> 568;
573 -> 569;
573 -> 570;
573 -> 567;
574 -> 568;
574 -> 567;
575 -> 573;
575 -> 567;
576 -> 571;
576 -> 574;
576 -> 575;
576 -> 534;
576 -> 573;
576 -> 567;
577 -> 573;
577 -> 567;
578 -> 572;
578 -> 577;
578 -> 0;
578 -> 576;
578 -> 567;
579 -> 548;
580 -> 550;
580 -> 548;
581 -> 549;
581 -> 580;
581 -> 530;
581 -> 578;
581 -> 548;
582 -> 550;
582 -> 548;
583 -> 555;
583 -> 531;
583 -> 548;
584 -> 555;
584 -> 582;
584 -> 583;
584 -> 531;
584 -> 581;
584 -> 548;
585 -> 530;
585 -> 584;
585 -> 524;
586 -> 531;
586 -> 584;
586 -> 524;
587 -> 532;
587 -> 524;
588 -> 533;
588 -> 524;
589 -> 578;
589 -> 524;
590 -> 524;
591 -> 524;
592 -> 585;
592 -> 591;
593 -> 586;
593 -> 591;
594 -> 587;
594 -> 591;
595 -> 588;
595 -> 591;
596 -> 586;
596 -> 591;
597 -> 589;
597 -> 591;
598 -> 590;
598 -> 591;
599 -> 598;
599 -> 591;
600 -> 598;
600 -> 591;
601 -> 598;
601 -> 591;
602 -> 598;
602 -> 591;
603 -> 598;
603 -> 591;
604 -> 592;
604 -> 591;
605 -> 592;
605 -> 585;
605 -> 591;
606 -> 592;
606 -> 591;
607 -> 596;
607 -> 604;
607 -> 591;
608 -> 0;
608 -> 591;
609 -> 592;
609 -> 598;
609 -> 591;
610 -> 593;
610 -> 598;
610 -> 591;
611 -> 594;
611 -> 598;
611 -> 591;
612 -> 595;
612 -> 598;
612 -> 591;
613 -> 596;
613 -> 598;
613 -> 591;
614 -> 597;
614 -> 598;
614 -> 591;
615 -> 590;
615 -> 522;
616 -> 522;
617 -> 523;
617 -> 615;
617 -> 616;
617 -> 610;
617 -> 611;
617 -> 612;
617 -> 613;
617 -> 614;
617 -> 609;
617 -> 607;
617 -> 585;
617 -> 587;
617 -> 588;
617 -> 522;
618 -> 520;
618 -> 617;
618 -> 519;
619 -> 618;
619 -> 517;
620 -> 619;
620 -> 515;
621 -> 620;
621 -> 617;
621 -> 515;
622 -> 515;
623 -> 620;
623 -> 622;
623 -> 617;
623 -> 515;
624 -> 0;
624 -> 515;
625 -> 623;
625 -> 624;
625 -> 515;
626 -> 79;
626 -> 625;
626 -> 72;
627 -> 513;
627 -> 72;
628 -> 627;
628 -> 1;
629 -> 1;
630 -> 1;
631 -> 628;
631 -> 630;
632 -> 629;
632 -> 630;
633 -> 630;
634 -> 630;
635 -> 633;
635 -> 634;
636 -> 631;
636 -> 634;
637 -> 0;
637 -> 634;
638 -> 634;
639 -> 635;
639 -> 634;
640 -> 634;
641 -> 637;
641 -> 640;
642 -> 638;
642 -> 640;
643 -> 639;
643 -> 640;
644 -> 636;
644 -> 640;
645 -> 640;
646 -> 641;
646 -> 640;
647 -> 642;
647 -> 640;
648 -> 645;
648 -> 640;
649 -> 643;
649 -> 640;
650 -> 640;
651 -> 646;
651 -> 650;
652 -> 647;
652 -> 650;
653 -> 648;
653 -> 650;
654 -> 649;
654 -> 650;
655 -> 644;
655 -> 650;
656 -> 650;
657 -> 651;
657 -> 0;
657 -> 650;
658 -> 657;
658 -> 652;
658 -> 650;
659 -> 658;
660 -> 655;
660 -> 659;
661 -> 659;
662 -> 660;
662 -> 625;
662 -> 661;
663 -> 661;
664 -> 662;
664 -> 658;
665 -> 658;
666 -> 655;
666 -> 665;
667 -> 666;
667 -> 625;
667 -> 665;
668 -> 667;
668 -> 658;
669 -> 668;
670 -> 664;
670 -> 625;
670 -> 668;
671 -> 654;
671 -> 668;
672 -> 669;
672 -> 670;
672 -> 671;
672 -> 633;
672 -> 668;
673 -> 672;
673 -> 669;
674 -> 672;
674 -> 669;
675 -> 672;
675 -> 669;
676 -> 672;
676 -> 669;
677 -> 669;
678 -> 677;
678 -> 669;
679 -> 669;
680 -> 674;
680 -> 679;
681 -> 680;
681 -> 669;
682 -> 675;
682 -> 669;
683 -> 677;
683 -> 669;
684 -> 681;
684 -> 672;
684 -> 682;
684 -> 683;
684 -> 678;
684 -> 669;
685 -> 658;
686 -> 664;
686 -> 658;
687 -> 654;
687 -> 633;
687 -> 684;
687 -> 686;
688 -> 686;
688 -> 625;
689 -> 651;
689 -> 0;
689 -> 650;
690 -> 689;
690 -> 652;
690 -> 650;
691 -> 656;
691 -> 690;
692 -> 691;
692 -> 655;
692 -> 656;
692 -> 625;
692 -> 690;
693 -> 690;
694 -> 692;
694 -> 693;
695 -> 694;
695 -> 692;
695 -> 693;
696 -> 690;
697 -> 655;
697 -> 696;
698 -> 697;
698 -> 695;
698 -> 696;
699 -> 698;
699 -> 690;
700 -> 690;
701 -> 655;
701 -> 700;
702 -> 701;
702 -> 699;
702 -> 700;
703 -> 702;
703 -> 690;
704 -> 654;
704 -> 687;
704 -> 690;
705 -> 690;
706 -> 655;
706 -> 705;
707 -> 706;
707 -> 699;
707 -> 705;
708 -> 706;
708 -> 707;
709 -> 707;
710 -> 708;
710 -> 709;
711 -> 709;
712 -> 710;
712 -> 711;
713 -> 711;
714 -> 712;
714 -> 708;
714 -> 713;
715 -> 714;
715 -> 711;
716 -> 715;
716 -> 709;
717 -> 708;
717 -> 709;
718 -> 717;
718 -> 716;
718 -> 709;
719 -> 708;
719 -> 709;
720 -> 709;
721 -> 706;
721 -> 718;
721 -> 707;
722 -> 706;
722 -> 718;
722 -> 705;
723 -> 722;
723 -> 690;
724 -> 654;
724 -> 704;
724 -> 690;
725 -> 654;
725 -> 690;
726 -> 690;
727 -> 690;
728 -> 726;
728 -> 727;
729 -> 726;
729 -> 727;
730 -> 726;
730 -> 727;
731 -> 725;
731 -> 727;
732 -> 655;
732 -> 727;
733 -> 727;
734 -> 732;
734 -> 733;
735 -> 734;
735 -> 723;
735 -> 733;
736 -> 733;
737 -> 735;
737 -> 736;
738 -> 737;
738 -> 736;
739 -> 738;
739 -> 735;
739 -> 736;
740 -> 736;
741 -> 739;
741 -> 740;
742 -> 741;
742 -> 739;
742 -> 740;
743 -> 742;
743 -> 740;
744 -> 743;
744 -> 727;
745 -> 731;
745 -> 727;
746 -> 744;
746 -> 745;
746 -> 743;
746 -> 724;
746 -> 727;
747 -> 727;
748 -> 727;
749 -> 728;
749 -> 748;
749 -> 727;
750 -> 727;
751 -> 732;
751 -> 750;
752 -> 750;
753 -> 751;
753 -> 752;
754 -> 752;
755 -> 753;
755 -> 754;
756 -> 755;
756 -> 746;
756 -> 754;
757 -> 755;
757 -> 746;
757 -> 754;
758 -> 757;
758 -> 752;
759 -> 753;
759 -> 746;
759 -> 752;
760 -> 753;
760 -> 759;
760 -> 752;
761 -> 760;
761 -> 750;
762 -> 761;
762 -> 727;
763 -> 747;
763 -> 727;
764 -> 731;
764 -> 727;
765 -> 763;
765 -> 764;
765 -> 762;
765 -> 724;
765 -> 759;
765 -> 727;
766 -> 727;
767 -> 765;
767 -> 766;
768 -> 766;
769 -> 767;
769 -> 768;
770 -> 768;
771 -> 770;
772 -> 769;
772 -> 766;
773 -> 767;
773 -> 766;
774 -> 766;
775 -> 774;
776 -> 775;
777 -> 766;
778 -> 777;
779 -> 765;
779 -> 778;
780 -> 779;
780 -> 772;
780 -> 778;
781 -> 779;
781 -> 772;
781 -> 778;
782 -> 781;
782 -> 777;
783 -> 765;
783 -> 766;
784 -> 783;
784 -> 772;
784 -> 766;
785 -> 766;
786 -> 783;
786 -> 772;
786 -> 785;
786 -> 766;
787 -> 786;
788 -> 783;
788 -> 772;
788 -> 786;
789 -> 787;
789 -> 786;
790 -> 786;
791 -> 783;
791 -> 789;
791 -> 766;
792 -> 765;
792 -> 766;
793 -> 765;
793 -> 766;
794 -> 793;
794 -> 791;
794 -> 766;
795 -> 765;
795 -> 766;
796 -> 765;
796 -> 766;
797 -> 766;
798 -> 796;
798 -> 797;
799 -> 798;
799 -> 791;
799 -> 797;
800 -> 798;
800 -> 791;
800 -> 797;
801 -> 800;
801 -> 766;
802 -> 766;
803 -> 802;
803 -> 801;
803 -> 791;
803 -> 766;
804 -> 802;
804 -> 803;
805 -> 801;
805 -> 804;
805 -> 802;
806 -> 795;
806 -> 805;
806 -> 804;
807 -> 765;
807 -> 766;
808 -> 807;
808 -> 806;
808 -> 766;
809 -> 779;
809 -> 808;
809 -> 778;
810 -> 779;
810 -> 808;
810 -> 778;
811 -> 810;
811 -> 777;
812 -> 765;
812 -> 766;
813 -> 765;
813 -> 766;
814 -> 812;
814 -> 0;
814 -> 766;
815 -> 766;
816 -> 812;
816 -> 766;
817 -> 813;
817 -> 816;
817 -> 808;
817 -> 766;
818 -> 817;
819 -> 818;
820 -> 819;
820 -> 818;
821 -> 818;
821 -> 817;
822 -> 812;
822 -> 817;
823 -> 821;
823 -> 812;
823 -> 766;
824 -> 821;
824 -> 766;
825 -> 765;
825 -> 766;
826 -> 765;
826 -> 766;
827 -> 825;
827 -> 766;
828 -> 827;
828 -> 824;
828 -> 766;
829 -> 825;
829 -> 828;
829 -> 766;
830 -> 766;
831 -> 826;
831 -> 830;
832 -> 830;
833 -> 831;
833 -> 832;
834 -> 832;
835 -> 834;
836 -> 833;
836 -> 835;
837 -> 836;
837 -> 828;
837 -> 835;
838 -> 836;
838 -> 828;
838 -> 835;
839 -> 838;
839 -> 834;
840 -> 833;
840 -> 828;
840 -> 834;
841 -> 840;
841 -> 830;
842 -> 830;
843 -> 841;
843 -> 766;
844 -> 766;
845 -> 826;
845 -> 844;
846 -> 845;
846 -> 841;
846 -> 844;
847 -> 846;
848 -> 847;
848 -> 846;
849 -> 846;
850 -> 848;
850 -> 849;
850 -> 846;
851 -> 850;
851 -> 846;
852 -> 851;
852 -> 845;
852 -> 846;
853 -> 845;
853 -> 850;
853 -> 852;
853 -> 844;
854 -> 853;
854 -> 766;
855 -> 854;
856 -> 825;
856 -> 855;
856 -> 766;
857 -> 836;
857 -> 855;
857 -> 835;
858 -> 836;
858 -> 855;
858 -> 835;
859 -> 858;
859 -> 834;
860 -> 855;
860 -> 766;
861 -> 793;
861 -> 855;
861 -> 766;
862 -> 783;
862 -> 855;
862 -> 766;
863 -> 728;
863 -> 727;
864 -> 863;
865 -> 864;
865 -> 732;
865 -> 863;
866 -> 863;
867 -> 866;
867 -> 732;
867 -> 863;
868 -> 732;
868 -> 855;
868 -> 865;
868 -> 867;
868 -> 727;
869 -> 727;
870 -> 730;
870 -> 869;
870 -> 727;
871 -> 728;
871 -> 727;
872 -> 729;
872 -> 727;
873 -> 731;
873 -> 727;
874 -> 727;
875 -> 871;
875 -> 874;
876 -> 872;
876 -> 874;
877 -> 873;
877 -> 874;
878 -> 732;
878 -> 874;
879 -> 874;
880 -> 875;
880 -> 879;
880 -> 874;
881 -> 878;
881 -> 868;
881 -> 874;
882 -> 881;
883 -> 878;
883 -> 881;
884 -> 882;
884 -> 881;
885 -> 877;
885 -> 881;
886 -> 881;
887 -> 881;
888 -> 883;
888 -> 887;
889 -> 884;
889 -> 887;
890 -> 885;
890 -> 887;
891 -> 886;
891 -> 887;
892 -> 886;
892 -> 887;
893 -> 887;
894 -> 888;
894 -> 887;
895 -> 891;
895 -> 887;
896 -> 892;
896 -> 887;
897 -> 893;
897 -> 887;
898 -> 890;
898 -> 887;
899 -> 887;
900 -> 887;
901 -> 894;
901 -> 900;
902 -> 895;
902 -> 900;
903 -> 896;
903 -> 900;
904 -> 897;
904 -> 900;
905 -> 898;
905 -> 900;
906 -> 899;
906 -> 900;
907 -> 900;
908 -> 907;
908 -> 900;
909 -> 907;
909 -> 900;
910 -> 907;
910 -> 900;
911 -> 907;
911 -> 900;
912 -> 907;
912 -> 900;
913 -> 907;
913 -> 900;
914 -> 901;
914 -> 907;
914 -> 900;
915 -> 902;
915 -> 907;
915 -> 900;
916 -> 903;
916 -> 907;
916 -> 900;
917 -> 904;
917 -> 907;
917 -> 900;
918 -> 905;
918 -> 907;
918 -> 900;
919 -> 0;
919 -> 900;
920 -> 919;
920 -> 907;
920 -> 900;
921 -> 900;
922 -> 907;
922 -> 921;
923 -> 921;
924 -> 922;
924 -> 907;
924 -> 909;
924 -> 915;
924 -> 923;
924 -> 921;
925 -> 921;
926 -> 922;
926 -> 907;
926 -> 908;
926 -> 914;
926 -> 925;
927 -> 924;
927 -> 926;
927 -> 907;
927 -> 868;
927 -> 921;
928 -> 927;
928 -> 900;
929 -> 928;
930 -> 929;
930 -> 907;
930 -> 928;
931 -> 887;
932 -> 888;
932 -> 931;
933 -> 931;
934 -> 932;
934 -> 933;
935 -> 934;
935 -> 931;
936 -> 932;
936 -> 887;
937 -> 936;
937 -> 899;
937 -> 932;
937 -> 907;
937 -> 908;
937 -> 914;
937 -> 909;
937 -> 915;
937 -> 910;
937 -> 916;
937 -> 911;
937 -> 917;
937 -> 912;
937 -> 920;
937 -> 913;
937 -> 930;
937 -> 918;
937 -> 886;
937 -> 893;
937 -> 724;
937 -> 919;
937 -> 929;
937 -> 887;
938 -> 887;
939 -> 937;
939 -> 938;
940 -> 937;
940 -> 938;
941 -> 940;
941 -> 937;
941 -> 938;
942 -> 939;
942 -> 938;
943 -> 939;
943 -> 938;
944 -> 938;
945 -> 943;
945 -> 944;
946 -> 940;
946 -> 944;
947 -> 945;
947 -> 941;
947 -> 0;
947 -> 944;
948 -> 944;
949 -> 945;
949 -> 941;
949 -> 0;
949 -> 944;
950 -> 945;
950 -> 941;
950 -> 0;
950 -> 949;
951 -> 945;
951 -> 941;
951 -> 0;
951 -> 944;
952 -> 945;
952 -> 941;
952 -> 0;
952 -> 944;
953 -> 945;
953 -> 941;
953 -> 0;
953 -> 944;
954 -> 945;
954 -> 941;
954 -> 0;
954 -> 944;
955 -> 945;
955 -> 941;
955 -> 0;
955 -> 944;
956 -> 944;
957 -> 945;
957 -> 944;
958 -> 956;
958 -> 944;
959 -> 946;
959 -> 941;
959 -> 957;
959 -> 958;
959 -> 944;
960 -> 944;
961 -> 945;
961 -> 944;
962 -> 960;
962 -> 944;
963 -> 944;
964 -> 961;
964 -> 963;
965 -> 962;
965 -> 963;
966 -> 946;
966 -> 963;
967 -> 963;
968 -> 964;
968 -> 959;
968 -> 963;
969 -> 963;
970 -> 969;
970 -> 944;
971 -> 970;
971 -> 944;
972 -> 945;
972 -> 968;
972 -> 0;
972 -> 971;
973 -> 0;
973 -> 972;
974 -> 945;
974 -> 968;
974 -> 0;
974 -> 944;
975 -> 974;
975 -> 944;
976 -> 973;
976 -> 975;
977 -> 976;
977 -> 0;
977 -> 938;
978 -> 976;
978 -> 938;
979 -> 938;
980 -> 978;
980 -> 979;
981 -> 980;
981 -> 979;
982 -> 981;
983 -> 938;
984 -> 983;
984 -> 939;
984 -> 976;
984 -> 938;
985 -> 939;
985 -> 976;
985 -> 983;
985 -> 984;
986 -> 984;
987 -> 985;
987 -> 984;
988 -> 986;
988 -> 984;
989 -> 984;
990 -> 987;
990 -> 989;
991 -> 988;
991 -> 989;
992 -> 940;
992 -> 989;
993 -> 989;
994 -> 989;
994 -> 984;
995 -> 984;
996 -> 995;
996 -> 984;
997 -> 993;
997 -> 996;
998 -> 984;
999 -> 997;
999 -> 998;
999 -> 984;
1000 -> 999;
1000 -> 994;
1000 -> 984;
1001 -> 994;
1001 -> 984;
1002 -> 982;
1002 -> 1001;
1003 -> 982;
1003 -> 938;
1004 -> 938;
1005 -> 939;
1005 -> 990;
1005 -> 1004;
1005 -> 938;
1006 -> 1005;
1006 -> 938;
1007 -> 938;
1008 -> 1006;
1008 -> 1007;
1009 -> 940;
1009 -> 1007;
1010 -> 1008;
1010 -> 1005;
1010 -> 0;
1010 -> 1007;
1011 -> 1007;
1012 -> 1008;
1012 -> 1005;
1012 -> 0;
1012 -> 1007;
1013 -> 1008;
1013 -> 1005;
1013 -> 0;
1013 -> 1012;
1014 -> 1008;
1014 -> 1005;
1014 -> 0;
1014 -> 1007;
1015 -> 1008;
1015 -> 1005;
1015 -> 0;
1015 -> 1007;
1016 -> 1008;
1016 -> 1005;
1016 -> 0;
1016 -> 1007;
1017 -> 1008;
1017 -> 1005;
1017 -> 0;
1017 -> 1007;
1018 -> 1008;
1018 -> 1005;
1018 -> 0;
1018 -> 1007;
1019 -> 1007;
1020 -> 1019;
1020 -> 1007;
1021 -> 1007;
1022 -> 1021;
1022 -> 1007;
1023 -> 1007;
1024 -> 1022;
1024 -> 1023;
1025 -> 1009;
1025 -> 1023;
1026 -> 1023;
1027 -> 1023;
1028 -> 1027;
1028 -> 1007;
1029 -> 1028;
1029 -> 1007;
1030 -> 1008;
1031 -> 1008;
1032 -> 1030;
1032 -> 1031;
1033 -> 1009;
1033 -> 1031;
1034 -> 1032;
1034 -> 1008;
1034 -> 0;
1034 -> 1031;
1035 -> 1032;
1035 -> 1008;
1035 -> 1031;
1036 -> 1031;
1037 -> 1035;
1037 -> 1036;
1037 -> 1031;
1038 -> 1035;
1038 -> 1031;
1039 -> 1031;
1040 -> 1038;
1040 -> 1039;
1041 -> 1033;
1041 -> 1039;
1042 -> 1040;
1042 -> 1008;
1042 -> 0;
1042 -> 1039;
1043 -> 1039;
1044 -> 1040;
1044 -> 1008;
1044 -> 0;
1044 -> 1039;
1045 -> 1040;
1045 -> 1008;
1045 -> 0;
1045 -> 1044;
1046 -> 1040;
1046 -> 1008;
1046 -> 0;
1046 -> 1039;
1047 -> 1040;
1047 -> 1008;
1047 -> 0;
1047 -> 1039;
1048 -> 1040;
1048 -> 1008;
1048 -> 0;
1048 -> 1039;
1049 -> 1040;
1049 -> 1008;
1049 -> 0;
1049 -> 1039;
1050 -> 1040;
1050 -> 1008;
1050 -> 0;
1050 -> 1039;
1051 -> 1041;
1051 -> 1008;
1051 -> 1040;
1051 -> 1039;
1052 -> 1051;
1053 -> 1008;
1054 -> 1052;
1054 -> 1053;
1055 -> 1054;
1055 -> 1053;
1056 -> 1055;
1057 -> 938;
1058 -> 1056;
1058 -> 1057;
1059 -> 939;
1059 -> 1051;
1059 -> 938;
1060 -> 938;
1061 -> 1059;
1061 -> 1060;
1062 -> 1059;
1062 -> 1060;
1063 -> 1062;
1063 -> 1059;
1063 -> 1060;
1064 -> 1061;
1064 -> 1060;
1065 -> 1060;
1066 -> 1064;
1066 -> 1065;
1067 -> 1062;
1067 -> 1065;
1068 -> 1066;
1068 -> 1063;
1068 -> 0;
1068 -> 1065;
1069 -> 1068;
1070 -> 1061;
1070 -> 1060;
1071 -> 1060;
1072 -> 1070;
1072 -> 1071;
1073 -> 1062;
1073 -> 1071;
1074 -> 1072;
1074 -> 1063;
1074 -> 0;
1074 -> 1071;
1075 -> 1071;
1076 -> 1072;
1076 -> 1063;
1076 -> 0;
1076 -> 1071;
1077 -> 1072;
1077 -> 1063;
1077 -> 1076;
1078 -> 1076;
1079 -> 1077;
1079 -> 1078;
1080 -> 1079;
1080 -> 1063;
1080 -> 0;
1080 -> 1078;
1081 -> 1078;
1082 -> 1079;
1082 -> 1063;
1082 -> 0;
1083 -> 1079;
1083 -> 1063;
1083 -> 0;
1083 -> 1078;
1084 -> 1079;
1084 -> 1063;
1084 -> 0;
1084 -> 1078;
1085 -> 1079;
1085 -> 1063;
1085 -> 0;
1085 -> 1078;
1086 -> 1079;
1086 -> 1063;
1086 -> 0;
1086 -> 1078;
1087 -> 1079;
1087 -> 1063;
1087 -> 0;
1087 -> 1078;
1088 -> 1079;
1089 -> 1060;
1090 -> 1088;
1090 -> 1089;
1091 -> 1090;
1091 -> 1089;
1092 -> 1091;
1093 -> 1060;
1094 -> 1062;
1094 -> 1093;
1095 -> 1093;
1096 -> 1094;
1096 -> 1079;
1096 -> 1095;
1096 -> 1093;
1097 -> 1093;
1098 -> 1094;
1098 -> 1079;
1098 -> 1097;
1099 -> 1096;
1099 -> 1060;
1100 -> 1061;
1100 -> 1099;
1101 -> 1099;
1102 -> 1100;
1102 -> 1101;
1103 -> 1062;
1103 -> 1101;
1104 -> 1102;
1104 -> 1079;
1104 -> 1101;
1105 -> 1104;
1106 -> 1103;
1106 -> 1104;
1107 -> 1099;
1108 -> 887;
1109 -> 899;
1109 -> 1108;
1110 -> 1109;
1110 -> 1106;
1110 -> 1108;
1111 -> 1108;
1112 -> 1110;
1112 -> 1111;
1112 -> 1108;
1113 -> 1108;
1114 -> 1110;
1114 -> 1113;
1114 -> 1106;
1114 -> 1108;
1115 -> 1114;
1116 -> 887;
1117 -> 893;
1117 -> 887;
1118 -> 1117;
1118 -> 1115;
1118 -> 887;
1119 -> 878;
1119 -> 1115;
1119 -> 881;
1120 -> 882;
1120 -> 881;
1121 -> 1119;
1121 -> 1120;
1121 -> 1115;
1121 -> 881;
1122 -> 878;
1122 -> 1121;
1122 -> 874;
1123 -> 878;
1123 -> 1121;
1123 -> 874;
1124 -> 868;
1124 -> 727;
1125 -> 1124;
1125 -> 1121;
1125 -> 727;
1126 -> 1123;
1126 -> 727;
1127 -> 690;
1128 -> 655;
1128 -> 1126;
1128 -> 1127;
1128 -> 690;
1129 -> 654;
1129 -> 1126;
1129 -> 650;
1130 -> 651;
1130 -> 0;
1130 -> 650;
1131 -> 1130;
1132 -> 1131;
1132 -> 1130;
1133 -> 654;
1133 -> 1130;
1134 -> 1130;
1135 -> 1132;
1135 -> 1134;
1136 -> 1133;
1136 -> 1134;
1137 -> 655;
1137 -> 1134;
1138 -> 1137;
1138 -> 1134;
1139 -> 1134;
1140 -> 1135;
1140 -> 1134;
1141 -> 1136;
1141 -> 1134;
1142 -> 1134;
1143 -> 1138;
1143 -> 1142;
1144 -> 1139;
1144 -> 1142;
1145 -> 1139;
1145 -> 1142;
1146 -> 1139;
1146 -> 1142;
1147 -> 1139;
1147 -> 1142;
1148 -> 1140;
1148 -> 1142;
1149 -> 1139;
1149 -> 1142;
1150 -> 1141;
1150 -> 1142;
1151 -> 1142;
1152 -> 1143;
1152 -> 1151;
1152 -> 1142;
1153 -> 1142;
1154 -> 1148;
1154 -> 1153;
1154 -> 1142;
1155 -> 1142;
1156 -> 1143;
1156 -> 1155;
1157 -> 1156;
1157 -> 1129;
1157 -> 1155;
1158 -> 1157;
1158 -> 1142;
1159 -> 1142;
1160 -> 1142;
1161 -> 1149;
1161 -> 1142;
1162 -> 1143;
1162 -> 1161;
1163 -> 1144;
1163 -> 1161;
1164 -> 1147;
1164 -> 1161;
1165 -> 1148;
1165 -> 1161;
1166 -> 1150;
1166 -> 1161;
1167 -> 1161;
1168 -> 1162;
1168 -> 1167;
1169 -> 1163;
1169 -> 1167;
1170 -> 1164;
1170 -> 1167;
1171 -> 1165;
1171 -> 1167;
1172 -> 1166;
1172 -> 1167;
1173 -> 1172;
1173 -> 1167;
1174 -> 1167;
1175 -> 1173;
1175 -> 1174;
1176 -> 1168;
1176 -> 1174;
1177 -> 1174;
1178 -> 1176;
1178 -> 1129;
1178 -> 1177;
1178 -> 1174;
1179 -> 1178;
1180 -> 1176;
1180 -> 1178;
1181 -> 1178;
1182 -> 1181;
1183 -> 1182;
1183 -> 1181;
1184 -> 1178;
1185 -> 1184;
1185 -> 1180;
1186 -> 1185;
1186 -> 1178;
1187 -> 1178;
1188 -> 1176;
1188 -> 1187;
1189 -> 1188;
1189 -> 1180;
1189 -> 1187;
1190 -> 1187;
1191 -> 1189;
1191 -> 1190;
1192 -> 1191;
1192 -> 1189;
1192 -> 1190;
1193 -> 1190;
1194 -> 1192;
1194 -> 1193;
1195 -> 1193;
1196 -> 1194;
1196 -> 1195;
1197 -> 1195;
1198 -> 1196;
1198 -> 1197;
1199 -> 1198;
1199 -> 1195;
1200 -> 1196;
1200 -> 1193;
1201 -> 1192;
1201 -> 1193;
1202 -> 1193;
1203 -> 1201;
1203 -> 1202;
1204 -> 1203;
1204 -> 1200;
1204 -> 1202;
1205 -> 1204;
1205 -> 1193;
1206 -> 1205;
1206 -> 1178;
1207 -> 1186;
1207 -> 1206;
1207 -> 1178;
1208 -> 1180;
1208 -> 1207;
1210 -> 0;
1212 -> 1209;
1212 -> 1211;
1213 -> 1210;
1213 -> 1211;
1214 -> 1211;
1215 -> 1214;
1215 -> 1211;
1216 -> 1212;
1216 -> 1214;
1216 -> 1211;
1217 -> 1213;
1217 -> 1214;
1217 -> 1211;
1218 -> 1211;
1219 -> 1218;
1219 -> 1208;
1220 -> 1176;
1220 -> 1205;
1220 -> 1178;
1221 -> 1219;
1221 -> 1178;
1222 -> 1178;
1223 -> 1220;
1223 -> 1221;
1223 -> 1222;
1223 -> 1216;
1223 -> 1217;
1223 -> 1205;
1223 -> 0;
1223 -> 1178;
1224 -> 1176;
1224 -> 1223;
1224 -> 1174;
1225 -> 1224;
1225 -> 1167;
1226 -> 1225;
1226 -> 1223;
1226 -> 1167;
1227 -> 1225;
1227 -> 1223;
1227 -> 1167;
1228 -> 1171;
1228 -> 1227;
1228 -> 1131;
1228 -> 1223;
1228 -> 1167;
1229 -> 1225;
1229 -> 1228;
1229 -> 1167;
1230 -> 1167;
1231 -> 1229;
1231 -> 1230;
1231 -> 1167;
1232 -> 1231;
1233 -> 1143;
1233 -> 1142;
1234 -> 1144;
1234 -> 1142;
1235 -> 1145;
1235 -> 1142;
1236 -> 1146;
1236 -> 1142;
1237 -> 1147;
1237 -> 1142;
1238 -> 1148;
1238 -> 1142;
1239 -> 1149;
1239 -> 1142;
1240 -> 1232;
1240 -> 1142;
1241 -> 1150;
1241 -> 1142;
1242 -> 1142;
1243 -> 1142;
1244 -> 1233;
1244 -> 1243;
1245 -> 1234;
1245 -> 1243;
1246 -> 1235;
1246 -> 1243;
1247 -> 1236;
1247 -> 1243;
1248 -> 1237;
1248 -> 1243;
1249 -> 1238;
1249 -> 1243;
1250 -> 1239;
1250 -> 1243;
1251 -> 1240;
1251 -> 1243;
1252 -> 1241;
1252 -> 1243;
1253 -> 1242;
1253 -> 1243;
1254 -> 1243;
1255 -> 1254;
1255 -> 1243;
1256 -> 1254;
1256 -> 1243;
1257 -> 1254;
1257 -> 1243;
1258 -> 1254;
1258 -> 1243;
1259 -> 1254;
1259 -> 1243;
1260 -> 1254;
1260 -> 1243;
1261 -> 1254;
1261 -> 1243;
1262 -> 1254;
1262 -> 1243;
1263 -> 1254;
1263 -> 1243;
1264 -> 1254;
1264 -> 1243;
1265 -> 1254;
1265 -> 1243;
1266 -> 1243;
1267 -> 1244;
1267 -> 1266;
1267 -> 1243;
1268 -> 1243;
1269 -> 1249;
1269 -> 1268;
1269 -> 1243;
1270 -> 1244;
1270 -> 1254;
1270 -> 1243;
1271 -> 1245;
1271 -> 1254;
1271 -> 1243;
1272 -> 1246;
1272 -> 1254;
1272 -> 1243;
1273 -> 1252;
1273 -> 1254;
1273 -> 1243;
1274 -> 1249;
1274 -> 1254;
1274 -> 1243;
1275 -> 1250;
1275 -> 1254;
1275 -> 1243;
1276 -> 1251;
1276 -> 1254;
1276 -> 1243;
1277 -> 1248;
1277 -> 1254;
1277 -> 1243;
1278 -> 1248;
1278 -> 1243;
1279 -> 1243;
1280 -> 1278;
1280 -> 1279;
1281 -> 1254;
1281 -> 1279;
1282 -> 1280;
1282 -> 1279;
1283 -> 1243;
1284 -> 1246;
1284 -> 1247;
1284 -> 1243;
1285 -> 1247;
1285 -> 1254;
1285 -> 1243;
1286 -> 1142;
1287 -> 1143;
1287 -> 1286;
1288 -> 1287;
1288 -> 1228;
1288 -> 1286;
1289 -> 1288;
1289 -> 1142;
1290 -> 1289;
1291 -> 1290;
1291 -> 1242;
1291 -> 1289;
1292 -> 1142;
1293 -> 1143;
1293 -> 1292;
1294 -> 1292;
1295 -> 1293;
1295 -> 1294;
1296 -> 1294;
1297 -> 1295;
1297 -> 1296;
1298 -> 1296;
1299 -> 1297;
1299 -> 1298;
1300 -> 1299;
1300 -> 1228;
1300 -> 1298;
1301 -> 1299;
1301 -> 1228;
1301 -> 1298;
1302 -> 1301;
1302 -> 1296;
1303 -> 1297;
1303 -> 1228;
1303 -> 1296;
1304 -> 1292;
1305 -> 1303;
1305 -> 1142;
1306 -> 1142;
1307 -> 1305;
1307 -> 1306;
1308 -> 1242;
1308 -> 1306;
1309 -> 1307;
1309 -> 1303;
1309 -> 1306;
1310 -> 1308;
1310 -> 1309;
1311 -> 1309;
1312 -> 1310;
1312 -> 1311;
1312 -> 1309;
1312 -> 1254;
1312 -> 1255;
1312 -> 1270;
1312 -> 1256;
1312 -> 1272;
1312 -> 1257;
1312 -> 1285;
1312 -> 1258;
1312 -> 1274;
1312 -> 1259;
1312 -> 1277;
1312 -> 1260;
1312 -> 1271;
1312 -> 1261;
1312 -> 1275;
1312 -> 1262;
1312 -> 1263;
1312 -> 1276;
1312 -> 1264;
1312 -> 1291;
1312 -> 1265;
1312 -> 1273;
1312 -> 1129;
1312 -> 1290;
1313 -> 1312;
1313 -> 1311;
1314 -> 1312;
1314 -> 1311;
1315 -> 1312;
1315 -> 1311;
1316 -> 1315;
1316 -> 1312;
1316 -> 1311;
1317 -> 1313;
1317 -> 1311;
1318 -> 1311;
1319 -> 1316;
1319 -> 1318;
1320 -> 1317;
1320 -> 1318;
1321 -> 1318;
1322 -> 1319;
1322 -> 1321;
1322 -> 1318;
1323 -> 1311;
1324 -> 1315;
1324 -> 1312;
1324 -> 1311;
1325 -> 1311;
1326 -> 1315;
1326 -> 1324;
1326 -> 1325;
1327 -> 1326;
1327 -> 1311;
1328 -> 1313;
1328 -> 1327;
1329 -> 1327;
1330 -> 1328;
1330 -> 1329;
1331 -> 1315;
1331 -> 1329;
1332 -> 1329;
1333 -> 1331;
1333 -> 1324;
1333 -> 1329;
1334 -> 1333;
1334 -> 1327;
1335 -> 1334;
1335 -> 1327;
1336 -> 1311;
1337 -> 1312;
1337 -> 1336;
1337 -> 1335;
1337 -> 1309;
1338 -> 1142;
1339 -> 1142;
1340 -> 1242;
1340 -> 1339;
1341 -> 1340;
1341 -> 1337;
1341 -> 1339;
1342 -> 1339;
1343 -> 1341;
1343 -> 1342;
1343 -> 1339;
1344 -> 1339;
1345 -> 1344;
1345 -> 1339;
1346 -> 1341;
1346 -> 1345;
1346 -> 1337;
1346 -> 1339;
1347 -> 1346;
1348 -> 1142;
1349 -> 1142;
1350 -> 1144;
1350 -> 1349;
1350 -> 1142;
1351 -> 1142;
1352 -> 1144;
1352 -> 1351;
1352 -> 1142;
1353 -> 1142;
1354 -> 1143;
1354 -> 1353;
1355 -> 1354;
1355 -> 1347;
1355 -> 1353;
1356 -> 1355;
1356 -> 1142;
1357 -> 1142;
1358 -> 1149;
1358 -> 1357;
1358 -> 1142;
1359 -> 1143;
1359 -> 1358;
1360 -> 1148;
1360 -> 1358;
1361 -> 1150;
1361 -> 1358;
1362 -> 1358;
1363 -> 1359;
1363 -> 1362;
1364 -> 1360;
1364 -> 1362;
1365 -> 1361;
1365 -> 1362;
1366 -> 1362;
1367 -> 1363;
1367 -> 1366;
1368 -> 1366;
1369 -> 1367;
1369 -> 1368;
1370 -> 1368;
1371 -> 1369;
1371 -> 1370;
1372 -> 1371;
1372 -> 1356;
1372 -> 1370;
1373 -> 1371;
1373 -> 1356;
1373 -> 1370;
1374 -> 1373;
1374 -> 1368;
1375 -> 1369;
1375 -> 1356;
1375 -> 1368;
1376 -> 1375;
1376 -> 1362;
1377 -> 1365;
1377 -> 1362;
1378 -> 1377;
1378 -> 1376;
1378 -> 1129;
1378 -> 1375;
1378 -> 1362;
1379 -> 1362;
1380 -> 1364;
1380 -> 1378;
1380 -> 1362;
1381 -> 1358;
1382 -> 1358;
1383 -> 1144;
1383 -> 1382;
1383 -> 1358;
1388 -> 1385;
1388 -> 1384;
1389 -> 1386;
1389 -> 1384;
1390 -> 1387;
1390 -> 1384;
1391 -> 1384;
1392 -> 1137;
1392 -> 1134;
1393 -> 1134;
1394 -> 1135;
1394 -> 1134;
1395 -> 1136;
1395 -> 1134;
1396 -> 1134;
1397 -> 1392;
1397 -> 1396;
1398 -> 1393;
1398 -> 1396;
1399 -> 1393;
1399 -> 1396;
1400 -> 1394;
1400 -> 1396;
1401 -> 1395;
1401 -> 1396;
1402 -> 1393;
1402 -> 1396;
1403 -> 1393;
1403 -> 1396;
1404 -> 1396;
1405 -> 1396;
1406 -> 1399;
1406 -> 1405;
1406 -> 1396;
1407 -> 1396;
1408 -> 1397;
1408 -> 1407;
1409 -> 1407;
1410 -> 1408;
1410 -> 1409;
1411 -> 1410;
1411 -> 1380;
1411 -> 1409;
1412 -> 1410;
1412 -> 1380;
1412 -> 1409;
1413 -> 1412;
1413 -> 1407;
1414 -> 1408;
1414 -> 1380;
1414 -> 1407;
1415 -> 1414;
1415 -> 1396;
1416 -> 1415;
1416 -> 1398;
1416 -> 1396;
1417 -> 1397;
1417 -> 1396;
1418 -> 1404;
1418 -> 1396;
1419 -> 1402;
1419 -> 1396;
1420 -> 1403;
1420 -> 1396;
1421 -> 1396;
1422 -> 1400;
1422 -> 1396;
1423 -> 1401;
1423 -> 1396;
1424 -> 1396;
1425 -> 1416;
1425 -> 1424;
1426 -> 1417;
1426 -> 1424;
1427 -> 1418;
1427 -> 1424;
1428 -> 1419;
1428 -> 1424;
1429 -> 1420;
1429 -> 1424;
1430 -> 1421;
1430 -> 1424;
1431 -> 1421;
1431 -> 1424;
1432 -> 1422;
1432 -> 1424;
1433 -> 1423;
1433 -> 1424;
1434 -> 1421;
1434 -> 1424;
1435 -> 1424;
1436 -> 1435;
1436 -> 1424;
1437 -> 1435;
1437 -> 1424;
1438 -> 1435;
1438 -> 1424;
1439 -> 1435;
1439 -> 1424;
1440 -> 1435;
1440 -> 1424;
1441 -> 1435;
1441 -> 1424;
1442 -> 1435;
1442 -> 1424;
1443 -> 1435;
1443 -> 1424;
1444 -> 1435;
1444 -> 1424;
1445 -> 1435;
1445 -> 1424;
1446 -> 1435;
1446 -> 1424;
1447 -> 1435;
1447 -> 1424;
1448 -> 1425;
1448 -> 1435;
1448 -> 1424;
1449 -> 1426;
1449 -> 1435;
1449 -> 1424;
1450 -> 1427;
1450 -> 1435;
1450 -> 1424;
1451 -> 1428;
1451 -> 1435;
1451 -> 1424;
1452 -> 1429;
1452 -> 1435;
1452 -> 1424;
1453 -> 1430;
1453 -> 1435;
1453 -> 1424;
1454 -> 1431;
1454 -> 1435;
1454 -> 1424;
1455 -> 1432;
1455 -> 1435;
1455 -> 1424;
1456 -> 1433;
1456 -> 1435;
1456 -> 1424;
1457 -> 1396;
1458 -> 1397;
1458 -> 1457;
1459 -> 1457;
1460 -> 1458;
1460 -> 1459;
1461 -> 1460;
1461 -> 1414;
1461 -> 1459;
1462 -> 1460;
1462 -> 1414;
1462 -> 1459;
1463 -> 1462;
1463 -> 1457;
1464 -> 1458;
1464 -> 1414;
1464 -> 1457;
1465 -> 1464;
1465 -> 1396;
1466 -> 1465;
1466 -> 1421;
1466 -> 1464;
1466 -> 1435;
1466 -> 1436;
1466 -> 1448;
1466 -> 1437;
1466 -> 1449;
1466 -> 1438;
1466 -> 1450;
1466 -> 1439;
1466 -> 1451;
1466 -> 1440;
1466 -> 1452;
1466 -> 1441;
1466 -> 1453;
1466 -> 1442;
1466 -> 1454;
1466 -> 1443;
1466 -> 1455;
1466 -> 1444;
1466 -> 1445;
1466 -> 1446;
1466 -> 1447;
1466 -> 1456;
1466 -> 1393;
1466 -> 1129;
1466 -> 1396;
1467 -> 1396;
1468 -> 1466;
1468 -> 1467;
1469 -> 1466;
1469 -> 1467;
1470 -> 1469;
1470 -> 1466;
1470 -> 1467;
1471 -> 1468;
1471 -> 1470;
1471 -> 1467;
1472 -> 1471;
1473 -> 1471;
1474 -> 1471;
1475 -> 1473;
1475 -> 1474;
1476 -> 1469;
1476 -> 1474;
1477 -> 1476;
1477 -> 1470;
1477 -> 1474;
1478 -> 1474;
1479 -> 1477;
1480 -> 1471;
1481 -> 1471;
1482 -> 1480;
1482 -> 1481;
1483 -> 1469;
1483 -> 1481;
1484 -> 1483;
1484 -> 1470;
1484 -> 1481;
1485 -> 1481;
1486 -> 1484;
1487 -> 1471;
1488 -> 1469;
1488 -> 1487;
1489 -> 1488;
1489 -> 1470;
1489 -> 1487;
1490 -> 1471;
1491 -> 1471;
1492 -> 1491;
1492 -> 1471;
1493 -> 1492;
1494 -> 1492;
1495 -> 1493;
1495 -> 1494;
1496 -> 1469;
1496 -> 1494;
1497 -> 1496;
1497 -> 1470;
1497 -> 1494;
1498 -> 1494;
1499 -> 1497;
1500 -> 1492;
1501 -> 1469;
1501 -> 1500;
1502 -> 1501;
1502 -> 1470;
1502 -> 1489;
1502 -> 1500;
1503 -> 1492;
1504 -> 1492;
1505 -> 1469;
1505 -> 1470;
1505 -> 1504;
1505 -> 1492;
1506 -> 1492;
1507 -> 1504;
1507 -> 1506;
1508 -> 1504;
1508 -> 1506;
1509 -> 1469;
1509 -> 1506;
1510 -> 1507;
1510 -> 1506;
1511 -> 1508;
1511 -> 1506;
1512 -> 1510;
1512 -> 1511;
1512 -> 1506;
1513 -> 1506;
1514 -> 1512;
1514 -> 1513;
1515 -> 1509;
1515 -> 1513;
1516 -> 1515;
1516 -> 1470;
1516 -> 1513;
1517 -> 1513;
1518 -> 1516;
1519 -> 1506;
1520 -> 1492;
1521 -> 1469;
1521 -> 1520;
1522 -> 1521;
1522 -> 1470;
1522 -> 1489;
1522 -> 1502;
1522 -> 1520;
1523 -> 1520;
1524 -> 1521;
1524 -> 1470;
1524 -> 1489;
1524 -> 1502;
1524 -> 1522;
1524 -> 1523;
1524 -> 1520;
1525 -> 1492;
1526 -> 1492;
1527 -> 1492;
1528 -> 1526;
1528 -> 1527;
1529 -> 1469;
1529 -> 1527;
1530 -> 1529;
1530 -> 1470;
1530 -> 1527;
1531 -> 1527;
1532 -> 1530;
1533 -> 1471;
1534 -> 1471;
1535 -> 1533;
1535 -> 1534;
1536 -> 1469;
1536 -> 1534;
1537 -> 1536;
1537 -> 1470;
1537 -> 1534;
1538 -> 1534;
1539 -> 1537;
1540 -> 1471;
1541 -> 1469;
1541 -> 1540;
1542 -> 1541;
1542 -> 1470;
1542 -> 1489;
1542 -> 1502;
1542 -> 1522;
1542 -> 1540;
1543 -> 1471;
1544 -> 1469;
1544 -> 1470;
1544 -> 1467;
1545 -> 1468;
1545 -> 1470;
1545 -> 1489;
1545 -> 1502;
1545 -> 1522;
1545 -> 1542;
1545 -> 1467;
1546 -> 1469;
1546 -> 1470;
1546 -> 1489;
1546 -> 1502;
1546 -> 1522;
1546 -> 1542;
1546 -> 1545;
1547 -> 1469;
1547 -> 1545;
1548 -> 1547;
1548 -> 1545;
1548 -> 1546;
1548 -> 1470;
1548 -> 1489;
1548 -> 1502;
1548 -> 1522;
1548 -> 1542;
1549 -> 1545;
1550 -> 1548;
1550 -> 1549;
1551 -> 1548;
1551 -> 1549;
1552 -> 1551;
1552 -> 1548;
1552 -> 1549;
1553 -> 1549;
1554 -> 1551;
1554 -> 1552;
1554 -> 1553;
1554 -> 1549;
1555 -> 1550;
1555 -> 1549;
1556 -> 1549;
1557 -> 1555;
1557 -> 1556;
1558 -> 1551;
1558 -> 1556;
1559 -> 1558;
1559 -> 1552;
1559 -> 1556;
1560 -> 1557;
1560 -> 1556;
1561 -> 1556;
1562 -> 1560;
1562 -> 1561;
1563 -> 1562;
1563 -> 1561;
1564 -> 1563;
1564 -> 1559;
1564 -> 1561;
1565 -> 1556;
1566 -> 1558;
1566 -> 1564;
1566 -> 1565;
1566 -> 1556;
1567 -> 1557;
1567 -> 1556;
1568 -> 1567;
1568 -> 1564;
1568 -> 1556;
1569 -> 1568;
1569 -> 1556;
1570 -> 1556;
1571 -> 1556;
1572 -> 1571;
1572 -> 1556;
1573 -> 1557;
1573 -> 1556;
1574 -> 1570;
1574 -> 1556;
1575 -> 1571;
1575 -> 1556;
1576 -> 1556;
1577 -> 1573;
1577 -> 1576;
1578 -> 1574;
1578 -> 1576;
1579 -> 1575;
1579 -> 1576;
1580 -> 1558;
1580 -> 1576;
1581 -> 0;
1581 -> 1576;
1582 -> 1576;
1583 -> 1576;
1584 -> 1577;
1584 -> 1568;
1584 -> 1576;
1585 -> 1584;
1585 -> 1568;
1586 -> 1585;
1586 -> 1581;
1586 -> 1584;
1587 -> 1586;
1587 -> 1584;
1588 -> 1584;
1589 -> 1580;
1589 -> 1588;
1589 -> 1584;
1590 -> 1589;
1590 -> 1584;
1591 -> 1576;
1592 -> 1583;
1592 -> 1591;
1592 -> 1576;
1593 -> 0;
1593 -> 1592;
1594 -> 1576;
1595 -> 1594;
1595 -> 1556;
1596 -> 1593;
1596 -> 0;
1596 -> 1556;
1597 -> 1587;
1597 -> 0;
1597 -> 1596;
1598 -> 1596;
1599 -> 1549;
1600 -> 1551;
1600 -> 1589;
1600 -> 1549;
1601 -> 1550;
1601 -> 1589;
1601 -> 1600;
1602 -> 1551;
1602 -> 1601;
1603 -> 1551;
1603 -> 1601;
1604 -> 1603;
1604 -> 1601;
1604 -> 1602;
1605 -> 1601;
1606 -> 1604;
1607 -> 1468;
1607 -> 1604;
1607 -> 1467;
1608 -> 1607;
1609 -> 1608;
1610 -> 1607;
1611 -> 1607;
1612 -> 1607;
1613 -> 1611;
1613 -> 1612;
1614 -> 1469;
1614 -> 1612;
1615 -> 1614;
1615 -> 1604;
1615 -> 1612;
1616 -> 1612;
1617 -> 1615;
1618 -> 1607;
1619 -> 1618;
1619 -> 1604;
1619 -> 1608;
1620 -> 1618;
1621 -> 1618;
1621 -> 1604;
1621 -> 1608;
1621 -> 1619;
1621 -> 1620;
1622 -> 1607;
1623 -> 1607;
1624 -> 1607;
1625 -> 1623;
1625 -> 1624;
1626 -> 1469;
1626 -> 1624;
1627 -> 1626;
1627 -> 1604;
1627 -> 1624;
1628 -> 1624;
1629 -> 1627;
1630 -> 1396;
1631 -> 1421;
1631 -> 1619;
1631 -> 1630;
1631 -> 1396;
1632 -> 1404;
1632 -> 1396;
1633 -> 1396;
1634 -> 1402;
1634 -> 1633;
1634 -> 1396;
1635 -> 1634;
1636 -> 1397;
1636 -> 1635;
1637 -> 1635;
1638 -> 1636;
1638 -> 1619;
1638 -> 1637;
1639 -> 1637;
1640 -> 1638;
1640 -> 1634;
1641 -> 1640;
1642 -> 1400;
1642 -> 1640;
1643 -> 1401;
1643 -> 1640;
1644 -> 1640;
1645 -> 1641;
1645 -> 1644;
1646 -> 1641;
1646 -> 1644;
1647 -> 1642;
1647 -> 1644;
1648 -> 1643;
1648 -> 1644;
1649 -> 1645;
1649 -> 1644;
1650 -> 1134;
1651 -> 1135;
1651 -> 1134;
1652 -> 1136;
1652 -> 1134;
1653 -> 1134;
1654 -> 1650;
1654 -> 1653;
1655 -> 1651;
1655 -> 1653;
1656 -> 1652;
1656 -> 1653;
1657 -> 1137;
1657 -> 1653;
1658 -> 1653;
1659 -> 1657;
1659 -> 1649;
1659 -> 1658;
1659 -> 1653;
1660 -> 1654;
1660 -> 1653;
1661 -> 1653;
1662 -> 1660;
1662 -> 1661;
1663 -> 1657;
1663 -> 1661;
1664 -> 1661;
1665 -> 1663;
1665 -> 1649;
1665 -> 1664;
1665 -> 1661;
1666 -> 1653;
1667 -> 1130;
1668 -> 1131;
1668 -> 1130;
1669 -> 656;
1669 -> 1668;
1669 -> 1649;
1669 -> 1130;
1670 -> 653;
1670 -> 650;
1671 -> 656;
1671 -> 650;
1672 -> 654;
1672 -> 650;
1673 -> 1670;
1673 -> 1671;
1673 -> 1672;
1673 -> 655;
1673 -> 645;
1673 -> 1669;
1673 -> 650;
1674 -> 650;
1675 -> 640;
1676 -> 645;
1676 -> 1673;
1676 -> 640;
1677 -> 1676;
1677 -> 630;
1678 -> 632;
1678 -> 630;
1679 -> 630;
1680 -> 1677;
1680 -> 1679;
1681 -> 1678;
1681 -> 1679;
1682 -> 1680;
1682 -> 1679;
1683 -> 1681;
1683 -> 1679;
1684 -> 1679;
1685 -> 1682;
1685 -> 1684;
1686 -> 1683;
1686 -> 1684;
1687 -> 1685;
1687 -> 1684;
1688 -> 1686;
1688 -> 1684;
1689 -> 1684;
1690 -> 1684;
1691 -> 1687;
1691 -> 1690;
1692 -> 1688;
1692 -> 1690;
1693 -> 1689;
1693 -> 1690;
1694 -> 1690;
1695 -> 1692;
1695 -> 1694;
1695 -> 1690;
1696 -> 1692;
1696 -> 1690;
1697 -> 1692;
1697 -> 1690;
1698 -> 1691;
1698 -> 1690;
1699 -> 1693;
1699 -> 1696;
1699 -> 1697;
1699 -> 1690;
1700 -> 1698;
1700 -> 1699;
1700 -> 1690;
1701 -> 1692;
1701 -> 1690;
1702 -> 1690;
1703 -> 1700;
1703 -> 1702;
1703 -> 1690;
1704 -> 1690;
1706 -> 1705;
1708 -> 1707;
1709 -> 1692;
1709 -> 1690;
1710 -> 1691;
1710 -> 1690;
1711 -> 1690;
1712 -> 1709;
1712 -> 1711;
1713 -> 1710;
1713 -> 1711;
1714 -> 1711;
1715 -> 1711;
1716 -> 1713;
1716 -> 1711;
1717 -> 1716;
1717 -> 1700;
1717 -> 1711;
1718 -> 1717;
1718 -> 1711;
1719 -> 1715;
1719 -> 1718;
1720 -> 1719;
1720 -> 1714;
1720 -> 1711;
1721 -> 1719;
1721 -> 1714;
1721 -> 1711;
1722 -> 1721;
1722 -> 1711;
1723 -> 1712;
1723 -> 1711;
1724 -> 1712;
1724 -> 1711;
1725 -> 1712;
1725 -> 1711;
1726 -> 1711;
1727 -> 1725;
1727 -> 1726;
1729 -> 1728;
1730 -> 1728;
1731 -> 1730;
1731 -> 1726;
1732 -> 1726;
1733 -> 1727;
1733 -> 1726;
1734 -> 1726;
1735 -> 1734;
1735 -> 1711;
1736 -> 1713;
1736 -> 1735;
1737 -> 1735;
1738 -> 1736;
1738 -> 1737;
1739 -> 1738;
1739 -> 1737;
1740 -> 1737;
1741 -> 1730;
1741 -> 1737;
1742 -> 1739;
1742 -> 1740;
1742 -> 1741;
1742 -> 1700;
1742 -> 1737;
1743 -> 1711;
1744 -> 1743;
1744 -> 1711;
1745 -> 1711;
1746 -> 1711;
1747 -> 1743;
1747 -> 1746;
1747 -> 1744;
1747 -> 1711;
1748 -> 1711;
1749 -> 1712;
1749 -> 1711;
1750 -> 1743;
1750 -> 1711;
1751 -> 1748;
1751 -> 1711;
1752 -> 1711;
1753 -> 1750;
1753 -> 1752;
1754 -> 1751;
1754 -> 1752;
1755 -> 1754;
1755 -> 1748;
1755 -> 1752;
1756 -> 1752;
1757 -> 1756;
1757 -> 1755;
1757 -> 1752;
1758 -> 1711;
1759 -> 1711;
1760 -> 1743;
1760 -> 1759;
1760 -> 1747;
1760 -> 1711;
1761 -> 1711;
1762 -> 1742;
1762 -> 1711;
1763 -> 1711;
1764 -> 1762;
1764 -> 1711;
1765 -> 1711;
1766 -> 1763;
1766 -> 1765;
1766 -> 1711;
1767 -> 1711;
1768 -> 1743;
1768 -> 1767;
1768 -> 1760;
1768 -> 1711;
1769 -> 1748;
1769 -> 1711;
1770 -> 1761;
1770 -> 1711;
1774 -> 1772;
1774 -> 1771;
1775 -> 1773;
1775 -> 1771;
1776 -> 1771;
1777 -> 0;
1777 -> 1711;
1778 -> 1711;
1779 -> 1711;
1780 -> 1769;
1780 -> 1779;
1781 -> 1770;
1781 -> 1779;
1782 -> 1777;
1782 -> 1779;
1783 -> 1778;
1783 -> 1779;
1784 -> 1778;
1784 -> 1779;
1785 -> 1779;
1786 -> 1783;
1786 -> 1785;
1786 -> 1779;
1787 -> 1786;
1787 -> 1779;
1788 -> 0;
1790 -> 1788;
1790 -> 1789;
1791 -> 1789;
1793 -> 1792;
1795 -> 1794;
1797 -> 1796;
1798 -> 1791;
1799 -> 1791;
1799 -> 1789;
1800 -> 1790;
1800 -> 1791;
1800 -> 1789;
1801 -> 1789;
1802 -> 1779;
1803 -> 1802;
1803 -> 1784;
1803 -> 1779;
1804 -> 1780;
1804 -> 1779;
1805 -> 1781;
1805 -> 1779;
1806 -> 1782;
1806 -> 1779;
1807 -> 1804;
1807 -> 1779;
1808 -> 1805;
1808 -> 1779;
1809 -> 1803;
1809 -> 1779;
1810 -> 1779;
1811 -> 1807;
1811 -> 1810;
1812 -> 1808;
1812 -> 1810;
1813 -> 1809;
1813 -> 1810;
1814 -> 1787;
1814 -> 1810;
1815 -> 1811;
1815 -> 1810;
1816 -> 1811;
1816 -> 1804;
1816 -> 1810;
1817 -> 1812;
1817 -> 1810;
1818 -> 1812;
1818 -> 1805;
1818 -> 1810;
1819 -> 1810;
1820 -> 1815;
1820 -> 1819;
1821 -> 1816;
1821 -> 1819;
1822 -> 1817;
1822 -> 1819;
1823 -> 1818;
1823 -> 1819;
1824 -> 1814;
1824 -> 1819;
1825 -> 1820;
1825 -> 1819;
1826 -> 1821;
1826 -> 1819;
1827 -> 1822;
1827 -> 1819;
1828 -> 1823;
1828 -> 1819;
1829 -> 1819;
1830 -> 1825;
1830 -> 1829;
1831 -> 1826;
1831 -> 1829;
1832 -> 1827;
1832 -> 1829;
1833 -> 1828;
1833 -> 1829;
1834 -> 1824;
1834 -> 1829;
1835 -> 1829;
1836 -> 1831;
1836 -> 1835;
1836 -> 1829;
1837 -> 1829;
1838 -> 1833;
1838 -> 1837;
1838 -> 1829;
1839 -> 1836;
1839 -> 1838;
1839 -> 1829;
1840 -> 1829;
1841 -> 1840;
1841 -> 1839;
1841 -> 1829;
1842 -> 1829;
1843 -> 1842;
1843 -> 1831;
1843 -> 1829;
1844 -> 1829;
1845 -> 1844;
1845 -> 1833;
1845 -> 1829;
1846 -> 1829;
1847 -> 1846;
1847 -> 1831;
1847 -> 1829;
1848 -> 1839;
1848 -> 1829;
1849 -> 1821;
1849 -> 1819;
1850 -> 1823;
1850 -> 1819;
1851 -> 1819;
1852 -> 1849;
1852 -> 1851;
1852 -> 1819;
1853 -> 1819;
1854 -> 1849;
1854 -> 1853;
1854 -> 1819;
1855 -> 1819;
1856 -> 1850;
1856 -> 1855;
1856 -> 1819;
1857 -> 1819;
1858 -> 1857;
1858 -> 1810;
1859 -> 1810;
1860 -> 1859;
1860 -> 1779;
1861 -> 1806;
1861 -> 1860;
1861 -> 1779;
1862 -> 1743;
1862 -> 1861;
1862 -> 1768;
1862 -> 1711;
1863 -> 1761;
1863 -> 1711;
1864 -> 1748;
1864 -> 1711;
1865 -> 1743;
1865 -> 1862;
1865 -> 1711;
1866 -> 1865;
1866 -> 1690;
1867 -> 1679;
1868 -> 630;
1869 -> 631;
1869 -> 630;
1870 -> 1676;
1870 -> 630;
1871 -> 630;
1872 -> 1869;
1872 -> 1871;
1873 -> 1870;
1873 -> 1871;
1874 -> 1873;
1874 -> 1871;
1875 -> 630;
1876 -> 631;
1876 -> 630;
1877 -> 627;
1877 -> 1;
1878 -> 1;
1879 -> 1877;
1879 -> 1878;
1880 -> 1878;
1881 -> 1878;
1882 -> 1878;
1883 -> 1879;
1883 -> 1878;
1884 -> 1878;
1885 -> 1878;
1886 -> 1883;
1886 -> 1885;
1887 -> 1884;
1887 -> 1885;
1888 -> 1886;
1888 -> 1885;
1889 -> 0;
1889 -> 1885;
1890 -> 1887;
1890 -> 1885;
1891 -> 1885;
1892 -> 1888;
1892 -> 1891;
1893 -> 1889;
1893 -> 1891;
1894 -> 1890;
1894 -> 1891;
1895 -> 1892;
1895 -> 1891;
1896 -> 1893;
1896 -> 1891;
1897 -> 1891;
1898 -> 1891;
1899 -> 1895;
1899 -> 1898;
1900 -> 1896;
1900 -> 1898;
1901 -> 1897;
1901 -> 1898;
1902 -> 1898;
1903 -> 0;
1903 -> 1902;
1904 -> 1903;
1904 -> 1898;
1905 -> 1898;
1906 -> 1904;
1906 -> 1898;
1907 -> 1900;
1907 -> 1898;
1908 -> 1901;
1908 -> 1898;
1909 -> 1905;
1909 -> 1906;
1909 -> 1908;
1909 -> 1907;
1909 -> 1899;
1909 -> 1904;
1909 -> 1882;
1909 -> 1764;
1909 -> 1898;
1910 -> 1909;
1910 -> 1905;
1911 -> 1909;
1911 -> 1905;
1912 -> 1909;
1912 -> 1905;
1913 -> 1909;
1913 -> 1905;
1914 -> 1909;
1914 -> 1905;
1915 -> 1909;
1915 -> 1905;
1916 -> 1909;
1916 -> 1905;
1917 -> 1909;
1917 -> 1905;
1918 -> 1909;
1918 -> 1905;
1919 -> 1918;
1919 -> 1909;
1919 -> 1905;
1920 -> 1910;
1920 -> 1905;
1921 -> 1916;
1921 -> 1905;
1922 -> 1905;
1923 -> 1920;
1923 -> 1922;
1924 -> 1921;
1924 -> 1922;
1925 -> 1918;
1925 -> 1922;
1926 -> 1923;
1926 -> 1922;
1927 -> 1922;
1928 -> 1926;
1928 -> 1927;
1929 -> 1925;
1929 -> 1927;
1930 -> 1927;
1931 -> 1929;
1931 -> 1930;
1932 -> 1930;
1933 -> 1932;
1934 -> 1931;
1934 -> 1933;
1935 -> 1934;
1935 -> 1932;
1936 -> 1931;
1936 -> 1927;
1937 -> 1936;
1937 -> 1927;
1938 -> 1936;
1938 -> 1931;
1938 -> 1937;
1939 -> 1938;
1939 -> 1922;
1940 -> 1922;
1941 -> 1939;
1941 -> 1940;
1941 -> 1922;
1942 -> 1939;
1942 -> 1941;
1943 -> 1942;
1943 -> 1905;
1944 -> 1905;
1945 -> 1943;
1945 -> 1944;
1945 -> 1905;
1946 -> 1910;
1946 -> 1905;
1947 -> 1943;
1947 -> 1905;
1948 -> 1905;
1949 -> 1946;
1949 -> 1947;
1949 -> 1948;
1949 -> 1918;
1949 -> 1931;
1949 -> 1905;
1950 -> 1949;
1950 -> 1948;
1951 -> 1948;
1952 -> 1950;
1952 -> 1951;
1953 -> 1951;
1954 -> 1952;
1954 -> 1953;
1955 -> 1954;
1955 -> 1951;
1956 -> 1952;
1956 -> 1948;
1957 -> 1948;
1958 -> 1956;
1958 -> 1957;
1959 -> 1949;
1959 -> 1948;
1960 -> 1948;
1961 -> 1959;
1961 -> 1960;
1962 -> 1960;
1963 -> 1961;
1963 -> 1962;
1964 -> 1963;
1964 -> 1958;
1964 -> 1962;
1965 -> 1963;
1965 -> 1958;
1965 -> 1962;
1966 -> 1965;
1966 -> 1960;
1967 -> 1961;
1967 -> 1958;
1967 -> 1960;
1968 -> 1967;
1968 -> 1948;
1969 -> 1949;
1969 -> 1948;
1970 -> 1948;
1971 -> 1949;
1971 -> 1970;
1971 -> 1968;
1971 -> 1905;
1972 -> 1905;
1973 -> 1914;
1973 -> 1972;
1973 -> 1905;
1974 -> 1973;
1975 -> 1905;
1976 -> 1918;
1976 -> 1971;
1976 -> 1905;
1977 -> 1918;
1977 -> 1971;
1977 -> 1976;
1978 -> 1977;
1978 -> 1976;
1979 -> 1918;
1979 -> 1971;
1979 -> 1978;
1980 -> 1976;
1981 -> 1980;
1982 -> 1981;
1982 -> 1980;
1983 -> 1980;
1983 -> 1971;
1983 -> 1979;
1984 -> 1983;
1984 -> 1976;
1985 -> 1910;
1985 -> 1976;
1986 -> 1979;
1986 -> 1976;
1987 -> 1971;
1987 -> 1976;
1988 -> 1974;
1988 -> 1976;
1989 -> 1976;
1990 -> 1976;
1991 -> 1984;
1991 -> 1990;
1992 -> 1985;
1992 -> 1990;
1993 -> 1986;
1993 -> 1990;
1994 -> 1987;
1994 -> 1990;
1995 -> 1988;
1995 -> 1990;
1996 -> 1989;
1996 -> 1990;
1997 -> 1991;
1997 -> 1990;
1998 -> 1992;
1998 -> 1990;
1999 -> 1993;
1999 -> 1990;
2000 -> 1994;
2000 -> 1990;
2001 -> 1995;
2001 -> 1990;
2002 -> 0;
2002 -> 1990;
2003 -> 1990;
2004 -> 1997;
2004 -> 2003;
2005 -> 1998;
2005 -> 2003;
2006 -> 1999;
2006 -> 2003;
2007 -> 2000;
2007 -> 2003;
2008 -> 2001;
2008 -> 2003;
2009 -> 2002;
2009 -> 2003;
2010 -> 1996;
2010 -> 2003;
2011 -> 2003;
2012 -> 2004;
2012 -> 1983;
2012 -> 2011;
2012 -> 2003;
2013 -> 2005;
2013 -> 2003;
2014 -> 2006;
2014 -> 2003;
2015 -> 2007;
2015 -> 2003;
2016 -> 2008;
2016 -> 2003;
2017 -> 2003;
2018 -> 2012;
2018 -> 2017;
2019 -> 2013;
2019 -> 2017;
2020 -> 2014;
2020 -> 2017;
2021 -> 2015;
2021 -> 2017;
2022 -> 2016;
2022 -> 2017;
2023 -> 2010;
2023 -> 2017;
2024 -> 2018;
2024 -> 2012;
2024 -> 2017;
2025 -> 2018;
2025 -> 2017;
2026 -> 2021;
2026 -> 2017;
2027 -> 2022;
2027 -> 2017;
2028 -> 2020;
2028 -> 2017;
2029 -> 2019;
2029 -> 2017;
2030 -> 2017;
2031 -> 2030;
2032 -> 2017;
2033 -> 2032;
2033 -> 2024;
2033 -> 2025;
2033 -> 2026;
2033 -> 2027;
2033 -> 2028;
2033 -> 2029;
2033 -> 2030;
2033 -> 2012;
2033 -> 1974;
2033 -> 2031;
2033 -> 2017;
2034 -> 2033;
2034 -> 2032;
2035 -> 2032;
2036 -> 2033;
2036 -> 2035;
2036 -> 2017;
2037 -> 2017;
2038 -> 2037;
2038 -> 2032;
2038 -> 2017;
2039 -> 0;
2039 -> 2017;
2040 -> 2039;
2040 -> 2036;
2040 -> 2038;
2040 -> 2037;
2040 -> 2017;
2041 -> 2040;
2041 -> 2032;
2041 -> 2017;
2042 -> 2017;
2043 -> 2042;
2043 -> 2032;
2043 -> 2017;
2044 -> 2032;
2044 -> 2017;
2045 -> 2032;
2045 -> 2017;
2046 -> 2032;
2046 -> 2017;
2047 -> 2032;
2047 -> 2017;
2048 -> 2032;
2048 -> 2017;
2049 -> 2018;
2049 -> 2040;
2049 -> 2017;
2050 -> 2049;
2050 -> 0;
2050 -> 2017;
2051 -> 2050;
2051 -> 2017;
2052 -> 2051;
2052 -> 2032;
2052 -> 2017;
2053 -> 2032;
2053 -> 2040;
2053 -> 2017;
2054 -> 2018;
2054 -> 2017;
2055 -> 2032;
2055 -> 2017;
2056 -> 2053;
2056 -> 2054;
2056 -> 2055;
2056 -> 2040;
2056 -> 2041;
2056 -> 2043;
2056 -> 2044;
2056 -> 2045;
2056 -> 2052;
2056 -> 2046;
2056 -> 2047;
2056 -> 2048;
2056 -> 2042;
2056 -> 2017;
2057 -> 2018;
2057 -> 2056;
2057 -> 2017;
2058 -> 2010;
2058 -> 2003;
2059 -> 2010;
2059 -> 2003;
2060 -> 2010;
2060 -> 2003;
2061 -> 2010;
2061 -> 2003;
2062 -> 2010;
2062 -> 2003;
2063 -> 2010;
2063 -> 2003;
2064 -> 2010;
2064 -> 2003;
2065 -> 2010;
2065 -> 2003;
2066 -> 2010;
2066 -> 2003;
2067 -> 2010;
2067 -> 2003;
2068 -> 2004;
2068 -> 2003;
2069 -> 2004;
2069 -> 2010;
2069 -> 2003;
2070 -> 2009;
2070 -> 2003;
2071 -> 2070;
2071 -> 2010;
2071 -> 2003;
2072 -> 2003;
2073 -> 2005;
2073 -> 2056;
2073 -> 2072;
2073 -> 2003;
2074 -> 2073;
2074 -> 2003;
2075 -> 2004;
2075 -> 2056;
2075 -> 2074;
2076 -> 2004;
2076 -> 2056;
2076 -> 2075;
2076 -> 2010;
2076 -> 2003;
2077 -> 2010;
2077 -> 2056;
2077 -> 2003;
2078 -> 2004;
2078 -> 2003;
2079 -> 2010;
2079 -> 2003;
2080 -> 2077;
2080 -> 2078;
2080 -> 2079;
2080 -> 2056;
2080 -> 2058;
2080 -> 2069;
2080 -> 2059;
2080 -> 2060;
2080 -> 2061;
2080 -> 2062;
2080 -> 2063;
2080 -> 2064;
2080 -> 2065;
2080 -> 2066;
2080 -> 2067;
2080 -> 2076;
2080 -> 2071;
2080 -> 2075;
2080 -> 2070;
2080 -> 2003;
2081 -> 1905;
2082 -> 1911;
2082 -> 2081;
2082 -> 1905;
2083 -> 1912;
2083 -> 1989;
2083 -> 1905;
2084 -> 1905;
2085 -> 1913;
2085 -> 2084;
2085 -> 1905;
2086 -> 1905;
2087 -> 1915;
2087 -> 2086;
2087 -> 1905;
2088 -> 1989;
2088 -> 1905;
2089 -> 1909;
2089 -> 2088;
2089 -> 2080;
2089 -> 2083;
2089 -> 1898;
2090 -> 1909;
2090 -> 1905;
2091 -> 1909;
2091 -> 1905;
2092 -> 1909;
2092 -> 1905;
2093 -> 1909;
2093 -> 1905;
2094 -> 1909;
2094 -> 1905;
2095 -> 1909;
2095 -> 1905;
2096 -> 1909;
2096 -> 1905;
2097 -> 1909;
2097 -> 1905;
2098 -> 1905;
2099 -> 2092;
2099 -> 1905;
2100 -> 2094;
2100 -> 1905;
2101 -> 0;
2101 -> 1905;
2102 -> 1905;
2103 -> 2096;
2103 -> 1905;
2104 -> 1905;
2105 -> 2101;
2105 -> 2104;
2106 -> 2102;
2106 -> 2104;
2107 -> 2103;
2107 -> 2104;
2108 -> 2097;
2108 -> 2104;
2109 -> 2104;
2110 -> 2105;
2110 -> 2104;
2111 -> 2106;
2111 -> 2104;
2112 -> 2109;
2112 -> 2104;
2113 -> 2104;
2114 -> 2110;
2114 -> 2113;
2115 -> 2111;
2115 -> 2113;
2116 -> 2112;
2116 -> 2113;
2117 -> 2113;
2118 -> 2114;
2118 -> 0;
2118 -> 2113;
2119 -> 2118;
2119 -> 2115;
2119 -> 2113;
2120 -> 2119;
2121 -> 2108;
2121 -> 2120;
2122 -> 2120;
2123 -> 2121;
2123 -> 2089;
2123 -> 2122;
2124 -> 2122;
2125 -> 2119;
2126 -> 2108;
2126 -> 2125;
2127 -> 2126;
2127 -> 2089;
2127 -> 2125;
2128 -> 2107;
2128 -> 2127;
2129 -> 2128;
2129 -> 2127;
2130 -> 2128;
2130 -> 2127;
2131 -> 2119;
2132 -> 2123;
2132 -> 2089;
2132 -> 2128;
2133 -> 2114;
2133 -> 0;
2133 -> 2113;
2134 -> 2117;
2134 -> 2133;
2135 -> 2133;
2136 -> 2133;
2137 -> 2108;
2137 -> 2136;
2138 -> 2133;
2139 -> 2108;
2139 -> 2138;
2140 -> 2139;
2140 -> 2128;
2140 -> 2138;
2141 -> 2140;
2141 -> 2133;
2142 -> 2133;
2143 -> 2108;
2143 -> 2142;
2144 -> 2133;
2145 -> 2133;
2146 -> 2144;
2146 -> 2145;
2147 -> 2144;
2147 -> 2145;
2148 -> 2144;
2148 -> 2145;
2149 -> 2108;
2149 -> 2145;
2150 -> 2145;
2151 -> 2145;
2152 -> 2145;
2153 -> 2146;
2153 -> 2152;
2153 -> 2145;
2154 -> 2145;
2155 -> 2154;
2156 -> 2155;
2157 -> 2149;
2157 -> 2156;
2158 -> 2157;
2158 -> 2128;
2158 -> 2156;
2159 -> 2157;
2159 -> 2128;
2159 -> 2156;
2160 -> 2159;
2160 -> 2155;
2161 -> 2151;
2161 -> 2145;
2162 -> 2146;
2162 -> 2145;
2163 -> 2162;
2164 -> 2162;
2165 -> 2145;
2166 -> 2148;
2166 -> 2165;
2166 -> 2145;
2167 -> 2146;
2167 -> 2145;
2168 -> 2147;
2168 -> 2145;
2169 -> 2145;
2170 -> 2167;
2170 -> 2169;
2171 -> 2168;
2171 -> 2169;
2172 -> 2169;
2173 -> 2170;
2173 -> 2172;
2173 -> 2169;
2174 -> 2149;
2174 -> 2128;
2174 -> 2169;
2175 -> 2133;
2176 -> 2108;
2176 -> 2128;
2176 -> 2175;
2176 -> 2133;
2177 -> 2114;
2177 -> 0;
2177 -> 2113;
2178 -> 2116;
2178 -> 2113;
2179 -> 2117;
2179 -> 2113;
2180 -> 2113;
2181 -> 2104;
2182 -> 2098;
2182 -> 1905;
2183 -> 2100;
2183 -> 2128;
2183 -> 2182;
2183 -> 2103;
2183 -> 2097;
2183 -> 2089;
2183 -> 1905;
2184 -> 2098;
2184 -> 1905;
2185 -> 2090;
2185 -> 1905;
2186 -> 2092;
2186 -> 1905;
2187 -> 2091;
2187 -> 2186;
2188 -> 2185;
2188 -> 2183;
2188 -> 2186;
2189 -> 2094;
2189 -> 2186;
2190 -> 2186;
2191 -> 2188;
2191 -> 2190;
2192 -> 2188;
2192 -> 2190;
2193 -> 2188;
2193 -> 2190;
2194 -> 2188;
2194 -> 2190;
2195 -> 2190;
2196 -> 2192;
2196 -> 2188;
2196 -> 2195;
2196 -> 2190;
2197 -> 0;
2197 -> 2190;
2198 -> 2196;
2198 -> 2190;
2199 -> 2187;
2199 -> 2196;
2199 -> 2186;
2200 -> 2186;
2201 -> 2097;
2201 -> 2186;
2202 -> 2185;
2202 -> 2186;
2203 -> 2091;
2203 -> 2186;
2204 -> 2093;
2204 -> 2186;
2205 -> 2183;
2205 -> 2186;
2206 -> 2200;
2206 -> 2186;
2207 -> 2095;
2207 -> 2186;
2208 -> 2096;
2208 -> 2186;
2209 -> 2186;
2210 -> 2201;
2210 -> 2209;
2211 -> 2202;
2211 -> 2209;
2212 -> 2203;
2212 -> 2209;
2213 -> 2204;
2213 -> 2209;
2214 -> 2205;
2214 -> 2209;
2215 -> 2206;
2215 -> 2209;
2216 -> 2207;
2216 -> 2209;
2217 -> 2208;
2217 -> 2209;
2218 -> 2209;
2219 -> 2210;
2219 -> 2218;
2219 -> 2209;
2220 -> 2209;
2221 -> 2215;
2221 -> 2220;
2221 -> 2209;
2222 -> 2209;
2223 -> 2210;
2223 -> 2222;
2224 -> 2223;
2224 -> 2196;
2224 -> 2222;
2225 -> 2224;
2225 -> 2209;
2226 -> 2209;
2227 -> 2209;
2228 -> 2210;
2228 -> 2216;
2229 -> 2211;
2229 -> 2216;
2230 -> 2214;
2230 -> 2216;
2231 -> 2215;
2231 -> 2216;
2232 -> 2217;
2232 -> 2216;
2233 -> 2229;
2233 -> 2216;
2234 -> 2230;
2234 -> 2216;
2235 -> 2232;
2235 -> 2216;
2236 -> 2235;
2236 -> 2216;
2237 -> 2228;
2237 -> 2196;
2237 -> 2216;
2238 -> 2228;
2238 -> 2196;
2238 -> 2216;
2239 -> 2238;
2239 -> 2196;
2239 -> 2216;
2240 -> 2231;
2240 -> 2238;
2240 -> 2200;
2240 -> 2196;
2240 -> 2216;
2241 -> 2209;
2242 -> 2210;
2242 -> 2241;
2242 -> 2209;
2243 -> 2209;
2244 -> 2215;
2244 -> 2243;
2244 -> 2209;
2245 -> 2214;
2245 -> 2209;
2246 -> 2209;
2247 -> 2245;
2247 -> 2246;
2248 -> 2209;
2248 -> 2246;
2249 -> 2247;
2249 -> 2246;
2250 -> 2209;
2251 -> 2212;
2251 -> 2209;
2252 -> 2211;
2252 -> 2240;
2252 -> 2251;
2253 -> 2252;
2253 -> 2209;
2253 -> 2251;
2254 -> 2209;
2255 -> 2210;
2255 -> 2254;
2256 -> 2255;
2256 -> 2240;
2256 -> 2254;
2257 -> 2255;
2257 -> 2240;
2257 -> 2254;
2258 -> 2257;
2258 -> 2209;
2259 -> 2240;
2259 -> 2209;
2259 -> 2210;
2259 -> 2212;
2259 -> 2213;
2259 -> 2215;
2259 -> 2214;
2259 -> 2211;
2259 -> 2216;
2259 -> 2253;
2259 -> 2217;
2259 -> 2089;
2259 -> 2252;
2260 -> 2259;
2260 -> 2240;
2261 -> 2259;
2261 -> 2240;
2262 -> 2259;
2262 -> 2240;
2263 -> 2260;
2263 -> 2240;
2264 -> 2240;
2265 -> 2262;
2265 -> 2264;
2266 -> 2263;
2266 -> 2264;
2267 -> 2264;
2268 -> 2265;
2268 -> 2267;
2268 -> 2264;
2269 -> 2240;
2270 -> 2260;
2270 -> 2259;
2271 -> 2209;
2272 -> 2259;
2272 -> 2271;
2272 -> 2209;
2273 -> 2209;
2274 -> 2209;
2275 -> 2211;
2275 -> 2274;
2275 -> 2209;
2276 -> 2215;
2276 -> 2275;
2277 -> 2275;
2278 -> 2276;
2278 -> 2277;
2279 -> 2211;
2279 -> 2277;
2280 -> 2279;
2280 -> 2259;
2280 -> 2277;
2281 -> 2280;
2281 -> 2275;
2282 -> 2281;
2282 -> 2275;
2283 -> 2215;
2283 -> 2275;
2284 -> 2275;
2285 -> 2282;
2285 -> 2284;
2286 -> 2283;
2286 -> 2284;
2287 -> 2209;
2287 -> 2284;
2288 -> 2285;
2288 -> 2284;
2289 -> 2275;
2290 -> 2215;
2290 -> 2275;
2291 -> 2275;
2292 -> 2290;
2292 -> 2291;
2293 -> 2211;
2293 -> 2291;
2294 -> 2291;
2295 -> 2292;
2295 -> 2291;
2296 -> 2291;
2297 -> 2295;
2297 -> 2296;
2298 -> 2293;
2298 -> 2296;
2299 -> 2296;
2300 -> 2298;
2300 -> 2299;
2301 -> 2299;
2302 -> 2301;
2302 -> 2300;
2302 -> 2299;
2303 -> 2299;
2304 -> 2300;
2304 -> 2303;
2305 -> 2304;
2305 -> 2259;
2305 -> 2302;
2305 -> 2303;
2306 -> 2305;
2306 -> 2299;
2307 -> 2306;
2307 -> 2296;
2308 -> 2296;
2309 -> 2298;
2309 -> 2308;
2310 -> 2309;
2310 -> 2305;
2310 -> 2308;
2311 -> 2310;
2311 -> 2296;
2312 -> 2311;
2313 -> 2307;
2313 -> 2312;
2313 -> 2311;
2314 -> 2313;
2315 -> 2291;
2316 -> 2294;
2316 -> 2291;
2317 -> 2293;
2317 -> 2310;
2317 -> 2291;
2318 -> 2316;
2318 -> 2317;
2318 -> 2294;
2318 -> 2310;
2318 -> 2291;
2319 -> 2294;
2319 -> 2291;
2320 -> 2293;
2320 -> 2318;
2320 -> 2291;
2321 -> 2294;
2321 -> 2291;
2322 -> 2293;
2322 -> 2320;
2322 -> 2291;
2323 -> 2294;
2323 -> 2291;
2324 -> 2293;
2324 -> 2322;
2324 -> 2291;
2325 -> 2294;
2325 -> 2291;
2326 -> 2293;
2326 -> 2324;
2326 -> 2291;
2327 -> 2294;
2327 -> 2291;
2328 -> 2293;
2328 -> 2326;
2328 -> 2291;
2329 -> 2294;
2329 -> 2291;
2330 -> 2293;
2330 -> 2328;
2330 -> 2291;
2331 -> 2294;
2331 -> 2291;
2332 -> 2293;
2332 -> 2330;
2332 -> 2291;
2333 -> 2294;
2333 -> 2332;
2333 -> 2291;
2334 -> 2333;
2334 -> 2275;
2335 -> 2334;
2335 -> 2275;
2336 -> 2215;
2336 -> 2275;
2337 -> 2275;
2338 -> 2335;
2338 -> 2337;
2339 -> 2336;
2339 -> 2337;
2340 -> 2209;
2340 -> 2337;
2341 -> 2338;
2341 -> 2337;
2342 -> 2275;
2343 -> 2275;
2344 -> 2210;
2344 -> 2343;
2345 -> 2344;
2345 -> 2332;
2345 -> 2343;
2346 -> 2345;
2346 -> 2275;
2347 -> 2209;
2347 -> 2275;
2348 -> 2211;
2348 -> 2275;
2349 -> 2215;
2349 -> 2275;
2350 -> 2275;
2351 -> 2346;
2351 -> 2350;
2352 -> 0;
2352 -> 2350;
2353 -> 2346;
2353 -> 2352;
2353 -> 0;
2353 -> 2275;
2354 -> 2346;
2354 -> 2350;
2355 -> 2350;
2356 -> 2346;
2356 -> 2355;
2356 -> 2353;
2356 -> 2275;
2357 -> 2275;
2358 -> 2357;
2358 -> 2356;
2359 -> 2357;
2360 -> 2358;
2360 -> 2359;
2360 -> 2357;
2361 -> 2275;
2362 -> 2211;
2362 -> 2358;
2362 -> 2275;
2363 -> 2275;
2364 -> 2362;
2364 -> 2363;
2364 -> 2275;
2365 -> 2209;
2366 -> 2211;
2366 -> 2365;
2366 -> 2209;
2367 -> 2209;
2367 -> 2358;
2367 -> 2211;
2368 -> 2210;
2368 -> 2216;
2369 -> 2215;
2369 -> 2216;
2370 -> 2217;
2370 -> 2216;
2371 -> 2216;
2372 -> 2368;
2372 -> 2371;
2373 -> 2372;
2373 -> 2358;
2373 -> 2371;
2374 -> 2372;
2374 -> 2358;
2374 -> 2371;
2375 -> 2374;
2375 -> 2216;
2376 -> 2216;
2377 -> 2211;
2377 -> 2376;
2377 -> 2216;
2378 -> 2240;
2378 -> 2376;
2378 -> 2216;
2379 -> 2186;
2380 -> 2200;
2380 -> 2186;
2381 -> 2380;
2381 -> 2358;
2381 -> 2186;
2382 -> 2185;
2382 -> 2381;
2383 -> 2200;
2383 -> 2381;
2384 -> 2381;
2385 -> 2382;
2385 -> 2384;
2386 -> 2383;
2386 -> 2384;
2387 -> 2097;
2387 -> 2384;
2388 -> 2387;
2388 -> 2381;
2388 -> 2384;
2389 -> 2387;
2389 -> 2381;
2389 -> 2384;
2390 -> 2381;
2391 -> 2094;
2391 -> 2186;
2392 -> 2200;
2392 -> 2186;
2393 -> 2096;
2393 -> 2186;
2394 -> 2391;
2394 -> 2392;
2394 -> 2393;
2394 -> 2097;
2394 -> 2381;
2394 -> 2089;
2394 -> 2186;
2395 -> 2186;
2396 -> 2183;
2396 -> 2394;
2396 -> 2186;
2397 -> 1905;
2398 -> 1909;
2398 -> 2397;
2398 -> 2394;
2398 -> 1898;
2399 -> 1909;
2399 -> 1905;
2400 -> 1909;
2400 -> 1905;
2401 -> 1909;
2401 -> 1905;
2402 -> 1909;
2402 -> 1905;
2403 -> 1909;
2403 -> 1905;
2404 -> 1909;
2404 -> 1905;
2405 -> 1909;
2405 -> 1905;
2406 -> 1905;
2407 -> 2399;
2407 -> 1905;
2408 -> 2401;
2408 -> 1905;
2409 -> 2406;
2409 -> 1905;
2410 -> 2405;
2410 -> 2407;
2410 -> 2408;
2410 -> 2409;
2410 -> 2398;
2410 -> 2406;
2410 -> 1905;
2411 -> 2399;
2411 -> 2410;
2411 -> 1905;
2412 -> 1905;
2413 -> 2405;
2413 -> 2412;
2414 -> 2412;
2415 -> 2413;
2415 -> 2414;
2416 -> 2415;
2416 -> 2410;
2416 -> 2414;
2417 -> 2415;
2417 -> 2410;
2417 -> 2414;
2418 -> 2417;
2418 -> 2412;
2419 -> 2413;
2419 -> 2410;
2419 -> 2412;
2420 -> 2419;
2420 -> 1905;
2421 -> 1905;
2422 -> 2406;
2422 -> 1905;
2423 -> 1905;
2424 -> 2422;
2424 -> 2423;
2425 -> 2405;
2425 -> 2423;
2426 -> 2423;
2427 -> 2425;
2427 -> 2426;
2428 -> 2426;
2429 -> 2427;
2429 -> 2428;
2430 -> 2429;
2430 -> 2420;
2430 -> 2428;
2431 -> 2429;
2431 -> 2420;
2431 -> 2428;
2432 -> 2431;
2432 -> 2426;
2433 -> 2427;
2433 -> 2420;
2433 -> 2426;
2434 -> 2433;
2434 -> 2423;
2435 -> 2423;
2436 -> 2435;
2436 -> 2434;
2436 -> 2433;
2436 -> 2423;
2437 -> 2423;
2438 -> 2437;
2438 -> 1905;
2439 -> 2403;
2439 -> 1905;
2440 -> 2406;
2440 -> 1905;
2441 -> 2404;
2441 -> 1905;
2442 -> 2439;
2442 -> 2440;
2442 -> 2441;
2442 -> 2405;
2442 -> 2433;
2442 -> 2398;
2442 -> 1905;
2443 -> 1905;
2444 -> 2404;
2444 -> 2398;
2444 -> 2442;
2444 -> 1905;
2445 -> 1905;
2446 -> 2402;
2446 -> 1905;
2447 -> 1905;
2448 -> 2405;
2448 -> 1905;
2449 -> 2446;
2449 -> 1905;
2450 -> 2400;
2450 -> 1905;
2451 -> 2445;
2451 -> 1905;
2452 -> 2404;
2452 -> 1905;
2453 -> 1905;
2454 -> 1905;
2455 -> 2448;
2455 -> 2454;
2456 -> 2449;
2456 -> 2454;
2457 -> 2450;
2457 -> 2454;
2458 -> 2451;
2458 -> 2454;
2459 -> 2452;
2459 -> 2454;
2460 -> 2453;
2460 -> 2454;
2461 -> 2453;
2461 -> 2454;
2462 -> 2454;
2463 -> 2454;
2464 -> 2457;
2464 -> 2463;
2464 -> 2454;
2465 -> 2454;
2466 -> 2465;
2467 -> 2455;
2467 -> 2466;
2468 -> 2467;
2468 -> 2444;
2468 -> 2466;
2469 -> 2467;
2469 -> 2444;
2469 -> 2466;
2470 -> 2469;
2470 -> 2465;
2471 -> 2455;
2471 -> 2444;
2471 -> 2465;
2472 -> 2471;
2472 -> 2456;
2472 -> 2454;
2473 -> 2462;
2473 -> 2454;
2474 -> 2460;
2474 -> 2454;
2475 -> 2461;
2475 -> 2454;
2476 -> 2454;
2477 -> 2458;
2477 -> 2454;
2478 -> 2454;
2479 -> 2473;
2479 -> 2478;
2480 -> 2474;
2480 -> 2478;
2481 -> 2475;
2481 -> 2478;
2482 -> 2476;
2482 -> 2478;
2483 -> 2476;
2483 -> 2478;
2484 -> 2477;
2484 -> 2478;
2485 -> 2476;
2485 -> 2478;
2486 -> 2478;
2487 -> 2486;
2487 -> 2478;
2488 -> 2486;
2488 -> 2478;
2489 -> 2486;
2489 -> 2478;
2490 -> 2486;
2490 -> 2478;
2491 -> 2486;
2491 -> 2478;
2492 -> 2486;
2492 -> 2478;
2493 -> 2486;
2493 -> 2478;
2494 -> 2486;
2494 -> 2478;
2495 -> 2486;
2495 -> 2478;
2496 -> 2486;
2496 -> 2478;
2497 -> 2486;
2497 -> 2478;
2498 -> 2486;
2498 -> 2478;
2499 -> 2479;
2499 -> 2486;
2499 -> 2478;
2500 -> 2480;
2500 -> 2486;
2500 -> 2478;
2501 -> 2481;
2501 -> 2486;
2501 -> 2478;
2502 -> 2482;
2502 -> 2486;
2502 -> 2478;
2503 -> 2483;
2503 -> 2486;
2503 -> 2478;
2504 -> 2484;
2504 -> 2486;
2504 -> 2478;
2505 -> 2454;
2506 -> 2505;
2507 -> 2455;
2507 -> 2506;
2508 -> 2507;
2508 -> 2471;
2508 -> 2506;
2509 -> 2507;
2509 -> 2471;
2509 -> 2506;
2510 -> 2509;
2510 -> 2505;
2511 -> 2471;
2511 -> 2476;
2511 -> 2486;
2511 -> 2487;
2511 -> 2472;
2511 -> 2488;
2511 -> 2455;
2511 -> 2489;
2511 -> 2499;
2511 -> 2490;
2511 -> 2500;
2511 -> 2491;
2511 -> 2501;
2511 -> 2492;
2511 -> 2502;
2511 -> 2493;
2511 -> 2503;
2511 -> 2494;
2511 -> 2504;
2511 -> 2495;
2511 -> 2496;
2511 -> 2497;
2511 -> 2498;
2511 -> 2459;
2511 -> 2453;
2511 -> 2445;
2511 -> 2444;
2511 -> 2454;
2512 -> 2454;
2513 -> 2511;
2514 -> 2511;
2515 -> 2511;
2516 -> 2514;
2516 -> 2515;
2517 -> 2511;
2517 -> 2515;
2518 -> 2517;
2518 -> 2511;
2518 -> 2515;
2519 -> 2515;
2520 -> 2518;
2521 -> 2511;
2522 -> 2511;
2523 -> 2521;
2523 -> 2522;
2524 -> 2511;
2524 -> 2522;
2525 -> 2524;
2525 -> 2511;
2525 -> 2522;
2526 -> 2522;
2527 -> 2525;
2528 -> 2511;
2529 -> 2511;
2530 -> 2511;
2531 -> 2529;
2531 -> 2530;
2532 -> 2511;
2532 -> 2530;
2533 -> 2532;
2533 -> 2511;
2533 -> 2530;
2534 -> 2530;
2535 -> 2533;
2536 -> 2511;
2537 -> 2511;
2538 -> 2511;
2538 -> 2537;
2539 -> 2511;
2540 -> 2537;
2540 -> 2539;
2541 -> 2537;
2541 -> 2539;
2542 -> 2511;
2542 -> 2539;
2543 -> 2540;
2543 -> 2539;
2544 -> 2541;
2544 -> 2539;
2545 -> 2543;
2545 -> 2544;
2545 -> 2539;
2546 -> 2539;
2547 -> 2545;
2547 -> 2546;
2548 -> 2542;
2548 -> 2546;
2549 -> 2548;
2549 -> 2511;
2549 -> 2546;
2550 -> 2546;
2551 -> 2549;
2552 -> 2539;
2553 -> 2511;
2554 -> 2511;
2555 -> 2511;
2556 -> 2511;
2557 -> 2555;
2557 -> 2556;
2558 -> 2511;
2558 -> 2556;
2559 -> 2558;
2559 -> 2511;
2559 -> 2556;
2560 -> 2556;
2561 -> 2559;
2562 -> 2511;
2563 -> 2511;
2564 -> 2562;
2564 -> 2563;
2565 -> 2511;
2565 -> 2563;
2566 -> 2565;
2566 -> 2511;
2566 -> 2563;
2567 -> 2563;
2568 -> 2566;
2569 -> 2511;
2570 -> 2511;
2570 -> 2512;
2571 -> 2511;
2572 -> 2511;
2573 -> 2511;
2574 -> 2511;
2575 -> 2511;
2576 -> 2575;
2576 -> 2511;
2577 -> 2574;
2577 -> 2511;
2578 -> 2575;
2578 -> 2511;
2579 -> 0;
2579 -> 2511;
2580 -> 2511;
2581 -> 2511;
2582 -> 2511;
2583 -> 2582;
2583 -> 2579;
2583 -> 2511;
2584 -> 2583;
2584 -> 2511;
2585 -> 2511;
2586 -> 2511;
2587 -> 2581;
2587 -> 2586;
2587 -> 2511;
2588 -> 0;
2588 -> 2587;
2589 -> 2511;
2590 -> 2588;
2590 -> 0;
2590 -> 2511;
2591 -> 2584;
2591 -> 0;
2591 -> 2590;
2592 -> 2590;
2593 -> 2511;
2594 -> 2511;
2595 -> 2511;
2596 -> 2511;
2597 -> 2595;
2597 -> 2596;
2598 -> 2511;
2598 -> 2596;
2599 -> 2598;
2599 -> 2511;
2599 -> 2596;
2600 -> 2596;
2601 -> 2599;
2602 -> 2511;
2603 -> 2511;
2604 -> 2511;
2605 -> 2603;
2605 -> 2604;
2606 -> 2511;
2606 -> 2604;
2607 -> 2606;
2607 -> 2511;
2607 -> 2604;
2608 -> 2604;
2609 -> 2607;
2610 -> 2454;
2611 -> 2476;
2611 -> 2511;
2611 -> 2610;
2611 -> 2454;
2612 -> 2462;
2612 -> 2454;
2613 -> 2454;
2614 -> 2460;
2614 -> 2613;
2614 -> 2454;
2615 -> 2614;
2616 -> 2615;
2617 -> 2616;
2618 -> 2511;
2619 -> 2511;
2620 -> 2511;
2621 -> 2403;
2621 -> 1905;
2622 -> 2445;
2622 -> 1905;
2623 -> 2404;
2623 -> 1905;
2624 -> 2621;
2624 -> 2622;
2624 -> 2623;
2624 -> 2405;
2624 -> 2511;
2624 -> 1905;
2625 -> 1905;
2626 -> 1909;
2626 -> 1905;
2627 -> 1909;
2627 -> 1905;
2628 -> 1909;
2628 -> 1905;
2629 -> 1909;
2629 -> 1905;
2630 -> 1905;
2631 -> 2629;
2631 -> 2624;
2631 -> 2630;
2631 -> 1905;
2632 -> 2626;
2632 -> 1905;
2633 -> 1905;
2634 -> 2632;
2634 -> 2633;
2635 -> 2629;
2635 -> 2633;
2636 -> 2633;
2637 -> 2635;
2637 -> 2624;
2637 -> 2636;
2637 -> 2633;
2638 -> 1905;
2639 -> 1909;
2639 -> 1905;
2640 -> 1905;
2641 -> 2639;
2641 -> 2640;
2642 -> 2640;
2643 -> 2641;
2643 -> 2642;
2644 -> 2643;
2644 -> 2624;
2644 -> 2642;
2645 -> 2643;
2645 -> 2624;
2645 -> 2642;
2646 -> 2645;
2646 -> 2640;
2647 -> 1905;
2648 -> 2647;
2649 -> 2648;
2650 -> 2649;
2651 -> 1909;
2651 -> 2650;
2652 -> 2651;
2652 -> 2624;
2652 -> 2650;
2653 -> 2651;
2653 -> 2624;
2653 -> 2650;
2654 -> 2653;
2654 -> 2649;
2655 -> 2647;
2656 -> 1909;
2656 -> 1905;
2657 -> 1905;
2658 -> 2656;
2658 -> 2657;
2659 -> 2657;
2660 -> 2658;
2660 -> 2659;
2661 -> 2660;
2661 -> 2624;
2661 -> 2659;
2662 -> 2660;
2662 -> 2624;
2662 -> 2659;
2663 -> 2662;
2663 -> 2657;
2664 -> 1905;
2665 -> 1909;
2665 -> 1905;
2666 -> 1909;
2666 -> 1905;
2667 -> 1905;
2668 -> 2666;
2668 -> 2667;
2669 -> 2668;
2669 -> 2624;
2669 -> 2667;
2670 -> 2669;
2670 -> 1905;
2671 -> 2670;
2671 -> 2624;
2671 -> 1905;
2672 -> 2670;
2672 -> 1905;
2673 -> 2666;
2673 -> 2624;
2673 -> 1905;
2674 -> 2670;
2674 -> 2671;
2675 -> 2665;
2675 -> 2624;
2675 -> 2671;
2676 -> 2671;
2677 -> 2674;
2677 -> 2676;
2678 -> 2675;
2678 -> 2676;
2679 -> 2666;
2679 -> 2676;
2680 -> 2679;
2680 -> 2624;
2680 -> 2676;
2681 -> 2677;
2681 -> 2676;
2682 -> 2680;
2682 -> 2681;
2682 -> 2676;
2683 -> 2676;
2684 -> 2677;
2684 -> 2676;
2685 -> 2683;
2685 -> 2676;
2686 -> 2679;
2686 -> 2624;
2686 -> 2684;
2686 -> 2685;
2686 -> 2676;
2687 -> 2677;
2687 -> 2676;
2688 -> 2676;
2689 -> 2676;
2690 -> 2687;
2690 -> 2689;
2691 -> 2688;
2691 -> 2689;
2692 -> 2691;
2692 -> 2689;
2693 -> 2689;
2694 -> 2690;
2694 -> 2693;
2694 -> 2689;
2695 -> 2690;
2695 -> 2691;
2695 -> 2689;
2696 -> 2677;
2696 -> 2676;
2697 -> 2688;
2697 -> 2676;
2698 -> 2679;
2698 -> 2686;
2698 -> 2696;
2698 -> 2697;
2698 -> 2695;
2698 -> 2676;
2699 -> 2698;
2699 -> 2688;
2699 -> 2676;
2700 -> 2677;
2700 -> 2699;
2701 -> 2698;
2701 -> 2699;
2702 -> 2678;
2702 -> 2699;
2703 -> 2699;
2704 -> 2700;
2704 -> 2703;
2705 -> 2701;
2705 -> 2703;
2706 -> 2702;
2706 -> 2703;
2707 -> 2679;
2707 -> 2703;
2708 -> 2707;
2708 -> 2698;
2708 -> 2703;
2709 -> 2703;
2710 -> 2705;
2710 -> 2709;
2711 -> 2710;
2711 -> 2698;
2711 -> 2709;
2712 -> 2711;
2712 -> 2703;
2713 -> 2708;
2713 -> 2698;
2713 -> 2712;
2713 -> 2703;
2714 -> 2707;
2714 -> 2698;
2714 -> 0;
2714 -> 2703;
2715 -> 2712;
2715 -> 2698;
2715 -> 2703;
2716 -> 2714;
2716 -> 2715;
2716 -> 2703;
2717 -> 2704;
2717 -> 2698;
2717 -> 2703;
2718 -> 2704;
2718 -> 2698;
2718 -> 2703;
2719 -> 2703;
2720 -> 2707;
2720 -> 2698;
2720 -> 2719;
2720 -> 2703;
2721 -> 2699;
2722 -> 2676;
2723 -> 2677;
2723 -> 2698;
2723 -> 2722;
2723 -> 2676;
2724 -> 2698;
2724 -> 2676;
2725 -> 2698;
2725 -> 2676;
2726 -> 1909;
2726 -> 2725;
2726 -> 2723;
2726 -> 1898;
2727 -> 1909;
2727 -> 1905;
2728 -> 2727;
2728 -> 2726;
2728 -> 1905;
2729 -> 1909;
2729 -> 1905;
2730 -> 1909;
2730 -> 1905;
2731 -> 2730;
2731 -> 2728;
2731 -> 1905;
2732 -> 1905;
2733 -> 2732;
2733 -> 2731;
2733 -> 2728;
2733 -> 1905;
2734 -> 1905;
2735 -> 1909;
2735 -> 2734;
2735 -> 2728;
2735 -> 1898;
2736 -> 1909;
2736 -> 1905;
2737 -> 1909;
2737 -> 1905;
2738 -> 2736;
2738 -> 2735;
2738 -> 1905;
2739 -> 2737;
2739 -> 2735;
2739 -> 2738;
2740 -> 2736;
2740 -> 2738;
2741 -> 2738;
2742 -> 2739;
2742 -> 2741;
2743 -> 2740;
2743 -> 2741;
2744 -> 2737;
2744 -> 2741;
2745 -> 2742;
2745 -> 2735;
2745 -> 2741;
2746 -> 2745;
2747 -> 2742;
2747 -> 2735;
2747 -> 2745;
2748 -> 2745;
2749 -> 2748;
2749 -> 2747;
2749 -> 2735;
2749 -> 2745;
2750 -> 2743;
2750 -> 2735;
2750 -> 2745;
2751 -> 2744;
2751 -> 2735;
2751 -> 2750;
2752 -> 2742;
2752 -> 2745;
2753 -> 2746;
2753 -> 2745;
2754 -> 2745;
2755 -> 2746;
2755 -> 2753;
2755 -> 2745;
2756 -> 2753;
2756 -> 2741;
2757 -> 1909;
2757 -> 2756;
2757 -> 2755;
2757 -> 2753;
2757 -> 1898;
2758 -> 1909;
2758 -> 1905;
2759 -> 2758;
2759 -> 2757;
2759 -> 1905;
2760 -> 1909;
2760 -> 1905;
2761 -> 1909;
2761 -> 1905;
2762 -> 2760;
2762 -> 2759;
2762 -> 1905;
2763 -> 1905;
2764 -> 2761;
2764 -> 2759;
2764 -> 2763;
2765 -> 2764;
2765 -> 1905;
2766 -> 1905;
2767 -> 1909;
2767 -> 1905;
2768 -> 1909;
2768 -> 1905;
2769 -> 2767;
2769 -> 2765;
2769 -> 1905;
2770 -> 1905;
2771 -> 2769;
2771 -> 2770;
2772 -> 2768;
2772 -> 2770;
2773 -> 2772;
2773 -> 2765;
2773 -> 2770;
2774 -> 2773;
2774 -> 1905;
2775 -> 1905;
2776 -> 1909;
2776 -> 1905;
2777 -> 1909;
2777 -> 1905;
2778 -> 2776;
2778 -> 2774;
2778 -> 1905;
2779 -> 1905;
2780 -> 2778;
2780 -> 2779;
2781 -> 2777;
2781 -> 2779;
2782 -> 2779;
2783 -> 2780;
2783 -> 2779;
2784 -> 2779;
2785 -> 2783;
2785 -> 2784;
2786 -> 2781;
2786 -> 2784;
2787 -> 2784;
2788 -> 2786;
2788 -> 2787;
2789 -> 2787;
2790 -> 2789;
2790 -> 2788;
2790 -> 2787;
2791 -> 2787;
2792 -> 2788;
2792 -> 2791;
2793 -> 2792;
2793 -> 2774;
2793 -> 2790;
2793 -> 2791;
2794 -> 2793;
2794 -> 2787;
2795 -> 2794;
2795 -> 2784;
2796 -> 2784;
2797 -> 2786;
2797 -> 2796;
2798 -> 2793;
2798 -> 2784;
2799 -> 2798;
2800 -> 2795;
2800 -> 2799;
2800 -> 2798;
2801 -> 2800;
2802 -> 2779;
2803 -> 2782;
2803 -> 2779;
2804 -> 2782;
2804 -> 2779;
2805 -> 2782;
2805 -> 2779;
2806 -> 2782;
2806 -> 2779;
2807 -> 2782;
2807 -> 2779;
2808 -> 2782;
2808 -> 2779;
2809 -> 2782;
2809 -> 2779;
2810 -> 2782;
2810 -> 2779;
2811 -> 2782;
2811 -> 2793;
2811 -> 2779;
2812 -> 2811;
2812 -> 1905;
2813 -> 1905;
2814 -> 1909;
2814 -> 1905;
2815 -> 1909;
2815 -> 1905;
2816 -> 1905;
2817 -> 2815;
2817 -> 2812;
2817 -> 1905;
2818 -> 2816;
2818 -> 2817;
2818 -> 2812;
2818 -> 1905;
2819 -> 1905;
2820 -> 2816;
2820 -> 2818;
2820 -> 2819;
2820 -> 1905;
2821 -> 2816;
2821 -> 2818;
2821 -> 2820;
2822 -> 2821;
2822 -> 2820;
2823 -> 2822;
2823 -> 2821;
2823 -> 0;
2824 -> 2823;
2825 -> 2822;
2825 -> 2821;
2825 -> 2823;
2826 -> 1909;
2826 -> 2824;
2826 -> 1905;
2827 -> 1905;
2828 -> 2827;
2829 -> 2828;
2830 -> 2829;
2831 -> 1909;
2831 -> 2830;
2832 -> 2831;
2832 -> 2824;
2832 -> 2830;
2833 -> 2831;
2833 -> 2824;
2833 -> 2830;
2834 -> 2833;
2834 -> 2829;
2835 -> 2827;
2836 -> 2824;
2836 -> 1905;
2837 -> 1905;
2838 -> 1909;
2838 -> 1905;
2839 -> 1909;
2839 -> 1905;
2840 -> 1909;
2840 -> 1905;
2841 -> 1909;
2841 -> 1905;
2842 -> 1905;
2843 -> 2841;
2843 -> 2824;
2843 -> 2842;
2844 -> 2842;
2845 -> 2844;
2846 -> 2845;
2847 -> 2843;
2847 -> 2846;
2848 -> 2847;
2848 -> 2845;
2849 -> 2842;
2850 -> 2843;
2850 -> 1905;
2851 -> 2850;
2851 -> 2838;
2851 -> 2843;
2851 -> 1905;
2852 -> 1905;
2853 -> 2852;
2853 -> 1905;
2854 -> 2840;
2854 -> 2853;
2854 -> 2824;
2854 -> 2852;
2854 -> 2843;
2854 -> 1905;
2855 -> 1905;
2856 -> 2852;
2856 -> 2854;
2856 -> 1905;
2857 -> 2856;
2858 -> 2852;
2858 -> 2856;
2858 -> 1905;
2859 -> 2857;
2859 -> 1905;
2860 -> 1909;
2860 -> 2859;
2860 -> 2858;
2860 -> 1898;
2862 -> 2861;
2863 -> 2861;
2864 -> 1909;
2864 -> 1905;
2865 -> 1909;
2865 -> 1905;
2866 -> 1905;
2867 -> 1909;
2867 -> 2866;
2867 -> 2860;
2867 -> 1898;
2868 -> 1909;
2868 -> 1905;
2869 -> 1909;
2869 -> 1905;
2870 -> 2869;
2870 -> 1905;
2871 -> 2868;
2871 -> 1905;
2872 -> 2869;
2872 -> 2867;
2872 -> 1905;
2873 -> 2870;
2873 -> 2871;
2873 -> 2872;
2873 -> 2869;
2873 -> 2867;
2873 -> 1905;
2874 -> 1905;
2875 -> 2873;
2875 -> 0;
2875 -> 2874;
2876 -> 2874;
2877 -> 2873;
2878 -> 2877;
2878 -> 2873;
2879 -> 2873;
2879 -> 2874;
2880 -> 2874;
2881 -> 2880;
2882 -> 2873;
2882 -> 2881;
2883 -> 2882;
2883 -> 2880;
2884 -> 2874;
2885 -> 2874;
2886 -> 1909;
2886 -> 1905;
2887 -> 1909;
2887 -> 1905;
2888 -> 1909;
2888 -> 1905;
2889 -> 1909;
2889 -> 1905;
2890 -> 1909;
2890 -> 1905;
2891 -> 1909;
2891 -> 1905;
2892 -> 2886;
2892 -> 1905;
2893 -> 2892;
2893 -> 2873;
2893 -> 1905;
2894 -> 1905;
2895 -> 2889;
2895 -> 2894;
2895 -> 1905;
2896 -> 2886;
2896 -> 1905;
2897 -> 2887;
2897 -> 1905;
2898 -> 2888;
2898 -> 1905;
2899 -> 2890;
2899 -> 1905;
2900 -> 1905;
2901 -> 2896;
2901 -> 2900;
2902 -> 2897;
2902 -> 2900;
2903 -> 2898;
2903 -> 2900;
2904 -> 2899;
2904 -> 2900;
2905 -> 2891;
2905 -> 2900;
2906 -> 2900;
2907 -> 2900;
2908 -> 2901;
2908 -> 2893;
2908 -> 2900;
2909 -> 2908;
2909 -> 2893;
2909 -> 2900;
2910 -> 2901;
2910 -> 2893;
2910 -> 2900;
2911 -> 2901;
2911 -> 2910;
2911 -> 2900;
2912 -> 2904;
2912 -> 2911;
2913 -> 2901;
2913 -> 2910;
2913 -> 2912;
2914 -> 2908;
2914 -> 2912;
2915 -> 2912;
2916 -> 2914;
2916 -> 2915;
2917 -> 2915;
2918 -> 2916;
2918 -> 2917;
2918 -> 2915;
2919 -> 2918;
2920 -> 2916;
2920 -> 2910;
2920 -> 2918;
2921 -> 2915;
2922 -> 2921;
2922 -> 2912;
2923 -> 2913;
2923 -> 2922;
2923 -> 2912;
2924 -> 2901;
2924 -> 2923;
2925 -> 2901;
2925 -> 2910;
2925 -> 2923;
2926 -> 2900;
2927 -> 2905;
2927 -> 2910;
2927 -> 2926;
2927 -> 2900;
2928 -> 2901;
2928 -> 2910;
2928 -> 2900;
2929 -> 1905;
2930 -> 2889;
2930 -> 2929;
2930 -> 1905;
2931 -> 2928;
2931 -> 2930;
2932 -> 1909;
2932 -> 1905;
2933 -> 1909;
2933 -> 1905;
2934 -> 1909;
2934 -> 1905;
2935 -> 1909;
2935 -> 1905;
2936 -> 1905;
2937 -> 2934;
2937 -> 2936;
2937 -> 1905;
2938 -> 2932;
2938 -> 2931;
2938 -> 1905;
2939 -> 2932;
2939 -> 2938;
2940 -> 2933;
2940 -> 2938;
2941 -> 2934;
2941 -> 2938;
2942 -> 2938;
2943 -> 2938;
2944 -> 2939;
2944 -> 2943;
2945 -> 2940;
2945 -> 2943;
2946 -> 2941;
2946 -> 2943;
2947 -> 2942;
2947 -> 2943;
2948 -> 2942;
2948 -> 2943;
2949 -> 2935;
2949 -> 2943;
2950 -> 2944;
2950 -> 2931;
2950 -> 2943;
2951 -> 2943;
2952 -> 2946;
2952 -> 2951;
2952 -> 2943;
2953 -> 2944;
2953 -> 2950;
2953 -> 2943;
2954 -> 2944;
2954 -> 2950;
2954 -> 2953;
2955 -> 2944;
2955 -> 2950;
2955 -> 0;
2955 -> 2943;
2956 -> 2944;
2956 -> 2950;
2956 -> 2943;
2957 -> 2948;
2957 -> 2956;
2958 -> 2957;
2959 -> 2957;
2960 -> 2944;
2960 -> 2950;
2960 -> 2957;
2961 -> 2957;
2962 -> 2960;
2962 -> 2961;
2963 -> 2961;
2964 -> 2962;
2964 -> 2963;
2965 -> 2963;
2966 -> 2964;
2966 -> 2965;
2966 -> 2963;
2967 -> 2963;
2968 -> 2967;
2968 -> 2961;
2969 -> 2944;
2969 -> 2950;
2969 -> 2968;
2970 -> 2944;
2970 -> 2950;
2970 -> 2943;
2971 -> 2949;
2971 -> 2950;
2971 -> 2943;
2972 -> 2944;
2972 -> 2950;
2972 -> 2943;
2973 -> 1909;
2973 -> 1905;
2974 -> 1909;
2974 -> 1905;
2975 -> 1909;
2975 -> 1905;
2976 -> 1909;
2976 -> 1905;
2977 -> 1909;
2977 -> 1905;
2978 -> 1909;
2978 -> 1905;
2979 -> 1905;
2980 -> 2975;
2980 -> 2979;
2980 -> 1905;
2981 -> 2973;
2981 -> 2971;
2981 -> 1905;
2982 -> 2973;
2982 -> 2971;
2982 -> 2981;
2983 -> 2973;
2983 -> 2971;
2983 -> 0;
2983 -> 1905;
2984 -> 2973;
2984 -> 2971;
2984 -> 1905;
2985 -> 2977;
2985 -> 2984;
2986 -> 2973;
2986 -> 2971;
2986 -> 1905;
2987 -> 1909;
2987 -> 1905;
2988 -> 1909;
2988 -> 1905;
2989 -> 1909;
2989 -> 1905;
2990 -> 2989;
2990 -> 2971;
2990 -> 1905;
2991 -> 2987;
2991 -> 1905;
2992 -> 2990;
2992 -> 2991;
2992 -> 1905;
2993 -> 1905;
2994 -> 2987;
2994 -> 2993;
2994 -> 1905;
2995 -> 1905;
2996 -> 2987;
2996 -> 1905;
2997 -> 2995;
2997 -> 1905;
2998 -> 2989;
2998 -> 2971;
2998 -> 2996;
2998 -> 2997;
2998 -> 1905;
2999 -> 2998;
3000 -> 2973;
3000 -> 2999;
3000 -> 1905;
3001 -> 2973;
3001 -> 2999;
3001 -> 3000;
3002 -> 2973;
3002 -> 2999;
3002 -> 0;
3002 -> 1905;
3003 -> 2973;
3003 -> 2999;
3003 -> 1905;
3004 -> 2977;
3004 -> 3003;
3005 -> 2973;
3005 -> 2999;
3005 -> 1905;
3006 -> 1909;
3006 -> 1905;
3007 -> 1909;
3007 -> 1905;
3008 -> 3006;
3008 -> 1905;
3009 -> 1905;
3010 -> 3008;
3010 -> 3009;
3010 -> 2999;
3010 -> 1905;
3011 -> 3006;
3011 -> 1905;
3012 -> 3011;
3012 -> 2999;
3012 -> 3010;
3012 -> 1905;
3013 -> 1905;
3014 -> 3012;
3014 -> 3013;
3015 -> 3014;
3015 -> 3012;
3015 -> 3013;
3016 -> 3014;
3016 -> 3012;
3016 -> 3015;
3017 -> 3016;
3017 -> 3015;
3018 -> 3015;
3019 -> 3017;
3019 -> 3018;
3020 -> 3019;
3020 -> 3012;
3020 -> 0;
3020 -> 3018;
3021 -> 3019;
3021 -> 3012;
3021 -> 3018;
3022 -> 3018;
3023 -> 3021;
3023 -> 3022;
3024 -> 3022;
3025 -> 3023;
3025 -> 3024;
3025 -> 3022;
3026 -> 3025;
3027 -> 3023;
3027 -> 3012;
3027 -> 3025;
3028 -> 3022;
3029 -> 3028;
3029 -> 3018;
3030 -> 3020;
3030 -> 3029;
3030 -> 3018;
3031 -> 3013;
3032 -> 3031;
3032 -> 1905;
3033 -> 3012;
3033 -> 3032;
3033 -> 1905;
3034 -> 3006;
3034 -> 1905;
3035 -> 3033;
3035 -> 1905;
3036 -> 1905;
3037 -> 3035;
3037 -> 3036;
3038 -> 3037;
3038 -> 3035;
3038 -> 3036;
3039 -> 3037;
3039 -> 3035;
3039 -> 3038;
3040 -> 3039;
3040 -> 3038;
3041 -> 3038;
3042 -> 3040;
3042 -> 3041;
3043 -> 3042;
3043 -> 3035;
3043 -> 0;
3043 -> 3041;
3044 -> 3042;
3044 -> 3035;
3044 -> 3041;
3045 -> 3041;
3046 -> 3044;
3046 -> 3045;
3047 -> 3045;
3048 -> 3046;
3048 -> 3047;
3048 -> 3045;
3049 -> 3048;
3050 -> 3046;
3050 -> 3035;
3050 -> 3048;
3051 -> 3045;
3052 -> 3051;
3052 -> 3041;
3053 -> 3043;
3053 -> 3052;
3053 -> 3041;
3054 -> 3036;
3055 -> 3033;
3055 -> 1905;
3056 -> 3006;
3056 -> 3055;
3057 -> 3055;
3058 -> 3056;
3058 -> 3057;
3058 -> 2999;
3058 -> 3035;
3058 -> 3055;
3059 -> 2933;
3059 -> 3058;
3060 -> 2934;
3060 -> 3058;
3061 -> 3059;
3061 -> 3058;
3062 -> 3060;
3062 -> 3058;
3063 -> 3058;
3064 -> 3058;
3065 -> 3058;
3066 -> 3062;
3066 -> 3065;
3066 -> 3058;
3067 -> 3058;
3068 -> 3058;
3068 -> 3067;
3069 -> 3058;
3069 -> 0;
3070 -> 3058;
3071 -> 3064;
3071 -> 3070;
3072 -> 3071;
3073 -> 3071;
3074 -> 3058;
3074 -> 3071;
3075 -> 3071;
3076 -> 3074;
3076 -> 3075;
3077 -> 3075;
3078 -> 3076;
3078 -> 3077;
3079 -> 3077;
3080 -> 3078;
3080 -> 3079;
3080 -> 3077;
3081 -> 3077;
3082 -> 3081;
3082 -> 3075;
3083 -> 3058;
3083 -> 3082;
3084 -> 3058;
3085 -> 1909;
3085 -> 1905;
3086 -> 1909;
3086 -> 1905;
3087 -> 1909;
3087 -> 1905;
3088 -> 3085;
3088 -> 3058;
3088 -> 1905;
3089 -> 1905;
3090 -> 3088;
3090 -> 3089;
3090 -> 1905;
3091 -> 3086;
3091 -> 0;
3091 -> 3090;
3092 -> 3088;
3092 -> 3086;
3092 -> 3090;
3093 -> 3086;
3093 -> 0;
3093 -> 3092;
3094 -> 2933;
3094 -> 3092;
3095 -> 2934;
3095 -> 3092;
3096 -> 3094;
3096 -> 3092;
3097 -> 3095;
3097 -> 3092;
3098 -> 3092;
3099 -> 3092;
3100 -> 3092;
3101 -> 3097;
3101 -> 3100;
3101 -> 3092;
3102 -> 3092;
3103 -> 3092;
3103 -> 3102;
3104 -> 3092;
3104 -> 0;
3105 -> 3092;
3106 -> 3099;
3106 -> 3105;
3107 -> 3106;
3108 -> 3106;
3109 -> 3092;
3109 -> 3106;
3110 -> 3106;
3111 -> 3109;
3111 -> 3110;
3112 -> 3110;
3113 -> 3111;
3113 -> 3112;
3114 -> 3112;
3115 -> 3113;
3115 -> 3114;
3115 -> 3112;
3116 -> 3112;
3117 -> 3116;
3117 -> 3110;
3118 -> 3092;
3118 -> 3117;
3119 -> 3092;
3120 -> 2973;
3120 -> 3092;
3120 -> 1905;
3121 -> 2973;
3121 -> 3092;
3121 -> 3120;
3122 -> 2973;
3122 -> 3092;
3122 -> 0;
3122 -> 1905;
3123 -> 2973;
3123 -> 3092;
3123 -> 1905;
3124 -> 2977;
3124 -> 3123;
3125 -> 2973;
3125 -> 3092;
3125 -> 1905;
3126 -> 2989;
3126 -> 3092;
3126 -> 1905;
3127 -> 3092;
3127 -> 3013;
3128 -> 3127;
3128 -> 3092;
3128 -> 3013;
3129 -> 3127;
3129 -> 3092;
3129 -> 3128;
3130 -> 3129;
3130 -> 3128;
3131 -> 3128;
3132 -> 3130;
3132 -> 3131;
3133 -> 3132;
3133 -> 3092;
3133 -> 0;
3133 -> 3131;
3134 -> 3132;
3134 -> 3092;
3134 -> 3131;
3135 -> 3131;
3136 -> 3134;
3136 -> 3135;
3137 -> 3135;
3138 -> 3136;
3138 -> 3137;
3138 -> 3135;
3139 -> 3138;
3140 -> 3136;
3140 -> 3092;
3140 -> 3138;
3141 -> 3135;
3142 -> 3141;
3142 -> 3131;
3143 -> 3133;
3143 -> 3142;
3143 -> 3131;
3144 -> 3092;
3144 -> 3036;
3145 -> 3144;
3145 -> 3092;
3145 -> 3036;
3146 -> 3144;
3146 -> 3092;
3146 -> 3145;
3147 -> 3146;
3147 -> 3145;
3148 -> 3145;
3149 -> 3147;
3149 -> 3148;
3150 -> 3149;
3150 -> 3092;
3150 -> 0;
3150 -> 3148;
3151 -> 3149;
3151 -> 3092;
3151 -> 3148;
3152 -> 3148;
3153 -> 3151;
3153 -> 3152;
3154 -> 3152;
3155 -> 3153;
3155 -> 3154;
3155 -> 3152;
3156 -> 3155;
3157 -> 3153;
3157 -> 3092;
3157 -> 3155;
3158 -> 3152;
3159 -> 3158;
3159 -> 3148;
3160 -> 3150;
3160 -> 3159;
3160 -> 3148;
3161 -> 2901;
3161 -> 3092;
3161 -> 2900;
3162 -> 3161;
3162 -> 3092;
3162 -> 2900;
3163 -> 2901;
3163 -> 3092;
3163 -> 2900;
3164 -> 2904;
3164 -> 3163;
3165 -> 2901;
3165 -> 3092;
3165 -> 3164;
3166 -> 3161;
3166 -> 3164;
3167 -> 3164;
3168 -> 3166;
3168 -> 3167;
3169 -> 3167;
3170 -> 3168;
3170 -> 3169;
3170 -> 3167;
3171 -> 3170;
3172 -> 3168;
3172 -> 3092;
3172 -> 3170;
3173 -> 3167;
3174 -> 3173;
3174 -> 3164;
3175 -> 3165;
3175 -> 3174;
3175 -> 3164;
3176 -> 2901;
3176 -> 3175;
3177 -> 2901;
3177 -> 3092;
3177 -> 3175;
3178 -> 2905;
3178 -> 3092;
3178 -> 2926;
3178 -> 2900;
3179 -> 3115;
3180 -> 3113;
3180 -> 3092;
3180 -> 3115;
3181 -> 1909;
3181 -> 1905;
3182 -> 3181;
3182 -> 3092;
3182 -> 1905;
3183 -> 1905;
3184 -> 2665;
3184 -> 3182;
3185 -> 3184;
3185 -> 3182;
3186 -> 3182;
3187 -> 3182;
3188 -> 2730;
3188 -> 3187;
3188 -> 1905;
3189 -> 2732;
3189 -> 3188;
3189 -> 3187;
3189 -> 1905;
3190 -> 1909;
3190 -> 1905;
3191 -> 3190;
3191 -> 1905;
3192 -> 3191;
3192 -> 3190;
3192 -> 3187;
3192 -> 1905;
3193 -> 1905;
3194 -> 2760;
3194 -> 3192;
3194 -> 1905;
3195 -> 2767;
3195 -> 3192;
3195 -> 1905;
3196 -> 3195;
3196 -> 2770;
3197 -> 2776;
3197 -> 3192;
3197 -> 1905;
3198 -> 3197;
3198 -> 2779;
3199 -> 3198;
3199 -> 2779;
3200 -> 3199;
3200 -> 2784;
3201 -> 3192;
3201 -> 2787;
3202 -> 3201;
3202 -> 2784;
3203 -> 3192;
3203 -> 2784;
3204 -> 3203;
3205 -> 3202;
3205 -> 3204;
3205 -> 3203;
3206 -> 3205;
3207 -> 1909;
3207 -> 3192;
3207 -> 1905;
3208 -> 2831;
3208 -> 3192;
3208 -> 2830;
3209 -> 2831;
3209 -> 3192;
3209 -> 2830;
3210 -> 3209;
3210 -> 2829;
3211 -> 3192;
3211 -> 1905;
3212 -> 3192;
3212 -> 2846;
3213 -> 3212;
3213 -> 2845;
3214 -> 3192;
3214 -> 1905;
3215 -> 3214;
3215 -> 2838;
3215 -> 3192;
3215 -> 1905;
3216 -> 2852;
3216 -> 3192;
3217 -> 3192;
3218 -> 2852;
3218 -> 3192;
3219 -> 3218;
3219 -> 3216;
3219 -> 3192;
3220 -> 3192;
3221 -> 3219;
3221 -> 3220;
3221 -> 3192;
3222 -> 2839;
3222 -> 3221;
3223 -> 3219;
3223 -> 3221;
3224 -> 3221;
3225 -> 3222;
3225 -> 3224;
3226 -> 3223;
3226 -> 3224;
3227 -> 2841;
3227 -> 3224;
3228 -> 3226;
3228 -> 3225;
3228 -> 3224;
3229 -> 3228;
3230 -> 2973;
3230 -> 3229;
3230 -> 1905;
3231 -> 2973;
3231 -> 3229;
3231 -> 3230;
3232 -> 2973;
3232 -> 3229;
3232 -> 0;
3232 -> 1905;
3233 -> 2973;
3233 -> 3229;
3233 -> 1905;
3234 -> 2977;
3234 -> 3233;
3235 -> 3234;
3236 -> 3234;
3237 -> 2973;
3237 -> 3229;
3237 -> 3234;
3238 -> 3234;
3239 -> 3237;
3239 -> 3238;
3240 -> 3238;
3241 -> 3239;
3241 -> 3240;
3242 -> 3240;
3243 -> 3241;
3243 -> 3242;
3243 -> 3240;
3244 -> 3240;
3245 -> 3244;
3245 -> 3238;
3246 -> 2973;
3246 -> 3229;
3246 -> 3245;
3247 -> 2973;
3247 -> 3229;
3247 -> 1905;
3248 -> 2989;
3248 -> 3229;
3248 -> 1905;
3249 -> 1909;
3249 -> 3229;
3249 -> 1905;
3250 -> 2831;
3250 -> 3229;
3250 -> 2830;
3251 -> 2831;
3251 -> 3229;
3251 -> 2830;
3252 -> 3251;
3252 -> 2829;
3253 -> 3229;
3253 -> 1905;
3254 -> 3229;
3254 -> 2846;
3255 -> 3254;
3255 -> 2845;
3256 -> 3229;
3256 -> 1905;
3257 -> 3256;
3257 -> 2838;
3257 -> 3229;
3257 -> 1905;
3258 -> 2933;
3258 -> 3229;
3259 -> 2934;
3259 -> 3229;
3260 -> 3258;
3260 -> 3229;
3261 -> 3259;
3261 -> 3229;
3262 -> 3229;
3263 -> 3229;
3264 -> 3229;
3265 -> 3261;
3265 -> 3264;
3265 -> 3229;
3266 -> 3229;
3267 -> 3229;
3267 -> 3266;
3268 -> 3229;
3268 -> 0;
3269 -> 3229;
3270 -> 3263;
3270 -> 3269;
3271 -> 3270;
3272 -> 3270;
3273 -> 3229;
3273 -> 3270;
3274 -> 3270;
3275 -> 3273;
3275 -> 3274;
3276 -> 3274;
3277 -> 3275;
3277 -> 3276;
3278 -> 3276;
3279 -> 3277;
3279 -> 3278;
3279 -> 3276;
3280 -> 3276;
3281 -> 3280;
3281 -> 3274;
3282 -> 3229;
3282 -> 3281;
3283 -> 3229;
3284 -> 1909;
3284 -> 1905;
3285 -> 1909;
3285 -> 1905;
3286 -> 3285;
3286 -> 3229;
3286 -> 1905;
3287 -> 3285;
3287 -> 3229;
3287 -> 1905;
3288 -> 3287;
3289 -> 3285;
3289 -> 3288;
3290 -> 3289;
3290 -> 3229;
3290 -> 3288;
3291 -> 3288;
3292 -> 3289;
3292 -> 3229;
3292 -> 3288;
3293 -> 3290;
3293 -> 3229;
3293 -> 3292;
3294 -> 3292;
3295 -> 3294;
3295 -> 3293;
3295 -> 3229;
3295 -> 3292;
3296 -> 3289;
3296 -> 3229;
3296 -> 3288;
3297 -> 3288;
3298 -> 3290;
3298 -> 3229;
3298 -> 3297;
3299 -> 3298;
3299 -> 3288;
3300 -> 3290;
3300 -> 3288;
3301 -> 3291;
3301 -> 3288;
3302 -> 3288;
3303 -> 3300;
3303 -> 3302;
3304 -> 3301;
3304 -> 3302;
3305 -> 3302;
3306 -> 3305;
3306 -> 3302;
3307 -> 3303;
3307 -> 3229;
3307 -> 3302;
3308 -> 3304;
3308 -> 3302;
3309 -> 3302;
3310 -> 3306;
3310 -> 3309;
3311 -> 3307;
3311 -> 3309;
3312 -> 3308;
3312 -> 3309;
3313 -> 3309;
3314 -> 3311;
3314 -> 3313;
3314 -> 3309;
3315 -> 3302;
3316 -> 3302;
3317 -> 3303;
3317 -> 3307;
3317 -> 3316;
3318 -> 3317;
3318 -> 3302;
3319 -> 3305;
3319 -> 3318;
3320 -> 3303;
3320 -> 3307;
3320 -> 3318;
3321 -> 3304;
3321 -> 3318;
3322 -> 3318;
3323 -> 3319;
3323 -> 3322;
3324 -> 3320;
3324 -> 3322;
3325 -> 3321;
3325 -> 3322;
3326 -> 3322;
3327 -> 3324;
3327 -> 3326;
3327 -> 3322;
3328 -> 3318;
3329 -> 3305;
3329 -> 3302;
3330 -> 3329;
3330 -> 3288;
3331 -> 3291;
3331 -> 3288;
3332 -> 3331;
3332 -> 3287;
3333 -> 3332;
3333 -> 3285;
3333 -> 3287;
3334 -> 3287;
3335 -> 3285;
3335 -> 3320;
3335 -> 3333;
3335 -> 3331;
3335 -> 3334;
3335 -> 3287;
3336 -> 3285;
3336 -> 3320;
3336 -> 3333;
3336 -> 1905;
3337 -> 1909;
3337 -> 1905;
3338 -> 1909;
3338 -> 1905;
3339 -> 1909;
3339 -> 1905;
3340 -> 3339;
3340 -> 3336;
3340 -> 1905;
3341 -> 3340;
3341 -> 3336;
3341 -> 1905;
3342 -> 1905;
3343 -> 3342;
3343 -> 3341;
3343 -> 1905;
3344 -> 1909;
3344 -> 1905;
3345 -> 0;
3345 -> 1905;
3346 -> 1909;
3346 -> 3345;
3346 -> 3336;
3346 -> 0;
3346 -> 1898;
3347 -> 2973;
3347 -> 3346;
3347 -> 1905;
3348 -> 2973;
3348 -> 3346;
3348 -> 3347;
3349 -> 2973;
3349 -> 3346;
3349 -> 0;
3349 -> 1905;
3350 -> 2973;
3350 -> 3346;
3350 -> 1905;
3351 -> 2977;
3351 -> 3350;
3352 -> 2973;
3352 -> 3346;
3352 -> 1905;
3353 -> 2989;
3353 -> 3346;
3353 -> 1905;
3354 -> 2933;
3354 -> 3346;
3355 -> 2934;
3355 -> 3346;
3356 -> 3354;
3356 -> 3346;
3357 -> 3355;
3357 -> 3346;
3358 -> 3346;
3359 -> 3346;
3360 -> 3346;
3361 -> 3357;
3361 -> 3360;
3361 -> 3346;
3362 -> 3346;
3363 -> 3346;
3363 -> 3362;
3364 -> 3346;
3364 -> 0;
3365 -> 3346;
3366 -> 3359;
3366 -> 3365;
3367 -> 3366;
3368 -> 3366;
3369 -> 3346;
3369 -> 3366;
3370 -> 3366;
3371 -> 3369;
3371 -> 3370;
3372 -> 3370;
3373 -> 3371;
3373 -> 3372;
3374 -> 3372;
3375 -> 3373;
3375 -> 3374;
3375 -> 3372;
3376 -> 3372;
3377 -> 3376;
3377 -> 3370;
3378 -> 3346;
3378 -> 3377;
3379 -> 3346;
3380 -> 3086;
3380 -> 0;
3380 -> 3346;
3381 -> 1909;
3381 -> 1905;
3382 -> 3381;
3382 -> 3346;
3382 -> 1905;
3383 -> 1909;
3383 -> 1905;
3384 -> 3383;
3384 -> 3382;
3384 -> 1905;
3385 -> 3285;
3385 -> 3384;
3385 -> 1905;
3386 -> 2973;
3386 -> 3384;
3386 -> 1905;
3387 -> 2973;
3387 -> 3384;
3387 -> 3386;
3388 -> 2973;
3388 -> 3384;
3388 -> 0;
3388 -> 1905;
3389 -> 2973;
3389 -> 3384;
3389 -> 1905;
3390 -> 2977;
3390 -> 3389;
3391 -> 2973;
3391 -> 3384;
3391 -> 1905;
3392 -> 1909;
3392 -> 1905;
3393 -> 3392;
3393 -> 3384;
3393 -> 1905;
3394 -> 0;
3394 -> 3393;
3395 -> 2933;
3395 -> 3394;
3396 -> 2934;
3396 -> 3394;
3397 -> 3395;
3397 -> 3394;
3398 -> 3396;
3398 -> 3394;
3399 -> 3394;
3400 -> 3394;
3401 -> 3394;
3402 -> 3398;
3402 -> 3401;
3402 -> 3394;
3403 -> 3394;
3404 -> 3394;
3404 -> 3403;
3405 -> 3394;
3405 -> 0;
3406 -> 3394;
3407 -> 3400;
3407 -> 3406;
3408 -> 3407;
3409 -> 3407;
3410 -> 3394;
3410 -> 3407;
3411 -> 3407;
3412 -> 3410;
3412 -> 3411;
3413 -> 3411;
3414 -> 3412;
3414 -> 3413;
3415 -> 3413;
3416 -> 3414;
3416 -> 3415;
3416 -> 3413;
3417 -> 3413;
3418 -> 3417;
3418 -> 3411;
3419 -> 3394;
3419 -> 3418;
3420 -> 3394;
3421 -> 3086;
3421 -> 0;
3421 -> 3394;
3422 -> 1909;
3422 -> 1905;
3423 -> 3422;
3423 -> 3394;
3423 -> 1905;
3424 -> 2973;
3424 -> 3423;
3424 -> 1905;
3425 -> 2973;
3425 -> 3423;
3425 -> 3424;
3426 -> 2973;
3426 -> 3423;
3426 -> 0;
3426 -> 1905;
3427 -> 2973;
3427 -> 3423;
3427 -> 1905;
3428 -> 2977;
3428 -> 3427;
3429 -> 3428;
3430 -> 3428;
3431 -> 2973;
3431 -> 3423;
3431 -> 3428;
3432 -> 3428;
3433 -> 3431;
3433 -> 3432;
3434 -> 3432;
3435 -> 3433;
3435 -> 3434;
3436 -> 3434;
3437 -> 3435;
3437 -> 3436;
3437 -> 3434;
3438 -> 3434;
3439 -> 3438;
3439 -> 3432;
3440 -> 2973;
3440 -> 3423;
3440 -> 3439;
3441 -> 2973;
3441 -> 3423;
3441 -> 1905;
3442 -> 2989;
3442 -> 3423;
3442 -> 1905;
3443 -> 3423;
3443 -> 0;
3443 -> 2874;
3444 -> 3423;
3445 -> 3444;
3445 -> 3423;
3446 -> 3423;
3446 -> 2874;
3447 -> 2901;
3447 -> 3423;
3447 -> 2900;
3448 -> 3447;
3448 -> 3423;
3448 -> 2900;
3449 -> 2901;
3449 -> 3423;
3449 -> 2900;
3450 -> 2904;
3450 -> 3449;
3451 -> 2901;
3451 -> 3423;
3451 -> 3450;
3452 -> 3447;
3452 -> 3450;
3453 -> 3450;
3454 -> 3452;
3454 -> 3453;
3455 -> 3453;
3456 -> 3454;
3456 -> 3455;
3456 -> 3453;
3457 -> 3456;
3458 -> 3454;
3458 -> 3423;
3458 -> 3456;
3459 -> 3453;
3460 -> 3459;
3460 -> 3450;
3461 -> 3451;
3461 -> 3460;
3461 -> 3450;
3462 -> 2901;
3462 -> 3461;
3463 -> 2901;
3463 -> 3423;
3463 -> 3461;
3464 -> 2905;
3464 -> 3423;
3464 -> 2926;
3464 -> 2900;
3465 -> 3423;
3465 -> 3013;
3466 -> 3465;
3466 -> 3423;
3466 -> 3013;
3467 -> 3465;
3467 -> 3423;
3467 -> 3466;
3468 -> 3467;
3468 -> 3466;
3469 -> 3466;
3470 -> 3468;
3470 -> 3469;
3471 -> 3470;
3471 -> 3423;
3471 -> 0;
3471 -> 3469;
3472 -> 3470;
3472 -> 3423;
3472 -> 3469;
3473 -> 3469;
3474 -> 3472;
3474 -> 3473;
3475 -> 3473;
3476 -> 3474;
3476 -> 3475;
3476 -> 3473;
3477 -> 3476;
3478 -> 3474;
3478 -> 3423;
3478 -> 3476;
3479 -> 3473;
3480 -> 3479;
3480 -> 3469;
3481 -> 3471;
3481 -> 3480;
3481 -> 3469;
3482 -> 3423;
3482 -> 3036;
3483 -> 3482;
3483 -> 3423;
3483 -> 3036;
3484 -> 3482;
3484 -> 3423;
3484 -> 3483;
3485 -> 3484;
3485 -> 3483;
3486 -> 3483;
3487 -> 3485;
3487 -> 3486;
3488 -> 3487;
3488 -> 3423;
3488 -> 0;
3488 -> 3486;
3489 -> 3487;
3489 -> 3423;
3489 -> 3486;
3490 -> 3486;
3491 -> 3489;
3491 -> 3490;
3492 -> 3490;
3493 -> 3491;
3493 -> 3492;
3493 -> 3490;
3494 -> 3493;
3495 -> 3491;
3495 -> 3423;
3495 -> 3493;
3496 -> 3490;
3497 -> 3496;
3497 -> 3486;
3498 -> 3488;
3498 -> 3497;
3498 -> 3486;
3499 -> 2933;
3499 -> 3423;
3500 -> 2934;
3500 -> 3423;
3501 -> 3499;
3501 -> 3423;
3502 -> 3500;
3502 -> 3423;
3503 -> 3423;
3504 -> 3423;
3505 -> 3423;
3506 -> 3502;
3506 -> 3505;
3506 -> 3423;
3507 -> 3423;
3508 -> 3423;
3508 -> 3507;
3509 -> 3423;
3509 -> 0;
3510 -> 3423;
3511 -> 3504;
3511 -> 3510;
3512 -> 3511;
3513 -> 3511;
3514 -> 3423;
3514 -> 3511;
3515 -> 3511;
3516 -> 3514;
3516 -> 3515;
3517 -> 3515;
3518 -> 3516;
3518 -> 3517;
3519 -> 3517;
3520 -> 3518;
3520 -> 3519;
3520 -> 3517;
3521 -> 3517;
3522 -> 3521;
3522 -> 3515;
3523 -> 3423;
3523 -> 3522;
3524 -> 3423;
3525 -> 3086;
3525 -> 0;
3525 -> 3423;
3526 -> 0;
3526 -> 3525;
3527 -> 3526;
3527 -> 3087;
3527 -> 3423;
3527 -> 3525;
3528 -> 3525;
3529 -> 3528;
3530 -> 3527;
3530 -> 3529;
3531 -> 3530;
3531 -> 3528;
3532 -> 2901;
3532 -> 3527;
3532 -> 2900;
3533 -> 3532;
3533 -> 3527;
3533 -> 2900;
3534 -> 2901;
3534 -> 3527;
3534 -> 2900;
3535 -> 2904;
3535 -> 3534;
3536 -> 2901;
3536 -> 3527;
3536 -> 3535;
3537 -> 3532;
3537 -> 3535;
3538 -> 3535;
3539 -> 3537;
3539 -> 3538;
3540 -> 3538;
3541 -> 3539;
3541 -> 3540;
3541 -> 3538;
3542 -> 3541;
3543 -> 3539;
3543 -> 3527;
3543 -> 3541;
3544 -> 3538;
3545 -> 3544;
3545 -> 3535;
3546 -> 3536;
3546 -> 3545;
3546 -> 3535;
3547 -> 2901;
3547 -> 3546;
3548 -> 2901;
3548 -> 3527;
3548 -> 3546;
3549 -> 2905;
3549 -> 3527;
3549 -> 2926;
3549 -> 2900;
3550 -> 2973;
3550 -> 3527;
3550 -> 1905;
3551 -> 2973;
3551 -> 3527;
3551 -> 3550;
3552 -> 2973;
3552 -> 3527;
3552 -> 0;
3552 -> 1905;
3553 -> 2973;
3553 -> 3527;
3553 -> 1905;
3554 -> 2977;
3554 -> 3553;
3555 -> 2973;
3555 -> 3527;
3555 -> 1905;
3556 -> 2989;
3556 -> 3527;
3556 -> 1905;
3557 -> 2933;
3557 -> 3527;
3558 -> 2934;
3558 -> 3527;
3559 -> 3557;
3559 -> 3527;
3560 -> 3558;
3560 -> 3527;
3561 -> 3527;
3562 -> 3527;
3563 -> 3527;
3564 -> 3560;
3564 -> 3563;
3564 -> 3527;
3565 -> 3527;
3566 -> 3527;
3566 -> 3565;
3567 -> 3527;
3567 -> 0;
3568 -> 3527;
3569 -> 3562;
3569 -> 3568;
3570 -> 3569;
3571 -> 3569;
3572 -> 3527;
3572 -> 3569;
3573 -> 3569;
3574 -> 3572;
3574 -> 3573;
3575 -> 3573;
3576 -> 3574;
3576 -> 3575;
3577 -> 3575;
3578 -> 3576;
3578 -> 3577;
3578 -> 3575;
3579 -> 3575;
3580 -> 3579;
3580 -> 3573;
3581 -> 3527;
3581 -> 3580;
3582 -> 3527;
3583 -> 3527;
3583 -> 3013;
3584 -> 3583;
3584 -> 3527;
3584 -> 3013;
3585 -> 3583;
3585 -> 3527;
3585 -> 3584;
3586 -> 3585;
3586 -> 3584;
3587 -> 3584;
3588 -> 3586;
3588 -> 3587;
3589 -> 3588;
3589 -> 3527;
3589 -> 0;
3589 -> 3587;
3590 -> 3588;
3590 -> 3527;
3590 -> 3587;
3591 -> 3587;
3592 -> 3590;
3592 -> 3591;
3593 -> 3591;
3594 -> 3592;
3594 -> 3593;
3594 -> 3591;
3595 -> 3594;
3596 -> 3592;
3596 -> 3527;
3596 -> 3594;
3597 -> 3591;
3598 -> 3597;
3598 -> 3587;
3599 -> 3589;
3599 -> 3598;
3599 -> 3587;
3600 -> 3527;
3600 -> 3036;
3601 -> 3600;
3601 -> 3527;
3601 -> 3036;
3602 -> 3600;
3602 -> 3527;
3602 -> 3601;
3603 -> 3602;
3603 -> 3601;
3604 -> 3601;
3605 -> 3603;
3605 -> 3604;
3606 -> 3605;
3606 -> 3527;
3606 -> 0;
3606 -> 3604;
3607 -> 3605;
3607 -> 3527;
3607 -> 3604;
3608 -> 3604;
3609 -> 3607;
3609 -> 3608;
3610 -> 3608;
3611 -> 3609;
3611 -> 3610;
3611 -> 3608;
3612 -> 3611;
3613 -> 3609;
3613 -> 3527;
3613 -> 3611;
3614 -> 3608;
3615 -> 3614;
3615 -> 3604;
3616 -> 3606;
3616 -> 3615;
3616 -> 3604;
3617 -> 3578;
3618 -> 3576;
3618 -> 3527;
3618 -> 3578;
3619 -> 1909;
3619 -> 3527;
3619 -> 1905;
3620 -> 2831;
3620 -> 3527;
3620 -> 2830;
3621 -> 2831;
3621 -> 3527;
3621 -> 2830;
3622 -> 3621;
3622 -> 2829;
3623 -> 3527;
3623 -> 1905;
3624 -> 3527;
3624 -> 2846;
3625 -> 3624;
3625 -> 2845;
3626 -> 3527;
3626 -> 1905;
3627 -> 3626;
3627 -> 2838;
3627 -> 3527;
3627 -> 1905;
3628 -> 2841;
3628 -> 3527;
3629 -> 1909;
3629 -> 1905;
3630 -> 1905;
3631 -> 1905;
3632 -> 3629;
3632 -> 3527;
3632 -> 1905;
3633 -> 3631;
3633 -> 3632;
3633 -> 3527;
3633 -> 1905;
3634 -> 1905;
3635 -> 1905;
3636 -> 3631;
3636 -> 3633;
3636 -> 3635;
3636 -> 1905;
3637 -> 3631;
3637 -> 3633;
3637 -> 3636;
3638 -> 3637;
3638 -> 3636;
3639 -> 3637;
3639 -> 3638;
3640 -> 3638;
3641 -> 3639;
3641 -> 3640;
3642 -> 3629;
3642 -> 3640;
3643 -> 3641;
3643 -> 3637;
3643 -> 3640;
3644 -> 3642;
3644 -> 3637;
3644 -> 3643;
3644 -> 3640;
3645 -> 3640;
3646 -> 3640;
3647 -> 3641;
3647 -> 3637;
3647 -> 3640;
3648 -> 3647;
3649 -> 3646;
3649 -> 3648;
3649 -> 3647;
3650 -> 3647;
3650 -> 3649;
3651 -> 3650;
3651 -> 3640;
3652 -> 3638;
3653 -> 3651;
3653 -> 3652;
3653 -> 3638;
3654 -> 3637;
3654 -> 3653;
3655 -> 3654;
3655 -> 3637;
3656 -> 3654;
3656 -> 3655;
3657 -> 3656;
3658 -> 3656;
3659 -> 3657;
3659 -> 3658;
3660 -> 3629;
3660 -> 3658;
3661 -> 3659;
3661 -> 3656;
3661 -> 3658;
3662 -> 3660;
3662 -> 3656;
3662 -> 3661;
3662 -> 3658;
3663 -> 3658;
3664 -> 3656;
3665 -> 3659;
3665 -> 3664;
3665 -> 3656;
3666 -> 3630;
3666 -> 3665;
3667 -> 3659;
3667 -> 3665;
3668 -> 3656;
3668 -> 3665;
3669 -> 3665;
3670 -> 3666;
3670 -> 3669;
3671 -> 3667;
3671 -> 3669;
3672 -> 3668;
3672 -> 3669;
3673 -> 3629;
3673 -> 3669;
3674 -> 3671;
3674 -> 3668;
3674 -> 3669;
3675 -> 3674;
3675 -> 3669;
3676 -> 3671;
3676 -> 3674;
3676 -> 3669;
3677 -> 3673;
3677 -> 3674;
3677 -> 3675;
3677 -> 3676;
3677 -> 3669;
3678 -> 3669;
3679 -> 3677;
3679 -> 3678;
3679 -> 3669;
3680 -> 3665;
3681 -> 3656;
3681 -> 3677;
3681 -> 3665;
3682 -> 3681;
3682 -> 3677;
3683 -> 3681;
3683 -> 3682;
3684 -> 3683;
3684 -> 3682;
3685 -> 3630;
3685 -> 3682;
3686 -> 3681;
3686 -> 3682;
3687 -> 3682;
3688 -> 3685;
3688 -> 3687;
3689 -> 3686;
3689 -> 3687;
3690 -> 3629;
3690 -> 3687;
3691 -> 3689;
3691 -> 3687;
3692 -> 3687;
3693 -> 3691;
3693 -> 3692;
3694 -> 3690;
3694 -> 3692;
3695 -> 3693;
3695 -> 3684;
3695 -> 3692;
3696 -> 3694;
3696 -> 3684;
3696 -> 3695;
3696 -> 3692;
3697 -> 3692;
3698 -> 3693;
3698 -> 3684;
3698 -> 3692;
3699 -> 3687;
3700 -> 3698;
3700 -> 3699;
3700 -> 3687;
3701 -> 3688;
3701 -> 3700;
3702 -> 3698;
3702 -> 3700;
3703 -> 3689;
3703 -> 3684;
3703 -> 3700;
3704 -> 3700;
3705 -> 3701;
3705 -> 3704;
3706 -> 3702;
3706 -> 3704;
3707 -> 3703;
3707 -> 3704;
3708 -> 3690;
3708 -> 3704;
3709 -> 3708;
3709 -> 3706;
3709 -> 3704;
3710 -> 3704;
3711 -> 3709;
3711 -> 3710;
3711 -> 3704;
3712 -> 3700;
3713 -> 3682;
3714 -> 3630;
3714 -> 1905;
3715 -> 1909;
3715 -> 3714;
3715 -> 3709;
3715 -> 3630;
3715 -> 1898;
3716 -> 2643;
3716 -> 3715;
3716 -> 2642;
3717 -> 2643;
3717 -> 3715;
3717 -> 2642;
3718 -> 3717;
3718 -> 2640;
3719 -> 1894;
3719 -> 1891;
3720 -> 1891;
3721 -> 3715;
3721 -> 3720;
3722 -> 3719;
3722 -> 3720;
3723 -> 3722;
3723 -> 3720;
3724 -> 3720;
3725 -> 3723;
3725 -> 3724;
3726 -> 3725;
3726 -> 3724;
3727 -> 3724;
3728 -> 3724;
3729 -> 3726;
3729 -> 3728;
3730 -> 3727;
3730 -> 3728;
3731 -> 3728;
3732 -> 3729;
3732 -> 3731;
3732 -> 3728;
3733 -> 3729;
3733 -> 3728;
3734 -> 3729;
3734 -> 3728;
3735 -> 3730;
3735 -> 3733;
3735 -> 3734;
3735 -> 3728;
3736 -> 3721;
3736 -> 3735;
3736 -> 3728;
3737 -> 3729;
3737 -> 3728;
3738 -> 3728;
3739 -> 3736;
3739 -> 3738;
3739 -> 3728;
3740 -> 3728;
3741 -> 3729;
3741 -> 3728;
3742 -> 3728;
3743 -> 3741;
3743 -> 3742;
3744 -> 3742;
3745 -> 3742;
3746 -> 3721;
3746 -> 3742;
3747 -> 3746;
3747 -> 3736;
3747 -> 3742;
3748 -> 3747;
3748 -> 3742;
3749 -> 3745;
3749 -> 3748;
3750 -> 3749;
3750 -> 3744;
3750 -> 3742;
3751 -> 3749;
3751 -> 3744;
3751 -> 3742;
3752 -> 3751;
3752 -> 3742;
3753 -> 3743;
3753 -> 3742;
3754 -> 3743;
3754 -> 3742;
3755 -> 3743;
3755 -> 3742;
3756 -> 3742;
3757 -> 3755;
3757 -> 3756;
3758 -> 1730;
3758 -> 3756;
3759 -> 3756;
3760 -> 3757;
3760 -> 3756;
3761 -> 3756;
3762 -> 3761;
3762 -> 3742;
3763 -> 3762;
3764 -> 3763;
3765 -> 1730;
3765 -> 3763;
3766 -> 3742;
3767 -> 3766;
3767 -> 3742;
3768 -> 3742;
3769 -> 3742;
3770 -> 3766;
3770 -> 3769;
3770 -> 3767;
3770 -> 3742;
3771 -> 3742;
3772 -> 3743;
3772 -> 3742;
3773 -> 3766;
3773 -> 3742;
3774 -> 3771;
3774 -> 3742;
3775 -> 3742;
3776 -> 3773;
3776 -> 3775;
3777 -> 3774;
3777 -> 3775;
3778 -> 3777;
3778 -> 3771;
3778 -> 3775;
3779 -> 3775;
3780 -> 3779;
3780 -> 3778;
3780 -> 3775;
3781 -> 3742;
3782 -> 3742;
3783 -> 3766;
3783 -> 3782;
3783 -> 3770;
3783 -> 3742;
3784 -> 3742;
3785 -> 3742;
3786 -> 3742;
3787 -> 3785;
3787 -> 3786;
3787 -> 3742;
3788 -> 3742;
3789 -> 3766;
3789 -> 3788;
3789 -> 3783;
3789 -> 3742;
3790 -> 3771;
3790 -> 3742;
3791 -> 3784;
3791 -> 3742;
3792 -> 0;
3792 -> 3742;
3793 -> 3742;
3794 -> 3742;
3795 -> 3790;
3795 -> 3794;
3796 -> 3791;
3796 -> 3794;
3797 -> 3792;
3797 -> 3794;
3798 -> 3793;
3798 -> 3794;
3799 -> 3793;
3799 -> 3794;
3800 -> 3794;
3801 -> 3798;
3801 -> 3800;
3801 -> 3794;
3802 -> 3801;
3802 -> 3794;
3803 -> 1787;
3803 -> 3802;
3804 -> 3794;
3805 -> 3804;
3805 -> 3799;
3805 -> 3794;
3806 -> 3795;
3806 -> 3794;
3807 -> 3796;
3807 -> 3794;
3808 -> 3797;
3808 -> 3794;
3809 -> 3806;
3809 -> 3794;
3810 -> 3807;
3810 -> 3794;
3811 -> 3805;
3811 -> 3794;
3812 -> 3794;
3813 -> 3809;
3813 -> 3812;
3814 -> 3810;
3814 -> 3812;
3815 -> 3811;
3815 -> 3812;
3816 -> 3803;
3816 -> 3812;
3817 -> 3813;
3817 -> 3812;
3818 -> 3813;
3818 -> 3806;
3818 -> 3812;
3819 -> 3814;
3819 -> 3812;
3820 -> 3814;
3820 -> 3807;
3820 -> 3812;
3821 -> 3812;
3822 -> 3817;
3822 -> 3821;
3823 -> 3818;
3823 -> 3821;
3824 -> 3819;
3824 -> 3821;
3825 -> 3820;
3825 -> 3821;
3826 -> 3816;
3826 -> 3821;
3827 -> 3822;
3827 -> 3821;
3828 -> 3823;
3828 -> 3821;
3829 -> 3824;
3829 -> 3821;
3830 -> 3825;
3830 -> 3821;
3831 -> 3821;
3832 -> 3827;
3832 -> 3831;
3833 -> 3828;
3833 -> 3831;
3834 -> 3829;
3834 -> 3831;
3835 -> 3830;
3835 -> 3831;
3836 -> 3826;
3836 -> 3831;
3837 -> 3831;
3838 -> 3833;
3838 -> 3837;
3838 -> 3831;
3839 -> 3831;
3840 -> 3835;
3840 -> 3839;
3840 -> 3831;
3841 -> 3838;
3841 -> 3840;
3841 -> 3831;
3842 -> 3831;
3843 -> 3842;
3843 -> 3841;
3843 -> 3831;
3844 -> 3831;
3845 -> 3844;
3845 -> 3833;
3845 -> 3831;
3846 -> 3831;
3847 -> 3846;
3847 -> 3835;
3847 -> 3831;
3848 -> 3831;
3849 -> 3848;
3849 -> 3833;
3849 -> 3831;
3850 -> 3841;
3850 -> 3831;
3851 -> 3823;
3851 -> 3821;
3852 -> 3825;
3852 -> 3821;
3853 -> 3821;
3854 -> 3851;
3854 -> 3853;
3854 -> 3821;
3855 -> 3821;
3856 -> 3851;
3856 -> 3855;
3856 -> 3821;
3857 -> 3821;
3858 -> 3852;
3858 -> 3857;
3858 -> 3821;
3859 -> 3821;
3860 -> 3859;
3860 -> 3812;
3861 -> 3812;
3862 -> 3861;
3862 -> 3794;
3863 -> 3808;
3863 -> 3862;
3863 -> 3794;
3864 -> 3766;
3864 -> 3863;
3864 -> 3789;
3864 -> 3742;
3865 -> 3784;
3865 -> 3742;
3866 -> 3771;
3866 -> 3742;
3867 -> 3766;
3867 -> 3864;
3867 -> 3742;
3868 -> 3867;
3868 -> 3728;
3869 -> 3720;
3870 -> 1892;
3870 -> 1891;
3871 -> 1880;
3871 -> 1878;
3872 -> 1881;
3872 -> 1878;
3873 -> 1882;
3873 -> 1878;
3874 -> 1878;
3875 -> 3871;
3875 -> 3874;
3875 -> 3873;
3875 -> 3872;
3875 -> 1879;
3875 -> 1880;
3875 -> 1881;
3875 -> 3736;
3875 -> 1878;
3876 -> 3875;
3876 -> 3874;
3877 -> 3875;
3877 -> 3874;
3878 -> 3875;
3878 -> 3874;
3879 -> 3875;
3879 -> 3874;
3880 -> 3875;
3880 -> 3874;
3881 -> 3875;
3881 -> 3874;
3882 -> 3874;
3883 -> 3875;
3883 -> 3882;
3884 -> 3879;
3884 -> 3882;
3885 -> 3882;
3886 -> 3883;
3886 -> 3885;
3887 -> 3885;
3888 -> 3887;
3889 -> 3888;
3890 -> 3875;
3890 -> 3889;
3891 -> 3890;
3891 -> 3888;
3892 -> 3882;
3893 -> 3874;
3894 -> 3883;
3894 -> 3893;
3894 -> 3874;
3895 -> 3874;
3896 -> 3895;
3897 -> 3896;
3898 -> 3883;
3898 -> 3897;
3899 -> 3898;
3899 -> 3896;
3900 -> 3895;
3901 -> 3895;
3902 -> 3901;
3903 -> 3883;
3903 -> 3902;
3904 -> 3903;
3904 -> 3901;
3905 -> 3883;
3905 -> 3895;
3906 -> 3895;
3907 -> 3874;
3908 -> 3874;
3909 -> 3883;
3910 -> 3909;
3910 -> 3883;
3911 -> 3883;
3912 -> 3883;
3913 -> 3883;
3914 -> 3874;
3915 -> 3876;
3915 -> 3914;
3915 -> 3874;
3916 -> 3874;
3917 -> 3877;
3917 -> 3916;
3917 -> 3874;
3918 -> 3874;
3919 -> 3878;
3919 -> 3918;
3919 -> 3874;
3920 -> 3874;
3921 -> 3875;
3921 -> 3874;
3922 -> 0;
3922 -> 3874;
3923 -> 3874;
3924 -> 3874;
3925 -> 3922;
3925 -> 3924;
3926 -> 3923;
3926 -> 3924;
3927 -> 3924;
3928 -> 3925;
3928 -> 3924;
3929 -> 3926;
3929 -> 3924;
3930 -> 3927;
3930 -> 3924;
3931 -> 3924;
3932 -> 3928;
3932 -> 3931;
3933 -> 3929;
3933 -> 3931;
3934 -> 3930;
3934 -> 3931;
3935 -> 3931;
3936 -> 3932;
3936 -> 0;
3936 -> 3931;
3937 -> 3936;
3937 -> 3933;
3937 -> 3931;
3938 -> 3937;
3939 -> 3938;
3940 -> 3939;
3941 -> 3937;
3942 -> 3883;
3943 -> 3883;
3944 -> 3937;
3945 -> 3883;
3946 -> 3932;
3946 -> 0;
3946 -> 3931;
3947 -> 3935;
3947 -> 3946;
3948 -> 3946;
3949 -> 3946;
3950 -> 3946;
3951 -> 3875;
3951 -> 3950;
3952 -> 3951;
3952 -> 3883;
3952 -> 3950;
3953 -> 3952;
3953 -> 3946;
3954 -> 3946;
3955 -> 3946;
3956 -> 3946;
3957 -> 3955;
3957 -> 3956;
3958 -> 3955;
3958 -> 3956;
3959 -> 3955;
3959 -> 3956;
3960 -> 3956;
3961 -> 3956;
3962 -> 3956;
3963 -> 3957;
3963 -> 3962;
3963 -> 3956;
3964 -> 3956;
3965 -> 3964;
3966 -> 3965;
3967 -> 3875;
3967 -> 3966;
3968 -> 3967;
3968 -> 3883;
3968 -> 3966;
3969 -> 3967;
3969 -> 3883;
3969 -> 3966;
3970 -> 3969;
3970 -> 3965;
3971 -> 3961;
3971 -> 3956;
3972 -> 3957;
3972 -> 3956;
3973 -> 3972;
3974 -> 3972;
3975 -> 3956;
3976 -> 3959;
3976 -> 3975;
3976 -> 3956;
3977 -> 3957;
3977 -> 3956;
3978 -> 3958;
3978 -> 3956;
3979 -> 3956;
3980 -> 3977;
3980 -> 3979;
3981 -> 3978;
3981 -> 3979;
3982 -> 3979;
3983 -> 3980;
3983 -> 3982;
3983 -> 3979;
3984 -> 3875;
3984 -> 3883;
3984 -> 3979;
3985 -> 3946;
3986 -> 3875;
3986 -> 3883;
3986 -> 3985;
3986 -> 3946;
3987 -> 3932;
3987 -> 0;
3987 -> 3931;
3988 -> 3934;
3988 -> 3931;
3989 -> 3935;
3989 -> 3931;
3990 -> 3931;
3991 -> 3924;
3992 -> 3920;
3992 -> 3874;
3993 -> 3920;
3993 -> 3874;
3994 -> 3875;
3995 -> 3875;
3996 -> 3875;
3997 -> 3996;
3997 -> 3883;
3998 -> 3997;
3998 -> 3875;
3999 -> 3875;
4000 -> 3875;
4001 -> 3875;
4002 -> 3883;
4002 -> 3875;
4003 -> 3875;
4004 -> 4003;
4004 -> 3875;
4005 -> 3883;
4005 -> 3875;
4006 -> 3875;
4007 -> 3875;
4008 -> 3883;
4008 -> 3875;
4009 -> 3875;
4010 -> 4008;
4010 -> 4009;
4011 -> 3875;
4011 -> 4009;
4012 -> 4010;
4012 -> 4009;
4013 -> 3875;
4014 -> 3875;
4015 -> 4014;
4015 -> 3883;
4016 -> 4014;
4016 -> 3883;
4017 -> 4016;
4017 -> 3875;
4018 -> 3883;
4019 -> 3883;
4020 -> 3883;
4021 -> 4018;
4021 -> 3883;
4022 -> 3883;
4023 -> 4020;
4023 -> 4022;
4024 -> 4021;
4024 -> 4022;
4025 -> 4022;
4026 -> 4023;
4026 -> 4025;
4026 -> 4022;
4027 -> 3883;
4028 -> 4018;
4028 -> 3883;
4029 -> 3875;
4030 -> 4018;
4030 -> 4029;
4030 -> 3875;
4031 -> 3875;
4032 -> 3875;
4033 -> 3875;
4034 -> 4032;
4034 -> 4033;
4035 -> 4033;
4035 -> 4018;
4036 -> 4035;
4036 -> 3875;
4037 -> 4036;
4037 -> 3875;
4038 -> 3875;
4039 -> 3875;
4040 -> 4037;
4040 -> 4039;
4041 -> 4038;
4041 -> 4039;
4042 -> 3875;
4042 -> 4039;
4043 -> 4040;
4043 -> 4039;
4044 -> 3875;
4045 -> 4044;
4045 -> 3875;
4046 -> 4045;
4046 -> 3875;
4047 -> 4046;
4047 -> 3875;
4048 -> 4018;
4048 -> 3875;
4049 -> 4048;
4049 -> 3875;
4050 -> 4018;
4050 -> 3875;
4051 -> 4050;
4052 -> 4049;
4052 -> 4051;
4052 -> 4050;
4053 -> 4052;
4054 -> 3875;
4055 -> 4018;
4055 -> 3875;
4056 -> 4055;
4056 -> 3875;
4057 -> 3875;
4058 -> 3875;
4059 -> 4056;
4059 -> 4058;
4060 -> 4057;
4060 -> 4058;
4061 -> 3875;
4061 -> 4058;
4062 -> 4059;
4062 -> 4058;
4063 -> 4018;
4063 -> 3875;
4064 -> 3875;
4065 -> 3875;
4065 -> 4018;
4066 -> 3875;
4067 -> 4065;
4067 -> 4066;
4067 -> 3875;
4068 -> 3875;
4069 -> 3875;
4069 -> 4018;
4070 -> 4014;
4070 -> 4018;
4071 -> 4014;
4071 -> 4018;
4072 -> 4071;
4072 -> 3875;
4073 -> 3875;
4074 -> 3883;
4074 -> 4073;
4074 -> 3875;
4075 -> 3875;
4075 -> 4018;
4076 -> 4018;
4077 -> 4075;
4077 -> 4076;
4078 -> 4075;
4078 -> 4076;
4079 -> 3875;
4079 -> 4076;
4080 -> 4079;
4080 -> 4018;
4080 -> 4076;
4081 -> 4079;
4081 -> 4018;
4081 -> 4076;
4082 -> 4018;
4083 -> 3883;
4083 -> 4018;
4083 -> 3875;
4084 -> 3874;
4085 -> 3875;
4085 -> 3874;
4086 -> 3874;
4087 -> 4086;
4087 -> 3874;
4088 -> 3874;
4089 -> 4088;
4090 -> 3875;
4090 -> 4089;
4091 -> 4090;
4091 -> 4018;
4091 -> 4089;
4092 -> 4090;
4092 -> 4018;
4092 -> 4089;
4093 -> 4092;
4093 -> 4088;
4094 -> 3874;
4095 -> 4086;
4095 -> 3874;
4096 -> 3874;
4097 -> 4095;
4097 -> 4096;
4098 -> 4096;
4099 -> 4098;
4100 -> 3875;
4100 -> 4099;
4101 -> 4100;
4101 -> 4018;
4101 -> 4099;
4102 -> 4100;
4102 -> 4018;
4102 -> 4099;
4103 -> 4102;
4103 -> 4098;
4104 -> 4018;
4104 -> 4096;
4105 -> 4096;
4106 -> 4105;
4106 -> 4104;
4106 -> 4018;
4106 -> 4096;
4107 -> 4096;
4108 -> 4107;
4108 -> 3874;
4109 -> 4086;
4109 -> 3874;
4110 -> 3874;
4111 -> 3874;
4112 -> 3874;
4113 -> 4111;
4113 -> 3874;
4114 -> 3874;
4115 -> 3874;
4116 -> 4085;
4116 -> 4115;
4117 -> 4113;
4117 -> 4115;
4118 -> 4114;
4118 -> 4115;
4119 -> 4114;
4119 -> 4115;
4120 -> 4115;
4121 -> 4115;
4122 -> 4116;
4122 -> 4121;
4122 -> 4115;
4123 -> 4115;
4124 -> 4123;
4125 -> 3875;
4125 -> 4124;
4126 -> 4125;
4126 -> 4018;
4126 -> 4124;
4127 -> 4125;
4127 -> 4018;
4127 -> 4124;
4128 -> 4127;
4128 -> 4123;
4129 -> 4120;
4129 -> 4115;
4130 -> 4118;
4130 -> 4115;
4131 -> 4119;
4131 -> 4115;
4132 -> 4115;
4133 -> 4117;
4133 -> 4115;
4134 -> 4115;
4135 -> 4129;
4135 -> 4134;
4136 -> 4130;
4136 -> 4134;
4137 -> 4131;
4137 -> 4134;
4138 -> 4132;
4138 -> 4134;
4139 -> 4132;
4139 -> 4134;
4140 -> 4133;
4140 -> 4134;
4141 -> 4132;
4141 -> 4134;
4142 -> 4134;
4143 -> 4142;
4143 -> 4134;
4144 -> 4142;
4144 -> 4134;
4145 -> 4142;
4145 -> 4134;
4146 -> 4142;
4146 -> 4134;
4147 -> 4142;
4147 -> 4134;
4148 -> 4142;
4148 -> 4134;
4149 -> 4142;
4149 -> 4134;
4150 -> 4142;
4150 -> 4134;
4151 -> 4142;
4151 -> 4134;
4152 -> 4142;
4152 -> 4134;
4153 -> 4142;
4153 -> 4134;
4154 -> 4142;
4154 -> 4134;
4155 -> 4135;
4155 -> 4142;
4155 -> 4134;
4156 -> 4136;
4156 -> 4142;
4156 -> 4134;
4157 -> 4137;
4157 -> 4142;
4157 -> 4134;
4158 -> 4138;
4158 -> 4142;
4158 -> 4134;
4159 -> 4139;
4159 -> 4142;
4159 -> 4134;
4160 -> 4140;
4160 -> 4142;
4160 -> 4134;
4161 -> 4115;
4162 -> 4161;
4163 -> 3875;
4163 -> 4162;
4164 -> 4163;
4164 -> 4018;
4164 -> 4162;
4165 -> 4163;
4165 -> 4018;
4165 -> 4162;
4166 -> 4165;
4166 -> 4161;
4167 -> 4018;
4167 -> 4132;
4167 -> 4142;
4167 -> 4143;
4167 -> 4144;
4167 -> 3875;
4167 -> 4145;
4167 -> 4155;
4167 -> 4146;
4167 -> 4156;
4167 -> 4147;
4167 -> 4157;
4167 -> 4148;
4167 -> 4158;
4167 -> 4149;
4167 -> 4159;
4167 -> 4150;
4167 -> 4160;
4167 -> 4151;
4167 -> 4152;
4167 -> 4153;
4167 -> 4154;
4167 -> 4085;
4167 -> 4114;
4167 -> 4111;
4167 -> 4115;
4168 -> 4115;
4169 -> 4167;
4170 -> 4167;
4171 -> 4167;
4172 -> 4170;
4172 -> 4171;
4173 -> 4167;
4173 -> 4171;
4174 -> 4173;
4174 -> 4167;
4174 -> 4171;
4175 -> 4171;
4176 -> 4174;
4177 -> 4167;
4178 -> 4167;
4179 -> 4177;
4179 -> 4178;
4180 -> 4167;
4180 -> 4178;
4181 -> 4180;
4181 -> 4167;
4181 -> 4178;
4182 -> 4178;
4183 -> 4181;
4184 -> 4167;
4185 -> 4167;
4186 -> 4167;
4187 -> 4185;
4187 -> 4186;
4188 -> 4167;
4188 -> 4186;
4189 -> 4188;
4189 -> 4167;
4189 -> 4186;
4190 -> 4186;
4191 -> 4189;
4192 -> 4167;
4193 -> 4167;
4194 -> 4167;
4194 -> 4193;
4195 -> 4167;
4196 -> 4193;
4196 -> 4195;
4197 -> 4193;
4197 -> 4195;
4198 -> 4167;
4198 -> 4195;
4199 -> 4196;
4199 -> 4195;
4200 -> 4197;
4200 -> 4195;
4201 -> 4199;
4201 -> 4200;
4201 -> 4195;
4202 -> 4195;
4203 -> 4201;
4203 -> 4202;
4204 -> 4198;
4204 -> 4202;
4205 -> 4204;
4205 -> 4167;
4205 -> 4202;
4206 -> 4202;
4207 -> 4205;
4208 -> 4195;
4209 -> 4167;
4210 -> 4167;
4211 -> 4167;
4212 -> 4167;
4213 -> 4211;
4213 -> 4212;
4214 -> 4167;
4214 -> 4212;
4215 -> 4214;
4215 -> 4167;
4215 -> 4212;
4216 -> 4212;
4217 -> 4215;
4218 -> 4167;
4219 -> 4167;
4220 -> 4218;
4220 -> 4219;
4221 -> 4167;
4221 -> 4219;
4222 -> 4221;
4222 -> 4167;
4222 -> 4219;
4223 -> 4219;
4224 -> 4222;
4225 -> 4167;
4226 -> 4167;
4226 -> 4168;
4227 -> 4167;
4228 -> 4167;
4229 -> 4167;
4230 -> 4167;
4231 -> 4167;
4232 -> 4231;
4232 -> 4167;
4233 -> 4230;
4233 -> 4167;
4234 -> 4231;
4234 -> 4167;
4235 -> 0;
4235 -> 4167;
4236 -> 4167;
4237 -> 4167;
4238 -> 4167;
4239 -> 4238;
4239 -> 4235;
4239 -> 4167;
4240 -> 4239;
4240 -> 4167;
4241 -> 4167;
4242 -> 4167;
4243 -> 4237;
4243 -> 4242;
4243 -> 4167;
4244 -> 0;
4244 -> 4243;
4245 -> 4167;
4246 -> 4244;
4246 -> 0;
4246 -> 4167;
4247 -> 4240;
4247 -> 0;
4247 -> 4246;
4248 -> 4246;
4249 -> 4167;
4250 -> 4167;
4251 -> 4167;
4252 -> 4167;
4253 -> 4251;
4253 -> 4252;
4254 -> 4167;
4254 -> 4252;
4255 -> 4254;
4255 -> 4167;
4255 -> 4252;
4256 -> 4252;
4257 -> 4255;
4258 -> 4167;
4259 -> 4167;
4260 -> 4167;
4261 -> 4259;
4261 -> 4260;
4262 -> 4167;
4262 -> 4260;
4263 -> 4262;
4263 -> 4167;
4263 -> 4260;
4264 -> 4260;
4265 -> 4263;
4266 -> 4115;
4267 -> 4132;
4267 -> 4167;
4267 -> 4266;
4267 -> 4115;
4268 -> 4120;
4268 -> 4115;
4269 -> 4115;
4270 -> 4118;
4270 -> 4269;
4270 -> 4115;
4271 -> 4270;
4272 -> 4271;
4273 -> 4272;
4274 -> 4167;
4275 -> 4167;
4276 -> 4167;
4277 -> 4111;
4277 -> 3874;
4278 -> 3874;
4279 -> 3875;
4279 -> 3874;
4280 -> 3875;
4280 -> 3874;
4281 -> 3875;
4281 -> 3874;
4282 -> 3875;
4282 -> 3874;
4283 -> 3874;
4284 -> 4282;
4284 -> 4167;
4284 -> 4283;
4284 -> 3874;
4285 -> 4279;
4285 -> 3874;
4286 -> 3874;
4287 -> 4285;
4287 -> 4286;
4288 -> 4282;
4288 -> 4286;
4289 -> 4286;
4290 -> 4288;
4290 -> 4167;
4290 -> 4289;
4290 -> 4286;
4291 -> 3874;
4292 -> 3874;
4293 -> 4292;
4294 -> 3875;
4294 -> 4293;
4295 -> 4294;
4295 -> 4167;
4295 -> 4293;
4296 -> 4294;
4296 -> 4167;
4296 -> 4293;
4297 -> 4296;
4297 -> 4292;
4298 -> 3874;
4299 -> 4298;
4300 -> 3875;
4300 -> 4299;
4301 -> 4300;
4301 -> 4167;
4301 -> 4299;
4302 -> 4300;
4302 -> 4167;
4302 -> 4299;
4303 -> 4302;
4303 -> 4298;
4304 -> 3874;
4305 -> 3875;
4305 -> 3874;
4306 -> 3874;
4307 -> 4305;
4307 -> 4167;
4308 -> 4307;
4308 -> 4167;
4309 -> 4167;
4310 -> 4167;
4311 -> 4167;
4312 -> 4167;
4313 -> 4167;
4313 -> 4312;
4314 -> 4308;
4314 -> 4312;
4315 -> 4312;
4316 -> 4313;
4316 -> 4315;
4317 -> 4313;
4317 -> 4315;
4318 -> 4314;
4318 -> 4315;
4319 -> 4167;
4319 -> 4315;
4320 -> 4319;
4320 -> 4167;
4320 -> 4315;
4321 -> 4315;
4322 -> 4317;
4322 -> 4321;
4323 -> 4322;
4323 -> 4315;
4324 -> 4320;
4324 -> 4167;
4324 -> 4323;
4324 -> 4315;
4325 -> 4319;
4325 -> 4167;
4325 -> 0;
4325 -> 4315;
4326 -> 4323;
4326 -> 4167;
4326 -> 4315;
4327 -> 4325;
4327 -> 4326;
4327 -> 4315;
4328 -> 4316;
4328 -> 4167;
4328 -> 4315;
4329 -> 4316;
4329 -> 4167;
4329 -> 4315;
4330 -> 4315;
4331 -> 4319;
4331 -> 4167;
4331 -> 4330;
4331 -> 4315;
4332 -> 4312;
4333 -> 3875;
4333 -> 3874;
4334 -> 3875;
4334 -> 4167;
4334 -> 3874;
4335 -> 3874;
4336 -> 4335;
4336 -> 4334;
4336 -> 4167;
4336 -> 3874;
4337 -> 3874;
4338 -> 4167;
4339 -> 4167;
4340 -> 4339;
4340 -> 4338;
4340 -> 4167;
4341 -> 4167;
4342 -> 4167;
4342 -> 4341;
4343 -> 3875;
4343 -> 3874;
4344 -> 4343;
4344 -> 4167;
4344 -> 3874;
4345 -> 3874;
4346 -> 3874;
4347 -> 3875;
4347 -> 3874;
4348 -> 4347;
4348 -> 4167;
4348 -> 3874;
4349 -> 3874;
4350 -> 4348;
4350 -> 4349;
4351 -> 3874;
4352 -> 3875;
4352 -> 3874;
4353 -> 4352;
4353 -> 4167;
4353 -> 3874;
4354 -> 3874;
4355 -> 4353;
4355 -> 4354;
4356 -> 4354;
4357 -> 4355;
4357 -> 4354;
4358 -> 4354;
4359 -> 4357;
4359 -> 4358;
4360 -> 4358;
4361 -> 4360;
4362 -> 4360;
4363 -> 4167;
4363 -> 4360;
4364 -> 4363;
4364 -> 4358;
4365 -> 4358;
4366 -> 4167;
4366 -> 4358;
4367 -> 4366;
4368 -> 4364;
4368 -> 4367;
4368 -> 4366;
4369 -> 4368;
4370 -> 4354;
4371 -> 4356;
4371 -> 4354;
4372 -> 4356;
4372 -> 4354;
4373 -> 4356;
4373 -> 4354;
4374 -> 4356;
4374 -> 4354;
4375 -> 4356;
4375 -> 4354;
4376 -> 4356;
4376 -> 4354;
4377 -> 4356;
4377 -> 4354;
4378 -> 4356;
4378 -> 4354;
4379 -> 3874;
4380 -> 3875;
4380 -> 3874;
4381 -> 3874;
4382 -> 3874;
4383 -> 3875;
4383 -> 4167;
4383 -> 3874;
4384 -> 3874;
4385 -> 4384;
4386 -> 4385;
4387 -> 4386;
4388 -> 3875;
4388 -> 4387;
4389 -> 4388;
4389 -> 4167;
4389 -> 4387;
4390 -> 4388;
4390 -> 4167;
4390 -> 4387;
4391 -> 4390;
4391 -> 4386;
4392 -> 4384;
4393 -> 4167;
4393 -> 3874;
4394 -> 3874;
4395 -> 3875;
4395 -> 3874;
4396 -> 3874;
4397 -> 4396;
4398 -> 4397;
4399 -> 4398;
4400 -> 4167;
4400 -> 4399;
4401 -> 4400;
4401 -> 4398;
4402 -> 4396;
4403 -> 4167;
4403 -> 3874;
4404 -> 4403;
4404 -> 4395;
4404 -> 4167;
4404 -> 3874;
4405 -> 3874;
4406 -> 4405;
4406 -> 3874;
4407 -> 3874;
4408 -> 3875;
4408 -> 3874;
4409 -> 3875;
4409 -> 3874;
4410 -> 3874;
4411 -> 3874;
4412 -> 4167;
4412 -> 0;
4412 -> 4411;
4413 -> 4411;
4414 -> 4167;
4415 -> 4414;
4415 -> 4167;
4416 -> 4167;
4416 -> 4411;
4417 -> 3875;
4417 -> 3874;
4418 -> 3875;
4418 -> 3874;
4419 -> 3875;
4419 -> 3874;
4420 -> 3875;
4420 -> 3874;
4421 -> 3874;
4422 -> 3875;
4422 -> 4421;
4422 -> 3874;
4423 -> 3874;
4424 -> 4417;
4424 -> 4423;
4425 -> 4418;
4425 -> 4423;
4426 -> 4419;
4426 -> 4423;
4427 -> 4420;
4427 -> 4423;
4428 -> 4423;
4429 -> 4423;
4430 -> 3875;
4430 -> 4167;
4430 -> 4423;
4431 -> 4430;
4431 -> 4167;
4431 -> 4423;
4432 -> 3875;
4432 -> 4167;
4432 -> 4423;
4433 -> 4426;
4433 -> 4432;
4434 -> 3875;
4434 -> 4167;
4434 -> 4433;
4435 -> 4430;
4435 -> 4433;
4436 -> 4433;
4437 -> 4435;
4437 -> 4436;
4438 -> 4436;
4439 -> 4437;
4439 -> 4438;
4439 -> 4436;
4440 -> 4439;
4441 -> 4437;
4441 -> 4167;
4441 -> 4439;
4442 -> 4436;
4443 -> 4442;
4443 -> 4433;
4444 -> 4434;
4444 -> 4443;
4444 -> 4433;
4445 -> 3875;
4445 -> 4444;
4446 -> 3875;
4446 -> 4167;
4446 -> 4444;
4447 -> 4423;
4448 -> 4427;
4448 -> 4167;
4448 -> 4447;
4448 -> 4423;
4449 -> 3874;
4450 -> 3875;
4450 -> 3874;
4451 -> 3875;
4451 -> 3874;
4452 -> 3874;
4453 -> 4451;
4453 -> 4452;
4453 -> 3874;
4454 -> 4450;
4454 -> 4167;
4455 -> 4451;
4455 -> 4167;
4456 -> 4454;
4456 -> 4167;
4457 -> 4455;
4457 -> 4167;
4458 -> 4167;
4459 -> 4167;
4460 -> 4167;
4461 -> 4457;
4461 -> 4460;
4461 -> 4167;
4462 -> 4167;
4463 -> 4167;
4463 -> 4462;
4464 -> 4167;
4464 -> 0;
4465 -> 4167;
4466 -> 4459;
4466 -> 4465;
4467 -> 4466;
4468 -> 4466;
4469 -> 4167;
4469 -> 4466;
4470 -> 4466;
4471 -> 4469;
4471 -> 4470;
4472 -> 4470;
4473 -> 4471;
4473 -> 4472;
4474 -> 4472;
4475 -> 4473;
4475 -> 4474;
4475 -> 4472;
4476 -> 4472;
4477 -> 4476;
4477 -> 4470;
4478 -> 4167;
4478 -> 4477;
4479 -> 4167;
4480 -> 3875;
4480 -> 3874;
4481 -> 3875;
4481 -> 3874;
4482 -> 3875;
4482 -> 3874;
4483 -> 3875;
4483 -> 3874;
4484 -> 3874;
4485 -> 4481;
4485 -> 4484;
4485 -> 3874;
4486 -> 3875;
4486 -> 4167;
4486 -> 3874;
4487 -> 3875;
4487 -> 4167;
4487 -> 4486;
4488 -> 3875;
4488 -> 4167;
4488 -> 0;
4488 -> 3874;
4489 -> 3875;
4489 -> 4167;
4489 -> 3874;
4490 -> 4483;
4490 -> 4489;
4491 -> 3875;
4491 -> 4167;
4491 -> 3874;
4492 -> 3875;
4492 -> 3874;
4493 -> 3875;
4493 -> 4167;
4493 -> 3874;
4494 -> 3875;
4494 -> 3874;
4495 -> 3874;
4496 -> 3875;
4496 -> 4495;
4496 -> 3874;
4497 -> 3874;
4498 -> 4497;
4498 -> 3874;
4499 -> 3875;
4499 -> 3874;
4500 -> 3874;
4501 -> 3874;
4502 -> 4167;
4502 -> 4501;
4503 -> 4502;
4503 -> 4167;
4503 -> 4501;
4504 -> 4502;
4504 -> 4167;
4504 -> 4503;
4505 -> 4504;
4505 -> 4503;
4506 -> 4503;
4507 -> 4505;
4507 -> 4506;
4508 -> 4507;
4508 -> 4167;
4508 -> 0;
4508 -> 4506;
4509 -> 4507;
4509 -> 4167;
4509 -> 4506;
4510 -> 4506;
4511 -> 4509;
4511 -> 4510;
4512 -> 4510;
4513 -> 4511;
4513 -> 4512;
4513 -> 4510;
4514 -> 4513;
4515 -> 4511;
4515 -> 4167;
4515 -> 4513;
4516 -> 4510;
4517 -> 4516;
4517 -> 4506;
4518 -> 4508;
4518 -> 4517;
4518 -> 4506;
4519 -> 4501;
4520 -> 4519;
4520 -> 3874;
4521 -> 3874;
4522 -> 4167;
4522 -> 4521;
4523 -> 4522;
4523 -> 4167;
4523 -> 4521;
4524 -> 4522;
4524 -> 4167;
4524 -> 4523;
4525 -> 4524;
4525 -> 4523;
4526 -> 4523;
4527 -> 4525;
4527 -> 4526;
4528 -> 4527;
4528 -> 4167;
4528 -> 0;
4528 -> 4526;
4529 -> 4527;
4529 -> 4167;
4529 -> 4526;
4530 -> 4526;
4531 -> 4529;
4531 -> 4530;
4532 -> 4530;
4533 -> 4531;
4533 -> 4532;
4533 -> 4530;
4534 -> 4533;
4535 -> 4531;
4535 -> 4167;
4535 -> 4533;
4536 -> 4530;
4537 -> 4536;
4537 -> 4526;
4538 -> 4528;
4538 -> 4537;
4538 -> 4526;
4539 -> 4521;
4540 -> 3874;
4541 -> 4417;
4541 -> 4167;
4541 -> 4423;
4542 -> 4541;
4542 -> 4167;
4542 -> 4423;
4543 -> 4417;
4543 -> 4167;
4543 -> 4423;
4544 -> 4417;
4544 -> 4543;
4544 -> 4423;
4545 -> 4426;
4545 -> 4544;
4546 -> 4417;
4546 -> 4543;
4546 -> 4545;
4547 -> 4541;
4547 -> 4545;
4548 -> 4545;
4549 -> 4547;
4549 -> 4548;
4550 -> 4548;
4551 -> 4549;
4551 -> 4550;
4551 -> 4548;
4552 -> 4551;
4553 -> 4549;
4553 -> 4543;
4553 -> 4551;
4554 -> 4548;
4555 -> 4554;
4555 -> 4545;
4556 -> 4546;
4556 -> 4555;
4556 -> 4545;
4557 -> 4417;
4557 -> 4556;
4558 -> 4417;
4558 -> 4543;
4558 -> 4556;
4559 -> 4427;
4559 -> 4543;
4559 -> 4447;
4559 -> 4423;
4560 -> 3875;
4560 -> 4543;
4560 -> 3874;
4561 -> 3875;
4561 -> 4543;
4561 -> 4560;
4562 -> 3875;
4562 -> 4543;
4562 -> 0;
4562 -> 3874;
4563 -> 3875;
4563 -> 4543;
4563 -> 3874;
4564 -> 4483;
4564 -> 4563;
4565 -> 3875;
4565 -> 4543;
4565 -> 3874;
4566 -> 3875;
4566 -> 4543;
4566 -> 3874;
4567 -> 4450;
4567 -> 4543;
4568 -> 4451;
4568 -> 4543;
4569 -> 4567;
4569 -> 4543;
4570 -> 4568;
4570 -> 4543;
4571 -> 4543;
4572 -> 4543;
4573 -> 4543;
4574 -> 4570;
4574 -> 4573;
4574 -> 4543;
4575 -> 4543;
4576 -> 4543;
4576 -> 4575;
4577 -> 4543;
4577 -> 0;
4578 -> 4543;
4579 -> 4572;
4579 -> 4578;
4580 -> 4579;
4581 -> 4579;
4582 -> 4543;
4582 -> 4579;
4583 -> 4579;
4584 -> 4582;
4584 -> 4583;
4585 -> 4583;
4586 -> 4584;
4586 -> 4585;
4587 -> 4585;
4588 -> 4586;
4588 -> 4587;
4588 -> 4585;
4589 -> 4585;
4590 -> 4589;
4590 -> 4583;
4591 -> 4543;
4591 -> 4590;
4592 -> 4543;
4593 -> 4417;
4593 -> 4543;
4593 -> 4423;
4594 -> 4593;
4594 -> 4543;
4594 -> 4423;
4595 -> 4593;
4595 -> 4545;
4596 -> 4595;
4596 -> 4548;
4597 -> 4596;
4597 -> 4550;
4597 -> 4548;
4598 -> 4597;
4599 -> 4596;
4599 -> 4543;
4599 -> 4597;
4600 -> 4588;
4601 -> 4586;
4601 -> 4543;
4601 -> 4588;
4602 -> 4543;
4602 -> 4501;
4603 -> 4602;
4603 -> 4543;
4603 -> 4501;
4604 -> 4602;
4604 -> 4543;
4604 -> 4603;
4605 -> 4604;
4605 -> 4603;
4606 -> 4603;
4607 -> 4605;
4607 -> 4606;
4608 -> 4607;
4608 -> 4543;
4608 -> 0;
4608 -> 4606;
4609 -> 4607;
4609 -> 4543;
4609 -> 4606;
4610 -> 4606;
4611 -> 4609;
4611 -> 4610;
4612 -> 4610;
4613 -> 4611;
4613 -> 4612;
4613 -> 4610;
4614 -> 4613;
4615 -> 4611;
4615 -> 4543;
4615 -> 4613;
4616 -> 4610;
4617 -> 4616;
4617 -> 4606;
4618 -> 4608;
4618 -> 4617;
4618 -> 4606;
4619 -> 4543;
4619 -> 4521;
4620 -> 4619;
4620 -> 4543;
4620 -> 4521;
4621 -> 4619;
4621 -> 4543;
4621 -> 4620;
4622 -> 4621;
4622 -> 4620;
4623 -> 4620;
4624 -> 4622;
4624 -> 4623;
4625 -> 4624;
4625 -> 4543;
4625 -> 0;
4625 -> 4623;
4626 -> 4624;
4626 -> 4543;
4626 -> 4623;
4627 -> 4623;
4628 -> 4626;
4628 -> 4627;
4629 -> 4627;
4630 -> 4628;
4630 -> 4629;
4630 -> 4627;
4631 -> 4630;
4632 -> 4628;
4632 -> 4543;
4632 -> 4630;
4633 -> 4627;
4634 -> 4633;
4634 -> 4623;
4635 -> 4625;
4635 -> 4634;
4635 -> 4623;
4636 -> 3874;
4637 -> 4305;
4637 -> 4543;
4638 -> 4637;
4638 -> 4543;
4639 -> 4543;
4640 -> 3875;
4640 -> 4543;
4640 -> 3874;
4641 -> 4335;
4641 -> 4640;
4641 -> 4543;
4641 -> 3874;
4642 -> 3874;
4643 -> 4343;
4643 -> 4543;
4643 -> 3874;
4644 -> 4347;
4644 -> 4543;
4644 -> 3874;
4645 -> 4644;
4645 -> 4349;
4646 -> 4352;
4646 -> 4543;
4646 -> 3874;
4647 -> 4646;
4647 -> 4354;
4648 -> 4647;
4648 -> 4354;
4649 -> 4648;
4649 -> 4358;
4650 -> 4543;
4650 -> 4360;
4651 -> 4650;
4651 -> 4358;
4652 -> 4543;
4652 -> 4358;
4653 -> 4652;
4654 -> 4651;
4654 -> 4653;
4654 -> 4652;
4655 -> 4654;
4656 -> 3875;
4656 -> 4543;
4656 -> 3874;
4657 -> 4388;
4657 -> 4543;
4657 -> 4387;
4658 -> 4388;
4658 -> 4543;
4658 -> 4387;
4659 -> 4658;
4659 -> 4386;
4660 -> 4543;
4660 -> 3874;
4661 -> 4543;
4661 -> 4399;
4662 -> 4661;
4662 -> 4398;
4663 -> 4543;
4663 -> 3874;
4664 -> 4663;
4664 -> 4395;
4664 -> 4543;
4664 -> 3874;
4665 -> 3875;
4665 -> 4543;
4666 -> 4564;
4667 -> 4564;
4668 -> 3875;
4668 -> 4543;
4668 -> 4564;
4669 -> 4564;
4670 -> 4668;
4670 -> 4669;
4671 -> 4669;
4672 -> 4670;
4672 -> 4671;
4673 -> 4671;
4674 -> 4672;
4674 -> 4673;
4674 -> 4671;
4675 -> 4671;
4676 -> 4675;
4676 -> 4669;
4677 -> 3875;
4677 -> 4543;
4677 -> 4676;
4678 -> 3875;
4678 -> 3874;
4679 -> 3875;
4679 -> 4543;
4679 -> 3874;
4680 -> 4543;
4681 -> 4543;
4681 -> 4680;
4682 -> 4680;
4683 -> 4682;
4683 -> 4681;
4683 -> 4543;
4683 -> 4680;
4684 -> 4543;
4685 -> 4543;
4686 -> 4685;
4686 -> 4543;
4687 -> 4543;
4688 -> 4543;
4689 -> 4543;
4690 -> 4688;
4690 -> 4689;
4691 -> 4688;
4691 -> 4689;
4692 -> 4687;
4692 -> 4689;
4693 -> 4689;
4694 -> 4691;
4694 -> 4693;
4694 -> 4689;
4695 -> 4687;
4695 -> 4688;
4696 -> 4688;
4697 -> 4688;
4697 -> 4696;
4698 -> 4688;
4698 -> 4696;
4699 -> 4695;
4699 -> 4696;
4700 -> 4696;
4701 -> 4698;
4701 -> 4700;
4701 -> 4696;
4702 -> 4688;
4702 -> 4543;
4703 -> 4543;
4704 -> 3875;
4704 -> 4688;
4704 -> 4543;
4704 -> 4703;
4705 -> 3875;
4705 -> 3874;
4706 -> 3875;
4706 -> 3874;
4707 -> 3875;
4707 -> 3874;
4708 -> 4707;
4708 -> 4688;
4708 -> 3874;
4709 -> 4708;
4709 -> 4688;
4709 -> 3874;
4710 -> 3874;
4711 -> 4710;
4711 -> 4709;
4711 -> 3874;
4712 -> 3875;
4712 -> 3874;
4713 -> 0;
4713 -> 3874;
4714 -> 3875;
4714 -> 4688;
4714 -> 3874;
4715 -> 3875;
4715 -> 4688;
4715 -> 4714;
4716 -> 3875;
4716 -> 4688;
4716 -> 0;
4716 -> 3874;
4717 -> 3875;
4717 -> 4688;
4717 -> 3874;
4718 -> 4483;
4718 -> 4717;
4719 -> 3875;
4719 -> 4688;
4719 -> 3874;
4720 -> 3875;
4720 -> 4688;
4720 -> 3874;
4721 -> 4450;
4721 -> 4688;
4722 -> 4451;
4722 -> 4688;
4723 -> 4721;
4723 -> 4688;
4724 -> 4722;
4724 -> 4688;
4725 -> 4688;
4726 -> 4688;
4727 -> 4688;
4728 -> 4724;
4728 -> 4727;
4728 -> 4688;
4729 -> 4688;
4730 -> 4688;
4730 -> 4729;
4731 -> 4688;
4731 -> 0;
4732 -> 4688;
4733 -> 4726;
4733 -> 4732;
4734 -> 4733;
4735 -> 4733;
4736 -> 4688;
4736 -> 4733;
4737 -> 4733;
4738 -> 4736;
4738 -> 4737;
4739 -> 4737;
4740 -> 4738;
4740 -> 4739;
4741 -> 4739;
4742 -> 4740;
4742 -> 4741;
4742 -> 4739;
4743 -> 4739;
4744 -> 4743;
4744 -> 4737;
4745 -> 4688;
4745 -> 4744;
4746 -> 4688;
4747 -> 3875;
4747 -> 4688;
4747 -> 3874;
4748 -> 4718;
4749 -> 4718;
4750 -> 3875;
4750 -> 4688;
4750 -> 4718;
4751 -> 4718;
4752 -> 4750;
4752 -> 4751;
4753 -> 4751;
4754 -> 4752;
4754 -> 4753;
4755 -> 4753;
4756 -> 4754;
4756 -> 4755;
4756 -> 4753;
4757 -> 4753;
4758 -> 4757;
4758 -> 4751;
4759 -> 3875;
4759 -> 4688;
4759 -> 4758;
4760 -> 4688;
4760 -> 0;
4760 -> 4411;
4761 -> 4688;
4762 -> 4761;
4762 -> 4688;
4763 -> 4688;
4763 -> 4411;
4764 -> 4417;
4764 -> 4688;
4764 -> 4423;
4765 -> 4764;
4765 -> 4688;
4765 -> 4423;
4766 -> 4417;
4766 -> 4688;
4766 -> 4423;
4767 -> 4426;
4767 -> 4766;
4768 -> 4417;
4768 -> 4688;
4768 -> 4767;
4769 -> 4764;
4769 -> 4767;
4770 -> 4767;
4771 -> 4769;
4771 -> 4770;
4772 -> 4770;
4773 -> 4771;
4773 -> 4772;
4773 -> 4770;
4774 -> 4773;
4775 -> 4771;
4775 -> 4688;
4775 -> 4773;
4776 -> 4770;
4777 -> 4776;
4777 -> 4767;
4778 -> 4768;
4778 -> 4777;
4778 -> 4767;
4779 -> 4417;
4779 -> 4778;
4780 -> 4417;
4780 -> 4688;
4780 -> 4778;
4781 -> 4427;
4781 -> 4688;
4781 -> 4447;
4781 -> 4423;
4782 -> 4688;
4782 -> 4501;
4783 -> 4782;
4783 -> 4688;
4783 -> 4501;
4784 -> 4782;
4784 -> 4688;
4784 -> 4783;
4785 -> 4784;
4785 -> 4783;
4786 -> 4783;
4787 -> 4785;
4787 -> 4786;
4788 -> 4787;
4788 -> 4688;
4788 -> 0;
4788 -> 4786;
4789 -> 4787;
4789 -> 4688;
4789 -> 4786;
4790 -> 4786;
4791 -> 4789;
4791 -> 4790;
4792 -> 4790;
4793 -> 4791;
4793 -> 4792;
4793 -> 4790;
4794 -> 4793;
4795 -> 4791;
4795 -> 4688;
4795 -> 4793;
4796 -> 4790;
4797 -> 4796;
4797 -> 4786;
4798 -> 4788;
4798 -> 4797;
4798 -> 4786;
4799 -> 4688;
4799 -> 4521;
4800 -> 4799;
4800 -> 4688;
4800 -> 4521;
4801 -> 4799;
4801 -> 4688;
4801 -> 4800;
4802 -> 4801;
4802 -> 4800;
4803 -> 4800;
4804 -> 4802;
4804 -> 4803;
4805 -> 4804;
4805 -> 4688;
4805 -> 0;
4805 -> 4803;
4806 -> 4804;
4806 -> 4688;
4806 -> 4803;
4807 -> 4803;
4808 -> 4806;
4808 -> 4807;
4809 -> 4807;
4810 -> 4808;
4810 -> 4809;
4810 -> 4807;
4811 -> 4810;
4812 -> 4808;
4812 -> 4688;
4812 -> 4810;
4813 -> 4807;
4814 -> 4813;
4814 -> 4803;
4815 -> 4805;
4815 -> 4814;
4815 -> 4803;
4816 -> 4742;
4817 -> 4740;
4817 -> 4688;
4817 -> 4742;
4818 -> 3875;
4818 -> 4688;
4818 -> 3874;
4819 -> 4388;
4819 -> 4688;
4819 -> 4387;
4820 -> 4388;
4820 -> 4688;
4820 -> 4387;
4821 -> 4820;
4821 -> 4386;
4822 -> 4688;
4822 -> 3874;
4823 -> 4688;
4823 -> 4399;
4824 -> 4823;
4824 -> 4398;
4825 -> 4688;
4825 -> 3874;
4826 -> 4825;
4826 -> 4395;
4826 -> 4688;
4826 -> 3874;
4827 -> 3875;
4827 -> 4688;
4828 -> 4305;
4828 -> 4688;
4829 -> 4828;
4829 -> 4688;
4830 -> 4688;
4831 -> 3875;
4831 -> 4688;
4831 -> 3874;
4832 -> 4335;
4832 -> 4831;
4832 -> 4688;
4832 -> 3874;
4833 -> 3875;
4833 -> 4688;
4833 -> 3874;
4834 -> 3875;
4834 -> 3874;
4835 -> 3874;
4836 -> 4833;
4836 -> 4835;
4837 -> 4834;
4837 -> 4835;
4838 -> 3875;
4838 -> 4835;
4839 -> 4836;
4839 -> 4688;
4840 -> 4836;
4841 -> 4840;
4841 -> 4839;
4841 -> 4688;
4841 -> 4836;
4842 -> 4837;
4842 -> 4688;
4842 -> 4836;
4843 -> 4343;
4843 -> 4836;
4843 -> 3874;
4844 -> 4843;
4845 -> 4347;
4845 -> 4844;
4845 -> 3874;
4846 -> 4845;
4846 -> 4349;
4847 -> 4352;
4847 -> 4844;
4847 -> 3874;
4848 -> 4847;
4848 -> 4354;
4849 -> 4848;
4849 -> 4354;
4850 -> 4849;
4850 -> 4358;
4851 -> 4844;
4851 -> 4360;
4852 -> 4851;
4852 -> 4358;
4853 -> 4844;
4853 -> 4358;
4854 -> 4853;
4855 -> 4852;
4855 -> 4854;
4855 -> 4853;
4856 -> 4855;
4857 -> 3874;
4858 -> 4857;
4859 -> 3875;
4859 -> 4858;
4860 -> 4859;
4860 -> 4844;
4860 -> 4858;
4861 -> 4859;
4861 -> 4844;
4861 -> 4858;
4862 -> 4861;
4862 -> 4857;
4863 -> 3874;
4864 -> 3874;
4865 -> 3875;
4865 -> 4844;
4865 -> 3874;
4866 -> 4388;
4866 -> 4844;
4866 -> 4387;
4867 -> 4388;
4867 -> 4844;
4867 -> 4387;
4868 -> 4867;
4868 -> 4386;
4869 -> 4844;
4869 -> 3874;
4870 -> 4844;
4870 -> 4399;
4871 -> 4870;
4871 -> 4398;
4872 -> 4844;
4872 -> 3874;
4873 -> 4872;
4873 -> 4395;
4873 -> 4844;
4873 -> 3874;
4874 -> 4844;
4874 -> 0;
4874 -> 4411;
4875 -> 4844;
4876 -> 4875;
4876 -> 4844;
4877 -> 4844;
4877 -> 4411;
4878 -> 4411;
4879 -> 4878;
4880 -> 4844;
4880 -> 4879;
4881 -> 4880;
4881 -> 4878;
4882 -> 4411;
4883 -> 4411;
4884 -> 4417;
4884 -> 4844;
4884 -> 4423;
4885 -> 4884;
4885 -> 4844;
4885 -> 4423;
4886 -> 4417;
4886 -> 4844;
4886 -> 4423;
4887 -> 4426;
4887 -> 4886;
4888 -> 4417;
4888 -> 4844;
4888 -> 4887;
4889 -> 4884;
4889 -> 4887;
4890 -> 4887;
4891 -> 4889;
4891 -> 4890;
4892 -> 4890;
4893 -> 4891;
4893 -> 4892;
4893 -> 4890;
4894 -> 4893;
4895 -> 4891;
4895 -> 4844;
4895 -> 4893;
4896 -> 4890;
4897 -> 4896;
4897 -> 4887;
4898 -> 4888;
4898 -> 4897;
4898 -> 4887;
4899 -> 4417;
4899 -> 4898;
4900 -> 4417;
4900 -> 4844;
4900 -> 4898;
4901 -> 4427;
4901 -> 4844;
4901 -> 4447;
4901 -> 4423;
4902 -> 4450;
4902 -> 4844;
4903 -> 4451;
4903 -> 4844;
4904 -> 4902;
4904 -> 4844;
4905 -> 4903;
4905 -> 4844;
4906 -> 4844;
4907 -> 4844;
4908 -> 4844;
4909 -> 4905;
4909 -> 4908;
4909 -> 4844;
4910 -> 4844;
4911 -> 4844;
4911 -> 4910;
4912 -> 4844;
4912 -> 0;
4913 -> 4844;
4914 -> 4907;
4914 -> 4913;
4915 -> 4914;
4916 -> 4914;
4917 -> 4844;
4917 -> 4914;
4918 -> 4914;
4919 -> 4917;
4919 -> 4918;
4920 -> 4918;
4921 -> 4919;
4921 -> 4920;
4922 -> 4920;
4923 -> 4921;
4923 -> 4922;
4923 -> 4920;
4924 -> 4920;
4925 -> 4924;
4925 -> 4918;
4926 -> 4844;
4926 -> 4925;
4927 -> 4844;
4928 -> 3875;
4928 -> 4844;
4928 -> 3874;
4929 -> 3875;
4929 -> 4844;
4929 -> 4928;
4930 -> 3875;
4930 -> 4844;
4930 -> 0;
4930 -> 3874;
4931 -> 3875;
4931 -> 4844;
4931 -> 3874;
4932 -> 4483;
4932 -> 4931;
4933 -> 3875;
4933 -> 4844;
4933 -> 3874;
4934 -> 3875;
4934 -> 4844;
4934 -> 3874;
4935 -> 4844;
4935 -> 4501;
4936 -> 4935;
4936 -> 4844;
4936 -> 4501;
4937 -> 4935;
4937 -> 4844;
4937 -> 4936;
4938 -> 4937;
4938 -> 4936;
4939 -> 4936;
4940 -> 4938;
4940 -> 4939;
4941 -> 4940;
4941 -> 4844;
4941 -> 0;
4941 -> 4939;
4942 -> 4940;
4942 -> 4844;
4942 -> 4939;
4943 -> 4939;
4944 -> 4942;
4944 -> 4943;
4945 -> 4943;
4946 -> 4944;
4946 -> 4945;
4946 -> 4943;
4947 -> 4946;
4948 -> 4944;
4948 -> 4844;
4948 -> 4946;
4949 -> 4943;
4950 -> 4949;
4950 -> 4939;
4951 -> 4941;
4951 -> 4950;
4951 -> 4939;
4952 -> 4844;
4952 -> 4521;
4953 -> 4952;
4953 -> 4844;
4953 -> 4521;
4954 -> 4952;
4954 -> 4844;
4954 -> 4953;
4955 -> 4954;
4955 -> 4953;
4956 -> 4953;
4957 -> 4955;
4957 -> 4956;
4958 -> 4957;
4958 -> 4844;
4958 -> 0;
4958 -> 4956;
4959 -> 4957;
4959 -> 4844;
4959 -> 4956;
4960 -> 4956;
4961 -> 4959;
4961 -> 4960;
4962 -> 4960;
4963 -> 4961;
4963 -> 4962;
4963 -> 4960;
4964 -> 4963;
4965 -> 4961;
4965 -> 4844;
4965 -> 4963;
4966 -> 4960;
4967 -> 4966;
4967 -> 4956;
4968 -> 4958;
4968 -> 4967;
4968 -> 4956;
4969 -> 4923;
4970 -> 4921;
4970 -> 4844;
4970 -> 4923;
4971 -> 4305;
4971 -> 4844;
4972 -> 4971;
4972 -> 4844;
4973 -> 4844;
4974 -> 3875;
4974 -> 4844;
4974 -> 3874;
4975 -> 4335;
4975 -> 4974;
4975 -> 4844;
4975 -> 3874;
4976 -> 3875;
4976 -> 4844;
4977 -> 4932;
4978 -> 4932;
4979 -> 3875;
4979 -> 4844;
4979 -> 4932;
4980 -> 4932;
4981 -> 4979;
4981 -> 4980;
4982 -> 4980;
4983 -> 4981;
4983 -> 4982;
4984 -> 4982;
4985 -> 4983;
4985 -> 4984;
4985 -> 4982;
4986 -> 4982;
4987 -> 4986;
4987 -> 4980;
4988 -> 3875;
4988 -> 4844;
4988 -> 4987;
4989 -> 3875;
4989 -> 4844;
4989 -> 3874;
4990 -> 4294;
4990 -> 4844;
4990 -> 4293;
4991 -> 4294;
4991 -> 4844;
4991 -> 4293;
4992 -> 4991;
4992 -> 4292;
4993 -> 1880;
4993 -> 1878;
4994 -> 4993;
4994 -> 4844;
4994 -> 1878;
4995 -> 1881;
4995 -> 1878;
4996 -> 1878;
4997 -> 4994;
4997 -> 4996;
4997 -> 1878;
4998 -> 4994;
4998 -> 4996;
4998 -> 1878;
4999 -> 4996;
4999 -> 1;
5000 -> 627;
5000 -> 1;
5001 -> 1;
5002 -> 5000;
5002 -> 5001;
5003 -> 5001;
5004 -> 5001;
5005 -> 0;
5005 -> 5004;
5005 -> 4994;
5005 -> 5001;
5006 -> 5002;
5006 -> 5001;
5007 -> 5001;
5008 -> 5001;
5009 -> 5006;
5009 -> 5008;
5010 -> 5007;
5010 -> 5008;
5011 -> 5009;
5011 -> 5008;
5012 -> 0;
5012 -> 5008;
5013 -> 5010;
5013 -> 5008;
5014 -> 5008;
5015 -> 5011;
5015 -> 5014;
5016 -> 5012;
5016 -> 5014;
5017 -> 5013;
5017 -> 5014;
5018 -> 5015;
5018 -> 5014;
5019 -> 5016;
5019 -> 5014;
5020 -> 5014;
5021 -> 5014;
5022 -> 5018;
5022 -> 5021;
5023 -> 5019;
5023 -> 5021;
5024 -> 5020;
5024 -> 5021;
5025 -> 5021;
5026 -> 0;
5026 -> 5025;
5027 -> 5026;
5027 -> 5021;
5028 -> 5021;
5029 -> 5027;
5029 -> 5021;
5030 -> 5023;
5030 -> 5021;
5031 -> 5024;
5031 -> 5021;
5032 -> 5028;
5032 -> 5029;
5032 -> 5031;
5032 -> 5030;
5032 -> 5022;
5032 -> 5027;
5032 -> 5005;
5032 -> 5021;
5033 -> 5032;
5033 -> 5028;
5034 -> 5032;
5034 -> 5028;
5035 -> 5032;
5035 -> 5028;
5036 -> 5032;
5036 -> 5028;
5037 -> 5032;
5037 -> 5028;
5038 -> 5032;
5038 -> 5028;
5039 -> 5028;
5040 -> 5036;
5040 -> 5039;
5041 -> 5039;
5042 -> 5032;
5042 -> 5041;
5043 -> 5041;
5044 -> 5043;
5045 -> 5044;
5046 -> 5032;
5046 -> 5045;
5047 -> 5046;
5047 -> 5044;
5048 -> 5039;
5049 -> 5028;
5050 -> 5036;
5050 -> 5049;
5050 -> 5028;
5051 -> 5028;
5052 -> 5051;
5053 -> 5052;
5054 -> 5036;
5054 -> 5053;
5055 -> 5054;
5055 -> 5052;
5056 -> 5051;
5057 -> 5051;
5058 -> 5057;
5059 -> 5036;
5059 -> 5058;
5060 -> 5059;
5060 -> 5057;
5061 -> 5036;
5061 -> 5051;
5062 -> 5051;
5063 -> 5028;
5064 -> 5028;
5065 -> 5036;
5066 -> 5065;
5066 -> 5036;
5067 -> 5036;
5068 -> 5036;
5069 -> 5036;
5070 -> 5028;
5071 -> 5033;
5071 -> 5070;
5071 -> 5028;
5072 -> 5028;
5073 -> 5034;
5073 -> 5072;
5073 -> 5028;
5074 -> 5028;
5075 -> 5035;
5075 -> 5074;
5075 -> 5028;
5076 -> 5028;
5077 -> 5032;
5077 -> 5028;
5078 -> 0;
5078 -> 5028;
5079 -> 5028;
5080 -> 5028;
5081 -> 5078;
5081 -> 5080;
5082 -> 5079;
5082 -> 5080;
5083 -> 5080;
5084 -> 5081;
5084 -> 5080;
5085 -> 5082;
5085 -> 5080;
5086 -> 5083;
5086 -> 5080;
5087 -> 5080;
5088 -> 5084;
5088 -> 5087;
5089 -> 5085;
5089 -> 5087;
5090 -> 5086;
5090 -> 5087;
5091 -> 5087;
5092 -> 5088;
5092 -> 0;
5092 -> 5087;
5093 -> 5092;
5093 -> 5089;
5093 -> 5087;
5094 -> 5093;
5095 -> 5094;
5096 -> 5095;
5097 -> 5093;
5098 -> 5036;
5099 -> 5036;
5100 -> 5093;
5101 -> 5036;
5102 -> 5088;
5102 -> 0;
5102 -> 5087;
5103 -> 5091;
5103 -> 5102;
5104 -> 5102;
5105 -> 5102;
5106 -> 5102;
5107 -> 5032;
5107 -> 5106;
5108 -> 5107;
5108 -> 5036;
5108 -> 5106;
5109 -> 5108;
5109 -> 5102;
5110 -> 5102;
5111 -> 5102;
5112 -> 5102;
5113 -> 5111;
5113 -> 5112;
5114 -> 5111;
5114 -> 5112;
5115 -> 5111;
5115 -> 5112;
5116 -> 5112;
5117 -> 5112;
5118 -> 5112;
5119 -> 5113;
5119 -> 5118;
5119 -> 5112;
5120 -> 5112;
5121 -> 5120;
5122 -> 5121;
5123 -> 5032;
5123 -> 5122;
5124 -> 5123;
5124 -> 5036;
5124 -> 5122;
5125 -> 5123;
5125 -> 5036;
5125 -> 5122;
5126 -> 5125;
5126 -> 5121;
5127 -> 5117;
5127 -> 5112;
5128 -> 5113;
5128 -> 5112;
5129 -> 5128;
5130 -> 5128;
5131 -> 5112;
5132 -> 5115;
5132 -> 5131;
5132 -> 5112;
5133 -> 5113;
5133 -> 5112;
5134 -> 5114;
5134 -> 5112;
5135 -> 5112;
5136 -> 5133;
5136 -> 5135;
5137 -> 5134;
5137 -> 5135;
5138 -> 5135;
5139 -> 5136;
5139 -> 5138;
5139 -> 5135;
5140 -> 5032;
5140 -> 5036;
5140 -> 5135;
5141 -> 5102;
5142 -> 5032;
5142 -> 5036;
5142 -> 5141;
5142 -> 5102;
5143 -> 5088;
5143 -> 0;
5143 -> 5087;
5144 -> 5090;
5144 -> 5087;
5145 -> 5091;
5145 -> 5087;
5146 -> 5087;
5147 -> 5080;
5148 -> 5076;
5148 -> 5028;
5149 -> 5076;
5149 -> 5028;
5150 -> 5036;
5150 -> 5032;
5151 -> 5036;
5151 -> 5032;
5152 -> 5036;
5152 -> 5032;
5153 -> 5036;
5153 -> 5032;
5154 -> 5032;
5155 -> 5032;
5156 -> 5032;
5157 -> 5156;
5157 -> 5036;
5158 -> 5157;
5158 -> 5032;
5159 -> 5032;
5160 -> 5032;
5161 -> 5032;
5162 -> 5036;
5162 -> 5032;
5163 -> 5032;
5164 -> 5163;
5164 -> 5032;
5165 -> 5036;
5165 -> 5032;
5166 -> 5032;
5167 -> 5032;
5168 -> 5036;
5168 -> 5032;
5169 -> 5032;
5170 -> 5168;
5170 -> 5169;
5171 -> 5032;
5171 -> 5169;
5172 -> 5170;
5172 -> 5169;
5173 -> 5032;
5174 -> 5032;
5175 -> 5174;
5175 -> 5036;
5176 -> 5174;
5176 -> 5036;
5177 -> 5176;
5177 -> 5032;
5178 -> 5036;
5179 -> 5036;
5180 -> 5036;
5181 -> 5179;
5181 -> 5180;
5182 -> 5179;
5182 -> 5180;
5183 -> 5180;
5184 -> 5181;
5184 -> 5183;
5184 -> 5180;
5185 -> 5036;
5186 -> 5036;
5187 -> 5032;
5188 -> 5036;
5188 -> 5187;
5188 -> 5032;
5189 -> 5032;
5190 -> 5032;
5191 -> 5032;
5192 -> 5190;
5192 -> 5191;
5193 -> 5191;
5193 -> 5036;
5194 -> 5193;
5194 -> 5032;
5195 -> 5194;
5195 -> 5032;
5196 -> 5032;
5197 -> 5032;
5198 -> 5195;
5198 -> 5197;
5199 -> 5196;
5199 -> 5197;
5200 -> 5032;
5200 -> 5197;
5201 -> 5198;
5201 -> 5197;
5202 -> 5032;
5203 -> 5202;
5203 -> 5032;
5204 -> 5203;
5204 -> 5032;
5205 -> 5204;
5205 -> 5032;
5206 -> 5036;
5206 -> 5032;
5207 -> 5206;
5207 -> 5032;
5208 -> 5036;
5208 -> 5032;
5209 -> 5208;
5210 -> 5207;
5210 -> 5209;
5210 -> 5208;
5211 -> 5210;
5212 -> 5032;
5213 -> 5036;
5213 -> 5032;
5214 -> 5213;
5214 -> 5032;
5215 -> 5032;
5216 -> 5032;
5217 -> 5214;
5217 -> 5216;
5218 -> 5215;
5218 -> 5216;
5219 -> 5032;
5219 -> 5216;
5220 -> 5217;
5220 -> 5216;
5221 -> 5036;
5221 -> 5032;
5222 -> 5032;
5223 -> 5032;
5223 -> 5036;
5224 -> 5032;
5225 -> 5223;
5225 -> 5224;
5225 -> 5032;
5226 -> 5032;
5227 -> 5032;
5227 -> 5036;
5228 -> 5032;
5229 -> 5036;
5229 -> 5228;
5229 -> 5032;
5230 -> 5032;
5230 -> 5036;
5231 -> 5036;
5232 -> 5230;
5232 -> 5231;
5233 -> 5230;
5233 -> 5231;
5234 -> 5032;
5234 -> 5231;
5235 -> 5234;
5235 -> 5036;
5235 -> 5231;
5236 -> 5234;
5236 -> 5036;
5236 -> 5231;
5237 -> 5036;
5238 -> 5036;
5238 -> 5032;
5239 -> 5028;
5240 -> 5028;
5241 -> 5240;
5241 -> 5028;
5242 -> 5028;
5243 -> 5242;
5244 -> 5032;
5244 -> 5243;
5245 -> 5244;
5245 -> 5036;
5245 -> 5243;
5246 -> 5244;
5246 -> 5036;
5246 -> 5243;
5247 -> 5246;
5247 -> 5242;
5248 -> 5028;
5249 -> 5240;
5249 -> 5028;
5250 -> 5028;
5251 -> 5249;
5251 -> 5250;
5252 -> 5250;
5253 -> 5252;
5254 -> 5032;
5254 -> 5253;
5255 -> 5254;
5255 -> 5036;
5255 -> 5253;
5256 -> 5254;
5256 -> 5036;
5256 -> 5253;
5257 -> 5256;
5257 -> 5252;
5258 -> 5036;
5258 -> 5250;
5259 -> 5250;
5260 -> 5259;
5260 -> 5258;
5260 -> 5036;
5260 -> 5250;
5261 -> 5250;
5262 -> 5261;
5262 -> 5028;
5263 -> 5240;
5263 -> 5028;
5264 -> 5028;
5265 -> 5028;
5266 -> 5028;
5267 -> 5265;
5267 -> 5028;
5268 -> 5028;
5269 -> 5028;
5270 -> 5032;
5270 -> 5269;
5271 -> 5267;
5271 -> 5269;
5272 -> 5268;
5272 -> 5269;
5273 -> 5268;
5273 -> 5269;
5274 -> 5269;
5275 -> 5269;
5276 -> 5270;
5276 -> 5275;
5276 -> 5269;
5277 -> 5269;
5278 -> 5277;
5279 -> 5032;
5279 -> 5278;
5280 -> 5279;
5280 -> 5036;
5280 -> 5278;
5281 -> 5279;
5281 -> 5036;
5281 -> 5278;
5282 -> 5281;
5282 -> 5277;
5283 -> 5274;
5283 -> 5269;
5284 -> 5272;
5284 -> 5269;
5285 -> 5273;
5285 -> 5269;
5286 -> 5269;
5287 -> 5271;
5287 -> 5269;
5288 -> 5269;
5289 -> 5283;
5289 -> 5288;
5290 -> 5284;
5290 -> 5288;
5291 -> 5285;
5291 -> 5288;
5292 -> 5286;
5292 -> 5288;
5293 -> 5286;
5293 -> 5288;
5294 -> 5287;
5294 -> 5288;
5295 -> 5286;
5295 -> 5288;
5296 -> 5288;
5297 -> 5296;
5297 -> 5288;
5298 -> 5296;
5298 -> 5288;
5299 -> 5296;
5299 -> 5288;
5300 -> 5296;
5300 -> 5288;
5301 -> 5296;
5301 -> 5288;
5302 -> 5296;
5302 -> 5288;
5303 -> 5296;
5303 -> 5288;
5304 -> 5296;
5304 -> 5288;
5305 -> 5296;
5305 -> 5288;
5306 -> 5296;
5306 -> 5288;
5307 -> 5296;
5307 -> 5288;
5308 -> 5296;
5308 -> 5288;
5309 -> 5289;
5309 -> 5296;
5309 -> 5288;
5310 -> 5290;
5310 -> 5296;
5310 -> 5288;
5311 -> 5291;
5311 -> 5296;
5311 -> 5288;
5312 -> 5292;
5312 -> 5296;
5312 -> 5288;
5313 -> 5293;
5313 -> 5296;
5313 -> 5288;
5314 -> 5294;
5314 -> 5296;
5314 -> 5288;
5315 -> 5269;
5316 -> 5315;
5317 -> 5032;
5317 -> 5316;
5318 -> 5317;
5318 -> 5036;
5318 -> 5316;
5319 -> 5317;
5319 -> 5036;
5319 -> 5316;
5320 -> 5319;
5320 -> 5315;
5321 -> 5269;
5322 -> 5036;
5323 -> 5036;
5324 -> 5036;
5325 -> 5323;
5325 -> 5324;
5326 -> 5036;
5326 -> 5324;
5327 -> 5326;
5327 -> 5036;
5327 -> 5324;
5328 -> 5324;
5329 -> 5327;
5330 -> 5036;
5331 -> 5036;
5332 -> 5330;
5332 -> 5331;
5333 -> 5036;
5333 -> 5331;
5334 -> 5333;
5334 -> 5036;
5334 -> 5331;
5335 -> 5331;
5336 -> 5334;
5337 -> 5036;
5338 -> 5036;
5339 -> 5036;
5340 -> 5338;
5340 -> 5339;
5341 -> 5036;
5341 -> 5339;
5342 -> 5341;
5342 -> 5036;
5342 -> 5339;
5343 -> 5339;
5344 -> 5342;
5345 -> 5036;
5346 -> 5036;
5347 -> 5036;
5347 -> 5346;
5348 -> 5036;
5349 -> 5346;
5349 -> 5348;
5350 -> 5346;
5350 -> 5348;
5351 -> 5036;
5351 -> 5348;
5352 -> 5349;
5352 -> 5348;
5353 -> 5350;
5353 -> 5348;
5354 -> 5352;
5354 -> 5353;
5354 -> 5348;
5355 -> 5348;
5356 -> 5354;
5356 -> 5355;
5357 -> 5351;
5357 -> 5355;
5358 -> 5357;
5358 -> 5036;
5358 -> 5355;
5359 -> 5355;
5360 -> 5358;
5361 -> 5348;
5362 -> 5036;
5363 -> 5036;
5364 -> 5036;
5365 -> 5036;
5366 -> 5364;
5366 -> 5365;
5367 -> 5036;
5367 -> 5365;
5368 -> 5367;
5368 -> 5036;
5368 -> 5365;
5369 -> 5365;
5370 -> 5368;
5371 -> 5036;
5372 -> 5036;
5373 -> 5371;
5373 -> 5372;
5374 -> 5036;
5374 -> 5372;
5375 -> 5374;
5375 -> 5036;
5375 -> 5372;
5376 -> 5372;
5377 -> 5375;
5378 -> 5036;
5379 -> 5036;
5379 -> 5321;
5380 -> 5036;
5381 -> 5036;
5382 -> 5036;
5383 -> 5036;
5384 -> 5036;
5385 -> 5384;
5385 -> 5036;
5386 -> 5383;
5386 -> 5036;
5387 -> 5384;
5387 -> 5036;
5388 -> 0;
5388 -> 5036;
5389 -> 5036;
5390 -> 5036;
5391 -> 5036;
5392 -> 5391;
5392 -> 5388;
5392 -> 5036;
5393 -> 5392;
5393 -> 5036;
5394 -> 5036;
5395 -> 5036;
5396 -> 5390;
5396 -> 5395;
5396 -> 5036;
5397 -> 0;
5397 -> 5396;
5398 -> 5036;
5399 -> 5397;
5399 -> 0;
5399 -> 5036;
5400 -> 5393;
5400 -> 0;
5400 -> 5399;
5401 -> 5399;
5402 -> 5036;
5403 -> 5036;
5404 -> 5036;
5405 -> 5036;
5406 -> 5404;
5406 -> 5405;
5407 -> 5036;
5407 -> 5405;
5408 -> 5407;
5408 -> 5036;
5408 -> 5405;
5409 -> 5405;
5410 -> 5408;
5411 -> 5036;
5412 -> 5036;
5413 -> 5036;
5414 -> 5412;
5414 -> 5413;
5415 -> 5036;
5415 -> 5413;
5416 -> 5415;
5416 -> 5036;
5416 -> 5413;
5417 -> 5413;
5418 -> 5416;
5419 -> 5269;
5420 -> 5286;
5420 -> 5036;
5420 -> 5419;
5420 -> 5269;
5421 -> 5274;
5421 -> 5269;
5422 -> 5269;
5423 -> 5272;
5423 -> 5422;
5423 -> 5269;
5424 -> 5423;
5425 -> 5424;
5426 -> 5425;
5427 -> 5036;
5428 -> 5036;
5429 -> 5036;
5430 -> 5265;
5430 -> 5028;
5431 -> 5028;
5432 -> 5032;
5432 -> 5028;
5433 -> 5032;
5433 -> 5028;
5434 -> 5032;
5434 -> 5028;
5435 -> 5032;
5435 -> 5028;
5436 -> 5028;
5437 -> 5435;
5437 -> 5036;
5437 -> 5436;
5437 -> 5028;
5438 -> 5432;
5438 -> 5028;
5439 -> 5028;
5440 -> 5438;
5440 -> 5439;
5441 -> 5435;
5441 -> 5439;
5442 -> 5439;
5443 -> 5441;
5443 -> 5036;
5443 -> 5442;
5443 -> 5439;
5444 -> 5028;
5445 -> 5028;
5446 -> 5445;
5447 -> 5036;
5447 -> 5446;
5448 -> 5447;
5448 -> 5445;
5449 -> 5028;
5450 -> 5449;
5451 -> 5450;
5452 -> 5451;
5453 -> 5032;
5453 -> 5452;
5454 -> 5453;
5454 -> 5036;
5454 -> 5452;
5455 -> 5453;
5455 -> 5036;
5455 -> 5452;
5456 -> 5455;
5456 -> 5451;
5457 -> 5449;
5458 -> 5028;
5459 -> 5458;
5460 -> 5036;
5460 -> 5459;
5461 -> 5460;
5461 -> 5458;
5462 -> 5028;
5463 -> 5032;
5463 -> 5028;
5464 -> 5028;
5465 -> 5463;
5465 -> 5036;
5466 -> 5465;
5466 -> 5036;
5467 -> 5036;
5468 -> 5036;
5469 -> 5036;
5470 -> 5036;
5471 -> 5036;
5471 -> 5470;
5472 -> 5466;
5472 -> 5470;
5473 -> 5470;
5474 -> 5471;
5474 -> 5473;
5475 -> 5471;
5475 -> 5473;
5476 -> 5472;
5476 -> 5473;
5477 -> 5036;
5477 -> 5473;
5478 -> 5477;
5478 -> 5036;
5478 -> 5473;
5479 -> 5473;
5480 -> 5475;
5480 -> 5479;
5481 -> 5480;
5481 -> 5473;
5482 -> 5478;
5482 -> 5036;
5482 -> 5481;
5482 -> 5473;
5483 -> 5477;
5483 -> 5036;
5483 -> 0;
5483 -> 5473;
5484 -> 5481;
5484 -> 5036;
5484 -> 5473;
5485 -> 5483;
5485 -> 5484;
5485 -> 5473;
5486 -> 5474;
5486 -> 5036;
5486 -> 5473;
5487 -> 5474;
5487 -> 5036;
5487 -> 5473;
5488 -> 5473;
5489 -> 5477;
5489 -> 5036;
5489 -> 5488;
5489 -> 5473;
5490 -> 5470;
5491 -> 5032;
5491 -> 5028;
5492 -> 5032;
5492 -> 5036;
5492 -> 5028;
5493 -> 5028;
5494 -> 5493;
5494 -> 5492;
5494 -> 5036;
5494 -> 5028;
5495 -> 5028;
5496 -> 5036;
5497 -> 5036;
5498 -> 5497;
5498 -> 5496;
5498 -> 5036;
5499 -> 5036;
5500 -> 5036;
5500 -> 5499;
5501 -> 5028;
5502 -> 5028;
5503 -> 5032;
5503 -> 5028;
5504 -> 5503;
5504 -> 5036;
5504 -> 5028;
5505 -> 5028;
5506 -> 5504;
5506 -> 5505;
5507 -> 5028;
5508 -> 5032;
5508 -> 5028;
5509 -> 5508;
5509 -> 5036;
5509 -> 5028;
5510 -> 5028;
5511 -> 5509;
5511 -> 5510;
5512 -> 5510;
5513 -> 5511;
5513 -> 5510;
5514 -> 5510;
5515 -> 5513;
5515 -> 5514;
5516 -> 5514;
5517 -> 5516;
5518 -> 5516;
5519 -> 5036;
5519 -> 5516;
5520 -> 5519;
5520 -> 5514;
5521 -> 5514;
5522 -> 5036;
5522 -> 5514;
5523 -> 5522;
5524 -> 5520;
5524 -> 5523;
5524 -> 5522;
5525 -> 5524;
5526 -> 5510;
5527 -> 5512;
5527 -> 5510;
5528 -> 5512;
5528 -> 5510;
5529 -> 5512;
5529 -> 5510;
5530 -> 5512;
5530 -> 5510;
5531 -> 5512;
5531 -> 5510;
5532 -> 5512;
5532 -> 5510;
5533 -> 5512;
5533 -> 5510;
5534 -> 5512;
5534 -> 5510;
5535 -> 5028;
5536 -> 5032;
5536 -> 5028;
5537 -> 5028;
5538 -> 5028;
5539 -> 5032;
5539 -> 5036;
5539 -> 5028;
5540 -> 5028;
5541 -> 5540;
5542 -> 5541;
5543 -> 5542;
5544 -> 5032;
5544 -> 5543;
5545 -> 5544;
5545 -> 5036;
5545 -> 5543;
5546 -> 5544;
5546 -> 5036;
5546 -> 5543;
5547 -> 5546;
5547 -> 5542;
5548 -> 5540;
5549 -> 5036;
5549 -> 5028;
5550 -> 5028;
5551 -> 5032;
5551 -> 5028;
5552 -> 5028;
5553 -> 5552;
5554 -> 5553;
5555 -> 5554;
5556 -> 5036;
5556 -> 5555;
5557 -> 5556;
5557 -> 5554;
5558 -> 5552;
5559 -> 5036;
5559 -> 5028;
5560 -> 5559;
5560 -> 5551;
5560 -> 5036;
5560 -> 5028;
5561 -> 5028;
5562 -> 5561;
5562 -> 5028;
5563 -> 5028;
5564 -> 5032;
5564 -> 5028;
5565 -> 5032;
5565 -> 5028;
5566 -> 5028;
5567 -> 5028;
5568 -> 5036;
5568 -> 0;
5568 -> 5567;
5569 -> 5567;
5570 -> 5036;
5570 -> 5567;
5571 -> 5032;
5571 -> 5028;
5572 -> 5032;
5572 -> 5028;
5573 -> 5032;
5573 -> 5028;
5574 -> 5028;
5575 -> 5032;
5575 -> 5574;
5575 -> 5028;
5576 -> 5028;
5577 -> 5032;
5577 -> 5576;
5578 -> 5571;
5578 -> 5576;
5579 -> 5572;
5579 -> 5576;
5580 -> 5573;
5580 -> 5576;
5581 -> 5576;
5582 -> 5576;
5583 -> 5032;
5583 -> 5036;
5583 -> 5576;
5584 -> 5583;
5584 -> 5036;
5584 -> 5576;
5585 -> 5032;
5585 -> 5036;
5585 -> 5576;
5586 -> 5579;
5586 -> 5585;
5587 -> 5032;
5587 -> 5036;
5587 -> 5586;
5588 -> 5583;
5588 -> 5586;
5589 -> 5586;
5590 -> 5588;
5590 -> 5589;
5591 -> 5589;
5592 -> 5590;
5592 -> 5591;
5592 -> 5589;
5593 -> 5592;
5594 -> 5590;
5594 -> 5036;
5594 -> 5592;
5595 -> 5589;
5596 -> 5595;
5596 -> 5586;
5597 -> 5587;
5597 -> 5596;
5597 -> 5586;
5598 -> 5032;
5598 -> 5597;
5599 -> 5032;
5599 -> 5036;
5599 -> 5597;
5600 -> 5576;
5601 -> 5580;
5601 -> 5036;
5601 -> 5600;
5601 -> 5576;
5602 -> 5028;
5603 -> 5032;
5603 -> 5028;
5604 -> 5032;
5604 -> 5028;
5605 -> 5028;
5606 -> 5604;
5606 -> 5605;
5606 -> 5028;
5607 -> 5603;
5607 -> 5036;
5608 -> 5604;
5608 -> 5036;
5609 -> 5607;
5609 -> 5036;
5610 -> 5608;
5610 -> 5036;
5611 -> 5036;
5612 -> 5036;
5613 -> 5036;
5614 -> 5610;
5614 -> 5613;
5614 -> 5036;
5615 -> 5036;
5616 -> 5036;
5616 -> 5615;
5617 -> 5036;
5617 -> 0;
5618 -> 5036;
5619 -> 5612;
5619 -> 5618;
5620 -> 5619;
5621 -> 5619;
5622 -> 5036;
5622 -> 5619;
5623 -> 5619;
5624 -> 5622;
5624 -> 5623;
5625 -> 5623;
5626 -> 5624;
5626 -> 5625;
5627 -> 5625;
5628 -> 5626;
5628 -> 5627;
5628 -> 5625;
5629 -> 5625;
5630 -> 5629;
5630 -> 5623;
5631 -> 5036;
5631 -> 5630;
5632 -> 5036;
5633 -> 5032;
5633 -> 5028;
5634 -> 5032;
5634 -> 5028;
5635 -> 5032;
5635 -> 5028;
5636 -> 5032;
5636 -> 5028;
5637 -> 5028;
5638 -> 5634;
5638 -> 5637;
5638 -> 5028;
5639 -> 5036;
5639 -> 5028;
5640 -> 5036;
5640 -> 5639;
5641 -> 5036;
5641 -> 0;
5641 -> 5028;
5642 -> 5036;
5642 -> 5028;
5643 -> 5636;
5643 -> 5642;
5644 -> 5036;
5644 -> 5028;
5645 -> 5032;
5645 -> 5028;
5646 -> 5032;
5646 -> 5036;
5646 -> 5028;
5647 -> 5032;
5647 -> 5028;
5648 -> 5028;
5649 -> 5032;
5649 -> 5648;
5649 -> 5028;
5650 -> 5028;
5651 -> 5650;
5651 -> 5028;
5652 -> 5032;
5652 -> 5028;
5653 -> 5028;
5654 -> 5028;
5655 -> 5036;
5655 -> 5654;
5656 -> 5655;
5656 -> 5036;
5656 -> 5654;
5657 -> 5655;
5657 -> 5036;
5657 -> 5656;
5658 -> 5657;
5658 -> 5656;
5659 -> 5656;
5660 -> 5658;
5660 -> 5659;
5661 -> 5660;
5661 -> 5036;
5661 -> 0;
5661 -> 5659;
5662 -> 5660;
5662 -> 5036;
5662 -> 5659;
5663 -> 5659;
5664 -> 5662;
5664 -> 5663;
5665 -> 5663;
5666 -> 5664;
5666 -> 5665;
5666 -> 5663;
5667 -> 5666;
5668 -> 5664;
5668 -> 5036;
5668 -> 5666;
5669 -> 5663;
5670 -> 5669;
5670 -> 5659;
5671 -> 5661;
5671 -> 5670;
5671 -> 5659;
5672 -> 5654;
5673 -> 5672;
5673 -> 5028;
5674 -> 5028;
5675 -> 5036;
5675 -> 5674;
5676 -> 5675;
5676 -> 5036;
5676 -> 5674;
5677 -> 5675;
5677 -> 5036;
5677 -> 5676;
5678 -> 5677;
5678 -> 5676;
5679 -> 5676;
5680 -> 5678;
5680 -> 5679;
5681 -> 5680;
5681 -> 5036;
5681 -> 0;
5681 -> 5679;
5682 -> 5680;
5682 -> 5036;
5682 -> 5679;
5683 -> 5679;
5684 -> 5682;
5684 -> 5683;
5685 -> 5683;
5686 -> 5684;
5686 -> 5685;
5686 -> 5683;
5687 -> 5686;
5688 -> 5684;
5688 -> 5036;
5688 -> 5686;
5689 -> 5683;
5690 -> 5689;
5690 -> 5679;
5691 -> 5681;
5691 -> 5690;
5691 -> 5679;
5692 -> 5674;
5693 -> 5028;
5694 -> 5571;
5694 -> 5576;
5695 -> 5571;
5695 -> 5036;
5695 -> 5576;
5696 -> 5695;
5696 -> 5036;
5696 -> 5576;
5697 -> 5571;
5697 -> 5036;
5697 -> 5576;
5698 -> 5571;
5698 -> 5697;
5698 -> 5576;
5699 -> 5579;
5699 -> 5698;
5700 -> 5571;
5700 -> 5697;
5700 -> 5699;
5701 -> 5695;
5701 -> 5699;
5702 -> 5699;
5703 -> 5701;
5703 -> 5702;
5704 -> 5702;
5705 -> 5703;
5705 -> 5704;
5705 -> 5702;
5706 -> 5705;
5707 -> 5703;
5707 -> 5697;
5707 -> 5705;
5708 -> 5702;
5709 -> 5708;
5709 -> 5699;
5710 -> 5700;
5710 -> 5709;
5710 -> 5699;
5711 -> 5571;
5711 -> 5710;
5712 -> 5571;
5712 -> 5697;
5712 -> 5710;
5713 -> 5580;
5713 -> 5697;
5713 -> 5600;
5713 -> 5576;
5714 -> 5036;
5714 -> 5697;
5714 -> 5028;
5715 -> 5036;
5715 -> 5697;
5715 -> 5714;
5716 -> 5036;
5716 -> 5697;
5716 -> 0;
5716 -> 5028;
5717 -> 5036;
5717 -> 5697;
5717 -> 5028;
5718 -> 5636;
5718 -> 5717;
5719 -> 5036;
5719 -> 5697;
5719 -> 5028;
5720 -> 5032;
5720 -> 5697;
5720 -> 5028;
5721 -> 5603;
5721 -> 5697;
5722 -> 5604;
5722 -> 5697;
5723 -> 5721;
5723 -> 5697;
5724 -> 5722;
5724 -> 5697;
5725 -> 5697;
5726 -> 5697;
5727 -> 5697;
5728 -> 5724;
5728 -> 5727;
5728 -> 5697;
5729 -> 5697;
5730 -> 5697;
5730 -> 5729;
5731 -> 5697;
5731 -> 0;
5732 -> 5697;
5733 -> 5726;
5733 -> 5732;
5734 -> 5733;
5735 -> 5733;
5736 -> 5697;
5736 -> 5733;
5737 -> 5733;
5738 -> 5736;
5738 -> 5737;
5739 -> 5737;
5740 -> 5738;
5740 -> 5739;
5741 -> 5739;
5742 -> 5740;
5742 -> 5741;
5742 -> 5739;
5743 -> 5739;
5744 -> 5743;
5744 -> 5737;
5745 -> 5697;
5745 -> 5744;
5746 -> 5697;
5747 -> 5571;
5747 -> 5697;
5747 -> 5576;
5748 -> 5747;
5748 -> 5697;
5748 -> 5576;
5749 -> 5747;
5749 -> 5699;
5750 -> 5749;
5750 -> 5702;
5751 -> 5750;
5751 -> 5704;
5751 -> 5702;
5752 -> 5751;
5753 -> 5750;
5753 -> 5697;
5753 -> 5751;
5754 -> 5742;
5755 -> 5740;
5755 -> 5697;
5755 -> 5742;
5756 -> 5697;
5756 -> 5654;
5757 -> 5756;
5757 -> 5697;
5757 -> 5654;
5758 -> 5756;
5758 -> 5697;
5758 -> 5757;
5759 -> 5758;
5759 -> 5757;
5760 -> 5757;
5761 -> 5759;
5761 -> 5760;
5762 -> 5761;
5762 -> 5697;
5762 -> 0;
5762 -> 5760;
5763 -> 5761;
5763 -> 5697;
5763 -> 5760;
5764 -> 5760;
5765 -> 5763;
5765 -> 5764;
5766 -> 5764;
5767 -> 5765;
5767 -> 5766;
5767 -> 5764;
5768 -> 5767;
5769 -> 5765;
5769 -> 5697;
5769 -> 5767;
5770 -> 5764;
5771 -> 5770;
5771 -> 5760;
5772 -> 5762;
5772 -> 5771;
5772 -> 5760;
5773 -> 5697;
5773 -> 5674;
5774 -> 5773;
5774 -> 5697;
5774 -> 5674;
5775 -> 5773;
5775 -> 5697;
5775 -> 5774;
5776 -> 5775;
5776 -> 5774;
5777 -> 5774;
5778 -> 5776;
5778 -> 5777;
5779 -> 5778;
5779 -> 5697;
5779 -> 0;
5779 -> 5777;
5780 -> 5778;
5780 -> 5697;
5780 -> 5777;
5781 -> 5777;
5782 -> 5780;
5782 -> 5781;
5783 -> 5781;
5784 -> 5782;
5784 -> 5783;
5784 -> 5781;
5785 -> 5784;
5786 -> 5782;
5786 -> 5697;
5786 -> 5784;
5787 -> 5781;
5788 -> 5787;
5788 -> 5777;
5789 -> 5779;
5789 -> 5788;
5789 -> 5777;
5790 -> 5028;
5791 -> 5463;
5791 -> 5697;
5792 -> 5791;
5792 -> 5697;
5793 -> 5697;
5794 -> 5032;
5794 -> 5697;
5794 -> 5028;
5795 -> 5493;
5795 -> 5794;
5795 -> 5697;
5795 -> 5028;
5796 -> 5028;
5797 -> 5503;
5797 -> 5697;
5797 -> 5028;
5798 -> 5797;
5798 -> 5505;
5799 -> 5508;
5799 -> 5697;
5799 -> 5028;
5800 -> 5799;
5800 -> 5510;
5801 -> 5800;
5801 -> 5510;
5802 -> 5801;
5802 -> 5514;
5803 -> 5697;
5803 -> 5516;
5804 -> 5803;
5804 -> 5514;
5805 -> 5697;
5805 -> 5514;
5806 -> 5805;
5807 -> 5804;
5807 -> 5806;
5807 -> 5805;
5808 -> 5807;
5809 -> 5032;
5809 -> 5697;
5809 -> 5028;
5810 -> 5544;
5810 -> 5697;
5810 -> 5543;
5811 -> 5544;
5811 -> 5697;
5811 -> 5543;
5812 -> 5811;
5812 -> 5542;
5813 -> 5697;
5813 -> 5028;
5814 -> 5697;
5814 -> 5555;
5815 -> 5814;
5815 -> 5554;
5816 -> 5697;
5816 -> 5028;
5817 -> 5816;
5817 -> 5551;
5817 -> 5697;
5817 -> 5028;
5818 -> 5032;
5818 -> 5697;
5819 -> 5718;
5820 -> 5718;
5821 -> 5036;
5821 -> 5697;
5821 -> 5718;
5822 -> 5718;
5823 -> 5821;
5823 -> 5822;
5824 -> 5822;
5825 -> 5823;
5825 -> 5824;
5826 -> 5824;
5827 -> 5825;
5827 -> 5826;
5827 -> 5824;
5828 -> 5824;
5829 -> 5828;
5829 -> 5822;
5830 -> 5036;
5830 -> 5697;
5830 -> 5829;
5831 -> 5032;
5831 -> 5028;
5832 -> 5032;
5832 -> 5697;
5832 -> 5028;
5833 -> 5697;
5834 -> 5697;
5834 -> 5833;
5835 -> 5833;
5836 -> 5835;
5836 -> 5834;
5836 -> 5697;
5836 -> 5833;
5837 -> 5697;
5838 -> 5697;
5839 -> 5838;
5839 -> 5697;
5840 -> 5697;
5841 -> 5697;
5842 -> 5697;
5842 -> 5841;
5843 -> 5697;
5843 -> 5841;
5844 -> 5840;
5844 -> 5841;
5845 -> 5841;
5846 -> 5843;
5846 -> 5845;
5846 -> 5841;
5847 -> 5840;
5847 -> 5838;
5848 -> 5838;
5849 -> 5838;
5849 -> 5848;
5850 -> 5838;
5850 -> 5848;
5851 -> 5847;
5851 -> 5848;
5852 -> 5848;
5853 -> 5850;
5853 -> 5852;
5853 -> 5848;
5854 -> 5697;
5855 -> 5697;
5856 -> 5032;
5856 -> 5838;
5856 -> 5697;
5856 -> 5855;
5857 -> 5032;
5857 -> 5028;
5858 -> 5032;
5858 -> 5028;
5859 -> 5032;
5859 -> 5028;
5860 -> 5859;
5860 -> 5838;
5860 -> 5028;
5861 -> 5860;
5861 -> 5838;
5861 -> 5028;
5862 -> 5028;
5863 -> 5862;
5863 -> 5861;
5863 -> 5028;
5864 -> 5032;
5864 -> 5028;
5865 -> 0;
5865 -> 5028;
5866 -> 5036;
5866 -> 5838;
5866 -> 5028;
5867 -> 5036;
5867 -> 5838;
5867 -> 5866;
5868 -> 5036;
5868 -> 5838;
5868 -> 0;
5868 -> 5028;
5869 -> 5036;
5869 -> 5838;
5869 -> 5028;
5870 -> 5636;
5870 -> 5869;
5871 -> 5036;
5871 -> 5838;
5871 -> 5028;
5872 -> 5032;
5872 -> 5838;
5872 -> 5028;
5873 -> 5603;
5873 -> 5838;
5874 -> 5604;
5874 -> 5838;
5875 -> 5873;
5875 -> 5838;
5876 -> 5874;
5876 -> 5838;
5877 -> 5838;
5878 -> 5838;
5879 -> 5838;
5880 -> 5876;
5880 -> 5879;
5880 -> 5838;
5881 -> 5838;
5882 -> 5838;
5882 -> 5881;
5883 -> 5838;
5883 -> 0;
5884 -> 5838;
5885 -> 5878;
5885 -> 5884;
5886 -> 5885;
5887 -> 5885;
5888 -> 5838;
5888 -> 5885;
5889 -> 5885;
5890 -> 5888;
5890 -> 5889;
5891 -> 5889;
5892 -> 5890;
5892 -> 5891;
5893 -> 5891;
5894 -> 5892;
5894 -> 5893;
5894 -> 5891;
5895 -> 5891;
5896 -> 5895;
5896 -> 5889;
5897 -> 5838;
5897 -> 5896;
5898 -> 5838;
5899 -> 5032;
5899 -> 5838;
5899 -> 5028;
5900 -> 5870;
5901 -> 5870;
5902 -> 5036;
5902 -> 5838;
5902 -> 5870;
5903 -> 5870;
5904 -> 5902;
5904 -> 5903;
5905 -> 5903;
5906 -> 5904;
5906 -> 5905;
5907 -> 5905;
5908 -> 5906;
5908 -> 5907;
5908 -> 5905;
5909 -> 5905;
5910 -> 5909;
5910 -> 5903;
5911 -> 5036;
5911 -> 5838;
5911 -> 5910;
5912 -> 5838;
5912 -> 0;
5912 -> 5567;
5913 -> 5838;
5914 -> 5913;
5914 -> 5838;
5915 -> 5838;
5915 -> 5567;
5916 -> 5571;
5916 -> 5838;
5916 -> 5576;
5917 -> 5916;
5917 -> 5838;
5917 -> 5576;
5918 -> 5571;
5918 -> 5838;
5918 -> 5576;
5919 -> 5579;
5919 -> 5918;
5920 -> 5571;
5920 -> 5838;
5920 -> 5919;
5921 -> 5916;
5921 -> 5919;
5922 -> 5919;
5923 -> 5921;
5923 -> 5922;
5924 -> 5922;
5925 -> 5923;
5925 -> 5924;
5925 -> 5922;
5926 -> 5925;
5927 -> 5923;
5927 -> 5838;
5927 -> 5925;
5928 -> 5922;
5929 -> 5928;
5929 -> 5919;
5930 -> 5920;
5930 -> 5929;
5930 -> 5919;
5931 -> 5571;
5931 -> 5930;
5932 -> 5571;
5932 -> 5838;
5932 -> 5930;
5933 -> 5580;
5933 -> 5838;
5933 -> 5600;
5933 -> 5576;
5934 -> 5838;
5934 -> 5654;
5935 -> 5934;
5935 -> 5838;
5935 -> 5654;
5936 -> 5934;
5936 -> 5838;
5936 -> 5935;
5937 -> 5936;
5937 -> 5935;
5938 -> 5935;
5939 -> 5937;
5939 -> 5938;
5940 -> 5939;
5940 -> 5838;
5940 -> 0;
5940 -> 5938;
5941 -> 5939;
5941 -> 5838;
5941 -> 5938;
5942 -> 5938;
5943 -> 5941;
5943 -> 5942;
5944 -> 5942;
5945 -> 5943;
5945 -> 5944;
5945 -> 5942;
5946 -> 5945;
5947 -> 5943;
5947 -> 5838;
5947 -> 5945;
5948 -> 5942;
5949 -> 5948;
5949 -> 5938;
5950 -> 5940;
5950 -> 5949;
5950 -> 5938;
5951 -> 5838;
5951 -> 5674;
5952 -> 5951;
5952 -> 5838;
5952 -> 5674;
5953 -> 5951;
5953 -> 5838;
5953 -> 5952;
5954 -> 5953;
5954 -> 5952;
5955 -> 5952;
5956 -> 5954;
5956 -> 5955;
5957 -> 5956;
5957 -> 5838;
5957 -> 0;
5957 -> 5955;
5958 -> 5956;
5958 -> 5838;
5958 -> 5955;
5959 -> 5955;
5960 -> 5958;
5960 -> 5959;
5961 -> 5959;
5962 -> 5960;
5962 -> 5961;
5962 -> 5959;
5963 -> 5962;
5964 -> 5960;
5964 -> 5838;
5964 -> 5962;
5965 -> 5959;
5966 -> 5965;
5966 -> 5955;
5967 -> 5957;
5967 -> 5966;
5967 -> 5955;
5968 -> 5894;
5969 -> 5892;
5969 -> 5838;
5969 -> 5894;
5970 -> 5032;
5970 -> 5838;
5970 -> 5028;
5971 -> 5544;
5971 -> 5838;
5971 -> 5543;
5972 -> 5544;
5972 -> 5838;
5972 -> 5543;
5973 -> 5972;
5973 -> 5542;
5974 -> 5838;
5974 -> 5028;
5975 -> 5838;
5975 -> 5555;
5976 -> 5975;
5976 -> 5554;
5977 -> 5838;
5977 -> 5028;
5978 -> 5977;
5978 -> 5551;
5978 -> 5838;
5978 -> 5028;
5979 -> 5032;
5979 -> 5838;
5980 -> 5028;
5981 -> 5028;
5982 -> 5028;
5983 -> 5028;
5984 -> 5032;
5984 -> 5838;
5985 -> 5838;
5986 -> 5984;
5986 -> 5838;
5986 -> 5985;
5987 -> 5838;
5988 -> 5838;
5989 -> 5838;
5990 -> 5838;
5991 -> 5838;
5992 -> 5838;
5993 -> 5992;
5993 -> 5838;
5993 -> 5985;
5994 -> 5991;
5994 -> 5838;
5995 -> 5991;
5995 -> 5838;
5996 -> 5991;
5996 -> 5990;
5996 -> 5838;
5997 -> 5980;
5997 -> 5028;
5998 -> 5447;
5998 -> 5991;
5998 -> 5446;
5999 -> 5447;
5999 -> 5991;
5999 -> 5446;
6000 -> 5999;
6000 -> 5445;
6001 -> 5017;
6001 -> 5014;
6002 -> 5014;
6003 -> 6001;
6003 -> 6002;
6004 -> 6003;
6004 -> 6002;
6005 -> 6002;
6006 -> 6004;
6006 -> 6005;
6007 -> 6006;
6007 -> 6005;
6008 -> 6005;
6009 -> 6005;
6010 -> 6007;
6010 -> 6009;
6011 -> 6008;
6011 -> 6009;
6012 -> 6009;
6013 -> 6010;
6013 -> 6012;
6013 -> 6009;
6014 -> 6010;
6014 -> 6009;
6015 -> 6010;
6015 -> 6009;
6016 -> 6011;
6016 -> 6014;
6016 -> 6015;
6016 -> 6009;
6017 -> 6010;
6017 -> 6009;
6018 -> 6009;
6019 -> 5991;
6019 -> 6018;
6019 -> 6009;
6020 -> 6009;
6021 -> 6010;
6021 -> 6009;
6022 -> 6009;
6023 -> 6021;
6023 -> 6022;
6024 -> 6022;
6025 -> 6022;
6026 -> 5991;
6026 -> 6022;
6027 -> 6026;
6027 -> 6022;
6028 -> 6025;
6028 -> 6027;
6029 -> 6028;
6029 -> 6024;
6029 -> 6022;
6030 -> 6028;
6030 -> 6024;
6030 -> 6022;
6031 -> 6030;
6031 -> 6022;
6032 -> 6023;
6032 -> 6022;
6033 -> 6023;
6033 -> 6022;
6034 -> 6023;
6034 -> 6022;
6035 -> 6022;
6036 -> 6034;
6036 -> 6035;
6037 -> 1730;
6037 -> 6035;
6038 -> 6035;
6039 -> 6036;
6039 -> 6035;
6040 -> 6035;
6041 -> 6040;
6041 -> 6022;
6042 -> 6041;
6043 -> 6042;
6044 -> 1730;
6044 -> 6042;
6045 -> 6022;
6046 -> 6045;
6046 -> 6022;
6047 -> 6022;
6048 -> 6022;
6049 -> 6045;
6049 -> 6048;
6049 -> 6046;
6049 -> 6022;
6050 -> 6022;
6051 -> 6023;
6051 -> 6022;
6052 -> 6045;
6052 -> 6022;
6053 -> 6050;
6053 -> 6022;
6054 -> 6022;
6055 -> 6052;
6055 -> 6054;
6056 -> 6053;
6056 -> 6054;
6057 -> 6056;
6057 -> 6050;
6057 -> 6054;
6058 -> 6054;
6059 -> 6058;
6059 -> 6057;
6059 -> 6054;
6060 -> 6022;
6061 -> 6022;
6062 -> 6045;
6062 -> 6061;
6062 -> 6049;
6062 -> 6022;
6063 -> 6022;
6064 -> 6022;
6065 -> 6022;
6066 -> 6064;
6066 -> 6065;
6066 -> 6022;
6067 -> 6022;
6068 -> 6045;
6068 -> 6067;
6068 -> 6062;
6068 -> 6022;
6069 -> 6050;
6069 -> 6022;
6070 -> 6063;
6070 -> 6022;
6071 -> 0;
6071 -> 6022;
6072 -> 6022;
6073 -> 6022;
6074 -> 6069;
6074 -> 6073;
6075 -> 6070;
6075 -> 6073;
6076 -> 6071;
6076 -> 6073;
6077 -> 6072;
6077 -> 6073;
6078 -> 6072;
6078 -> 6073;
6079 -> 6073;
6080 -> 6077;
6080 -> 6079;
6080 -> 6073;
6081 -> 6080;
6081 -> 6073;
6082 -> 3803;
6082 -> 6081;
6083 -> 6073;
6084 -> 6083;
6084 -> 6078;
6084 -> 6073;
6085 -> 6074;
6085 -> 6073;
6086 -> 6075;
6086 -> 6073;
6087 -> 6076;
6087 -> 6073;
6088 -> 6085;
6088 -> 6073;
6089 -> 6086;
6089 -> 6073;
6090 -> 6084;
6090 -> 6073;
6091 -> 6073;
6092 -> 6088;
6092 -> 6091;
6093 -> 6089;
6093 -> 6091;
6094 -> 6090;
6094 -> 6091;
6095 -> 6082;
6095 -> 6091;
6096 -> 6092;
6096 -> 6091;
6097 -> 6092;
6097 -> 6085;
6097 -> 6091;
6098 -> 6093;
6098 -> 6091;
6099 -> 6093;
6099 -> 6086;
6099 -> 6091;
6100 -> 6091;
6101 -> 6096;
6101 -> 6100;
6102 -> 6097;
6102 -> 6100;
6103 -> 6098;
6103 -> 6100;
6104 -> 6099;
6104 -> 6100;
6105 -> 6095;
6105 -> 6100;
6106 -> 6101;
6106 -> 6100;
6107 -> 6102;
6107 -> 6100;
6108 -> 6103;
6108 -> 6100;
6109 -> 6104;
6109 -> 6100;
6110 -> 6100;
6111 -> 6106;
6111 -> 6110;
6112 -> 6107;
6112 -> 6110;
6113 -> 6108;
6113 -> 6110;
6114 -> 6109;
6114 -> 6110;
6115 -> 6105;
6115 -> 6110;
6116 -> 6110;
6117 -> 6112;
6117 -> 6116;
6117 -> 6110;
6118 -> 6110;
6119 -> 6114;
6119 -> 6118;
6119 -> 6110;
6120 -> 6117;
6120 -> 6119;
6120 -> 6110;
6121 -> 6110;
6122 -> 6121;
6122 -> 6120;
6122 -> 6110;
6123 -> 6110;
6124 -> 6123;
6124 -> 6112;
6124 -> 6110;
6125 -> 6110;
6126 -> 6125;
6126 -> 6114;
6126 -> 6110;
6127 -> 6110;
6128 -> 6127;
6128 -> 6112;
6128 -> 6110;
6129 -> 6120;
6129 -> 6110;
6130 -> 6102;
6130 -> 6100;
6131 -> 6104;
6131 -> 6100;
6132 -> 6100;
6133 -> 6130;
6133 -> 6132;
6133 -> 6100;
6134 -> 6100;
6135 -> 6130;
6135 -> 6134;
6135 -> 6100;
6136 -> 6100;
6137 -> 6131;
6137 -> 6136;
6137 -> 6100;
6138 -> 6100;
6139 -> 6138;
6139 -> 6091;
6140 -> 6091;
6141 -> 6140;
6141 -> 6073;
6142 -> 6087;
6142 -> 6141;
6142 -> 6073;
6143 -> 6045;
6143 -> 6142;
6143 -> 6068;
6143 -> 6022;
6144 -> 6063;
6144 -> 6022;
6145 -> 6050;
6145 -> 6022;
6146 -> 6045;
6146 -> 6143;
6146 -> 6022;
6147 -> 6146;
6147 -> 6009;
6148 -> 6002;
6149 -> 5015;
6149 -> 5014;
6150 -> 5003;
6150 -> 5001;
6151 -> 5005;
6151 -> 5001;
6152 -> 5001;
6153 -> 6150;
6153 -> 6152;
6153 -> 6151;
6153 -> 5002;
6153 -> 5003;
6153 -> 5991;
6153 -> 5001;
6154 -> 6153;
6154 -> 6152;
6155 -> 6153;
6155 -> 6152;
6156 -> 6153;
6156 -> 6152;
6157 -> 6153;
6157 -> 6152;
6158 -> 6153;
6158 -> 6152;
6159 -> 6152;
6160 -> 6153;
6160 -> 6159;
6161 -> 6159;
6162 -> 6153;
6162 -> 6161;
6163 -> 6161;
6164 -> 6163;
6165 -> 6164;
6166 -> 6153;
6166 -> 6165;
6167 -> 6166;
6167 -> 6164;
6168 -> 6159;
6169 -> 6152;
6170 -> 6153;
6170 -> 6169;
6170 -> 6152;
6171 -> 6152;
6172 -> 6171;
6173 -> 6172;
6174 -> 6153;
6174 -> 6173;
6175 -> 6174;
6175 -> 6172;
6176 -> 6171;
6177 -> 6171;
6178 -> 6177;
6179 -> 6153;
6179 -> 6178;
6180 -> 6179;
6180 -> 6177;
6181 -> 6153;
6181 -> 6171;
6182 -> 6171;
6183 -> 6152;
6184 -> 6152;
6185 -> 6153;
6186 -> 6185;
6186 -> 6153;
6187 -> 6153;
6188 -> 6153;
6189 -> 6153;
6190 -> 6152;
6191 -> 6154;
6191 -> 6190;
6191 -> 6152;
6192 -> 6152;
6193 -> 6155;
6193 -> 6192;
6193 -> 6152;
6194 -> 6152;
6195 -> 6156;
6195 -> 6194;
6195 -> 6152;
6196 -> 6152;
6197 -> 6153;
6197 -> 6152;
6198 -> 6197;
6199 -> 0;
6199 -> 6197;
6200 -> 6198;
6200 -> 6199;
6200 -> 6197;
6201 -> 0;
6201 -> 6152;
6202 -> 6152;
6203 -> 6152;
6204 -> 6201;
6204 -> 6203;
6205 -> 6202;
6205 -> 6203;
6206 -> 6203;
6207 -> 6204;
6207 -> 6203;
6208 -> 6205;
6208 -> 6203;
6209 -> 6206;
6209 -> 6203;
6210 -> 6203;
6211 -> 6207;
6211 -> 6210;
6212 -> 6208;
6212 -> 6210;
6213 -> 6209;
6213 -> 6210;
6214 -> 6210;
6215 -> 6211;
6215 -> 0;
6215 -> 6210;
6216 -> 6215;
6216 -> 6212;
6216 -> 6210;
6217 -> 6216;
6218 -> 6217;
6219 -> 6218;
6220 -> 6216;
6221 -> 6153;
6222 -> 6153;
6223 -> 6216;
6224 -> 6153;
6225 -> 6211;
6225 -> 0;
6225 -> 6210;
6226 -> 6214;
6226 -> 6225;
6227 -> 6225;
6228 -> 6225;
6229 -> 6225;
6230 -> 6153;
6230 -> 6229;
6231 -> 6230;
6231 -> 6225;
6232 -> 6225;
6233 -> 6225;
6234 -> 6225;
6235 -> 6233;
6235 -> 6234;
6236 -> 6233;
6236 -> 6234;
6237 -> 6233;
6237 -> 6234;
6238 -> 6234;
6239 -> 6234;
6240 -> 6234;
6241 -> 6235;
6241 -> 6240;
6241 -> 6234;
6242 -> 6234;
6243 -> 6242;
6244 -> 6243;
6245 -> 6153;
6245 -> 6244;
6246 -> 6245;
6246 -> 6243;
6247 -> 6239;
6247 -> 6234;
6248 -> 6235;
6248 -> 6234;
6249 -> 6248;
6250 -> 6248;
6251 -> 6234;
6252 -> 6237;
6252 -> 6251;
6252 -> 6234;
6253 -> 6235;
6253 -> 6234;
6254 -> 6236;
6254 -> 6234;
6255 -> 6234;
6256 -> 6253;
6256 -> 6255;
6257 -> 6254;
6257 -> 6255;
6258 -> 6255;
6259 -> 6256;
6259 -> 6258;
6259 -> 6255;
6260 -> 6153;
6260 -> 6255;
6261 -> 6225;
6262 -> 6153;
6262 -> 6261;
6262 -> 6225;
6263 -> 6211;
6263 -> 0;
6263 -> 6210;
6264 -> 6213;
6264 -> 6210;
6265 -> 6214;
6265 -> 6210;
6266 -> 6210;
6267 -> 6203;
6268 -> 6198;
6268 -> 6200;
6268 -> 6152;
6269 -> 6200;
6269 -> 6153;
6270 -> 6153;
6270 -> 6268;
6271 -> 6153;
6272 -> 6153;
6273 -> 6271;
6273 -> 6272;
6274 -> 6271;
6274 -> 6272;
6275 -> 6271;
6275 -> 6272;
6276 -> 6272;
6277 -> 6274;
6277 -> 6276;
6277 -> 6272;
6278 -> 6274;
6278 -> 6272;
6279 -> 6275;
6279 -> 6272;
6280 -> 6272;
6281 -> 6272;
6282 -> 6278;
6282 -> 6281;
6283 -> 6279;
6283 -> 6281;
6284 -> 6280;
6284 -> 6281;
6285 -> 6281;
6286 -> 6285;
6286 -> 6281;
6287 -> 6281;
6288 -> 6282;
6288 -> 6287;
6288 -> 6281;
6289 -> 6282;
6289 -> 6285;
6289 -> 6281;
6290 -> 6283;
6290 -> 6285;
6290 -> 6281;
6291 -> 6272;
6292 -> 6273;
6292 -> 6291;
6293 -> 6291;
6294 -> 6292;
6294 -> 6293;
6295 -> 6294;
6295 -> 6268;
6295 -> 6293;
6296 -> 6294;
6296 -> 6268;
6296 -> 6293;
6297 -> 6296;
6297 -> 6291;
6298 -> 6292;
6298 -> 6268;
6298 -> 6291;
6299 -> 6298;
6299 -> 6272;
6300 -> 6299;
6300 -> 6280;
6300 -> 6298;
6300 -> 6285;
6300 -> 6286;
6300 -> 6289;
6300 -> 6290;
6300 -> 6153;
6300 -> 6272;
6301 -> 6272;
6302 -> 6300;
6302 -> 6301;
6303 -> 6300;
6303 -> 6301;
6304 -> 6303;
6304 -> 6300;
6304 -> 6301;
6305 -> 6302;
6305 -> 6304;
6305 -> 6301;
6306 -> 6303;
6306 -> 6305;
6307 -> 6305;
6308 -> 6306;
6308 -> 6307;
6309 -> 6306;
6309 -> 6307;
6310 -> 6309;
6310 -> 6306;
6310 -> 6307;
6311 -> 6308;
6311 -> 6307;
6312 -> 6307;
6313 -> 6311;
6313 -> 6312;
6313 -> 6307;
6314 -> 6313;
6315 -> 6309;
6315 -> 6310;
6315 -> 6314;
6315 -> 6313;
6316 -> 6309;
6316 -> 6310;
6316 -> 6315;
6317 -> 6308;
6317 -> 6316;
6317 -> 6307;
6318 -> 6317;
6319 -> 6152;
6320 -> 6152;
6321 -> 6320;
6322 -> 6153;
6322 -> 6321;
6323 -> 6322;
6323 -> 6317;
6323 -> 6321;
6324 -> 6322;
6324 -> 6317;
6324 -> 6321;
6325 -> 6324;
6325 -> 6320;
6326 -> 6152;
6327 -> 6326;
6328 -> 6153;
6328 -> 6327;
6329 -> 6328;
6329 -> 6317;
6329 -> 6327;
6330 -> 6328;
6330 -> 6317;
6330 -> 6327;
6331 -> 6330;
6331 -> 6326;
6332 -> 6152;
6333 -> 6153;
6333 -> 6152;
6334 -> 6152;
6335 -> 6333;
6335 -> 6317;
6336 -> 6335;
6336 -> 6317;
6337 -> 6317;
6338 -> 6317;
6339 -> 6317;
6340 -> 6317;
6341 -> 6317;
6341 -> 6340;
6342 -> 6336;
6342 -> 6340;
6343 -> 6340;
6344 -> 6341;
6344 -> 6343;
6345 -> 6341;
6345 -> 6343;
6346 -> 6342;
6346 -> 6343;
6347 -> 6317;
6347 -> 6343;
6348 -> 6347;
6348 -> 6317;
6348 -> 6343;
6349 -> 6343;
6350 -> 6345;
6350 -> 6349;
6351 -> 6350;
6351 -> 6343;
6352 -> 6348;
6352 -> 6317;
6352 -> 6351;
6352 -> 6343;
6353 -> 6347;
6353 -> 6317;
6353 -> 0;
6353 -> 6343;
6354 -> 6351;
6354 -> 6317;
6354 -> 6343;
6355 -> 6353;
6355 -> 6354;
6355 -> 6343;
6356 -> 6344;
6356 -> 6317;
6356 -> 6343;
6357 -> 6344;
6357 -> 6317;
6357 -> 6343;
6358 -> 6343;
6359 -> 6347;
6359 -> 6317;
6359 -> 6358;
6359 -> 6343;
6360 -> 6340;
6361 -> 6153;
6361 -> 6152;
6362 -> 6153;
6362 -> 6317;
6362 -> 6152;
6363 -> 6152;
6364 -> 6363;
6364 -> 6362;
6364 -> 6317;
6364 -> 6152;
6365 -> 6152;
6366 -> 6152;
6367 -> 6317;
6368 -> 6317;
6369 -> 6368;
6369 -> 6367;
6369 -> 6317;
6370 -> 6153;
6370 -> 6317;
6371 -> 6153;
6371 -> 6152;
6372 -> 6371;
6372 -> 6317;
6372 -> 6152;
6373 -> 6152;
6374 -> 6372;
6374 -> 6373;
6375 -> 6152;
6376 -> 6153;
6376 -> 6152;
6377 -> 6376;
6377 -> 6317;
6377 -> 6152;
6378 -> 6152;
6379 -> 6377;
6379 -> 6378;
6380 -> 6378;
6381 -> 6379;
6381 -> 6378;
6382 -> 6378;
6383 -> 6381;
6383 -> 6382;
6384 -> 6382;
6385 -> 6384;
6386 -> 6384;
6387 -> 6317;
6387 -> 6384;
6388 -> 6387;
6388 -> 6382;
6389 -> 6382;
6390 -> 6317;
6390 -> 6382;
6391 -> 6390;
6392 -> 6388;
6392 -> 6391;
6392 -> 6390;
6393 -> 6392;
6394 -> 6378;
6395 -> 6380;
6395 -> 6378;
6396 -> 6380;
6396 -> 6378;
6397 -> 6380;
6397 -> 6378;
6398 -> 6380;
6398 -> 6378;
6399 -> 6380;
6399 -> 6378;
6400 -> 6380;
6400 -> 6378;
6401 -> 6380;
6401 -> 6378;
6402 -> 6380;
6402 -> 6378;
6403 -> 6152;
6404 -> 6153;
6404 -> 6152;
6405 -> 6152;
6406 -> 6152;
6407 -> 6153;
6407 -> 6317;
6407 -> 6152;
6408 -> 6152;
6409 -> 6408;
6410 -> 6409;
6411 -> 6410;
6412 -> 6153;
6412 -> 6411;
6413 -> 6412;
6413 -> 6317;
6413 -> 6411;
6414 -> 6412;
6414 -> 6317;
6414 -> 6411;
6415 -> 6414;
6415 -> 6410;
6416 -> 6408;
6417 -> 6317;
6417 -> 6152;
6418 -> 6152;
6419 -> 6153;
6419 -> 6152;
6420 -> 6152;
6421 -> 6420;
6422 -> 6421;
6423 -> 6422;
6424 -> 6317;
6424 -> 6423;
6425 -> 6424;
6425 -> 6422;
6426 -> 6420;
6427 -> 6317;
6427 -> 6152;
6428 -> 6427;
6428 -> 6419;
6428 -> 6317;
6428 -> 6152;
6429 -> 6152;
6430 -> 6429;
6430 -> 6152;
6431 -> 6152;
6432 -> 6153;
6432 -> 6152;
6433 -> 6153;
6433 -> 6152;
6434 -> 6152;
6435 -> 6152;
6436 -> 6317;
6436 -> 0;
6436 -> 6435;
6437 -> 6435;
6438 -> 6317;
6439 -> 6438;
6439 -> 6317;
6440 -> 6317;
6440 -> 6435;
6441 -> 6153;
6441 -> 6152;
6442 -> 6153;
6442 -> 6152;
6443 -> 6152;
6444 -> 6153;
6444 -> 6443;
6444 -> 6152;
6445 -> 6152;
6446 -> 6153;
6446 -> 6445;
6447 -> 6153;
6447 -> 6445;
6448 -> 6441;
6448 -> 6445;
6449 -> 6442;
6449 -> 6445;
6450 -> 6445;
6451 -> 6445;
6452 -> 6153;
6452 -> 6317;
6452 -> 6445;
6453 -> 6452;
6453 -> 6317;
6453 -> 6445;
6454 -> 6153;
6454 -> 6317;
6454 -> 6445;
6455 -> 6448;
6455 -> 6454;
6456 -> 6153;
6456 -> 6317;
6456 -> 6455;
6457 -> 6452;
6457 -> 6455;
6458 -> 6455;
6459 -> 6457;
6459 -> 6458;
6460 -> 6458;
6461 -> 6459;
6461 -> 6460;
6461 -> 6458;
6462 -> 6461;
6463 -> 6459;
6463 -> 6317;
6463 -> 6461;
6464 -> 6458;
6465 -> 6464;
6465 -> 6455;
6466 -> 6456;
6466 -> 6465;
6466 -> 6455;
6467 -> 6153;
6467 -> 6466;
6468 -> 6153;
6468 -> 6317;
6468 -> 6466;
6469 -> 6445;
6470 -> 6449;
6470 -> 6317;
6470 -> 6469;
6470 -> 6445;
6471 -> 6152;
6472 -> 6153;
6472 -> 6152;
6473 -> 6153;
6473 -> 6152;
6474 -> 6152;
6475 -> 6473;
6475 -> 6474;
6475 -> 6152;
6476 -> 6472;
6476 -> 6317;
6477 -> 6473;
6477 -> 6317;
6478 -> 6476;
6478 -> 6317;
6479 -> 6477;
6479 -> 6317;
6480 -> 6317;
6481 -> 6317;
6482 -> 6317;
6483 -> 6479;
6483 -> 6482;
6483 -> 6317;
6484 -> 6317;
6485 -> 6317;
6485 -> 6484;
6486 -> 6317;
6486 -> 0;
6487 -> 6317;
6488 -> 6481;
6488 -> 6487;
6489 -> 6488;
6490 -> 6488;
6491 -> 6317;
6491 -> 6488;
6492 -> 6488;
6493 -> 6491;
6493 -> 6492;
6494 -> 6492;
6495 -> 6493;
6495 -> 6494;
6496 -> 6494;
6497 -> 6495;
6497 -> 6496;
6497 -> 6494;
6498 -> 6494;
6499 -> 6498;
6499 -> 6492;
6500 -> 6317;
6500 -> 6499;
6501 -> 6317;
6502 -> 6153;
6502 -> 6152;
6503 -> 6153;
6503 -> 6152;
6504 -> 6153;
6504 -> 6152;
6505 -> 6153;
6505 -> 6152;
6506 -> 6152;
6507 -> 6503;
6507 -> 6506;
6507 -> 6152;
6508 -> 6153;
6508 -> 6317;
6508 -> 6152;
6509 -> 6153;
6509 -> 6317;
6509 -> 6508;
6510 -> 6153;
6510 -> 6317;
6510 -> 0;
6510 -> 6152;
6511 -> 6153;
6511 -> 6317;
6511 -> 6152;
6512 -> 6505;
6512 -> 6511;
6513 -> 6153;
6513 -> 6317;
6513 -> 6152;
6514 -> 6153;
6514 -> 6152;
6515 -> 6153;
6515 -> 6317;
6515 -> 6152;
6516 -> 6153;
6516 -> 6152;
6517 -> 6152;
6518 -> 6153;
6518 -> 6517;
6518 -> 6152;
6519 -> 6152;
6520 -> 6519;
6520 -> 6152;
6521 -> 6153;
6521 -> 6152;
6522 -> 6152;
6523 -> 6152;
6524 -> 6317;
6524 -> 6523;
6525 -> 6524;
6525 -> 6317;
6525 -> 6523;
6526 -> 6524;
6526 -> 6317;
6526 -> 6525;
6527 -> 6526;
6527 -> 6525;
6528 -> 6525;
6529 -> 6527;
6529 -> 6528;
6530 -> 6529;
6530 -> 6317;
6530 -> 0;
6530 -> 6528;
6531 -> 6529;
6531 -> 6317;
6531 -> 6528;
6532 -> 6528;
6533 -> 6531;
6533 -> 6532;
6534 -> 6532;
6535 -> 6533;
6535 -> 6534;
6535 -> 6532;
6536 -> 6535;
6537 -> 6533;
6537 -> 6317;
6537 -> 6535;
6538 -> 6532;
6539 -> 6538;
6539 -> 6528;
6540 -> 6530;
6540 -> 6539;
6540 -> 6528;
6541 -> 6523;
6542 -> 6541;
6542 -> 6152;
6543 -> 6152;
6544 -> 6317;
6544 -> 6543;
6545 -> 6544;
6545 -> 6317;
6545 -> 6543;
6546 -> 6544;
6546 -> 6317;
6546 -> 6545;
6547 -> 6546;
6547 -> 6545;
6548 -> 6545;
6549 -> 6547;
6549 -> 6548;
6550 -> 6549;
6550 -> 6317;
6550 -> 0;
6550 -> 6548;
6551 -> 6549;
6551 -> 6317;
6551 -> 6548;
6552 -> 6548;
6553 -> 6551;
6553 -> 6552;
6554 -> 6552;
6555 -> 6553;
6555 -> 6554;
6555 -> 6552;
6556 -> 6555;
6557 -> 6553;
6557 -> 6317;
6557 -> 6555;
6558 -> 6552;
6559 -> 6558;
6559 -> 6548;
6560 -> 6550;
6560 -> 6559;
6560 -> 6548;
6561 -> 6543;
6562 -> 6152;
6563 -> 6441;
6563 -> 6445;
6564 -> 6441;
6564 -> 6445;
6565 -> 6441;
6565 -> 6317;
6565 -> 6445;
6566 -> 6565;
6566 -> 6317;
6566 -> 6445;
6567 -> 6441;
6567 -> 6317;
6567 -> 6445;
6568 -> 6441;
6568 -> 6567;
6568 -> 6445;
6569 -> 6448;
6569 -> 6568;
6570 -> 6441;
6570 -> 6567;
6570 -> 6569;
6571 -> 6565;
6571 -> 6569;
6572 -> 6569;
6573 -> 6571;
6573 -> 6572;
6574 -> 6572;
6575 -> 6573;
6575 -> 6574;
6575 -> 6572;
6576 -> 6575;
6577 -> 6573;
6577 -> 6567;
6577 -> 6575;
6578 -> 6572;
6579 -> 6578;
6579 -> 6569;
6580 -> 6570;
6580 -> 6579;
6580 -> 6569;
6581 -> 6441;
6581 -> 6580;
6582 -> 6441;
6582 -> 6567;
6582 -> 6580;
6583 -> 6449;
6583 -> 6567;
6583 -> 6469;
6583 -> 6445;
6584 -> 6153;
6584 -> 6567;
6584 -> 6152;
6585 -> 6153;
6585 -> 6567;
6585 -> 6584;
6586 -> 6153;
6586 -> 6567;
6586 -> 0;
6586 -> 6152;
6587 -> 6153;
6587 -> 6567;
6587 -> 6152;
6588 -> 6505;
6588 -> 6587;
6589 -> 6153;
6589 -> 6567;
6589 -> 6152;
6590 -> 6153;
6590 -> 6567;
6590 -> 6152;
6591 -> 6472;
6591 -> 6567;
6592 -> 6473;
6592 -> 6567;
6593 -> 6591;
6593 -> 6567;
6594 -> 6592;
6594 -> 6567;
6595 -> 6567;
6596 -> 6567;
6597 -> 6567;
6598 -> 6594;
6598 -> 6597;
6598 -> 6567;
6599 -> 6567;
6600 -> 6567;
6600 -> 6599;
6601 -> 6567;
6601 -> 0;
6602 -> 6567;
6603 -> 6596;
6603 -> 6602;
6604 -> 6603;
6605 -> 6603;
6606 -> 6567;
6606 -> 6603;
6607 -> 6603;
6608 -> 6606;
6608 -> 6607;
6609 -> 6607;
6610 -> 6608;
6610 -> 6609;
6611 -> 6609;
6612 -> 6610;
6612 -> 6611;
6612 -> 6609;
6613 -> 6609;
6614 -> 6613;
6614 -> 6607;
6615 -> 6567;
6615 -> 6614;
6616 -> 6567;
6617 -> 6441;
6617 -> 6567;
6617 -> 6445;
6618 -> 6617;
6618 -> 6567;
6618 -> 6445;
6619 -> 6617;
6619 -> 6569;
6620 -> 6619;
6620 -> 6572;
6621 -> 6620;
6621 -> 6574;
6621 -> 6572;
6622 -> 6621;
6623 -> 6620;
6623 -> 6567;
6623 -> 6621;
6624 -> 6612;
6625 -> 6610;
6625 -> 6567;
6625 -> 6612;
6626 -> 6567;
6626 -> 6523;
6627 -> 6626;
6627 -> 6567;
6627 -> 6523;
6628 -> 6626;
6628 -> 6567;
6628 -> 6627;
6629 -> 6628;
6629 -> 6627;
6630 -> 6627;
6631 -> 6629;
6631 -> 6630;
6632 -> 6631;
6632 -> 6567;
6632 -> 0;
6632 -> 6630;
6633 -> 6631;
6633 -> 6567;
6633 -> 6630;
6634 -> 6630;
6635 -> 6633;
6635 -> 6634;
6636 -> 6634;
6637 -> 6635;
6637 -> 6636;
6637 -> 6634;
6638 -> 6637;
6639 -> 6635;
6639 -> 6567;
6639 -> 6637;
6640 -> 6634;
6641 -> 6640;
6641 -> 6630;
6642 -> 6632;
6642 -> 6641;
6642 -> 6630;
6643 -> 6567;
6643 -> 6543;
6644 -> 6643;
6644 -> 6567;
6644 -> 6543;
6645 -> 6643;
6645 -> 6567;
6645 -> 6644;
6646 -> 6645;
6646 -> 6644;
6647 -> 6644;
6648 -> 6646;
6648 -> 6647;
6649 -> 6648;
6649 -> 6567;
6649 -> 0;
6649 -> 6647;
6650 -> 6648;
6650 -> 6567;
6650 -> 6647;
6651 -> 6647;
6652 -> 6650;
6652 -> 6651;
6653 -> 6651;
6654 -> 6652;
6654 -> 6653;
6654 -> 6651;
6655 -> 6654;
6656 -> 6652;
6656 -> 6567;
6656 -> 6654;
6657 -> 6651;
6658 -> 6657;
6658 -> 6647;
6659 -> 6649;
6659 -> 6658;
6659 -> 6647;
6660 -> 6152;
6661 -> 6333;
6661 -> 6567;
6662 -> 6661;
6662 -> 6567;
6663 -> 6567;
6664 -> 6153;
6664 -> 6567;
6664 -> 6152;
6665 -> 6363;
6665 -> 6664;
6665 -> 6567;
6665 -> 6152;
6666 -> 6152;
6667 -> 6371;
6667 -> 6567;
6667 -> 6152;
6668 -> 6667;
6668 -> 6373;
6669 -> 6376;
6669 -> 6567;
6669 -> 6152;
6670 -> 6669;
6670 -> 6378;
6671 -> 6670;
6671 -> 6378;
6672 -> 6671;
6672 -> 6382;
6673 -> 6567;
6673 -> 6384;
6674 -> 6673;
6674 -> 6382;
6675 -> 6567;
6675 -> 6382;
6676 -> 6675;
6677 -> 6674;
6677 -> 6676;
6677 -> 6675;
6678 -> 6677;
6679 -> 6153;
6679 -> 6567;
6679 -> 6152;
6680 -> 6412;
6680 -> 6567;
6680 -> 6411;
6681 -> 6412;
6681 -> 6567;
6681 -> 6411;
6682 -> 6681;
6682 -> 6410;
6683 -> 6567;
6683 -> 6152;
6684 -> 6567;
6684 -> 6423;
6685 -> 6684;
6685 -> 6422;
6686 -> 6567;
6686 -> 6152;
6687 -> 6686;
6687 -> 6419;
6687 -> 6567;
6687 -> 6152;
6688 -> 6153;
6688 -> 6567;
6689 -> 6588;
6690 -> 6588;
6691 -> 6153;
6691 -> 6567;
6691 -> 6588;
6692 -> 6588;
6693 -> 6691;
6693 -> 6692;
6694 -> 6692;
6695 -> 6693;
6695 -> 6694;
6696 -> 6694;
6697 -> 6695;
6697 -> 6696;
6697 -> 6694;
6698 -> 6694;
6699 -> 6698;
6699 -> 6692;
6700 -> 6153;
6700 -> 6567;
6700 -> 6699;
6701 -> 6153;
6701 -> 6152;
6702 -> 6153;
6702 -> 6567;
6702 -> 6152;
6703 -> 6567;
6704 -> 6567;
6704 -> 6703;
6705 -> 6703;
6706 -> 6705;
6706 -> 6704;
6706 -> 6567;
6706 -> 6703;
6707 -> 6567;
6708 -> 6567;
6709 -> 6567;
6710 -> 6567;
6710 -> 6709;
6711 -> 6567;
6711 -> 6709;
6712 -> 6708;
6712 -> 6709;
6713 -> 6709;
6714 -> 6711;
6714 -> 6713;
6714 -> 6709;
6715 -> 6567;
6716 -> 6567;
6716 -> 6715;
6717 -> 6567;
6717 -> 6715;
6718 -> 6708;
6718 -> 6715;
6719 -> 6715;
6720 -> 6717;
6720 -> 6719;
6720 -> 6715;
6721 -> 6567;
6722 -> 6567;
6723 -> 6153;
6723 -> 6152;
6724 -> 0;
6724 -> 6152;
6725 -> 6567;
6725 -> 0;
6725 -> 6435;
6726 -> 6567;
6727 -> 6726;
6727 -> 6567;
6728 -> 6567;
6728 -> 6435;
6729 -> 6322;
6729 -> 6567;
6729 -> 6321;
6730 -> 6322;
6730 -> 6567;
6730 -> 6321;
6731 -> 6730;
6731 -> 6320;
6732 -> 5003;
6732 -> 5001;
6733 -> 6732;
6733 -> 6567;
6733 -> 5001;
6734 -> 4997;
6734 -> 1;
6735 -> 1;
6736 -> 1;
6737 -> 6734;
6737 -> 6736;
6738 -> 6735;
6738 -> 6736;
6739 -> 10;
6739 -> 6736;
6740 -> 6737;
6740 -> 6736;
6741 -> 6740;
6741 -> 4994;
6741 -> 6733;
6741 -> 6736;
6742 -> 6741;
6742 -> 6736;
6743 -> 6738;
6743 -> 6736;
6744 -> 0;
6744 -> 6736;
6745 -> 6742;
6745 -> 6744;
6745 -> 6736;
6746 -> 6743;
6746 -> 6745;
6746 -> 6736;
6747 -> 4997;
6747 -> 1;
6748 -> 1;
6749 -> 1;
6750 -> 6747;
6750 -> 6749;
6751 -> 6748;
6751 -> 6749;
6752 -> 10;
6752 -> 6749;
6753 -> 6750;
6753 -> 6749;
6754 -> 6753;
6754 -> 4994;
6754 -> 6741;
6754 -> 6749;
6755 -> 6754;
6755 -> 6749;
6756 -> 6751;
6756 -> 6749;
6757 -> 0;
6757 -> 6749;
6758 -> 6755;
6758 -> 6757;
6758 -> 6749;
6759 -> 6756;
6759 -> 6758;
6759 -> 6749;
6760 -> 6733;
6760 -> 1;
6761 -> 1;
6762 -> 1;
6763 -> 6760;
6763 -> 6762;
6764 -> 6761;
6764 -> 6762;
6765 -> 10;
6765 -> 6762;
6766 -> 6763;
6766 -> 6762;
6767 -> 6766;
6767 -> 6733;
6767 -> 6754;
6767 -> 6762;
6768 -> 6767;
6768 -> 6762;
6769 -> 6764;
6769 -> 6762;
6770 -> 0;
6770 -> 6762;
6771 -> 6768;
6771 -> 6770;
6771 -> 6762;
6772 -> 6769;
6772 -> 6771;
6772 -> 6762;
6773 -> 4997;
6773 -> 1;
6774 -> 1;
6775 -> 1;
6776 -> 6773;
6776 -> 6775;
6777 -> 6773;
6777 -> 6775;
6778 -> 6774;
6778 -> 6775;
6779 -> 6774;
6779 -> 6775;
6780 -> 6776;
6780 -> 6775;
6781 -> 6780;
6781 -> 4994;
6781 -> 6767;
6781 -> 6775;
6782 -> 6777;
6782 -> 6775;
6783 -> 6782;
6783 -> 4994;
6783 -> 6781;
6783 -> 6775;
6784 -> 6778;
6784 -> 6775;
6785 -> 6781;
6785 -> 6783;
6785 -> 6775;
6786 -> 6784;
6786 -> 6785;
6786 -> 6775;
6787 -> 6779;
6787 -> 6775;
6788 -> 6781;
6788 -> 6783;
6788 -> 6787;
6789 -> 6783;
6789 -> 6787;
6790 -> 4997;
6790 -> 1;
6791 -> 6733;
6791 -> 1;
6792 -> 1;
6793 -> 1;
6794 -> 6790;
6794 -> 6793;
6795 -> 6791;
6795 -> 6793;
6796 -> 6792;
6796 -> 6793;
6797 -> 6792;
6797 -> 6793;
6798 -> 6794;
6798 -> 6793;
6799 -> 6798;
6799 -> 4994;
6799 -> 6783;
6799 -> 6793;
6800 -> 6795;
6800 -> 6793;
6801 -> 6796;
6801 -> 6793;
6802 -> 6799;
6802 -> 6793;
6803 -> 6801;
6803 -> 6802;
6803 -> 6793;
6804 -> 6797;
6804 -> 6793;
6805 -> 6799;
6805 -> 6804;
6806 -> 6799;
6806 -> 6804;
}