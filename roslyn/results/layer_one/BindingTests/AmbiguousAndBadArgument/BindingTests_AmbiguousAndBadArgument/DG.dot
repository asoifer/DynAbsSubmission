digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 666976"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 666977"];
3 [label="param BindingTests(this) 666978"];
4 [label="'C' 666979"];
5 [label="DefaultTypeName = 'C' 666980"];
6 [label="'M' 666981"];
7 [label="DefaultMethodName = 'M' 666982"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 666983"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 666984"];
10 [label="param CompilingTestBase(this) 666985"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 666986"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 666987"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 666988"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 666989"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 666990"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 666991"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 666992"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 666993"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 666994"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 666995"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 666996"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 666997"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 666998"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 666999"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 667000"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 667001"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 667002"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 667003"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 667004"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 667005"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 667006"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 667007"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 667008"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 667009"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 667010"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 667011"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 667012"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 667013"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 667014"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 667015"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 667016"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 667017"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 667018"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 667019"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 667020"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 667021"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 667022"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 667023"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 667024"];
50 [label="LazyThreadSafetyMode.PublicationOnly 667025"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 667026"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 667027"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 667028"];
54 [label="LazyThreadSafetyMode.PublicationOnly 667029"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 667030"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 667031"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 667032"];
58 [label="'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' 667033"];
59 [label="new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51') 667034"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 667035"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 667036"];
62 [label="LazyThreadSafetyMode.PublicationOnly 667037"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 667038"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 667039"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 667040"];
66 [label="LazyThreadSafetyMode.PublicationOnly 667041"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 667042"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 667043"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 667044"];
70 [label="LazyThreadSafetyMode.PublicationOnly 667045"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 667046"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 667047"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 667048"];
74 [label="LazyThreadSafetyMode.PublicationOnly 667049"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667050"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667051"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 667052"];
78 [label="LazyThreadSafetyMode.PublicationOnly 667053"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667054"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667055"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 667056"];
82 [label="LazyThreadSafetyMode.PublicationOnly 667057"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667058"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667059"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 667060"];
86 [label="LazyThreadSafetyMode.PublicationOnly 667061"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667062"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667063"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 667064"];
90 [label="LazyThreadSafetyMode.PublicationOnly 667065"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667066"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667067"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 667068"];
94 [label="LazyThreadSafetyMode.PublicationOnly 667069"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667070"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667071"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 667072"];
98 [label="LazyThreadSafetyMode.PublicationOnly 667073"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667074"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667075"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 667076"];
102 [label="LazyThreadSafetyMode.PublicationOnly 667077"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 667078"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 667079"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 667080"];
106 [label="LazyThreadSafetyMode.PublicationOnly 667081"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 667082"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 667083"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 667084"];
110 [label="LazyThreadSafetyMode.PublicationOnly 667085"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667086"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667087"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 667088"];
114 [label="LazyThreadSafetyMode.PublicationOnly 667089"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667090"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667091"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 667092"];
118 [label="LazyThreadSafetyMode.PublicationOnly 667093"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667094"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667095"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 667096"];
122 [label="LazyThreadSafetyMode.PublicationOnly 667097"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667098"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667099"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 667100"];
126 [label="LazyThreadSafetyMode.PublicationOnly 667101"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 667102"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 667103"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 667104"];
130 [label="LazyThreadSafetyMode.PublicationOnly 667105"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667106"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667107"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 667108"];
134 [label="LazyThreadSafetyMode.PublicationOnly 667109"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667110"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667111"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 667112"];
138 [label="LazyThreadSafetyMode.PublicationOnly 667113"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667114"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667115"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 667116"];
142 [label="LazyThreadSafetyMode.PublicationOnly 667117"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667118"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667119"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 667120"];
146 [label="LazyThreadSafetyMode.PublicationOnly 667121"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667122"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667123"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 667124"];
150 [label="LazyThreadSafetyMode.PublicationOnly 667125"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667126"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667127"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 667128"];
154 [label="LazyThreadSafetyMode.PublicationOnly 667129"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667130"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667131"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 667132"];
158 [label="LazyThreadSafetyMode.PublicationOnly 667133"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667134"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667135"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 667136"];
162 [label="LazyThreadSafetyMode.PublicationOnly 667137"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667138"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667139"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 667140"];
166 [label="LazyThreadSafetyMode.PublicationOnly 667141"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667142"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667143"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 667144"];
170 [label="LazyThreadSafetyMode.PublicationOnly 667145"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667146"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667147"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 667148"];
174 [label="LazyThreadSafetyMode.PublicationOnly 667149"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667150"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667151"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 667152"];
178 [label="LazyThreadSafetyMode.PublicationOnly 667153"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667154"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 667155"];
181 [label="@'R:\\Invalid.dll' 667156"];
182 [label="fullPath: @'R:\\Invalid.dll' 667157"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 667158"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 667159"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 667160"];
186 [label="MscorlibRef_v4_0_30316_17626 667161"];
187 [label="Net451.mscorlib 667162"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 667163"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 667164"];
190 [label="'/*<bind>*/' 667165"];
191 [label="StartString = '/*<bind>*/' 667166"];
192 [label="'/*</bind>*/' 667167"];
193 [label="EndString = '/*</bind>*/' 667168"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 667169"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 667170"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 667171"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 667172"];
198 [label="param CSharpTestBase(this) 667173"];
199 [label="param CommonTestBase(this) 667174"];
200 [label="param TestBase(this) 667175"];
201 [label="_temp 667176"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 667177"];
203 [label="param AmbiguousAndBadArgument(this) 667178"];
204 [label="var source =\n@'class C\n{\n    static void F(int x, double y) { }\n    static void F(double x, int y) { }\n    static void M()\n    {\n        F(1, 2);\n        F(1.0, 2.0);\n    }\n}'; 667179"];
205 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)); 667180"];
206 [label="source 667181"];
207 [label="param operator(string source) 667182"];
208 [label="source 667183"];
209 [label="new CSharpTestSource(source) 667184"];
210 [label="param CSharpTestSource(object value) 667185"];
211 [label="param CSharpTestSource(this) 667186"];
212 [label="Value 667187"];
213 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)); 667188"];
214 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)); 667189"];
215 [label="CreateCompilation(source) 667190"];
216 [label="param CreateCompilation(CSharpTestSource source) 667191"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 667192"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 667193"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 667194"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 667195"];
221 [label="param CreateCompilation(string assemblyName = '') 667196"];
222 [label="param CreateCompilation(string sourceFileName = '') 667197"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 667198"];
224 [label="source 667199"];
225 [label="targetFramework 667200"];
226 [label="references 667201"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 667202"];
228 [label="param GetReferences(TargetFramework tf) 667203"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 667204"];
230 [label="var references = GetReferences(tf); 667205"];
231 [label="GetReferences(tf) 667206"];
232 [label="param GetReferences(TargetFramework targetFramework) 667207"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 667208"];
234 [label="StandardReferences 667209"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 667210"];
236 [label="NetStandard20References 667211"];
237 [label="ImmutableArray.Create<MetadataReference>(NetStandard20.netstandard, NetStandard20.mscorlib, NetStandard20.SystemRuntime, NetStandard20.SystemCore, NetStandard20.SystemDynamicRuntime, NetStandard20.SystemLinq, NetStandard20.SystemLinqExpressions) 667212"];
238 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 667213"];
239 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 667214"];
240 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 667215"];
241 [label="return references; 667216"];
242 [label="options 667217"];
243 [label="parseOptions 667218"];
244 [label="assemblyName 667219"];
245 [label="sourceFileName 667220"];
246 [label="skipUsesIsNullable 667221"];
247 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 667222"];
248 [label="param CreateEmptyCompilation(CSharpTestSource source) 667223"];
249 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 667224"];
250 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 667225"];
251 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 667226"];
252 [label="param CreateEmptyCompilation(string assemblyName = '') 667227"];
253 [label="param CreateEmptyCompilation(string sourceFileName = '') 667228"];
254 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 667229"];
255 [label="source 667230"];
256 [label="references 667231"];
257 [label="options 667232"];
258 [label="parseOptions 667233"];
259 [label="assemblyName 667234"];
260 [label="sourceFileName 667235"];
261 [label="skipUsesIsNullable 667236"];
262 [label="null 667237"];
263 [label="experimentalFeature: null 667238"];
264 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 667239"];
265 [label="param CreateCompilationCore(CSharpTestSource source) 667240"];
266 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 667241"];
267 [label="param CreateCompilationCore(CSharpCompilationOptions options) 667242"];
268 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 667243"];
269 [label="param CreateCompilationCore(string assemblyName) 667244"];
270 [label="param CreateCompilationCore(string sourceFileName) 667245"];
271 [label="param CreateCompilationCore(bool skipUsesIsNullable) 667246"];
272 [label="param CreateCompilationCore(MessageID? experimentalFeature) 667247"];
273 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 667248"];
274 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 667249"];
275 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 667250"];
276 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 667251"];
277 [label="param GetSyntaxTrees(string sourceFileName = '') 667252"];
278 [label="param GetSyntaxTrees(this) 667253"];
279 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 667254"];
280 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 667255"];
281 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 667256"];
282 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 667257"];
283 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 667258"];
284 [label="param Parse(string text) 667259"];
285 [label="param Parse(string filename = '') 667260"];
286 [label="param Parse(CSharpParseOptions options = null) 667261"];
287 [label="param Parse(Encoding encoding = null) 667262"];
288 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 667263"];
289 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 667264"];
290 [label="kind: SourceCodeKind.Regular 667265"];
291 [label="documentationMode: DocumentationMode.Parse 667266"];
292 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 667267"];
293 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 667268"];
294 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 667269"];
295 [label="SourceCodeKind.Script 667270"];
296 [label="Regular.WithKind(SourceCodeKind.Script) 667271"];
297 [label="Script = Regular.WithKind(SourceCodeKind.Script) 667272"];
298 [label="LanguageVersion.CSharp6 667273"];
299 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 667274"];
300 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 667275"];
301 [label="LanguageVersion.CSharp7 667276"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 667277"];
303 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 667278"];
304 [label="LanguageVersion.CSharp7_1 667279"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 667280"];
306 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 667281"];
307 [label="LanguageVersion.CSharp7_2 667282"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 667283"];
309 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 667284"];
310 [label="LanguageVersion.CSharp7_3 667285"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 667286"];
312 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 667287"];
313 [label="LanguageVersion.Default 667288"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 667289"];
315 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 667290"];
316 [label="LanguageVersion.Preview 667291"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 667292"];
318 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 667293"];
319 [label="LanguageVersion.CSharp8 667294"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 667295"];
321 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 667296"];
322 [label="LanguageVersion.CSharp9 667297"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 667298"];
324 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 667299"];
325 [label="DocumentationMode.Diagnose 667300"];
326 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 667301"];
327 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 667302"];
328 [label="Regular 667303"];
329 [label="'UseLegacyStrongNameProvider' 667304"];
330 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 667305"];
331 [label="param WithFeature(this CSharpParseOptions options) 667306"];
332 [label="param WithFeature(string feature) 667307"];
333 [label="param WithFeature(string value = 'true') 667308"];
334 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 667309"];
335 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 667310"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 667311"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 667312"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 667313"];
339 [label="new[] { new KeyValuePair<string, string>(feature, value) } 667314"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 667315"];
341 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 667316"];
342 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 667317"];
343 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 667318"];
344 [label="1 667319"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 667320"];
346 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 667321"];
347 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 667322"];
348 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 667323"];
349 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 667324"];
350 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 667325"];
351 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 667326"];
352 [label="LanguageVersion.CSharp8 667327"];
353 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 667328"];
354 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 667329"];
355 [label="RegularWithExtendedPartialMethods = RegularPreview 667330"];
356 [label="new SmallDictionary<string, string> { } 667331"];
357 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 667332"];
358 [label="kind: SourceCodeKind.Regular 667333"];
359 [label="documentationMode: DocumentationMode.None 667334"];
360 [label="languageVersion: LanguageVersion.Preview 667335"];
361 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 667336"];
362 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 667337"];
363 [label="s_experimentalFeatures 667338"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 667339"];
365 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 667340"];
366 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 667341"];
367 [label="'testV7SwitchBinder' 667342"];
368 [label="'true' 667343"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 667344"];
370 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 667345"];
371 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 667346"];
372 [label="RegularWithoutRecursivePatterns = Regular7_3 667347"];
373 [label="RegularWithRecursivePatterns = Regular8 667348"];
374 [label="RegularWithoutPatternCombinators = Regular8 667349"];
375 [label="RegularWithPatternCombinators = RegularPreview 667350"];
376 [label="OutputKind.DynamicallyLinkedLibrary 667351"];
377 [label="OptimizationLevel.Release 667352"];
378 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 667353"];
379 [label="param CreateTestOptions(OutputKind outputKind) 667354"];
380 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 667355"];
381 [label="param CreateTestOptions(bool allowUnsafe = false) 667356"];
382 [label="outputKind 667357"];
383 [label="optimizationLevel: optimizationLevel 667358"];
384 [label="warningLevel: Diagnostic.MaxWarningLevel 667359"];
385 [label="allowUnsafe: allowUnsafe 667360"];
386 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667361"];
387 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667362"];
388 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 667363"];
389 [label="OutputKind.ConsoleApplication 667364"];
390 [label="OptimizationLevel.Release 667365"];
391 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 667366"];
392 [label="param CreateTestOptions(OutputKind outputKind) 667367"];
393 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 667368"];
394 [label="param CreateTestOptions(bool allowUnsafe = false) 667369"];
395 [label="outputKind 667370"];
396 [label="optimizationLevel: optimizationLevel 667371"];
397 [label="warningLevel: Diagnostic.MaxWarningLevel 667372"];
398 [label="allowUnsafe: allowUnsafe 667373"];
399 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667374"];
400 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667375"];
401 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 667376"];
402 [label="true 667377"];
403 [label="ReleaseDll.WithDebugPlusMode(true) 667378"];
404 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 667379"];
405 [label="true 667380"];
406 [label="ReleaseExe.WithDebugPlusMode(true) 667381"];
407 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 667382"];
408 [label="OutputKind.DynamicallyLinkedLibrary 667383"];
409 [label="OptimizationLevel.Debug 667384"];
410 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 667385"];
411 [label="param CreateTestOptions(OutputKind outputKind) 667386"];
412 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 667387"];
413 [label="param CreateTestOptions(bool allowUnsafe = false) 667388"];
414 [label="outputKind 667389"];
415 [label="optimizationLevel: optimizationLevel 667390"];
416 [label="warningLevel: Diagnostic.MaxWarningLevel 667391"];
417 [label="allowUnsafe: allowUnsafe 667392"];
418 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667393"];
419 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667394"];
420 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 667395"];
421 [label="OutputKind.ConsoleApplication 667396"];
422 [label="OptimizationLevel.Debug 667397"];
423 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 667398"];
424 [label="param CreateTestOptions(OutputKind outputKind) 667399"];
425 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 667400"];
426 [label="param CreateTestOptions(bool allowUnsafe = false) 667401"];
427 [label="outputKind 667402"];
428 [label="optimizationLevel: optimizationLevel 667403"];
429 [label="warningLevel: Diagnostic.MaxWarningLevel 667404"];
430 [label="allowUnsafe: allowUnsafe 667405"];
431 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667406"];
432 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667407"];
433 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 667408"];
434 [label="OutputKind.WindowsRuntimeMetadata 667409"];
435 [label="OptimizationLevel.Release 667410"];
436 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 667411"];
437 [label="param CreateTestOptions(OutputKind outputKind) 667412"];
438 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 667413"];
439 [label="param CreateTestOptions(bool allowUnsafe = false) 667414"];
440 [label="outputKind 667415"];
441 [label="optimizationLevel: optimizationLevel 667416"];
442 [label="warningLevel: Diagnostic.MaxWarningLevel 667417"];
443 [label="allowUnsafe: allowUnsafe 667418"];
444 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667419"];
445 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667420"];
446 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 667421"];
447 [label="OutputKind.WindowsRuntimeMetadata 667422"];
448 [label="OptimizationLevel.Debug 667423"];
449 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 667424"];
450 [label="param CreateTestOptions(OutputKind outputKind) 667425"];
451 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 667426"];
452 [label="param CreateTestOptions(bool allowUnsafe = false) 667427"];
453 [label="outputKind 667428"];
454 [label="optimizationLevel: optimizationLevel 667429"];
455 [label="warningLevel: Diagnostic.MaxWarningLevel 667430"];
456 [label="allowUnsafe: allowUnsafe 667431"];
457 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667432"];
458 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667433"];
459 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 667434"];
460 [label="OutputKind.NetModule 667435"];
461 [label="OptimizationLevel.Release 667436"];
462 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 667437"];
463 [label="param CreateTestOptions(OutputKind outputKind) 667438"];
464 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 667439"];
465 [label="param CreateTestOptions(bool allowUnsafe = false) 667440"];
466 [label="outputKind 667441"];
467 [label="optimizationLevel: optimizationLevel 667442"];
468 [label="warningLevel: Diagnostic.MaxWarningLevel 667443"];
469 [label="allowUnsafe: allowUnsafe 667444"];
470 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667445"];
471 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667446"];
472 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 667447"];
473 [label="OutputKind.NetModule 667448"];
474 [label="OptimizationLevel.Debug 667449"];
475 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 667450"];
476 [label="param CreateTestOptions(OutputKind outputKind) 667451"];
477 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 667452"];
478 [label="param CreateTestOptions(bool allowUnsafe = false) 667453"];
479 [label="outputKind 667454"];
480 [label="optimizationLevel: optimizationLevel 667455"];
481 [label="warningLevel: Diagnostic.MaxWarningLevel 667456"];
482 [label="allowUnsafe: allowUnsafe 667457"];
483 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667458"];
484 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 667459"];
485 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 667460"];
486 [label="true 667461"];
487 [label="ReleaseDll.WithAllowUnsafe(true) 667462"];
488 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 667463"];
489 [label="true 667464"];
490 [label="ReleaseExe.WithAllowUnsafe(true) 667465"];
491 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 667466"];
492 [label="true 667467"];
493 [label="DebugDll.WithAllowUnsafe(true) 667468"];
494 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 667469"];
495 [label="true 667470"];
496 [label="DebugExe.WithAllowUnsafe(true) 667471"];
497 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 667472"];
498 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 667473"];
499 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 667474"];
500 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 667475"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 667476"];
502 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 667477"];
503 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 667478"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 667479"];
505 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 667480"];
506 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 667481"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 667482"];
508 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 667483"];
509 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 667484"];
510 [label="DebugInformationFormat.Pdb 667485"];
511 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 667486"];
512 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 667487"];
513 [label="options = TestOptions.Regular; 667488"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 667489"];
515 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 667490"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 667491"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 667492"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 667493"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 667494"];
520 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 667495"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 667496"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 667497"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 667498"];
524 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 667499"];
525 [label="param CheckSerializable(SyntaxTree tree) 667500"];
526 [label="var stream = new MemoryStream(); 667501"];
527 [label="var root = tree.GetRoot(); 667502"];
528 [label="var root = tree.GetRoot(); 667503"];
529 [label="root.SerializeTo(stream); 667504"];
530 [label="root.SerializeTo(stream); 667505"];
531 [label="root.SerializeTo(stream); 667506"];
532 [label="stream.Position = 0; 667507"];
533 [label="stream.Position 667508"];
534 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 667509"];
535 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 667510"];
536 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 667511"];
537 [label="return tree; 667512"];
538 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 667513"];
539 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 667514"];
540 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 667515"];
541 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 667516"];
542 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 667517"];
543 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 667518"];
544 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 667519"];
545 [label="hasTopLevelStatements 667520"];
546 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 667521"];
547 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 667522"];
548 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 667523"];
549 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 667524"];
550 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 667525"];
551 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 667526"];
552 [label="param ValidateIOperations(Func<Compilation> createCompilation) 667527"];
553 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 667528"];
554 [label="return; 667529"];
555 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 667530"];
556 [label="var compilation = createCompilationLambda(); 667531"];
557 [label="var compilation = createCompilationLambda(); 667532"];
558 [label="return Guid.NewGuid().ToString('D'); 667533"];
559 [label="var compilation = createCompilationLambda(); 667534"];
560 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 667535"];
561 [label="IsNullableEnabled(compilation) 667536"];
562 [label="param IsNullableEnabled(CSharpCompilation compilation) 667537"];
563 [label="var trees = compilation.SyntaxTrees; 667538"];
564 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 667539"];
565 [label="var options = (CSharpParseOptions)trees[0].Options; 667540"];
566 [label="var options = (CSharpParseOptions)trees[0].Options; 667541"];
567 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 667542"];
568 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 667543"];
569 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 667544"];
570 [label="return compilation; 667545"];
571 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)); 667546"];
572 [label="Diagnostic(ErrorCode.ERR_AmbigCall, 'F') 667547"];
573 [label="param Diagnostic(object code) 667548"];
574 [label="param Diagnostic(string squiggledText = null) 667549"];
575 [label="param Diagnostic(object[] arguments = null) 667550"];
576 [label="param Diagnostic(LinePosition? startLocation = null) 667551"];
577 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 667552"];
578 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 667553"];
579 [label="param Diagnostic(bool isSuppressed = false) 667554"];
580 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667555"];
581 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667556"];
582 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667557"];
583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667558"];
584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667559"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667560"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667561"];
587 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 667562"];
588 [label="param Diagnostic(object code) 667563"];
589 [label="param Diagnostic(string squiggledText = null) 667564"];
590 [label="param Diagnostic(object[] arguments = null) 667565"];
591 [label="param Diagnostic(LinePosition? startLocation = null) 667566"];
592 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 667567"];
593 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 667568"];
594 [label="param Diagnostic(bool isSuppressed = false) 667569"];
595 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 667570"];
596 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667571"];
597 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667572"];
598 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667573"];
599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667574"];
600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667575"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667576"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667577"];
603 [label="{ } 667578"];
604 [label="None = { } 667579"];
605 [label="null 667580"];
606 [label="Any = null 667581"];
607 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667582"];
608 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 667583"];
609 [label="param DiagnosticDescription(object code) 667584"];
610 [label="param DiagnosticDescription(bool isWarningAsError) 667585"];
611 [label="param DiagnosticDescription(string squiggledText) 667586"];
612 [label="param DiagnosticDescription(object[] arguments) 667587"];
613 [label="param DiagnosticDescription(LinePosition? startLocation) 667588"];
614 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 667589"];
615 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 667590"];
616 [label="param DiagnosticDescription(Type errorCodeType = null) 667591"];
617 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 667592"];
618 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 667593"];
619 [label="param DiagnosticDescription(bool isSuppressed = false) 667594"];
620 [label="param DiagnosticDescription(this) 667595"];
621 [label="_code 667596"];
622 [label="_isWarningAsError 667597"];
623 [label="_isSuppressed 667598"];
624 [label="_squiggledText 667599"];
625 [label="_arguments 667600"];
626 [label="_startPosition 667601"];
627 [label="_argumentOrderDoesNotMatter 667602"];
628 [label="_errorCodeType 667603"];
629 [label="_ignoreArgumentsWhenComparing 667604"];
630 [label="_defaultSeverityOpt 667605"];
631 [label="_effectiveSeverityOpt 667606"];
632 [label="_syntaxPredicate 667607"];
633 [label="_showPredicate 667608"];
634 [label="_location 667609"];
635 [label="_argumentsAsStrings 667610"];
636 [label="_code 667611"];
637 [label="_isWarningAsError 667612"];
638 [label="_squiggledText 667613"];
639 [label="_arguments 667614"];
640 [label="_startPosition 667615"];
641 [label="_syntaxPredicate 667616"];
642 [label="_argumentOrderDoesNotMatter 667617"];
643 [label="_errorCodeType = errorCodeType ?? code.GetType(); 667618"];
644 [label="_errorCodeType 667619"];
645 [label="_defaultSeverityOpt 667620"];
646 [label="_effectiveSeverityOpt 667621"];
647 [label="_isSuppressed 667622"];
648 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667623"];
649 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)); 667624"];
650 [label="Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)') 667625"];
651 [label="Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)') 667626"];
652 [label="param WithArguments(params object[] arguments) 667627"];
653 [label="param WithArguments(this) 667628"];
654 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667629"];
655 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667630"];
656 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667631"];
657 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667632"];
658 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667633"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667634"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667635"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667636"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667637"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667638"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667639"];
665 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 667640"];
666 [label="param DiagnosticDescription(object code) 667641"];
667 [label="param DiagnosticDescription(bool isWarningAsError) 667642"];
668 [label="param DiagnosticDescription(string squiggledText) 667643"];
669 [label="param DiagnosticDescription(object[] arguments) 667644"];
670 [label="param DiagnosticDescription(LinePosition? startLocation) 667645"];
671 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 667646"];
672 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 667647"];
673 [label="param DiagnosticDescription(Type errorCodeType = null) 667648"];
674 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 667649"];
675 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 667650"];
676 [label="param DiagnosticDescription(bool isSuppressed = false) 667651"];
677 [label="param DiagnosticDescription(this) 667652"];
678 [label="_code 667653"];
679 [label="_isWarningAsError 667654"];
680 [label="_isSuppressed 667655"];
681 [label="_squiggledText 667656"];
682 [label="_arguments 667657"];
683 [label="_startPosition 667658"];
684 [label="_argumentOrderDoesNotMatter 667659"];
685 [label="_errorCodeType 667660"];
686 [label="_ignoreArgumentsWhenComparing 667661"];
687 [label="_defaultSeverityOpt 667662"];
688 [label="_effectiveSeverityOpt 667663"];
689 [label="_syntaxPredicate 667664"];
690 [label="_showPredicate 667665"];
691 [label="_location 667666"];
692 [label="_argumentsAsStrings 667667"];
693 [label="_arguments 667668"];
694 [label="_argumentOrderDoesNotMatter 667669"];
695 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)); 667670"];
696 [label="Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9) 667671"];
697 [label="param WithLocation(int line) 667672"];
698 [label="param WithLocation(int column) 667673"];
699 [label="param WithLocation(this) 667674"];
700 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667675"];
701 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667676"];
702 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667677"];
703 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667678"];
704 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667679"];
705 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667680"];
706 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667681"];
707 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667682"];
708 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667683"];
709 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667684"];
710 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667685"];
711 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667686"];
712 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667687"];
713 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667688"];
714 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 667689"];
715 [label="param DiagnosticDescription(object code) 667690"];
716 [label="param DiagnosticDescription(bool isWarningAsError) 667691"];
717 [label="param DiagnosticDescription(string squiggledText) 667692"];
718 [label="param DiagnosticDescription(object[] arguments) 667693"];
719 [label="param DiagnosticDescription(LinePosition? startLocation) 667694"];
720 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 667695"];
721 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 667696"];
722 [label="param DiagnosticDescription(Type errorCodeType = null) 667697"];
723 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 667698"];
724 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 667699"];
725 [label="param DiagnosticDescription(bool isSuppressed = false) 667700"];
726 [label="param DiagnosticDescription(this) 667701"];
727 [label="_code 667702"];
728 [label="_isWarningAsError 667703"];
729 [label="_isSuppressed 667704"];
730 [label="_squiggledText 667705"];
731 [label="_arguments 667706"];
732 [label="_startPosition 667707"];
733 [label="_argumentOrderDoesNotMatter 667708"];
734 [label="_errorCodeType 667709"];
735 [label="_ignoreArgumentsWhenComparing 667710"];
736 [label="_defaultSeverityOpt 667711"];
737 [label="_effectiveSeverityOpt 667712"];
738 [label="_syntaxPredicate 667713"];
739 [label="_showPredicate 667714"];
740 [label="_location 667715"];
741 [label="_argumentsAsStrings 667716"];
742 [label="_startPosition 667717"];
743 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)); 667718"];
744 [label="Diagnostic(ErrorCode.ERR_BadArgType, '1.0') 667719"];
745 [label="param Diagnostic(object code) 667720"];
746 [label="param Diagnostic(string squiggledText = null) 667721"];
747 [label="param Diagnostic(object[] arguments = null) 667722"];
748 [label="param Diagnostic(LinePosition? startLocation = null) 667723"];
749 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 667724"];
750 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 667725"];
751 [label="param Diagnostic(bool isSuppressed = false) 667726"];
752 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667727"];
753 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667728"];
754 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667729"];
755 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667730"];
756 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667731"];
757 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667732"];
758 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667733"];
759 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 667734"];
760 [label="param Diagnostic(object code) 667735"];
761 [label="param Diagnostic(string squiggledText = null) 667736"];
762 [label="param Diagnostic(object[] arguments = null) 667737"];
763 [label="param Diagnostic(LinePosition? startLocation = null) 667738"];
764 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 667739"];
765 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 667740"];
766 [label="param Diagnostic(bool isSuppressed = false) 667741"];
767 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 667742"];
768 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667743"];
769 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667744"];
770 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667745"];
771 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667746"];
772 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667747"];
773 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667748"];
774 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667749"];
775 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 667750"];
776 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 667751"];
777 [label="param DiagnosticDescription(object code) 667752"];
778 [label="param DiagnosticDescription(bool isWarningAsError) 667753"];
779 [label="param DiagnosticDescription(string squiggledText) 667754"];
780 [label="param DiagnosticDescription(object[] arguments) 667755"];
781 [label="param DiagnosticDescription(LinePosition? startLocation) 667756"];
782 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 667757"];
783 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 667758"];
784 [label="param DiagnosticDescription(Type errorCodeType = null) 667759"];
785 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 667760"];
786 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 667761"];
787 [label="param DiagnosticDescription(bool isSuppressed = false) 667762"];
788 [label="param DiagnosticDescription(this) 667763"];
789 [label="_code 667764"];
790 [label="_isWarningAsError 667765"];
791 [label="_isSuppressed 667766"];
792 [label="_squiggledText 667767"];
793 [label="_arguments 667768"];
794 [label="_startPosition 667769"];
795 [label="_argumentOrderDoesNotMatter 667770"];
796 [label="_errorCodeType 667771"];
797 [label="_ignoreArgumentsWhenComparing 667772"];
798 [label="_defaultSeverityOpt 667773"];
799 [label="_effectiveSeverityOpt 667774"];
800 [label="_syntaxPredicate 667775"];
801 [label="_showPredicate 667776"];
802 [label="_location 667777"];
803 [label="_argumentsAsStrings 667778"];
804 [label="_code 667779"];
805 [label="_isWarningAsError 667780"];
806 [label="_squiggledText 667781"];
807 [label="_arguments 667782"];
808 [label="_startPosition 667783"];
809 [label="_syntaxPredicate 667784"];
810 [label="_argumentOrderDoesNotMatter 667785"];
811 [label="_errorCodeType = errorCodeType ?? code.GetType(); 667786"];
812 [label="_errorCodeType 667787"];
813 [label="_defaultSeverityOpt 667788"];
814 [label="_effectiveSeverityOpt 667789"];
815 [label="_isSuppressed 667790"];
816 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 667791"];
817 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)); 667792"];
818 [label="Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int') 667793"];
819 [label="Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int') 667794"];
820 [label="param WithArguments(params object[] arguments) 667795"];
821 [label="param WithArguments(this) 667796"];
822 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667797"];
823 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667798"];
824 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667799"];
825 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667800"];
826 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667801"];
827 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667802"];
828 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667803"];
829 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667804"];
830 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667805"];
831 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667806"];
832 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667807"];
833 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 667808"];
834 [label="param DiagnosticDescription(object code) 667809"];
835 [label="param DiagnosticDescription(bool isWarningAsError) 667810"];
836 [label="param DiagnosticDescription(string squiggledText) 667811"];
837 [label="param DiagnosticDescription(object[] arguments) 667812"];
838 [label="param DiagnosticDescription(LinePosition? startLocation) 667813"];
839 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 667814"];
840 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 667815"];
841 [label="param DiagnosticDescription(Type errorCodeType = null) 667816"];
842 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 667817"];
843 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 667818"];
844 [label="param DiagnosticDescription(bool isSuppressed = false) 667819"];
845 [label="param DiagnosticDescription(this) 667820"];
846 [label="_code 667821"];
847 [label="_isWarningAsError 667822"];
848 [label="_isSuppressed 667823"];
849 [label="_squiggledText 667824"];
850 [label="_arguments 667825"];
851 [label="_startPosition 667826"];
852 [label="_argumentOrderDoesNotMatter 667827"];
853 [label="_errorCodeType 667828"];
854 [label="_ignoreArgumentsWhenComparing 667829"];
855 [label="_defaultSeverityOpt 667830"];
856 [label="_effectiveSeverityOpt 667831"];
857 [label="_syntaxPredicate 667832"];
858 [label="_showPredicate 667833"];
859 [label="_location 667834"];
860 [label="_argumentsAsStrings 667835"];
861 [label="_arguments 667836"];
862 [label="_argumentOrderDoesNotMatter 667837"];
863 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)); 667838"];
864 [label="Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11) 667839"];
865 [label="param WithLocation(int line) 667840"];
866 [label="param WithLocation(int column) 667841"];
867 [label="param WithLocation(this) 667842"];
868 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667843"];
869 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667844"];
870 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667845"];
871 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667846"];
872 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667847"];
873 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667848"];
874 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667849"];
875 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667850"];
876 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667851"];
877 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667852"];
878 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667853"];
879 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667854"];
880 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667855"];
881 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 667856"];
882 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 667857"];
883 [label="param DiagnosticDescription(object code) 667858"];
884 [label="param DiagnosticDescription(bool isWarningAsError) 667859"];
885 [label="param DiagnosticDescription(string squiggledText) 667860"];
886 [label="param DiagnosticDescription(object[] arguments) 667861"];
887 [label="param DiagnosticDescription(LinePosition? startLocation) 667862"];
888 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 667863"];
889 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 667864"];
890 [label="param DiagnosticDescription(Type errorCodeType = null) 667865"];
891 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 667866"];
892 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 667867"];
893 [label="param DiagnosticDescription(bool isSuppressed = false) 667868"];
894 [label="param DiagnosticDescription(this) 667869"];
895 [label="_code 667870"];
896 [label="_isWarningAsError 667871"];
897 [label="_isSuppressed 667872"];
898 [label="_squiggledText 667873"];
899 [label="_arguments 667874"];
900 [label="_startPosition 667875"];
901 [label="_argumentOrderDoesNotMatter 667876"];
902 [label="_errorCodeType 667877"];
903 [label="_ignoreArgumentsWhenComparing 667878"];
904 [label="_defaultSeverityOpt 667879"];
905 [label="_effectiveSeverityOpt 667880"];
906 [label="_syntaxPredicate 667881"];
907 [label="_showPredicate 667882"];
908 [label="_location 667883"];
909 [label="_argumentsAsStrings 667884"];
910 [label="_startPosition 667885"];
911 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)); 667886"];
912 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)) 667887"];
913 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)) 667888"];
914 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.F(int, double)' and 'C.F(double, int)'\n                Diagnostic(ErrorCode.ERR_AmbigCall, 'F').WithArguments('C.F(int, double)', 'C.F(double, int)').WithLocation(7, 9),\n                // (8,11): error CS1503: Argument 1: cannot convert from 'double' to 'int'\n                Diagnostic(ErrorCode.ERR_BadArgType, '1.0').WithArguments('1', 'double', 'int').WithLocation(8, 11)) 667889"];
915 [label="param VerifyDiagnostics(this TCompilation c) 667890"];
916 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 667891"];
917 [label="var diagnostics = c.GetDiagnostics(); 667892"];
918 [label="null 667893"];
919 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 667894"];
920 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 667895"];
921 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 667896"];
922 [label="null 667897"];
923 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 667898"];
924 [label="param Imports(CSharpCompilation compilation) 667899"];
925 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 667900"];
926 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 667901"];
927 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 667902"];
928 [label="param Imports(DiagnosticBag diagnostics) 667903"];
929 [label="param Imports(this) 667904"];
930 [label="_compilation 667905"];
931 [label="_diagnostics 667906"];
932 [label="UsingAliases 667907"];
933 [label="Debug.Assert(usingAliases != null); 667908"];
934 [label="Debug.Assert(usingAliases != null); 667909"];
935 [label="Debug.Assert(!usings.IsDefault); 667910"];
936 [label="Debug.Assert(!externs.IsDefault); 667911"];
937 [label="_compilation 667912"];
938 [label="this.UsingAliases 667913"];
939 [label="this.Usings 667914"];
940 [label="_diagnostics 667915"];
941 [label="this.ExternAliases 667916"];
942 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 667917"];
943 [label="var diagnostics = c.GetDiagnostics(); 667918"];
944 [label="param FromGlobalUsings(CSharpCompilation compilation) 667919"];
945 [label="var usings = compilation.Options.Usings; 667920"];
946 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 667921"];
947 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 667922"];
948 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 667923"];
949 [label="return Empty; 667924"];
950 [label="var diagnostics = c.GetDiagnostics(); 667925"];
951 [label="param Complete(CancellationToken cancellationToken) 667926"];
952 [label="param Complete(this) 667927"];
953 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 667928"];
954 [label="cancellationToken.ThrowIfCancellationRequested(); 667929"];
955 [label="var incompletePart = _state.NextIncompletePart; 667930"];
956 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 667931"];
957 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 667932"];
958 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 667933"];
959 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 667934"];
960 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 667935"];
961 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 667936"];
962 [label="Validate() 667937"];
963 [label="param Validate(this) 667938"];
964 [label="if (this == Empty)\n            {\n                return;\n            } 667939"];
965 [label="return; 667940"];
966 [label="Validate(); 667941"];
967 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 667942"];
968 [label="return; 667943"];
969 [label="param Includes(this BinderFlags self) 667944"];
970 [label="param Includes(BinderFlags other) 667945"];
971 [label="return (self & other) == other; 667946"];
972 [label="var diagnostics = c.GetDiagnostics(); 667947"];
973 [label="0 667948"];
974 [label="ExternalScope = 0 667949"];
975 [label="1 667950"];
976 [label="TopLevelScope = 1 667951"];
977 [label="2 667952"];
978 [label="ValueKindInsignificantBits = 2 667953"];
979 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 667954"];
980 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 667955"];
981 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 667956"];
982 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 667957"];
983 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 667958"];
984 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 667959"];
985 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 667960"];
986 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 667961"];
987 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 667962"];
988 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 667963"];
989 [label="10 667964"];
990 [label="MaxParameterListsForErrorRecovery = 10 667965"];
991 [label="'<>h__TransparentIdentifier' 667966"];
992 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 667967"];
993 [label="s => (MethodSymbol)s 667968"];
994 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 667969"];
995 [label="s => (PropertySymbol)s 667970"];
996 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 667971"];
997 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 667972"];
998 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 667973"];
999 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 667974"];
1000 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 667975"];
1001 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 667976"];
1002 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 667977"];
1003 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 667978"];
1004 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 667979"];
1005 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 667980"];
1006 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 667981"];
1007 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 667982"];
1008 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 667983"];
1009 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 667984"];
1010 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 667985"];
1011 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 667986"];
1012 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 667987"];
1013 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 667988"];
1014 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 667989"];
1015 [label="param GetWellKnownTypeMember(WellKnownMember member) 667990"];
1016 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 667991"];
1017 [label="param GetWellKnownTypeMember(Location location = null) 667992"];
1018 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 667993"];
1019 [label="param GetWellKnownTypeMember(bool isOptional = false) 667994"];
1020 [label="Debug.Assert((syntax != null) ^ (location != null)); 667995"];
1021 [label="Debug.Assert((syntax != null) ^ (location != null)); 667996"];
1022 [label="Debug.Assert((syntax != null) ^ (location != null)); 667997"];
1023 [label="Debug.Assert((syntax != null) ^ (location != null)); 667998"];
1024 [label="DiagnosticInfo useSiteDiagnostic; 667999"];
1025 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 668000"];
1026 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 668001"];
1027 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 668002"];
1028 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 668003"];
1029 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 668004"];
1030 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 668005"];
1031 [label="param GetWellKnownTypeMember(WellKnownMember member) 668006"];
1032 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 668007"];
1033 [label="param GetWellKnownTypeMember(bool isOptional = false) 668008"];
1034 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 668009"];
1035 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 668010"];
1036 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 668011"];
1037 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 668012"];
1038 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 668013"];
1039 [label="Debug.Assert(symbol is object); 668014"];
1040 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 668015"];
1041 [label="isInternal = false; 668016"];
1042 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 668017"];
1043 [label="symbol = symbol.ContainingType; 668018"];
1044 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 668019"];
1045 [label="return true; 668020"];
1046 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 668021"];
1047 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 668022"];
1048 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 668023"];
1049 [label="Debug.Assert(symbol is object); 668024"];
1050 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 668025"];
1051 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 668026"];
1052 [label="symbol = symbol.ContainingType; 668027"];
1053 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 668028"];
1054 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 668029"];
1055 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 668030"];
1056 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 668031"];
1057 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 668032"];
1058 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 668033"];
1059 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 668034"];
1060 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 668035"];
1061 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 668036"];
1062 [label="Debug.Assert(symbol is object); 668037"];
1063 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 668038"];
1064 [label="isInternal = false; 668039"];
1065 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 668040"];
1066 [label="symbol = symbol.ContainingType; 668041"];
1067 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 668042"];
1068 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 668043"];
1069 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 668044"];
1070 [label="Debug.Assert(symbol is object); 668045"];
1071 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 668046"];
1072 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 668047"];
1073 [label="symbol = symbol.ContainingType; 668048"];
1074 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 668049"];
1075 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 668050"];
1076 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 668051"];
1077 [label="return memberSymbol; 668052"];
1078 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 668053"];
1079 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 668054"];
1080 [label="return memberSymbol; 668055"];
1081 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 668056"];
1082 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 668057"];
1083 [label="Debug.Assert(symbol is object); 668058"];
1084 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 668059"];
1085 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 668060"];
1086 [label="symbol = symbol.ContainingType; 668061"];
1087 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 668062"];
1088 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 668063"];
1089 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 668064"];
1090 [label="Debug.Assert(symbol is object); 668065"];
1091 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 668066"];
1092 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 668067"];
1093 [label="symbol = symbol.ContainingType; 668068"];
1094 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 668069"];
1095 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 668070"];
1096 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 668071"];
1097 [label="return memberSymbol; 668072"];
1098 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 668073"];
1099 [label="return memberSymbol; 668074"];
1100 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 668075"];
1101 [label="return memberSymbol; 668076"];
1102 [label="return memberSymbol; 668077"];
1103 [label="param BinderFactory(CSharpCompilation compilation) 668078"];
1104 [label="param BinderFactory(SyntaxTree syntaxTree) 668079"];
1105 [label="param BinderFactory(bool ignoreAccessibility) 668080"];
1106 [label="param BinderFactory(this) 668081"];
1107 [label="_binderCache 668082"];
1108 [label="_compilation 668083"];
1109 [label="_syntaxTree 668084"];
1110 [label="_buckStopsHereBinder 668085"];
1111 [label="_ignoreAccessibility 668086"];
1112 [label="_binderFactoryVisitorPool 668087"];
1113 [label="_compilation 668088"];
1114 [label="_syntaxTree 668089"];
1115 [label="_ignoreAccessibility 668090"];
1116 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 668091"];
1117 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 668092"];
1118 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 668093"];
1119 [label="_binderFactoryVisitorPool 668094"];
1120 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 668095"];
1121 [label="_binderCache 668096"];
1122 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 668097"];
1123 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 668098"];
1124 [label="new BuckStopsHereBinder(compilation) 668099"];
1125 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 668100"];
1126 [label="param BuckStopsHereBinder(this) 668101"];
1127 [label="compilation 668102"];
1128 [label="param BuckStopsHereBinder(this) 668103"];
1129 [label="param Binder(CSharpCompilation compilation) 668104"];
1130 [label="param Binder(this) 668105"];
1131 [label="internal CSharpCompilation Compilation { get; } 668106"];
1132 [label="Flags 668107"];
1133 [label="protected internal Binder? Next { get; } 668108"];
1134 [label="_lazyConversions 668109"];
1135 [label="_lazyOverloadResolution 668110"];
1136 [label="RoslynDebug.Assert(compilation != null); 668111"];
1137 [label="RoslynDebug.Assert(compilation != null); 668112"];
1138 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 668113"];
1139 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 668114"];
1140 [label="this.Flags 668115"];
1141 [label="this.Compilation 668116"];
1142 [label="_buckStopsHereBinder 668117"];
1143 [label="var diagnostics = c.GetDiagnostics(); 668118"];
1144 [label="param GetBinder(SyntaxNode node) 668119"];
1145 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 668120"];
1146 [label="param GetBinder(Symbol memberOpt = null) 668121"];
1147 [label="param GetBinder(this) 668122"];
1148 [label="int position = node.SpanStart; 668123"];
1149 [label="InScript 668124"];
1150 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 668125"];
1151 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 668126"];
1152 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 668127"];
1153 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 668128"];
1154 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 668129"];
1155 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 668130"];
1156 [label="node = node.Parent; 668131"];
1157 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 668132"];
1158 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 668133"];
1159 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 668134"];
1160 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 668135"];
1161 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 668136"];
1162 [label="param GetBinder(SyntaxNode node) 668137"];
1163 [label="param GetBinder(int position) 668138"];
1164 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 668139"];
1165 [label="param GetBinder(Symbol memberOpt = null) 668140"];
1166 [label="param GetBinder(this) 668141"];
1167 [label="Debug.Assert(node != null); 668142"];
1168 [label="Debug.Assert(node != null); 668143"];
1169 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 668144"];
1170 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 668145"];
1171 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 668146"];
1172 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 668147"];
1173 [label="param BinderFactoryVisitor(BinderFactory factory) 668148"];
1174 [label="param BinderFactoryVisitor(this) 668149"];
1175 [label="param BinderFactoryVisitor(this) 668150"];
1176 [label="_position 668151"];
1177 [label="_memberDeclarationOpt 668152"];
1178 [label="_memberOpt 668153"];
1179 [label="_factory 668154"];
1180 [label="_factory 668155"];
1181 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 668156"];
1182 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 668157"];
1183 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 668158"];
1184 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 668159"];
1185 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 668160"];
1186 [label="param Initialize(int position) 668161"];
1187 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 668162"];
1188 [label="param Initialize(Symbol memberOpt) 668163"];
1189 [label="param Initialize(this) 668164"];
1190 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 668165"];
1191 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 668166"];
1192 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 668167"];
1193 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 668168"];
1194 [label="_position 668169"];
1195 [label="_memberDeclarationOpt 668170"];
1196 [label="_memberOpt 668171"];
1197 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 668172"];
1198 [label="Binder result = visitor.Visit(node); 668173"];
1199 [label="visitor.Visit(node) 668174"];
1200 [label="param Visit(SyntaxNode node) 668175"];
1201 [label="param Visit(this) 668176"];
1202 [label="return VisitCore(node); 668177"];
1203 [label="VisitCore(node) 668178"];
1204 [label="param VisitCore(SyntaxNode node) 668179"];
1205 [label="param VisitCore(this) 668180"];
1206 [label="return ((CSharpSyntaxNode)node).Accept(this); 668181"];
1207 [label="return ((CSharpSyntaxNode)node).Accept(this); 668182"];
1208 [label="return ((CSharpSyntaxNode)node).Accept(this); 668183"];
1209 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 668184"];
1210 [label="param VisitClassDeclaration(this) 668185"];
1211 [label="return VisitTypeDeclarationCore(node); 668186"];
1212 [label="VisitTypeDeclarationCore(node) 668187"];
1213 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 668188"];
1214 [label="param VisitTypeDeclarationCore(this) 668189"];
1215 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 668190"];
1216 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 668191"];
1217 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 668192"];
1218 [label="NodeUsage extraInfo = NodeUsage.Normal; 668193"];
1219 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 668194"];
1220 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 668195"];
1221 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 668196"];
1222 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 668197"];
1223 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 668198"];
1224 [label="return VisitTypeDeclarationCore(parent, extraInfo); 668199"];
1225 [label="return VisitTypeDeclarationCore(parent, extraInfo); 668200"];
1226 [label="VisitTypeDeclarationCore(parent, extraInfo) 668201"];
1227 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 668202"];
1228 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 668203"];
1229 [label="param VisitTypeDeclarationCore(this) 668204"];
1230 [label="var key = CreateBinderCacheKey(parent, extraInfo); 668205"];
1231 [label="var key = CreateBinderCacheKey(parent, extraInfo); 668206"];
1232 [label="CreateBinderCacheKey(parent, extraInfo) 668207"];
1233 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 668208"];
1234 [label="param CreateBinderCacheKey(NodeUsage usage) 668209"];
1235 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668210"];
1236 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668211"];
1237 [label="return new BinderCacheKey(node, usage); 668212"];
1238 [label="return new BinderCacheKey(node, usage); 668213"];
1239 [label="return new BinderCacheKey(node, usage); 668214"];
1240 [label="new BinderCacheKey(node, usage) 668215"];
1241 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 668216"];
1242 [label="param BinderCacheKey(NodeUsage usage) 668217"];
1243 [label="param BinderCacheKey(this) 668218"];
1244 [label="this.syntaxNode 668219"];
1245 [label="this.usage 668220"];
1246 [label="var key = CreateBinderCacheKey(parent, extraInfo); 668221"];
1247 [label="Binder resultBinder; 668222"];
1248 [label="binderCache 668223"];
1249 [label="get\n                {\n                    return _factory._binderCache;\n                } 668224"];
1250 [label="return _factory._binderCache; 668225"];
1251 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 668226"];
1252 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 668227"];
1253 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 668228"];
1254 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 668229"];
1255 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 668230"];
1256 [label="param GetHashCode(this) 668231"];
1257 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 668232"];
1258 [label="resultBinder = VisitCore(parent.Parent); 668233"];
1259 [label="VisitCore(parent.Parent) 668234"];
1260 [label="param VisitCore(SyntaxNode node) 668235"];
1261 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 668236"];
1262 [label="param VisitCompilationUnit(this) 668237"];
1263 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 668238"];
1264 [label="IsInUsing(parent) 668239"];
1265 [label="param IsInUsing(CSharpSyntaxNode containingNode) 668240"];
1266 [label="param IsInUsing(this) 668241"];
1267 [label="TextSpan containingSpan = containingNode.Span; 668242"];
1268 [label="SyntaxToken token; 668243"];
1269 [label="token 668244"];
1270 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 668245"];
1271 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 668246"];
1272 [label="token = containingNode.FindToken(_position); 668247"];
1273 [label="token = containingNode.FindToken(_position); 668248"];
1274 [label="var node = token.Parent; 668249"];
1275 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 668250"];
1276 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 668251"];
1277 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 668252"];
1278 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 668253"];
1279 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 668254"];
1280 [label="node = node.Parent; 668255"];
1281 [label="return false; 668256"];
1282 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 668257"];
1283 [label="InScript 668258"];
1284 [label="get\n                {\n                    return _factory.InScript;\n                } 668259"];
1285 [label="_factory.InScript 668260"];
1286 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 668261"];
1287 [label="return _factory.InScript; 668262"];
1288 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 668263"];
1289 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 668264"];
1290 [label="param VisitCompilationUnit(bool inUsing) 668265"];
1291 [label="param VisitCompilationUnit(bool inScript) 668266"];
1292 [label="param VisitCompilationUnit(this) 668267"];
1293 [label="syntaxTree 668268"];
1294 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 668269"];
1295 [label="return _factory._syntaxTree; 668270"];
1296 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 668271"];
1297 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 668272"];
1298 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 668273"];
1299 [label="inUsing 668274"];
1300 [label="inScript 668275"];
1301 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 668276"];
1302 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 668277"];
1303 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 668278"];
1304 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 668279"];
1305 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 668280"];
1306 [label="param CreateBinderCacheKey(NodeUsage usage) 668281"];
1307 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668282"];
1308 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668283"];
1309 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 668284"];
1310 [label="Binder result; 668285"];
1311 [label="binderCache 668286"];
1312 [label="get\n                {\n                    return _factory._binderCache;\n                } 668287"];
1313 [label="return _factory._binderCache; 668288"];
1314 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 668289"];
1315 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 668290"];
1316 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 668291"];
1317 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 668292"];
1318 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 668293"];
1319 [label="this.buckStopsHereBinder 668294"];
1320 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 668295"];
1321 [label="return _factory._buckStopsHereBinder; 668296"];
1322 [label="result = this.buckStopsHereBinder; 668297"];
1323 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 668298"];
1324 [label="compilation 668299"];
1325 [label="get\n                {\n                    return _factory._compilation;\n                } 668300"];
1326 [label="return _factory._compilation; 668301"];
1327 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 668302"];
1328 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 668303"];
1329 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 668304"];
1330 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 668305"];
1331 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 668306"];
1332 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 668307"];
1333 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 668308"];
1334 [label="param InContainerBinder(Binder next) 668309"];
1335 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 668310"];
1336 [label="param InContainerBinder(bool inUsing) 668311"];
1337 [label="param InContainerBinder(this) 668312"];
1338 [label="next 668313"];
1339 [label="param InContainerBinder(this) 668314"];
1340 [label="param Binder(Binder next) 668315"];
1341 [label="param Binder(this) 668316"];
1342 [label="param Binder(Conversions? conversions = null) 668317"];
1343 [label="RoslynDebug.Assert(next != null); 668318"];
1344 [label="RoslynDebug.Assert(next != null); 668319"];
1345 [label="Next 668320"];
1346 [label="this.Flags 668321"];
1347 [label="this.Compilation 668322"];
1348 [label="_lazyConversions 668323"];
1349 [label="_container 668324"];
1350 [label="_computeImports 668325"];
1351 [label="_lazyImports 668326"];
1352 [label="_lazyImportChain 668327"];
1353 [label="_lazyQuickAttributeChecker 668328"];
1354 [label="Debug.Assert((object)container != null); 668329"];
1355 [label="Debug.Assert((object)container != null); 668330"];
1356 [label="Debug.Assert(declarationSyntax != null); 668331"];
1357 [label="Debug.Assert(declarationSyntax != null); 668332"];
1358 [label="_container 668333"];
1359 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 668334"];
1360 [label="_computeImports 668335"];
1361 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 668336"];
1362 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 668337"];
1363 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 668338"];
1364 [label="_usingsSyntax 668339"];
1365 [label="compilation 668340"];
1366 [label="get\n                {\n                    return _factory._compilation;\n                } 668341"];
1367 [label="return _factory._compilation; 668342"];
1368 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 668343"];
1369 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 668344"];
1370 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 668345"];
1371 [label="binderCache 668346"];
1372 [label="return _factory._binderCache; 668347"];
1373 [label="binderCache.TryAdd(key, result); 668348"];
1374 [label="binderCache.TryAdd(key, result); 668349"];
1375 [label="binderCache.TryAdd(key, result); 668350"];
1376 [label="binderCache.TryAdd(key, result); 668351"];
1377 [label="binderCache.TryAdd(key, result); 668352"];
1378 [label="return result; 668353"];
1379 [label="return ((CSharpSyntaxNode)node).Accept(this); 668354"];
1380 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 668355"];
1381 [label="resultBinder.ContainingMemberOrLambda 668356"];
1382 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 668357"];
1383 [label="var merged = _container as MergedNamespaceSymbol; 668358"];
1384 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 668359"];
1385 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 668360"];
1386 [label="((object)merged != null) 668361"];
1387 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 668362"];
1388 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 668363"];
1389 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 668364"];
1390 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 668365"];
1391 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 668366"];
1392 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 668367"];
1393 [label="new InContainerBinder(typeSymbol, resultBinder) 668368"];
1394 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 668369"];
1395 [label="param InContainerBinder(Binder next) 668370"];
1396 [label="param InContainerBinder(Imports imports = null) 668371"];
1397 [label="param InContainerBinder(this) 668372"];
1398 [label="next 668373"];
1399 [label="param InContainerBinder(this) 668374"];
1400 [label="param Binder(Binder next) 668375"];
1401 [label="param Binder(this) 668376"];
1402 [label="param Binder(Conversions? conversions = null) 668377"];
1403 [label="RoslynDebug.Assert(next != null); 668378"];
1404 [label="RoslynDebug.Assert(next != null); 668379"];
1405 [label="this.Flags 668380"];
1406 [label="this.Compilation 668381"];
1407 [label="_lazyConversions 668382"];
1408 [label="_container 668383"];
1409 [label="_computeImports 668384"];
1410 [label="_lazyImports 668385"];
1411 [label="_lazyImportChain 668386"];
1412 [label="_lazyQuickAttributeChecker 668387"];
1413 [label="Debug.Assert((object)container != null || imports != null); 668388"];
1414 [label="Debug.Assert((object)container != null || imports != null); 668389"];
1415 [label="_container 668390"];
1416 [label="_lazyImports = imports ?? Imports.Empty; 668391"];
1417 [label="_lazyImports = imports ?? Imports.Empty; 668392"];
1418 [label="_lazyImports 668393"];
1419 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 668394"];
1420 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 668395"];
1421 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 668396"];
1422 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 668397"];
1423 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 668398"];
1424 [label="param WithUnsafeRegionIfNecessary(this) 668399"];
1425 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 668400"];
1426 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 668401"];
1427 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 668402"];
1428 [label="param Includes(this BinderFlags self) 668403"];
1429 [label="param Includes(BinderFlags other) 668404"];
1430 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 668405"];
1431 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 668406"];
1432 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 668407"];
1433 [label="binderCache 668408"];
1434 [label="return _factory._binderCache; 668409"];
1435 [label="binderCache.TryAdd(key, resultBinder); 668410"];
1436 [label="binderCache.TryAdd(key, resultBinder); 668411"];
1437 [label="binderCache.TryAdd(key, resultBinder); 668412"];
1438 [label="binderCache.TryAdd(key, resultBinder); 668413"];
1439 [label="binderCache.TryAdd(key, resultBinder); 668414"];
1440 [label="return resultBinder; 668415"];
1441 [label="return ((CSharpSyntaxNode)node).Accept(this); 668416"];
1442 [label="_binderFactoryVisitorPool.Free(visitor); 668417"];
1443 [label="_binderFactoryVisitorPool.Free(visitor); 668418"];
1444 [label="return result; 668419"];
1445 [label="var diagnostics = c.GetDiagnostics(); 668420"];
1446 [label="Debug.Assert(node != null); 668421"];
1447 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 668422"];
1448 [label="container.AssertMemberExposure(memberOpt); 668423"];
1449 [label="container.AssertMemberExposure(memberOpt); 668424"];
1450 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 668425"];
1451 [label="param VisitMethodDeclaration(this) 668426"];
1452 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 668427"];
1453 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 668428"];
1454 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 668429"];
1455 [label="NodeUsage usage; 668430"];
1456 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 668431"];
1457 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 668432"];
1458 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 668433"];
1459 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 668434"];
1460 [label="usage = NodeUsage.Normal; 668435"];
1461 [label="var key = CreateBinderCacheKey(methodDecl, usage); 668436"];
1462 [label="var key = CreateBinderCacheKey(methodDecl, usage); 668437"];
1463 [label="CreateBinderCacheKey(methodDecl, usage) 668438"];
1464 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 668439"];
1465 [label="param CreateBinderCacheKey(NodeUsage usage) 668440"];
1466 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668441"];
1467 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668442"];
1468 [label="return new BinderCacheKey(node, usage); 668443"];
1469 [label="new BinderCacheKey(node, usage) 668444"];
1470 [label="param BinderCacheKey(this) 668445"];
1471 [label="var key = CreateBinderCacheKey(methodDecl, usage); 668446"];
1472 [label="Binder resultBinder; 668447"];
1473 [label="binderCache 668448"];
1474 [label="get\n                {\n                    return _factory._binderCache;\n                } 668449"];
1475 [label="return _factory._binderCache; 668450"];
1476 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 668451"];
1477 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 668452"];
1478 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 668453"];
1479 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 668454"];
1480 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 668455"];
1481 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 668456"];
1482 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 668457"];
1483 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 668458"];
1484 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 668459"];
1485 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 668460"];
1486 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 668461"];
1487 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 668462"];
1488 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 668463"];
1489 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668464"];
1490 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668465"];
1491 [label="SyntaxToken token; 668466"];
1492 [label="token 668467"];
1493 [label="syntaxTree 668468"];
1494 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 668469"];
1495 [label="return _factory._syntaxTree; 668470"];
1496 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 668471"];
1497 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 668472"];
1498 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668473"];
1499 [label="RoslynDebug.Assert(next != null); 668474"];
1500 [label="_container 668475"];
1501 [label="Debug.Assert((object)container != null); 668476"];
1502 [label="Debug.Assert(declarationSyntax != null); 668477"];
1503 [label="RoslynDebug.Assert(next != null); 668478"];
1504 [label="_container 668479"];
1505 [label="Debug.Assert((object)container != null || imports != null); 668480"];
1506 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 668481"];
1507 [label="SourceMemberMethodSymbol method = null; 668482"];
1508 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 668483"];
1509 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 668484"];
1510 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 668485"];
1511 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 668486"];
1512 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 668487"];
1513 [label="param WithUnsafeRegionIfNecessary(this) 668488"];
1514 [label="binderCache 668489"];
1515 [label="return _factory._binderCache; 668490"];
1516 [label="binderCache.TryAdd(key, resultBinder); 668491"];
1517 [label="binderCache.TryAdd(key, resultBinder); 668492"];
1518 [label="binderCache.TryAdd(key, resultBinder); 668493"];
1519 [label="binderCache.TryAdd(key, resultBinder); 668494"];
1520 [label="return resultBinder; 668495"];
1521 [label="return ((CSharpSyntaxNode)node).Accept(this); 668496"];
1522 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 668497"];
1523 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 668498"];
1524 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 668499"];
1525 [label="Debug.Assert((object)containing != null); 668500"];
1526 [label="Debug.Assert((object)containing != null); 668501"];
1527 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 668502"];
1528 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 668503"];
1529 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 668504"];
1530 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 668505"];
1531 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 668506"];
1532 [label="param BinderWithContainingMemberOrLambda(Binder next) 668507"];
1533 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 668508"];
1534 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 668509"];
1535 [label="param BinderWithContainingMemberOrLambda(this) 668510"];
1536 [label="next 668511"];
1537 [label="flags 668512"];
1538 [label="param BinderWithContainingMemberOrLambda(this) 668513"];
1539 [label="param Binder(Binder next) 668514"];
1540 [label="param Binder(BinderFlags flags) 668515"];
1541 [label="param Binder(this) 668516"];
1542 [label="internal CSharpCompilation Compilation { get; } 668517"];
1543 [label="Flags 668518"];
1544 [label="protected internal Binder? Next { get; } 668519"];
1545 [label="_lazyConversions 668520"];
1546 [label="_lazyOverloadResolution 668521"];
1547 [label="RoslynDebug.Assert(next != null); 668522"];
1548 [label="RoslynDebug.Assert(next != null); 668523"];
1549 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 668524"];
1550 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 668525"];
1551 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 668526"];
1552 [label="param Includes(this BinderFlags self) 668527"];
1553 [label="param Includes(BinderFlags other) 668528"];
1554 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 668529"];
1555 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 668530"];
1556 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 668531"];
1557 [label="param Includes(this BinderFlags self) 668532"];
1558 [label="param Includes(BinderFlags other) 668533"];
1559 [label="Next 668534"];
1560 [label="this.Flags 668535"];
1561 [label="this.Compilation 668536"];
1562 [label="_containingMemberOrLambda 668537"];
1563 [label="Debug.Assert(containingMemberOrLambda != null); 668538"];
1564 [label="Debug.Assert(containingMemberOrLambda != null); 668539"];
1565 [label="_containingMemberOrLambda 668540"];
1566 [label="var diagnostics = c.GetDiagnostics(); 668541"];
1567 [label="param BindType(ExpressionSyntax syntax) 668542"];
1568 [label="param BindType(DiagnosticBag diagnostics) 668543"];
1569 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 668544"];
1570 [label="param BindType(bool suppressUseSiteDiagnostics = false) 668545"];
1571 [label="param BindType(this) 668546"];
1572 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 668547"];
1573 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 668548"];
1574 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 668549"];
1575 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 668550"];
1576 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 668551"];
1577 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 668552"];
1578 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 668553"];
1579 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 668554"];
1580 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 668555"];
1581 [label="param BindTypeOrAlias(this) 668556"];
1582 [label="Debug.Assert(diagnostics != null); 668557"];
1583 [label="Debug.Assert(diagnostics != null); 668558"];
1584 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 668559"];
1585 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 668560"];
1586 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 668561"];
1587 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 668562"];
1588 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 668563"];
1589 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 668564"];
1590 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 668565"];
1591 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 668566"];
1592 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 668567"];
1593 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 668568"];
1594 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 668569"];
1595 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 668570"];
1596 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 668571"];
1597 [label="return bindPredefined(syntax, diagnostics); 668572"];
1598 [label="return bindPredefined(syntax, diagnostics); 668573"];
1599 [label="bindPredefined(syntax, diagnostics) 668574"];
1600 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 668575"];
1601 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 668576"];
1602 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 668577"];
1603 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 668578"];
1604 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 668579"];
1605 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 668580"];
1606 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 668581"];
1607 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 668582"];
1608 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 668583"];
1609 [label="param BindPredefinedTypeSymbol(this) 668584"];
1610 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 668585"];
1611 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 668586"];
1612 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 668587"];
1613 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 668588"];
1614 [label="param GetSpecialType(SpecialType typeId) 668589"];
1615 [label="param GetSpecialType(DiagnosticBag diagnostics) 668590"];
1616 [label="param GetSpecialType(SyntaxNode node) 668591"];
1617 [label="param GetSpecialType(this) 668592"];
1618 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 668593"];
1619 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 668594"];
1620 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 668595"];
1621 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 668596"];
1622 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 668597"];
1623 [label="param GetSpecialType(CSharpCompilation compilation) 668598"];
1624 [label="param GetSpecialType(SpecialType typeId) 668599"];
1625 [label="param GetSpecialType(SyntaxNode node) 668600"];
1626 [label="param GetSpecialType(DiagnosticBag diagnostics) 668601"];
1627 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 668602"];
1628 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 668603"];
1629 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 668604"];
1630 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 668605"];
1631 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 668606"];
1632 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 668607"];
1633 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 668608"];
1634 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 668609"];
1635 [label="param ReportUseSiteDiagnostics(Symbol symbol) 668610"];
1636 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 668611"];
1637 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 668612"];
1638 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 668613"];
1639 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 668614"];
1640 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 668615"];
1641 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 668616"];
1642 [label="Debug.Assert(symbol is object); 668617"];
1643 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 668618"];
1644 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 668619"];
1645 [label="symbol = symbol.ContainingType; 668620"];
1646 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 668621"];
1647 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 668622"];
1648 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 668623"];
1649 [label="return typeSymbol; 668624"];
1650 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 668625"];
1651 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 668626"];
1652 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 668627"];
1653 [label="param AreNullableAnnotationsEnabled(this) 668628"];
1654 [label="RoslynDebug.Assert(token.SyntaxTree is object); 668629"];
1655 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 668630"];
1656 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 668631"];
1657 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 668632"];
1658 [label="param AreNullableAnnotationsEnabled(int position) 668633"];
1659 [label="param AreNullableAnnotationsEnabled(this) 668634"];
1660 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 668635"];
1661 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 668636"];
1662 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 668637"];
1663 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 668638"];
1664 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 668639"];
1665 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 668640"];
1666 [label="AreNullableAnnotationsGloballyEnabled() 668641"];
1667 [label="param AreNullableAnnotationsGloballyEnabled(this) 668642"];
1668 [label="RoslynDebug.Assert(Next is object); 668643"];
1669 [label="Next.AreNullableAnnotationsGloballyEnabled() 668644"];
1670 [label="param AreNullableAnnotationsGloballyEnabled(this) 668645"];
1671 [label="param AreNullableAnnotationsGloballyEnabled(this) 668646"];
1672 [label="GetGlobalAnnotationState() 668647"];
1673 [label="param GetGlobalAnnotationState(this) 668648"];
1674 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 668649"];
1675 [label="return false; 668650"];
1676 [label="return GetGlobalAnnotationState(); 668651"];
1677 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 668652"];
1678 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 668653"];
1679 [label="type 668654"];
1680 [label="param operator(TypeWithAnnotations typeWithAnnotations) 668655"];
1681 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 668656"];
1682 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 668657"];
1683 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 668658"];
1684 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 668659"];
1685 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 668660"];
1686 [label="Debug.Assert(typeWithAnnotations.HasType); 668661"];
1687 [label="_typeWithAnnotations 668662"];
1688 [label="_symbol = null; 668663"];
1689 [label="_symbol 668664"];
1690 [label="_isNullableEnabled = false; 668665"];
1691 [label="_isNullableEnabled 668666"];
1692 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 668667"];
1693 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 668668"];
1694 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 668669"];
1695 [label="symbol.IsType 668670"];
1696 [label="=> !_typeWithAnnotations.IsDefault 668671"];
1697 [label="!_typeWithAnnotations.IsDefault 668672"];
1698 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 668673"];
1699 [label="symbol.IsType 668674"];
1700 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 668675"];
1701 [label="symbol.TypeWithAnnotations 668676"];
1702 [label="=> _typeWithAnnotations 668677"];
1703 [label="_typeWithAnnotations 668678"];
1704 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 668679"];
1705 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 668680"];
1706 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 668681"];
1707 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 668682"];
1708 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 668683"];
1709 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 668684"];
1710 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 668685"];
1711 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 668686"];
1712 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 668687"];
1713 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668688"];
1714 [label="param ReportDiagnosticsIfObsolete(this) 668689"];
1715 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 668690"];
1716 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 668691"];
1717 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 668692"];
1718 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 668693"];
1719 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 668694"];
1720 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 668695"];
1721 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 668696"];
1722 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 668697"];
1723 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668698"];
1724 [label="param ReportDiagnosticsIfObsolete(this) 668699"];
1725 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 668700"];
1726 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 668701"];
1727 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 668702"];
1728 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 668703"];
1729 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 668704"];
1730 [label="this.ContainingMemberOrLambda 668705"];
1731 [label="get { return _containingMemberOrLambda; } 668706"];
1732 [label="return _containingMemberOrLambda; 668707"];
1733 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 668708"];
1734 [label="this.ContainingType 668709"];
1735 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 668710"];
1736 [label="this.ContainingMemberOrLambda 668711"];
1737 [label="get { return _containingMemberOrLambda; } 668712"];
1738 [label="return _containingMemberOrLambda; 668713"];
1739 [label="var member = this.ContainingMemberOrLambda; 668714"];
1740 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 668715"];
1741 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 668716"];
1742 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 668717"];
1743 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 668718"];
1744 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 668719"];
1745 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 668720"];
1746 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 668721"];
1747 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 668722"];
1748 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 668723"];
1749 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 668724"];
1750 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668725"];
1751 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 668726"];
1752 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 668727"];
1753 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 668728"];
1754 [label="RoslynDebug.Assert(symbol is object); 668729"];
1755 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 668730"];
1756 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 668731"];
1757 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 668732"];
1758 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 668733"];
1759 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 668734"];
1760 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 668735"];
1761 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 668736"];
1762 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 668737"];
1763 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 668738"];
1764 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 668739"];
1765 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 668740"];
1766 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 668741"];
1767 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 668742"];
1768 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 668743"];
1769 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 668744"];
1770 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 668745"];
1771 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 668746"];
1772 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 668747"];
1773 [label="RoslynDebug.Assert(diagnostics != null); 668748"];
1774 [label="RoslynDebug.Assert(diagnostics != null); 668749"];
1775 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 668750"];
1776 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 668751"];
1777 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 668752"];
1778 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 668753"];
1779 [label="DiagnosticInfo? info = null; 668754"];
1780 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 668755"];
1781 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 668756"];
1782 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 668757"];
1783 [label="return kind; 668758"];
1784 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 668759"];
1785 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 668760"];
1786 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 668761"];
1787 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 668762"];
1788 [label="return symbol; 668763"];
1789 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 668764"];
1790 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 668765"];
1791 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 668766"];
1792 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 668767"];
1793 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 668768"];
1794 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 668769"];
1795 [label="param UnwrapAlias(DiagnosticBag diagnostics) 668770"];
1796 [label="param UnwrapAlias(SyntaxNode syntax) 668771"];
1797 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 668772"];
1798 [label="param UnwrapAlias(this) 668773"];
1799 [label="symbol.IsAlias 668774"];
1800 [label="=> _symbol?.Kind == SymbolKind.Alias 668775"];
1801 [label="_symbol 668776"];
1802 [label="_symbol?.Kind == SymbolKind.Alias 668777"];
1803 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 668778"];
1804 [label="return symbol; 668779"];
1805 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 668780"];
1806 [label="=> _typeWithAnnotations 668781"];
1807 [label="_typeWithAnnotations 668782"];
1808 [label="var diagnostics = c.GetDiagnostics(); 668783"];
1809 [label="return bindPredefined(syntax, diagnostics); 668784"];
1810 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 668785"];
1811 [label="param GetSpecialType(DiagnosticBag diagnostics) 668786"];
1812 [label="param GetSpecialType(SyntaxNode node) 668787"];
1813 [label="param GetSpecialType(SyntaxNode node) 668788"];
1814 [label="param GetSpecialType(DiagnosticBag diagnostics) 668789"];
1815 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 668790"];
1816 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 668791"];
1817 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 668792"];
1818 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 668793"];
1819 [label="Debug.Assert(typeWithAnnotations.HasType); 668794"];
1820 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 668795"];
1821 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 668796"];
1822 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668797"];
1823 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 668798"];
1824 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 668799"];
1825 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668800"];
1826 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 668801"];
1827 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 668802"];
1828 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 668803"];
1829 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 668804"];
1830 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 668805"];
1831 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 668806"];
1832 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 668807"];
1833 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668808"];
1834 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 668809"];
1835 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 668810"];
1836 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 668811"];
1837 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 668812"];
1838 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 668813"];
1839 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 668814"];
1840 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 668815"];
1841 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 668816"];
1842 [label="RoslynDebug.Assert(diagnostics != null); 668817"];
1843 [label="RoslynDebug.Assert(diagnostics != null); 668818"];
1844 [label="DiagnosticInfo? info = null; 668819"];
1845 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 668820"];
1846 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 668821"];
1847 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 668822"];
1848 [label="return kind; 668823"];
1849 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 668824"];
1850 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 668825"];
1851 [label="=> _symbol?.Kind == SymbolKind.Alias 668826"];
1852 [label="_symbol 668827"];
1853 [label="_symbol?.Kind == SymbolKind.Alias 668828"];
1854 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 668829"];
1855 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 668830"];
1856 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 668831"];
1857 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 668832"];
1858 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 668833"];
1859 [label="param ValidateParameterNameConflicts(this) 668834"];
1860 [label="PooledHashSet<string>? tpNames = null; 668835"];
1861 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 668836"];
1862 [label="PooledHashSet<string>? pNames = null; 668837"];
1863 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 668838"];
1864 [label="pNames = PooledHashSet<string>.GetInstance(); 668839"];
1865 [label="foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                } 668840"];
1866 [label="var name = p.Name; 668841"];
1867 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 668842"];
1868 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 668843"];
1869 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 668844"];
1870 [label="if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 668845"];
1871 [label="if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 668846"];
1872 [label="if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 668847"];
1873 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 668848"];
1874 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 668849"];
1875 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics) 668850"];
1876 [label="param ValidateDeclarationNameConflictsInScope(Symbol symbol) 668851"];
1877 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 668852"];
1878 [label="param ValidateDeclarationNameConflictsInScope(this) 668853"];
1879 [label="Location location = GetLocation(symbol); 668854"];
1880 [label="GetLocation(symbol) 668855"];
1881 [label="param GetLocation(Symbol symbol) 668856"];
1882 [label="var locations = symbol.Locations; 668857"];
1883 [label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 668858"];
1884 [label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 668859"];
1885 [label="locations.Length != 0 668860"];
1886 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 668861"];
1887 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 668862"];
1888 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 668863"];
1889 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 668864"];
1890 [label="ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics) 668865"];
1891 [label="param ValidateNameConflictsInScope(Symbol? symbol) 668866"];
1892 [label="param ValidateNameConflictsInScope(Location location) 668867"];
1893 [label="param ValidateNameConflictsInScope(string name) 668868"];
1894 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 668869"];
1895 [label="param ValidateNameConflictsInScope(this) 668870"];
1896 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 668871"];
1897 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 668872"];
1898 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 668873"];
1899 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 668874"];
1900 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 668875"];
1901 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 668876"];
1902 [label="var scope = binder as LocalScopeBinder; 668877"];
1903 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 668878"];
1904 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 668879"];
1905 [label="binder.IsNestedFunctionBinder 668880"];
1906 [label="=> false 668881"];
1907 [label="false 668882"];
1908 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 668883"];
1909 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 668884"];
1910 [label="binder.IsLastBinderWithinMember() 668885"];
1911 [label="param IsLastBinderWithinMember(this) 668886"];
1912 [label="this.ContainingMemberOrLambda 668887"];
1913 [label="get { return _containingMemberOrLambda; } 668888"];
1914 [label="return _containingMemberOrLambda; 668889"];
1915 [label="var containingMemberOrLambda = this.ContainingMemberOrLambda; 668890"];
1916 [label="switch (containingMemberOrLambda?.Kind)\n            {\n                case null:\n                case SymbolKind.NamedType:\n                case SymbolKind.Namespace:\n                    return true;\n                default:\n                    return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda;\n            } 668891"];
1917 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 668892"];
1918 [label=".ContainingMemberOrLambda 668893"];
1919 [label="_container 668894"];
1920 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 668895"];
1921 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 668896"];
1922 [label="return false; 668897"];
1923 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 668898"];
1924 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 668899"];
1925 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 668900"];
1926 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 668901"];
1927 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 668902"];
1928 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 668903"];
1929 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 668904"];
1930 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 668905"];
1931 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 668906"];
1932 [label="param ValidateNameConflictsInScope(Symbol? symbol) 668907"];
1933 [label="param ValidateNameConflictsInScope(Location location) 668908"];
1934 [label="param ValidateNameConflictsInScope(string name) 668909"];
1935 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 668910"];
1936 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 668911"];
1937 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 668912"];
1938 [label="var scope = binder as LocalScopeBinder; 668913"];
1939 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 668914"];
1940 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 668915"];
1941 [label="binder.IsNestedFunctionBinder 668916"];
1942 [label="=> false 668917"];
1943 [label="false 668918"];
1944 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 668919"];
1945 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 668920"];
1946 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 668921"];
1947 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 668922"];
1948 [label="return false; 668923"];
1949 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 668924"];
1950 [label="tpNames?.Free(); 668925"];
1951 [label="pNames?.Free(); 668926"];
1952 [label="return bindPredefined(syntax, diagnostics); 668927"];
1953 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 668928"];
1954 [label="param GetSpecialType(DiagnosticBag diagnostics) 668929"];
1955 [label="param GetSpecialType(SyntaxNode node) 668930"];
1956 [label="param GetSpecialType(DiagnosticBag diagnostics) 668931"];
1957 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 668932"];
1958 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 668933"];
1959 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 668934"];
1960 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 668935"];
1961 [label="Debug.Assert(typeWithAnnotations.HasType); 668936"];
1962 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 668937"];
1963 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668938"];
1964 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 668939"];
1965 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 668940"];
1966 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668941"];
1967 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 668942"];
1968 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 668943"];
1969 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 668944"];
1970 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 668945"];
1971 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 668946"];
1972 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668947"];
1973 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 668948"];
1974 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 668949"];
1975 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 668950"];
1976 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 668951"];
1977 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 668952"];
1978 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 668953"];
1979 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 668954"];
1980 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 668955"];
1981 [label="RoslynDebug.Assert(diagnostics != null); 668956"];
1982 [label="RoslynDebug.Assert(diagnostics != null); 668957"];
1983 [label="DiagnosticInfo? info = null; 668958"];
1984 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 668959"];
1985 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 668960"];
1986 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 668961"];
1987 [label="return kind; 668962"];
1988 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 668963"];
1989 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 668964"];
1990 [label="=> _symbol?.Kind == SymbolKind.Alias 668965"];
1991 [label="_symbol 668966"];
1992 [label="_symbol?.Kind == SymbolKind.Alias 668967"];
1993 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 668968"];
1994 [label="Debug.Assert(node != null); 668969"];
1995 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668970"];
1996 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 668971"];
1997 [label="param Equals(BinderCacheKey other) 668972"];
1998 [label="param Equals(this) 668973"];
1999 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 668974"];
2000 [label="SourceMemberMethodSymbol method = null; 668975"];
2001 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 668976"];
2002 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 668977"];
2003 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 668978"];
2004 [label="param Includes(this BinderFlags self) 668979"];
2005 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 668980"];
2006 [label="param Includes(this BinderFlags self) 668981"];
2007 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 668982"];
2008 [label="pNames?.Free(); 668983"];
2009 [label="return bindPredefined(syntax, diagnostics); 668984"];
2010 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 668985"];
2011 [label="param GetSpecialType(DiagnosticBag diagnostics) 668986"];
2012 [label="param GetSpecialType(SyntaxNode node) 668987"];
2013 [label="param GetSpecialType(DiagnosticBag diagnostics) 668988"];
2014 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 668989"];
2015 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 668990"];
2016 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 668991"];
2017 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 668992"];
2018 [label="Debug.Assert(typeWithAnnotations.HasType); 668993"];
2019 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 668994"];
2020 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668995"];
2021 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 668996"];
2022 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 668997"];
2023 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 668998"];
2024 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 668999"];
2025 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 669000"];
2026 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 669001"];
2027 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 669002"];
2028 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 669003"];
2029 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 669004"];
2030 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 669005"];
2031 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 669006"];
2032 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 669007"];
2033 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 669008"];
2034 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 669009"];
2035 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 669010"];
2036 [label="RoslynDebug.Assert(diagnostics != null); 669011"];
2037 [label="RoslynDebug.Assert(diagnostics != null); 669012"];
2038 [label="DiagnosticInfo? info = null; 669013"];
2039 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 669014"];
2040 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 669015"];
2041 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 669016"];
2042 [label="return kind; 669017"];
2043 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 669018"];
2044 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 669019"];
2045 [label="=> _symbol?.Kind == SymbolKind.Alias 669020"];
2046 [label="_symbol 669021"];
2047 [label="_symbol?.Kind == SymbolKind.Alias 669022"];
2048 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 669023"];
2049 [label="Debug.Assert(node != null); 669024"];
2050 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 669025"];
2051 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 669026"];
2052 [label="SourceMemberMethodSymbol method = null; 669027"];
2053 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 669028"];
2054 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 669029"];
2055 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 669030"];
2056 [label="Debug.Assert(typeWithAnnotations.HasType); 669031"];
2057 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 669032"];
2058 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 669033"];
2059 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 669034"];
2060 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 669035"];
2061 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 669036"];
2062 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 669037"];
2063 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 669038"];
2064 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 669039"];
2065 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 669040"];
2066 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 669041"];
2067 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 669042"];
2068 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 669043"];
2069 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 669044"];
2070 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 669045"];
2071 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 669046"];
2072 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 669047"];
2073 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 669048"];
2074 [label="RoslynDebug.Assert(diagnostics != null); 669049"];
2075 [label="RoslynDebug.Assert(diagnostics != null); 669050"];
2076 [label="DiagnosticInfo? info = null; 669051"];
2077 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 669052"];
2078 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 669053"];
2079 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 669054"];
2080 [label="return kind; 669055"];
2081 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 669056"];
2082 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 669057"];
2083 [label="=> _symbol?.Kind == SymbolKind.Alias 669058"];
2084 [label="_symbol 669059"];
2085 [label="_symbol?.Kind == SymbolKind.Alias 669060"];
2086 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 669061"];
2087 [label="return bindPredefined(syntax, diagnostics); 669062"];
2088 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 669063"];
2089 [label="param GetSpecialType(DiagnosticBag diagnostics) 669064"];
2090 [label="param GetSpecialType(DiagnosticBag diagnostics) 669065"];
2091 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 669066"];
2092 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 669067"];
2093 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 669068"];
2094 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 669069"];
2095 [label="Debug.Assert(typeWithAnnotations.HasType); 669070"];
2096 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 669071"];
2097 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 669072"];
2098 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 669073"];
2099 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 669074"];
2100 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 669075"];
2101 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 669076"];
2102 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 669077"];
2103 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 669078"];
2104 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 669079"];
2105 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 669080"];
2106 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 669081"];
2107 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 669082"];
2108 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 669083"];
2109 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 669084"];
2110 [label="RoslynDebug.Assert(diagnostics != null); 669085"];
2111 [label="RoslynDebug.Assert(diagnostics != null); 669086"];
2112 [label="DiagnosticInfo? info = null; 669087"];
2113 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 669088"];
2114 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 669089"];
2115 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 669090"];
2116 [label="return kind; 669091"];
2117 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 669092"];
2118 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 669093"];
2119 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 669094"];
2120 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 669095"];
2121 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 669096"];
2122 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 669097"];
2123 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 669098"];
2124 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 669099"];
2125 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 669100"];
2126 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 669101"];
2127 [label="param ValidateNameConflictsInScope(Symbol? symbol) 669102"];
2128 [label="param ValidateNameConflictsInScope(Location location) 669103"];
2129 [label="param ValidateNameConflictsInScope(string name) 669104"];
2130 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 669105"];
2131 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 669106"];
2132 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 669107"];
2133 [label="var scope = binder as LocalScopeBinder; 669108"];
2134 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 669109"];
2135 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 669110"];
2136 [label="binder.IsNestedFunctionBinder 669111"];
2137 [label="=> false 669112"];
2138 [label="false 669113"];
2139 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 669114"];
2140 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 669115"];
2141 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 669116"];
2142 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 669117"];
2143 [label="return false; 669118"];
2144 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 669119"];
2145 [label="pNames?.Free(); 669120"];
2146 [label="return bindPredefined(syntax, diagnostics); 669121"];
2147 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 669122"];
2148 [label="param GetSpecialType(DiagnosticBag diagnostics) 669123"];
2149 [label="param GetSpecialType(DiagnosticBag diagnostics) 669124"];
2150 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 669125"];
2151 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 669126"];
2152 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 669127"];
2153 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 669128"];
2154 [label="Debug.Assert(typeWithAnnotations.HasType); 669129"];
2155 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 669130"];
2156 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 669131"];
2157 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 669132"];
2158 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 669133"];
2159 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 669134"];
2160 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 669135"];
2161 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 669136"];
2162 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 669137"];
2163 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 669138"];
2164 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 669139"];
2165 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 669140"];
2166 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 669141"];
2167 [label="RoslynDebug.Assert(diagnostics != null); 669142"];
2168 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 669143"];
2169 [label="return kind; 669144"];
2170 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 669145"];
2171 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 669146"];
2172 [label="=> _symbol?.Kind == SymbolKind.Alias 669147"];
2173 [label="_symbol 669148"];
2174 [label="_symbol?.Kind == SymbolKind.Alias 669149"];
2175 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 669150"];
2176 [label="param TypeConversions(AssemblySymbol corLibrary) 669151"];
2177 [label="param TypeConversions(bool includeNullability = false) 669152"];
2178 [label="param TypeConversions(this) 669153"];
2179 [label="corLibrary 669154"];
2180 [label="0 669155"];
2181 [label="includeNullability 669156"];
2182 [label="null 669157"];
2183 [label="param TypeConversions(this) 669158"];
2184 [label="param TypeConversions(AssemblySymbol corLibrary) 669159"];
2185 [label="param TypeConversions(int currentRecursionDepth) 669160"];
2186 [label="param TypeConversions(bool includeNullability) 669161"];
2187 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 669162"];
2188 [label="param TypeConversions(this) 669163"];
2189 [label="50 669164"];
2190 [label="MaximumRecursionDepth = 50 669165"];
2191 [label="false 669166"];
2192 [label="F = false 669167"];
2193 [label="true 669168"];
2194 [label="T = true 669169"];
2195 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 669170"];
2196 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 669171"];
2197 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 669172"];
2198 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 669173"];
2199 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 669174"];
2200 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 669175"];
2201 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 669176"];
2202 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 669177"];
2203 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 669178"];
2204 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 669179"];
2205 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 669180"];
2206 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 669181"];
2207 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 669182"];
2208 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 669183"];
2209 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 669184"];
2210 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 669185"];
2211 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 669186"];
2212 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 669187"];
2213 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 669188"];
2214 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 669189"];
2215 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 669190"];
2216 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 669191"];
2217 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 669192"];
2218 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 669193"];
2219 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 669194"];
2220 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 669195"];
2221 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 669196"];
2222 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 669197"];
2223 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 669198"];
2224 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 669199"];
2225 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 669200"];
2226 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 669201"];
2227 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 669202"];
2228 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 669203"];
2229 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669204"];
2230 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669205"];
2231 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669206"];
2232 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669207"];
2233 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669208"];
2234 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669209"];
2235 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669210"];
2236 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669211"];
2237 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669212"];
2238 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669213"];
2239 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669214"];
2240 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669215"];
2241 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669216"];
2242 [label="s_implicitNumericConversions =\n        {\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 669217"];
2243 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 669218"];
2244 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 669219"];
2245 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 669220"];
2246 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 669221"];
2247 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 669222"];
2248 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 669223"];
2249 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 669224"];
2250 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 669225"];
2251 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 669226"];
2252 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 669227"];
2253 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 669228"];
2254 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 669229"];
2255 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 669230"];
2256 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 669231"];
2257 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 669232"];
2258 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 669233"];
2259 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 669234"];
2260 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 669235"];
2261 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 669236"];
2262 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 669237"];
2263 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 669238"];
2264 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 669239"];
2265 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 669240"];
2266 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 669241"];
2267 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 669242"];
2268 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 669243"];
2269 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 669244"];
2270 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 669245"];
2271 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 669246"];
2272 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 669247"];
2273 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 669248"];
2274 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 669249"];
2275 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 669250"];
2276 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 669251"];
2277 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 669252"];
2278 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 669253"];
2279 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669254"];
2280 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669255"];
2281 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669256"];
2282 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669257"];
2283 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669258"];
2284 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669259"];
2285 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669260"];
2286 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669261"];
2287 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669262"];
2288 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669263"];
2289 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669264"];
2290 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669265"];
2291 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669266"];
2292 [label="s_explicitNumericConversions =\n        {\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 669267"];
2293 [label="corLibrary 669268"];
2294 [label="currentRecursionDepth 669269"];
2295 [label="includeNullability 669270"];
2296 [label="otherNullabilityOpt 669271"];
2297 [label="param TypeConversions(this) 669272"];
2298 [label="param ConversionsBase(AssemblySymbol corLibrary) 669273"];
2299 [label="param ConversionsBase(int currentRecursionDepth) 669274"];
2300 [label="param ConversionsBase(bool includeNullability) 669275"];
2301 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 669276"];
2302 [label="param ConversionsBase(this) 669277"];
2303 [label="corLibrary 669278"];
2304 [label="currentRecursionDepth 669279"];
2305 [label="IncludeNullability 669280"];
2306 [label="_lazyOtherNullability 669281"];
2307 [label="Debug.Assert((object)corLibrary != null); 669282"];
2308 [label="Debug.Assert((object)corLibrary != null); 669283"];
2309 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 669284"];
2310 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 669285"];
2311 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 669286"];
2312 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 669287"];
2313 [label="this.corLibrary 669288"];
2314 [label="this.currentRecursionDepth 669289"];
2315 [label="IncludeNullability 669290"];
2316 [label="_lazyOtherNullability 669291"];
2317 [label="var diagnostics = c.GetDiagnostics(); 669292"];
2318 [label="diagnostics.Verify(expected); 669293"];
2319 [label="diagnostics.Verify(expected); 669294"];
2320 [label="diagnostics.Verify(expected) 669295"];
2321 [label="param Verify(this ImmutableArray<Diagnostic> actual) 669296"];
2322 [label="param Verify(params DiagnosticDescription[] expected) 669297"];
2323 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 669298"];
2324 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 669299"];
2325 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 669300"];
2326 [label="param Verify(this IEnumerable<Diagnostic> actual) 669301"];
2327 [label="param Verify(params DiagnosticDescription[] expected) 669302"];
2328 [label="Verify(actual, expected, errorCodeOnly: false); 669303"];
2329 [label="Verify(actual, expected, errorCodeOnly: false); 669304"];
2330 [label="Verify(actual, expected, errorCodeOnly: false); 669305"];
2331 [label="Verify(actual, expected, errorCodeOnly: false) 669306"];
2332 [label="param Verify(IEnumerable<Diagnostic> actual) 669307"];
2333 [label="param Verify(DiagnosticDescription[] expected) 669308"];
2334 [label="param Verify(bool errorCodeOnly) 669309"];
2335 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 669310"];
2336 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 669311"];
2337 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 669312"];
2338 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 669313"];
2339 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 669314"];
2340 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 669315"];
2341 [label="=> _defaultSeverityOpt 669316"];
2342 [label="_defaultSeverityOpt 669317"];
2343 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 669318"];
2344 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 669319"];
2345 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 669320"];
2346 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 669321"];
2347 [label="=> _effectiveSeverityOpt 669322"];
2348 [label="_effectiveSeverityOpt 669323"];
2349 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 669324"];
2350 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 669325"];
2351 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 669326"];
2352 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 669327"];
2353 [label="param DiagnosticDescription(Diagnostic d) 669328"];
2354 [label="param DiagnosticDescription(bool errorCodeOnly) 669329"];
2355 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 669330"];
2356 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 669331"];
2357 [label="param DiagnosticDescription(this) 669332"];
2358 [label="_code 669333"];
2359 [label="_isWarningAsError 669334"];
2360 [label="_isSuppressed 669335"];
2361 [label="_squiggledText 669336"];
2362 [label="_arguments 669337"];
2363 [label="_startPosition 669338"];
2364 [label="_argumentOrderDoesNotMatter 669339"];
2365 [label="_errorCodeType 669340"];
2366 [label="_defaultSeverityOpt 669341"];
2367 [label="_effectiveSeverityOpt 669342"];
2368 [label="_syntaxPredicate 669343"];
2369 [label="_code 669344"];
2370 [label="_isWarningAsError 669345"];
2371 [label="_isSuppressed 669346"];
2372 [label="_location 669347"];
2373 [label="includeDefaultSeverity 669348"];
2374 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 669349"];
2375 [label="_defaultSeverityOpt 669350"];
2376 [label="includeEffectiveSeverity 669351"];
2377 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 669352"];
2378 [label="_effectiveSeverityOpt 669353"];
2379 [label="DiagnosticWithInfo dinfo = null; 669354"];
2380 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 669355"];
2381 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 669356"];
2382 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 669357"];
2383 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 669358"];
2384 [label="dinfo = d as DiagnosticWithInfo; 669359"];
2385 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 669360"];
2386 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 669361"];
2387 [label="_errorCodeType 669362"];
2388 [label="_code 669363"];
2389 [label="_ignoreArgumentsWhenComparing 669364"];
2390 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 669365"];
2391 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 669366"];
2392 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 669367"];
2393 [label="_squiggledText 669368"];
2394 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 669369"];
2395 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 669370"];
2396 [label="_arguments 669371"];
2397 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 669372"];
2398 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 669373"];
2399 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 669374"];
2400 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 669375"];
2401 [label="_startPosition 669376"];
2402 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 669377"];
2403 [label="_code 669378"];
2404 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 669379"];
2405 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 669380"];
2406 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 669381"];
2407 [label="int index = unmatched.IndexOf(d); 669382"];
2408 [label="int index = unmatched.IndexOf(d); 669383"];
2409 [label="param Equals(object obj) 669384"];
2410 [label="param Equals(this) 669385"];
2411 [label="var d = obj as DiagnosticDescription; 669386"];
2412 [label="if (d == null)\n                return false; 669387"];
2413 [label="if (d == null)\n                return false; 669388"];
2414 [label="if (!_code.Equals(d._code))\n                return false; 669389"];
2415 [label="if (!_code.Equals(d._code))\n                return false; 669390"];
2416 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 669391"];
2417 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 669392"];
2418 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 669393"];
2419 [label="if (_squiggledText != d._squiggledText)\n                    return false; 669394"];
2420 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 669395"];
2421 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 669396"];
2422 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 669397"];
2423 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 669398"];
2424 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 669399"];
2425 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 669400"];
2426 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 669401"];
2427 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 669402"];
2428 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 669403"];
2429 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 669404"];
2430 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 669405"];
2431 [label="if (d._arguments == null)\n                    return false; 669406"];
2432 [label="GetArgumentsAsStrings() 669407"];
2433 [label="param GetArgumentsAsStrings(this) 669408"];
2434 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 669409"];
2435 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 669410"];
2436 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 669411"];
2437 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 669412"];
2438 [label="_argumentsAsStrings 669413"];
2439 [label="return _argumentsAsStrings; 669414"];
2440 [label="var args1 = GetArgumentsAsStrings(); 669415"];
2441 [label="d.GetArgumentsAsStrings() 669416"];
2442 [label="param GetArgumentsAsStrings(this) 669417"];
2443 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 669418"];
2444 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 669419"];
2445 [label="return _argumentsAsStrings; 669420"];
2446 [label="var args2 = d.GetArgumentsAsStrings(); 669421"];
2447 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 669422"];
2448 [label="if (!args1.SequenceEqual(args2))\n                        return false; 669423"];
2449 [label="if (!args1.SequenceEqual(args2))\n                        return false; 669424"];
2450 [label="if (!args1.SequenceEqual(args2))\n                        return false; 669425"];
2451 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 669426"];
2452 [label="return true; 669427"];
2453 [label="int index = unmatched.IndexOf(d); 669428"];
2454 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 669429"];
2455 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 669430"];
2456 [label="unmatched.RemoveAt(index); 669431"];
2457 [label="if (d == null)\n                return false; 669432"];
2458 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 669433"];
2459 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 669434"];
2460 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 669435"];
2461 [label="if (_squiggledText != d._squiggledText)\n                    return false; 669436"];
2462 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 669437"];
2463 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 669438"];
2464 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 669439"];
2465 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 669440"];
2466 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 669441"];
2467 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 669442"];
2468 [label="if (d._arguments == null)\n                    return false; 669443"];
2469 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 669444"];
2470 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 669445"];
2471 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 669446"];
2472 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 669447"];
2473 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 669448"];
2474 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 669449"];
2475 [label="DiagnosticDescription.GetAssertText(expected, actual) 669450"];
2476 [label="param GetAssertText(DiagnosticDescription[] expected) 669451"];
2477 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 669452"];
2478 [label="const int CSharp = 1; 669453"];
2479 [label="const int VisualBasic = 2; 669454"];
2480 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 669455"];
2481 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 669456"];
2482 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 669457"];
2483 [label="actual.Any() && actual.First() is CSDiagnostic 669458"];
2484 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 669459"];
2485 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 669460"];
2486 [label="int indentDepth = (language == CSharp) ? 4 : 1; 669461"];
2487 [label="(language == CSharp) 669462"];
2488 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 669463"];
2489 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 669464"];
2490 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 669465"];
2491 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 669466"];
2492 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 669467"];
2493 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 669468"];
2494 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 669469"];
2495 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 669470"];
2496 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 669471"];
2497 [label="IsSortedOrEmpty(expected) 669472"];
2498 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 669473"];
2499 [label="new LinePositionComparer() 669474"];
2500 [label="param LinePositionComparer(this) 669475"];
2501 [label="Instance = new LinePositionComparer() 669476"];
2502 [label="var comparer = LinePositionComparer.Instance; 669477"];
2503 [label="DiagnosticDescription last = null; 669478"];
2504 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 669479"];
2505 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 669480"];
2506 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 669481"];
2507 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 669482"];
2508 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 669483"];
2509 [label="last = diagnostic; 669484"];
2510 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 669485"];
2511 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 669486"];
2512 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 669487"];
2513 [label="comparer.Compare(last._startPosition, diagnostic._startPosition) 669488"];
2514 [label="param Compare(LinePosition? x) 669489"];
2515 [label="param Compare(LinePosition? y) 669490"];
2516 [label="param Compare(this) 669491"];
2517 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 669492"];
2518 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 669493"];
2519 [label="if (y == null)\n                {\n                    return 1;\n                } 669494"];
2520 [label="if (y == null)\n                {\n                    return 1;\n                } 669495"];
2521 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 669496"];
2522 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 669497"];
2523 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 669498"];
2524 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 669499"];
2525 [label="return lineDiff; 669500"];
2526 [label="return true; 669501"];
2527 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 669502"];
2528 [label="actual = Sort(actual); 669503"];
2529 [label="Sort(actual) 669504"];
2530 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 669505"];
2531 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 669506"];
2532 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 669507"];
2533 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 669508"];
2534 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 669509"];
2535 [label="var assertText = new StringBuilder(); 669510"];
2536 [label="assertText.AppendLine(); 669511"];
2537 [label="int i; 669512"];
2538 [label="assertText.AppendLine('Expected:'); 669513"];
2539 [label="assertText.AppendLine('Expected:'); 669514"];
2540 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 669515"];
2541 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 669516"];
2542 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 669517"];
2543 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 669518"];
2544 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 669519"];
2545 [label="GetDiagnosticDescription(d, indentDepth) 669520"];
2546 [label="param GetDiagnosticDescription(DiagnosticDescription d) 669521"];
2547 [label="param GetDiagnosticDescription(int indentDepth) 669522"];
2548 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669523"];
2549 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669524"];
2550 [label="d.ToString() 669525"];
2551 [label="param ToString(this) 669526"];
2552 [label="var sb = new StringBuilder(); 669527"];
2553 [label="sb.Append('Diagnostic('); 669528"];
2554 [label="sb.Append('Diagnostic('); 669529"];
2555 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 669530"];
2556 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 669531"];
2557 [label="sb.Append(_errorCodeType.Name); 669532"];
2558 [label="sb.Append(_errorCodeType.Name); 669533"];
2559 [label="sb.Append('.'); 669534"];
2560 [label="sb.Append('.'); 669535"];
2561 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 669536"];
2562 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 669537"];
2563 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 669538"];
2564 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 669539"];
2565 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 669540"];
2566 [label="sb.Append(', \\''); 669541"];
2567 [label="sb.Append(', \\''); 669542"];
2568 [label="sb.Append(_squiggledText); 669543"];
2569 [label="sb.Append(_squiggledText); 669544"];
2570 [label="sb.Append('''); 669545"];
2571 [label="sb.Append('''); 669546"];
2572 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 669547"];
2573 [label="sb.Append(')'); 669548"];
2574 [label="sb.Append(')'); 669549"];
2575 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 669550"];
2576 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 669551"];
2577 [label="sb.Append('.WithArguments('); 669552"];
2578 [label="sb.Append('.WithArguments('); 669553"];
2579 [label="GetArgumentsAsStrings() 669554"];
2580 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 669555"];
2581 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 669556"];
2582 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 669557"];
2583 [label="sb.Append('\\''); 669558"];
2584 [label="sb.Append('\\''); 669559"];
2585 [label="sb.Append(argumentStrings.Current); 669560"];
2586 [label="sb.Append(argumentStrings.Current); 669561"];
2587 [label="sb.Append('\\''); 669562"];
2588 [label="sb.Append('\\''); 669563"];
2589 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 669564"];
2590 [label="sb.Append(', '); 669565"];
2591 [label="sb.Append(', '); 669566"];
2592 [label="sb.Append(')'); 669567"];
2593 [label="sb.Append(')'); 669568"];
2594 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 669569"];
2595 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 669570"];
2596 [label="sb.Append('.WithLocation('); 669571"];
2597 [label="sb.Append('.WithLocation('); 669572"];
2598 [label="sb.Append(_startPosition.Value.Line + 1); 669573"];
2599 [label="sb.Append(_startPosition.Value.Line + 1); 669574"];
2600 [label="sb.Append(', '); 669575"];
2601 [label="sb.Append(', '); 669576"];
2602 [label="sb.Append(_startPosition.Value.Character + 1); 669577"];
2603 [label="sb.Append(_startPosition.Value.Character + 1); 669578"];
2604 [label="sb.Append(')'); 669579"];
2605 [label="sb.Append(')'); 669580"];
2606 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 669581"];
2607 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 669582"];
2608 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 669583"];
2609 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 669584"];
2610 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 669585"];
2611 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 669586"];
2612 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 669587"];
2613 [label="return sb.ToString(); 669588"];
2614 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669589"];
2615 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669590"];
2616 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 669591"];
2617 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 669592"];
2618 [label="param GetDiagnosticDescription(int indentDepth) 669593"];
2619 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669594"];
2620 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669595"];
2621 [label="var sb = new StringBuilder(); 669596"];
2622 [label="sb.Append('Diagnostic('); 669597"];
2623 [label="sb.Append('Diagnostic('); 669598"];
2624 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 669599"];
2625 [label="sb.Append(_errorCodeType.Name); 669600"];
2626 [label="sb.Append(_errorCodeType.Name); 669601"];
2627 [label="sb.Append('.'); 669602"];
2628 [label="sb.Append('.'); 669603"];
2629 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 669604"];
2630 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 669605"];
2631 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 669606"];
2632 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 669607"];
2633 [label="sb.Append(', \\''); 669608"];
2634 [label="sb.Append(', \\''); 669609"];
2635 [label="sb.Append(_squiggledText); 669610"];
2636 [label="sb.Append(_squiggledText); 669611"];
2637 [label="sb.Append('''); 669612"];
2638 [label="sb.Append('''); 669613"];
2639 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 669614"];
2640 [label="sb.Append(')'); 669615"];
2641 [label="sb.Append(')'); 669616"];
2642 [label="sb.Append('.WithArguments('); 669617"];
2643 [label="sb.Append('.WithArguments('); 669618"];
2644 [label="sb.Append('\\''); 669619"];
2645 [label="sb.Append(argumentStrings.Current); 669620"];
2646 [label="sb.Append(argumentStrings.Current); 669621"];
2647 [label="sb.Append('\\''); 669622"];
2648 [label="sb.Append(', '); 669623"];
2649 [label="sb.Append(')'); 669624"];
2650 [label="sb.Append(')'); 669625"];
2651 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 669626"];
2652 [label="sb.Append('.WithLocation('); 669627"];
2653 [label="sb.Append('.WithLocation('); 669628"];
2654 [label="sb.Append(_startPosition.Value.Line + 1); 669629"];
2655 [label="sb.Append(_startPosition.Value.Line + 1); 669630"];
2656 [label="sb.Append(', '); 669631"];
2657 [label="sb.Append(', '); 669632"];
2658 [label="sb.Append(_startPosition.Value.Character + 1); 669633"];
2659 [label="sb.Append(_startPosition.Value.Character + 1); 669634"];
2660 [label="sb.Append(')'); 669635"];
2661 [label="sb.Append(')'); 669636"];
2662 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 669637"];
2663 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 669638"];
2664 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 669639"];
2665 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 669640"];
2666 [label="return sb.ToString(); 669641"];
2667 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669642"];
2668 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669643"];
2669 [label="GetCommaSeparatedLines(assertText, expectedText); 669644"];
2670 [label="GetCommaSeparatedLines(assertText, expectedText); 669645"];
2671 [label="GetCommaSeparatedLines(assertText, expectedText) 669646"];
2672 [label="param GetCommaSeparatedLines(StringBuilder sb) 669647"];
2673 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 669648"];
2674 [label="int n = lines.Count; 669649"];
2675 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 669650"];
2676 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 669651"];
2677 [label="sb.Append(lines[i]); 669652"];
2678 [label="sb.Append(lines[i]); 669653"];
2679 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 669654"];
2680 [label="sb.Append(','); 669655"];
2681 [label="sb.Append(','); 669656"];
2682 [label="sb.AppendLine(); 669657"];
2683 [label="GetCommaSeparatedLines(assertText, expectedText); 669658"];
2684 [label="assertText.AppendLine('Actual:'); 669659"];
2685 [label="assertText.AppendLine('Actual:'); 669660"];
2686 [label="var actualText = ArrayBuilder<string>.GetInstance(); 669661"];
2687 [label="var e = actual.GetEnumerator(); 669662"];
2688 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 669663"];
2689 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 669664"];
2690 [label="param Compare(LinePosition? x) 669665"];
2691 [label="param Compare(LinePosition? y) 669666"];
2692 [label="param Compare(this) 669667"];
2693 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 669668"];
2694 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 669669"];
2695 [label="if (y == null)\n                {\n                    return 1;\n                } 669670"];
2696 [label="if (y == null)\n                {\n                    return 1;\n                } 669671"];
2697 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 669672"];
2698 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 669673"];
2699 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 669674"];
2700 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 669675"];
2701 [label="return lineDiff; 669676"];
2702 [label="Diagnostic d = e.Current; 669677"];
2703 [label="string message = d.ToString(); 669678"];
2704 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 669679"];
2705 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 669680"];
2706 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 669681"];
2707 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 669682"];
2708 [label="Indent(assertText, indentDepth); 669683"];
2709 [label="Indent(assertText, indentDepth); 669684"];
2710 [label="Indent(assertText, indentDepth) 669685"];
2711 [label="param Indent(StringBuilder sb) 669686"];
2712 [label="param Indent(int count) 669687"];
2713 [label="sb.Append(' ', 4 * count); 669688"];
2714 [label="sb.Append(' ', 4 * count); 669689"];
2715 [label="sb.Append(' ', 4 * count); 669690"];
2716 [label="Indent(assertText, indentDepth); 669691"];
2717 [label="assertText.Append('// '); 669692"];
2718 [label="assertText.Append('// '); 669693"];
2719 [label="assertText.AppendLine(d.ToString()); 669694"];
2720 [label="assertText.AppendLine(d.ToString()); 669695"];
2721 [label="var l = d.Location; 669696"];
2722 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 669697"];
2723 [label="Indent(assertText, indentDepth); 669698"];
2724 [label="Indent(assertText, indentDepth); 669699"];
2725 [label="Indent(assertText, indentDepth) 669700"];
2726 [label="param Indent(StringBuilder sb) 669701"];
2727 [label="param Indent(int count) 669702"];
2728 [label="sb.Append(' ', 4 * count); 669703"];
2729 [label="sb.Append(' ', 4 * count); 669704"];
2730 [label="sb.Append(' ', 4 * count); 669705"];
2731 [label="Indent(assertText, indentDepth); 669706"];
2732 [label="assertText.Append('// '); 669707"];
2733 [label="assertText.Append('// '); 669708"];
2734 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 669709"];
2735 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 669710"];
2736 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 669711"];
2737 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 669712"];
2738 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 669713"];
2739 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 669714"];
2740 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 669715"];
2741 [label="param DiagnosticDescription(Diagnostic d) 669716"];
2742 [label="param DiagnosticDescription(bool errorCodeOnly) 669717"];
2743 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 669718"];
2744 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 669719"];
2745 [label="param DiagnosticDescription(this) 669720"];
2746 [label="_code 669721"];
2747 [label="_isWarningAsError 669722"];
2748 [label="_isSuppressed 669723"];
2749 [label="_squiggledText 669724"];
2750 [label="_arguments 669725"];
2751 [label="_startPosition 669726"];
2752 [label="_errorCodeType 669727"];
2753 [label="_defaultSeverityOpt 669728"];
2754 [label="_effectiveSeverityOpt 669729"];
2755 [label="_code 669730"];
2756 [label="_isWarningAsError 669731"];
2757 [label="_isSuppressed 669732"];
2758 [label="_location 669733"];
2759 [label="DiagnosticWithInfo dinfo = null; 669734"];
2760 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 669735"];
2761 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 669736"];
2762 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 669737"];
2763 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 669738"];
2764 [label="var diffDescription = description; 669739"];
2765 [label="var idx = Array.IndexOf(expected, description); 669740"];
2766 [label="var idx = Array.IndexOf(expected, description); 669741"];
2767 [label="var idx = Array.IndexOf(expected, description); 669742"];
2768 [label="var idx = Array.IndexOf(expected, description); 669743"];
2769 [label="if (d == null)\n                return false; 669744"];
2770 [label="if (d == null)\n                return false; 669745"];
2771 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 669746"];
2772 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 669747"];
2773 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 669748"];
2774 [label="if (_squiggledText != d._squiggledText)\n                    return false; 669749"];
2775 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 669750"];
2776 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 669751"];
2777 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 669752"];
2778 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 669753"];
2779 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 669754"];
2780 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 669755"];
2781 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 669756"];
2782 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 669757"];
2783 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 669758"];
2784 [label="if (d._arguments == null)\n                    return false; 669759"];
2785 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 669760"];
2786 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 669761"];
2787 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 669762"];
2788 [label="diffDescription = expected[idx]; 669763"];
2789 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 669764"];
2790 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 669765"];
2791 [label="GetDiagnosticDescription(description, indentDepth) 669766"];
2792 [label="param GetDiagnosticDescription(DiagnosticDescription d) 669767"];
2793 [label="param GetDiagnosticDescription(int indentDepth) 669768"];
2794 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669769"];
2795 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669770"];
2796 [label="var sb = new StringBuilder(); 669771"];
2797 [label="sb.Append('Diagnostic('); 669772"];
2798 [label="sb.Append('Diagnostic('); 669773"];
2799 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 669774"];
2800 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 669775"];
2801 [label="sb.Append(_errorCodeType.Name); 669776"];
2802 [label="sb.Append(_errorCodeType.Name); 669777"];
2803 [label="sb.Append('.'); 669778"];
2804 [label="sb.Append('.'); 669779"];
2805 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 669780"];
2806 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 669781"];
2807 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 669782"];
2808 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 669783"];
2809 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 669784"];
2810 [label="sb.Append(', \\''); 669785"];
2811 [label="sb.Append(', \\''); 669786"];
2812 [label="sb.Append(_squiggledText); 669787"];
2813 [label="sb.Append(_squiggledText); 669788"];
2814 [label="sb.Append('''); 669789"];
2815 [label="sb.Append('''); 669790"];
2816 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 669791"];
2817 [label="sb.Append(')'); 669792"];
2818 [label="sb.Append(')'); 669793"];
2819 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 669794"];
2820 [label="sb.Append('.WithArguments('); 669795"];
2821 [label="sb.Append('.WithArguments('); 669796"];
2822 [label="sb.Append('\\''); 669797"];
2823 [label="sb.Append('\\''); 669798"];
2824 [label="sb.Append(argumentStrings.Current); 669799"];
2825 [label="sb.Append(argumentStrings.Current); 669800"];
2826 [label="sb.Append('\\''); 669801"];
2827 [label="sb.Append('\\''); 669802"];
2828 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 669803"];
2829 [label="sb.Append(', '); 669804"];
2830 [label="sb.Append(', '); 669805"];
2831 [label="sb.Append(')'); 669806"];
2832 [label="sb.Append(')'); 669807"];
2833 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 669808"];
2834 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 669809"];
2835 [label="sb.Append('.WithLocation('); 669810"];
2836 [label="sb.Append('.WithLocation('); 669811"];
2837 [label="sb.Append(_startPosition.Value.Line + 1); 669812"];
2838 [label="sb.Append(_startPosition.Value.Line + 1); 669813"];
2839 [label="sb.Append(', '); 669814"];
2840 [label="sb.Append(', '); 669815"];
2841 [label="sb.Append(_startPosition.Value.Character + 1); 669816"];
2842 [label="sb.Append(_startPosition.Value.Character + 1); 669817"];
2843 [label="sb.Append(')'); 669818"];
2844 [label="sb.Append(')'); 669819"];
2845 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 669820"];
2846 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 669821"];
2847 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 669822"];
2848 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 669823"];
2849 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 669824"];
2850 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 669825"];
2851 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 669826"];
2852 [label="return sb.ToString(); 669827"];
2853 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669828"];
2854 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669829"];
2855 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 669830"];
2856 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 669831"];
2857 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 669832"];
2858 [label="GetDiagnosticDescription(diffDescription, indentDepth) 669833"];
2859 [label="param GetDiagnosticDescription(DiagnosticDescription d) 669834"];
2860 [label="param GetDiagnosticDescription(int indentDepth) 669835"];
2861 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669836"];
2862 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669837"];
2863 [label="var sb = new StringBuilder(); 669838"];
2864 [label="sb.Append('Diagnostic('); 669839"];
2865 [label="sb.Append('Diagnostic('); 669840"];
2866 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 669841"];
2867 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 669842"];
2868 [label="sb.Append(_errorCodeType.Name); 669843"];
2869 [label="sb.Append(_errorCodeType.Name); 669844"];
2870 [label="sb.Append('.'); 669845"];
2871 [label="sb.Append('.'); 669846"];
2872 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 669847"];
2873 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 669848"];
2874 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 669849"];
2875 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 669850"];
2876 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 669851"];
2877 [label="sb.Append(', \\''); 669852"];
2878 [label="sb.Append(', \\''); 669853"];
2879 [label="sb.Append(_squiggledText); 669854"];
2880 [label="sb.Append(_squiggledText); 669855"];
2881 [label="sb.Append('''); 669856"];
2882 [label="sb.Append('''); 669857"];
2883 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 669858"];
2884 [label="sb.Append(')'); 669859"];
2885 [label="sb.Append(')'); 669860"];
2886 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 669861"];
2887 [label="sb.Append('.WithArguments('); 669862"];
2888 [label="sb.Append('.WithArguments('); 669863"];
2889 [label="sb.Append('\\''); 669864"];
2890 [label="sb.Append('\\''); 669865"];
2891 [label="sb.Append(argumentStrings.Current); 669866"];
2892 [label="sb.Append(argumentStrings.Current); 669867"];
2893 [label="sb.Append('\\''); 669868"];
2894 [label="sb.Append('\\''); 669869"];
2895 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 669870"];
2896 [label="sb.Append(', '); 669871"];
2897 [label="sb.Append(', '); 669872"];
2898 [label="sb.Append(')'); 669873"];
2899 [label="sb.Append(')'); 669874"];
2900 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 669875"];
2901 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 669876"];
2902 [label="sb.Append('.WithLocation('); 669877"];
2903 [label="sb.Append('.WithLocation('); 669878"];
2904 [label="sb.Append(_startPosition.Value.Line + 1); 669879"];
2905 [label="sb.Append(_startPosition.Value.Line + 1); 669880"];
2906 [label="sb.Append(', '); 669881"];
2907 [label="sb.Append(', '); 669882"];
2908 [label="sb.Append(_startPosition.Value.Character + 1); 669883"];
2909 [label="sb.Append(_startPosition.Value.Character + 1); 669884"];
2910 [label="sb.Append(')'); 669885"];
2911 [label="sb.Append(')'); 669886"];
2912 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 669887"];
2913 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 669888"];
2914 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 669889"];
2915 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 669890"];
2916 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 669891"];
2917 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 669892"];
2918 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 669893"];
2919 [label="return sb.ToString(); 669894"];
2920 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669895"];
2921 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669896"];
2922 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 669897"];
2923 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 669898"];
2924 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 669899"];
2925 [label="assertText.AppendLine(','); 669900"];
2926 [label="assertText.AppendLine(','); 669901"];
2927 [label="Indent(assertText, indentDepth); 669902"];
2928 [label="Indent(assertText, indentDepth); 669903"];
2929 [label="Indent(assertText, indentDepth) 669904"];
2930 [label="param Indent(StringBuilder sb) 669905"];
2931 [label="param Indent(int count) 669906"];
2932 [label="sb.Append(' ', 4 * count); 669907"];
2933 [label="sb.Append(' ', 4 * count); 669908"];
2934 [label="Indent(assertText, indentDepth); 669909"];
2935 [label="assertText.Append('// '); 669910"];
2936 [label="Indent(assertText, indentDepth); 669911"];
2937 [label="Indent(assertText, indentDepth); 669912"];
2938 [label="Indent(assertText, indentDepth) 669913"];
2939 [label="param Indent(StringBuilder sb) 669914"];
2940 [label="param Indent(int count) 669915"];
2941 [label="sb.Append(' ', 4 * count); 669916"];
2942 [label="sb.Append(' ', 4 * count); 669917"];
2943 [label="Indent(assertText, indentDepth); 669918"];
2944 [label="assertText.Append('// '); 669919"];
2945 [label="_code 669920"];
2946 [label="_isWarningAsError 669921"];
2947 [label="_isSuppressed 669922"];
2948 [label="_squiggledText 669923"];
2949 [label="_arguments 669924"];
2950 [label="_startPosition 669925"];
2951 [label="_errorCodeType 669926"];
2952 [label="_defaultSeverityOpt 669927"];
2953 [label="_effectiveSeverityOpt 669928"];
2954 [label="_code 669929"];
2955 [label="DiagnosticWithInfo dinfo = null; 669930"];
2956 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 669931"];
2957 [label="var diffDescription = description; 669932"];
2958 [label="if (d == null)\n                return false; 669933"];
2959 [label="return false; 669934"];
2960 [label="if (d == null)\n                return false; 669935"];
2961 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 669936"];
2962 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 669937"];
2963 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 669938"];
2964 [label="if (_squiggledText != d._squiggledText)\n                    return false; 669939"];
2965 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 669940"];
2966 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 669941"];
2967 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 669942"];
2968 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 669943"];
2969 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 669944"];
2970 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 669945"];
2971 [label="if (d._arguments == null)\n                    return false; 669946"];
2972 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 669947"];
2973 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 669948"];
2974 [label="param GetDiagnosticDescription(int indentDepth) 669949"];
2975 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669950"];
2976 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 669951"];
2977 [label="var sb = new StringBuilder(); 669952"];
2978 [label="sb.Append('Diagnostic('); 669953"];
2979 [label="sb.Append('Diagnostic('); 669954"];
2980 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 669955"];
2981 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 669956"];
2982 [label="sb.Append(_errorCodeType.Name); 669957"];
2983 [label="sb.Append(_errorCodeType.Name); 669958"];
2984 [label="sb.Append('.'); 669959"];
2985 [label="sb.Append('.'); 669960"];
2986 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 669961"];
2987 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 669962"];
2988 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 669963"];
2989 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 669964"];
2990 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 669965"];
2991 [label="sb.Append(', \\''); 669966"];
2992 [label="sb.Append(', \\''); 669967"];
2993 [label="sb.Append(_squiggledText); 669968"];
2994 [label="sb.Append(_squiggledText); 669969"];
2995 [label="sb.Append('''); 669970"];
2996 [label="sb.Append('''); 669971"];
2997 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 669972"];
2998 [label="sb.Append(')'); 669973"];
2999 [label="sb.Append(')'); 669974"];
3000 [label="sb.Append('.WithArguments('); 669975"];
3001 [label="sb.Append('.WithArguments('); 669976"];
3002 [label="sb.Append('\\''); 669977"];
3003 [label="sb.Append('\\''); 669978"];
3004 [label="sb.Append(argumentStrings.Current); 669979"];
3005 [label="sb.Append(argumentStrings.Current); 669980"];
3006 [label="sb.Append('\\''); 669981"];
3007 [label="sb.Append('\\''); 669982"];
3008 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 669983"];
3009 [label="sb.Append(', '); 669984"];
3010 [label="sb.Append(', '); 669985"];
3011 [label="sb.Append(')'); 669986"];
3012 [label="sb.Append(')'); 669987"];
3013 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 669988"];
3014 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 669989"];
3015 [label="sb.Append('.WithLocation('); 669990"];
3016 [label="sb.Append('.WithLocation('); 669991"];
3017 [label="sb.Append(_startPosition.Value.Line + 1); 669992"];
3018 [label="sb.Append(_startPosition.Value.Line + 1); 669993"];
3019 [label="sb.Append(', '); 669994"];
3020 [label="sb.Append(', '); 669995"];
3021 [label="sb.Append(_startPosition.Value.Character + 1); 669996"];
3022 [label="sb.Append(_startPosition.Value.Character + 1); 669997"];
3023 [label="sb.Append(')'); 669998"];
3024 [label="sb.Append(')'); 669999"];
3025 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 670000"];
3026 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 670001"];
3027 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 670002"];
3028 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 670003"];
3029 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 670004"];
3030 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 670005"];
3031 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 670006"];
3032 [label="return sb.ToString(); 670007"];
3033 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 670008"];
3034 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 670009"];
3035 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 670010"];
3036 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 670011"];
3037 [label="param GetDiagnosticDescription(int indentDepth) 670012"];
3038 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 670013"];
3039 [label="sb.Append(_errorCodeType.Name); 670014"];
3040 [label="sb.Append(_errorCodeType.Name); 670015"];
3041 [label="sb.Append('.'); 670016"];
3042 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 670017"];
3043 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 670018"];
3044 [label="sb.Append(', \\''); 670019"];
3045 [label="sb.Append(_squiggledText); 670020"];
3046 [label="sb.Append(_squiggledText); 670021"];
3047 [label="sb.Append('''); 670022"];
3048 [label="sb.Append(')'); 670023"];
3049 [label="sb.Append('.WithArguments('); 670024"];
3050 [label="sb.Append('\\''); 670025"];
3051 [label="sb.Append(argumentStrings.Current); 670026"];
3052 [label="sb.Append('\\''); 670027"];
3053 [label="sb.Append(', '); 670028"];
3054 [label="sb.Append(')'); 670029"];
3055 [label="sb.Append('.WithLocation('); 670030"];
3056 [label="sb.Append(_startPosition.Value.Line + 1); 670031"];
3057 [label="sb.Append(', '); 670032"];
3058 [label="sb.Append(_startPosition.Value.Character + 1); 670033"];
3059 [label="sb.Append(')'); 670034"];
3060 [label="return sb.ToString(); 670035"];
3061 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 670036"];
3062 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 670037"];
3063 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 670038"];
3064 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 670039"];
3065 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 670040"];
3066 [label="assertText.AppendLine(); 670041"];
3067 [label="assertText.AppendLine('Diff:'); 670042"];
3068 [label="assertText.AppendLine('Diff:'); 670043"];
3069 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 670044"];
3070 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 670045"];
3071 [label="new[] { '\\r', '\\n' } 670046"];
3072 [label="'\\r' 670047"];
3073 [label="'\\n' 670048"];
3074 [label="new[] { '\\r', '\\n' } 670049"];
3075 [label="new[] { '\\r', '\\n' } 670050"];
3076 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 670051"];
3077 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 670052"];
3078 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 670053"];
3079 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 670054"];
3080 [label="param DiffReport(IEnumerable<T> expected) 670055"];
3081 [label="param DiffReport(IEnumerable<T> actual) 670056"];
3082 [label="param DiffReport(string separator) 670057"];
3083 [label="param DiffReport(IEqualityComparer<T> comparer = null) 670058"];
3084 [label="param DiffReport(Func<T, string> toString = null) 670059"];
3085 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 670060"];
3086 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 670061"];
3087 [label="(comparer != null) 670062"];
3088 [label="EqualityComparer<T>.Default 670063"];
3089 [label="new LCS<T>(EqualityComparer<T>.Default) 670064"];
3090 [label="param LCS(IEqualityComparer<T> comparer) 670065"];
3091 [label="param LCS(this) 670066"];
3092 [label="1 670067"];
3093 [label="DeleteCost = 1 670068"];
3094 [label="1 670069"];
3095 [label="InsertCost = 1 670070"];
3096 [label="2 670071"];
3097 [label="UpdateCost = 2 670072"];
3098 [label="param LongestCommonSubsequence(this) 670073"];
3099 [label="_comparer 670074"];
3100 [label="_comparer 670075"];
3101 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 670076"];
3102 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 670077"];
3103 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 670078"];
3104 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 670079"];
3105 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 670080"];
3106 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 670081"];
3107 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 670082"];
3108 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 670083"];
3109 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 670084"];
3110 [label="lcs.CalculateDiff(expectedList, actualList, toString) 670085"];
3111 [label="param CalculateDiff(IList<T> sequenceA) 670086"];
3112 [label="param CalculateDiff(IList<T> sequenceB) 670087"];
3113 [label="param CalculateDiff(Func<T, string> toString) 670088"];
3114 [label="param CalculateDiff(this) 670089"];
3115 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 670090"];
3116 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 670091"];
3117 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 670092"];
3118 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 670093"];
3119 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 670094"];
3120 [label="param GetEdits(TSequence sequenceA) 670095"];
3121 [label="param GetEdits(int lengthA) 670096"];
3122 [label="param GetEdits(TSequence sequenceB) 670097"];
3123 [label="param GetEdits(int lengthB) 670098"];
3124 [label="param GetEdits(this) 670099"];
3125 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 670100"];
3126 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 670101"];
3127 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 670102"];
3128 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 670103"];
3129 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 670104"];
3130 [label="param ComputeCostMatrix(TSequence sequenceA) 670105"];
3131 [label="param ComputeCostMatrix(int lengthA) 670106"];
3132 [label="param ComputeCostMatrix(TSequence sequenceB) 670107"];
3133 [label="param ComputeCostMatrix(int lengthB) 670108"];
3134 [label="param ComputeCostMatrix(this) 670109"];
3135 [label="var la = lengthA + 1; 670110"];
3136 [label="var la = lengthA + 1; 670111"];
3137 [label="var lb = lengthB + 1; 670112"];
3138 [label="var lb = lengthB + 1; 670113"];
3139 [label="var d = new int[la, lb]; 670114"];
3140 [label="d[0, 0] = 0; 670115"];
3141 [label="d[0, 0] 670116"];
3142 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 670117"];
3143 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 670118"];
3144 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 670119"];
3145 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 670120"];
3146 [label="d[i, 0] 670121"];
3147 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 670122"];
3148 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 670123"];
3149 [label="d[0, j] = d[0, j - 1] + InsertCost; 670124"];
3150 [label="d[0, j] = d[0, j - 1] + InsertCost; 670125"];
3151 [label="d[0, j] 670126"];
3152 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 670127"];
3153 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 670128"];
3154 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 670129"];
3155 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 670130"];
3156 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 670131"];
3157 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 670132"];
3158 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 670133"];
3159 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 670134"];
3160 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 670135"];
3161 [label="param ItemsEqual(IList<T> sequenceA) 670136"];
3162 [label="param ItemsEqual(int indexA) 670137"];
3163 [label="param ItemsEqual(IList<T> sequenceB) 670138"];
3164 [label="param ItemsEqual(int indexB) 670139"];
3165 [label="param ItemsEqual(this) 670140"];
3166 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 670141"];
3167 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 670142"];
3168 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 670143"];
3169 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 670144"];
3170 [label="int m2 = d[i - 1, j] + DeleteCost; 670145"];
3171 [label="int m2 = d[i - 1, j] + DeleteCost; 670146"];
3172 [label="int m3 = d[i, j - 1] + InsertCost; 670147"];
3173 [label="int m3 = d[i, j - 1] + InsertCost; 670148"];
3174 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 670149"];
3175 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 670150"];
3176 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 670151"];
3177 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 670152"];
3178 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 670153"];
3179 [label="d[i, j] 670154"];
3180 [label="return d; 670155"];
3181 [label="int i = lengthA; 670156"];
3182 [label="int j = lengthB; 670157"];
3183 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 670158"];
3184 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 670159"];
3185 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 670160"];
3186 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 670161"];
3187 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 670162"];
3188 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 670163"];
3189 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 670164"];
3190 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 670165"];
3191 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 670166"];
3192 [label="i--; 670167"];
3193 [label="j--; 670168"];
3194 [label="yield return new Edit(EditKind.Update, i, j); 670169"];
3195 [label="yield return new Edit(EditKind.Update, i, j); 670170"];
3196 [label="yield return new Edit(EditKind.Update, i, j); 670171"];
3197 [label="yield return new Edit(EditKind.Update, i, j); 670172"];
3198 [label="new Edit(EditKind.Update, i, j) 670173"];
3199 [label="param Edit(EditKind kind) 670174"];
3200 [label="param Edit(int indexA) 670175"];
3201 [label="param Edit(int indexB) 670176"];
3202 [label="param Edit(this) 670177"];
3203 [label="this.Kind 670178"];
3204 [label="this.IndexA 670179"];
3205 [label="this.IndexB 670180"];
3206 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 670181"];
3207 [label="yield return new Edit(EditKind.Update, i, j); 670182"];
3208 [label="yield return new Edit(EditKind.Update, i, j); 670183"];
3209 [label="new Edit(EditKind.Update, i, j) 670184"];
3210 [label="param Edit(EditKind kind) 670185"];
3211 [label="param Edit(int indexA) 670186"];
3212 [label="param Edit(int indexB) 670187"];
3213 [label="param Edit(this) 670188"];
3214 [label="this.Kind 670189"];
3215 [label="this.IndexA 670190"];
3216 [label="this.IndexB 670191"];
3217 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 670192"];
3218 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 670193"];
3219 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 670194"];
3220 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 670195"];
3221 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 670196"];
3222 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 670197"];
3223 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 670198"];
3224 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 670199"];
3225 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 670200"];
3226 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 670201"];
3227 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 670202"];
3228 [label="actualText.Free(); 670203"];
3229 [label="expectedText.Free(); 670204"];
3230 [label="return assertText.ToString(); 670205"];
3231 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 670206"];
3232 [label="diagnostics.Verify(expected); 670207"];
3233 [label="VerifyAssemblyIds(c, diagnostics); 670208"];
3234 [label="VerifyAssemblyIds(c, diagnostics); 670209"];
3235 [label="VerifyAssemblyIds(c, diagnostics) 670210"];
3236 [label="param VerifyAssemblyIds(TCompilation c) 670211"];
3237 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 670212"];
3238 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 670213"];
3239 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 670214"];
3240 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 670215"];
3241 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 670216"];
3242 [label="CustomAssert.True(assemblyIds.IsEmpty); 670217"];
3243 [label="CustomAssert.True(assemblyIds.IsEmpty); 670218"];
3244 [label="VerifyAssemblyIds(c, diagnostics); 670219"];
3245 [label="return c; 670220"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 237;
238 -> 234;
239 -> 227;
240 -> 229;
240 -> 239;
240 -> 227;
241 -> 238;
241 -> 240;
242 -> 218;
242 -> 215;
243 -> 219;
243 -> 215;
244 -> 221;
244 -> 215;
245 -> 222;
245 -> 215;
246 -> 223;
246 -> 215;
247 -> 215;
248 -> 224;
248 -> 247;
249 -> 241;
249 -> 247;
250 -> 242;
250 -> 247;
251 -> 243;
251 -> 247;
252 -> 244;
252 -> 247;
253 -> 245;
253 -> 247;
254 -> 246;
254 -> 247;
255 -> 248;
255 -> 247;
256 -> 249;
256 -> 247;
257 -> 250;
257 -> 247;
258 -> 251;
258 -> 247;
259 -> 252;
259 -> 247;
260 -> 253;
260 -> 247;
261 -> 254;
261 -> 247;
262 -> 247;
263 -> 262;
263 -> 247;
264 -> 247;
265 -> 255;
265 -> 264;
266 -> 256;
266 -> 264;
267 -> 257;
267 -> 264;
268 -> 258;
268 -> 264;
269 -> 259;
269 -> 264;
270 -> 260;
270 -> 264;
271 -> 261;
271 -> 264;
272 -> 263;
272 -> 264;
273 -> 268;
273 -> 264;
274 -> 270;
274 -> 264;
275 -> 264;
276 -> 273;
276 -> 275;
277 -> 274;
277 -> 275;
278 -> 265;
278 -> 275;
279 -> 278;
279 -> 212;
279 -> 275;
280 -> 279;
281 -> 277;
281 -> 279;
282 -> 276;
282 -> 279;
283 -> 279;
284 -> 280;
284 -> 283;
285 -> 281;
285 -> 283;
286 -> 282;
286 -> 283;
287 -> 280;
287 -> 283;
288 -> 283;
289 -> 286;
289 -> 288;
289 -> 283;
290 -> 0;
291 -> 0;
293 -> 290;
293 -> 291;
293 -> 292;
294 -> 293;
295 -> 0;
296 -> 294;
296 -> 293;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 294;
299 -> 293;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 294;
302 -> 293;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 294;
305 -> 293;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 294;
308 -> 293;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 294;
311 -> 293;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 294;
314 -> 293;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 294;
317 -> 293;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 294;
320 -> 293;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 294;
323 -> 293;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 294;
326 -> 293;
326 -> 325;
327 -> 326;
328 -> 294;
331 -> 328;
331 -> 330;
332 -> 329;
332 -> 330;
333 -> 330;
334 -> 331;
334 -> 293;
334 -> 330;
335 -> 330;
336 -> 332;
336 -> 330;
337 -> 333;
337 -> 330;
338 -> 336;
338 -> 337;
338 -> 330;
339 -> 338;
339 -> 335;
339 -> 330;
340 -> 334;
340 -> 335;
340 -> 293;
340 -> 339;
340 -> 338;
340 -> 330;
341 -> 340;
342 -> 0;
343 -> 342;
345 -> 343;
345 -> 344;
346 -> 294;
346 -> 293;
346 -> 345;
347 -> 346;
348 -> 0;
349 -> 348;
350 -> 294;
350 -> 293;
350 -> 349;
351 -> 350;
352 -> 0;
353 -> 294;
353 -> 293;
353 -> 352;
354 -> 353;
355 -> 318;
357 -> 356;
358 -> 0;
359 -> 0;
360 -> 0;
362 -> 358;
362 -> 359;
362 -> 360;
362 -> 361;
363 -> 357;
364 -> 362;
364 -> 363;
364 -> 356;
365 -> 364;
369 -> 366;
369 -> 367;
369 -> 368;
370 -> 300;
370 -> 293;
370 -> 299;
370 -> 366;
370 -> 369;
371 -> 370;
372 -> 312;
373 -> 321;
374 -> 321;
375 -> 318;
376 -> 0;
377 -> 0;
379 -> 376;
379 -> 378;
380 -> 377;
380 -> 378;
381 -> 378;
382 -> 379;
382 -> 378;
383 -> 380;
383 -> 378;
384 -> 0;
384 -> 378;
385 -> 381;
385 -> 378;
386 -> 378;
387 -> 382;
387 -> 383;
387 -> 384;
387 -> 385;
387 -> 386;
387 -> 378;
388 -> 387;
389 -> 0;
390 -> 0;
392 -> 389;
392 -> 391;
393 -> 390;
393 -> 391;
394 -> 391;
395 -> 392;
395 -> 391;
396 -> 393;
396 -> 391;
397 -> 0;
397 -> 391;
398 -> 394;
398 -> 391;
399 -> 391;
400 -> 395;
400 -> 396;
400 -> 397;
400 -> 398;
400 -> 399;
400 -> 391;
401 -> 400;
403 -> 388;
403 -> 387;
403 -> 402;
404 -> 403;
406 -> 401;
406 -> 400;
406 -> 405;
407 -> 406;
408 -> 0;
409 -> 0;
411 -> 408;
411 -> 410;
412 -> 409;
412 -> 410;
413 -> 410;
414 -> 411;
414 -> 410;
415 -> 412;
415 -> 410;
416 -> 0;
416 -> 410;
417 -> 413;
417 -> 410;
418 -> 410;
419 -> 414;
419 -> 415;
419 -> 416;
419 -> 417;
419 -> 418;
419 -> 410;
420 -> 419;
421 -> 0;
422 -> 0;
424 -> 421;
424 -> 423;
425 -> 422;
425 -> 423;
426 -> 423;
427 -> 424;
427 -> 423;
428 -> 425;
428 -> 423;
429 -> 0;
429 -> 423;
430 -> 426;
430 -> 423;
431 -> 423;
432 -> 427;
432 -> 428;
432 -> 429;
432 -> 430;
432 -> 431;
432 -> 423;
433 -> 432;
434 -> 0;
435 -> 0;
437 -> 434;
437 -> 436;
438 -> 435;
438 -> 436;
439 -> 436;
440 -> 437;
440 -> 436;
441 -> 438;
441 -> 436;
442 -> 0;
442 -> 436;
443 -> 439;
443 -> 436;
444 -> 436;
445 -> 440;
445 -> 441;
445 -> 442;
445 -> 443;
445 -> 444;
445 -> 436;
446 -> 445;
447 -> 0;
448 -> 0;
450 -> 447;
450 -> 449;
451 -> 448;
451 -> 449;
452 -> 449;
453 -> 450;
453 -> 449;
454 -> 451;
454 -> 449;
455 -> 0;
455 -> 449;
456 -> 452;
456 -> 449;
457 -> 449;
458 -> 453;
458 -> 454;
458 -> 455;
458 -> 456;
458 -> 457;
458 -> 449;
459 -> 458;
460 -> 0;
461 -> 0;
463 -> 460;
463 -> 462;
464 -> 461;
464 -> 462;
465 -> 462;
466 -> 463;
466 -> 462;
467 -> 464;
467 -> 462;
468 -> 0;
468 -> 462;
469 -> 465;
469 -> 462;
470 -> 462;
471 -> 466;
471 -> 467;
471 -> 468;
471 -> 469;
471 -> 470;
471 -> 462;
472 -> 471;
473 -> 0;
474 -> 0;
476 -> 473;
476 -> 475;
477 -> 474;
477 -> 475;
478 -> 475;
479 -> 476;
479 -> 475;
480 -> 477;
480 -> 475;
481 -> 0;
481 -> 475;
482 -> 478;
482 -> 475;
483 -> 475;
484 -> 479;
484 -> 480;
484 -> 481;
484 -> 482;
484 -> 483;
484 -> 475;
485 -> 484;
487 -> 388;
487 -> 387;
487 -> 486;
488 -> 487;
490 -> 401;
490 -> 400;
490 -> 489;
491 -> 490;
493 -> 420;
493 -> 419;
493 -> 492;
494 -> 493;
496 -> 433;
496 -> 432;
496 -> 495;
497 -> 496;
498 -> 0;
499 -> 388;
499 -> 387;
499 -> 498;
499 -> 0;
500 -> 499;
501 -> 0;
502 -> 401;
502 -> 400;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 472;
505 -> 471;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 420;
508 -> 419;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 0;
511 -> 510;
512 -> 511;
513 -> 294;
513 -> 289;
514 -> 284;
514 -> 283;
515 -> 0;
515 -> 283;
516 -> 515;
516 -> 287;
516 -> 283;
517 -> 283;
518 -> 514;
518 -> 516;
518 -> 517;
518 -> 0;
518 -> 283;
519 -> 518;
519 -> 283;
520 -> 513;
520 -> 283;
521 -> 285;
521 -> 283;
522 -> 283;
523 -> 519;
523 -> 520;
523 -> 521;
523 -> 522;
523 -> 518;
523 -> 293;
523 -> 283;
524 -> 283;
525 -> 523;
525 -> 524;
526 -> 524;
527 -> 524;
528 -> 525;
528 -> 523;
528 -> 527;
528 -> 524;
529 -> 526;
529 -> 524;
530 -> 524;
531 -> 528;
531 -> 523;
531 -> 527;
531 -> 529;
531 -> 530;
531 -> 526;
531 -> 524;
532 -> 524;
533 -> 532;
533 -> 526;
533 -> 524;
534 -> 526;
534 -> 524;
535 -> 524;
536 -> 534;
536 -> 535;
536 -> 526;
536 -> 533;
536 -> 524;
537 -> 525;
537 -> 524;
538 -> 537;
538 -> 280;
538 -> 279;
539 -> 280;
539 -> 264;
540 -> 264;
541 -> 267;
541 -> 540;
541 -> 264;
542 -> 539;
542 -> 541;
543 -> 541;
544 -> 542;
544 -> 543;
544 -> 280;
544 -> 538;
544 -> 523;
544 -> 541;
545 -> 544;
545 -> 541;
546 -> 388;
546 -> 545;
547 -> 0;
547 -> 264;
548 -> 272;
548 -> 264;
549 -> 269;
549 -> 539;
549 -> 266;
549 -> 546;
549 -> 264;
550 -> 549;
550 -> 264;
551 -> 264;
552 -> 550;
552 -> 551;
553 -> 0;
553 -> 551;
554 -> 553;
555 -> 264;
556 -> 549;
556 -> 280;
556 -> 538;
556 -> 523;
556 -> 237;
556 -> 0;
556 -> 387;
556 -> 264;
557 -> 264;
558 -> 557;
559 -> 556;
559 -> 558;
559 -> 264;
560 -> 559;
560 -> 264;
561 -> 264;
562 -> 560;
562 -> 561;
563 -> 562;
563 -> 559;
563 -> 561;
564 -> 563;
564 -> 559;
564 -> 561;
565 -> 561;
566 -> 563;
566 -> 565;
566 -> 559;
566 -> 561;
567 -> 0;
567 -> 561;
568 -> 566;
568 -> 567;
568 -> 561;
569 -> 271;
569 -> 568;
569 -> 264;
570 -> 559;
570 -> 264;
571 -> 0;
571 -> 1;
572 -> 1;
573 -> 571;
573 -> 572;
574 -> 214;
574 -> 572;
575 -> 214;
575 -> 572;
576 -> 214;
576 -> 572;
577 -> 214;
577 -> 572;
578 -> 214;
578 -> 572;
579 -> 214;
579 -> 572;
580 -> 573;
580 -> 572;
581 -> 574;
581 -> 572;
582 -> 575;
582 -> 572;
583 -> 576;
583 -> 572;
584 -> 577;
584 -> 572;
585 -> 578;
585 -> 572;
586 -> 579;
586 -> 572;
587 -> 572;
588 -> 580;
588 -> 587;
589 -> 581;
589 -> 587;
590 -> 582;
590 -> 587;
591 -> 583;
591 -> 587;
592 -> 584;
592 -> 587;
593 -> 585;
593 -> 587;
594 -> 586;
594 -> 587;
595 -> 588;
595 -> 587;
596 -> 588;
596 -> 587;
597 -> 587;
598 -> 589;
598 -> 587;
599 -> 590;
599 -> 587;
600 -> 591;
600 -> 587;
601 -> 592;
601 -> 587;
602 -> 593;
602 -> 587;
604 -> 603;
606 -> 605;
607 -> 594;
607 -> 587;
608 -> 587;
609 -> 596;
609 -> 608;
610 -> 597;
610 -> 608;
611 -> 598;
611 -> 608;
612 -> 599;
612 -> 608;
613 -> 600;
613 -> 608;
614 -> 601;
614 -> 608;
615 -> 602;
615 -> 608;
616 -> 596;
616 -> 608;
617 -> 607;
617 -> 608;
618 -> 597;
618 -> 608;
619 -> 597;
619 -> 608;
620 -> 597;
620 -> 608;
621 -> 620;
621 -> 608;
622 -> 620;
622 -> 608;
623 -> 620;
623 -> 608;
624 -> 620;
624 -> 608;
625 -> 620;
625 -> 608;
626 -> 620;
626 -> 608;
627 -> 620;
627 -> 608;
628 -> 620;
628 -> 608;
629 -> 620;
629 -> 608;
630 -> 620;
630 -> 608;
631 -> 620;
631 -> 608;
632 -> 620;
632 -> 608;
633 -> 620;
633 -> 608;
634 -> 620;
634 -> 608;
635 -> 620;
635 -> 608;
636 -> 609;
636 -> 620;
636 -> 608;
637 -> 610;
637 -> 620;
637 -> 608;
638 -> 611;
638 -> 620;
638 -> 608;
639 -> 612;
639 -> 620;
639 -> 608;
640 -> 613;
640 -> 620;
640 -> 608;
641 -> 614;
641 -> 620;
641 -> 608;
642 -> 615;
642 -> 620;
642 -> 608;
643 -> 616;
643 -> 608;
644 -> 643;
644 -> 620;
644 -> 608;
645 -> 617;
645 -> 620;
645 -> 608;
646 -> 618;
646 -> 620;
646 -> 608;
647 -> 619;
647 -> 620;
647 -> 608;
648 -> 597;
648 -> 572;
649 -> 648;
649 -> 1;
650 -> 214;
650 -> 1;
651 -> 1;
652 -> 214;
652 -> 651;
653 -> 649;
653 -> 651;
654 -> 653;
654 -> 636;
654 -> 651;
655 -> 653;
655 -> 637;
655 -> 651;
656 -> 653;
656 -> 638;
656 -> 651;
657 -> 652;
657 -> 651;
658 -> 653;
658 -> 640;
658 -> 651;
659 -> 653;
659 -> 641;
659 -> 651;
660 -> 651;
661 -> 653;
661 -> 644;
661 -> 651;
662 -> 653;
662 -> 645;
662 -> 651;
663 -> 653;
663 -> 646;
663 -> 651;
664 -> 653;
664 -> 647;
664 -> 651;
665 -> 651;
666 -> 654;
666 -> 665;
667 -> 655;
667 -> 665;
668 -> 656;
668 -> 665;
669 -> 657;
669 -> 665;
670 -> 658;
670 -> 665;
671 -> 659;
671 -> 665;
672 -> 660;
672 -> 665;
673 -> 661;
673 -> 665;
674 -> 662;
674 -> 665;
675 -> 663;
675 -> 665;
676 -> 664;
676 -> 665;
677 -> 660;
677 -> 665;
678 -> 677;
678 -> 665;
679 -> 677;
679 -> 665;
680 -> 677;
680 -> 665;
681 -> 677;
681 -> 665;
682 -> 677;
682 -> 665;
683 -> 677;
683 -> 665;
684 -> 677;
684 -> 665;
685 -> 677;
685 -> 665;
686 -> 677;
686 -> 665;
687 -> 677;
687 -> 665;
688 -> 677;
688 -> 665;
689 -> 677;
689 -> 665;
690 -> 677;
690 -> 665;
691 -> 677;
691 -> 665;
692 -> 677;
692 -> 665;
693 -> 669;
693 -> 677;
693 -> 665;
694 -> 672;
694 -> 677;
694 -> 665;
695 -> 660;
695 -> 1;
696 -> 1;
697 -> 214;
697 -> 696;
698 -> 214;
698 -> 696;
699 -> 695;
699 -> 696;
700 -> 699;
700 -> 666;
700 -> 696;
701 -> 699;
701 -> 667;
701 -> 696;
702 -> 699;
702 -> 668;
702 -> 696;
703 -> 699;
703 -> 693;
703 -> 696;
704 -> 696;
705 -> 697;
705 -> 704;
705 -> 696;
706 -> 698;
706 -> 704;
706 -> 696;
707 -> 705;
707 -> 706;
707 -> 696;
708 -> 699;
708 -> 671;
708 -> 696;
709 -> 699;
709 -> 694;
709 -> 696;
710 -> 699;
710 -> 673;
710 -> 696;
711 -> 699;
711 -> 674;
711 -> 696;
712 -> 699;
712 -> 675;
712 -> 696;
713 -> 699;
713 -> 676;
713 -> 696;
714 -> 696;
715 -> 700;
715 -> 714;
716 -> 701;
716 -> 714;
717 -> 702;
717 -> 714;
718 -> 703;
718 -> 714;
719 -> 707;
719 -> 714;
720 -> 708;
720 -> 714;
721 -> 709;
721 -> 714;
722 -> 710;
722 -> 714;
723 -> 711;
723 -> 714;
724 -> 712;
724 -> 714;
725 -> 713;
725 -> 714;
726 -> 704;
726 -> 714;
727 -> 726;
727 -> 714;
728 -> 726;
728 -> 714;
729 -> 726;
729 -> 714;
730 -> 726;
730 -> 714;
731 -> 726;
731 -> 714;
732 -> 726;
732 -> 714;
733 -> 726;
733 -> 714;
734 -> 726;
734 -> 714;
735 -> 726;
735 -> 714;
736 -> 726;
736 -> 714;
737 -> 726;
737 -> 714;
738 -> 726;
738 -> 714;
739 -> 726;
739 -> 714;
740 -> 726;
740 -> 714;
741 -> 726;
741 -> 714;
742 -> 719;
742 -> 726;
742 -> 714;
743 -> 704;
743 -> 1;
744 -> 1;
745 -> 571;
745 -> 744;
746 -> 214;
746 -> 744;
747 -> 214;
747 -> 744;
748 -> 214;
748 -> 744;
749 -> 214;
749 -> 744;
750 -> 214;
750 -> 744;
751 -> 214;
751 -> 744;
752 -> 745;
752 -> 744;
753 -> 746;
753 -> 744;
754 -> 747;
754 -> 744;
755 -> 748;
755 -> 744;
756 -> 749;
756 -> 744;
757 -> 750;
757 -> 744;
758 -> 751;
758 -> 744;
759 -> 744;
760 -> 752;
760 -> 759;
761 -> 753;
761 -> 759;
762 -> 754;
762 -> 759;
763 -> 755;
763 -> 759;
764 -> 756;
764 -> 759;
765 -> 757;
765 -> 759;
766 -> 758;
766 -> 759;
767 -> 760;
767 -> 759;
768 -> 760;
768 -> 759;
769 -> 759;
770 -> 761;
770 -> 759;
771 -> 762;
771 -> 759;
772 -> 763;
772 -> 759;
773 -> 764;
773 -> 759;
774 -> 765;
774 -> 759;
775 -> 766;
775 -> 759;
776 -> 759;
777 -> 768;
777 -> 776;
778 -> 769;
778 -> 776;
779 -> 770;
779 -> 776;
780 -> 771;
780 -> 776;
781 -> 772;
781 -> 776;
782 -> 773;
782 -> 776;
783 -> 774;
783 -> 776;
784 -> 768;
784 -> 776;
785 -> 775;
785 -> 776;
786 -> 769;
786 -> 776;
787 -> 769;
787 -> 776;
788 -> 769;
788 -> 776;
789 -> 788;
789 -> 776;
790 -> 788;
790 -> 776;
791 -> 788;
791 -> 776;
792 -> 788;
792 -> 776;
793 -> 788;
793 -> 776;
794 -> 788;
794 -> 776;
795 -> 788;
795 -> 776;
796 -> 788;
796 -> 776;
797 -> 788;
797 -> 776;
798 -> 788;
798 -> 776;
799 -> 788;
799 -> 776;
800 -> 788;
800 -> 776;
801 -> 788;
801 -> 776;
802 -> 788;
802 -> 776;
803 -> 788;
803 -> 776;
804 -> 777;
804 -> 788;
804 -> 776;
805 -> 778;
805 -> 788;
805 -> 776;
806 -> 779;
806 -> 788;
806 -> 776;
807 -> 780;
807 -> 788;
807 -> 776;
808 -> 781;
808 -> 788;
808 -> 776;
809 -> 782;
809 -> 788;
809 -> 776;
810 -> 783;
810 -> 788;
810 -> 776;
811 -> 784;
811 -> 776;
812 -> 811;
812 -> 788;
812 -> 776;
813 -> 785;
813 -> 788;
813 -> 776;
814 -> 786;
814 -> 788;
814 -> 776;
815 -> 787;
815 -> 788;
815 -> 776;
816 -> 769;
816 -> 744;
817 -> 816;
817 -> 1;
818 -> 214;
818 -> 1;
819 -> 1;
820 -> 214;
820 -> 819;
821 -> 817;
821 -> 819;
822 -> 821;
822 -> 804;
822 -> 819;
823 -> 821;
823 -> 805;
823 -> 819;
824 -> 821;
824 -> 806;
824 -> 819;
825 -> 820;
825 -> 819;
826 -> 821;
826 -> 808;
826 -> 819;
827 -> 821;
827 -> 809;
827 -> 819;
828 -> 819;
829 -> 821;
829 -> 812;
829 -> 819;
830 -> 821;
830 -> 813;
830 -> 819;
831 -> 821;
831 -> 814;
831 -> 819;
832 -> 821;
832 -> 815;
832 -> 819;
833 -> 819;
834 -> 822;
834 -> 833;
835 -> 823;
835 -> 833;
836 -> 824;
836 -> 833;
837 -> 825;
837 -> 833;
838 -> 826;
838 -> 833;
839 -> 827;
839 -> 833;
840 -> 828;
840 -> 833;
841 -> 829;
841 -> 833;
842 -> 830;
842 -> 833;
843 -> 831;
843 -> 833;
844 -> 832;
844 -> 833;
845 -> 828;
845 -> 833;
846 -> 845;
846 -> 833;
847 -> 845;
847 -> 833;
848 -> 845;
848 -> 833;
849 -> 845;
849 -> 833;
850 -> 845;
850 -> 833;
851 -> 845;
851 -> 833;
852 -> 845;
852 -> 833;
853 -> 845;
853 -> 833;
854 -> 845;
854 -> 833;
855 -> 845;
855 -> 833;
856 -> 845;
856 -> 833;
857 -> 845;
857 -> 833;
858 -> 845;
858 -> 833;
859 -> 845;
859 -> 833;
860 -> 845;
860 -> 833;
861 -> 837;
861 -> 845;
861 -> 833;
862 -> 840;
862 -> 845;
862 -> 833;
863 -> 828;
863 -> 1;
864 -> 1;
865 -> 214;
865 -> 864;
866 -> 214;
866 -> 864;
867 -> 863;
867 -> 864;
868 -> 867;
868 -> 834;
868 -> 864;
869 -> 867;
869 -> 835;
869 -> 864;
870 -> 867;
870 -> 836;
870 -> 864;
871 -> 867;
871 -> 861;
871 -> 864;
872 -> 864;
873 -> 865;
873 -> 872;
873 -> 864;
874 -> 866;
874 -> 872;
874 -> 864;
875 -> 873;
875 -> 874;
875 -> 864;
876 -> 867;
876 -> 839;
876 -> 864;
877 -> 867;
877 -> 862;
877 -> 864;
878 -> 867;
878 -> 841;
878 -> 864;
879 -> 867;
879 -> 842;
879 -> 864;
880 -> 867;
880 -> 843;
880 -> 864;
881 -> 867;
881 -> 844;
881 -> 864;
882 -> 864;
883 -> 868;
883 -> 882;
884 -> 869;
884 -> 882;
885 -> 870;
885 -> 882;
886 -> 871;
886 -> 882;
887 -> 875;
887 -> 882;
888 -> 876;
888 -> 882;
889 -> 877;
889 -> 882;
890 -> 878;
890 -> 882;
891 -> 879;
891 -> 882;
892 -> 880;
892 -> 882;
893 -> 881;
893 -> 882;
894 -> 872;
894 -> 882;
895 -> 894;
895 -> 882;
896 -> 894;
896 -> 882;
897 -> 894;
897 -> 882;
898 -> 894;
898 -> 882;
899 -> 894;
899 -> 882;
900 -> 894;
900 -> 882;
901 -> 894;
901 -> 882;
902 -> 894;
902 -> 882;
903 -> 894;
903 -> 882;
904 -> 894;
904 -> 882;
905 -> 894;
905 -> 882;
906 -> 894;
906 -> 882;
907 -> 894;
907 -> 882;
908 -> 894;
908 -> 882;
909 -> 894;
909 -> 882;
910 -> 887;
910 -> 894;
910 -> 882;
911 -> 872;
911 -> 1;
912 -> 743;
912 -> 214;
912 -> 1;
913 -> 911;
913 -> 214;
913 -> 1;
914 -> 1;
915 -> 570;
915 -> 914;
916 -> 214;
916 -> 914;
917 -> 914;
919 -> 0;
920 -> 0;
921 -> 0;
924 -> 918;
924 -> 923;
925 -> 919;
925 -> 923;
926 -> 920;
926 -> 923;
927 -> 921;
927 -> 923;
928 -> 922;
928 -> 923;
929 -> 923;
930 -> 929;
930 -> 923;
931 -> 929;
931 -> 923;
932 -> 929;
932 -> 923;
933 -> 923;
934 -> 925;
934 -> 933;
934 -> 923;
935 -> 926;
935 -> 0;
935 -> 923;
936 -> 927;
936 -> 0;
936 -> 923;
937 -> 924;
937 -> 929;
937 -> 923;
938 -> 925;
938 -> 929;
938 -> 923;
939 -> 926;
939 -> 929;
939 -> 923;
940 -> 928;
940 -> 929;
940 -> 923;
941 -> 927;
941 -> 929;
941 -> 923;
942 -> 923;
943 -> 917;
943 -> 915;
943 -> 568;
943 -> 914;
944 -> 943;
944 -> 917;
945 -> 944;
945 -> 943;
945 -> 917;
946 -> 917;
947 -> 945;
947 -> 943;
947 -> 946;
947 -> 917;
948 -> 944;
948 -> 943;
948 -> 946;
948 -> 917;
949 -> 942;
949 -> 947;
950 -> 943;
950 -> 949;
950 -> 937;
950 -> 940;
950 -> 938;
950 -> 939;
950 -> 941;
950 -> 0;
950 -> 914;
951 -> 943;
951 -> 917;
952 -> 943;
952 -> 917;
953 -> 917;
954 -> 951;
954 -> 950;
954 -> 953;
955 -> 952;
955 -> 954;
955 -> 953;
956 -> 955;
956 -> 953;
957 -> 0;
957 -> 956;
958 -> 955;
958 -> 953;
959 -> 951;
959 -> 953;
960 -> 952;
960 -> 957;
960 -> 958;
960 -> 959;
960 -> 953;
961 -> 0;
961 -> 960;
962 -> 961;
963 -> 952;
963 -> 962;
964 -> 963;
964 -> 942;
964 -> 962;
965 -> 964;
966 -> 961;
967 -> 0;
967 -> 961;
968 -> 967;
969 -> 943;
969 -> 917;
970 -> 943;
970 -> 917;
971 -> 969;
971 -> 970;
971 -> 917;
972 -> 943;
972 -> 971;
972 -> 967;
972 -> 914;
974 -> 973;
976 -> 975;
978 -> 977;
981 -> 980;
982 -> 0;
983 -> 0;
984 -> 0;
985 -> 984;
987 -> 982;
987 -> 983;
987 -> 985;
987 -> 986;
988 -> 987;
990 -> 989;
992 -> 991;
994 -> 993;
996 -> 995;
997 -> 943;
997 -> 917;
998 -> 943;
998 -> 917;
999 -> 943;
999 -> 917;
1000 -> 943;
1000 -> 917;
1001 -> 943;
1001 -> 917;
1002 -> 917;
1003 -> 1000;
1003 -> 1002;
1003 -> 917;
1004 -> 1001;
1004 -> 1002;
1004 -> 917;
1005 -> 1003;
1005 -> 1004;
1005 -> 917;
1006 -> 998;
1006 -> 917;
1007 -> 997;
1007 -> 917;
1008 -> 998;
1008 -> 917;
1009 -> 999;
1009 -> 917;
1010 -> 1000;
1010 -> 917;
1011 -> 1001;
1011 -> 917;
1012 -> 1006;
1012 -> 917;
1013 -> 917;
1014 -> 1007;
1014 -> 1013;
1015 -> 1008;
1015 -> 1013;
1016 -> 1009;
1016 -> 1013;
1017 -> 1010;
1017 -> 1013;
1018 -> 1011;
1018 -> 1013;
1019 -> 1012;
1019 -> 1013;
1020 -> 1013;
1021 -> 1018;
1021 -> 1020;
1021 -> 1013;
1022 -> 1017;
1022 -> 1020;
1022 -> 1013;
1023 -> 1021;
1023 -> 1022;
1023 -> 1013;
1024 -> 1013;
1025 -> 1014;
1025 -> 1013;
1026 -> 1015;
1026 -> 1013;
1027 -> 1024;
1027 -> 1013;
1028 -> 1019;
1028 -> 1013;
1029 -> 1013;
1030 -> 1025;
1030 -> 1029;
1031 -> 1026;
1031 -> 1029;
1032 -> 1027;
1032 -> 1029;
1033 -> 1028;
1033 -> 1029;
1034 -> 1031;
1034 -> 1029;
1035 -> 1034;
1035 -> 1030;
1035 -> 972;
1035 -> 1029;
1036 -> 1029;
1037 -> 1035;
1037 -> 1036;
1038 -> 1035;
1038 -> 1036;
1039 -> 1037;
1039 -> 1036;
1040 -> 1037;
1040 -> 1035;
1040 -> 1036;
1041 -> 1036;
1042 -> 1037;
1042 -> 1035;
1042 -> 1036;
1043 -> 1037;
1043 -> 1035;
1043 -> 1036;
1044 -> 1043;
1044 -> 1036;
1045 -> 1036;
1046 -> 1041;
1046 -> 1045;
1046 -> 1029;
1047 -> 1041;
1047 -> 1036;
1048 -> 1041;
1048 -> 1036;
1049 -> 1047;
1049 -> 1036;
1050 -> 1047;
1050 -> 1036;
1051 -> 1047;
1051 -> 1036;
1052 -> 1047;
1052 -> 1036;
1053 -> 1052;
1053 -> 1036;
1054 -> 1052;
1054 -> 1053;
1055 -> 1030;
1055 -> 1034;
1055 -> 1035;
1055 -> 1045;
1055 -> 1029;
1056 -> 1029;
1057 -> 1055;
1057 -> 1056;
1057 -> 1029;
1058 -> 1055;
1058 -> 1057;
1059 -> 1057;
1060 -> 1058;
1060 -> 1059;
1061 -> 1058;
1061 -> 1059;
1062 -> 1060;
1062 -> 1059;
1063 -> 1060;
1063 -> 1058;
1063 -> 1059;
1064 -> 1059;
1065 -> 1060;
1065 -> 1058;
1065 -> 1059;
1066 -> 1060;
1066 -> 1058;
1066 -> 1059;
1067 -> 1066;
1067 -> 1059;
1068 -> 1064;
1068 -> 1059;
1069 -> 1064;
1069 -> 1059;
1070 -> 1068;
1070 -> 1059;
1071 -> 1068;
1071 -> 1059;
1072 -> 1068;
1072 -> 1059;
1073 -> 1068;
1073 -> 1059;
1074 -> 1073;
1074 -> 1059;
1075 -> 1057;
1076 -> 1059;
1076 -> 1075;
1076 -> 1057;
1077 -> 1055;
1077 -> 1029;
1078 -> 1013;
1079 -> 1059;
1079 -> 1078;
1079 -> 1013;
1080 -> 1077;
1080 -> 1013;
1081 -> 1059;
1081 -> 1036;
1082 -> 1059;
1082 -> 1036;
1083 -> 1081;
1083 -> 1036;
1084 -> 1081;
1084 -> 1059;
1084 -> 1036;
1085 -> 1081;
1085 -> 1059;
1085 -> 1036;
1086 -> 1081;
1086 -> 1059;
1086 -> 1036;
1087 -> 1086;
1087 -> 1036;
1088 -> 1064;
1089 -> 1064;
1090 -> 1088;
1090 -> 1064;
1091 -> 1088;
1091 -> 1064;
1092 -> 1088;
1092 -> 1064;
1093 -> 1088;
1093 -> 1064;
1094 -> 1093;
1094 -> 1064;
1095 -> 1059;
1096 -> 1064;
1096 -> 1095;
1096 -> 1059;
1097 -> 1059;
1097 -> 1029;
1098 -> 1064;
1098 -> 1078;
1098 -> 1013;
1099 -> 1097;
1099 -> 1013;
1100 -> 1064;
1101 -> 1064;
1101 -> 1029;
1102 -> 1101;
1102 -> 1013;
1103 -> 943;
1103 -> 917;
1104 -> 943;
1104 -> 917;
1105 -> 943;
1105 -> 917;
1106 -> 943;
1106 -> 917;
1107 -> 1106;
1107 -> 917;
1108 -> 1106;
1108 -> 917;
1109 -> 1106;
1109 -> 917;
1110 -> 1106;
1110 -> 917;
1111 -> 1106;
1111 -> 917;
1112 -> 1106;
1112 -> 917;
1113 -> 1103;
1113 -> 1106;
1113 -> 917;
1114 -> 1104;
1114 -> 1106;
1114 -> 917;
1115 -> 1105;
1115 -> 1106;
1115 -> 917;
1116 -> 1106;
1116 -> 917;
1117 -> 917;
1118 -> 1116;
1118 -> 1117;
1118 -> 1107;
1118 -> 1113;
1118 -> 1114;
1118 -> 1110;
1118 -> 1115;
1118 -> 1112;
1118 -> 1064;
1118 -> 917;
1119 -> 1118;
1119 -> 1106;
1119 -> 917;
1120 -> 917;
1121 -> 1120;
1121 -> 1106;
1121 -> 917;
1122 -> 1103;
1122 -> 917;
1123 -> 917;
1124 -> 917;
1125 -> 1122;
1125 -> 1124;
1126 -> 1123;
1126 -> 1124;
1127 -> 1125;
1127 -> 1124;
1128 -> 1124;
1129 -> 1127;
1129 -> 1128;
1130 -> 1126;
1130 -> 1128;
1131 -> 1130;
1131 -> 1128;
1132 -> 1130;
1132 -> 1128;
1133 -> 1130;
1133 -> 1128;
1134 -> 1130;
1134 -> 1128;
1135 -> 1130;
1135 -> 1128;
1136 -> 1128;
1137 -> 1129;
1137 -> 1136;
1137 -> 1128;
1138 -> 1130;
1138 -> 1128;
1139 -> 1138;
1139 -> 1131;
1139 -> 1132;
1139 -> 1133;
1139 -> 1134;
1139 -> 1135;
1139 -> 1128;
1140 -> 1129;
1140 -> 1118;
1140 -> 1119;
1140 -> 1121;
1140 -> 1130;
1140 -> 1128;
1141 -> 1129;
1141 -> 1130;
1141 -> 1128;
1142 -> 1123;
1142 -> 1106;
1142 -> 917;
1143 -> 943;
1143 -> 1118;
1143 -> 1119;
1143 -> 1121;
1143 -> 1142;
1143 -> 1120;
1143 -> 1139;
1143 -> 1140;
1143 -> 1141;
1143 -> 914;
1144 -> 943;
1144 -> 917;
1145 -> 943;
1145 -> 917;
1146 -> 943;
1146 -> 917;
1147 -> 943;
1147 -> 917;
1148 -> 1144;
1148 -> 1143;
1148 -> 917;
1149 -> 917;
1150 -> 1147;
1150 -> 1149;
1151 -> 1150;
1151 -> 1143;
1151 -> 0;
1151 -> 1149;
1152 -> 1151;
1152 -> 917;
1153 -> 917;
1154 -> 1144;
1154 -> 1143;
1154 -> 1153;
1154 -> 917;
1155 -> 1152;
1155 -> 1154;
1155 -> 917;
1156 -> 1144;
1156 -> 1143;
1156 -> 1155;
1157 -> 1156;
1157 -> 917;
1158 -> 1148;
1158 -> 917;
1159 -> 1145;
1159 -> 917;
1160 -> 1146;
1160 -> 917;
1161 -> 917;
1162 -> 1157;
1162 -> 1161;
1163 -> 1158;
1163 -> 1161;
1164 -> 1159;
1164 -> 1161;
1165 -> 1160;
1165 -> 1161;
1166 -> 1147;
1166 -> 1161;
1167 -> 1161;
1168 -> 1162;
1168 -> 1167;
1168 -> 1161;
1169 -> 1165;
1169 -> 1161;
1170 -> 1165;
1170 -> 1143;
1170 -> 1161;
1171 -> 1166;
1171 -> 1143;
1171 -> 1161;
1172 -> 1161;
1173 -> 1171;
1173 -> 1172;
1174 -> 1171;
1174 -> 1172;
1175 -> 1172;
1176 -> 1175;
1176 -> 1172;
1177 -> 1175;
1177 -> 1172;
1178 -> 1175;
1178 -> 1172;
1179 -> 1175;
1179 -> 1172;
1180 -> 1173;
1180 -> 1175;
1180 -> 1172;
1181 -> 1171;
1181 -> 1175;
1181 -> 1176;
1181 -> 1177;
1181 -> 1178;
1181 -> 1179;
1181 -> 1180;
1181 -> 1161;
1182 -> 1163;
1182 -> 1161;
1183 -> 1164;
1183 -> 1161;
1184 -> 1165;
1184 -> 1161;
1185 -> 1161;
1186 -> 1182;
1186 -> 1185;
1187 -> 1183;
1187 -> 1185;
1188 -> 1184;
1188 -> 1185;
1189 -> 1181;
1189 -> 1185;
1190 -> 1185;
1191 -> 1187;
1191 -> 1190;
1191 -> 1185;
1192 -> 1188;
1192 -> 1190;
1192 -> 1185;
1193 -> 1191;
1193 -> 1192;
1193 -> 1185;
1194 -> 1186;
1194 -> 1189;
1194 -> 1185;
1195 -> 1187;
1195 -> 1189;
1195 -> 1185;
1196 -> 1188;
1196 -> 1189;
1196 -> 1185;
1197 -> 1161;
1198 -> 1162;
1198 -> 1161;
1199 -> 1161;
1200 -> 1198;
1200 -> 1199;
1201 -> 1181;
1201 -> 1199;
1202 -> 1200;
1202 -> 1199;
1203 -> 1199;
1204 -> 1202;
1204 -> 1203;
1205 -> 1201;
1205 -> 1203;
1206 -> 1205;
1206 -> 1203;
1207 -> 1206;
1207 -> 1204;
1207 -> 1181;
1207 -> 1194;
1207 -> 1195;
1207 -> 1196;
1207 -> 1203;
1208 -> 1203;
1209 -> 1207;
1209 -> 1208;
1210 -> 1207;
1210 -> 1208;
1211 -> 1209;
1211 -> 1208;
1212 -> 1208;
1213 -> 1211;
1213 -> 1212;
1214 -> 1210;
1214 -> 1212;
1215 -> 1214;
1215 -> 1207;
1215 -> 1212;
1216 -> 1213;
1216 -> 1212;
1217 -> 1215;
1217 -> 1216;
1217 -> 1207;
1217 -> 1212;
1218 -> 0;
1218 -> 1212;
1219 -> 1212;
1220 -> 1213;
1220 -> 1217;
1220 -> 1219;
1220 -> 1212;
1221 -> 1214;
1221 -> 1217;
1221 -> 1212;
1222 -> 1213;
1222 -> 1217;
1222 -> 1212;
1223 -> 0;
1223 -> 1220;
1224 -> 1213;
1224 -> 1212;
1225 -> 1223;
1225 -> 1212;
1226 -> 1212;
1227 -> 1224;
1227 -> 1226;
1228 -> 1225;
1228 -> 1226;
1229 -> 1214;
1229 -> 1226;
1230 -> 1227;
1230 -> 1226;
1231 -> 1228;
1231 -> 1226;
1232 -> 1226;
1233 -> 1230;
1233 -> 1232;
1234 -> 1231;
1234 -> 1232;
1235 -> 1234;
1235 -> 1232;
1236 -> 1232;
1237 -> 1233;
1237 -> 1232;
1238 -> 1234;
1238 -> 1232;
1239 -> 1232;
1240 -> 1232;
1241 -> 1237;
1241 -> 1240;
1242 -> 1238;
1242 -> 1240;
1243 -> 1239;
1243 -> 1240;
1244 -> 1241;
1244 -> 1243;
1244 -> 1240;
1245 -> 1242;
1245 -> 1243;
1245 -> 1240;
1246 -> 1239;
1246 -> 1226;
1247 -> 1226;
1248 -> 1226;
1249 -> 1229;
1249 -> 1248;
1250 -> 1249;
1250 -> 1221;
1250 -> 1248;
1251 -> 1250;
1251 -> 1226;
1252 -> 1246;
1252 -> 1226;
1253 -> 1247;
1253 -> 1226;
1254 -> 1252;
1254 -> 1253;
1254 -> 1251;
1254 -> 1244;
1254 -> 1245;
1254 -> 1221;
1254 -> 1226;
1255 -> 1226;
1256 -> 1254;
1256 -> 1255;
1257 -> 1256;
1257 -> 1254;
1257 -> 1255;
1258 -> 1227;
1258 -> 1257;
1259 -> 1257;
1260 -> 1258;
1260 -> 1259;
1261 -> 1260;
1261 -> 1259;
1262 -> 1260;
1262 -> 1259;
1263 -> 1261;
1263 -> 1259;
1264 -> 1259;
1265 -> 1263;
1265 -> 1264;
1266 -> 1262;
1266 -> 1264;
1267 -> 1265;
1267 -> 1260;
1267 -> 1264;
1268 -> 1264;
1269 -> 1268;
1269 -> 1264;
1270 -> 1265;
1270 -> 1260;
1270 -> 1264;
1271 -> 1266;
1271 -> 1270;
1271 -> 1267;
1271 -> 1260;
1272 -> 1266;
1272 -> 1270;
1272 -> 1271;
1273 -> 1271;
1274 -> 1272;
1274 -> 1264;
1275 -> 1264;
1276 -> 1274;
1276 -> 1275;
1276 -> 1264;
1277 -> 1274;
1277 -> 1265;
1277 -> 1264;
1278 -> 1274;
1278 -> 1276;
1279 -> 0;
1279 -> 1276;
1280 -> 1274;
1280 -> 1278;
1280 -> 1276;
1281 -> 1264;
1282 -> 1281;
1282 -> 1259;
1283 -> 1259;
1284 -> 1262;
1284 -> 1283;
1285 -> 1283;
1286 -> 1284;
1286 -> 1280;
1286 -> 1285;
1287 -> 1286;
1287 -> 1283;
1288 -> 1259;
1289 -> 1263;
1289 -> 1288;
1290 -> 1282;
1290 -> 1288;
1291 -> 1287;
1291 -> 1288;
1292 -> 1262;
1292 -> 1288;
1293 -> 1288;
1294 -> 1292;
1294 -> 1293;
1295 -> 1294;
1295 -> 1280;
1295 -> 1293;
1296 -> 1295;
1296 -> 1288;
1297 -> 1288;
1298 -> 1289;
1298 -> 1296;
1298 -> 1288;
1299 -> 1290;
1299 -> 1288;
1300 -> 1291;
1300 -> 1299;
1301 -> 0;
1301 -> 1300;
1302 -> 1289;
1302 -> 1288;
1303 -> 1301;
1303 -> 1288;
1304 -> 1288;
1305 -> 1302;
1305 -> 1304;
1306 -> 1303;
1306 -> 1304;
1307 -> 1306;
1307 -> 1304;
1308 -> 1304;
1309 -> 1304;
1309 -> 1288;
1310 -> 1288;
1311 -> 1288;
1312 -> 1292;
1312 -> 1311;
1313 -> 1312;
1313 -> 1280;
1313 -> 1311;
1314 -> 1313;
1314 -> 1288;
1315 -> 1309;
1315 -> 1288;
1316 -> 1310;
1316 -> 1288;
1317 -> 1315;
1317 -> 1316;
1317 -> 1314;
1317 -> 1305;
1317 -> 1306;
1317 -> 1280;
1317 -> 1288;
1318 -> 1288;
1319 -> 1317;
1320 -> 1292;
1320 -> 1319;
1321 -> 1320;
1321 -> 1317;
1321 -> 1319;
1322 -> 1321;
1322 -> 1317;
1323 -> 1291;
1323 -> 1317;
1324 -> 1323;
1325 -> 1292;
1325 -> 1324;
1326 -> 1325;
1326 -> 1317;
1326 -> 1324;
1327 -> 1326;
1327 -> 1323;
1328 -> 1322;
1328 -> 1323;
1329 -> 1289;
1329 -> 1323;
1330 -> 1290;
1330 -> 1323;
1331 -> 1323;
1332 -> 1323;
1333 -> 1327;
1333 -> 1332;
1334 -> 1328;
1334 -> 1332;
1335 -> 1329;
1335 -> 1332;
1336 -> 1330;
1336 -> 1332;
1337 -> 1331;
1337 -> 1332;
1338 -> 1334;
1338 -> 1332;
1339 -> 1332;
1340 -> 1338;
1340 -> 1339;
1341 -> 1337;
1341 -> 1339;
1342 -> 1339;
1343 -> 1339;
1344 -> 1340;
1344 -> 1343;
1344 -> 1339;
1345 -> 1340;
1345 -> 1341;
1345 -> 1339;
1346 -> 1340;
1346 -> 1317;
1346 -> 1341;
1346 -> 1339;
1347 -> 1340;
1347 -> 1317;
1347 -> 1341;
1347 -> 1339;
1348 -> 1342;
1348 -> 1341;
1348 -> 1339;
1349 -> 1337;
1349 -> 1332;
1350 -> 1337;
1350 -> 1332;
1351 -> 1337;
1351 -> 1332;
1352 -> 1337;
1352 -> 1332;
1353 -> 1337;
1353 -> 1332;
1354 -> 1332;
1355 -> 1333;
1355 -> 1354;
1355 -> 1332;
1356 -> 1332;
1357 -> 1335;
1357 -> 1356;
1357 -> 1332;
1358 -> 1333;
1358 -> 1337;
1358 -> 1332;
1359 -> 1335;
1359 -> 1337;
1359 -> 1336;
1359 -> 1332;
1360 -> 1359;
1360 -> 1337;
1360 -> 1332;
1361 -> 1336;
1361 -> 1332;
1362 -> 1335;
1362 -> 1317;
1362 -> 1361;
1363 -> 1335;
1363 -> 1362;
1364 -> 1363;
1364 -> 1362;
1364 -> 1337;
1365 -> 1323;
1366 -> 1292;
1366 -> 1365;
1367 -> 1366;
1367 -> 1362;
1367 -> 1365;
1368 -> 1367;
1368 -> 1323;
1369 -> 1289;
1369 -> 1323;
1370 -> 1323;
1371 -> 1317;
1372 -> 1371;
1372 -> 1368;
1373 -> 1372;
1373 -> 1317;
1374 -> 1309;
1374 -> 1317;
1375 -> 1331;
1375 -> 1317;
1376 -> 1374;
1376 -> 1375;
1376 -> 1373;
1376 -> 1305;
1376 -> 1306;
1376 -> 1347;
1376 -> 1346;
1376 -> 1345;
1376 -> 1348;
1376 -> 1341;
1376 -> 1358;
1376 -> 1360;
1376 -> 1351;
1376 -> 1352;
1376 -> 1353;
1376 -> 1364;
1376 -> 1368;
1376 -> 1359;
1376 -> 1362;
1376 -> 1317;
1377 -> 1317;
1378 -> 1331;
1378 -> 1288;
1379 -> 1260;
1379 -> 1378;
1379 -> 1376;
1379 -> 1259;
1380 -> 1228;
1380 -> 1301;
1380 -> 1257;
1381 -> 1380;
1382 -> 1379;
1382 -> 1381;
1383 -> 1382;
1383 -> 1379;
1383 -> 1381;
1384 -> 1381;
1385 -> 1383;
1385 -> 1384;
1385 -> 1381;
1386 -> 1385;
1386 -> 1381;
1387 -> 1386;
1387 -> 1380;
1388 -> 1227;
1388 -> 1380;
1389 -> 1228;
1389 -> 0;
1389 -> 1380;
1390 -> 1387;
1390 -> 1389;
1391 -> 1379;
1391 -> 1389;
1392 -> 1389;
1393 -> 1389;
1394 -> 1390;
1394 -> 1393;
1395 -> 1391;
1395 -> 1393;
1396 -> 1392;
1396 -> 1393;
1397 -> 1392;
1397 -> 1393;
1398 -> 1395;
1398 -> 1393;
1399 -> 1393;
1400 -> 1398;
1400 -> 1399;
1401 -> 1397;
1401 -> 1399;
1402 -> 1399;
1403 -> 1399;
1404 -> 1400;
1404 -> 1403;
1404 -> 1399;
1405 -> 1400;
1405 -> 1387;
1405 -> 1401;
1405 -> 1399;
1406 -> 1400;
1406 -> 1387;
1406 -> 1401;
1406 -> 1399;
1407 -> 1402;
1407 -> 1401;
1407 -> 1399;
1408 -> 1397;
1408 -> 1393;
1409 -> 1397;
1409 -> 1393;
1410 -> 1397;
1410 -> 1393;
1411 -> 1397;
1411 -> 1393;
1412 -> 1397;
1412 -> 1393;
1413 -> 1393;
1414 -> 1394;
1414 -> 1413;
1414 -> 1393;
1415 -> 1394;
1415 -> 1397;
1415 -> 1393;
1416 -> 942;
1416 -> 1393;
1417 -> 1416;
1417 -> 1396;
1417 -> 1393;
1418 -> 1417;
1418 -> 1397;
1418 -> 1393;
1419 -> 1389;
1420 -> 1227;
1420 -> 1387;
1420 -> 1419;
1420 -> 1389;
1421 -> 1227;
1421 -> 1387;
1421 -> 1257;
1422 -> 1257;
1423 -> 1421;
1423 -> 1422;
1424 -> 1392;
1424 -> 1422;
1425 -> 1424;
1425 -> 1405;
1425 -> 1422;
1426 -> 0;
1426 -> 1422;
1427 -> 1422;
1428 -> 1425;
1428 -> 1427;
1429 -> 1426;
1429 -> 1427;
1430 -> 1423;
1430 -> 1422;
1431 -> 1428;
1431 -> 1430;
1431 -> 1422;
1432 -> 1431;
1432 -> 1422;
1433 -> 1257;
1434 -> 1433;
1434 -> 1430;
1435 -> 1434;
1435 -> 1257;
1436 -> 1246;
1436 -> 1257;
1437 -> 1432;
1437 -> 1257;
1438 -> 1436;
1438 -> 1437;
1438 -> 1435;
1438 -> 1244;
1438 -> 1245;
1438 -> 1406;
1438 -> 1405;
1438 -> 1400;
1438 -> 1407;
1438 -> 1401;
1438 -> 1415;
1438 -> 1409;
1438 -> 1418;
1438 -> 1411;
1438 -> 1412;
1438 -> 1430;
1438 -> 1257;
1439 -> 1257;
1440 -> 1432;
1440 -> 1226;
1441 -> 1207;
1441 -> 1440;
1441 -> 1438;
1441 -> 1203;
1442 -> 1181;
1442 -> 1161;
1443 -> 1166;
1443 -> 1441;
1443 -> 1442;
1443 -> 1161;
1444 -> 1441;
1444 -> 1161;
1445 -> 943;
1445 -> 1444;
1445 -> 1443;
1445 -> 914;
1446 -> 1445;
1446 -> 1167;
1446 -> 1161;
1447 -> 1165;
1447 -> 1445;
1447 -> 1161;
1448 -> 1165;
1448 -> 1447;
1449 -> 1447;
1450 -> 1448;
1450 -> 1208;
1451 -> 1448;
1451 -> 1208;
1452 -> 1451;
1452 -> 1448;
1452 -> 1208;
1453 -> 1450;
1453 -> 1208;
1454 -> 1452;
1454 -> 1453;
1454 -> 1448;
1454 -> 1208;
1455 -> 1208;
1456 -> 1451;
1456 -> 1454;
1456 -> 1208;
1457 -> 1450;
1457 -> 1208;
1458 -> 1451;
1458 -> 1456;
1459 -> 1450;
1459 -> 1456;
1460 -> 1301;
1460 -> 1458;
1461 -> 1450;
1461 -> 1208;
1462 -> 1460;
1462 -> 1208;
1463 -> 1208;
1464 -> 1461;
1464 -> 1463;
1465 -> 1462;
1465 -> 1463;
1466 -> 1465;
1466 -> 1463;
1467 -> 1463;
1468 -> 1463;
1469 -> 1463;
1470 -> 1468;
1470 -> 1469;
1471 -> 1468;
1471 -> 1208;
1472 -> 1208;
1473 -> 1208;
1474 -> 1451;
1474 -> 1473;
1475 -> 1474;
1475 -> 1458;
1475 -> 1473;
1476 -> 1475;
1476 -> 1208;
1477 -> 1471;
1477 -> 1208;
1478 -> 1472;
1478 -> 1208;
1479 -> 1477;
1479 -> 1478;
1479 -> 1476;
1479 -> 1464;
1479 -> 1465;
1479 -> 1458;
1479 -> 1208;
1480 -> 1208;
1481 -> 1450;
1481 -> 1479;
1482 -> 1479;
1483 -> 1481;
1483 -> 1482;
1483 -> 1479;
1484 -> 1481;
1484 -> 1483;
1485 -> 0;
1485 -> 1483;
1486 -> 1483;
1487 -> 1484;
1487 -> 1486;
1488 -> 1485;
1488 -> 1486;
1489 -> 1488;
1489 -> 1486;
1490 -> 1486;
1491 -> 1487;
1492 -> 1491;
1492 -> 1487;
1493 -> 1487;
1494 -> 1487;
1494 -> 1493;
1495 -> 1494;
1495 -> 1487;
1495 -> 1493;
1496 -> 1495;
1496 -> 1487;
1497 -> 1487;
1498 -> 1487;
1499 -> 1487;
1500 -> 1487;
1501 -> 1487;
1502 -> 1487;
1503 -> 1488;
1504 -> 1488;
1505 -> 1488;
1506 -> 1488;
1507 -> 1479;
1508 -> 1460;
1508 -> 1487;
1508 -> 1479;
1509 -> 1460;
1509 -> 0;
1509 -> 1479;
1510 -> 1450;
1510 -> 1487;
1510 -> 1479;
1511 -> 1479;
1512 -> 1510;
1512 -> 1511;
1513 -> 1488;
1513 -> 1511;
1514 -> 1479;
1515 -> 1514;
1515 -> 1512;
1516 -> 1515;
1516 -> 1479;
1517 -> 1471;
1517 -> 1479;
1518 -> 1512;
1518 -> 1479;
1519 -> 1479;
1520 -> 1512;
1520 -> 1208;
1521 -> 1448;
1521 -> 1520;
1521 -> 1516;
1521 -> 1203;
1522 -> 943;
1522 -> 917;
1523 -> 943;
1523 -> 917;
1524 -> 943;
1524 -> 917;
1525 -> 917;
1526 -> 1523;
1526 -> 1525;
1526 -> 917;
1527 -> 1524;
1527 -> 917;
1528 -> 1524;
1528 -> 1521;
1528 -> 1522;
1528 -> 917;
1529 -> 1523;
1529 -> 917;
1530 -> 917;
1531 -> 917;
1532 -> 1527;
1532 -> 1531;
1533 -> 1528;
1533 -> 1531;
1534 -> 1529;
1534 -> 1531;
1535 -> 1530;
1535 -> 1531;
1536 -> 1532;
1536 -> 1531;
1537 -> 1533;
1537 -> 1531;
1538 -> 1531;
1539 -> 1536;
1539 -> 1538;
1540 -> 1537;
1540 -> 1538;
1541 -> 1535;
1541 -> 1538;
1542 -> 1541;
1542 -> 1538;
1543 -> 1541;
1543 -> 1538;
1544 -> 1541;
1544 -> 1538;
1545 -> 1541;
1545 -> 1538;
1546 -> 1541;
1546 -> 1538;
1547 -> 1538;
1548 -> 1539;
1548 -> 1547;
1548 -> 1538;
1549 -> 1540;
1549 -> 1538;
1550 -> 0;
1550 -> 1538;
1551 -> 1538;
1552 -> 1549;
1552 -> 1551;
1553 -> 1550;
1553 -> 1551;
1554 -> 1540;
1554 -> 1538;
1555 -> 0;
1555 -> 1538;
1556 -> 1538;
1557 -> 1554;
1557 -> 1556;
1558 -> 1555;
1558 -> 1556;
1559 -> 1539;
1559 -> 1541;
1559 -> 1538;
1560 -> 1540;
1560 -> 1541;
1560 -> 1538;
1561 -> 1539;
1561 -> 1521;
1561 -> 1541;
1561 -> 1538;
1562 -> 1535;
1562 -> 1531;
1563 -> 1531;
1564 -> 1534;
1564 -> 1563;
1564 -> 1531;
1565 -> 1534;
1565 -> 1535;
1565 -> 1531;
1566 -> 943;
1566 -> 1530;
1566 -> 1521;
1566 -> 1561;
1566 -> 1560;
1566 -> 1559;
1566 -> 1545;
1566 -> 1546;
1566 -> 1565;
1566 -> 914;
1567 -> 943;
1567 -> 917;
1568 -> 943;
1568 -> 917;
1569 -> 943;
1569 -> 917;
1570 -> 943;
1570 -> 917;
1571 -> 943;
1571 -> 917;
1572 -> 1567;
1572 -> 917;
1573 -> 1568;
1573 -> 917;
1574 -> 1569;
1574 -> 917;
1575 -> 1570;
1575 -> 917;
1576 -> 917;
1577 -> 1572;
1577 -> 1576;
1578 -> 1573;
1578 -> 1576;
1579 -> 1574;
1579 -> 1576;
1580 -> 1575;
1580 -> 1576;
1581 -> 1571;
1581 -> 1576;
1582 -> 1576;
1583 -> 1578;
1583 -> 1582;
1583 -> 1576;
1584 -> 1577;
1584 -> 1576;
1585 -> 1578;
1585 -> 1576;
1586 -> 1579;
1586 -> 1576;
1587 -> 1576;
1588 -> 1579;
1588 -> 1587;
1588 -> 1576;
1589 -> 1588;
1589 -> 1580;
1589 -> 1576;
1590 -> 1576;
1591 -> 1584;
1591 -> 1590;
1592 -> 1585;
1592 -> 1590;
1593 -> 1586;
1593 -> 1590;
1594 -> 1589;
1594 -> 1590;
1595 -> 1581;
1595 -> 1590;
1596 -> 1591;
1596 -> 1566;
1596 -> 1590;
1597 -> 1591;
1597 -> 1596;
1598 -> 1592;
1598 -> 1596;
1599 -> 1596;
1600 -> 1597;
1600 -> 1599;
1601 -> 1598;
1601 -> 1599;
1602 -> 1595;
1602 -> 1599;
1603 -> 1600;
1603 -> 1599;
1604 -> 1603;
1604 -> 1599;
1605 -> 1601;
1605 -> 1599;
1606 -> 1599;
1607 -> 1604;
1607 -> 1606;
1608 -> 1605;
1608 -> 1606;
1609 -> 1602;
1609 -> 1606;
1610 -> 1607;
1610 -> 1596;
1610 -> 1606;
1611 -> 1608;
1611 -> 1606;
1612 -> 1607;
1612 -> 1606;
1613 -> 1606;
1614 -> 1610;
1614 -> 1613;
1615 -> 1611;
1615 -> 1613;
1616 -> 1612;
1616 -> 1613;
1617 -> 1609;
1617 -> 1613;
1618 -> 1617;
1618 -> 1610;
1618 -> 1613;
1619 -> 1614;
1619 -> 1613;
1620 -> 1616;
1620 -> 1613;
1621 -> 1615;
1621 -> 1613;
1622 -> 1613;
1623 -> 1618;
1623 -> 1622;
1624 -> 1619;
1624 -> 1622;
1625 -> 1620;
1625 -> 1622;
1626 -> 1621;
1626 -> 1622;
1627 -> 1624;
1627 -> 1622;
1628 -> 1623;
1628 -> 1627;
1628 -> 1610;
1628 -> 1622;
1629 -> 1622;
1630 -> 1628;
1630 -> 1629;
1630 -> 1622;
1631 -> 1628;
1631 -> 1622;
1632 -> 1626;
1632 -> 1622;
1633 -> 1625;
1633 -> 1622;
1634 -> 1622;
1635 -> 1631;
1635 -> 1634;
1636 -> 1632;
1636 -> 1634;
1637 -> 1633;
1637 -> 1634;
1638 -> 1635;
1638 -> 1628;
1638 -> 1634;
1639 -> 1634;
1640 -> 1638;
1640 -> 1639;
1641 -> 1638;
1641 -> 1639;
1642 -> 1640;
1642 -> 1639;
1643 -> 1640;
1643 -> 1638;
1643 -> 1639;
1644 -> 1640;
1644 -> 1638;
1644 -> 1639;
1645 -> 1640;
1645 -> 1638;
1645 -> 1639;
1646 -> 1645;
1646 -> 1639;
1647 -> 1634;
1648 -> 1638;
1648 -> 1647;
1648 -> 1634;
1649 -> 1628;
1649 -> 1622;
1650 -> 1603;
1650 -> 1638;
1650 -> 1599;
1651 -> 1599;
1652 -> 1650;
1652 -> 1651;
1653 -> 1602;
1653 -> 1651;
1654 -> 1652;
1654 -> 1638;
1654 -> 1651;
1655 -> 1652;
1655 -> 1638;
1655 -> 1651;
1656 -> 1651;
1657 -> 1655;
1657 -> 1656;
1658 -> 1655;
1658 -> 1656;
1659 -> 1653;
1659 -> 1656;
1660 -> 1657;
1660 -> 1656;
1661 -> 1658;
1661 -> 1656;
1662 -> 1660;
1662 -> 1661;
1662 -> 1654;
1662 -> 1656;
1663 -> 1662;
1663 -> 1656;
1664 -> 1659;
1664 -> 1662;
1664 -> 1663;
1665 -> 0;
1665 -> 1663;
1666 -> 1663;
1667 -> 1659;
1667 -> 1666;
1668 -> 1667;
1668 -> 1664;
1668 -> 1666;
1669 -> 1666;
1670 -> 1667;
1670 -> 1668;
1670 -> 1669;
1671 -> 1670;
1671 -> 1669;
1672 -> 1669;
1673 -> 1671;
1673 -> 1672;
1674 -> 1673;
1674 -> 1670;
1674 -> 1672;
1675 -> 1674;
1676 -> 1675;
1676 -> 1669;
1677 -> 1676;
1677 -> 1669;
1678 -> 1649;
1678 -> 1599;
1679 -> 1599;
1680 -> 1678;
1680 -> 1679;
1681 -> 1680;
1681 -> 1679;
1682 -> 1679;
1683 -> 1679;
1684 -> 1681;
1684 -> 1683;
1685 -> 1682;
1685 -> 1683;
1686 -> 1684;
1686 -> 1683;
1687 -> 1684;
1687 -> 1685;
1687 -> 1683;
1688 -> 1683;
1689 -> 1688;
1689 -> 1685;
1689 -> 1683;
1690 -> 1683;
1691 -> 1690;
1691 -> 1685;
1691 -> 1683;
1692 -> 1682;
1692 -> 1599;
1693 -> 1599;
1694 -> 1677;
1694 -> 1692;
1694 -> 1693;
1694 -> 1687;
1694 -> 1689;
1694 -> 1691;
1694 -> 1599;
1695 -> 1576;
1696 -> 1694;
1696 -> 1695;
1697 -> 1696;
1697 -> 1694;
1697 -> 1695;
1698 -> 1697;
1698 -> 1576;
1699 -> 1698;
1700 -> 1699;
1700 -> 1698;
1701 -> 1700;
1702 -> 1694;
1702 -> 1701;
1703 -> 1702;
1703 -> 1694;
1703 -> 1701;
1704 -> 1703;
1704 -> 1700;
1705 -> 1581;
1705 -> 1700;
1706 -> 1577;
1706 -> 1700;
1707 -> 1578;
1707 -> 1700;
1708 -> 1705;
1708 -> 1706;
1708 -> 1707;
1708 -> 1704;
1708 -> 1670;
1708 -> 1694;
1708 -> 1700;
1709 -> 1700;
1710 -> 1708;
1710 -> 1709;
1711 -> 1708;
1711 -> 1709;
1712 -> 1708;
1712 -> 1709;
1713 -> 1708;
1713 -> 1709;
1714 -> 1708;
1714 -> 1709;
1715 -> 1710;
1715 -> 1709;
1716 -> 1711;
1716 -> 1709;
1717 -> 1712;
1717 -> 1709;
1718 -> 1713;
1718 -> 1709;
1719 -> 1709;
1720 -> 1715;
1720 -> 1719;
1721 -> 1716;
1721 -> 1719;
1722 -> 1717;
1722 -> 1719;
1723 -> 1718;
1723 -> 1719;
1724 -> 1714;
1724 -> 1719;
1725 -> 1721;
1725 -> 1708;
1725 -> 1719;
1726 -> 1720;
1726 -> 1725;
1727 -> 1721;
1727 -> 1725;
1728 -> 1722;
1728 -> 1725;
1729 -> 1723;
1729 -> 1725;
1730 -> 1725;
1731 -> 1724;
1731 -> 1730;
1732 -> 1731;
1732 -> 1708;
1732 -> 1730;
1733 -> 1732;
1733 -> 1725;
1734 -> 1725;
1735 -> 1724;
1735 -> 1734;
1736 -> 1734;
1737 -> 1735;
1737 -> 1736;
1738 -> 1737;
1738 -> 1708;
1738 -> 1736;
1739 -> 1738;
1739 -> 1734;
1740 -> 1739;
1740 -> 1734;
1741 -> 1739;
1741 -> 1708;
1741 -> 0;
1741 -> 1734;
1742 -> 1739;
1742 -> 1734;
1743 -> 1739;
1743 -> 1708;
1743 -> 1734;
1744 -> 1743;
1744 -> 1725;
1745 -> 1724;
1745 -> 1708;
1745 -> 1725;
1746 -> 1725;
1747 -> 1726;
1747 -> 1746;
1748 -> 1727;
1748 -> 1746;
1749 -> 1728;
1749 -> 1746;
1750 -> 1729;
1750 -> 1746;
1751 -> 1733;
1751 -> 1746;
1752 -> 1744;
1752 -> 1746;
1753 -> 1745;
1753 -> 1746;
1754 -> 1748;
1754 -> 1746;
1755 -> 1748;
1755 -> 1754;
1755 -> 0;
1755 -> 1746;
1756 -> 1748;
1756 -> 1754;
1756 -> 0;
1756 -> 1746;
1757 -> 1748;
1757 -> 1746;
1758 -> 1752;
1758 -> 1746;
1759 -> 1757;
1759 -> 1758;
1759 -> 1754;
1759 -> 1746;
1760 -> 1750;
1760 -> 1746;
1761 -> 1760;
1761 -> 1746;
1762 -> 1747;
1762 -> 1746;
1763 -> 1759;
1763 -> 1746;
1764 -> 1749;
1764 -> 1746;
1765 -> 1751;
1765 -> 1746;
1766 -> 1753;
1766 -> 1746;
1767 -> 1746;
1768 -> 1762;
1768 -> 1767;
1769 -> 1763;
1769 -> 1767;
1770 -> 1764;
1770 -> 1767;
1771 -> 1765;
1771 -> 1767;
1772 -> 1766;
1772 -> 1767;
1773 -> 1767;
1774 -> 1768;
1774 -> 1773;
1774 -> 1767;
1775 -> 1769;
1775 -> 1767;
1776 -> 1771;
1776 -> 1767;
1777 -> 1767;
1778 -> 1775;
1778 -> 1776;
1778 -> 1777;
1778 -> 1759;
1778 -> 1767;
1779 -> 1767;
1780 -> 1778;
1780 -> 1767;
1781 -> 1767;
1782 -> 1779;
1782 -> 1781;
1782 -> 1767;
1783 -> 1778;
1783 -> 1767;
1784 -> 1783;
1784 -> 1746;
1785 -> 1760;
1785 -> 1784;
1786 -> 1725;
1787 -> 1709;
1788 -> 1694;
1788 -> 1698;
1789 -> 1788;
1789 -> 917;
1790 -> 1568;
1790 -> 917;
1791 -> 1567;
1791 -> 917;
1792 -> 1569;
1792 -> 917;
1793 -> 917;
1794 -> 1789;
1794 -> 1793;
1795 -> 1790;
1795 -> 1793;
1796 -> 1791;
1796 -> 1793;
1797 -> 1792;
1797 -> 1793;
1798 -> 1571;
1798 -> 1793;
1799 -> 1793;
1800 -> 1794;
1800 -> 1799;
1801 -> 1800;
1801 -> 1694;
1801 -> 1799;
1802 -> 1801;
1802 -> 0;
1802 -> 1799;
1803 -> 1802;
1803 -> 1793;
1804 -> 1794;
1804 -> 1793;
1805 -> 917;
1806 -> 1804;
1806 -> 1805;
1807 -> 1806;
1807 -> 1694;
1807 -> 1805;
1808 -> 943;
1808 -> 1807;
1808 -> 1778;
1808 -> 914;
1809 -> 1592;
1809 -> 1808;
1810 -> 1809;
1810 -> 1808;
1811 -> 1810;
1811 -> 1808;
1812 -> 1808;
1813 -> 1812;
1813 -> 1808;
1814 -> 1811;
1814 -> 1808;
1815 -> 1808;
1816 -> 1814;
1816 -> 1808;
1817 -> 1813;
1817 -> 1808;
1818 -> 1808;
1819 -> 1812;
1819 -> 1808;
1820 -> 1812;
1821 -> 1812;
1822 -> 1812;
1823 -> 1820;
1823 -> 1812;
1824 -> 1821;
1824 -> 1812;
1825 -> 1822;
1825 -> 1812;
1826 -> 1824;
1826 -> 1820;
1827 -> 1825;
1827 -> 1820;
1828 -> 1820;
1829 -> 1820;
1829 -> 1812;
1829 -> 0;
1830 -> 1820;
1831 -> 1823;
1831 -> 1820;
1832 -> 1826;
1832 -> 1820;
1833 -> 1827;
1833 -> 1820;
1834 -> 1823;
1834 -> 1820;
1835 -> 1820;
1835 -> 0;
1836 -> 1820;
1836 -> 0;
1837 -> 1833;
1837 -> 1820;
1838 -> 1837;
1838 -> 1820;
1839 -> 1831;
1839 -> 1820;
1840 -> 1832;
1840 -> 1820;
1841 -> 1834;
1841 -> 1820;
1842 -> 1820;
1843 -> 1839;
1843 -> 1842;
1843 -> 1820;
1844 -> 1820;
1845 -> 1820;
1846 -> 1820;
1847 -> 1844;
1847 -> 1846;
1847 -> 1820;
1848 -> 1820;
1849 -> 1848;
1849 -> 1820;
1850 -> 1837;
1850 -> 1849;
1851 -> 1812;
1851 -> 1799;
1852 -> 1851;
1852 -> 1812;
1852 -> 1799;
1853 -> 1852;
1853 -> 0;
1853 -> 1799;
1854 -> 1853;
1854 -> 1793;
1855 -> 943;
1855 -> 917;
1856 -> 943;
1856 -> 917;
1857 -> 943;
1857 -> 917;
1858 -> 943;
1858 -> 917;
1859 -> 943;
1859 -> 917;
1860 -> 917;
1861 -> 1855;
1861 -> 1820;
1861 -> 917;
1862 -> 917;
1863 -> 1856;
1863 -> 1820;
1863 -> 917;
1864 -> 1863;
1865 -> 1856;
1865 -> 1863;
1866 -> 1865;
1866 -> 1820;
1867 -> 1866;
1867 -> 1865;
1868 -> 1865;
1869 -> 1860;
1869 -> 1868;
1869 -> 1865;
1870 -> 1866;
1870 -> 1865;
1871 -> 1864;
1871 -> 1870;
1871 -> 1865;
1872 -> 1857;
1872 -> 1871;
1873 -> 1865;
1873 -> 1872;
1874 -> 1858;
1874 -> 1872;
1875 -> 1872;
1876 -> 1873;
1876 -> 1875;
1877 -> 1874;
1877 -> 1875;
1878 -> 1859;
1878 -> 1875;
1879 -> 1876;
1879 -> 1875;
1880 -> 1875;
1881 -> 1879;
1881 -> 1880;
1882 -> 1881;
1882 -> 1820;
1882 -> 1880;
1883 -> 1880;
1884 -> 1882;
1884 -> 1820;
1884 -> 1883;
1884 -> 1880;
1885 -> 1884;
1885 -> 1880;
1886 -> 1876;
1886 -> 1875;
1887 -> 1885;
1887 -> 1875;
1888 -> 1876;
1888 -> 1820;
1888 -> 1885;
1888 -> 1875;
1889 -> 1877;
1889 -> 1875;
1890 -> 1875;
1891 -> 1886;
1891 -> 1890;
1892 -> 1887;
1892 -> 1890;
1893 -> 1888;
1893 -> 1890;
1894 -> 1889;
1894 -> 1890;
1895 -> 1878;
1895 -> 1890;
1896 -> 1893;
1896 -> 1890;
1897 -> 1895;
1897 -> 1885;
1897 -> 1890;
1898 -> 0;
1898 -> 1890;
1899 -> 1895;
1899 -> 1890;
1900 -> 1890;
1901 -> 1899;
1902 -> 1899;
1903 -> 1902;
1903 -> 1899;
1904 -> 1899;
1905 -> 1899;
1906 -> 1899;
1906 -> 1905;
1907 -> 1905;
1908 -> 1907;
1908 -> 1899;
1909 -> 1897;
1909 -> 1908;
1909 -> 1899;
1910 -> 1899;
1911 -> 1899;
1911 -> 1910;
1912 -> 1910;
1913 -> 1911;
1913 -> 1912;
1914 -> 1913;
1914 -> 1897;
1914 -> 1912;
1915 -> 1914;
1915 -> 1910;
1916 -> 1915;
1916 -> 1897;
1916 -> 1910;
1917 -> 1915;
1917 -> 1897;
1917 -> 0;
1917 -> 1916;
1918 -> 1916;
1919 -> 1918;
1919 -> 1897;
1920 -> 1919;
1920 -> 1916;
1921 -> 1920;
1921 -> 1899;
1922 -> 1921;
1923 -> 1922;
1923 -> 1875;
1924 -> 1919;
1925 -> 1919;
1926 -> 1860;
1926 -> 1925;
1926 -> 1919;
1927 -> 1858;
1927 -> 1919;
1928 -> 1927;
1928 -> 1919;
1929 -> 1919;
1930 -> 1919;
1930 -> 1820;
1931 -> 1928;
1931 -> 1919;
1932 -> 1929;
1932 -> 1919;
1933 -> 1929;
1933 -> 1919;
1934 -> 1930;
1934 -> 1919;
1935 -> 1931;
1935 -> 1919;
1936 -> 1934;
1936 -> 1919;
1937 -> 1919;
1938 -> 1919;
1939 -> 1938;
1939 -> 1919;
1940 -> 1919;
1941 -> 1919;
1942 -> 1919;
1942 -> 1941;
1943 -> 1941;
1944 -> 1943;
1944 -> 1919;
1945 -> 1919;
1945 -> 0;
1946 -> 1919;
1947 -> 1945;
1947 -> 1919;
1948 -> 1947;
1949 -> 1948;
1949 -> 1919;
1950 -> 1860;
1950 -> 917;
1951 -> 1864;
1951 -> 1919;
1951 -> 917;
1952 -> 1592;
1952 -> 1919;
1953 -> 1952;
1953 -> 1919;
1954 -> 1953;
1954 -> 1919;
1955 -> 1919;
1956 -> 1954;
1956 -> 1919;
1957 -> 1919;
1958 -> 1956;
1958 -> 1919;
1959 -> 1955;
1959 -> 1919;
1960 -> 1919;
1961 -> 1919;
1962 -> 1919;
1963 -> 1919;
1964 -> 1919;
1965 -> 1962;
1965 -> 1919;
1966 -> 1963;
1966 -> 1919;
1967 -> 1919;
1968 -> 1919;
1968 -> 0;
1969 -> 1919;
1970 -> 1964;
1970 -> 1919;
1971 -> 1965;
1971 -> 1919;
1972 -> 1966;
1972 -> 1919;
1973 -> 1964;
1973 -> 1919;
1974 -> 1964;
1974 -> 0;
1974 -> 1919;
1975 -> 1964;
1975 -> 0;
1975 -> 1919;
1976 -> 1972;
1976 -> 1919;
1977 -> 1976;
1977 -> 1919;
1978 -> 1970;
1978 -> 1919;
1979 -> 1971;
1979 -> 1919;
1980 -> 1973;
1980 -> 1919;
1981 -> 1919;
1982 -> 1978;
1982 -> 1981;
1982 -> 1919;
1983 -> 1919;
1984 -> 1970;
1984 -> 1919;
1985 -> 1919;
1986 -> 1983;
1986 -> 1985;
1986 -> 1919;
1987 -> 1970;
1987 -> 1919;
1988 -> 1987;
1988 -> 1919;
1989 -> 1976;
1989 -> 1988;
1990 -> 1919;
1990 -> 1799;
1991 -> 1990;
1991 -> 1919;
1991 -> 1799;
1992 -> 1991;
1992 -> 0;
1992 -> 1799;
1993 -> 1992;
1993 -> 1793;
1994 -> 1970;
1994 -> 1167;
1994 -> 1161;
1995 -> 1970;
1995 -> 1463;
1996 -> 1970;
1997 -> 1970;
1998 -> 1970;
1999 -> 1998;
1999 -> 1970;
1999 -> 1997;
2000 -> 1970;
2001 -> 1970;
2001 -> 1487;
2002 -> 1970;
2002 -> 0;
2003 -> 1999;
2003 -> 1538;
2004 -> 2003;
2004 -> 1551;
2005 -> 1999;
2005 -> 1538;
2006 -> 2005;
2006 -> 1556;
2007 -> 1855;
2007 -> 1999;
2007 -> 917;
2008 -> 1862;
2008 -> 917;
2009 -> 1592;
2009 -> 1999;
2010 -> 2009;
2010 -> 1999;
2011 -> 2010;
2011 -> 1999;
2012 -> 1999;
2013 -> 2011;
2013 -> 1999;
2014 -> 1999;
2015 -> 2013;
2015 -> 1999;
2016 -> 2012;
2016 -> 1999;
2017 -> 1999;
2018 -> 1999;
2019 -> 1999;
2020 -> 1999;
2021 -> 2019;
2021 -> 1999;
2022 -> 2020;
2022 -> 1999;
2023 -> 1999;
2024 -> 1999;
2024 -> 0;
2025 -> 1999;
2026 -> 2021;
2026 -> 1999;
2027 -> 2022;
2027 -> 1999;
2028 -> 1999;
2029 -> 1999;
2029 -> 0;
2030 -> 1999;
2030 -> 0;
2031 -> 2027;
2031 -> 1999;
2032 -> 2031;
2032 -> 1999;
2033 -> 1999;
2034 -> 2026;
2034 -> 1999;
2035 -> 2028;
2035 -> 1999;
2036 -> 1999;
2037 -> 2033;
2037 -> 2036;
2037 -> 1999;
2038 -> 1999;
2039 -> 1999;
2040 -> 1999;
2041 -> 2038;
2041 -> 2040;
2041 -> 1999;
2042 -> 1999;
2043 -> 2042;
2043 -> 1999;
2044 -> 2031;
2044 -> 2043;
2045 -> 1999;
2045 -> 1799;
2046 -> 2045;
2046 -> 1999;
2046 -> 1799;
2047 -> 2046;
2047 -> 0;
2047 -> 1799;
2048 -> 2047;
2048 -> 1793;
2049 -> 1999;
2049 -> 1167;
2049 -> 1161;
2050 -> 1999;
2050 -> 1463;
2051 -> 1999;
2052 -> 1999;
2053 -> 1999;
2053 -> 1487;
2054 -> 1999;
2054 -> 0;
2055 -> 2012;
2055 -> 2017;
2055 -> 1999;
2056 -> 2012;
2056 -> 1999;
2057 -> 2012;
2058 -> 2012;
2059 -> 2057;
2059 -> 2012;
2060 -> 2058;
2060 -> 2012;
2061 -> 2012;
2062 -> 2012;
2062 -> 0;
2063 -> 2012;
2064 -> 2059;
2064 -> 2012;
2065 -> 2060;
2065 -> 2012;
2066 -> 2012;
2067 -> 2012;
2067 -> 0;
2068 -> 2012;
2068 -> 0;
2069 -> 2065;
2069 -> 2012;
2070 -> 2069;
2070 -> 2012;
2071 -> 2012;
2072 -> 2064;
2072 -> 2012;
2073 -> 2066;
2073 -> 2012;
2074 -> 2012;
2075 -> 2071;
2075 -> 2074;
2075 -> 2012;
2076 -> 2012;
2077 -> 2012;
2078 -> 2012;
2079 -> 2076;
2079 -> 2078;
2079 -> 2012;
2080 -> 2012;
2081 -> 2080;
2081 -> 2012;
2082 -> 2069;
2082 -> 2081;
2083 -> 2012;
2083 -> 1799;
2084 -> 2083;
2084 -> 2012;
2084 -> 1799;
2085 -> 2084;
2085 -> 0;
2085 -> 1799;
2086 -> 2085;
2086 -> 1793;
2087 -> 1592;
2087 -> 2012;
2088 -> 2087;
2088 -> 2012;
2089 -> 2088;
2089 -> 2012;
2090 -> 2089;
2090 -> 2012;
2091 -> 2012;
2092 -> 2090;
2092 -> 2012;
2093 -> 2012;
2094 -> 2012;
2095 -> 2012;
2096 -> 2060;
2096 -> 2057;
2097 -> 2057;
2098 -> 2057;
2098 -> 2012;
2098 -> 0;
2099 -> 2057;
2100 -> 2059;
2100 -> 2057;
2101 -> 2096;
2101 -> 2057;
2102 -> 2059;
2102 -> 2057;
2103 -> 2057;
2103 -> 0;
2104 -> 2057;
2104 -> 0;
2105 -> 2101;
2105 -> 2057;
2106 -> 2105;
2106 -> 2057;
2107 -> 2057;
2108 -> 2100;
2108 -> 2057;
2109 -> 2102;
2109 -> 2057;
2110 -> 2057;
2111 -> 2107;
2111 -> 2110;
2111 -> 2057;
2112 -> 2057;
2113 -> 2057;
2114 -> 2057;
2115 -> 2112;
2115 -> 2114;
2115 -> 2057;
2116 -> 2057;
2117 -> 2116;
2117 -> 2057;
2118 -> 2105;
2118 -> 2117;
2119 -> 1855;
2119 -> 2057;
2119 -> 917;
2120 -> 2057;
2121 -> 2057;
2122 -> 1860;
2122 -> 2121;
2122 -> 2057;
2123 -> 1858;
2123 -> 2057;
2124 -> 2123;
2124 -> 2057;
2125 -> 2057;
2126 -> 2124;
2126 -> 2057;
2127 -> 2125;
2127 -> 2057;
2128 -> 2125;
2128 -> 2057;
2129 -> 2125;
2129 -> 2057;
2130 -> 2126;
2130 -> 2057;
2131 -> 2129;
2131 -> 2057;
2132 -> 2057;
2133 -> 2057;
2134 -> 2133;
2134 -> 2057;
2135 -> 2057;
2136 -> 2057;
2137 -> 2057;
2137 -> 2136;
2138 -> 2136;
2139 -> 2138;
2139 -> 2057;
2140 -> 2057;
2140 -> 0;
2141 -> 2057;
2142 -> 2140;
2142 -> 2057;
2143 -> 2142;
2144 -> 2143;
2144 -> 2057;
2145 -> 2057;
2145 -> 917;
2146 -> 1592;
2146 -> 2057;
2147 -> 2146;
2147 -> 2057;
2148 -> 2147;
2148 -> 2057;
2149 -> 2148;
2149 -> 2057;
2150 -> 2057;
2151 -> 2149;
2151 -> 2057;
2152 -> 2057;
2153 -> 2057;
2154 -> 2057;
2155 -> 2057;
2156 -> 2057;
2157 -> 2155;
2157 -> 2057;
2158 -> 2057;
2158 -> 0;
2159 -> 2156;
2159 -> 2057;
2160 -> 2157;
2160 -> 2057;
2161 -> 2156;
2161 -> 2057;
2162 -> 2160;
2162 -> 2057;
2163 -> 2162;
2163 -> 2057;
2164 -> 2116;
2164 -> 2057;
2165 -> 2159;
2165 -> 2057;
2166 -> 2161;
2166 -> 2057;
2167 -> 2164;
2167 -> 2110;
2167 -> 2057;
2168 -> 2156;
2168 -> 2057;
2169 -> 2156;
2169 -> 2057;
2170 -> 2169;
2170 -> 2057;
2171 -> 2162;
2171 -> 2170;
2172 -> 2057;
2172 -> 1799;
2173 -> 2172;
2173 -> 2057;
2173 -> 1799;
2174 -> 2173;
2174 -> 0;
2174 -> 1799;
2175 -> 2174;
2175 -> 1793;
2176 -> 943;
2176 -> 917;
2177 -> 943;
2177 -> 917;
2178 -> 943;
2178 -> 917;
2179 -> 2176;
2179 -> 917;
2180 -> 917;
2181 -> 2177;
2181 -> 917;
2182 -> 917;
2183 -> 917;
2184 -> 2179;
2184 -> 2183;
2185 -> 2180;
2185 -> 2183;
2186 -> 2181;
2186 -> 2183;
2187 -> 2182;
2187 -> 2183;
2188 -> 2178;
2188 -> 2183;
2190 -> 2189;
2192 -> 2191;
2194 -> 2193;
2196 -> 2192;
2196 -> 2195;
2197 -> 2194;
2197 -> 2195;
2199 -> 2192;
2199 -> 2198;
2200 -> 2194;
2200 -> 2198;
2202 -> 2192;
2202 -> 2201;
2203 -> 2194;
2203 -> 2201;
2205 -> 2192;
2205 -> 2204;
2206 -> 2194;
2206 -> 2204;
2208 -> 2192;
2208 -> 2207;
2209 -> 2194;
2209 -> 2207;
2211 -> 2192;
2211 -> 2210;
2212 -> 2194;
2212 -> 2210;
2214 -> 2192;
2214 -> 2213;
2215 -> 2194;
2215 -> 2213;
2217 -> 2192;
2217 -> 2216;
2218 -> 2194;
2218 -> 2216;
2220 -> 2192;
2220 -> 2219;
2221 -> 2194;
2221 -> 2219;
2223 -> 2192;
2223 -> 2222;
2224 -> 2194;
2224 -> 2222;
2226 -> 2192;
2226 -> 2225;
2228 -> 2192;
2228 -> 2227;
2230 -> 2195;
2230 -> 2229;
2231 -> 2198;
2231 -> 2229;
2232 -> 2201;
2232 -> 2229;
2233 -> 2204;
2233 -> 2229;
2234 -> 2207;
2234 -> 2229;
2235 -> 2210;
2235 -> 2229;
2236 -> 2213;
2236 -> 2229;
2237 -> 2216;
2237 -> 2229;
2238 -> 2219;
2238 -> 2229;
2239 -> 2222;
2239 -> 2229;
2240 -> 2225;
2240 -> 2229;
2241 -> 2227;
2241 -> 2229;
2242 -> 2229;
2244 -> 2192;
2244 -> 2243;
2245 -> 2194;
2245 -> 2243;
2247 -> 2194;
2247 -> 2246;
2248 -> 2192;
2248 -> 2246;
2250 -> 2194;
2250 -> 2249;
2251 -> 2192;
2251 -> 2249;
2253 -> 2194;
2253 -> 2252;
2254 -> 2192;
2254 -> 2252;
2256 -> 2194;
2256 -> 2255;
2257 -> 2192;
2257 -> 2255;
2259 -> 2194;
2259 -> 2258;
2260 -> 2192;
2260 -> 2258;
2262 -> 2194;
2262 -> 2261;
2263 -> 2192;
2263 -> 2261;
2265 -> 2194;
2265 -> 2264;
2266 -> 2192;
2266 -> 2264;
2268 -> 2194;
2268 -> 2267;
2269 -> 2192;
2269 -> 2267;
2271 -> 2194;
2271 -> 2270;
2272 -> 2192;
2272 -> 2270;
2274 -> 2194;
2274 -> 2273;
2275 -> 2192;
2275 -> 2273;
2277 -> 2194;
2277 -> 2276;
2278 -> 2192;
2278 -> 2276;
2280 -> 2243;
2280 -> 2279;
2281 -> 2246;
2281 -> 2279;
2282 -> 2249;
2282 -> 2279;
2283 -> 2252;
2283 -> 2279;
2284 -> 2255;
2284 -> 2279;
2285 -> 2258;
2285 -> 2279;
2286 -> 2261;
2286 -> 2279;
2287 -> 2264;
2287 -> 2279;
2288 -> 2267;
2288 -> 2279;
2289 -> 2270;
2289 -> 2279;
2290 -> 2273;
2290 -> 2279;
2291 -> 2276;
2291 -> 2279;
2292 -> 2279;
2293 -> 2184;
2293 -> 2183;
2294 -> 2185;
2294 -> 2183;
2295 -> 2186;
2295 -> 2183;
2296 -> 2187;
2296 -> 2183;
2297 -> 2183;
2298 -> 2293;
2298 -> 2297;
2299 -> 2294;
2299 -> 2297;
2300 -> 2295;
2300 -> 2297;
2301 -> 2296;
2301 -> 2297;
2302 -> 2188;
2302 -> 2297;
2303 -> 2302;
2303 -> 2297;
2304 -> 2302;
2304 -> 2297;
2305 -> 2302;
2305 -> 2297;
2306 -> 2302;
2306 -> 2297;
2307 -> 2297;
2308 -> 2298;
2308 -> 2307;
2308 -> 2297;
2309 -> 2297;
2310 -> 2301;
2310 -> 2309;
2310 -> 2297;
2311 -> 2297;
2312 -> 2301;
2312 -> 2311;
2312 -> 2297;
2313 -> 2298;
2313 -> 2302;
2313 -> 2297;
2314 -> 2299;
2314 -> 2302;
2314 -> 2297;
2315 -> 2300;
2315 -> 2302;
2315 -> 2297;
2316 -> 2301;
2316 -> 2302;
2316 -> 2297;
2317 -> 943;
2317 -> 2156;
2317 -> 2313;
2317 -> 2314;
2317 -> 2315;
2317 -> 2316;
2317 -> 914;
2318 -> 2317;
2318 -> 914;
2319 -> 916;
2319 -> 914;
2320 -> 914;
2321 -> 2318;
2321 -> 2320;
2322 -> 2319;
2322 -> 2320;
2323 -> 2321;
2323 -> 2320;
2324 -> 2322;
2324 -> 2320;
2325 -> 2320;
2326 -> 2323;
2326 -> 2325;
2327 -> 2324;
2327 -> 2325;
2328 -> 2326;
2328 -> 2325;
2329 -> 2327;
2329 -> 2325;
2330 -> 2325;
2331 -> 2325;
2332 -> 2328;
2332 -> 2331;
2333 -> 2329;
2333 -> 2331;
2334 -> 2330;
2334 -> 2331;
2335 -> 2331;
2336 -> 2333;
2336 -> 2335;
2336 -> 2331;
2337 -> 2333;
2337 -> 2331;
2338 -> 2337;
2338 -> 214;
2338 -> 912;
2338 -> 913;
2338 -> 715;
2338 -> 716;
2338 -> 725;
2338 -> 717;
2338 -> 718;
2338 -> 742;
2338 -> 721;
2338 -> 722;
2338 -> 735;
2338 -> 723;
2338 -> 724;
2338 -> 720;
2338 -> 739;
2338 -> 740;
2338 -> 741;
2338 -> 707;
2338 -> 883;
2338 -> 884;
2338 -> 893;
2338 -> 885;
2338 -> 886;
2338 -> 910;
2338 -> 889;
2338 -> 890;
2338 -> 903;
2338 -> 891;
2338 -> 892;
2338 -> 888;
2338 -> 907;
2338 -> 908;
2338 -> 909;
2338 -> 875;
2338 -> 650;
2338 -> 596;
2338 -> 818;
2338 -> 768;
2338 -> 2331;
2339 -> 2331;
2340 -> 2337;
2340 -> 2339;
2340 -> 214;
2340 -> 912;
2340 -> 913;
2340 -> 715;
2340 -> 716;
2340 -> 725;
2340 -> 717;
2340 -> 718;
2340 -> 742;
2340 -> 721;
2340 -> 722;
2340 -> 735;
2340 -> 723;
2340 -> 724;
2340 -> 720;
2340 -> 739;
2340 -> 740;
2340 -> 741;
2340 -> 707;
2340 -> 883;
2340 -> 884;
2340 -> 893;
2340 -> 885;
2340 -> 886;
2340 -> 910;
2340 -> 889;
2340 -> 890;
2340 -> 903;
2340 -> 891;
2340 -> 892;
2340 -> 888;
2340 -> 907;
2340 -> 908;
2340 -> 909;
2340 -> 875;
2340 -> 650;
2340 -> 596;
2340 -> 818;
2340 -> 768;
2340 -> 2331;
2341 -> 2340;
2341 -> 2339;
2342 -> 2341;
2342 -> 2340;
2342 -> 2339;
2343 -> 2333;
2343 -> 2331;
2344 -> 2343;
2344 -> 2342;
2344 -> 2331;
2345 -> 2331;
2346 -> 2343;
2346 -> 2345;
2346 -> 2342;
2346 -> 2331;
2347 -> 2346;
2347 -> 2345;
2348 -> 2347;
2348 -> 2346;
2348 -> 2345;
2349 -> 2332;
2349 -> 2331;
2350 -> 2334;
2350 -> 2342;
2350 -> 2348;
2350 -> 2331;
2351 -> 2349;
2351 -> 2350;
2351 -> 2331;
2352 -> 2331;
2353 -> 2351;
2353 -> 2352;
2354 -> 2351;
2354 -> 2352;
2355 -> 2351;
2355 -> 2352;
2356 -> 2351;
2356 -> 2352;
2357 -> 2351;
2357 -> 2352;
2358 -> 2357;
2358 -> 2352;
2359 -> 2357;
2359 -> 2352;
2360 -> 2357;
2360 -> 2352;
2361 -> 2357;
2361 -> 2352;
2362 -> 2357;
2362 -> 2352;
2363 -> 2357;
2363 -> 2352;
2364 -> 2357;
2364 -> 2352;
2365 -> 2357;
2365 -> 2352;
2366 -> 2357;
2366 -> 2352;
2367 -> 2357;
2367 -> 2352;
2368 -> 2357;
2368 -> 2352;
2369 -> 2353;
2369 -> 2351;
2369 -> 2357;
2369 -> 2352;
2370 -> 2353;
2370 -> 2351;
2370 -> 2357;
2370 -> 2352;
2371 -> 2353;
2371 -> 2351;
2371 -> 2357;
2371 -> 2352;
2372 -> 2353;
2372 -> 2351;
2372 -> 2357;
2372 -> 2352;
2373 -> 2355;
2373 -> 2352;
2374 -> 2373;
2375 -> 2374;
2375 -> 2357;
2375 -> 2352;
2376 -> 2356;
2376 -> 2352;
2377 -> 2376;
2378 -> 2377;
2378 -> 2357;
2378 -> 2352;
2379 -> 2352;
2380 -> 2352;
2381 -> 2353;
2381 -> 2351;
2381 -> 2380;
2381 -> 2352;
2382 -> 2353;
2382 -> 2351;
2382 -> 2352;
2383 -> 0;
2383 -> 2352;
2384 -> 2353;
2384 -> 2381;
2385 -> 2381;
2386 -> 2384;
2386 -> 2385;
2386 -> 2381;
2387 -> 2384;
2387 -> 2382;
2387 -> 2357;
2387 -> 2386;
2388 -> 2353;
2388 -> 2382;
2388 -> 2357;
2388 -> 2386;
2389 -> 2354;
2389 -> 2357;
2389 -> 2352;
2390 -> 2357;
2390 -> 2389;
2390 -> 2352;
2391 -> 2357;
2391 -> 2372;
2391 -> 2382;
2391 -> 2390;
2392 -> 2391;
2393 -> 2392;
2393 -> 2357;
2393 -> 2391;
2394 -> 2390;
2395 -> 2384;
2395 -> 2394;
2395 -> 2390;
2396 -> 2384;
2396 -> 2392;
2396 -> 2357;
2396 -> 2395;
2397 -> 2390;
2398 -> 2357;
2398 -> 2396;
2398 -> 2397;
2398 -> 2390;
2399 -> 2357;
2399 -> 2396;
2399 -> 2392;
2399 -> 2397;
2399 -> 2390;
2400 -> 2357;
2400 -> 2372;
2400 -> 2392;
2400 -> 2352;
2401 -> 2400;
2401 -> 2357;
2401 -> 2352;
2402 -> 2351;
2402 -> 2400;
2402 -> 2388;
2402 -> 2370;
2402 -> 2371;
2402 -> 2393;
2402 -> 2396;
2402 -> 2401;
2402 -> 2364;
2402 -> 2387;
2402 -> 2389;
2402 -> 2375;
2402 -> 2378;
2402 -> 2368;
2402 -> 2357;
2402 -> 2372;
2402 -> 2331;
2403 -> 2353;
2403 -> 2402;
2403 -> 2357;
2403 -> 2352;
2404 -> 2357;
2404 -> 2402;
2404 -> 2397;
2404 -> 2390;
2405 -> 2333;
2405 -> 2331;
2406 -> 2405;
2406 -> 2348;
2406 -> 2331;
2407 -> 2406;
2408 -> 2407;
2408 -> 2402;
2408 -> 2348;
2408 -> 2406;
2409 -> 2408;
2409 -> 2407;
2410 -> 2408;
2410 -> 2407;
2411 -> 2409;
2411 -> 2407;
2412 -> 2407;
2413 -> 2411;
2413 -> 2412;
2413 -> 2407;
2414 -> 2411;
2414 -> 2408;
2414 -> 2407;
2415 -> 2410;
2415 -> 2408;
2415 -> 2414;
2415 -> 2407;
2416 -> 2410;
2416 -> 2415;
2416 -> 2411;
2416 -> 2407;
2417 -> 2410;
2417 -> 2415;
2417 -> 2411;
2417 -> 2407;
2418 -> 2410;
2418 -> 2415;
2418 -> 2407;
2419 -> 2410;
2419 -> 2415;
2419 -> 2411;
2419 -> 2418;
2420 -> 2407;
2421 -> 2410;
2421 -> 2415;
2421 -> 2420;
2421 -> 2407;
2422 -> 2421;
2423 -> 2410;
2423 -> 2415;
2423 -> 2411;
2423 -> 2422;
2424 -> 2407;
2425 -> 2410;
2425 -> 2415;
2425 -> 2424;
2425 -> 2407;
2426 -> 2407;
2427 -> 2411;
2427 -> 2415;
2427 -> 2426;
2427 -> 2407;
2428 -> 2410;
2428 -> 2415;
2428 -> 2411;
2428 -> 2407;
2429 -> 2407;
2430 -> 2410;
2430 -> 2415;
2430 -> 2429;
2430 -> 2407;
2431 -> 2430;
2432 -> 2430;
2433 -> 2410;
2433 -> 2432;
2434 -> 2432;
2435 -> 2433;
2435 -> 2415;
2435 -> 2434;
2435 -> 2432;
2436 -> 2433;
2436 -> 2415;
2436 -> 2435;
2437 -> 2435;
2438 -> 2436;
2438 -> 2433;
2438 -> 2435;
2439 -> 2433;
2439 -> 2415;
2439 -> 2438;
2439 -> 2432;
2440 -> 2439;
2440 -> 2430;
2441 -> 2430;
2442 -> 2411;
2442 -> 2441;
2443 -> 2441;
2444 -> 2442;
2444 -> 2415;
2444 -> 2438;
2444 -> 2443;
2444 -> 2441;
2445 -> 2442;
2445 -> 2415;
2445 -> 2438;
2445 -> 2444;
2445 -> 2441;
2446 -> 2445;
2446 -> 2430;
2447 -> 2410;
2447 -> 2415;
2447 -> 2411;
2447 -> 2430;
2448 -> 2440;
2448 -> 2447;
2449 -> 2446;
2449 -> 2447;
2450 -> 2448;
2450 -> 2449;
2450 -> 2415;
2450 -> 2438;
2450 -> 2444;
2450 -> 2436;
2450 -> 2437;
2450 -> 2447;
2451 -> 2410;
2451 -> 2450;
2451 -> 2411;
2451 -> 2407;
2452 -> 2407;
2453 -> 2408;
2453 -> 2452;
2453 -> 2450;
2453 -> 2406;
2454 -> 2406;
2455 -> 2453;
2455 -> 2454;
2455 -> 2406;
2456 -> 2453;
2456 -> 2455;
2457 -> 2456;
2458 -> 2456;
2459 -> 2456;
2460 -> 2456;
2461 -> 2456;
2461 -> 2460;
2462 -> 2456;
2463 -> 2462;
2464 -> 2456;
2464 -> 2463;
2465 -> 2456;
2466 -> 2456;
2467 -> 2456;
2468 -> 2456;
2469 -> 2456;
2470 -> 2331;
2471 -> 2402;
2471 -> 2456;
2471 -> 2470;
2471 -> 2331;
2472 -> 2331;
2473 -> 2333;
2473 -> 2331;
2474 -> 2332;
2474 -> 2331;
2475 -> 2331;
2476 -> 2473;
2476 -> 2475;
2477 -> 2474;
2477 -> 2475;
2478 -> 2475;
2479 -> 2475;
2480 -> 2477;
2480 -> 2475;
2481 -> 2480;
2481 -> 2456;
2481 -> 2475;
2482 -> 2456;
2482 -> 2475;
2483 -> 2481;
2483 -> 2475;
2484 -> 2478;
2484 -> 2483;
2485 -> 2484;
2485 -> 2475;
2486 -> 2484;
2486 -> 2475;
2487 -> 2486;
2487 -> 2475;
2488 -> 2476;
2488 -> 2475;
2489 -> 2488;
2489 -> 2456;
2489 -> 2475;
2490 -> 2475;
2491 -> 2488;
2491 -> 2490;
2491 -> 2456;
2491 -> 2475;
2492 -> 2476;
2492 -> 2475;
2493 -> 2492;
2493 -> 2491;
2493 -> 2475;
2494 -> 2475;
2495 -> 2492;
2495 -> 2494;
2495 -> 2491;
2495 -> 2475;
2496 -> 2476;
2496 -> 2475;
2497 -> 2475;
2498 -> 2496;
2498 -> 2497;
2500 -> 2499;
2501 -> 2499;
2502 -> 2501;
2502 -> 2497;
2503 -> 2497;
2504 -> 2498;
2504 -> 2497;
2505 -> 2504;
2505 -> 2495;
2505 -> 2497;
2506 -> 2505;
2507 -> 2505;
2508 -> 2503;
2508 -> 2507;
2508 -> 2505;
2509 -> 2505;
2510 -> 2509;
2510 -> 2507;
2510 -> 2505;
2511 -> 2509;
2511 -> 2495;
2511 -> 2505;
2512 -> 2505;
2512 -> 2495;
2513 -> 2505;
2514 -> 2511;
2514 -> 2513;
2515 -> 2512;
2515 -> 2513;
2516 -> 2502;
2516 -> 2513;
2517 -> 2513;
2518 -> 2514;
2518 -> 2517;
2518 -> 2513;
2519 -> 2513;
2520 -> 2515;
2520 -> 2519;
2520 -> 2513;
2521 -> 2515;
2521 -> 2495;
2521 -> 2513;
2522 -> 2514;
2522 -> 2495;
2522 -> 2521;
2522 -> 2513;
2523 -> 2513;
2524 -> 2522;
2524 -> 2523;
2524 -> 2513;
2525 -> 2522;
2525 -> 2524;
2526 -> 2497;
2527 -> 2526;
2527 -> 2475;
2528 -> 2477;
2528 -> 2527;
2529 -> 2527;
2530 -> 2528;
2530 -> 2529;
2531 -> 2530;
2531 -> 2529;
2532 -> 2529;
2533 -> 2501;
2533 -> 2529;
2534 -> 2531;
2534 -> 2532;
2534 -> 2533;
2534 -> 2495;
2534 -> 2529;
2535 -> 2475;
2536 -> 2535;
2536 -> 2475;
2537 -> 2475;
2538 -> 2475;
2539 -> 2535;
2539 -> 2538;
2539 -> 2536;
2539 -> 2475;
2540 -> 2475;
2541 -> 2476;
2541 -> 2475;
2542 -> 2541;
2542 -> 2534;
2542 -> 2475;
2543 -> 2542;
2544 -> 2487;
2544 -> 2542;
2545 -> 2542;
2546 -> 2543;
2546 -> 2545;
2547 -> 2544;
2547 -> 2545;
2548 -> 2545;
2549 -> 2548;
2549 -> 2547;
2549 -> 2545;
2550 -> 2545;
2551 -> 2546;
2551 -> 2550;
2552 -> 2550;
2553 -> 2550;
2554 -> 2552;
2554 -> 2553;
2554 -> 2550;
2555 -> 2550;
2556 -> 2551;
2556 -> 2534;
2556 -> 2555;
2556 -> 2550;
2557 -> 2551;
2557 -> 2534;
2557 -> 2556;
2558 -> 2552;
2558 -> 2557;
2558 -> 2554;
2558 -> 2556;
2559 -> 2556;
2560 -> 2552;
2560 -> 2559;
2560 -> 2558;
2560 -> 2556;
2561 -> 2551;
2561 -> 2534;
2561 -> 2556;
2562 -> 2552;
2562 -> 2561;
2562 -> 2560;
2562 -> 2556;
2563 -> 2550;
2564 -> 2551;
2564 -> 2534;
2564 -> 2563;
2564 -> 2550;
2565 -> 2564;
2566 -> 2565;
2567 -> 2552;
2567 -> 2566;
2567 -> 2562;
2567 -> 2565;
2568 -> 2551;
2568 -> 2534;
2568 -> 2565;
2569 -> 2552;
2569 -> 2568;
2569 -> 2567;
2569 -> 2565;
2570 -> 2564;
2571 -> 2552;
2571 -> 2570;
2571 -> 2569;
2571 -> 2564;
2572 -> 2551;
2572 -> 2534;
2572 -> 2550;
2573 -> 2550;
2574 -> 2552;
2574 -> 2573;
2574 -> 2571;
2574 -> 2550;
2575 -> 2550;
2576 -> 2551;
2576 -> 2534;
2576 -> 2575;
2576 -> 2550;
2577 -> 2576;
2578 -> 2552;
2578 -> 2577;
2578 -> 2574;
2578 -> 2576;
2579 -> 2576;
2580 -> 2579;
2580 -> 2576;
2581 -> 2576;
2582 -> 2580;
2582 -> 2576;
2583 -> 2582;
2584 -> 2552;
2584 -> 2583;
2584 -> 2578;
2584 -> 2582;
2585 -> 2580;
2585 -> 2582;
2586 -> 2552;
2586 -> 2585;
2586 -> 2584;
2586 -> 2582;
2587 -> 2582;
2588 -> 2552;
2588 -> 2587;
2588 -> 2586;
2588 -> 2582;
2589 -> 2582;
2590 -> 2589;
2591 -> 2552;
2591 -> 2590;
2591 -> 2588;
2591 -> 2589;
2592 -> 2576;
2593 -> 2552;
2593 -> 2592;
2593 -> 2591;
2593 -> 2576;
2594 -> 2550;
2595 -> 2551;
2595 -> 2582;
2595 -> 2594;
2595 -> 2550;
2596 -> 2595;
2597 -> 2552;
2597 -> 2596;
2597 -> 2593;
2597 -> 2595;
2598 -> 2595;
2599 -> 2552;
2599 -> 2598;
2599 -> 2597;
2599 -> 2595;
2600 -> 2595;
2601 -> 2552;
2601 -> 2600;
2601 -> 2599;
2601 -> 2595;
2602 -> 2595;
2603 -> 2552;
2603 -> 2602;
2603 -> 2601;
2603 -> 2595;
2604 -> 2595;
2605 -> 2552;
2605 -> 2604;
2605 -> 2603;
2605 -> 2595;
2606 -> 2551;
2606 -> 2582;
2606 -> 2550;
2607 -> 2550;
2608 -> 2551;
2608 -> 2582;
2608 -> 2607;
2608 -> 2550;
2609 -> 2550;
2610 -> 2551;
2610 -> 2582;
2610 -> 2609;
2610 -> 2550;
2611 -> 2550;
2612 -> 2551;
2612 -> 2582;
2612 -> 2611;
2612 -> 2550;
2613 -> 2552;
2613 -> 2605;
2613 -> 2550;
2614 -> 2613;
2614 -> 2545;
2615 -> 2549;
2615 -> 2614;
2615 -> 2545;
2616 -> 2540;
2616 -> 2615;
2616 -> 2542;
2617 -> 2487;
2617 -> 2582;
2618 -> 2617;
2618 -> 2582;
2619 -> 2582;
2620 -> 2619;
2620 -> 2618;
2620 -> 2582;
2621 -> 2582;
2622 -> 2582;
2623 -> 2621;
2623 -> 2622;
2623 -> 2582;
2624 -> 2582;
2625 -> 2582;
2625 -> 2624;
2626 -> 2621;
2626 -> 2625;
2626 -> 2623;
2626 -> 2624;
2627 -> 2624;
2628 -> 2621;
2628 -> 2627;
2628 -> 2626;
2628 -> 2624;
2629 -> 2582;
2629 -> 2624;
2630 -> 2621;
2630 -> 2629;
2630 -> 2628;
2630 -> 2624;
2631 -> 2582;
2632 -> 2631;
2633 -> 2632;
2634 -> 2621;
2634 -> 2633;
2634 -> 2630;
2634 -> 2632;
2635 -> 2582;
2635 -> 2632;
2636 -> 2621;
2636 -> 2635;
2636 -> 2634;
2636 -> 2632;
2637 -> 2631;
2638 -> 2621;
2638 -> 2637;
2638 -> 2636;
2638 -> 2631;
2639 -> 2582;
2640 -> 2582;
2641 -> 2621;
2641 -> 2640;
2641 -> 2638;
2641 -> 2582;
2642 -> 2582;
2643 -> 2621;
2643 -> 2642;
2643 -> 2641;
2643 -> 2582;
2644 -> 2621;
2644 -> 2583;
2644 -> 2643;
2644 -> 2582;
2645 -> 2582;
2646 -> 2621;
2646 -> 2645;
2646 -> 2644;
2646 -> 2582;
2647 -> 2621;
2647 -> 2587;
2647 -> 2646;
2647 -> 2582;
2648 -> 2621;
2648 -> 2590;
2648 -> 2647;
2648 -> 2589;
2649 -> 2582;
2650 -> 2621;
2650 -> 2649;
2650 -> 2648;
2650 -> 2582;
2651 -> 2582;
2652 -> 2651;
2653 -> 2621;
2653 -> 2652;
2653 -> 2650;
2653 -> 2651;
2654 -> 2651;
2655 -> 2621;
2655 -> 2654;
2655 -> 2653;
2655 -> 2651;
2656 -> 2651;
2657 -> 2621;
2657 -> 2656;
2657 -> 2655;
2657 -> 2651;
2658 -> 2651;
2659 -> 2621;
2659 -> 2658;
2659 -> 2657;
2659 -> 2651;
2660 -> 2651;
2661 -> 2621;
2661 -> 2660;
2661 -> 2659;
2661 -> 2651;
2662 -> 2582;
2663 -> 2582;
2664 -> 2582;
2665 -> 2582;
2666 -> 2621;
2666 -> 2661;
2666 -> 2582;
2667 -> 2666;
2667 -> 2582;
2668 -> 2620;
2668 -> 2667;
2668 -> 2582;
2669 -> 2535;
2669 -> 2475;
2670 -> 2540;
2670 -> 2475;
2671 -> 2475;
2672 -> 2669;
2672 -> 2671;
2673 -> 2670;
2673 -> 2671;
2674 -> 2673;
2674 -> 2616;
2674 -> 2671;
2675 -> 2671;
2676 -> 2675;
2676 -> 2674;
2676 -> 2671;
2677 -> 2673;
2677 -> 2675;
2677 -> 2616;
2677 -> 2676;
2678 -> 2672;
2678 -> 2677;
2678 -> 2539;
2678 -> 2676;
2679 -> 2676;
2680 -> 2679;
2681 -> 2672;
2681 -> 2680;
2681 -> 2678;
2681 -> 2679;
2682 -> 2672;
2682 -> 2681;
2682 -> 2676;
2683 -> 2475;
2684 -> 2475;
2685 -> 2535;
2685 -> 2684;
2685 -> 2682;
2685 -> 2475;
2686 -> 2475;
2687 -> 2534;
2687 -> 2582;
2687 -> 2475;
2688 -> 2475;
2689 -> 2687;
2689 -> 2475;
2690 -> 2689;
2690 -> 2688;
2691 -> 2689;
2691 -> 2688;
2692 -> 2689;
2692 -> 2688;
2693 -> 2688;
2694 -> 2690;
2694 -> 2693;
2694 -> 2688;
2695 -> 2688;
2696 -> 2691;
2696 -> 2695;
2696 -> 2688;
2697 -> 2691;
2697 -> 2689;
2697 -> 2688;
2698 -> 2690;
2698 -> 2689;
2698 -> 2697;
2698 -> 2688;
2699 -> 2688;
2700 -> 2698;
2700 -> 2699;
2700 -> 2688;
2701 -> 2698;
2701 -> 2700;
2702 -> 2687;
2702 -> 2701;
2703 -> 2702;
2703 -> 2701;
2704 -> 2703;
2704 -> 2701;
2705 -> 2701;
2706 -> 2701;
2707 -> 2485;
2707 -> 2701;
2708 -> 2535;
2708 -> 2707;
2709 -> 2487;
2709 -> 2707;
2710 -> 2707;
2711 -> 2708;
2711 -> 2710;
2712 -> 2709;
2712 -> 2710;
2713 -> 2710;
2714 -> 2713;
2714 -> 2712;
2714 -> 2710;
2715 -> 2711;
2715 -> 2713;
2715 -> 2714;
2715 -> 2685;
2715 -> 2710;
2716 -> 2707;
2717 -> 2707;
2718 -> 2535;
2718 -> 2717;
2718 -> 2715;
2718 -> 2707;
2719 -> 2702;
2719 -> 2703;
2719 -> 2707;
2720 -> 2535;
2720 -> 2719;
2720 -> 2718;
2720 -> 2707;
2721 -> 2702;
2721 -> 2719;
2721 -> 2707;
2722 -> 2721;
2722 -> 2719;
2722 -> 2707;
2723 -> 2535;
2723 -> 2722;
2724 -> 2487;
2724 -> 2722;
2725 -> 2722;
2726 -> 2723;
2726 -> 2725;
2727 -> 2724;
2727 -> 2725;
2728 -> 2725;
2729 -> 2728;
2729 -> 2727;
2729 -> 2725;
2730 -> 2726;
2730 -> 2728;
2730 -> 2729;
2730 -> 2720;
2730 -> 2725;
2731 -> 2722;
2732 -> 2722;
2733 -> 2535;
2733 -> 2732;
2733 -> 2730;
2733 -> 2722;
2734 -> 2722;
2735 -> 2535;
2735 -> 2734;
2735 -> 2733;
2735 -> 2722;
2736 -> 2702;
2736 -> 2701;
2737 -> 2701;
2738 -> 2489;
2738 -> 2701;
2739 -> 2493;
2739 -> 2701;
2740 -> 2701;
2741 -> 2736;
2741 -> 2740;
2742 -> 2737;
2742 -> 2740;
2743 -> 2738;
2743 -> 2740;
2744 -> 2739;
2744 -> 2740;
2745 -> 2737;
2745 -> 2740;
2746 -> 2745;
2746 -> 2740;
2747 -> 2745;
2747 -> 2740;
2748 -> 2745;
2748 -> 2740;
2749 -> 2745;
2749 -> 2740;
2750 -> 2745;
2750 -> 2740;
2751 -> 2745;
2751 -> 2740;
2752 -> 2745;
2752 -> 2740;
2753 -> 2745;
2753 -> 2740;
2754 -> 2745;
2754 -> 2740;
2755 -> 2741;
2755 -> 2734;
2755 -> 2745;
2755 -> 2740;
2756 -> 2741;
2756 -> 2734;
2756 -> 2745;
2756 -> 2740;
2757 -> 2741;
2757 -> 2734;
2757 -> 2745;
2757 -> 2740;
2758 -> 2741;
2758 -> 2734;
2758 -> 2745;
2758 -> 2740;
2759 -> 2740;
2760 -> 2741;
2760 -> 2734;
2760 -> 2740;
2761 -> 2745;
2762 -> 2745;
2762 -> 2760;
2762 -> 2761;
2763 -> 2745;
2763 -> 2760;
2763 -> 2758;
2763 -> 2761;
2764 -> 2737;
2764 -> 2701;
2765 -> 2476;
2765 -> 2701;
2766 -> 2737;
2766 -> 2701;
2767 -> 2765;
2767 -> 2766;
2767 -> 2758;
2767 -> 2760;
2767 -> 2756;
2767 -> 2757;
2767 -> 2745;
2767 -> 2742;
2767 -> 2743;
2767 -> 2744;
2767 -> 2701;
2768 -> 2701;
2769 -> 2768;
2770 -> 2767;
2770 -> 2769;
2770 -> 2768;
2771 -> 2767;
2771 -> 2768;
2772 -> 2767;
2772 -> 2768;
2773 -> 2767;
2773 -> 2768;
2774 -> 2767;
2774 -> 2773;
2775 -> 2768;
2776 -> 2767;
2776 -> 2775;
2776 -> 2768;
2777 -> 2776;
2778 -> 2767;
2778 -> 2777;
2779 -> 2768;
2780 -> 2767;
2780 -> 2779;
2780 -> 2768;
2781 -> 2768;
2782 -> 2767;
2782 -> 2781;
2782 -> 2768;
2783 -> 2767;
2783 -> 2768;
2784 -> 2767;
2785 -> 2767;
2785 -> 2768;
2786 -> 2701;
2787 -> 2767;
2787 -> 2786;
2787 -> 2701;
2788 -> 2476;
2788 -> 2767;
2788 -> 2787;
2789 -> 2737;
2789 -> 2701;
2790 -> 2487;
2790 -> 2701;
2791 -> 2701;
2792 -> 2789;
2792 -> 2791;
2793 -> 2790;
2793 -> 2791;
2794 -> 2791;
2795 -> 2794;
2795 -> 2793;
2795 -> 2791;
2796 -> 2791;
2797 -> 2791;
2798 -> 2796;
2798 -> 2797;
2798 -> 2791;
2799 -> 2791;
2800 -> 2792;
2800 -> 2767;
2800 -> 2799;
2800 -> 2791;
2801 -> 2792;
2801 -> 2767;
2801 -> 2800;
2802 -> 2796;
2802 -> 2801;
2802 -> 2798;
2802 -> 2800;
2803 -> 2800;
2804 -> 2796;
2804 -> 2803;
2804 -> 2802;
2804 -> 2800;
2805 -> 2792;
2805 -> 2767;
2805 -> 2800;
2806 -> 2796;
2806 -> 2805;
2806 -> 2804;
2806 -> 2800;
2807 -> 2791;
2808 -> 2792;
2808 -> 2767;
2808 -> 2807;
2808 -> 2791;
2809 -> 2808;
2810 -> 2809;
2811 -> 2796;
2811 -> 2810;
2811 -> 2806;
2811 -> 2809;
2812 -> 2792;
2812 -> 2767;
2812 -> 2809;
2813 -> 2796;
2813 -> 2812;
2813 -> 2811;
2813 -> 2809;
2814 -> 2808;
2815 -> 2796;
2815 -> 2814;
2815 -> 2813;
2815 -> 2808;
2816 -> 2792;
2816 -> 2767;
2816 -> 2791;
2817 -> 2791;
2818 -> 2796;
2818 -> 2817;
2818 -> 2815;
2818 -> 2791;
2819 -> 2792;
2819 -> 2767;
2819 -> 2791;
2820 -> 2819;
2821 -> 2796;
2821 -> 2820;
2821 -> 2818;
2821 -> 2819;
2822 -> 2819;
2823 -> 2796;
2823 -> 2822;
2823 -> 2821;
2823 -> 2819;
2824 -> 2819;
2825 -> 2796;
2825 -> 2824;
2825 -> 2823;
2825 -> 2819;
2826 -> 2819;
2827 -> 2796;
2827 -> 2826;
2827 -> 2825;
2827 -> 2819;
2828 -> 2819;
2829 -> 2828;
2830 -> 2796;
2830 -> 2829;
2830 -> 2827;
2830 -> 2828;
2831 -> 2819;
2832 -> 2796;
2832 -> 2831;
2832 -> 2830;
2832 -> 2819;
2833 -> 2791;
2834 -> 2792;
2834 -> 2819;
2834 -> 2833;
2834 -> 2791;
2835 -> 2834;
2836 -> 2796;
2836 -> 2835;
2836 -> 2832;
2836 -> 2834;
2837 -> 2834;
2838 -> 2796;
2838 -> 2837;
2838 -> 2836;
2838 -> 2834;
2839 -> 2834;
2840 -> 2796;
2840 -> 2839;
2840 -> 2838;
2840 -> 2834;
2841 -> 2834;
2842 -> 2796;
2842 -> 2841;
2842 -> 2840;
2842 -> 2834;
2843 -> 2834;
2844 -> 2796;
2844 -> 2843;
2844 -> 2842;
2844 -> 2834;
2845 -> 2792;
2845 -> 2819;
2845 -> 2791;
2846 -> 2791;
2847 -> 2792;
2847 -> 2819;
2847 -> 2846;
2847 -> 2791;
2848 -> 2791;
2849 -> 2792;
2849 -> 2819;
2849 -> 2848;
2849 -> 2791;
2850 -> 2791;
2851 -> 2792;
2851 -> 2819;
2851 -> 2850;
2851 -> 2791;
2852 -> 2796;
2852 -> 2844;
2852 -> 2791;
2853 -> 2852;
2853 -> 2791;
2854 -> 2795;
2854 -> 2853;
2854 -> 2791;
2855 -> 2535;
2855 -> 2854;
2855 -> 2735;
2855 -> 2701;
2856 -> 2788;
2856 -> 2701;
2857 -> 2487;
2857 -> 2701;
2858 -> 2701;
2859 -> 2856;
2859 -> 2858;
2860 -> 2857;
2860 -> 2858;
2861 -> 2858;
2862 -> 2861;
2862 -> 2860;
2862 -> 2858;
2863 -> 2858;
2864 -> 2858;
2865 -> 2863;
2865 -> 2864;
2865 -> 2858;
2866 -> 2858;
2867 -> 2859;
2867 -> 2819;
2867 -> 2866;
2867 -> 2858;
2868 -> 2859;
2868 -> 2819;
2868 -> 2867;
2869 -> 2863;
2869 -> 2868;
2869 -> 2865;
2869 -> 2867;
2870 -> 2867;
2871 -> 2863;
2871 -> 2870;
2871 -> 2869;
2871 -> 2867;
2872 -> 2859;
2872 -> 2819;
2872 -> 2867;
2873 -> 2863;
2873 -> 2872;
2873 -> 2871;
2873 -> 2867;
2874 -> 2858;
2875 -> 2859;
2875 -> 2819;
2875 -> 2874;
2875 -> 2858;
2876 -> 2875;
2877 -> 2876;
2878 -> 2863;
2878 -> 2877;
2878 -> 2873;
2878 -> 2876;
2879 -> 2859;
2879 -> 2819;
2879 -> 2876;
2880 -> 2863;
2880 -> 2879;
2880 -> 2878;
2880 -> 2876;
2881 -> 2875;
2882 -> 2863;
2882 -> 2881;
2882 -> 2880;
2882 -> 2875;
2883 -> 2859;
2883 -> 2819;
2883 -> 2858;
2884 -> 2858;
2885 -> 2863;
2885 -> 2884;
2885 -> 2882;
2885 -> 2858;
2886 -> 2859;
2886 -> 2819;
2886 -> 2858;
2887 -> 2886;
2888 -> 2863;
2888 -> 2887;
2888 -> 2885;
2888 -> 2886;
2889 -> 2886;
2890 -> 2863;
2890 -> 2889;
2890 -> 2888;
2890 -> 2886;
2891 -> 2886;
2892 -> 2863;
2892 -> 2891;
2892 -> 2890;
2892 -> 2886;
2893 -> 2886;
2894 -> 2863;
2894 -> 2893;
2894 -> 2892;
2894 -> 2886;
2895 -> 2886;
2896 -> 2895;
2897 -> 2863;
2897 -> 2896;
2897 -> 2894;
2897 -> 2895;
2898 -> 2886;
2899 -> 2863;
2899 -> 2898;
2899 -> 2897;
2899 -> 2886;
2900 -> 2858;
2901 -> 2859;
2901 -> 2886;
2901 -> 2900;
2901 -> 2858;
2902 -> 2901;
2903 -> 2863;
2903 -> 2902;
2903 -> 2899;
2903 -> 2901;
2904 -> 2901;
2905 -> 2863;
2905 -> 2904;
2905 -> 2903;
2905 -> 2901;
2906 -> 2901;
2907 -> 2863;
2907 -> 2906;
2907 -> 2905;
2907 -> 2901;
2908 -> 2901;
2909 -> 2863;
2909 -> 2908;
2909 -> 2907;
2909 -> 2901;
2910 -> 2901;
2911 -> 2863;
2911 -> 2910;
2911 -> 2909;
2911 -> 2901;
2912 -> 2859;
2912 -> 2886;
2912 -> 2858;
2913 -> 2858;
2914 -> 2859;
2914 -> 2886;
2914 -> 2913;
2914 -> 2858;
2915 -> 2858;
2916 -> 2859;
2916 -> 2886;
2916 -> 2915;
2916 -> 2858;
2917 -> 2858;
2918 -> 2859;
2918 -> 2886;
2918 -> 2917;
2918 -> 2858;
2919 -> 2863;
2919 -> 2911;
2919 -> 2858;
2920 -> 2919;
2920 -> 2858;
2921 -> 2862;
2921 -> 2920;
2921 -> 2858;
2922 -> 2686;
2922 -> 2921;
2922 -> 2701;
2923 -> 2886;
2924 -> 2886;
2925 -> 2924;
2926 -> 2535;
2926 -> 2925;
2926 -> 2855;
2926 -> 2924;
2927 -> 2535;
2927 -> 2886;
2928 -> 2487;
2928 -> 2886;
2929 -> 2886;
2930 -> 2927;
2930 -> 2929;
2931 -> 2928;
2931 -> 2929;
2932 -> 2929;
2933 -> 2932;
2933 -> 2931;
2933 -> 2929;
2934 -> 2886;
2935 -> 2886;
2936 -> 2535;
2936 -> 2886;
2937 -> 2487;
2937 -> 2886;
2938 -> 2886;
2939 -> 2936;
2939 -> 2938;
2940 -> 2937;
2940 -> 2938;
2941 -> 2938;
2942 -> 2941;
2942 -> 2940;
2942 -> 2938;
2943 -> 2886;
2944 -> 2886;
2945 -> 2886;
2946 -> 2886;
2947 -> 2886;
2948 -> 2886;
2949 -> 2886;
2950 -> 2886;
2951 -> 2886;
2952 -> 2886;
2953 -> 2886;
2954 -> 2886;
2955 -> 2886;
2956 -> 2886;
2957 -> 2886;
2958 -> 2886;
2959 -> 2886;
2960 -> 2959;
2961 -> 2959;
2962 -> 2959;
2963 -> 2959;
2964 -> 2959;
2964 -> 2963;
2965 -> 2959;
2966 -> 2965;
2967 -> 2959;
2967 -> 2966;
2968 -> 2959;
2969 -> 2959;
2970 -> 2959;
2971 -> 2959;
2972 -> 2959;
2973 -> 2487;
2973 -> 2886;
2974 -> 2973;
2974 -> 2886;
2975 -> 2886;
2976 -> 2975;
2976 -> 2974;
2976 -> 2886;
2977 -> 2886;
2978 -> 2886;
2979 -> 2977;
2979 -> 2978;
2979 -> 2886;
2980 -> 2886;
2981 -> 2886;
2981 -> 2959;
2981 -> 2980;
2982 -> 2886;
2982 -> 2959;
2982 -> 2981;
2983 -> 2977;
2983 -> 2982;
2983 -> 2979;
2983 -> 2981;
2984 -> 2981;
2985 -> 2977;
2985 -> 2984;
2985 -> 2983;
2985 -> 2981;
2986 -> 2886;
2986 -> 2959;
2986 -> 2981;
2987 -> 2977;
2987 -> 2986;
2987 -> 2985;
2987 -> 2981;
2988 -> 2886;
2989 -> 2886;
2989 -> 2959;
2989 -> 2988;
2990 -> 2989;
2991 -> 2990;
2992 -> 2977;
2992 -> 2991;
2992 -> 2987;
2992 -> 2990;
2993 -> 2886;
2993 -> 2959;
2993 -> 2990;
2994 -> 2977;
2994 -> 2993;
2994 -> 2992;
2994 -> 2990;
2995 -> 2989;
2996 -> 2977;
2996 -> 2995;
2996 -> 2994;
2996 -> 2989;
2997 -> 2886;
2997 -> 2959;
2998 -> 2886;
2999 -> 2977;
2999 -> 2998;
2999 -> 2996;
2999 -> 2886;
3000 -> 2959;
3001 -> 2977;
3001 -> 3000;
3001 -> 2999;
3001 -> 2959;
3002 -> 2959;
3003 -> 2977;
3003 -> 3002;
3003 -> 3001;
3003 -> 2959;
3004 -> 2959;
3005 -> 2977;
3005 -> 3004;
3005 -> 3003;
3005 -> 2959;
3006 -> 2959;
3007 -> 2977;
3007 -> 3006;
3007 -> 3005;
3007 -> 2959;
3008 -> 2959;
3009 -> 3008;
3010 -> 2977;
3010 -> 3009;
3010 -> 3007;
3010 -> 3008;
3011 -> 2959;
3012 -> 2977;
3012 -> 3011;
3012 -> 3010;
3012 -> 2959;
3013 -> 2886;
3014 -> 2886;
3014 -> 2959;
3014 -> 3013;
3015 -> 3014;
3016 -> 2977;
3016 -> 3015;
3016 -> 3012;
3016 -> 3014;
3017 -> 3014;
3018 -> 2977;
3018 -> 3017;
3018 -> 3016;
3018 -> 3014;
3019 -> 3014;
3020 -> 2977;
3020 -> 3019;
3020 -> 3018;
3020 -> 3014;
3021 -> 3014;
3022 -> 2977;
3022 -> 3021;
3022 -> 3020;
3022 -> 3014;
3023 -> 3014;
3024 -> 2977;
3024 -> 3023;
3024 -> 3022;
3024 -> 3014;
3025 -> 2886;
3025 -> 2959;
3026 -> 2886;
3027 -> 2886;
3027 -> 2959;
3027 -> 3026;
3028 -> 2886;
3029 -> 2886;
3029 -> 2959;
3029 -> 3028;
3030 -> 2886;
3031 -> 2886;
3031 -> 2959;
3031 -> 3030;
3032 -> 2977;
3032 -> 3024;
3032 -> 2886;
3033 -> 3032;
3033 -> 2886;
3034 -> 2976;
3034 -> 3033;
3034 -> 2886;
3035 -> 2535;
3035 -> 3034;
3035 -> 2926;
3035 -> 2886;
3036 -> 2487;
3036 -> 2886;
3037 -> 3036;
3037 -> 2886;
3038 -> 2975;
3038 -> 3037;
3038 -> 2886;
3039 -> 2959;
3039 -> 2981;
3040 -> 2977;
3040 -> 3039;
3040 -> 2979;
3040 -> 2981;
3041 -> 2977;
3041 -> 2984;
3041 -> 3040;
3041 -> 2981;
3042 -> 2959;
3042 -> 2981;
3043 -> 2977;
3043 -> 3042;
3043 -> 3041;
3043 -> 2981;
3044 -> 2977;
3044 -> 2991;
3044 -> 3043;
3044 -> 2990;
3045 -> 2959;
3045 -> 2990;
3046 -> 2977;
3046 -> 3045;
3046 -> 3044;
3046 -> 2990;
3047 -> 2977;
3047 -> 2995;
3047 -> 3046;
3047 -> 2989;
3048 -> 2977;
3048 -> 2998;
3048 -> 3047;
3048 -> 2886;
3049 -> 2977;
3049 -> 3000;
3049 -> 3048;
3049 -> 2959;
3050 -> 2977;
3050 -> 3002;
3050 -> 3049;
3050 -> 2959;
3051 -> 2977;
3051 -> 3004;
3051 -> 3050;
3051 -> 2959;
3052 -> 2977;
3052 -> 3006;
3052 -> 3051;
3052 -> 2959;
3053 -> 2977;
3053 -> 3009;
3053 -> 3052;
3053 -> 3008;
3054 -> 2977;
3054 -> 3011;
3054 -> 3053;
3054 -> 2959;
3055 -> 2977;
3055 -> 3015;
3055 -> 3054;
3055 -> 3014;
3056 -> 2977;
3056 -> 3017;
3056 -> 3055;
3056 -> 3014;
3057 -> 2977;
3057 -> 3019;
3057 -> 3056;
3057 -> 3014;
3058 -> 2977;
3058 -> 3021;
3058 -> 3057;
3058 -> 3014;
3059 -> 2977;
3059 -> 3023;
3059 -> 3058;
3059 -> 3014;
3060 -> 2977;
3060 -> 3059;
3060 -> 2886;
3061 -> 3060;
3061 -> 2886;
3062 -> 3038;
3062 -> 3061;
3062 -> 2886;
3063 -> 2686;
3063 -> 3062;
3063 -> 2922;
3063 -> 2886;
3064 -> 2475;
3065 -> 2886;
3065 -> 3064;
3065 -> 2475;
3066 -> 2535;
3066 -> 3035;
3066 -> 3065;
3067 -> 2475;
3068 -> 2535;
3068 -> 3067;
3068 -> 3066;
3068 -> 2475;
3069 -> 2540;
3069 -> 2475;
3070 -> 2686;
3070 -> 2475;
3074 -> 3072;
3074 -> 3071;
3075 -> 3073;
3075 -> 3071;
3076 -> 3071;
3077 -> 0;
3077 -> 2475;
3078 -> 2475;
3079 -> 2475;
3080 -> 3069;
3080 -> 3079;
3081 -> 3070;
3081 -> 3079;
3082 -> 3077;
3082 -> 3079;
3083 -> 3078;
3083 -> 3079;
3084 -> 3078;
3084 -> 3079;
3085 -> 3079;
3086 -> 3083;
3086 -> 3085;
3086 -> 3079;
3087 -> 3086;
3087 -> 3079;
3088 -> 0;
3090 -> 3088;
3090 -> 3089;
3091 -> 3089;
3093 -> 3092;
3095 -> 3094;
3097 -> 3096;
3098 -> 3091;
3099 -> 3091;
3099 -> 3089;
3100 -> 3090;
3100 -> 3091;
3100 -> 3089;
3101 -> 3089;
3102 -> 3079;
3103 -> 3102;
3103 -> 3084;
3103 -> 3079;
3104 -> 3080;
3104 -> 3079;
3105 -> 3081;
3105 -> 3079;
3106 -> 3082;
3106 -> 3079;
3107 -> 3104;
3107 -> 3079;
3108 -> 3105;
3108 -> 3079;
3109 -> 3103;
3109 -> 3079;
3110 -> 3079;
3111 -> 3107;
3111 -> 3110;
3112 -> 3108;
3112 -> 3110;
3113 -> 3109;
3113 -> 3110;
3114 -> 3087;
3114 -> 3110;
3115 -> 3111;
3115 -> 3110;
3116 -> 3111;
3116 -> 3104;
3116 -> 3110;
3117 -> 3112;
3117 -> 3110;
3118 -> 3112;
3118 -> 3105;
3118 -> 3110;
3119 -> 3110;
3120 -> 3115;
3120 -> 3119;
3121 -> 3116;
3121 -> 3119;
3122 -> 3117;
3122 -> 3119;
3123 -> 3118;
3123 -> 3119;
3124 -> 3114;
3124 -> 3119;
3125 -> 3120;
3125 -> 3119;
3126 -> 3121;
3126 -> 3119;
3127 -> 3122;
3127 -> 3119;
3128 -> 3123;
3128 -> 3119;
3129 -> 3119;
3130 -> 3125;
3130 -> 3129;
3131 -> 3126;
3131 -> 3129;
3132 -> 3127;
3132 -> 3129;
3133 -> 3128;
3133 -> 3129;
3134 -> 3124;
3134 -> 3129;
3135 -> 3129;
3136 -> 3131;
3136 -> 3135;
3136 -> 3129;
3137 -> 3129;
3138 -> 3133;
3138 -> 3137;
3138 -> 3129;
3139 -> 3136;
3139 -> 3138;
3139 -> 3129;
3140 -> 3129;
3141 -> 3140;
3141 -> 3139;
3141 -> 3129;
3142 -> 3129;
3143 -> 3142;
3143 -> 3131;
3143 -> 3129;
3144 -> 3143;
3145 -> 3139;
3145 -> 3141;
3145 -> 3144;
3145 -> 3143;
3146 -> 3145;
3146 -> 3142;
3146 -> 3144;
3146 -> 3139;
3146 -> 3143;
3147 -> 3129;
3148 -> 3147;
3148 -> 3133;
3148 -> 3129;
3149 -> 3148;
3150 -> 3139;
3150 -> 3141;
3150 -> 3146;
3150 -> 3149;
3150 -> 3148;
3151 -> 3150;
3151 -> 3149;
3151 -> 3147;
3151 -> 3139;
3151 -> 3148;
3152 -> 3129;
3153 -> 3152;
3153 -> 3131;
3153 -> 3129;
3154 -> 3153;
3155 -> 3154;
3155 -> 3133;
3155 -> 3153;
3156 -> 3155;
3157 -> 3139;
3157 -> 3141;
3157 -> 3146;
3157 -> 3151;
3157 -> 3156;
3157 -> 3155;
3158 -> 3130;
3158 -> 3155;
3159 -> 3132;
3159 -> 3155;
3160 -> 3155;
3161 -> 3158;
3161 -> 3160;
3162 -> 3156;
3162 -> 3160;
3163 -> 3159;
3163 -> 3160;
3164 -> 3156;
3164 -> 3160;
3165 -> 3134;
3165 -> 3160;
3166 -> 3161;
3166 -> 3104;
3166 -> 3162;
3166 -> 3160;
3167 -> 3163;
3167 -> 3105;
3167 -> 3164;
3167 -> 3160;
3168 -> 3165;
3168 -> 0;
3168 -> 3166;
3168 -> 3167;
3168 -> 3104;
3168 -> 3105;
3168 -> 3160;
3169 -> 3157;
3169 -> 3168;
3169 -> 3155;
3170 -> 3155;
3171 -> 3139;
3171 -> 3141;
3171 -> 3146;
3171 -> 3151;
3171 -> 3170;
3171 -> 3154;
3171 -> 3155;
3172 -> 3155;
3173 -> 3139;
3173 -> 3141;
3173 -> 3146;
3173 -> 3151;
3173 -> 3152;
3173 -> 3172;
3173 -> 3155;
3174 -> 3169;
3174 -> 3155;
3175 -> 3171;
3175 -> 3155;
3176 -> 3174;
3176 -> 3175;
3176 -> 3155;
3177 -> 3173;
3177 -> 3155;
3178 -> 3176;
3178 -> 3177;
3178 -> 3155;
3179 -> 3178;
3179 -> 3152;
3179 -> 3154;
3179 -> 3139;
3179 -> 3155;
3180 -> 3139;
3180 -> 3129;
3181 -> 3121;
3181 -> 3119;
3182 -> 3123;
3182 -> 3119;
3183 -> 3119;
3184 -> 3181;
3184 -> 3183;
3184 -> 3119;
3185 -> 3182;
3185 -> 3183;
3185 -> 3119;
3186 -> 3184;
3186 -> 3185;
3186 -> 3119;
3187 -> 3180;
3187 -> 3139;
3187 -> 3141;
3187 -> 3146;
3187 -> 3151;
3187 -> 3179;
3187 -> 3181;
3187 -> 3182;
3187 -> 3186;
3188 -> 3186;
3189 -> 3180;
3189 -> 3139;
3189 -> 3141;
3189 -> 3146;
3189 -> 3151;
3189 -> 3179;
3189 -> 3188;
3189 -> 3182;
3189 -> 3186;
3190 -> 3180;
3190 -> 3139;
3190 -> 3141;
3190 -> 3146;
3190 -> 3151;
3190 -> 3179;
3190 -> 3181;
3190 -> 3182;
3190 -> 3189;
3191 -> 3189;
3192 -> 3181;
3192 -> 3191;
3193 -> 3182;
3193 -> 3191;
3194 -> 3191;
3195 -> 0;
3195 -> 3191;
3196 -> 3192;
3196 -> 3191;
3197 -> 3193;
3197 -> 3191;
3198 -> 3191;
3199 -> 3195;
3199 -> 3198;
3200 -> 3196;
3200 -> 3198;
3201 -> 3197;
3201 -> 3198;
3202 -> 3194;
3202 -> 3198;
3203 -> 3199;
3203 -> 3202;
3203 -> 3198;
3204 -> 3200;
3204 -> 3202;
3204 -> 3198;
3205 -> 3201;
3205 -> 3202;
3205 -> 3198;
3206 -> 3192;
3206 -> 3193;
3206 -> 3119;
3207 -> 0;
3207 -> 3206;
3208 -> 3206;
3209 -> 3206;
3210 -> 3207;
3210 -> 3209;
3211 -> 3208;
3211 -> 3209;
3212 -> 3208;
3212 -> 3209;
3213 -> 3208;
3213 -> 3209;
3214 -> 3210;
3214 -> 3213;
3214 -> 3209;
3215 -> 3211;
3215 -> 3213;
3215 -> 3209;
3216 -> 3212;
3216 -> 3213;
3216 -> 3209;
3217 -> 3119;
3218 -> 3206;
3218 -> 3217;
3218 -> 3119;
3219 -> 3119;
3220 -> 3206;
3220 -> 3219;
3220 -> 3119;
3221 -> 3194;
3221 -> 3208;
3221 -> 3203;
3221 -> 3204;
3221 -> 3205;
3221 -> 3214;
3221 -> 3215;
3221 -> 3216;
3221 -> 3110;
3222 -> 3221;
3223 -> 3222;
3224 -> 3112;
3224 -> 3105;
3224 -> 3168;
3224 -> 3221;
3224 -> 3222;
3225 -> 3113;
3225 -> 3224;
3225 -> 3102;
3225 -> 3222;
3226 -> 3106;
3226 -> 3223;
3226 -> 3079;
3227 -> 2535;
3227 -> 3226;
3227 -> 3068;
3227 -> 2475;
3228 -> 2686;
3228 -> 3063;
3228 -> 2475;
3229 -> 2540;
3229 -> 2677;
3229 -> 2475;
3230 -> 2535;
3230 -> 3227;
3230 -> 2475;
3231 -> 2320;
3232 -> 914;
3233 -> 915;
3233 -> 914;
3234 -> 2317;
3234 -> 914;
3235 -> 914;
3236 -> 3233;
3236 -> 3235;
3237 -> 3234;
3237 -> 3235;
3238 -> 3237;
3238 -> 3235;
3239 -> 3238;
3239 -> 2317;
3239 -> 2959;
3240 -> 3236;
3240 -> 3239;
3240 -> 2959;
3240 -> 3238;
3241 -> 3238;
3241 -> 3240;
3242 -> 3241;
3242 -> 3240;
3243 -> 3241;
3244 -> 914;
3245 -> 915;
3245 -> 914;
}