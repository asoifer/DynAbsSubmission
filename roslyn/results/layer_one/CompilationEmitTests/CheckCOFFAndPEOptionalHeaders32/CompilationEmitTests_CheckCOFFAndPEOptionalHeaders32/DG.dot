digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 772319"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 772320"];
3 [label="param CompilationEmitTests(this) 772321"];
4 [label="param EmitMetadataTestBase(this) 772322"];
5 [label="param CSharpTestBase(this) 772323"];
6 [label="param CommonTestBase(this) 772324"];
7 [label="param TestBase(this) 772325"];
8 [label="_temp 772326"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 772327"];
10 [label="param CheckCOFFAndPEOptionalHeaders32(this) 772328"];
11 [label="string source = @'\nclass C\n{\n    public static void Main()\n    {\n    }\n}'; 772329"];
12 [label="var compilation = CreateCompilation(source,\n                options: TestOptions.DebugDll.WithPlatform(Platform.X86)); 772330"];
13 [label="var compilation = CreateCompilation(source,\n                options: TestOptions.DebugDll.WithPlatform(Platform.X86)); 772331"];
14 [label="var compilation = CreateCompilation(source,\n                options: TestOptions.DebugDll.WithPlatform(Platform.X86)); 772332"];
15 [label="CreateCompilation(source,\n                options: TestOptions.DebugDll.WithPlatform(Platform.X86)) 772333"];
16 [label="param operator(string source) 772334"];
17 [label="source 772335"];
18 [label="new CSharpTestSource(source) 772336"];
19 [label="param CSharpTestSource(object value) 772337"];
20 [label="param CSharpTestSource(this) 772338"];
21 [label="Value 772339"];
22 [label="var compilation = CreateCompilation(source,\n                options: TestOptions.DebugDll.WithPlatform(Platform.X86)); 772340"];
23 [label="param CreateCompilation(CSharpTestSource source) 772341"];
24 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 772342"];
25 [label="param CreateCompilation(CSharpCompilationOptions options = null) 772343"];
26 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 772344"];
27 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 772345"];
28 [label="param CreateCompilation(string assemblyName = '') 772346"];
29 [label="param CreateCompilation(string sourceFileName = '') 772347"];
30 [label="param CreateCompilation(bool skipUsesIsNullable = false) 772348"];
31 [label="source 772349"];
32 [label="targetFramework 772350"];
33 [label="references 772351"];
34 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 772352"];
35 [label="param GetReferences(TargetFramework tf) 772353"];
36 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 772354"];
37 [label="var references = GetReferences(tf); 772355"];
38 [label="GetReferences(tf) 772356"];
39 [label="param GetReferences(TargetFramework targetFramework) 772357"];
40 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 772358"];
41 [label="StandardReferences 772359"];
42 [label="RuntimeUtilities.IsCoreClrRuntime 772360"];
43 [label="Mscorlib46ExtendedReferences 772361"];
44 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 772362"];
45 [label="TestBase.ValueTupleRef 772363"];
46 [label="TestReferences.NetFx.ValueTuple.tuplelib 772364"];
47 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 772365"];
48 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 772366"];
49 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 772367"];
50 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 772368"];
51 [label="return references; 772369"];
52 [label="options 772370"];
53 [label="parseOptions 772371"];
54 [label="assemblyName 772372"];
55 [label="sourceFileName 772373"];
56 [label="skipUsesIsNullable 772374"];
57 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 772375"];
58 [label="param CreateEmptyCompilation(CSharpTestSource source) 772376"];
59 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 772377"];
60 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 772378"];
61 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 772379"];
62 [label="param CreateEmptyCompilation(string assemblyName = '') 772380"];
63 [label="param CreateEmptyCompilation(string sourceFileName = '') 772381"];
64 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 772382"];
65 [label="source 772383"];
66 [label="references 772384"];
67 [label="options 772385"];
68 [label="parseOptions 772386"];
69 [label="assemblyName 772387"];
70 [label="sourceFileName 772388"];
71 [label="skipUsesIsNullable 772389"];
72 [label="null 772390"];
73 [label="experimentalFeature: null 772391"];
74 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 772392"];
75 [label="param CreateCompilationCore(CSharpTestSource source) 772393"];
76 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 772394"];
77 [label="param CreateCompilationCore(CSharpCompilationOptions options) 772395"];
78 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 772396"];
79 [label="param CreateCompilationCore(string assemblyName) 772397"];
80 [label="param CreateCompilationCore(string sourceFileName) 772398"];
81 [label="param CreateCompilationCore(bool skipUsesIsNullable) 772399"];
82 [label="param CreateCompilationCore(MessageID? experimentalFeature) 772400"];
83 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 772401"];
84 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 772402"];
85 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 772403"];
86 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 772404"];
87 [label="param GetSyntaxTrees(string sourceFileName = '') 772405"];
88 [label="param GetSyntaxTrees(this) 772406"];
89 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 772407"];
90 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 772408"];
91 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 772409"];
92 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 772410"];
93 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 772411"];
94 [label="param Parse(string text) 772412"];
95 [label="param Parse(string filename = '') 772413"];
96 [label="param Parse(CSharpParseOptions options = null) 772414"];
97 [label="param Parse(Encoding encoding = null) 772415"];
98 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 772416"];
99 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 772417"];
100 [label="options = TestOptions.Regular; 772418"];
101 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 772419"];
102 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 772420"];
103 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 772421"];
104 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 772422"];
105 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 772423"];
106 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 772424"];
107 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 772425"];
108 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 772426"];
109 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 772427"];
110 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 772428"];
111 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 772429"];
112 [label="param CheckSerializable(SyntaxTree tree) 772430"];
113 [label="var stream = new MemoryStream(); 772431"];
114 [label="var root = tree.GetRoot(); 772432"];
115 [label="var root = tree.GetRoot(); 772433"];
116 [label="root.SerializeTo(stream); 772434"];
117 [label="root.SerializeTo(stream); 772435"];
118 [label="root.SerializeTo(stream); 772436"];
119 [label="stream.Position = 0; 772437"];
120 [label="stream.Position 772438"];
121 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 772439"];
122 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 772440"];
123 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 772441"];
124 [label="return tree; 772442"];
125 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 772443"];
126 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 772444"];
127 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 772445"];
128 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 772446"];
129 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 772447"];
130 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 772448"];
131 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 772449"];
132 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 772450"];
133 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 772451"];
134 [label="param ValidateIOperations(Func<Compilation> createCompilation) 772452"];
135 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 772453"];
136 [label="return; 772454"];
137 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 772455"];
138 [label="var compilation = createCompilationLambda(); 772456"];
139 [label="var compilation = createCompilationLambda(); 772457"];
140 [label="return Guid.NewGuid().ToString('D'); 772458"];
141 [label="var compilation = createCompilationLambda(); 772459"];
142 [label="OutputKind.ConsoleApplication 772460"];
143 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 772461"];
144 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 772462"];
145 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 772463"];
146 [label="OutputKind.DynamicallyLinkedLibrary 772464"];
147 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 772465"];
148 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 772466"];
149 [label="true 772467"];
150 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 772468"];
151 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 772469"];
152 [label="param Create(string? assemblyName) 772470"];
153 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 772471"];
154 [label="param Create(IEnumerable<MetadataReference>? references = null) 772472"];
155 [label="param Create(CSharpCompilationOptions? options = null) 772473"];
156 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 772474"];
157 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 772475"];
158 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 772476"];
159 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 772477"];
160 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 772478"];
161 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 772479"];
162 [label="param Create(string? assemblyName) 772480"];
163 [label="param Create(CSharpCompilationOptions options) 772481"];
164 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 772482"];
165 [label="param Create(IEnumerable<MetadataReference>? references) 772483"];
166 [label="param Create(CSharpCompilation? previousSubmission) 772484"];
167 [label="param Create(Type? returnType) 772485"];
168 [label="param Create(Type? hostObjectType) 772486"];
169 [label="param Create(bool isSubmission) 772487"];
170 [label="RoslynDebug.Assert(options != null); 772488"];
171 [label="RoslynDebug.Assert(options != null); 772489"];
172 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 772490"];
173 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 772491"];
174 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 772492"];
175 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 772493"];
176 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 772494"];
177 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 772495"];
178 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 772496"];
179 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 772497"];
180 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 772498"];
181 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 772499"];
182 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 772500"];
183 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 772501"];
184 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 772502"];
185 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 772503"];
186 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 772504"];
187 [label="param SyntaxAndDeclarationManager(string scriptClassName) 772505"];
188 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 772506"];
189 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 772507"];
190 [label="param SyntaxAndDeclarationManager(bool isSubmission) 772508"];
191 [label="param SyntaxAndDeclarationManager(State state) 772509"];
192 [label="param SyntaxAndDeclarationManager(this) 772510"];
193 [label="externalSyntaxTrees 772511"];
194 [label="scriptClassName 772512"];
195 [label="resolver 772513"];
196 [label="messageProvider 772514"];
197 [label="isSubmission 772515"];
198 [label="param SyntaxAndDeclarationManager(this) 772516"];
199 [label="param SyntaxAndDeclarationManager(this) 772517"];
200 [label="_lazyState 772518"];
201 [label="_lazyState 772519"];
202 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 772520"];
203 [label="param CSharpCompilation(string? assemblyName) 772521"];
204 [label="param CSharpCompilation(CSharpCompilationOptions options) 772522"];
205 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 772523"];
206 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 772524"];
207 [label="param CSharpCompilation(Type? submissionReturnType) 772525"];
208 [label="param CSharpCompilation(Type? hostObjectType) 772526"];
209 [label="param CSharpCompilation(bool isSubmission) 772527"];
210 [label="param CSharpCompilation(ReferenceManager? referenceManager) 772528"];
211 [label="param CSharpCompilation(bool reuseReferenceManager) 772529"];
212 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 772530"];
213 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 772531"];
214 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 772532"];
215 [label="param CSharpCompilation(this) 772533"];
216 [label="assemblyName 772534"];
217 [label="options 772535"];
218 [label="references 772536"];
219 [label="previousSubmission 772537"];
220 [label="submissionReturnType 772538"];
221 [label="hostObjectType 772539"];
222 [label="isSubmission 772540"];
223 [label="referenceManager 772541"];
224 [label="reuseReferenceManager 772542"];
225 [label="syntaxAndDeclarations 772543"];
226 [label="syntaxAndDeclarations.ExternalSyntaxTrees 772544"];
227 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 772545"];
228 [label="semanticModelProvider 772546"];
229 [label="eventQueue 772547"];
230 [label="param CSharpCompilation(this) 772548"];
231 [label="param CSharpCompilation(string? assemblyName) 772549"];
232 [label="param CSharpCompilation(CSharpCompilationOptions options) 772550"];
233 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 772551"];
234 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 772552"];
235 [label="param CSharpCompilation(Type? submissionReturnType) 772553"];
236 [label="param CSharpCompilation(Type? hostObjectType) 772554"];
237 [label="param CSharpCompilation(bool isSubmission) 772555"];
238 [label="param CSharpCompilation(ReferenceManager? referenceManager) 772556"];
239 [label="param CSharpCompilation(bool reuseReferenceManager) 772557"];
240 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 772558"];
241 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 772559"];
242 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 772560"];
243 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 772561"];
244 [label="param CSharpCompilation(this) 772562"];
245 [label="assemblyName 772563"];
246 [label="references 772564"];
247 [label="features 772565"];
248 [label="isSubmission 772566"];
249 [label="semanticModelProvider 772567"];
250 [label="eventQueue 772568"];
251 [label="param CSharpCompilation(this) 772569"];
252 [label="param CSharpCompilation(this) 772570"];
253 [label="_options 772571"];
254 [label="_globalImports 772572"];
255 [label="_previousSubmissionImports 772573"];
256 [label="_globalNamespaceAlias 772574"];
257 [label="_scriptClass 772575"];
258 [label="_lazyHostObjectTypeSymbol 772576"];
259 [label="_lazyImportInfos 772577"];
260 [label="_conversions 772578"];
261 [label="_anonymousTypeManager 772579"];
262 [label="_lazyGlobalNamespace 772580"];
263 [label="builtInOperators 772581"];
264 [label="_lazyAssemblySymbol 772582"];
265 [label="_referenceManager 772583"];
266 [label="_syntaxAndDeclarations 772584"];
267 [label="_lazyEntryPoint 772585"];
268 [label="_lazyEmitNullablePublicOnly 772586"];
269 [label="_lazyCompilationUnitCompletedTrees 772587"];
270 [label="NullableAnalysisData 772588"];
271 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 772589"];
272 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 772590"];
273 [label="_externAliasTargets 772591"];
274 [label="_moduleInitializerMethods 772592"];
275 [label="_binderFactories 772593"];
276 [label="_ignoreAccessibilityBinderFactories 772594"];
277 [label="_lazyDeclarationDiagnostics 772595"];
278 [label="_declarationDiagnosticsFrozen 772596"];
279 [label="new DiagnosticBag() 772597"];
280 [label="_additionalCodegenWarnings = new DiagnosticBag() 772598"];
281 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 772599"];
282 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 772600"];
283 [label="WellKnownMemberSignatureComparer 772601"];
284 [label="_options 772602"];
285 [label="this.builtInOperators = new BuiltInOperators(this); 772603"];
286 [label="this.builtInOperators = new BuiltInOperators(this); 772604"];
287 [label="new BuiltInOperators(this) 772605"];
288 [label="param BuiltInOperators(CSharpCompilation compilation) 772606"];
289 [label="param BuiltInOperators(this) 772607"];
290 [label="_compilation 772608"];
291 [label="_builtInUnaryOperators 772609"];
292 [label="_builtInOperators 772610"];
293 [label="_compilation 772611"];
294 [label="this.builtInOperators 772612"];
295 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 772613"];
296 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 772614"];
297 [label="_scriptClass 772615"];
298 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 772616"];
299 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 772617"];
300 [label="_globalImports 772618"];
301 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 772619"];
302 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 772620"];
303 [label="_previousSubmissionImports 772621"];
304 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 772622"];
305 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 772623"];
306 [label="_globalNamespaceAlias 772624"];
307 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 772625"];
308 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 772626"];
309 [label="_anonymousTypeManager 772627"];
310 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 772628"];
311 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 772629"];
312 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 772630"];
313 [label="LanguageVersion? result = null; 772631"];
314 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 772632"];
315 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 772633"];
316 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 772634"];
317 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 772635"];
318 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 772636"];
319 [label="this.LanguageVersion 772637"];
320 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 772638"];
321 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772639"];
322 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772640"];
323 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772641"];
324 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772642"];
325 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772643"];
326 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772644"];
327 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 772645"];
328 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 772646"];
329 [label="this.Options 772647"];
330 [label="get\n            {\n                return _options;\n            } 772648"];
331 [label="return _options; 772649"];
332 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 772650"];
333 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 772651"];
334 [label="_referenceManager 772652"];
335 [label="_syntaxAndDeclarations 772653"];
336 [label="Debug.Assert(_lazyAssemblySymbol is null); 772654"];
337 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 772655"];
338 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 772656"];
339 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 772657"];
340 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 772658"];
341 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 772659"];
342 [label="compilation.AddSyntaxTrees(syntaxTrees) 772660"];
343 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 772661"];
344 [label="param AddSyntaxTrees(this) 772662"];
345 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 772663"];
346 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 772664"];
347 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 772665"];
348 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 772666"];
349 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 772667"];
350 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 772668"];
351 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 772669"];
352 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 772670"];
353 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 772671"];
354 [label="bool reuseReferenceManager = true; 772672"];
355 [label="int i = 0; 772673"];
356 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 772674"];
357 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 772675"];
358 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 772676"];
359 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 772677"];
360 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 772678"];
361 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 772679"];
362 [label="externalSyntaxTrees.Add(tree); 772680"];
363 [label="externalSyntaxTrees.Add(tree); 772681"];
364 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 772682"];
365 [label="i++; 772683"];
366 [label="externalSyntaxTrees.Free(); 772684"];
367 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 772685"];
368 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 772686"];
369 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 772687"];
370 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 772688"];
371 [label="param AddSyntaxTrees(this) 772689"];
372 [label="var scriptClassName = this.ScriptClassName; 772690"];
373 [label="var resolver = this.Resolver; 772691"];
374 [label="var messageProvider = this.MessageProvider; 772692"];
375 [label="var isSubmission = this.IsSubmission; 772693"];
376 [label="var state = _lazyState; 772694"];
377 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 772695"];
378 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 772696"];
379 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 772697"];
380 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 772698"];
381 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 772699"];
382 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 772700"];
383 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 772701"];
384 [label="param WithExternalSyntaxTrees(this) 772702"];
385 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 772703"];
386 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 772704"];
387 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 772705"];
388 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 772706"];
389 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 772707"];
390 [label="param SyntaxAndDeclarationManager(string scriptClassName) 772708"];
391 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 772709"];
392 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 772710"];
393 [label="param SyntaxAndDeclarationManager(bool isSubmission) 772711"];
394 [label="param SyntaxAndDeclarationManager(State state) 772712"];
395 [label="param SyntaxAndDeclarationManager(this) 772713"];
396 [label="param SyntaxAndDeclarationManager(this) 772714"];
397 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 772715"];
398 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 772716"];
399 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 772717"];
400 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 772718"];
401 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 772719"];
402 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 772720"];
403 [label="param Update(ReferenceManager referenceManager) 772721"];
404 [label="param Update(bool reuseReferenceManager) 772722"];
405 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 772723"];
406 [label="param Update(this) 772724"];
407 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 772725"];
408 [label="this.PreviousSubmission 772726"];
409 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 772727"];
410 [label="ScriptCompilationInfo 772728"];
411 [label="ScriptCompilationInfo?.PreviousScriptCompilation 772729"];
412 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 772730"];
413 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 772731"];
414 [label="this.SubmissionReturnType 772732"];
415 [label="=> ScriptCompilationInfo 772733"];
416 [label="ScriptCompilationInfo 772734"];
417 [label="this.HostObjectType 772735"];
418 [label="=> ScriptCompilationInfo 772736"];
419 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 772737"];
420 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 772738"];
421 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 772739"];
422 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 772740"];
423 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 772741"];
424 [label="param CSharpCompilation(string? assemblyName) 772742"];
425 [label="param CSharpCompilation(CSharpCompilationOptions options) 772743"];
426 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 772744"];
427 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 772745"];
428 [label="param CSharpCompilation(Type? submissionReturnType) 772746"];
429 [label="param CSharpCompilation(Type? hostObjectType) 772747"];
430 [label="param CSharpCompilation(bool isSubmission) 772748"];
431 [label="param CSharpCompilation(ReferenceManager? referenceManager) 772749"];
432 [label="param CSharpCompilation(bool reuseReferenceManager) 772750"];
433 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 772751"];
434 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 772752"];
435 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 772753"];
436 [label="param CSharpCompilation(this) 772754"];
437 [label="previousSubmission 772755"];
438 [label="submissionReturnType 772756"];
439 [label="hostObjectType 772757"];
440 [label="syntaxAndDeclarations.ExternalSyntaxTrees 772758"];
441 [label="eventQueue 772759"];
442 [label="param CSharpCompilation(this) 772760"];
443 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 772761"];
444 [label="param CSharpCompilation(Type? submissionReturnType) 772762"];
445 [label="param CSharpCompilation(Type? hostObjectType) 772763"];
446 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 772764"];
447 [label="param CSharpCompilation(this) 772765"];
448 [label="eventQueue 772766"];
449 [label="param CSharpCompilation(this) 772767"];
450 [label="_options 772768"];
451 [label="_globalImports 772769"];
452 [label="_previousSubmissionImports 772770"];
453 [label="_globalNamespaceAlias 772771"];
454 [label="_scriptClass 772772"];
455 [label="_lazyHostObjectTypeSymbol 772773"];
456 [label="_lazyImportInfos 772774"];
457 [label="_conversions 772775"];
458 [label="_anonymousTypeManager 772776"];
459 [label="_lazyGlobalNamespace 772777"];
460 [label="builtInOperators 772778"];
461 [label="_lazyAssemblySymbol 772779"];
462 [label="_referenceManager 772780"];
463 [label="_syntaxAndDeclarations 772781"];
464 [label="_lazyEntryPoint 772782"];
465 [label="_lazyEmitNullablePublicOnly 772783"];
466 [label="_lazyCompilationUnitCompletedTrees 772784"];
467 [label="NullableAnalysisData 772785"];
468 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 772786"];
469 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 772787"];
470 [label="_externAliasTargets 772788"];
471 [label="_moduleInitializerMethods 772789"];
472 [label="_binderFactories 772790"];
473 [label="_ignoreAccessibilityBinderFactories 772791"];
474 [label="_lazyDeclarationDiagnostics 772792"];
475 [label="_declarationDiagnosticsFrozen 772793"];
476 [label="new DiagnosticBag() 772794"];
477 [label="_additionalCodegenWarnings = new DiagnosticBag() 772795"];
478 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 772796"];
479 [label="this.builtInOperators = new BuiltInOperators(this); 772797"];
480 [label="this.builtInOperators = new BuiltInOperators(this); 772798"];
481 [label="new BuiltInOperators(this) 772799"];
482 [label="param BuiltInOperators(CSharpCompilation compilation) 772800"];
483 [label="param BuiltInOperators(this) 772801"];
484 [label="_compilation 772802"];
485 [label="_builtInUnaryOperators 772803"];
486 [label="_builtInOperators 772804"];
487 [label="_compilation 772805"];
488 [label="this.builtInOperators 772806"];
489 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 772807"];
490 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 772808"];
491 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 772809"];
492 [label="LanguageVersion? result = null; 772810"];
493 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 772811"];
494 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 772812"];
495 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 772813"];
496 [label="result = version; 772814"];
497 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 772815"];
498 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772816"];
499 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772817"];
500 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772818"];
501 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772819"];
502 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772820"];
503 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 772821"];
504 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 772822"];
505 [label="referenceManager.AssertCanReuseForCompilation(this); 772823"];
506 [label="referenceManager.AssertCanReuseForCompilation(this); 772824"];
507 [label="_referenceManager 772825"];
508 [label="Debug.Assert(_lazyAssemblySymbol is null); 772826"];
509 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 772827"];
510 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 772828"];
511 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 772829"];
512 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 772830"];
513 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 772831"];
514 [label="return compilation; 772832"];
515 [label="var compilation = createCompilationLambda(); 772833"];
516 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 772834"];
517 [label="IsNullableEnabled(compilation) 772835"];
518 [label="param IsNullableEnabled(CSharpCompilation compilation) 772836"];
519 [label="compilation.SyntaxTrees 772837"];
520 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 772838"];
521 [label="_syntaxAndDeclarations.GetLazyState() 772839"];
522 [label="param GetLazyState(this) 772840"];
523 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 772841"];
524 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 772842"];
525 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 772843"];
526 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 772844"];
527 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 772845"];
528 [label="param CreateState(string scriptClassName) 772846"];
529 [label="param CreateState(SourceReferenceResolver resolver) 772847"];
530 [label="param CreateState(CommonMessageProvider messageProvider) 772848"];
531 [label="param CreateState(bool isSubmission) 772849"];
532 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 772850"];
533 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 772851"];
534 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 772852"];
535 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 772853"];
536 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 772854"];
537 [label="var declTable = DeclarationTable.Empty; 772855"];
538 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 772856"];
539 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772857"];
540 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772858"];
541 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772859"];
542 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772860"];
543 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772861"];
544 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772862"];
545 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772863"];
546 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772864"];
547 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772865"];
548 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772866"];
549 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 772867"];
550 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 772868"];
551 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 772869"];
552 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 772870"];
553 [label="param AppendAllSyntaxTrees(string scriptClassName) 772871"];
554 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 772872"];
555 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 772873"];
556 [label="param AppendAllSyntaxTrees(bool isSubmission) 772874"];
557 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 772875"];
558 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 772876"];
559 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 772877"];
560 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 772878"];
561 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 772879"];
562 [label="var sourceCodeKind = tree.Options.Kind; 772880"];
563 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 772881"];
564 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 772882"];
565 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 772883"];
566 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 772884"];
567 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 772885"];
568 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 772886"];
569 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 772887"];
570 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 772888"];
571 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 772889"];
572 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 772890"];
573 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 772891"];
574 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 772892"];
575 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 772893"];
576 [label="declMapBuilder.Add(tree, lazyRoot); 772894"];
577 [label="declMapBuilder.Add(tree, lazyRoot); 772895"];
578 [label="declMapBuilder.Add(tree, lazyRoot); 772896"];
579 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 772897"];
580 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 772898"];
581 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 772899"];
582 [label="treesBuilder.Add(tree); 772900"];
583 [label="treesBuilder.Add(tree); 772901"];
584 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 772902"];
585 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 772903"];
586 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 772904"];
587 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 772905"];
588 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 772906"];
589 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 772907"];
590 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 772908"];
591 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 772909"];
592 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 772910"];
593 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 772911"];
594 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 772912"];
595 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 772913"];
596 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 772914"];
597 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 772915"];
598 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 772916"];
599 [label="param State(DeclarationTable declarationTable) 772917"];
600 [label="param State(this) 772918"];
601 [label="OrdinalMap 772919"];
602 [label="LoadDirectiveMap 772920"];
603 [label="LoadedSyntaxTreeMap 772921"];
604 [label="RootNamespaces 772922"];
605 [label="DeclarationTable 772923"];
606 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 772924"];
607 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 772925"];
608 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 772926"];
609 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 772927"];
610 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 772928"];
611 [label="this.SyntaxTrees 772929"];
612 [label="this.OrdinalMap 772930"];
613 [label="this.LoadDirectiveMap 772931"];
614 [label="this.LoadedSyntaxTreeMap 772932"];
615 [label="this.RootNamespaces 772933"];
616 [label="this.DeclarationTable 772934"];
617 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 772935"];
618 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 772936"];
619 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 772937"];
620 [label="return _lazyState; 772938"];
621 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 772939"];
622 [label="var trees = compilation.SyntaxTrees; 772940"];
623 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 772941"];
624 [label="var options = (CSharpParseOptions)trees[0].Options; 772942"];
625 [label="var options = (CSharpParseOptions)trees[0].Options; 772943"];
626 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 772944"];
627 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 772945"];
628 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 772946"];
629 [label="return compilation; 772947"];
630 [label="var peHeaders = new PEHeaders(compilation.EmitToStream()); 772948"];
631 [label="var peHeaders = new PEHeaders(compilation.EmitToStream()); 772949"];
632 [label="compilation.EmitToStream() 772950"];
633 [label="param EmitToStream(this Compilation compilation) 772951"];
634 [label="param EmitToStream(EmitOptions options = null) 772952"];
635 [label="param EmitToStream(DiagnosticDescription[] expectedWarnings = null) 772953"];
636 [label="var stream = new MemoryStream(); 772954"];
637 [label="var emitResult = compilation.Emit(stream, options: options); 772955"];
638 [label="var emitResult = compilation.Emit(stream, options: options); 772956"];
639 [label="var emitResult = compilation.Emit(stream, options: options); 772957"];
640 [label="var emitResult = compilation.Emit(stream, options: options); 772958"];
641 [label="get { return _options; } 772959"];
642 [label="return _options; 772960"];
643 [label="get { return _syntaxAndDeclarations.MessageProvider; } 772961"];
644 [label="return _syntaxAndDeclarations.MessageProvider; 772962"];
645 [label="param CreateModuleBuilder(EmitOptions emitOptions) 772963"];
646 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 772964"];
647 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 772965"];
648 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 772966"];
649 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 772967"];
650 [label="param CreateModuleBuilder(CompilationTestData? testData) 772968"];
651 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 772969"];
652 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 772970"];
653 [label="param CreateModuleBuilder(this) 772971"];
654 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 772972"];
655 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 772973"];
656 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 772974"];
657 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 772975"];
658 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 772976"];
659 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 772977"];
660 [label="param GetRuntimeMetadataVersion(this) 772978"];
661 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 772979"];
662 [label="GetRuntimeMetadataVersion(emitOptions) 772980"];
663 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 772981"];
664 [label="param GetRuntimeMetadataVersion(this) 772982"];
665 [label="Assembly 772983"];
666 [label="get\n            {\n                return SourceAssembly;\n            } 772984"];
667 [label="SourceAssembly 772985"];
668 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 772986"];
669 [label="GetBoundReferenceManager() 772987"];
670 [label="param GetBoundReferenceManager(this) 772988"];
671 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 772989"];
672 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 772990"];
673 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 772991"];
674 [label="get { return this.Declarations.ReferenceDirectives; } 772992"];
675 [label="this.Declarations 772993"];
676 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 772994"];
677 [label="_syntaxAndDeclarations.GetLazyState() 772995"];
678 [label="param GetLazyState(this) 772996"];
679 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 772997"];
680 [label="return this.Declarations.ReferenceDirectives; 772998"];
681 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 772999"];
682 [label="_syntaxAndDeclarations.GetLazyState() 773000"];
683 [label="Debug.Assert(_lazyAssemblySymbol is object); 773001"];
684 [label="return _referenceManager; 773002"];
685 [label="GetBoundReferenceManager(); 773003"];
686 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 773004"];
687 [label="return _lazyAssemblySymbol; 773005"];
688 [label="return SourceAssembly; 773006"];
689 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 773007"];
690 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 773008"];
691 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 773009"];
692 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 773010"];
693 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 773011"];
694 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 773012"];
695 [label="return runtimeMDVersion; 773013"];
696 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 773014"];
697 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 773015"];
698 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 773016"];
699 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 773017"];
700 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 773018"];
701 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 773019"];
702 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 773020"];
703 [label="get { return SourceAssembly.IsDelaySigned; } 773021"];
704 [label="SourceAssembly 773022"];
705 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 773023"];
706 [label="GetBoundReferenceManager() 773024"];
707 [label="return _referenceManager; 773025"];
708 [label="GetBoundReferenceManager(); 773026"];
709 [label="return SourceAssembly.IsDelaySigned; 773027"];
710 [label="SourceAssembly.IsDelaySigned 773028"];
711 [label="get\n            {\n                return _options;\n            } 773029"];
712 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 773030"];
713 [label="Declarations 773031"];
714 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 773032"];
715 [label="_syntaxAndDeclarations.GetLazyState() 773033"];
716 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 773034"];
717 [label="return Declarations.GetMergedRoot(this); 773035"];
718 [label="return Declarations.GetMergedRoot(this); 773036"];
719 [label="return Declarations.GetMergedRoot(this); 773037"];
720 [label="_syntaxAndDeclarations.GetLazyState() 773038"];
721 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 773039"];
722 [label="get { return SourceAssembly.StrongNameKeys; } 773040"];
723 [label="SourceAssembly 773041"];
724 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 773042"];
725 [label="GetBoundReferenceManager() 773043"];
726 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 773044"];
727 [label="return _referenceManager; 773045"];
728 [label="GetBoundReferenceManager(); 773046"];
729 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 773047"];
730 [label="return SourceAssembly.StrongNameKeys; 773048"];
731 [label="SourceAssembly.StrongNameKeys 773049"];
732 [label="get\n            {\n                return _options;\n            } 773050"];
733 [label="=> 0x30 773051"];
734 [label="0x30 773052"];
735 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 773053"];
736 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 773054"];
737 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 773055"];
738 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 773056"];
739 [label="PEModuleBuilder moduleBeingBuilt; 773057"];
740 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 773058"];
741 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 773059"];
742 [label="_options.OutputKind.IsValid() 773060"];
743 [label="_options.OutputKind 773061"];
744 [label="SourceAssembly 773062"];
745 [label="return _referenceManager; 773063"];
746 [label="GetBoundReferenceManager(); 773064"];
747 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 773065"];
748 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 773066"];
749 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 773067"];
750 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 773068"];
751 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 773069"];
752 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 773070"];
753 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 773071"];
754 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 773072"];
755 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 773073"];
756 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 773074"];
757 [label="param PEAssemblyBuilder(OutputKind outputKind) 773075"];
758 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 773076"];
759 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 773077"];
760 [label="param PEAssemblyBuilder(this) 773078"];
761 [label="sourceAssembly 773079"];
762 [label="emitOptions 773080"];
763 [label="outputKind 773081"];
764 [label="serializationProperties 773082"];
765 [label="manifestResources 773083"];
766 [label="ImmutableArray<NamedTypeSymbol>.Empty 773084"];
767 [label="param PEAssemblyBuilder(this) 773085"];
768 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 773086"];
769 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 773087"];
770 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 773088"];
771 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 773089"];
772 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 773090"];
773 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 773091"];
774 [label="param PEAssemblyBuilderBase(this) 773092"];
775 [label="0 773093"];
776 [label="sourceAssembly.Modules[0] 773094"];
777 [label="emitOptions 773095"];
778 [label="outputKind 773096"];
779 [label="serializationProperties 773097"];
780 [label="manifestResources 773098"];
781 [label="param PEAssemblyBuilderBase(this) 773099"];
782 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 773100"];
783 [label="param PEModuleBuilder(EmitOptions emitOptions) 773101"];
784 [label="param PEModuleBuilder(OutputKind outputKind) 773102"];
785 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 773103"];
786 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 773104"];
787 [label="param PEModuleBuilder(this) 773105"];
788 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 773106"];
789 [label="sourceModule 773107"];
790 [label="serializationProperties 773108"];
791 [label="manifestResources 773109"];
792 [label="outputKind 773110"];
793 [label="emitOptions 773111"];
794 [label="new ModuleCompilationState() 773112"];
795 [label="param ModuleCompilationState(this) 773113"];
796 [label="param PEModuleBuilder(this) 773114"];
797 [label="param PEModuleBuilder(this) 773115"];
798 [label="get\n            {\n                return true;\n            } 773116"];
799 [label="return true; 773117"];
800 [label="param PEModuleBuilder(this) 773118"];
801 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 773119"];
802 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 773120"];
803 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 773121"];
804 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 773122"];
805 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 773123"];
806 [label="new ConcurrentSet<TypeSymbol>() 773124"];
807 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 773125"];
808 [label="_embeddedTypesManagerOpt 773126"];
809 [label="_metadataName 773127"];
810 [label="_fixedImplementationTypes 773128"];
811 [label="_needsGeneratedAttributes 773129"];
812 [label="_needsGeneratedAttributes_IsFrozen 773130"];
813 [label="var specifiedName = sourceModule.MetadataName; 773131"];
814 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 773132"];
815 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 773133"];
816 [label="_metadataName 773134"];
817 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 773135"];
818 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 773136"];
819 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 773137"];
820 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 773138"];
821 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 773139"];
822 [label="_sourceAssembly 773140"];
823 [label="_lazyEmbeddedAttribute 773141"];
824 [label="_lazyIsReadOnlyAttribute 773142"];
825 [label="_lazyIsByRefLikeAttribute 773143"];
826 [label="_lazyIsUnmanagedAttribute 773144"];
827 [label="_lazyNullableAttribute 773145"];
828 [label="_lazyNullableContextAttribute 773146"];
829 [label="_lazyNullablePublicOnlyAttribute 773147"];
830 [label="_lazyNativeIntegerAttribute 773148"];
831 [label="_metadataName 773149"];
832 [label="Debug.Assert(sourceAssembly is object); 773150"];
833 [label="_sourceAssembly 773151"];
834 [label="_additionalTypes = additionalTypes.NullToEmpty(); 773152"];
835 [label="_additionalTypes 773153"];
836 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 773154"];
837 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 773155"];
838 [label="(emitOptions.OutputNameOverride == null) 773156"];
839 [label="sourceAssembly.MetadataName 773157"];
840 [label="_metadataName 773158"];
841 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 773159"];
842 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 773160"];
843 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 773161"];
844 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 773162"];
845 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 773163"];
846 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 773164"];
847 [label="moduleBeingBuilt.SourceLinkStreamOpt 773165"];
848 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 773166"];
849 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 773167"];
850 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 773168"];
851 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 773169"];
852 [label="return moduleBeingBuilt; 773170"];
853 [label="var emitResult = compilation.Emit(stream, options: options); 773171"];
854 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 773172"];
855 [label="param CompileMethods(bool emittingPdb) 773173"];
856 [label="param CompileMethods(bool emitMetadataOnly) 773174"];
857 [label="param CompileMethods(bool emitTestCoverageData) 773175"];
858 [label="param CompileMethods(DiagnosticBag diagnostics) 773176"];
859 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 773177"];
860 [label="param CompileMethods(CancellationToken cancellationToken) 773178"];
861 [label="param CompileMethods(this) 773179"];
862 [label="PooledHashSet<int>? excludeDiagnostics = null; 773180"];
863 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 773181"];
864 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 773182"];
865 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 773183"];
866 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 773184"];
867 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 773185"];
868 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 773186"];
869 [label="param GetDiagnostics(CompilationStage stage) 773187"];
870 [label="param GetDiagnostics(bool includeEarlierStages) 773188"];
871 [label="param GetDiagnostics(CancellationToken cancellationToken) 773189"];
872 [label="param GetDiagnostics(this) 773190"];
873 [label="var diagnostics = DiagnosticBag.GetInstance(); 773191"];
874 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 773192"];
875 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 773193"];
876 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 773194"];
877 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 773195"];
878 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 773196"];
879 [label="param GetDiagnostics(CompilationStage stage) 773197"];
880 [label="param GetDiagnostics(bool includeEarlierStages) 773198"];
881 [label="param GetDiagnostics(DiagnosticBag diagnostics) 773199"];
882 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 773200"];
883 [label="param GetDiagnostics(this) 773201"];
884 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 773202"];
885 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 773203"];
886 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 773204"];
887 [label="this.SyntaxTrees 773205"];
888 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 773206"];
889 [label="_syntaxAndDeclarations.GetLazyState() 773207"];
890 [label="param GetLazyState(this) 773208"];
891 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 773209"];
892 [label="var syntaxTrees = this.SyntaxTrees; 773210"];
893 [label="this.Options 773211"];
894 [label="get\n            {\n                return _options;\n            } 773212"];
895 [label="return _options; 773213"];
896 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 773214"];
897 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 773215"];
898 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 773216"];
899 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 773217"];
900 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 773218"];
901 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 773219"];
902 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 773220"];
903 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 773221"];
904 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 773222"];
905 [label="ImmutableArray<LoadDirective> loadDirectives; 773223"];
906 [label="loadDirectives 773224"];
907 [label="syntaxAndDeclarations.GetLazyState() 773225"];
908 [label="param GetLazyState(this) 773226"];
909 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 773227"];
910 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 773228"];
911 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 773229"];
912 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 773230"];
913 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 773231"];
914 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 773232"];
915 [label="cancellationToken.ThrowIfCancellationRequested(); 773233"];
916 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 773234"];
917 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 773235"];
918 [label="CheckAssemblyName(builder); 773236"];
919 [label="CheckAssemblyName(builder); 773237"];
920 [label="CheckAssemblyName(builder); 773238"];
921 [label="Options 773239"];
922 [label="get\n            {\n                return _options;\n            } 773240"];
923 [label="return _options; 773241"];
924 [label="builder.AddRange(Options.Errors); 773242"];
925 [label="Options 773243"];
926 [label="get\n            {\n                return _options;\n            } 773244"];
927 [label="return _options; 773245"];
928 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 773246"];
929 [label="cancellationToken.ThrowIfCancellationRequested(); 773247"];
930 [label="GetBoundReferenceManager() 773248"];
931 [label="param GetBoundReferenceManager(this) 773249"];
932 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 773250"];
933 [label="return _referenceManager; 773251"];
934 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 773252"];
935 [label="cancellationToken.ThrowIfCancellationRequested(); 773253"];
936 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 773254"];
937 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 773255"];
938 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 773256"];
939 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 773257"];
940 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 773258"];
941 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 773259"];
942 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 773260"];
943 [label="param GetSourceDeclarationDiagnostics(this) 773261"];
944 [label="GlobalImports 773262"];
945 [label="=> _globalImports.Value 773263"];
946 [label="_globalImports.Value 773264"];
947 [label="_globalImports.Value 773265"];
948 [label="=> Imports.FromGlobalUsings(this) 773266"];
949 [label="this 773267"];
950 [label="Imports.FromGlobalUsings(this) 773268"];
951 [label="Imports.FromGlobalUsings(this) 773269"];
952 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 773270"];
953 [label="ScriptCompilationInfo 773271"];
954 [label="ScriptCompilationInfo?.PreviousScriptCompilation 773272"];
955 [label="GlobalImports.Complete(cancellationToken); 773273"];
956 [label="GlobalImports.Complete(cancellationToken); 773274"];
957 [label="GlobalImports.Complete(cancellationToken); 773275"];
958 [label="SourceLocation? location = null; 773276"];
959 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 773277"];
960 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 773278"];
961 [label="Assembly 773279"];
962 [label="get\n            {\n                return SourceAssembly;\n            } 773280"];
963 [label="SourceAssembly 773281"];
964 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 773282"];
965 [label="GetBoundReferenceManager() 773283"];
966 [label="param GetBoundReferenceManager(this) 773284"];
967 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 773285"];
968 [label="return _referenceManager; 773286"];
969 [label="GetBoundReferenceManager(); 773287"];
970 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 773288"];
971 [label="Assembly.ForceComplete(location, cancellationToken); 773289"];
972 [label="Assembly.ForceComplete(location, cancellationToken); 773290"];
973 [label="Assembly.ForceComplete(location, cancellationToken); 773291"];
974 [label="Assembly.ForceComplete(location, cancellationToken); 773292"];
975 [label="Assembly.ForceComplete(location, cancellationToken); 773293"];
976 [label="SourceAssembly 773294"];
977 [label="GetBoundReferenceManager() 773295"];
978 [label="GetBoundReferenceManager(); 773296"];
979 [label="Declarations 773297"];
980 [label="_syntaxAndDeclarations.GetLazyState() 773298"];
981 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 773299"];
982 [label="return Declarations.GetMergedRoot(this); 773300"];
983 [label="_syntaxAndDeclarations.GetLazyState() 773301"];
984 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 773302"];
985 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 773303"];
986 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 773304"];
987 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 773305"];
988 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 773306"];
989 [label="var diagnostics = new DiagnosticBag(); 773307"];
990 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 773308"];
991 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 773309"];
992 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 773310"];
993 [label="return _lazyDeclarationDiagnostics; 773311"];
994 [label="param SymbolDeclaredEvent(Symbol symbol) 773312"];
995 [label="param SymbolDeclaredEvent(this) 773313"];
996 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 773314"];
997 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 773315"];
998 [label="param GetUnaliasedReferencedAssemblies(this) 773316"];
999 [label="GetBoundReferenceManager() 773317"];
1000 [label="param GetBoundReferenceManager(this) 773318"];
1001 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 773319"];
1002 [label="return _referenceManager; 773320"];
1003 [label="var referenceManager = GetBoundReferenceManager(); 773321"];
1004 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 773322"];
1005 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 773323"];
1006 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 773324"];
1007 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 773325"];
1008 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 773326"];
1009 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 773327"];
1010 [label="return _additionalCodegenWarnings; 773328"];
1011 [label="GetBoundReferenceManager(); 773329"];
1012 [label="param GetSpecialType(SpecialType specialType) 773330"];
1013 [label="param GetSpecialType(this) 773331"];
1014 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 773332"];
1015 [label="NamedTypeSymbol result; 773333"];
1016 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 773334"];
1017 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 773335"];
1018 [label="Assembly 773336"];
1019 [label="GetBoundReferenceManager(); 773337"];
1020 [label="result = Assembly.GetSpecialType(specialType); 773338"];
1021 [label="result = Assembly.GetSpecialType(specialType); 773339"];
1022 [label="Debug.Assert(result.SpecialType == specialType); 773340"];
1023 [label="return result; 773341"];
1024 [label="param GetBinder(CSharpSyntaxNode syntax) 773342"];
1025 [label="param GetBinder(this) 773343"];
1026 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 773344"];
1027 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 773345"];
1028 [label="GetBinderFactory(syntax.SyntaxTree) 773346"];
1029 [label="param GetBinderFactory(SyntaxTree syntaxTree) 773347"];
1030 [label="param GetBinderFactory(bool ignoreAccessibility = false) 773348"];
1031 [label="param GetBinderFactory(this) 773349"];
1032 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 773350"];
1033 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 773351"];
1034 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 773352"];
1035 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 773353"];
1036 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 773354"];
1037 [label="param GetBinderFactory(SyntaxTree syntaxTree) 773355"];
1038 [label="param GetBinderFactory(bool ignoreAccessibility) 773356"];
1039 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 773357"];
1040 [label="param GetBinderFactory(this) 773358"];
1041 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 773359"];
1042 [label="ignoreAccessibility 773360"];
1043 [label="_binderFactories 773361"];
1044 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 773362"];
1045 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 773363"];
1046 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 773364"];
1047 [label="GetSyntaxTreeOrdinal(syntaxTree) 773365"];
1048 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 773366"];
1049 [label="param GetSyntaxTreeOrdinal(this) 773367"];
1050 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 773368"];
1051 [label="this.ContainsSyntaxTree(tree) 773369"];
1052 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 773370"];
1053 [label="param ContainsSyntaxTree(this) 773371"];
1054 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 773372"];
1055 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 773373"];
1056 [label="_syntaxAndDeclarations.GetLazyState() 773374"];
1057 [label="param GetLazyState(this) 773375"];
1058 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 773376"];
1059 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 773377"];
1060 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 773378"];
1061 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 773379"];
1062 [label="_syntaxAndDeclarations.GetLazyState() 773380"];
1063 [label="param GetLazyState(this) 773381"];
1064 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 773382"];
1065 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 773383"];
1066 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 773384"];
1067 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 773385"];
1068 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 773386"];
1069 [label="this.SyntaxTrees 773387"];
1070 [label="param GetLazyState(this) 773388"];
1071 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 773389"];
1072 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 773390"];
1073 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 773391"];
1074 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 773392"];
1075 [label="BinderFactory? previousFactory; 773393"];
1076 [label="var previousWeakReference = binderFactories[treeNum]; 773394"];
1077 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 773395"];
1078 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 773396"];
1079 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 773397"];
1080 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 773398"];
1081 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 773399"];
1082 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 773400"];
1083 [label="param AddNewFactory(SyntaxTree syntaxTree) 773401"];
1084 [label="param AddNewFactory(bool ignoreAccessibility) 773402"];
1085 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 773403"];
1086 [label="param AddNewFactory(this) 773404"];
1087 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 773405"];
1088 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 773406"];
1089 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 773407"];
1090 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 773408"];
1091 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 773409"];
1092 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 773410"];
1093 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 773411"];
1094 [label="BinderFactory? previousFactory; 773412"];
1095 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 773413"];
1096 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 773414"];
1097 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 773415"];
1098 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 773416"];
1099 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 773417"];
1100 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 773418"];
1101 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 773419"];
1102 [label="return newFactory; 773420"];
1103 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 773421"];
1104 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 773422"];
1105 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 773423"];
1106 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 773424"];
1107 [label="GetAllUnaliasedModules(modules); 773425"];
1108 [label="GetAllUnaliasedModules(modules) 773426"];
1109 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 773427"];
1110 [label="param GetAllUnaliasedModules(this) 773428"];
1111 [label="Assembly 773429"];
1112 [label="get\n            {\n                return SourceAssembly;\n            } 773430"];
1113 [label="GetBoundReferenceManager(); 773431"];
1114 [label="modules.AddRange(Assembly.Modules); 773432"];
1115 [label="modules.AddRange(Assembly.Modules); 773433"];
1116 [label="GetBoundReferenceManager() 773434"];
1117 [label="param GetBoundReferenceManager(this) 773435"];
1118 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 773436"];
1119 [label="return _referenceManager; 773437"];
1120 [label="var referenceManager = GetBoundReferenceManager(); 773438"];
1121 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 773439"];
1122 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 773440"];
1123 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 773441"];
1124 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 773442"];
1125 [label="GetAllUnaliasedModules(modules); 773443"];
1126 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 773444"];
1127 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 773445"];
1128 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 773446"];
1129 [label="modules.Free(); 773447"];
1130 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 773448"];
1131 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 773449"];
1132 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 773450"];
1133 [label="return _lazyGlobalNamespace; 773451"];
1134 [label="get\n            {\n                return Assembly.Modules[0];\n            } 773452"];
1135 [label="Assembly 773453"];
1136 [label="get\n            {\n                return SourceAssembly;\n            } 773454"];
1137 [label="SourceAssembly 773455"];
1138 [label="GetBoundReferenceManager() 773456"];
1139 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 773457"];
1140 [label="return _referenceManager; 773458"];
1141 [label="GetBoundReferenceManager(); 773459"];
1142 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 773460"];
1143 [label="return Assembly.Modules[0]; 773461"];
1144 [label="return Assembly.Modules[0]; 773462"];
1145 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 773463"];
1146 [label="param IsNullableAnalysisEnabledIn(this) 773464"];
1147 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 773465"];
1148 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 773466"];
1149 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 773467"];
1150 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 773468"];
1151 [label="param IsNullableAnalysisEnabledIn(this) 773469"];
1152 [label="GetNullableAnalysisValue() 773470"];
1153 [label="param GetNullableAnalysisValue(this) 773471"];
1154 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 773472"];
1155 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 773473"];
1156 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 773474"];
1157 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 773475"];
1158 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 773476"];
1159 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 773477"];
1160 [label="Options 773478"];
1161 [label="get\n            {\n                return _options;\n            } 773479"];
1162 [label="return _options; 773480"];
1163 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 773481"];
1164 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 773482"];
1165 [label="param GetBinderFactory(SyntaxTree syntaxTree) 773483"];
1166 [label="param GetBinderFactory(bool ignoreAccessibility = false) 773484"];
1167 [label="param GetBinderFactory(this) 773485"];
1168 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 773486"];
1169 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 773487"];
1170 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 773488"];
1171 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 773489"];
1172 [label="param GetBinderFactory(SyntaxTree syntaxTree) 773490"];
1173 [label="param GetBinderFactory(bool ignoreAccessibility) 773491"];
1174 [label="param GetBinderFactory(this) 773492"];
1175 [label="ignoreAccessibility 773493"];
1176 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 773494"];
1177 [label="GetSyntaxTreeOrdinal(syntaxTree) 773495"];
1178 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 773496"];
1179 [label="param GetSyntaxTreeOrdinal(this) 773497"];
1180 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 773498"];
1181 [label="this.ContainsSyntaxTree(tree) 773499"];
1182 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 773500"];
1183 [label="param ContainsSyntaxTree(this) 773501"];
1184 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 773502"];
1185 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 773503"];
1186 [label="_syntaxAndDeclarations.GetLazyState() 773504"];
1187 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 773505"];
1188 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 773506"];
1189 [label="_syntaxAndDeclarations.GetLazyState() 773507"];
1190 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 773508"];
1191 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 773509"];
1192 [label="BinderFactory? previousFactory; 773510"];
1193 [label="var previousWeakReference = binderFactories[treeNum]; 773511"];
1194 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 773512"];
1195 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 773513"];
1196 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 773514"];
1197 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 773515"];
1198 [label="return previousFactory; 773516"];
1199 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 773517"];
1200 [label="param IsFeatureEnabled(MessageID feature) 773518"];
1201 [label="compilation.SyntaxTrees 773519"];
1202 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 773520"];
1203 [label="_syntaxAndDeclarations.GetLazyState() 773521"];
1204 [label="param GetLazyState(this) 773522"];
1205 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 773523"];
1206 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 773524"];
1207 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 773525"];
1208 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 773526"];
1209 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 773527"];
1210 [label="GetBoundReferenceManager(); 773528"];
1211 [label="Debug.Assert(result.SpecialType == specialType); 773529"];
1212 [label="param ShouldEmitNullableAttributes(Symbol symbol) 773530"];
1213 [label="param ShouldEmitNullableAttributes(this) 773531"];
1214 [label="RoslynDebug.Assert(symbol is object); 773532"];
1215 [label="RoslynDebug.Assert(symbol is object); 773533"];
1216 [label="Debug.Assert(symbol.IsDefinition); 773534"];
1217 [label="SourceModule 773535"];
1218 [label="get\n            {\n                return Assembly.Modules[0];\n            } 773536"];
1219 [label="Assembly 773537"];
1220 [label="get\n            {\n                return SourceAssembly;\n            } 773538"];
1221 [label="SourceAssembly 773539"];
1222 [label="GetBoundReferenceManager() 773540"];
1223 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 773541"];
1224 [label="return _referenceManager; 773542"];
1225 [label="GetBoundReferenceManager(); 773543"];
1226 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 773544"];
1227 [label="return Assembly.Modules[0]; 773545"];
1228 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 773546"];
1229 [label="EmitNullablePublicOnly 773547"];
1230 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 773548"];
1231 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 773549"];
1232 [label="SyntaxTrees 773550"];
1233 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 773551"];
1234 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 773552"];
1235 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 773553"];
1236 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 773554"];
1237 [label="_lazyEmitNullablePublicOnly 773555"];
1238 [label="return _lazyEmitNullablePublicOnly.Value(); 773556"];
1239 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 773557"];
1240 [label="return true; 773558"];
1241 [label="Debug.Assert(symbol.IsDefinition); 773559"];
1242 [label="GetBoundReferenceManager(); 773560"];
1243 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 773561"];
1244 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 773562"];
1245 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 773563"];
1246 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 773564"];
1247 [label="_declarationDiagnosticsFrozen = true; 773565"];
1248 [label="_declarationDiagnosticsFrozen 773566"];
1249 [label="_needsGeneratedAttributes_IsFrozen = true; 773567"];
1250 [label="_needsGeneratedAttributes_IsFrozen 773568"];
1251 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 773569"];
1252 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 773570"];
1253 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 773571"];
1254 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 773572"];
1255 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 773573"];
1256 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 773574"];
1257 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 773575"];
1258 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 773576"];
1259 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 773577"];
1260 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 773578"];
1261 [label="param GetClsComplianceDiagnostics(this) 773579"];
1262 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 773580"];
1263 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 773581"];
1264 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 773582"];
1265 [label="var builder = DiagnosticBag.GetInstance(); 773583"];
1266 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 773584"];
1267 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 773585"];
1268 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 773586"];
1269 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 773587"];
1270 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 773588"];
1271 [label="param CheckCompliance(CSharpCompilation compilation) 773589"];
1272 [label="param CheckCompliance(DiagnosticBag diagnostics) 773590"];
1273 [label="param CheckCompliance(CancellationToken cancellationToken) 773591"];
1274 [label="param CheckCompliance(SyntaxTree filterTree = null) 773592"];
1275 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 773593"];
1276 [label="var queue = new ConcurrentQueue<Diagnostic>(); 773594"];
1277 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 773595"];
1278 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 773596"];
1279 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 773597"];
1280 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 773598"];
1281 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 773599"];
1282 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 773600"];
1283 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 773601"];
1284 [label="param ClsComplianceChecker(CSharpCompilation compilation) 773602"];
1285 [label="param ClsComplianceChecker(SyntaxTree filterTree) 773603"];
1286 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 773604"];
1287 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 773605"];
1288 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 773606"];
1289 [label="param ClsComplianceChecker(this) 773607"];
1290 [label="param ClsComplianceChecker(this) 773608"];
1291 [label="_compilation 773609"];
1292 [label="_filterTree 773610"];
1293 [label="_filterSpanWithinTree 773611"];
1294 [label="_diagnostics 773612"];
1295 [label="_declaredOrInheritedCompliance 773613"];
1296 [label="_compilerTasks 773614"];
1297 [label="_compilation 773615"];
1298 [label="_filterTree 773616"];
1299 [label="_filterSpanWithinTree 773617"];
1300 [label="_diagnostics 773618"];
1301 [label="_cancellationToken 773619"];
1302 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 773620"];
1303 [label="_declaredOrInheritedCompliance 773621"];
1304 [label="ConcurrentAnalysis 773622"];
1305 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 773623"];
1306 [label="null 773624"];
1307 [label="_filterTree == null 773625"];
1308 [label="_compilation.Options 773626"];
1309 [label="get\n            {\n                return _options;\n            } 773627"];
1310 [label="return _options; 773628"];
1311 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 773629"];
1312 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 773630"];
1313 [label="_compilerTasks = new ConcurrentStack<Task>(); 773631"];
1314 [label="_compilerTasks 773632"];
1315 [label="compilation.Assembly 773633"];
1316 [label="get\n            {\n                return SourceAssembly;\n            } 773634"];
1317 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 773635"];
1318 [label="return _referenceManager; 773636"];
1319 [label="GetBoundReferenceManager(); 773637"];
1320 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 773638"];
1321 [label="checker.Visit(compilation.Assembly); 773639"];
1322 [label="checker.Visit(compilation.Assembly); 773640"];
1323 [label="checker.Visit(compilation.Assembly); 773641"];
1324 [label="param VisitAssembly(AssemblySymbol symbol) 773642"];
1325 [label="param VisitAssembly(this) 773643"];
1326 [label="_cancellationToken.ThrowIfCancellationRequested(); 773644"];
1327 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 773645"];
1328 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 773646"];
1329 [label="GetDeclaredOrInheritedCompliance(symbol) 773647"];
1330 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 773648"];
1331 [label="param GetDeclaredOrInheritedCompliance(this) 773649"];
1332 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 773650"];
1333 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 773651"];
1334 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 773652"];
1335 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 773653"];
1336 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 773654"];
1337 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 773655"];
1338 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 773656"];
1339 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 773657"];
1340 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 773658"];
1341 [label="Compliance compliance; 773659"];
1342 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 773660"];
1343 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 773661"];
1344 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 773662"];
1345 [label="Location ignoredLocation; 773663"];
1346 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 773664"];
1347 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 773665"];
1348 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 773666"];
1349 [label="param GetDeclaredCompliance(Symbol symbol) 773667"];
1350 [label="param GetDeclaredCompliance(out Location attributeLocation) 773668"];
1351 [label="param GetDeclaredCompliance(this) 773669"];
1352 [label="attributeLocation = null; 773670"];
1353 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 773671"];
1354 [label="return null; 773672"];
1355 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 773673"];
1356 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 773674"];
1357 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 773675"];
1358 [label="compliance = Compliance.ImpliedFalse; 773676"];
1359 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 773677"];
1360 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 773678"];
1361 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 773679"];
1362 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 773680"];
1363 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 773681"];
1364 [label="IsTrue(assemblyCompliance) 773682"];
1365 [label="param IsTrue(Compliance compliance) 773683"];
1366 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 773684"];
1367 [label="return false; 773685"];
1368 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 773686"];
1369 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 773687"];
1370 [label="ModuleSymbol module = symbol.Modules[i]; 773688"];
1371 [label="Location attributeLocation; 773689"];
1372 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 773690"];
1373 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 773691"];
1374 [label="GetDeclaredCompliance(module, out attributeLocation) 773692"];
1375 [label="param GetDeclaredCompliance(Symbol symbol) 773693"];
1376 [label="param GetDeclaredCompliance(out Location attributeLocation) 773694"];
1377 [label="param GetDeclaredCompliance(this) 773695"];
1378 [label="attributeLocation = null; 773696"];
1379 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 773697"];
1380 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 773698"];
1381 [label="i == 0 773699"];
1382 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 773700"];
1383 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 773701"];
1384 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 773702"];
1385 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 773703"];
1386 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 773704"];
1387 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 773705"];
1388 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 773706"];
1389 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 773707"];
1390 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 773708"];
1391 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 773709"];
1392 [label="GetDeclaredOrInheritedCompliance(sourceModule) 773710"];
1393 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 773711"];
1394 [label="param GetDeclaredOrInheritedCompliance(this) 773712"];
1395 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 773713"];
1396 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 773714"];
1397 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 773715"];
1398 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 773716"];
1399 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 773717"];
1400 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 773718"];
1401 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 773719"];
1402 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 773720"];
1403 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 773721"];
1404 [label="Compliance compliance; 773722"];
1405 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 773723"];
1406 [label="Location ignoredLocation; 773724"];
1407 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 773725"];
1408 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 773726"];
1409 [label="param GetDeclaredCompliance(out Location attributeLocation) 773727"];
1410 [label="param GetDeclaredCompliance(this) 773728"];
1411 [label="attributeLocation = null; 773729"];
1412 [label="return null; 773730"];
1413 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 773731"];
1414 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 773732"];
1415 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 773733"];
1416 [label="GetInheritedCompliance(symbol) 773734"];
1417 [label="param GetInheritedCompliance(Symbol symbol) 773735"];
1418 [label="param GetInheritedCompliance(this) 773736"];
1419 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 773737"];
1420 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 773738"];
1421 [label="System.Diagnostics.Debug.Assert((object)containing != null); 773739"];
1422 [label="System.Diagnostics.Debug.Assert((object)containing != null); 773740"];
1423 [label="return GetDeclaredOrInheritedCompliance(containing); 773741"];
1424 [label="GetDeclaredOrInheritedCompliance(containing) 773742"];
1425 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 773743"];
1426 [label="param GetDeclaredOrInheritedCompliance(this) 773744"];
1427 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 773745"];
1428 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 773746"];
1429 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 773747"];
1430 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 773748"];
1431 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 773749"];
1432 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 773750"];
1433 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 773751"];
1434 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 773752"];
1435 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 773753"];
1436 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 773754"];
1437 [label="return compliance; 773755"];
1438 [label="IsTrue(GetInheritedCompliance(symbol)) 773756"];
1439 [label="param IsTrue(Compliance compliance) 773757"];
1440 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 773758"];
1441 [label="return false; 773759"];
1442 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 773760"];
1443 [label="param IsTrue(Compliance compliance) 773761"];
1444 [label="Visit(symbol.GlobalNamespace); 773762"];
1445 [label="Visit(symbol.GlobalNamespace); 773763"];
1446 [label="param VisitNamespace(NamespaceSymbol symbol) 773764"];
1447 [label="param VisitNamespace(this) 773765"];
1448 [label="_cancellationToken.ThrowIfCancellationRequested(); 773766"];
1449 [label="if (DoNotVisit(symbol)) return; 773767"];
1450 [label="DoNotVisit(symbol) 773768"];
1451 [label="param DoNotVisit(Symbol symbol) 773769"];
1452 [label="param DoNotVisit(this) 773770"];
1453 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 773771"];
1454 [label="return false; 773772"];
1455 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 773773"];
1456 [label="GetDeclaredOrInheritedCompliance(symbol) 773774"];
1457 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 773775"];
1458 [label="param GetDeclaredOrInheritedCompliance(this) 773776"];
1459 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 773777"];
1460 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 773778"];
1461 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 773779"];
1462 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 773780"];
1463 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 773781"];
1464 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 773782"];
1465 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 773783"];
1466 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 773784"];
1467 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 773785"];
1468 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 773786"];
1469 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 773787"];
1470 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 773788"];
1471 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 773789"];
1472 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 773790"];
1473 [label="return compliance; 773791"];
1474 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 773792"];
1475 [label="param IsTrue(Compliance compliance) 773793"];
1476 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 773794"];
1477 [label="return false; 773795"];
1478 [label="ConcurrentAnalysis 773796"];
1479 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 773797"];
1480 [label="null 773798"];
1481 [label="_filterTree == null 773799"];
1482 [label="_compilation.Options 773800"];
1483 [label="get\n            {\n                return _options;\n            } 773801"];
1484 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 773802"];
1485 [label="VisitNamespaceMembersAsTasks(symbol); 773803"];
1486 [label="VisitNamespaceMembersAsTasks(symbol) 773804"];
1487 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 773805"];
1488 [label="param VisitNamespaceMembersAsTasks(this) 773806"];
1489 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 773807"];
1490 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 773808"];
1491 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 773809"];
1492 [label="VisitNamespaceMembersAsTasks(symbol); 773810"];
1493 [label="checker.WaitForWorkers() 773811"];
1494 [label="param WaitForWorkers(this) 773812"];
1495 [label="var tasks = _compilerTasks; 773813"];
1496 [label="if (tasks == null)\n            {\n                return;\n            } 773814"];
1497 [label="if (tasks == null)\n            {\n                return;\n            } 773815"];
1498 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 773816"];
1499 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 773817"];
1500 [label="curTask.GetAwaiter().GetResult(); 773818"];
1501 [label="checker.WaitForWorkers(); 773819"];
1502 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 773820"];
1503 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 773821"];
1504 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 773822"];
1505 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 773823"];
1506 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 773824"];
1507 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 773825"];
1508 [label="return _lazyClsComplianceDiagnostics; 773826"];
1509 [label="return result.AsImmutable().Concat(clsDiagnostics); 773827"];
1510 [label="return result.AsImmutable().Concat(clsDiagnostics); 773828"];
1511 [label="return result.AsImmutable().Concat(clsDiagnostics); 773829"];
1512 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 773830"];
1513 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 773831"];
1514 [label="cancellationToken.ThrowIfCancellationRequested(); 773832"];
1515 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 773833"];
1516 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 773834"];
1517 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 773835"];
1518 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 773836"];
1519 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 773837"];
1520 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 773838"];
1521 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 773839"];
1522 [label="return diagnostics.ToReadOnlyAndFree(); 773840"];
1523 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 773841"];
1524 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 773842"];
1525 [label="excludeDiagnostics?.Free(); 773843"];
1526 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 773844"];
1527 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 773845"];
1528 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 773846"];
1529 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 773847"];
1530 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 773848"];
1531 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 773849"];
1532 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 773850"];
1533 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 773851"];
1534 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 773852"];
1535 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 773853"];
1536 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 773854"];
1537 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 773855"];
1538 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 773856"];
1539 [label="param CompileMethodBodies(CSharpCompilation compilation) 773857"];
1540 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 773858"];
1541 [label="param CompileMethodBodies(bool emittingPdb) 773859"];
1542 [label="param CompileMethodBodies(bool emitTestCoverageData) 773860"];
1543 [label="param CompileMethodBodies(bool hasDeclarationErrors) 773861"];
1544 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 773862"];
1545 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 773863"];
1546 [label="param CompileMethodBodies(CancellationToken cancellationToken) 773864"];
1547 [label="Debug.Assert(compilation != null); 773865"];
1548 [label="Debug.Assert(compilation != null); 773866"];
1549 [label="Debug.Assert(diagnostics != null); 773867"];
1550 [label="Debug.Assert(diagnostics != null); 773868"];
1551 [label="compilation.PreviousSubmission 773869"];
1552 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 773870"];
1553 [label="ScriptCompilationInfo 773871"];
1554 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 773872"];
1555 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 773873"];
1556 [label="MethodSymbol entryPoint = null; 773874"];
1557 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 773875"];
1558 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 773876"];
1559 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 773877"];
1560 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 773878"];
1561 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 773879"];
1562 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 773880"];
1563 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 773881"];
1564 [label="param GetEntryPoint(CSharpCompilation compilation) 773882"];
1565 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 773883"];
1566 [label="param GetEntryPoint(bool hasDeclarationErrors) 773884"];
1567 [label="param GetEntryPoint(DiagnosticBag diagnostics) 773885"];
1568 [label="param GetEntryPoint(CancellationToken cancellationToken) 773886"];
1569 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 773887"];
1570 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 773888"];
1571 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 773889"];
1572 [label="param GetEntryPointAndDiagnostics(this) 773890"];
1573 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 773891"];
1574 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 773892"];
1575 [label="EntryPoint? entryPoint; 773893"];
1576 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 773894"];
1577 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 773895"];
1578 [label="GetBoundReferenceManager(); 773896"];
1579 [label="this.Options 773897"];
1580 [label="return _options; 773898"];
1581 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 773899"];
1582 [label="this.ScriptClass 773900"];
1583 [label="get { return _scriptClass.Value; } 773901"];
1584 [label="return _scriptClass.Value; 773902"];
1585 [label="_scriptClass.Value 773903"];
1586 [label="param BindScriptClass(this) 773904"];
1587 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 773905"];
1588 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 773906"];
1589 [label="get { return this.SourceModule.GetPublicSymbol(); } 773907"];
1590 [label="this.SourceModule 773908"];
1591 [label="get\n            {\n                return Assembly.Modules[0];\n            } 773909"];
1592 [label="GetBoundReferenceManager(); 773910"];
1593 [label="return this.SourceModule.GetPublicSymbol(); 773911"];
1594 [label="get\n            {\n                return this.SyntaxTrees;\n            } 773912"];
1595 [label="this.SyntaxTrees 773913"];
1596 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 773914"];
1597 [label="param GetLazyState(this) 773915"];
1598 [label="return this.SyntaxTrees; 773916"];
1599 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 773917"];
1600 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 773918"];
1601 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 773919"];
1602 [label="null 773920"];
1603 [label="ImmutableArray<Diagnostic>.Empty 773921"];
1604 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 773922"];
1605 [label="param EntryPoint(MethodSymbol? methodSymbol) 773923"];
1606 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 773924"];
1607 [label="param EntryPoint(this) 773925"];
1608 [label="MethodSymbol 773926"];
1609 [label="this.MethodSymbol 773927"];
1610 [label="this.Diagnostics 773928"];
1611 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 773929"];
1612 [label="entryPoint = EntryPoint.None; 773930"];
1613 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 773931"];
1614 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 773932"];
1615 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 773933"];
1616 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 773934"];
1617 [label="return _lazyEntryPoint; 773935"];
1618 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 773936"];
1619 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 773937"];
1620 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 773938"];
1621 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 773939"];
1622 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 773940"];
1623 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 773941"];
1624 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 773942"];
1625 [label="return null; 773943"];
1626 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 773944"];
1627 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 773945"];
1628 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 773946"];
1629 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 773947"];
1630 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 773948"];
1631 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 773949"];
1632 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 773950"];
1633 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 773951"];
1634 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 773952"];
1635 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 773953"];
1636 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 773954"];
1637 [label="param MethodCompiler(CSharpCompilation compilation) 773955"];
1638 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 773956"];
1639 [label="param MethodCompiler(bool emittingPdb) 773957"];
1640 [label="param MethodCompiler(bool emitTestCoverageData) 773958"];
1641 [label="param MethodCompiler(bool hasDeclarationErrors) 773959"];
1642 [label="param MethodCompiler(DiagnosticBag diagnostics) 773960"];
1643 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 773961"];
1644 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 773962"];
1645 [label="param MethodCompiler(CancellationToken cancellationToken) 773963"];
1646 [label="param MethodCompiler(this) 773964"];
1647 [label="param MethodCompiler(this) 773965"];
1648 [label="_compilation 773966"];
1649 [label="_emittingPdb 773967"];
1650 [label="_emitTestCoverageData 773968"];
1651 [label="_diagnostics 773969"];
1652 [label="_hasDeclarationErrors 773970"];
1653 [label="_moduleBeingBuiltOpt 773971"];
1654 [label="_filterOpt 773972"];
1655 [label="_debugDocumentProvider 773973"];
1656 [label="_entryPointOpt 773974"];
1657 [label="_compilerTasks 773975"];
1658 [label="_globalHasErrors 773976"];
1659 [label="Debug.Assert(compilation != null); 773977"];
1660 [label="Debug.Assert(compilation != null); 773978"];
1661 [label="Debug.Assert(diagnostics != null); 773979"];
1662 [label="Debug.Assert(diagnostics != null); 773980"];
1663 [label="_compilation 773981"];
1664 [label="_moduleBeingBuiltOpt 773982"];
1665 [label="_emittingPdb 773983"];
1666 [label="_cancellationToken 773984"];
1667 [label="_diagnostics 773985"];
1668 [label="_filterOpt 773986"];
1669 [label="_entryPointOpt 773987"];
1670 [label="_hasDeclarationErrors 773988"];
1671 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 773989"];
1672 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 773990"];
1673 [label="param SetGlobalErrorIfTrue(bool arg) 773991"];
1674 [label="param SetGlobalErrorIfTrue(this) 773992"];
1675 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 773993"];
1676 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 773994"];
1677 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 773995"];
1678 [label="_emitTestCoverageData 773996"];
1679 [label="compilation.Options 773997"];
1680 [label="get\n            {\n                return _options;\n            } 773998"];
1681 [label="return _options; 773999"];
1682 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 774000"];
1683 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 774001"];
1684 [label="methodCompiler._compilerTasks 774002"];
1685 [label="compilation.SourceModule 774003"];
1686 [label="get\n            {\n                return Assembly.Modules[0];\n            } 774004"];
1687 [label="Assembly 774005"];
1688 [label="get\n            {\n                return SourceAssembly;\n            } 774006"];
1689 [label="SourceAssembly 774007"];
1690 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 774008"];
1691 [label="GetBoundReferenceManager() 774009"];
1692 [label="param GetBoundReferenceManager(this) 774010"];
1693 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 774011"];
1694 [label="return _referenceManager; 774012"];
1695 [label="GetBoundReferenceManager(); 774013"];
1696 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 774014"];
1697 [label="return Assembly.Modules[0]; 774015"];
1698 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 774016"];
1699 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 774017"];
1700 [label="param CompileNamespace(NamespaceSymbol symbol) 774018"];
1701 [label="param CompileNamespace(this) 774019"];
1702 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 774020"];
1703 [label="s.Accept(this, null); 774021"];
1704 [label="s.Accept(this, null); 774022"];
1705 [label="s.Accept(this, null); 774023"];
1706 [label="param VisitNamedType(NamedTypeSymbol symbol) 774024"];
1707 [label="param VisitNamedType(TypeCompilationState arg) 774025"];
1708 [label="param VisitNamedType(this) 774026"];
1709 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 774027"];
1710 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 774028"];
1711 [label="PassesFilter(_filterOpt, symbol) 774029"];
1712 [label="param PassesFilter(Predicate<Symbol> filterOpt) 774030"];
1713 [label="param PassesFilter(Symbol symbol) 774031"];
1714 [label="return (filterOpt == null) || filterOpt(symbol); 774032"];
1715 [label="return (filterOpt == null) || filterOpt(symbol); 774033"];
1716 [label="arg = null; 774034"];
1717 [label="_cancellationToken.ThrowIfCancellationRequested(); 774035"];
1718 [label="_compilation.Options 774036"];
1719 [label="get\n            {\n                return _options;\n            } 774037"];
1720 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 774038"];
1721 [label="Task worker = CompileNamedTypeAsync(symbol); 774039"];
1722 [label="CompileNamedTypeAsync(symbol) 774040"];
1723 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 774041"];
1724 [label="param CompileNamedTypeAsync(this) 774042"];
1725 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 774043"];
1726 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 774044"];
1727 [label="Task worker = CompileNamedTypeAsync(symbol); 774045"];
1728 [label="_compilerTasks.Push(worker); 774046"];
1729 [label="return null; 774047"];
1730 [label="s.Accept(this, null); 774048"];
1731 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 774049"];
1732 [label="methodCompiler.WaitForWorkers() 774050"];
1733 [label="param WaitForWorkers(this) 774051"];
1734 [label="var tasks = _compilerTasks; 774052"];
1735 [label="if (tasks == null)\n            {\n                return;\n            } 774053"];
1736 [label="if (tasks == null)\n            {\n                return;\n            } 774054"];
1737 [label="Task curTask; 774055"];
1738 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 774056"];
1739 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 774057"];
1740 [label="curTask.GetAwaiter().GetResult(); 774058"];
1741 [label="methodCompiler.WaitForWorkers(); 774059"];
1742 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 774060"];
1743 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 774061"];
1744 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 774062"];
1745 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 774063"];
1746 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 774064"];
1747 [label="=> _additionalTypes 774065"];
1748 [label="_additionalTypes 774066"];
1749 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 774067"];
1750 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 774068"];
1751 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 774069"];
1752 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 774070"];
1753 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 774071"];
1754 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 774072"];
1755 [label="param CompileSynthesizedMethods(this) 774073"];
1756 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 774074"];
1757 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 774075"];
1758 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 774076"];
1759 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 774077"];
1760 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 774078"];
1761 [label="param GetEmbeddedTypes(this) 774079"];
1762 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 774080"];
1763 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 774081"];
1764 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 774082"];
1765 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 774083"];
1766 [label="param CreateEmbeddedAttributesIfNeeded(this) 774084"];
1767 [label="GetNeedsGeneratedAttributes() 774085"];
1768 [label="param GetNeedsGeneratedAttributes(this) 774086"];
1769 [label="_needsGeneratedAttributes_IsFrozen = true; 774087"];
1770 [label="_needsGeneratedAttributes_IsFrozen 774088"];
1771 [label="GetNeedsGeneratedAttributesInternal() 774089"];
1772 [label="param GetNeedsGeneratedAttributesInternal(this) 774090"];
1773 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 774091"];
1774 [label="return GetNeedsGeneratedAttributesInternal(); 774092"];
1775 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 774093"];
1776 [label="ShouldEmitNullablePublicOnlyAttribute() 774094"];
1777 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 774095"];
1778 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 774096"];
1779 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 774097"];
1780 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 774098"];
1781 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 774099"];
1782 [label="return; 774100"];
1783 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 774101"];
1784 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 774102"];
1785 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 774103"];
1786 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 774104"];
1787 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 774105"];
1788 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 774106"];
1789 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 774107"];
1790 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 774108"];
1791 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 774109"];
1792 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 774110"];
1793 [label="builder.AddIfNotNull(_lazyNullableAttribute); 774111"];
1794 [label="builder.AddIfNotNull(_lazyNullableAttribute); 774112"];
1795 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 774113"];
1796 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 774114"];
1797 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 774115"];
1798 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 774116"];
1799 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 774117"];
1800 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 774118"];
1801 [label="return builder.ToImmutableAndFree(); 774119"];
1802 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 774120"];
1803 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 774121"];
1804 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 774122"];
1805 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 774123"];
1806 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 774124"];
1807 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 774125"];
1808 [label="param CompileSynthesizedMethods(this) 774126"];
1809 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 774127"];
1810 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 774128"];
1811 [label="compilation.AnonymousTypeManager 774129"];
1812 [label="get\n            {\n                return _anonymousTypeManager;\n            } 774130"];
1813 [label="return _anonymousTypeManager; 774131"];
1814 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 774132"];
1815 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 774133"];
1816 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 774134"];
1817 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 774135"];
1818 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 774136"];
1819 [label="param GetPreviousAnonymousTypes(this) 774137"];
1820 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 774138"];
1821 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 774139"];
1822 [label="param GetNextAnonymousTypeIndex(this) 774140"];
1823 [label="return 0; 774141"];
1824 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 774142"];
1825 [label="methodCompiler.WaitForWorkers() 774143"];
1826 [label="param WaitForWorkers(this) 774144"];
1827 [label="var tasks = _compilerTasks; 774145"];
1828 [label="if (tasks == null)\n            {\n                return;\n            } 774146"];
1829 [label="if (tasks == null)\n            {\n                return;\n            } 774147"];
1830 [label="Task curTask; 774148"];
1831 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 774149"];
1832 [label="methodCompiler.WaitForWorkers(); 774150"];
1833 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 774151"];
1834 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 774152"];
1835 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 774153"];
1836 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 774154"];
1837 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 774155"];
1838 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 774156"];
1839 [label="compilation.AdditionalCodegenWarnings 774157"];
1840 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 774158"];
1841 [label="return _additionalCodegenWarnings; 774159"];
1842 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 774160"];
1843 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 774161"];
1844 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 774162"];
1845 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 774163"];
1846 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 774164"];
1847 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 774165"];
1848 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 774166"];
1849 [label="param WarnUnusedFields(CSharpCompilation compilation) 774167"];
1850 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 774168"];
1851 [label="param WarnUnusedFields(CancellationToken cancellationToken) 774169"];
1852 [label="compilation.Assembly 774170"];
1853 [label="get\n            {\n                return SourceAssembly;\n            } 774171"];
1854 [label="SourceAssembly 774172"];
1855 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 774173"];
1856 [label="GetBoundReferenceManager() 774174"];
1857 [label="param GetBoundReferenceManager(this) 774175"];
1858 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 774176"];
1859 [label="return _referenceManager; 774177"];
1860 [label="GetBoundReferenceManager(); 774178"];
1861 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 774179"];
1862 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 774180"];
1863 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 774181"];
1864 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 774182"];
1865 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 774183"];
1866 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 774184"];
1867 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 774185"];
1868 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 774186"];
1869 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 774187"];
1870 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 774188"];
1871 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 774189"];
1872 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 774190"];
1873 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 774191"];
1874 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 774192"];
1875 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 774193"];
1876 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 774194"];
1877 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 774195"];
1878 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 774196"];
1879 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 774197"];
1880 [label="param GenerateModuleInitializer(this) 774198"];
1881 [label="Debug.Assert(_declarationDiagnosticsFrozen); 774199"];
1882 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 774200"];
1883 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 774201"];
1884 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 774202"];
1885 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 774203"];
1886 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 774204"];
1887 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 774205"];
1888 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 774206"];
1889 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 774207"];
1890 [label="return true; 774208"];
1891 [label="var emitResult = compilation.Emit(stream, options: options); 774209"];
1892 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 774210"];
1893 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 774211"];
1894 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 774212"];
1895 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 774213"];
1896 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 774214"];
1897 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 774215"];
1898 [label="param GenerateResourcesAndDocumentationComments(this) 774216"];
1899 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 774217"];
1900 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 774218"];
1901 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 774219"];
1902 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 774220"];
1903 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 774221"];
1904 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 774222"];
1905 [label="SourceAssembly 774223"];
1906 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 774224"];
1907 [label="GetBoundReferenceManager() 774225"];
1908 [label="param GetBoundReferenceManager(this) 774226"];
1909 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 774227"];
1910 [label="return _referenceManager; 774228"];
1911 [label="GetBoundReferenceManager(); 774229"];
1912 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 774230"];
1913 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 774231"];
1914 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 774232"];
1915 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 774233"];
1916 [label="AddedModulesResourceNames(resourceDiagnostics) 774234"];
1917 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 774235"];
1918 [label="param AddedModulesResourceNames(this) 774236"];
1919 [label="SourceAssembly 774237"];
1920 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 774238"];
1921 [label="GetBoundReferenceManager() 774239"];
1922 [label="param GetBoundReferenceManager(this) 774240"];
1923 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 774241"];
1924 [label="return _referenceManager; 774242"];
1925 [label="GetBoundReferenceManager(); 774243"];
1926 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 774244"];
1927 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 774245"];
1928 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 774246"];
1929 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 774247"];
1930 [label="param AddedModulesResourceNames(this) 774248"];
1931 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 774249"];
1932 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 774250"];
1933 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 774251"];
1934 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 774252"];
1935 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 774253"];
1936 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 774254"];
1937 [label="cancellationToken.ThrowIfCancellationRequested(); 774255"];
1938 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 774256"];
1939 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 774257"];
1940 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 774258"];
1941 [label="new[] { '\\r\\n', '\\r', '\\n' } 774259"];
1942 [label="'\\r\\n' 774260"];
1943 [label="'\\r' 774261"];
1944 [label="'\\n' 774262"];
1945 [label="new[] { '\\r\\n', '\\r', '\\n' } 774263"];
1946 [label="new[] { '\\r\\n', '\\r', '\\n' } 774264"];
1947 [label="new[] { '\\r\\n', '\\r', '\\n' } 774265"];
1948 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 774266"];
1949 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 774267"];
1950 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 774268"];
1951 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 774269"];
1952 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 774270"];
1953 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 774271"];
1954 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 774272"];
1955 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 774273"];
1956 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 774274"];
1957 [label="param WriteDocumentationCommentXml(string? assemblyName) 774275"];
1958 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 774276"];
1959 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 774277"];
1960 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 774278"];
1961 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 774279"];
1962 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 774280"];
1963 [label="StreamWriter writer = null; 774281"];
1964 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 774282"];
1965 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 774283"];
1966 [label="compilation.SourceAssembly 774284"];
1967 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 774285"];
1968 [label="GetBoundReferenceManager() 774286"];
1969 [label="param GetBoundReferenceManager(this) 774287"];
1970 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 774288"];
1971 [label="return _referenceManager; 774289"];
1972 [label="GetBoundReferenceManager(); 774290"];
1973 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 774291"];
1974 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 774292"];
1975 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 774293"];
1976 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 774294"];
1977 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 774295"];
1978 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 774296"];
1979 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 774297"];
1980 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 774298"];
1981 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 774299"];
1982 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 774300"];
1983 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 774301"];
1984 [label="param DocumentationCommentCompiler(string assemblyName) 774302"];
1985 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 774303"];
1986 [label="param DocumentationCommentCompiler(TextWriter writer) 774304"];
1987 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 774305"];
1988 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 774306"];
1989 [label="param DocumentationCommentCompiler(bool processIncludes) 774307"];
1990 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 774308"];
1991 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 774309"];
1992 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 774310"];
1993 [label="param DocumentationCommentCompiler(this) 774311"];
1994 [label="param DocumentationCommentCompiler(this) 774312"];
1995 [label="_assemblyName 774313"];
1996 [label="_compilation 774314"];
1997 [label="_writer 774315"];
1998 [label="_filterTree 774316"];
1999 [label="_filterSpanWithinTree 774317"];
2000 [label="_processIncludes 774318"];
2001 [label="_isForSingleSymbol 774319"];
2002 [label="_diagnostics 774320"];
2003 [label="_lazyComparer 774321"];
2004 [label="_includedFileCache 774322"];
2005 [label="_indentDepth 774323"];
2006 [label="_temporaryStringBuilders 774324"];
2007 [label="_assemblyName 774325"];
2008 [label="_compilation 774326"];
2009 [label="_writer 774327"];
2010 [label="_filterTree 774328"];
2011 [label="_filterSpanWithinTree 774329"];
2012 [label="_processIncludes 774330"];
2013 [label="_isForSingleSymbol 774331"];
2014 [label="_diagnostics 774332"];
2015 [label="_cancellationToken 774333"];
2016 [label="compilation.SourceAssembly 774334"];
2017 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 774335"];
2018 [label="GetBoundReferenceManager() 774336"];
2019 [label="param GetBoundReferenceManager(this) 774337"];
2020 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 774338"];
2021 [label="return _referenceManager; 774339"];
2022 [label="GetBoundReferenceManager(); 774340"];
2023 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 774341"];
2024 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 774342"];
2025 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 774343"];
2026 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 774344"];
2027 [label="param VisitNamespace(NamespaceSymbol symbol) 774345"];
2028 [label="param VisitNamespace(this) 774346"];
2029 [label="_cancellationToken.ThrowIfCancellationRequested(); 774347"];
2030 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 774348"];
2031 [label="Debug.Assert(_assemblyName != null); 774349"];
2032 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 774350"];
2033 [label="WriteLine('<?xml version=\\'1.0\\'?>') 774351"];
2034 [label="param WriteLine(string message) 774352"];
2035 [label="param WriteLine(this) 774353"];
2036 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774354"];
2037 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774355"];
2038 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774356"];
2039 [label="WriteLine('<doc>'); 774357"];
2040 [label="WriteLine('<doc>') 774358"];
2041 [label="param WriteLine(string message) 774359"];
2042 [label="param WriteLine(this) 774360"];
2043 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774361"];
2044 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774362"];
2045 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774363"];
2046 [label="Indent() 774364"];
2047 [label="param Indent(this) 774365"];
2048 [label="_indentDepth 774366"];
2049 [label="Indent(); 774367"];
2050 [label="_compilation.Options 774368"];
2051 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 774369"];
2052 [label="WriteLine('<assembly>'); 774370"];
2053 [label="WriteLine('<assembly>') 774371"];
2054 [label="param WriteLine(string message) 774372"];
2055 [label="param WriteLine(this) 774373"];
2056 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774374"];
2057 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774375"];
2058 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774376"];
2059 [label="Indent() 774377"];
2060 [label="param Indent(this) 774378"];
2061 [label="_indentDepth 774379"];
2062 [label="Indent(); 774380"];
2063 [label="WriteLine('<name>{0}</name>', _assemblyName); 774381"];
2064 [label="WriteLine('<name>{0}</name>', _assemblyName) 774382"];
2065 [label="WriteLine('<name>{0}</name>', _assemblyName) 774383"];
2066 [label="param WriteLine(string format) 774384"];
2067 [label="param WriteLine(params object[] args) 774385"];
2068 [label="param WriteLine(this) 774386"];
2069 [label="WriteLine(string.Format(format, args)); 774387"];
2070 [label="WriteLine(string.Format(format, args)); 774388"];
2071 [label="WriteLine(string.Format(format, args)); 774389"];
2072 [label="WriteLine(string.Format(format, args)) 774390"];
2073 [label="param WriteLine(string message) 774391"];
2074 [label="param WriteLine(this) 774392"];
2075 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774393"];
2076 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774394"];
2077 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774395"];
2078 [label="WriteLine(string.Format(format, args)); 774396"];
2079 [label="Unindent() 774397"];
2080 [label="param Unindent(this) 774398"];
2081 [label="_indentDepth 774399"];
2082 [label="Debug.Assert(_indentDepth >= 0); 774400"];
2083 [label="Debug.Assert(_indentDepth >= 0); 774401"];
2084 [label="Unindent(); 774402"];
2085 [label="WriteLine('</assembly>'); 774403"];
2086 [label="WriteLine('</assembly>') 774404"];
2087 [label="param WriteLine(string message) 774405"];
2088 [label="param WriteLine(this) 774406"];
2089 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774407"];
2090 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774408"];
2091 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774409"];
2092 [label="WriteLine('<members>'); 774410"];
2093 [label="WriteLine('<members>') 774411"];
2094 [label="param WriteLine(string message) 774412"];
2095 [label="param WriteLine(this) 774413"];
2096 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774414"];
2097 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774415"];
2098 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774416"];
2099 [label="Indent() 774417"];
2100 [label="param Indent(this) 774418"];
2101 [label="_indentDepth 774419"];
2102 [label="Indent(); 774420"];
2103 [label="Debug.Assert(!_isForSingleSymbol); 774421"];
2104 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 774422"];
2105 [label="_cancellationToken.ThrowIfCancellationRequested(); 774423"];
2106 [label="s.Accept(this); 774424"];
2107 [label="s.Accept(this); 774425"];
2108 [label="s.Accept(this); 774426"];
2109 [label="param VisitNamedType(NamedTypeSymbol symbol) 774427"];
2110 [label="param VisitNamedType(this) 774428"];
2111 [label="_cancellationToken.ThrowIfCancellationRequested(); 774429"];
2112 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 774430"];
2113 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 774431"];
2114 [label="DefaultVisit(symbol); 774432"];
2115 [label="DefaultVisit(symbol) 774433"];
2116 [label="param DefaultVisit(Symbol symbol) 774434"];
2117 [label="param DefaultVisit(this) 774435"];
2118 [label="_cancellationToken.ThrowIfCancellationRequested(); 774436"];
2119 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 774437"];
2120 [label="ShouldSkip(symbol) 774438"];
2121 [label="param ShouldSkip(Symbol symbol) 774439"];
2122 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 774440"];
2123 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 774441"];
2124 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 774442"];
2125 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 774443"];
2126 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 774444"];
2127 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 774445"];
2128 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 774446"];
2129 [label="DocumentationMode maxDocumentationMode; 774447"];
2130 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 774448"];
2131 [label="docCommentNodes 774449"];
2132 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 774450"];
2133 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 774451"];
2134 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 774452"];
2135 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 774453"];
2136 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 774454"];
2137 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 774455"];
2138 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 774456"];
2139 [label="param TryGetDocumentationCommentNodes(this) 774457"];
2140 [label="maxDocumentationMode = DocumentationMode.None; 774458"];
2141 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 774459"];
2142 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 774460"];
2143 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 774461"];
2144 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 774462"];
2145 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 774463"];
2146 [label="currDocumentationMode > maxDocumentationMode 774464"];
2147 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 774465"];
2148 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 774466"];
2149 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 774467"];
2150 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 774468"];
2151 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 774469"];
2152 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 774470"];
2153 [label="return true; 774471"];
2154 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 774472"];
2155 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 774473"];
2156 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 774474"];
2157 [label="return; 774475"];
2158 [label="DefaultVisit(symbol); 774476"];
2159 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 774477"];
2160 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 774478"];
2161 [label="_cancellationToken.ThrowIfCancellationRequested(); 774479"];
2162 [label="member.Accept(this); 774480"];
2163 [label="member.Accept(this); 774481"];
2164 [label="member.Accept(this); 774482"];
2165 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 774483"];
2166 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 774484"];
2167 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 774485"];
2168 [label="DocumentationMode maxDocumentationMode; 774486"];
2169 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 774487"];
2170 [label="docCommentNodes 774488"];
2171 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 774489"];
2172 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 774490"];
2173 [label="maxDocumentationMode = DocumentationMode.None; 774491"];
2174 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 774492"];
2175 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 774493"];
2176 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 774494"];
2177 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 774495"];
2178 [label="currDocumentationMode > maxDocumentationMode 774496"];
2179 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 774497"];
2180 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 774498"];
2181 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 774499"];
2182 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 774500"];
2183 [label="return true; 774501"];
2184 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 774502"];
2185 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 774503"];
2186 [label="return; 774504"];
2187 [label="return; 774505"];
2188 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 774506"];
2189 [label="Unindent() 774507"];
2190 [label="Debug.Assert(_indentDepth >= 0); 774508"];
2191 [label="Unindent(); 774509"];
2192 [label="WriteLine('</members>'); 774510"];
2193 [label="WriteLine('</members>') 774511"];
2194 [label="param WriteLine(string message) 774512"];
2195 [label="param WriteLine(this) 774513"];
2196 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774514"];
2197 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774515"];
2198 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774516"];
2199 [label="Unindent() 774517"];
2200 [label="_indentDepth 774518"];
2201 [label="Debug.Assert(_indentDepth >= 0); 774519"];
2202 [label="Debug.Assert(_indentDepth >= 0); 774520"];
2203 [label="Unindent(); 774521"];
2204 [label="WriteLine('</doc>'); 774522"];
2205 [label="WriteLine('</doc>') 774523"];
2206 [label="param WriteLine(string message) 774524"];
2207 [label="param WriteLine(this) 774525"];
2208 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774526"];
2209 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774527"];
2210 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 774528"];
2211 [label="Debug.Assert(compiler._indentDepth == 0); 774529"];
2212 [label="Debug.Assert(compiler._indentDepth == 0); 774530"];
2213 [label="writer?.Flush(); 774531"];
2214 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 774532"];
2215 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 774533"];
2216 [label="compilation.SyntaxTrees 774534"];
2217 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 774535"];
2218 [label="_syntaxAndDeclarations.GetLazyState() 774536"];
2219 [label="param GetLazyState(this) 774537"];
2220 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 774538"];
2221 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 774539"];
2222 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 774540"];
2223 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 774541"];
2224 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 774542"];
2225 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 774543"];
2226 [label="param ReportUnprocessed(SyntaxTree tree) 774544"];
2227 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 774545"];
2228 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 774546"];
2229 [label="param ReportUnprocessed(CancellationToken cancellationToken) 774547"];
2230 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 774548"];
2231 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 774549"];
2232 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 774550"];
2233 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 774551"];
2234 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 774552"];
2235 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 774553"];
2236 [label="param ReportUnusedImports(SyntaxTree? filterTree) 774554"];
2237 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 774555"];
2238 [label="param ReportUnusedImports(CancellationToken cancellationToken) 774556"];
2239 [label="param ReportUnusedImports(this) 774557"];
2240 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 774558"];
2241 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 774559"];
2242 [label="CompleteTrees(filterTree); 774560"];
2243 [label="CompleteTrees(filterTree) 774561"];
2244 [label="param CompleteTrees(SyntaxTree? filterTree) 774562"];
2245 [label="param CompleteTrees(this) 774563"];
2246 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 774564"];
2247 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 774565"];
2248 [label="CompleteTrees(filterTree); 774566"];
2249 [label="get { return SourceAssembly.IsDelaySigned; } 774567"];
2250 [label="SourceAssembly 774568"];
2251 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 774569"];
2252 [label="GetBoundReferenceManager() 774570"];
2253 [label="param GetBoundReferenceManager(this) 774571"];
2254 [label="GetBoundReferenceManager(); 774572"];
2255 [label="SourceAssembly.IsDelaySigned 774573"];
2256 [label="get { return SourceAssembly.StrongNameKeys; } 774574"];
2257 [label="SourceAssembly 774575"];
2258 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 774576"];
2259 [label="GetBoundReferenceManager() 774577"];
2260 [label="param GetBoundReferenceManager(this) 774578"];
2261 [label="GetBoundReferenceManager(); 774579"];
2262 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 774580"];
2263 [label="param GetCorLibraryReferenceToEmit(this) 774581"];
2264 [label="CorLibrary 774582"];
2265 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 774583"];
2266 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 774584"];
2267 [label="AssemblySymbol corLibrary = CorLibrary; 774585"];
2268 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 774586"];
2269 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 774587"];
2270 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 774588"];
2271 [label="return Translate(corLibrary, context.Diagnostics); 774589"];
2272 [label="return Translate(corLibrary, context.Diagnostics); 774590"];
2273 [label="Translate(corLibrary, context.Diagnostics) 774591"];
2274 [label="param Translate(AssemblySymbol assembly) 774592"];
2275 [label="param Translate(DiagnosticBag diagnostics) 774593"];
2276 [label="param Translate(this) 774594"];
2277 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 774595"];
2278 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 774596"];
2279 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 774597"];
2280 [label="Cci.IModuleReference reference; 774598"];
2281 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 774599"];
2282 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 774600"];
2283 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 774601"];
2284 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 774602"];
2285 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 774603"];
2286 [label="new AssemblyReference(assembly) 774604"];
2287 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 774605"];
2288 [label="param AssemblyReference(this) 774606"];
2289 [label="_targetAssembly 774607"];
2290 [label="Debug.Assert((object)assemblySymbol != null); 774608"];
2291 [label="Debug.Assert((object)assemblySymbol != null); 774609"];
2292 [label="_targetAssembly 774610"];
2293 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 774611"];
2294 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 774612"];
2295 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 774613"];
2296 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 774614"];
2297 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 774615"];
2298 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 774616"];
2299 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 774617"];
2300 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 774618"];
2301 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 774619"];
2302 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 774620"];
2303 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 774621"];
2304 [label="param ValidateReferencedAssembly(this) 774622"];
2305 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 774623"];
2306 [label="asmRef.Identity 774624"];
2307 [label="=> _targetAssembly.Identity 774625"];
2308 [label="_targetAssembly.Identity 774626"];
2309 [label="AssemblyIdentity refIdentity = asmRef.Identity; 774627"];
2310 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 774628"];
2311 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 774629"];
2312 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 774630"];
2313 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 774631"];
2314 [label="var refMachine = assembly.Machine; 774632"];
2315 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 774633"];
2316 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 774634"];
2317 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 774635"];
2318 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 774636"];
2319 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 774637"];
2320 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 774638"];
2321 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 774639"];
2322 [label="return cachedAsmRef; 774640"];
2323 [label="var emitResult = compilation.Emit(stream, options: options); 774641"];
2324 [label="=> _targetAssembly.Identity 774642"];
2325 [label="_targetAssembly.Identity 774643"];
2326 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 774644"];
2327 [label="param GetAssemblyReferencesFromAddedModules(this) 774645"];
2328 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 774646"];
2329 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 774647"];
2330 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 774648"];
2331 [label="param GetAssemblyReferencesFromAddedModules(this) 774649"];
2332 [label="var emitResult = compilation.Emit(stream, options: options); 774650"];
2333 [label="param GetFiles(EmitContext context) 774651"];
2334 [label="param GetFiles(this) 774652"];
2335 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 774653"];
2336 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 774654"];
2337 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 774655"];
2338 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 774656"];
2339 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 774657"];
2340 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 774658"];
2341 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 774659"];
2342 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 774660"];
2343 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 774661"];
2344 [label="var modules = sourceAssSymbol.Modules; 774662"];
2345 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 774663"];
2346 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 774664"];
2347 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 774665"];
2348 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 774666"];
2349 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 774667"];
2350 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 774668"];
2351 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 774669"];
2352 [label="builder.Free(); 774670"];
2353 [label="return lazyFiles; 774671"];
2354 [label="var emitResult = compilation.Emit(stream, options: options); 774672"];
2355 [label="=> _embeddedTypesManagerOpt 774673"];
2356 [label="_embeddedTypesManagerOpt 774674"];
2357 [label="param GetAnonymousTypeDefinitions(EmitContext context) 774675"];
2358 [label="param GetAnonymousTypeDefinitions(this) 774676"];
2359 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 774677"];
2360 [label="Compilation.AnonymousTypeManager 774678"];
2361 [label="get\n            {\n                return _anonymousTypeManager;\n            } 774679"];
2362 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 774680"];
2363 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 774681"];
2364 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 774682"];
2365 [label="param GetAdditionalTopLevelTypeDefinitions(this) 774683"];
2366 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 774684"];
2367 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 774685"];
2368 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 774686"];
2369 [label="=> _additionalTypes 774687"];
2370 [label="_additionalTypes 774688"];
2371 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 774689"];
2372 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 774690"];
2373 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 774691"];
2374 [label="param GetEmbeddedTypeDefinitions(this) 774692"];
2375 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 774693"];
2376 [label="GetEmbeddedTypes(context.Diagnostics) 774694"];
2377 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 774695"];
2378 [label="param GetEmbeddedTypes(this) 774696"];
2379 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 774697"];
2380 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 774698"];
2381 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 774699"];
2382 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 774700"];
2383 [label="param CreateEmbeddedAttributesIfNeeded(this) 774701"];
2384 [label="GetNeedsGeneratedAttributes() 774702"];
2385 [label="param GetNeedsGeneratedAttributes(this) 774703"];
2386 [label="_needsGeneratedAttributes_IsFrozen = true; 774704"];
2387 [label="_needsGeneratedAttributes_IsFrozen 774705"];
2388 [label="GetNeedsGeneratedAttributesInternal() 774706"];
2389 [label="param GetNeedsGeneratedAttributesInternal(this) 774707"];
2390 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 774708"];
2391 [label="return GetNeedsGeneratedAttributesInternal(); 774709"];
2392 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 774710"];
2393 [label="ShouldEmitNullablePublicOnlyAttribute() 774711"];
2394 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 774712"];
2395 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 774713"];
2396 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 774714"];
2397 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 774715"];
2398 [label="return; 774716"];
2399 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 774717"];
2400 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 774718"];
2401 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 774719"];
2402 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 774720"];
2403 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 774721"];
2404 [label="builder.AddIfNotNull(_lazyNullableAttribute); 774722"];
2405 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 774723"];
2406 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 774724"];
2407 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 774725"];
2408 [label="return builder.ToImmutableAndFree(); 774726"];
2409 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 774727"];
2410 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 774728"];
2411 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 774729"];
2412 [label="param GetTopLevelSourceTypeDefinitions(this) 774730"];
2413 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 774731"];
2414 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 774732"];
2415 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 774733"];
2416 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 774734"];
2417 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 774735"];
2418 [label="var ns = namespacesToProcess.Pop(); 774736"];
2419 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 774737"];
2420 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 774738"];
2421 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 774739"];
2422 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 774740"];
2423 [label="param ShouldEmitNullableAttributes(Symbol symbol) 774741"];
2424 [label="param ShouldEmitNullableAttributes(this) 774742"];
2425 [label="RoslynDebug.Assert(symbol is object); 774743"];
2426 [label="Debug.Assert(symbol.IsDefinition); 774744"];
2427 [label="SourceModule 774745"];
2428 [label="get\n            {\n                return Assembly.Modules[0];\n            } 774746"];
2429 [label="Assembly 774747"];
2430 [label="get\n            {\n                return SourceAssembly;\n            } 774748"];
2431 [label="SourceAssembly 774749"];
2432 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 774750"];
2433 [label="GetBoundReferenceManager() 774751"];
2434 [label="param GetBoundReferenceManager(this) 774752"];
2435 [label="GetBoundReferenceManager(); 774753"];
2436 [label="return Assembly.Modules[0]; 774754"];
2437 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 774755"];
2438 [label="EmitNullablePublicOnly 774756"];
2439 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 774757"];
2440 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 774758"];
2441 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 774759"];
2442 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 774760"];
2443 [label="param SynthesizeNullableAttributeIfNecessary(this) 774761"];
2444 [label="Compilation.SourceModule 774762"];
2445 [label="get\n            {\n                return Assembly.Modules[0];\n            } 774763"];
2446 [label="Assembly 774764"];
2447 [label="SourceAssembly 774765"];
2448 [label="GetBoundReferenceManager() 774766"];
2449 [label="GetBoundReferenceManager(); 774767"];
2450 [label="return Assembly.Modules[0]; 774768"];
2451 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 774769"];
2452 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 774770"];
2453 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 774771"];
2454 [label="type.AddNullableTransforms(flagsBuilder); 774772"];
2455 [label="type.AddNullableTransforms(flagsBuilder); 774773"];
2456 [label="SynthesizedAttributeData attribute; 774774"];
2457 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 774775"];
2458 [label="attribute = null; 774776"];
2459 [label="flagsBuilder.Free(); 774777"];
2460 [label="return attribute; 774778"];
2461 [label="var emitResult = compilation.Emit(stream, options: options); 774779"];
2462 [label="Debug.Assert(symbol.IsDefinition); 774780"];
2463 [label="GetBoundReferenceManager(); 774781"];
2464 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 774782"];
2465 [label="GetBoundReferenceManager(); 774783"];
2466 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 774784"];
2467 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 774785"];
2468 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 774786"];
2469 [label="param GetSynthesizedNestedTypes(this) 774787"];
2470 [label="return null; 774788"];
2471 [label="var emitResult = compilation.Emit(stream, options: options); 774789"];
2472 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 774790"];
2473 [label="param GetSourceAssemblyAttributes(this) 774791"];
2474 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 774792"];
2475 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 774793"];
2476 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 774794"];
2477 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 774795"];
2478 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 774796"];
2479 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 774797"];
2480 [label="NamedTypeSymbol result; 774798"];
2481 [label="GetBoundReferenceManager(); 774799"];
2482 [label="Debug.Assert(result.SpecialType == specialType); 774800"];
2483 [label="SourceAssembly 774801"];
2484 [label="GetBoundReferenceManager() 774802"];
2485 [label="GetBoundReferenceManager(); 774803"];
2486 [label="GetBoundReferenceManager() 774804"];
2487 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 774805"];
2488 [label="param Translate(MethodSymbol methodSymbol) 774806"];
2489 [label="param Translate(SyntaxNode syntaxNodeOpt) 774807"];
2490 [label="param Translate(DiagnosticBag diagnostics) 774808"];
2491 [label="param Translate(BoundArgListOperator optArgList = null) 774809"];
2492 [label="param Translate(bool needDeclaration = false) 774810"];
2493 [label="param Translate(this) 774811"];
2494 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 774812"];
2495 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 774813"];
2496 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 774814"];
2497 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 774815"];
2498 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 774816"];
2499 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 774817"];
2500 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 774818"];
2501 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 774819"];
2502 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 774820"];
2503 [label="param Translate(MethodSymbol methodSymbol) 774821"];
2504 [label="param Translate(SyntaxNode syntaxNodeOpt) 774822"];
2505 [label="param Translate(DiagnosticBag diagnostics) 774823"];
2506 [label="param Translate(bool needDeclaration) 774824"];
2507 [label="param Translate(this) 774825"];
2508 [label="object reference; 774826"];
2509 [label="Cci.IMethodReference methodRef; 774827"];
2510 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 774828"];
2511 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 774829"];
2512 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 774830"];
2513 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 774831"];
2514 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 774832"];
2515 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 774833"];
2516 [label="bool typeIsGeneric = IsGenericType(container); 774834"];
2517 [label="IsGenericType(container) 774835"];
2518 [label="param IsGenericType(NamedTypeSymbol toCheck) 774836"];
2519 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 774837"];
2520 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 774838"];
2521 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 774839"];
2522 [label="toCheck = toCheck.ContainingType; 774840"];
2523 [label="return false; 774841"];
2524 [label="bool typeIsGeneric = IsGenericType(container); 774842"];
2525 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 774843"];
2526 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 774844"];
2527 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 774845"];
2528 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 774846"];
2529 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 774847"];
2530 [label="return methodSymbol.GetCciAdapter(); 774848"];
2531 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 774849"];
2532 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 774850"];
2533 [label="return unexpandedMethodRef; 774851"];
2534 [label="param Translate(TypeSymbol typeSymbol) 774852"];
2535 [label="param Translate(SyntaxNode syntaxNodeOpt) 774853"];
2536 [label="param Translate(DiagnosticBag diagnostics) 774854"];
2537 [label="param Translate(this) 774855"];
2538 [label="Debug.Assert(diagnostics != null); 774856"];
2539 [label="Debug.Assert(diagnostics != null); 774857"];
2540 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 774858"];
2541 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 774859"];
2542 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 774860"];
2543 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 774861"];
2544 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 774862"];
2545 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 774863"];
2546 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 774864"];
2547 [label="param Translate(SyntaxNode syntaxNodeOpt) 774865"];
2548 [label="param Translate(DiagnosticBag diagnostics) 774866"];
2549 [label="param Translate(bool fromImplements = false) 774867"];
2550 [label="param Translate(bool needDeclaration = false) 774868"];
2551 [label="param Translate(this) 774869"];
2552 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 774870"];
2553 [label="Debug.Assert(diagnostics != null); 774871"];
2554 [label="Debug.Assert(diagnostics != null); 774872"];
2555 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 774873"];
2556 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 774874"];
2557 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 774875"];
2558 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 774876"];
2559 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 774877"];
2560 [label="object reference; 774878"];
2561 [label="Cci.INamedTypeReference typeRef; 774879"];
2562 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 774880"];
2563 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 774881"];
2564 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 774882"];
2565 [label="IsGenericType(container) 774883"];
2566 [label="param IsGenericType(NamedTypeSymbol toCheck) 774884"];
2567 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 774885"];
2568 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 774886"];
2569 [label="return false; 774887"];
2570 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 774888"];
2571 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 774889"];
2572 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 774890"];
2573 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 774891"];
2574 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 774892"];
2575 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 774893"];
2576 [label="param Translate(SyntaxNode syntaxNodeOpt) 774894"];
2577 [label="param Translate(DiagnosticBag diagnostics) 774895"];
2578 [label="param Translate(bool fromImplements = false) 774896"];
2579 [label="param Translate(bool needDeclaration = false) 774897"];
2580 [label="param Translate(this) 774898"];
2581 [label="Debug.Assert(diagnostics != null); 774899"];
2582 [label="Debug.Assert(diagnostics != null); 774900"];
2583 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 774901"];
2584 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 774902"];
2585 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 774903"];
2586 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 774904"];
2587 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 774905"];
2588 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 774906"];
2589 [label="param Translate(ModuleSymbol module) 774907"];
2590 [label="param Translate(DiagnosticBag diagnostics) 774908"];
2591 [label="param Translate(this) 774909"];
2592 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 774910"];
2593 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 774911"];
2594 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 774912"];
2595 [label="if ((object)module == null)\n            {\n                return null;\n            } 774913"];
2596 [label="if ((object)module == null)\n            {\n                return null;\n            } 774914"];
2597 [label="Cci.IModuleReference moduleRef; 774915"];
2598 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 774916"];
2599 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 774917"];
2600 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 774918"];
2601 [label="return moduleRef; 774919"];
2602 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 774920"];
2603 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 774921"];
2604 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 774922"];
2605 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 774923"];
2606 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 774924"];
2607 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 774925"];
2608 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 774926"];
2609 [label="param Translate(this) 774927"];
2610 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 774928"];
2611 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 774929"];
2612 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 774930"];
2613 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 774931"];
2614 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 774932"];
2615 [label="MustBeWrapped(@params.First()) 774933"];
2616 [label="param MustBeWrapped(ParameterSymbol param) 774934"];
2617 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 774935"];
2618 [label="var container = param.ContainingSymbol; 774936"];
2619 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 774937"];
2620 [label="ContainerIsGeneric(container) 774938"];
2621 [label="param ContainerIsGeneric(Symbol container) 774939"];
2622 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 774940"];
2623 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 774941"];
2624 [label="IsGenericType(container.ContainingType) 774942"];
2625 [label="param IsGenericType(NamedTypeSymbol toCheck) 774943"];
2626 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 774944"];
2627 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 774945"];
2628 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 774946"];
2629 [label="toCheck = toCheck.ContainingType; 774947"];
2630 [label="return false; 774948"];
2631 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 774949"];
2632 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 774950"];
2633 [label="return false; 774951"];
2634 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 774952"];
2635 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 774953"];
2636 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 774954"];
2637 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 774955"];
2638 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 774956"];
2639 [label="param MustBeWrapped(ParameterSymbol param) 774957"];
2640 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 774958"];
2641 [label="var container = param.ContainingSymbol; 774959"];
2642 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 774960"];
2643 [label="ContainerIsGeneric(container) 774961"];
2644 [label="param ContainerIsGeneric(Symbol container) 774962"];
2645 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 774963"];
2646 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 774964"];
2647 [label="IsGenericType(container.ContainingType) 774965"];
2648 [label="param IsGenericType(NamedTypeSymbol toCheck) 774966"];
2649 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 774967"];
2650 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 774968"];
2651 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 774969"];
2652 [label="toCheck = toCheck.ContainingType; 774970"];
2653 [label="return false; 774971"];
2654 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 774972"];
2655 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 774973"];
2656 [label="return false; 774974"];
2657 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 774975"];
2658 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 774976"];
2659 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 774977"];
2660 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 774978"];
2661 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 774979"];
2662 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 774980"];
2663 [label="param Translate(SyntaxNode syntaxNodeOpt) 774981"];
2664 [label="param Translate(DiagnosticBag diagnostics) 774982"];
2665 [label="param Translate(bool fromImplements = false) 774983"];
2666 [label="param Translate(bool needDeclaration = false) 774984"];
2667 [label="Debug.Assert(diagnostics != null); 774985"];
2668 [label="Debug.Assert(diagnostics != null); 774986"];
2669 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 774987"];
2670 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 774988"];
2671 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 774989"];
2672 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 774990"];
2673 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 774991"];
2674 [label="object reference; 774992"];
2675 [label="Cci.INamedTypeReference typeRef; 774993"];
2676 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 774994"];
2677 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 774995"];
2678 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 774996"];
2679 [label="IsGenericType(container) 774997"];
2680 [label="param IsGenericType(NamedTypeSymbol toCheck) 774998"];
2681 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 774999"];
2682 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775000"];
2683 [label="return false; 775001"];
2684 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775002"];
2685 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775003"];
2686 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775004"];
2687 [label="param IsPlatformType(Cci.ITypeReference typeRef) 775005"];
2688 [label="param IsPlatformType(Cci.PlatformType platformType) 775006"];
2689 [label="param IsPlatformType(this) 775007"];
2690 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 775008"];
2691 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 775009"];
2692 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 775010"];
2693 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 775011"];
2694 [label="return namedType.SpecialType == (SpecialType)platformType; 775012"];
2695 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 775013"];
2696 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775014"];
2697 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775015"];
2698 [label="param Translate(SyntaxNode syntaxNodeOpt) 775016"];
2699 [label="param Translate(DiagnosticBag diagnostics) 775017"];
2700 [label="param Translate(bool fromImplements = false) 775018"];
2701 [label="param Translate(bool needDeclaration = false) 775019"];
2702 [label="Debug.Assert(diagnostics != null); 775020"];
2703 [label="Debug.Assert(diagnostics != null); 775021"];
2704 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775022"];
2705 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775023"];
2706 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775024"];
2707 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775025"];
2708 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775026"];
2709 [label="object reference; 775027"];
2710 [label="Cci.INamedTypeReference typeRef; 775028"];
2711 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 775029"];
2712 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775030"];
2713 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775031"];
2714 [label="IsGenericType(container) 775032"];
2715 [label="param IsGenericType(NamedTypeSymbol toCheck) 775033"];
2716 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775034"];
2717 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775035"];
2718 [label="return false; 775036"];
2719 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775037"];
2720 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775038"];
2721 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775039"];
2722 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775040"];
2723 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775041"];
2724 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775042"];
2725 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775043"];
2726 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775044"];
2727 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775045"];
2728 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 775046"];
2729 [label="param MustBeWrapped(ParameterSymbol param) 775047"];
2730 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 775048"];
2731 [label="var container = param.ContainingSymbol; 775049"];
2732 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 775050"];
2733 [label="ContainerIsGeneric(container) 775051"];
2734 [label="param ContainerIsGeneric(Symbol container) 775052"];
2735 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775053"];
2736 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775054"];
2737 [label="IsGenericType(container.ContainingType) 775055"];
2738 [label="param IsGenericType(NamedTypeSymbol toCheck) 775056"];
2739 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775057"];
2740 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775058"];
2741 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775059"];
2742 [label="toCheck = toCheck.ContainingType; 775060"];
2743 [label="return false; 775061"];
2744 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775062"];
2745 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775063"];
2746 [label="param MustBeWrapped(ParameterSymbol param) 775064"];
2747 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 775065"];
2748 [label="var container = param.ContainingSymbol; 775066"];
2749 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 775067"];
2750 [label="ContainerIsGeneric(container) 775068"];
2751 [label="param ContainerIsGeneric(Symbol container) 775069"];
2752 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775070"];
2753 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775071"];
2754 [label="IsGenericType(container.ContainingType) 775072"];
2755 [label="param IsGenericType(NamedTypeSymbol toCheck) 775073"];
2756 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775074"];
2757 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775075"];
2758 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775076"];
2759 [label="toCheck = toCheck.ContainingType; 775077"];
2760 [label="return false; 775078"];
2761 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775079"];
2762 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775080"];
2763 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 775081"];
2764 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 775082"];
2765 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 775083"];
2766 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 775084"];
2767 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 775085"];
2768 [label="bool typeIsGeneric = IsGenericType(container); 775086"];
2769 [label="IsGenericType(container) 775087"];
2770 [label="param IsGenericType(NamedTypeSymbol toCheck) 775088"];
2771 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775089"];
2772 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775090"];
2773 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775091"];
2774 [label="toCheck = toCheck.ContainingType; 775092"];
2775 [label="return false; 775093"];
2776 [label="bool typeIsGeneric = IsGenericType(container); 775094"];
2777 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 775095"];
2778 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 775096"];
2779 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 775097"];
2780 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 775098"];
2781 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775099"];
2782 [label="toCheck = toCheck.ContainingType; 775100"];
2783 [label="param GetSourceAssemblySecurityAttributes(this) 775101"];
2784 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 775102"];
2785 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 775103"];
2786 [label="return Translate(corLibrary, context.Diagnostics); 775104"];
2787 [label="param Translate(DiagnosticBag diagnostics) 775105"];
2788 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 775106"];
2789 [label="return (Cci.IAssemblyReference)reference; 775107"];
2790 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 775108"];
2791 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 775109"];
2792 [label="param GetSourceModuleAttributes(this) 775110"];
2793 [label="return SourceModule.GetCustomAttributesToEmit(this); 775111"];
2794 [label="return SourceModule.GetCustomAttributesToEmit(this); 775112"];
2795 [label="return SourceModule.GetCustomAttributesToEmit(this); 775113"];
2796 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 775114"];
2797 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 775115"];
2798 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 775116"];
2799 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 775117"];
2800 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 775118"];
2801 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 775119"];
2802 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 775120"];
2803 [label="return GetNeedsGeneratedAttributesInternal(); 775121"];
2804 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 775122"];
2805 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 775123"];
2806 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 775124"];
2807 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 775125"];
2808 [label="return; 775126"];
2809 [label="Debug.Assert(symbol.IsDefinition); 775127"];
2810 [label="GetBoundReferenceManager(); 775128"];
2811 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 775129"];
2812 [label="GetBoundReferenceManager(); 775130"];
2813 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 775131"];
2814 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 775132"];
2815 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 775133"];
2816 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 775134"];
2817 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 775135"];
2818 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 775136"];
2819 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 775137"];
2820 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 775138"];
2821 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 775139"];
2822 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 775140"];
2823 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 775141"];
2824 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 775142"];
2825 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 775143"];
2826 [label="param SynthesizeNullableAttributeIfNecessary(this) 775144"];
2827 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 775145"];
2828 [label="return null; 775146"];
2829 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775147"];
2830 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775148"];
2831 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775149"];
2832 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775150"];
2833 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775151"];
2834 [label="object reference; 775152"];
2835 [label="Cci.INamedTypeReference typeRef; 775153"];
2836 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 775154"];
2837 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775155"];
2838 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775156"];
2839 [label="IsGenericType(container) 775157"];
2840 [label="param IsGenericType(NamedTypeSymbol toCheck) 775158"];
2841 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775159"];
2842 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775160"];
2843 [label="return false; 775161"];
2844 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775162"];
2845 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775163"];
2846 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775164"];
2847 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 775165"];
2848 [label="Debug.Assert(symbol.IsDefinition); 775166"];
2849 [label="GetBoundReferenceManager(); 775167"];
2850 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 775168"];
2851 [label="GetBoundReferenceManager(); 775169"];
2852 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 775170"];
2853 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 775171"];
2854 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775172"];
2855 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775173"];
2856 [label="param Translate(SyntaxNode syntaxNodeOpt) 775174"];
2857 [label="param Translate(DiagnosticBag diagnostics) 775175"];
2858 [label="param Translate(bool fromImplements = false) 775176"];
2859 [label="param Translate(bool needDeclaration = false) 775177"];
2860 [label="Debug.Assert(diagnostics != null); 775178"];
2861 [label="Debug.Assert(diagnostics != null); 775179"];
2862 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775180"];
2863 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775181"];
2864 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775182"];
2865 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775183"];
2866 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775184"];
2867 [label="object reference; 775185"];
2868 [label="Cci.INamedTypeReference typeRef; 775186"];
2869 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 775187"];
2870 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775188"];
2871 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775189"];
2872 [label="IsGenericType(container) 775190"];
2873 [label="param IsGenericType(NamedTypeSymbol toCheck) 775191"];
2874 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775192"];
2875 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775193"];
2876 [label="return false; 775194"];
2877 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775195"];
2878 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775196"];
2879 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775197"];
2880 [label="param GetExportedTypes(DiagnosticBag diagnostics) 775198"];
2881 [label="param GetExportedTypes(this) 775199"];
2882 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 775200"];
2883 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 775201"];
2884 [label="CalculateExportedTypes() 775202"];
2885 [label="param CalculateExportedTypes(this) 775203"];
2886 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 775204"];
2887 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 775205"];
2888 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 775206"];
2889 [label="var modules = sourceAssembly.Modules; 775207"];
2890 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 775208"];
2891 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 775209"];
2892 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 775210"];
2893 [label="sourceAssembly.DeclaringCompilation.Options 775211"];
2894 [label="get\n            {\n                return _options;\n            } 775212"];
2895 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 775213"];
2896 [label="GetForwardedTypes(sourceAssembly, builder); 775214"];
2897 [label="GetForwardedTypes(sourceAssembly, builder); 775215"];
2898 [label="GetForwardedTypes(sourceAssembly, builder) 775216"];
2899 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 775217"];
2900 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 775218"];
2901 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 775219"];
2902 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 775220"];
2903 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 775221"];
2904 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 775222"];
2905 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 775223"];
2906 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 775224"];
2907 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 775225"];
2908 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 775226"];
2909 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 775227"];
2910 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 775228"];
2911 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 775229"];
2912 [label="sourceAssembly.DeclaringCompilation.Options 775230"];
2913 [label="get\n            {\n                return _options;\n            } 775231"];
2914 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 775232"];
2915 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 775233"];
2916 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 775234"];
2917 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 775235"];
2918 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 775236"];
2919 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 775237"];
2920 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 775238"];
2921 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 775239"];
2922 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 775240"];
2923 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 775241"];
2924 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 775242"];
2925 [label="return seenTopLevelForwardedTypes; 775243"];
2926 [label="GetForwardedTypes(sourceAssembly, builder); 775244"];
2927 [label="return builder.ToImmutableAndFree(); 775245"];
2928 [label="_lazyExportedTypes = CalculateExportedTypes(); 775246"];
2929 [label="_lazyExportedTypes 775247"];
2930 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 775248"];
2931 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 775249"];
2932 [label="return _lazyExportedTypes; 775250"];
2933 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 775251"];
2934 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 775252"];
2935 [label="param AddEmbeddedResourcesFromAddedModules(this) 775253"];
2936 [label="var modules = _sourceAssembly.Modules; 775254"];
2937 [label="int count = modules.Length; 775255"];
2938 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 775256"];
2939 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 775257"];
2940 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 775258"];
2941 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 775259"];
2942 [label="var emitResult = compilation.Emit(stream, options: options); 775260"];
2943 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775261"];
2944 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775262"];
2945 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775263"];
2946 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775264"];
2947 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775265"];
2948 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775266"];
2949 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 775267"];
2950 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775268"];
2951 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775269"];
2952 [label="param Translate(SyntaxNode syntaxNodeOpt) 775270"];
2953 [label="param Translate(DiagnosticBag diagnostics) 775271"];
2954 [label="param Translate(bool fromImplements = false) 775272"];
2955 [label="param Translate(bool needDeclaration = false) 775273"];
2956 [label="Debug.Assert(diagnostics != null); 775274"];
2957 [label="Debug.Assert(diagnostics != null); 775275"];
2958 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775276"];
2959 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775277"];
2960 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775278"];
2961 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775279"];
2962 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775280"];
2963 [label="object reference; 775281"];
2964 [label="Cci.INamedTypeReference typeRef; 775282"];
2965 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 775283"];
2966 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775284"];
2967 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775285"];
2968 [label="IsGenericType(container) 775286"];
2969 [label="param IsGenericType(NamedTypeSymbol toCheck) 775287"];
2970 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775288"];
2971 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775289"];
2972 [label="return false; 775290"];
2973 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775291"];
2974 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775292"];
2975 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775293"];
2976 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 775294"];
2977 [label="=> _sourceAssembly 775295"];
2978 [label="_sourceAssembly 775296"];
2979 [label="=> _metadataName 775297"];
2980 [label="_metadataName 775298"];
2981 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 775299"];
2982 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775300"];
2983 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775301"];
2984 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775302"];
2985 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775303"];
2986 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775304"];
2987 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775305"];
2988 [label="param MemberVisibility(Symbol symbol) 775306"];
2989 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 775307"];
2990 [label="return Cci.TypeMemberVisibility.Public; 775308"];
2991 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775309"];
2992 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775310"];
2993 [label="param Translate(SyntaxNode syntaxNodeOpt) 775311"];
2994 [label="param Translate(DiagnosticBag diagnostics) 775312"];
2995 [label="param Translate(bool fromImplements = false) 775313"];
2996 [label="param Translate(bool needDeclaration = false) 775314"];
2997 [label="Debug.Assert(diagnostics != null); 775315"];
2998 [label="Debug.Assert(diagnostics != null); 775316"];
2999 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775317"];
3000 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775318"];
3001 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775319"];
3002 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775320"];
3003 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775321"];
3004 [label="object reference; 775322"];
3005 [label="Cci.INamedTypeReference typeRef; 775323"];
3006 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 775324"];
3007 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775325"];
3008 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775326"];
3009 [label="IsGenericType(container) 775327"];
3010 [label="param IsGenericType(NamedTypeSymbol toCheck) 775328"];
3011 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775329"];
3012 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775330"];
3013 [label="return false; 775331"];
3014 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775332"];
3015 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775333"];
3016 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775334"];
3017 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 775335"];
3018 [label="get { return _metadataName; } 775336"];
3019 [label="return _metadataName; 775337"];
3020 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775338"];
3021 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775339"];
3022 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775340"];
3023 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775341"];
3024 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775342"];
3025 [label="object reference; 775343"];
3026 [label="Cci.INamedTypeReference typeRef; 775344"];
3027 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 775345"];
3028 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775346"];
3029 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775347"];
3030 [label="IsGenericType(container) 775348"];
3031 [label="param IsGenericType(NamedTypeSymbol toCheck) 775349"];
3032 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775350"];
3033 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775351"];
3034 [label="return false; 775352"];
3035 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775353"];
3036 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775354"];
3037 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775355"];
3038 [label="if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    } 775356"];
3039 [label="return Cci.TypeMemberVisibility.Assembly; 775357"];
3040 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 775358"];
3041 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775359"];
3042 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775360"];
3043 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775361"];
3044 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775362"];
3045 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775363"];
3046 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775364"];
3047 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 775365"];
3048 [label="GetBoundReferenceManager(); 775366"];
3049 [label="Debug.Assert(result.SpecialType == specialType); 775367"];
3050 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 775368"];
3051 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 775369"];
3052 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 775370"];
3053 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 775371"];
3054 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 775372"];
3055 [label="bool typeIsGeneric = IsGenericType(container); 775373"];
3056 [label="IsGenericType(container) 775374"];
3057 [label="param IsGenericType(NamedTypeSymbol toCheck) 775375"];
3058 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775376"];
3059 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775377"];
3060 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775378"];
3061 [label="toCheck = toCheck.ContainingType; 775379"];
3062 [label="return false; 775380"];
3063 [label="bool typeIsGeneric = IsGenericType(container); 775381"];
3064 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 775382"];
3065 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 775383"];
3066 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 775384"];
3067 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 775385"];
3068 [label="param MustBeWrapped(ParameterSymbol param) 775386"];
3069 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 775387"];
3070 [label="var container = param.ContainingSymbol; 775388"];
3071 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 775389"];
3072 [label="ContainerIsGeneric(container) 775390"];
3073 [label="param ContainerIsGeneric(Symbol container) 775391"];
3074 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775392"];
3075 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775393"];
3076 [label="IsGenericType(container.ContainingType) 775394"];
3077 [label="param IsGenericType(NamedTypeSymbol toCheck) 775395"];
3078 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775396"];
3079 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775397"];
3080 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775398"];
3081 [label="toCheck = toCheck.ContainingType; 775399"];
3082 [label="return false; 775400"];
3083 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775401"];
3084 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775402"];
3085 [label="param MustBeWrapped(ParameterSymbol param) 775403"];
3086 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 775404"];
3087 [label="var container = param.ContainingSymbol; 775405"];
3088 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 775406"];
3089 [label="ContainerIsGeneric(container) 775407"];
3090 [label="param ContainerIsGeneric(Symbol container) 775408"];
3091 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775409"];
3092 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775410"];
3093 [label="IsGenericType(container.ContainingType) 775411"];
3094 [label="param IsGenericType(NamedTypeSymbol toCheck) 775412"];
3095 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775413"];
3096 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775414"];
3097 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775415"];
3098 [label="toCheck = toCheck.ContainingType; 775416"];
3099 [label="return false; 775417"];
3100 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775418"];
3101 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775419"];
3102 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775420"];
3103 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775421"];
3104 [label="param Translate(SyntaxNode syntaxNodeOpt) 775422"];
3105 [label="param Translate(DiagnosticBag diagnostics) 775423"];
3106 [label="param Translate(bool fromImplements = false) 775424"];
3107 [label="param Translate(bool needDeclaration = false) 775425"];
3108 [label="Debug.Assert(diagnostics != null); 775426"];
3109 [label="Debug.Assert(diagnostics != null); 775427"];
3110 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775428"];
3111 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775429"];
3112 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775430"];
3113 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775431"];
3114 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775432"];
3115 [label="object reference; 775433"];
3116 [label="Cci.INamedTypeReference typeRef; 775434"];
3117 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 775435"];
3118 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775436"];
3119 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775437"];
3120 [label="IsGenericType(container) 775438"];
3121 [label="param IsGenericType(NamedTypeSymbol toCheck) 775439"];
3122 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775440"];
3123 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775441"];
3124 [label="return false; 775442"];
3125 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775443"];
3126 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775444"];
3127 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775445"];
3128 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 775446"];
3129 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 775447"];
3130 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 775448"];
3131 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 775449"];
3132 [label="GetBoundReferenceManager(); 775450"];
3133 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 775451"];
3134 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 775452"];
3135 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 775453"];
3136 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 775454"];
3137 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 775455"];
3138 [label="bool typeIsGeneric = IsGenericType(container); 775456"];
3139 [label="IsGenericType(container) 775457"];
3140 [label="param IsGenericType(NamedTypeSymbol toCheck) 775458"];
3141 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775459"];
3142 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775460"];
3143 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775461"];
3144 [label="toCheck = toCheck.ContainingType; 775462"];
3145 [label="return false; 775463"];
3146 [label="bool typeIsGeneric = IsGenericType(container); 775464"];
3147 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 775465"];
3148 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 775466"];
3149 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 775467"];
3150 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 775468"];
3151 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775469"];
3152 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775470"];
3153 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775471"];
3154 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775472"];
3155 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775473"];
3156 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775474"];
3157 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 775475"];
3158 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775476"];
3159 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 775477"];
3160 [label="param Translate(SyntaxNode syntaxNodeOpt) 775478"];
3161 [label="param Translate(DiagnosticBag diagnostics) 775479"];
3162 [label="param Translate(bool fromImplements = false) 775480"];
3163 [label="param Translate(bool needDeclaration = false) 775481"];
3164 [label="Debug.Assert(diagnostics != null); 775482"];
3165 [label="Debug.Assert(diagnostics != null); 775483"];
3166 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775484"];
3167 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 775485"];
3168 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 775486"];
3169 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775487"];
3170 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 775488"];
3171 [label="object reference; 775489"];
3172 [label="Cci.INamedTypeReference typeRef; 775490"];
3173 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 775491"];
3174 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775492"];
3175 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775493"];
3176 [label="IsGenericType(container) 775494"];
3177 [label="param IsGenericType(NamedTypeSymbol toCheck) 775495"];
3178 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775496"];
3179 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775497"];
3180 [label="return false; 775498"];
3181 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775499"];
3182 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 775500"];
3183 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 775501"];
3184 [label="param MustBeWrapped(ParameterSymbol param) 775502"];
3185 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 775503"];
3186 [label="var container = param.ContainingSymbol; 775504"];
3187 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 775505"];
3188 [label="ContainerIsGeneric(container) 775506"];
3189 [label="param ContainerIsGeneric(Symbol container) 775507"];
3190 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775508"];
3191 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775509"];
3192 [label="IsGenericType(container.ContainingType) 775510"];
3193 [label="param IsGenericType(NamedTypeSymbol toCheck) 775511"];
3194 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775512"];
3195 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775513"];
3196 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775514"];
3197 [label="toCheck = toCheck.ContainingType; 775515"];
3198 [label="return false; 775516"];
3199 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775517"];
3200 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775518"];
3201 [label="param MustBeWrapped(ParameterSymbol param) 775519"];
3202 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 775520"];
3203 [label="var container = param.ContainingSymbol; 775521"];
3204 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 775522"];
3205 [label="ContainerIsGeneric(container) 775523"];
3206 [label="param ContainerIsGeneric(Symbol container) 775524"];
3207 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775525"];
3208 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775526"];
3209 [label="IsGenericType(container.ContainingType) 775527"];
3210 [label="param IsGenericType(NamedTypeSymbol toCheck) 775528"];
3211 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775529"];
3212 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 775530"];
3213 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775531"];
3214 [label="toCheck = toCheck.ContainingType; 775532"];
3215 [label="return false; 775533"];
3216 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775534"];
3217 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 775535"];
3218 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 775536"];
3219 [label="toCheck = toCheck.ContainingType; 775537"];
3220 [label="Debug.Assert(symbol.IsDefinition); 775538"];
3221 [label="GetBoundReferenceManager(); 775539"];
3222 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 775540"];
3223 [label="GetBoundReferenceManager(); 775541"];
3224 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 775542"];
3225 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 775543"];
3226 [label="param SynthesizeNullableAttributeIfNecessary(this) 775544"];
3227 [label="GetBoundReferenceManager(); 775545"];
3228 [label="CustomAssert.True(emitResult.Success, 'Diagnostics: ' + string.Join(', ', emitResult.Diagnostics.Select(d => d.ToString()))); 775546"];
3229 [label="CustomAssert.True(emitResult.Success, 'Diagnostics: ' + string.Join(', ', emitResult.Diagnostics.Select(d => d.ToString()))); 775547"];
3230 [label="if (expectedWarnings != null)\n            {\n                emitResult.Diagnostics.Verify(expectedWarnings);\n            } 775548"];
3231 [label="if (expectedWarnings != null)\n            {\n                emitResult.Diagnostics.Verify(expectedWarnings);\n            } 775549"];
3232 [label="stream.Position = 0; 775550"];
3233 [label="stream.Position 775551"];
3234 [label="return stream; 775552"];
3235 [label="var peHeaders = new PEHeaders(compilation.EmitToStream()); 775553"];
3236 [label="var peHeaders = new PEHeaders(compilation.EmitToStream()); 775554"];
3237 [label="new[] { (byte)ILOpCode.Ldnull, (byte)ILOpCode.Throw } 775555"];
3238 [label="ThrowNull = new[] { (byte)ILOpCode.Ldnull, (byte)ILOpCode.Throw } 775556"];
3239 [label="CustomAssert.False(peHeaders.Requires64Bits()); 775557"];
3240 [label="peHeaders.Requires64Bits() 775558"];
3241 [label="param Requires64Bits(this PEHeaders headers) 775559"];
3242 [label="return headers.PEHeader != null && headers.PEHeader.Magic == PEMagic.PE32Plus\n                || headers.CoffHeader.Machine == Machine.Amd64\n                || headers.CoffHeader.Machine == Machine.IA64; 775560"];
3243 [label="return headers.PEHeader != null && headers.PEHeader.Magic == PEMagic.PE32Plus\n                || headers.CoffHeader.Machine == Machine.Amd64\n                || headers.CoffHeader.Machine == Machine.IA64; 775561"];
3244 [label="return headers.PEHeader != null && headers.PEHeader.Magic == PEMagic.PE32Plus\n                || headers.CoffHeader.Machine == Machine.Amd64\n                || headers.CoffHeader.Machine == Machine.IA64; 775562"];
3245 [label="CustomAssert.True(peHeaders.IsDll); 775563"];
3246 [label="CustomAssert.False(peHeaders.IsExe); 775564"];
3247 [label="CustomAssert.False(peHeaders.CoffHeader.Characteristics.HasFlag(Characteristics.LargeAddressAware)); 775565"];
3248 [label="CustomAssert.False(peHeaders.CoffHeader.Characteristics.HasFlag(Characteristics.LargeAddressAware)); 775566"];
3249 [label="CustomAssert.Equal(0x30, peHeaders.PEHeader.MajorLinkerVersion); 775567"];
3250 [label="CustomAssert.Equal(0x30, peHeaders.PEHeader.MajorLinkerVersion); 775568"];
3251 [label="CustomAssert.Equal(0, peHeaders.PEHeader.MinorLinkerVersion); 775569"];
3252 [label="CustomAssert.Equal(0, peHeaders.PEHeader.MinorLinkerVersion); 775570"];
3253 [label="CustomAssert.Equal(0x10000000u, peHeaders.PEHeader.ImageBase); 775571"];
3254 [label="CustomAssert.Equal(0x10000000u, peHeaders.PEHeader.ImageBase); 775572"];
3255 [label="CustomAssert.Equal(0x200, peHeaders.PEHeader.FileAlignment); 775573"];
3256 [label="CustomAssert.Equal(0x200, peHeaders.PEHeader.FileAlignment); 775574"];
3257 [label="CustomAssert.Equal(0x8540u, (ushort)peHeaders.PEHeader.DllCharacteristics); 775575"];
3258 [label="CustomAssert.Equal(0x8540u, (ushort)peHeaders.PEHeader.DllCharacteristics); 775576"];
3259 [label="CustomAssert.Equal(0x00100000u, peHeaders.PEHeader.SizeOfStackReserve); 775577"];
3260 [label="CustomAssert.Equal(0x00100000u, peHeaders.PEHeader.SizeOfStackReserve); 775578"];
3261 [label="CustomAssert.Equal(0x1000u, peHeaders.PEHeader.SizeOfStackCommit); 775579"];
3262 [label="CustomAssert.Equal(0x1000u, peHeaders.PEHeader.SizeOfStackCommit); 775580"];
3263 [label="CustomAssert.Equal(0x00100000u, peHeaders.PEHeader.SizeOfHeapReserve); 775581"];
3264 [label="CustomAssert.Equal(0x00100000u, peHeaders.PEHeader.SizeOfHeapReserve); 775582"];
3265 [label="CustomAssert.Equal(0x1000u, peHeaders.PEHeader.SizeOfHeapCommit); 775583"];
3266 [label="CustomAssert.Equal(0x1000u, peHeaders.PEHeader.SizeOfHeapCommit); 775584"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 11;
12 -> 1;
13 -> 0;
13 -> 1;
14 -> 1;
15 -> 1;
16 -> 14;
16 -> 15;
17 -> 16;
17 -> 15;
18 -> 15;
19 -> 17;
19 -> 18;
20 -> 18;
21 -> 19;
21 -> 20;
21 -> 18;
22 -> 18;
22 -> 1;
23 -> 12;
23 -> 15;
24 -> 14;
24 -> 15;
25 -> 13;
25 -> 15;
26 -> 14;
26 -> 15;
27 -> 22;
27 -> 15;
28 -> 14;
28 -> 15;
29 -> 14;
29 -> 15;
30 -> 14;
30 -> 15;
31 -> 23;
31 -> 15;
32 -> 27;
32 -> 15;
33 -> 24;
33 -> 15;
34 -> 15;
35 -> 32;
35 -> 34;
36 -> 33;
36 -> 34;
37 -> 35;
37 -> 34;
38 -> 34;
39 -> 37;
39 -> 38;
40 -> 39;
40 -> 38;
41 -> 40;
42 -> 0;
42 -> 41;
43 -> 42;
44 -> 43;
45 -> 43;
46 -> 0;
46 -> 45;
47 -> 46;
47 -> 44;
47 -> 43;
48 -> 47;
48 -> 41;
49 -> 34;
50 -> 36;
50 -> 49;
50 -> 34;
51 -> 48;
51 -> 50;
52 -> 25;
52 -> 15;
53 -> 26;
53 -> 15;
54 -> 28;
54 -> 15;
55 -> 29;
55 -> 15;
56 -> 30;
56 -> 15;
57 -> 15;
58 -> 31;
58 -> 57;
59 -> 51;
59 -> 57;
60 -> 52;
60 -> 57;
61 -> 53;
61 -> 57;
62 -> 54;
62 -> 57;
63 -> 55;
63 -> 57;
64 -> 56;
64 -> 57;
65 -> 58;
65 -> 57;
66 -> 59;
66 -> 57;
67 -> 60;
67 -> 57;
68 -> 61;
68 -> 57;
69 -> 62;
69 -> 57;
70 -> 63;
70 -> 57;
71 -> 64;
71 -> 57;
72 -> 57;
73 -> 72;
73 -> 57;
74 -> 57;
75 -> 65;
75 -> 74;
76 -> 66;
76 -> 74;
77 -> 67;
77 -> 74;
78 -> 68;
78 -> 74;
79 -> 69;
79 -> 74;
80 -> 70;
80 -> 74;
81 -> 71;
81 -> 74;
82 -> 73;
82 -> 74;
83 -> 78;
83 -> 74;
84 -> 80;
84 -> 74;
85 -> 74;
86 -> 83;
86 -> 85;
87 -> 84;
87 -> 85;
88 -> 75;
88 -> 85;
89 -> 88;
89 -> 12;
89 -> 85;
90 -> 89;
91 -> 87;
91 -> 89;
92 -> 86;
92 -> 89;
93 -> 89;
94 -> 90;
94 -> 93;
95 -> 91;
95 -> 93;
96 -> 92;
96 -> 93;
97 -> 90;
97 -> 93;
98 -> 93;
99 -> 96;
99 -> 98;
99 -> 93;
100 -> 0;
100 -> 99;
101 -> 94;
101 -> 93;
102 -> 0;
102 -> 93;
103 -> 102;
103 -> 97;
103 -> 93;
104 -> 93;
105 -> 101;
105 -> 103;
105 -> 104;
105 -> 0;
105 -> 93;
106 -> 105;
106 -> 93;
107 -> 100;
107 -> 93;
108 -> 95;
108 -> 93;
109 -> 93;
110 -> 106;
110 -> 107;
110 -> 108;
110 -> 109;
110 -> 105;
110 -> 0;
110 -> 93;
111 -> 93;
112 -> 110;
112 -> 111;
113 -> 111;
114 -> 111;
115 -> 112;
115 -> 110;
115 -> 114;
115 -> 111;
116 -> 113;
116 -> 111;
117 -> 111;
118 -> 115;
118 -> 110;
118 -> 114;
118 -> 116;
118 -> 117;
118 -> 113;
118 -> 111;
119 -> 111;
120 -> 119;
120 -> 113;
120 -> 111;
121 -> 113;
121 -> 111;
122 -> 111;
123 -> 121;
123 -> 122;
123 -> 113;
123 -> 120;
123 -> 111;
124 -> 112;
124 -> 111;
125 -> 124;
125 -> 90;
125 -> 89;
126 -> 90;
126 -> 74;
127 -> 74;
128 -> 77;
128 -> 127;
128 -> 74;
129 -> 0;
129 -> 74;
130 -> 82;
130 -> 74;
131 -> 79;
131 -> 126;
131 -> 76;
131 -> 77;
131 -> 74;
132 -> 131;
132 -> 74;
133 -> 74;
134 -> 132;
134 -> 133;
135 -> 0;
135 -> 133;
136 -> 135;
137 -> 74;
138 -> 131;
138 -> 90;
138 -> 125;
138 -> 110;
138 -> 47;
138 -> 0;
138 -> 13;
138 -> 44;
138 -> 74;
139 -> 74;
140 -> 139;
141 -> 138;
141 -> 140;
141 -> 74;
142 -> 0;
144 -> 142;
144 -> 143;
145 -> 144;
146 -> 0;
148 -> 146;
148 -> 147;
150 -> 148;
150 -> 149;
151 -> 150;
152 -> 138;
152 -> 139;
153 -> 138;
153 -> 139;
154 -> 138;
154 -> 139;
155 -> 138;
155 -> 139;
156 -> 152;
156 -> 139;
157 -> 155;
157 -> 139;
158 -> 153;
158 -> 139;
159 -> 154;
159 -> 139;
160 -> 139;
161 -> 139;
162 -> 156;
162 -> 161;
163 -> 157;
163 -> 161;
164 -> 158;
164 -> 161;
165 -> 159;
165 -> 161;
166 -> 160;
166 -> 161;
167 -> 160;
167 -> 161;
168 -> 160;
168 -> 161;
169 -> 160;
169 -> 161;
170 -> 161;
171 -> 163;
171 -> 170;
171 -> 161;
172 -> 169;
172 -> 161;
173 -> 165;
173 -> 161;
174 -> 173;
174 -> 141;
174 -> 161;
175 -> 162;
175 -> 161;
176 -> 163;
176 -> 161;
177 -> 174;
177 -> 161;
178 -> 166;
178 -> 161;
179 -> 167;
179 -> 161;
180 -> 168;
180 -> 161;
181 -> 169;
181 -> 161;
182 -> 161;
183 -> 0;
183 -> 161;
184 -> 163;
184 -> 174;
184 -> 161;
185 -> 161;
186 -> 183;
186 -> 185;
187 -> 184;
187 -> 185;
188 -> 184;
188 -> 185;
189 -> 183;
189 -> 185;
190 -> 181;
190 -> 185;
191 -> 182;
191 -> 185;
192 -> 182;
192 -> 185;
193 -> 186;
193 -> 185;
194 -> 187;
194 -> 185;
195 -> 188;
195 -> 185;
196 -> 189;
196 -> 185;
197 -> 190;
197 -> 185;
198 -> 185;
199 -> 198;
199 -> 193;
199 -> 194;
199 -> 195;
199 -> 196;
199 -> 197;
199 -> 0;
199 -> 174;
199 -> 185;
200 -> 198;
200 -> 185;
201 -> 191;
201 -> 198;
201 -> 185;
202 -> 161;
203 -> 175;
203 -> 202;
204 -> 176;
204 -> 202;
205 -> 177;
205 -> 202;
206 -> 178;
206 -> 202;
207 -> 179;
207 -> 202;
208 -> 180;
208 -> 202;
209 -> 181;
209 -> 202;
210 -> 182;
210 -> 202;
211 -> 182;
211 -> 202;
212 -> 182;
212 -> 202;
213 -> 182;
213 -> 202;
214 -> 182;
214 -> 202;
215 -> 182;
215 -> 202;
216 -> 203;
216 -> 202;
217 -> 204;
217 -> 202;
218 -> 205;
218 -> 202;
219 -> 206;
219 -> 202;
220 -> 207;
220 -> 202;
221 -> 208;
221 -> 202;
222 -> 209;
222 -> 202;
223 -> 210;
223 -> 202;
224 -> 211;
224 -> 202;
225 -> 212;
225 -> 202;
226 -> 212;
226 -> 199;
226 -> 202;
227 -> 226;
227 -> 199;
227 -> 200;
227 -> 201;
227 -> 202;
228 -> 213;
228 -> 202;
229 -> 214;
229 -> 202;
230 -> 202;
231 -> 216;
231 -> 230;
232 -> 217;
232 -> 230;
233 -> 218;
233 -> 230;
234 -> 219;
234 -> 230;
235 -> 220;
235 -> 230;
236 -> 221;
236 -> 230;
237 -> 222;
237 -> 230;
238 -> 223;
238 -> 230;
239 -> 224;
239 -> 230;
240 -> 225;
240 -> 230;
241 -> 227;
241 -> 230;
242 -> 228;
242 -> 230;
243 -> 229;
243 -> 230;
244 -> 215;
244 -> 230;
245 -> 231;
245 -> 230;
246 -> 233;
246 -> 230;
247 -> 241;
247 -> 230;
248 -> 237;
248 -> 230;
249 -> 242;
249 -> 230;
250 -> 243;
250 -> 230;
251 -> 230;
252 -> 251;
252 -> 245;
252 -> 246;
252 -> 247;
252 -> 248;
252 -> 249;
252 -> 250;
252 -> 174;
252 -> 227;
252 -> 230;
253 -> 251;
253 -> 230;
254 -> 251;
254 -> 230;
255 -> 251;
255 -> 230;
256 -> 251;
256 -> 230;
257 -> 251;
257 -> 230;
258 -> 251;
258 -> 230;
259 -> 251;
259 -> 230;
260 -> 251;
260 -> 230;
261 -> 251;
261 -> 230;
262 -> 251;
262 -> 230;
263 -> 251;
263 -> 230;
264 -> 251;
264 -> 230;
265 -> 251;
265 -> 230;
266 -> 251;
266 -> 230;
267 -> 251;
267 -> 230;
268 -> 251;
268 -> 230;
269 -> 251;
269 -> 230;
270 -> 251;
270 -> 230;
271 -> 251;
271 -> 230;
272 -> 251;
272 -> 230;
273 -> 251;
273 -> 230;
274 -> 251;
274 -> 230;
275 -> 251;
275 -> 230;
276 -> 251;
276 -> 230;
277 -> 251;
277 -> 230;
278 -> 251;
278 -> 230;
279 -> 230;
280 -> 279;
280 -> 251;
280 -> 230;
281 -> 251;
281 -> 230;
282 -> 281;
282 -> 252;
282 -> 253;
282 -> 254;
282 -> 255;
282 -> 256;
282 -> 257;
282 -> 258;
282 -> 259;
282 -> 260;
282 -> 261;
282 -> 262;
282 -> 263;
282 -> 264;
282 -> 265;
282 -> 266;
282 -> 267;
282 -> 268;
282 -> 269;
282 -> 270;
282 -> 271;
282 -> 272;
282 -> 273;
282 -> 274;
282 -> 275;
282 -> 276;
282 -> 277;
282 -> 278;
282 -> 280;
282 -> 279;
282 -> 230;
283 -> 282;
283 -> 251;
283 -> 230;
284 -> 232;
284 -> 251;
284 -> 230;
285 -> 251;
285 -> 230;
286 -> 230;
287 -> 230;
288 -> 285;
288 -> 287;
289 -> 286;
289 -> 287;
290 -> 289;
290 -> 287;
291 -> 289;
291 -> 287;
292 -> 289;
292 -> 287;
293 -> 288;
293 -> 289;
293 -> 287;
294 -> 286;
294 -> 251;
294 -> 230;
295 -> 251;
295 -> 282;
295 -> 230;
296 -> 295;
296 -> 282;
296 -> 283;
296 -> 284;
296 -> 294;
296 -> 293;
296 -> 291;
296 -> 292;
296 -> 230;
297 -> 296;
297 -> 251;
297 -> 230;
298 -> 251;
298 -> 296;
298 -> 230;
299 -> 298;
299 -> 296;
299 -> 297;
299 -> 230;
300 -> 299;
300 -> 251;
300 -> 230;
301 -> 251;
301 -> 299;
301 -> 230;
302 -> 301;
302 -> 299;
302 -> 300;
302 -> 230;
303 -> 302;
303 -> 251;
303 -> 230;
304 -> 251;
304 -> 302;
304 -> 230;
305 -> 304;
305 -> 302;
305 -> 303;
305 -> 230;
306 -> 305;
306 -> 251;
306 -> 230;
307 -> 251;
307 -> 230;
308 -> 307;
308 -> 305;
308 -> 306;
308 -> 230;
309 -> 308;
309 -> 251;
309 -> 230;
310 -> 240;
310 -> 308;
310 -> 230;
311 -> 230;
312 -> 310;
312 -> 311;
313 -> 311;
314 -> 312;
314 -> 311;
315 -> 314;
315 -> 308;
315 -> 309;
315 -> 311;
316 -> 0;
316 -> 311;
317 -> 316;
317 -> 313;
317 -> 311;
318 -> 317;
318 -> 230;
319 -> 318;
319 -> 251;
319 -> 230;
320 -> 237;
320 -> 230;
321 -> 320;
322 -> 234;
322 -> 321;
322 -> 320;
323 -> 235;
323 -> 321;
323 -> 320;
324 -> 322;
324 -> 323;
324 -> 320;
325 -> 236;
325 -> 321;
325 -> 320;
326 -> 324;
326 -> 325;
326 -> 320;
327 -> 239;
327 -> 230;
328 -> 251;
328 -> 308;
328 -> 309;
328 -> 319;
328 -> 327;
329 -> 327;
330 -> 251;
330 -> 329;
331 -> 330;
331 -> 328;
331 -> 329;
332 -> 238;
332 -> 327;
333 -> 328;
333 -> 331;
333 -> 332;
333 -> 327;
334 -> 333;
334 -> 251;
334 -> 327;
335 -> 240;
335 -> 251;
335 -> 230;
336 -> 251;
336 -> 333;
336 -> 230;
337 -> 230;
338 -> 251;
338 -> 333;
338 -> 337;
338 -> 230;
339 -> 161;
340 -> 164;
340 -> 339;
340 -> 161;
341 -> 164;
341 -> 340;
342 -> 340;
343 -> 341;
343 -> 342;
344 -> 182;
344 -> 342;
345 -> 342;
346 -> 343;
346 -> 345;
346 -> 342;
347 -> 343;
347 -> 342;
348 -> 347;
348 -> 333;
348 -> 334;
348 -> 335;
348 -> 342;
349 -> 342;
350 -> 344;
350 -> 348;
350 -> 342;
351 -> 349;
351 -> 342;
352 -> 350;
352 -> 348;
352 -> 342;
353 -> 351;
353 -> 352;
353 -> 349;
353 -> 348;
353 -> 342;
354 -> 342;
355 -> 342;
356 -> 343;
356 -> 342;
357 -> 356;
357 -> 353;
357 -> 342;
358 -> 357;
359 -> 357;
360 -> 357;
361 -> 344;
361 -> 360;
361 -> 357;
362 -> 357;
363 -> 349;
363 -> 362;
363 -> 360;
363 -> 357;
364 -> 354;
364 -> 357;
364 -> 363;
365 -> 355;
365 -> 357;
366 -> 349;
366 -> 363;
366 -> 342;
367 -> 344;
367 -> 366;
367 -> 342;
368 -> 343;
368 -> 342;
369 -> 342;
370 -> 368;
370 -> 369;
371 -> 350;
371 -> 369;
372 -> 371;
372 -> 366;
372 -> 369;
373 -> 371;
373 -> 366;
373 -> 369;
374 -> 371;
374 -> 366;
374 -> 369;
375 -> 371;
375 -> 366;
375 -> 369;
376 -> 371;
376 -> 366;
376 -> 369;
377 -> 370;
377 -> 369;
378 -> 371;
378 -> 366;
378 -> 377;
378 -> 369;
379 -> 369;
380 -> 376;
380 -> 379;
380 -> 369;
381 -> 378;
381 -> 380;
382 -> 380;
383 -> 381;
383 -> 382;
384 -> 371;
384 -> 382;
385 -> 383;
385 -> 382;
386 -> 384;
386 -> 378;
386 -> 382;
387 -> 382;
388 -> 382;
389 -> 385;
389 -> 388;
390 -> 386;
390 -> 388;
391 -> 386;
391 -> 388;
392 -> 386;
392 -> 388;
393 -> 386;
393 -> 388;
394 -> 387;
394 -> 388;
395 -> 387;
395 -> 388;
396 -> 388;
396 -> 389;
396 -> 390;
396 -> 391;
396 -> 392;
396 -> 393;
396 -> 378;
397 -> 387;
397 -> 380;
398 -> 397;
398 -> 342;
399 -> 344;
399 -> 396;
399 -> 342;
400 -> 364;
400 -> 342;
401 -> 398;
401 -> 342;
402 -> 342;
403 -> 399;
403 -> 402;
404 -> 400;
404 -> 402;
405 -> 401;
405 -> 402;
406 -> 344;
406 -> 402;
407 -> 406;
407 -> 396;
407 -> 402;
408 -> 402;
409 -> 406;
409 -> 408;
410 -> 409;
410 -> 396;
410 -> 408;
411 -> 410;
411 -> 408;
412 -> 411;
412 -> 402;
413 -> 406;
413 -> 396;
413 -> 388;
413 -> 394;
413 -> 402;
414 -> 402;
415 -> 413;
415 -> 414;
416 -> 415;
416 -> 413;
416 -> 414;
417 -> 402;
418 -> 416;
418 -> 417;
419 -> 403;
419 -> 402;
420 -> 404;
420 -> 402;
421 -> 405;
421 -> 402;
422 -> 402;
423 -> 402;
424 -> 407;
424 -> 423;
425 -> 407;
425 -> 423;
426 -> 407;
426 -> 423;
427 -> 412;
427 -> 423;
428 -> 416;
428 -> 423;
429 -> 418;
429 -> 423;
430 -> 418;
430 -> 423;
431 -> 419;
431 -> 423;
432 -> 420;
432 -> 423;
433 -> 421;
433 -> 423;
434 -> 418;
434 -> 423;
435 -> 422;
435 -> 423;
436 -> 422;
436 -> 423;
437 -> 427;
437 -> 423;
438 -> 428;
438 -> 423;
439 -> 429;
439 -> 423;
440 -> 433;
440 -> 418;
440 -> 423;
441 -> 435;
441 -> 423;
442 -> 423;
443 -> 437;
443 -> 442;
444 -> 438;
444 -> 442;
445 -> 439;
445 -> 442;
446 -> 441;
446 -> 442;
447 -> 436;
447 -> 442;
448 -> 446;
448 -> 442;
449 -> 442;
450 -> 449;
450 -> 442;
451 -> 449;
451 -> 442;
452 -> 449;
452 -> 442;
453 -> 449;
453 -> 442;
454 -> 449;
454 -> 442;
455 -> 449;
455 -> 442;
456 -> 449;
456 -> 442;
457 -> 449;
457 -> 442;
458 -> 449;
458 -> 442;
459 -> 449;
459 -> 442;
460 -> 449;
460 -> 442;
461 -> 449;
461 -> 442;
462 -> 449;
462 -> 442;
463 -> 449;
463 -> 442;
464 -> 449;
464 -> 442;
465 -> 449;
465 -> 442;
466 -> 449;
466 -> 442;
467 -> 449;
467 -> 442;
468 -> 449;
468 -> 442;
469 -> 449;
469 -> 442;
470 -> 449;
470 -> 442;
471 -> 449;
471 -> 442;
472 -> 449;
472 -> 442;
473 -> 449;
473 -> 442;
474 -> 449;
474 -> 442;
475 -> 449;
475 -> 442;
476 -> 442;
477 -> 476;
477 -> 449;
477 -> 442;
478 -> 449;
478 -> 442;
479 -> 449;
479 -> 442;
480 -> 442;
481 -> 442;
482 -> 479;
482 -> 481;
483 -> 480;
483 -> 481;
484 -> 483;
484 -> 481;
485 -> 483;
485 -> 481;
486 -> 483;
486 -> 481;
487 -> 482;
487 -> 483;
487 -> 481;
488 -> 480;
488 -> 449;
488 -> 442;
489 -> 449;
489 -> 442;
490 -> 442;
491 -> 440;
491 -> 490;
492 -> 490;
493 -> 491;
493 -> 490;
494 -> 493;
494 -> 440;
495 -> 493;
496 -> 494;
496 -> 495;
497 -> 430;
497 -> 442;
498 -> 497;
499 -> 443;
499 -> 498;
499 -> 497;
500 -> 444;
500 -> 498;
500 -> 497;
501 -> 499;
501 -> 500;
501 -> 497;
502 -> 445;
502 -> 498;
502 -> 497;
503 -> 501;
503 -> 502;
503 -> 497;
504 -> 431;
504 -> 432;
505 -> 449;
505 -> 432;
506 -> 431;
506 -> 505;
506 -> 440;
506 -> 496;
506 -> 432;
507 -> 431;
507 -> 449;
507 -> 432;
508 -> 449;
508 -> 506;
508 -> 442;
509 -> 442;
510 -> 449;
510 -> 506;
510 -> 509;
510 -> 442;
511 -> 422;
511 -> 342;
512 -> 511;
512 -> 340;
513 -> 512;
513 -> 506;
513 -> 161;
514 -> 512;
514 -> 161;
515 -> 138;
515 -> 514;
515 -> 506;
515 -> 507;
515 -> 433;
515 -> 74;
516 -> 515;
516 -> 74;
517 -> 74;
518 -> 516;
518 -> 517;
519 -> 517;
520 -> 518;
520 -> 519;
521 -> 519;
522 -> 520;
522 -> 515;
522 -> 521;
523 -> 521;
524 -> 522;
524 -> 515;
524 -> 523;
524 -> 521;
525 -> 522;
525 -> 515;
525 -> 524;
526 -> 524;
527 -> 525;
527 -> 526;
528 -> 525;
528 -> 526;
529 -> 525;
529 -> 526;
530 -> 525;
530 -> 526;
531 -> 525;
531 -> 526;
532 -> 526;
533 -> 526;
534 -> 526;
535 -> 526;
536 -> 526;
537 -> 0;
537 -> 526;
538 -> 527;
538 -> 526;
539 -> 532;
539 -> 538;
540 -> 538;
541 -> 528;
541 -> 538;
542 -> 529;
542 -> 538;
543 -> 530;
543 -> 538;
544 -> 531;
544 -> 538;
545 -> 533;
545 -> 538;
546 -> 534;
546 -> 538;
547 -> 535;
547 -> 538;
548 -> 536;
548 -> 538;
549 -> 537;
549 -> 538;
550 -> 538;
551 -> 539;
551 -> 550;
552 -> 540;
552 -> 550;
553 -> 541;
553 -> 550;
554 -> 542;
554 -> 550;
555 -> 543;
555 -> 550;
556 -> 544;
556 -> 550;
557 -> 545;
557 -> 550;
558 -> 546;
558 -> 550;
559 -> 547;
559 -> 550;
560 -> 548;
560 -> 550;
561 -> 549;
561 -> 550;
562 -> 552;
562 -> 515;
562 -> 550;
563 -> 562;
563 -> 0;
563 -> 550;
564 -> 552;
564 -> 550;
565 -> 553;
565 -> 550;
566 -> 556;
566 -> 550;
567 -> 560;
567 -> 550;
568 -> 561;
568 -> 550;
569 -> 550;
570 -> 564;
570 -> 569;
571 -> 565;
571 -> 569;
572 -> 566;
572 -> 569;
573 -> 567;
573 -> 569;
574 -> 568;
574 -> 569;
575 -> 570;
575 -> 571;
575 -> 572;
575 -> 569;
576 -> 570;
576 -> 569;
577 -> 575;
577 -> 569;
578 -> 573;
578 -> 576;
578 -> 577;
578 -> 536;
578 -> 575;
578 -> 569;
579 -> 575;
579 -> 569;
580 -> 574;
580 -> 579;
580 -> 0;
580 -> 578;
580 -> 569;
581 -> 550;
582 -> 552;
582 -> 550;
583 -> 551;
583 -> 582;
583 -> 532;
583 -> 580;
583 -> 550;
584 -> 552;
584 -> 550;
585 -> 557;
585 -> 533;
585 -> 550;
586 -> 557;
586 -> 584;
586 -> 585;
586 -> 533;
586 -> 583;
586 -> 550;
587 -> 532;
587 -> 586;
587 -> 526;
588 -> 533;
588 -> 586;
588 -> 526;
589 -> 534;
589 -> 526;
590 -> 535;
590 -> 526;
591 -> 580;
591 -> 526;
592 -> 526;
593 -> 526;
594 -> 587;
594 -> 593;
595 -> 588;
595 -> 593;
596 -> 589;
596 -> 593;
597 -> 590;
597 -> 593;
598 -> 588;
598 -> 593;
599 -> 591;
599 -> 593;
600 -> 592;
600 -> 593;
601 -> 600;
601 -> 593;
602 -> 600;
602 -> 593;
603 -> 600;
603 -> 593;
604 -> 600;
604 -> 593;
605 -> 600;
605 -> 593;
606 -> 594;
606 -> 593;
607 -> 594;
607 -> 587;
607 -> 593;
608 -> 594;
608 -> 593;
609 -> 598;
609 -> 606;
609 -> 593;
610 -> 0;
610 -> 593;
611 -> 594;
611 -> 600;
611 -> 593;
612 -> 595;
612 -> 600;
612 -> 593;
613 -> 596;
613 -> 600;
613 -> 593;
614 -> 597;
614 -> 600;
614 -> 593;
615 -> 598;
615 -> 600;
615 -> 593;
616 -> 599;
616 -> 600;
616 -> 593;
617 -> 592;
617 -> 524;
618 -> 524;
619 -> 525;
619 -> 617;
619 -> 618;
619 -> 612;
619 -> 613;
619 -> 614;
619 -> 615;
619 -> 616;
619 -> 611;
619 -> 609;
619 -> 587;
619 -> 589;
619 -> 590;
619 -> 524;
620 -> 522;
620 -> 619;
620 -> 521;
621 -> 620;
621 -> 519;
622 -> 621;
622 -> 517;
623 -> 622;
623 -> 619;
623 -> 517;
624 -> 517;
625 -> 622;
625 -> 624;
625 -> 619;
625 -> 517;
626 -> 0;
626 -> 517;
627 -> 625;
627 -> 626;
627 -> 517;
628 -> 81;
628 -> 627;
628 -> 74;
629 -> 515;
629 -> 74;
630 -> 629;
630 -> 1;
631 -> 1;
632 -> 1;
633 -> 630;
633 -> 632;
634 -> 631;
634 -> 632;
635 -> 631;
635 -> 632;
636 -> 632;
637 -> 636;
637 -> 632;
638 -> 634;
638 -> 632;
639 -> 632;
640 -> 637;
640 -> 639;
640 -> 638;
640 -> 633;
640 -> 636;
640 -> 627;
640 -> 632;
641 -> 640;
641 -> 639;
642 -> 641;
642 -> 640;
642 -> 639;
643 -> 640;
643 -> 639;
644 -> 643;
644 -> 642;
644 -> 639;
645 -> 640;
645 -> 639;
646 -> 640;
646 -> 639;
647 -> 640;
647 -> 639;
648 -> 640;
648 -> 639;
649 -> 640;
649 -> 639;
650 -> 640;
650 -> 639;
651 -> 640;
651 -> 639;
652 -> 640;
652 -> 639;
653 -> 640;
653 -> 639;
654 -> 653;
654 -> 644;
654 -> 639;
655 -> 645;
655 -> 639;
656 -> 651;
656 -> 639;
657 -> 639;
658 -> 655;
658 -> 657;
659 -> 656;
659 -> 657;
660 -> 653;
660 -> 657;
661 -> 658;
661 -> 657;
662 -> 657;
663 -> 661;
663 -> 662;
664 -> 660;
664 -> 662;
665 -> 662;
666 -> 664;
666 -> 665;
667 -> 665;
668 -> 666;
668 -> 667;
669 -> 667;
670 -> 668;
670 -> 669;
671 -> 670;
671 -> 644;
671 -> 669;
672 -> 670;
672 -> 671;
673 -> 671;
674 -> 672;
674 -> 673;
675 -> 673;
676 -> 674;
676 -> 675;
677 -> 675;
678 -> 676;
678 -> 672;
678 -> 677;
679 -> 678;
679 -> 675;
680 -> 679;
680 -> 673;
681 -> 672;
681 -> 673;
682 -> 673;
683 -> 670;
683 -> 680;
683 -> 671;
684 -> 670;
684 -> 680;
684 -> 669;
685 -> 684;
685 -> 667;
686 -> 668;
686 -> 680;
686 -> 667;
687 -> 668;
687 -> 686;
687 -> 667;
688 -> 687;
688 -> 665;
689 -> 688;
689 -> 662;
690 -> 689;
690 -> 662;
691 -> 689;
691 -> 686;
691 -> 690;
692 -> 691;
692 -> 657;
693 -> 657;
694 -> 692;
694 -> 693;
694 -> 657;
695 -> 692;
695 -> 694;
696 -> 695;
696 -> 639;
697 -> 639;
698 -> 696;
698 -> 697;
698 -> 639;
699 -> 645;
699 -> 639;
700 -> 696;
700 -> 639;
701 -> 639;
702 -> 699;
702 -> 700;
702 -> 701;
702 -> 653;
702 -> 686;
702 -> 639;
703 -> 702;
703 -> 701;
704 -> 701;
705 -> 703;
705 -> 704;
706 -> 704;
707 -> 705;
707 -> 702;
707 -> 706;
708 -> 707;
708 -> 704;
709 -> 705;
709 -> 701;
710 -> 701;
711 -> 709;
711 -> 710;
712 -> 709;
712 -> 710;
713 -> 710;
714 -> 712;
714 -> 713;
715 -> 713;
716 -> 715;
717 -> 714;
717 -> 710;
718 -> 712;
718 -> 710;
719 -> 710;
720 -> 719;
721 -> 720;
722 -> 702;
722 -> 701;
723 -> 701;
724 -> 722;
724 -> 723;
725 -> 723;
726 -> 724;
726 -> 717;
726 -> 725;
727 -> 724;
727 -> 717;
727 -> 725;
728 -> 727;
728 -> 723;
729 -> 724;
729 -> 717;
729 -> 723;
730 -> 729;
730 -> 701;
731 -> 701;
732 -> 730;
732 -> 731;
733 -> 702;
733 -> 701;
734 -> 701;
735 -> 702;
735 -> 734;
735 -> 732;
735 -> 639;
736 -> 639;
737 -> 649;
737 -> 736;
737 -> 639;
738 -> 737;
739 -> 639;
740 -> 653;
740 -> 735;
740 -> 639;
741 -> 653;
741 -> 735;
741 -> 740;
742 -> 741;
742 -> 740;
743 -> 653;
743 -> 735;
743 -> 742;
744 -> 740;
745 -> 744;
745 -> 735;
746 -> 745;
746 -> 744;
747 -> 744;
747 -> 735;
747 -> 743;
748 -> 747;
748 -> 740;
749 -> 645;
749 -> 740;
750 -> 743;
750 -> 740;
751 -> 735;
751 -> 740;
752 -> 738;
752 -> 740;
753 -> 740;
754 -> 740;
755 -> 748;
755 -> 754;
756 -> 749;
756 -> 754;
757 -> 750;
757 -> 754;
758 -> 751;
758 -> 754;
759 -> 752;
759 -> 754;
760 -> 753;
760 -> 754;
761 -> 755;
761 -> 754;
762 -> 756;
762 -> 754;
763 -> 757;
763 -> 754;
764 -> 758;
764 -> 754;
765 -> 759;
765 -> 754;
766 -> 0;
766 -> 754;
767 -> 754;
768 -> 761;
768 -> 767;
769 -> 762;
769 -> 767;
770 -> 763;
770 -> 767;
771 -> 764;
771 -> 767;
772 -> 765;
772 -> 767;
773 -> 766;
773 -> 767;
774 -> 760;
774 -> 767;
775 -> 767;
776 -> 768;
776 -> 747;
776 -> 775;
776 -> 767;
777 -> 769;
777 -> 767;
778 -> 770;
778 -> 767;
779 -> 771;
779 -> 767;
780 -> 772;
780 -> 767;
781 -> 767;
782 -> 776;
782 -> 781;
783 -> 777;
783 -> 781;
784 -> 778;
784 -> 781;
785 -> 779;
785 -> 781;
786 -> 780;
786 -> 781;
787 -> 774;
787 -> 781;
788 -> 782;
788 -> 776;
788 -> 781;
789 -> 782;
789 -> 781;
790 -> 785;
790 -> 781;
791 -> 786;
791 -> 781;
792 -> 784;
792 -> 781;
793 -> 783;
793 -> 781;
794 -> 781;
795 -> 794;
796 -> 781;
797 -> 796;
797 -> 788;
797 -> 789;
797 -> 790;
797 -> 791;
797 -> 792;
797 -> 793;
797 -> 794;
797 -> 776;
797 -> 738;
797 -> 795;
797 -> 781;
798 -> 797;
798 -> 796;
799 -> 796;
800 -> 797;
800 -> 799;
800 -> 781;
801 -> 781;
802 -> 801;
802 -> 796;
802 -> 781;
803 -> 0;
803 -> 781;
804 -> 803;
804 -> 0;
804 -> 781;
805 -> 804;
805 -> 796;
805 -> 781;
806 -> 781;
807 -> 806;
807 -> 796;
807 -> 781;
808 -> 796;
808 -> 781;
809 -> 796;
809 -> 781;
810 -> 796;
810 -> 781;
811 -> 796;
811 -> 781;
812 -> 796;
812 -> 781;
813 -> 782;
813 -> 800;
813 -> 781;
814 -> 813;
814 -> 0;
814 -> 781;
815 -> 814;
815 -> 781;
816 -> 815;
816 -> 796;
816 -> 781;
817 -> 796;
817 -> 800;
817 -> 802;
817 -> 781;
818 -> 782;
818 -> 781;
819 -> 796;
819 -> 781;
820 -> 817;
820 -> 818;
820 -> 819;
820 -> 800;
820 -> 802;
820 -> 805;
820 -> 807;
820 -> 808;
820 -> 809;
820 -> 816;
820 -> 810;
820 -> 811;
820 -> 812;
820 -> 801;
820 -> 804;
820 -> 806;
820 -> 781;
821 -> 782;
821 -> 820;
821 -> 781;
822 -> 774;
822 -> 767;
823 -> 774;
823 -> 767;
824 -> 774;
824 -> 767;
825 -> 774;
825 -> 767;
826 -> 774;
826 -> 767;
827 -> 774;
827 -> 767;
828 -> 774;
828 -> 767;
829 -> 774;
829 -> 767;
830 -> 774;
830 -> 767;
831 -> 774;
831 -> 767;
832 -> 768;
832 -> 767;
833 -> 768;
833 -> 774;
833 -> 767;
834 -> 773;
834 -> 767;
835 -> 834;
835 -> 774;
835 -> 767;
836 -> 767;
837 -> 769;
837 -> 820;
837 -> 836;
837 -> 767;
838 -> 837;
838 -> 767;
839 -> 768;
839 -> 820;
839 -> 838;
840 -> 768;
840 -> 820;
840 -> 839;
840 -> 774;
840 -> 767;
841 -> 774;
841 -> 820;
841 -> 767;
842 -> 768;
842 -> 767;
843 -> 774;
843 -> 767;
844 -> 841;
844 -> 842;
844 -> 843;
844 -> 820;
844 -> 822;
844 -> 833;
844 -> 823;
844 -> 824;
844 -> 825;
844 -> 826;
844 -> 827;
844 -> 828;
844 -> 829;
844 -> 830;
844 -> 831;
844 -> 840;
844 -> 835;
844 -> 839;
844 -> 834;
844 -> 767;
845 -> 639;
846 -> 646;
846 -> 845;
846 -> 639;
847 -> 647;
847 -> 753;
847 -> 639;
848 -> 639;
849 -> 648;
849 -> 848;
849 -> 639;
850 -> 639;
851 -> 650;
851 -> 850;
851 -> 639;
852 -> 753;
852 -> 639;
853 -> 640;
853 -> 852;
853 -> 844;
853 -> 847;
853 -> 632;
854 -> 640;
854 -> 639;
855 -> 640;
855 -> 639;
856 -> 640;
856 -> 639;
857 -> 640;
857 -> 639;
858 -> 640;
858 -> 639;
859 -> 640;
859 -> 639;
860 -> 640;
860 -> 639;
861 -> 640;
861 -> 639;
862 -> 639;
863 -> 856;
863 -> 639;
864 -> 858;
864 -> 639;
865 -> 0;
865 -> 639;
866 -> 639;
867 -> 860;
867 -> 639;
868 -> 639;
869 -> 865;
869 -> 868;
870 -> 866;
870 -> 868;
871 -> 867;
871 -> 868;
872 -> 861;
872 -> 868;
873 -> 868;
874 -> 869;
874 -> 868;
875 -> 870;
875 -> 868;
876 -> 873;
876 -> 868;
877 -> 871;
877 -> 868;
878 -> 868;
879 -> 874;
879 -> 878;
880 -> 875;
880 -> 878;
881 -> 876;
881 -> 878;
882 -> 877;
882 -> 878;
883 -> 872;
883 -> 878;
884 -> 878;
885 -> 879;
885 -> 0;
885 -> 878;
886 -> 885;
886 -> 880;
886 -> 878;
887 -> 886;
888 -> 883;
888 -> 887;
889 -> 887;
890 -> 888;
890 -> 853;
890 -> 889;
891 -> 889;
892 -> 890;
892 -> 886;
893 -> 886;
894 -> 883;
894 -> 893;
895 -> 894;
895 -> 853;
895 -> 893;
896 -> 895;
896 -> 886;
897 -> 896;
898 -> 892;
898 -> 853;
898 -> 896;
899 -> 882;
899 -> 896;
900 -> 897;
900 -> 898;
900 -> 899;
900 -> 853;
900 -> 896;
901 -> 900;
901 -> 897;
902 -> 900;
902 -> 897;
903 -> 900;
903 -> 897;
904 -> 900;
904 -> 897;
905 -> 897;
906 -> 905;
906 -> 897;
907 -> 897;
908 -> 902;
908 -> 907;
909 -> 908;
909 -> 897;
910 -> 903;
910 -> 897;
911 -> 905;
911 -> 897;
912 -> 909;
912 -> 900;
912 -> 910;
912 -> 911;
912 -> 906;
912 -> 897;
913 -> 886;
914 -> 892;
914 -> 886;
915 -> 882;
915 -> 853;
915 -> 912;
915 -> 914;
916 -> 914;
916 -> 853;
916 -> 915;
917 -> 879;
917 -> 0;
917 -> 878;
918 -> 884;
918 -> 917;
919 -> 918;
919 -> 883;
919 -> 884;
919 -> 915;
919 -> 917;
920 -> 917;
921 -> 917;
922 -> 883;
922 -> 921;
923 -> 922;
923 -> 919;
923 -> 921;
924 -> 923;
924 -> 917;
925 -> 917;
926 -> 883;
926 -> 925;
927 -> 926;
927 -> 924;
927 -> 925;
928 -> 927;
928 -> 917;
929 -> 882;
929 -> 924;
929 -> 917;
930 -> 917;
931 -> 883;
931 -> 930;
932 -> 931;
932 -> 929;
932 -> 930;
933 -> 931;
933 -> 929;
933 -> 930;
934 -> 933;
934 -> 917;
935 -> 882;
935 -> 934;
935 -> 917;
936 -> 882;
936 -> 917;
937 -> 917;
938 -> 917;
939 -> 937;
939 -> 938;
940 -> 937;
940 -> 938;
941 -> 937;
941 -> 938;
942 -> 936;
942 -> 938;
943 -> 883;
943 -> 938;
944 -> 938;
945 -> 943;
945 -> 944;
946 -> 945;
946 -> 935;
946 -> 944;
947 -> 944;
948 -> 946;
948 -> 947;
949 -> 948;
949 -> 947;
950 -> 949;
950 -> 946;
950 -> 947;
951 -> 947;
952 -> 950;
952 -> 951;
953 -> 952;
953 -> 950;
953 -> 951;
954 -> 953;
954 -> 951;
955 -> 954;
955 -> 938;
956 -> 942;
956 -> 938;
957 -> 955;
957 -> 956;
957 -> 954;
957 -> 935;
957 -> 938;
958 -> 938;
959 -> 938;
960 -> 939;
960 -> 959;
960 -> 938;
961 -> 938;
962 -> 943;
962 -> 961;
963 -> 961;
964 -> 962;
964 -> 963;
965 -> 963;
966 -> 964;
966 -> 965;
967 -> 966;
967 -> 957;
967 -> 965;
968 -> 966;
968 -> 957;
968 -> 965;
969 -> 968;
969 -> 963;
970 -> 964;
970 -> 957;
970 -> 963;
971 -> 970;
971 -> 938;
972 -> 958;
972 -> 938;
973 -> 942;
973 -> 938;
974 -> 972;
974 -> 973;
974 -> 971;
974 -> 935;
974 -> 970;
974 -> 938;
975 -> 938;
976 -> 975;
977 -> 976;
978 -> 974;
978 -> 976;
979 -> 975;
980 -> 979;
981 -> 980;
982 -> 975;
983 -> 982;
984 -> 983;
985 -> 974;
985 -> 975;
986 -> 985;
986 -> 974;
986 -> 975;
987 -> 975;
988 -> 985;
988 -> 974;
988 -> 987;
988 -> 975;
989 -> 988;
990 -> 985;
990 -> 974;
990 -> 988;
991 -> 989;
991 -> 988;
992 -> 988;
993 -> 985;
993 -> 991;
993 -> 975;
994 -> 974;
994 -> 975;
995 -> 974;
995 -> 975;
996 -> 995;
996 -> 993;
996 -> 975;
997 -> 974;
997 -> 975;
998 -> 974;
998 -> 975;
999 -> 975;
1000 -> 998;
1000 -> 999;
1001 -> 1000;
1001 -> 993;
1001 -> 999;
1002 -> 1000;
1002 -> 993;
1002 -> 999;
1003 -> 1002;
1003 -> 975;
1004 -> 975;
1005 -> 1004;
1005 -> 1003;
1005 -> 993;
1005 -> 975;
1006 -> 1004;
1006 -> 1005;
1007 -> 1003;
1007 -> 1006;
1007 -> 1004;
1008 -> 997;
1008 -> 1007;
1008 -> 1006;
1009 -> 974;
1009 -> 975;
1010 -> 1009;
1010 -> 1008;
1010 -> 975;
1011 -> 1010;
1011 -> 976;
1012 -> 974;
1012 -> 975;
1013 -> 974;
1013 -> 975;
1014 -> 1012;
1014 -> 0;
1014 -> 975;
1015 -> 975;
1016 -> 1012;
1016 -> 975;
1017 -> 1013;
1017 -> 1016;
1017 -> 1010;
1017 -> 975;
1018 -> 1017;
1019 -> 1018;
1020 -> 1018;
1020 -> 1017;
1021 -> 1012;
1021 -> 1017;
1022 -> 1020;
1022 -> 1012;
1022 -> 975;
1023 -> 1020;
1023 -> 975;
1024 -> 974;
1024 -> 975;
1025 -> 974;
1025 -> 975;
1026 -> 1024;
1026 -> 1023;
1026 -> 975;
1027 -> 975;
1028 -> 975;
1029 -> 1026;
1029 -> 1028;
1030 -> 1027;
1030 -> 1028;
1031 -> 1025;
1031 -> 1028;
1032 -> 1030;
1032 -> 1028;
1033 -> 1029;
1033 -> 1028;
1034 -> 1028;
1035 -> 1031;
1035 -> 1023;
1035 -> 1028;
1036 -> 1028;
1037 -> 1033;
1037 -> 1036;
1038 -> 1034;
1038 -> 1036;
1039 -> 1035;
1039 -> 1036;
1040 -> 1031;
1040 -> 1036;
1041 -> 1039;
1041 -> 1036;
1042 -> 1038;
1042 -> 1036;
1043 -> 1040;
1043 -> 1023;
1043 -> 1042;
1044 -> 1040;
1044 -> 1023;
1044 -> 1043;
1044 -> 1036;
1045 -> 1041;
1045 -> 1044;
1045 -> 1023;
1045 -> 1043;
1045 -> 1036;
1046 -> 1037;
1046 -> 1036;
1047 -> 1036;
1048 -> 1046;
1048 -> 1047;
1049 -> 1040;
1049 -> 1047;
1050 -> 1048;
1050 -> 1047;
1051 -> 1047;
1052 -> 1050;
1052 -> 1051;
1053 -> 1049;
1053 -> 1051;
1054 -> 1051;
1055 -> 1052;
1055 -> 1054;
1055 -> 1051;
1056 -> 1051;
1057 -> 1053;
1057 -> 1045;
1057 -> 1056;
1058 -> 1056;
1059 -> 1057;
1059 -> 1051;
1060 -> 1052;
1060 -> 1051;
1061 -> 1059;
1061 -> 1045;
1061 -> 1060;
1061 -> 1051;
1062 -> 1047;
1063 -> 1049;
1063 -> 1061;
1063 -> 1062;
1064 -> 1062;
1065 -> 1063;
1065 -> 1047;
1066 -> 1045;
1066 -> 1036;
1067 -> 1036;
1068 -> 1066;
1068 -> 1067;
1068 -> 1036;
1069 -> 1068;
1070 -> 1069;
1070 -> 1065;
1071 -> 1070;
1071 -> 1068;
1072 -> 1045;
1072 -> 1068;
1073 -> 1071;
1073 -> 1068;
1074 -> 1068;
1075 -> 1036;
1076 -> 1073;
1076 -> 1065;
1076 -> 1036;
1077 -> 1036;
1078 -> 1076;
1078 -> 1077;
1078 -> 1036;
1079 -> 1037;
1079 -> 1036;
1080 -> 1038;
1080 -> 1036;
1081 -> 1073;
1081 -> 1065;
1081 -> 1036;
1082 -> 1036;
1083 -> 1079;
1083 -> 1082;
1084 -> 1080;
1084 -> 1082;
1085 -> 1081;
1085 -> 1082;
1086 -> 1040;
1086 -> 1082;
1087 -> 1086;
1087 -> 1082;
1088 -> 1083;
1088 -> 1082;
1089 -> 1084;
1089 -> 1082;
1090 -> 1087;
1090 -> 1088;
1090 -> 1089;
1090 -> 1073;
1090 -> 1082;
1091 -> 1082;
1092 -> 1090;
1092 -> 1082;
1093 -> 1082;
1094 -> 1093;
1095 -> 1085;
1095 -> 1093;
1096 -> 1093;
1097 -> 1095;
1097 -> 1096;
1097 -> 1093;
1098 -> 1085;
1098 -> 1093;
1099 -> 1092;
1099 -> 1093;
1100 -> 1095;
1100 -> 1093;
1101 -> 1098;
1101 -> 1099;
1101 -> 1100;
1101 -> 1092;
1101 -> 1093;
1102 -> 1090;
1102 -> 1101;
1103 -> 1024;
1103 -> 975;
1104 -> 1102;
1104 -> 1027;
1105 -> 1104;
1105 -> 1102;
1105 -> 1027;
1106 -> 1105;
1107 -> 1106;
1107 -> 1105;
1108 -> 1105;
1109 -> 1107;
1109 -> 1108;
1110 -> 1104;
1110 -> 1108;
1111 -> 1108;
1112 -> 1110;
1112 -> 1111;
1113 -> 1112;
1113 -> 1111;
1114 -> 1112;
1114 -> 1108;
1115 -> 1109;
1115 -> 1114;
1115 -> 1106;
1115 -> 1112;
1115 -> 1108;
1116 -> 1108;
1117 -> 1110;
1117 -> 1116;
1118 -> 1117;
1118 -> 1115;
1118 -> 1116;
1119 -> 1117;
1119 -> 1115;
1119 -> 1116;
1120 -> 1119;
1120 -> 1108;
1121 -> 1108;
1122 -> 1121;
1122 -> 1120;
1122 -> 1115;
1122 -> 1108;
1123 -> 1121;
1123 -> 1122;
1124 -> 1120;
1124 -> 1123;
1124 -> 1121;
1125 -> 1105;
1126 -> 1104;
1126 -> 1105;
1127 -> 1126;
1127 -> 1124;
1127 -> 1105;
1128 -> 1105;
1129 -> 1106;
1129 -> 1127;
1129 -> 1105;
1130 -> 1104;
1130 -> 1129;
1130 -> 1105;
1131 -> 1127;
1131 -> 1105;
1132 -> 1105;
1133 -> 1104;
1133 -> 1130;
1133 -> 1027;
1134 -> 1102;
1134 -> 1027;
1135 -> 1027;
1136 -> 1134;
1136 -> 1135;
1137 -> 1135;
1138 -> 1137;
1139 -> 1136;
1139 -> 1133;
1139 -> 1138;
1140 -> 1136;
1140 -> 1133;
1140 -> 1138;
1141 -> 1140;
1141 -> 1137;
1142 -> 1136;
1142 -> 1133;
1142 -> 1137;
1143 -> 1142;
1143 -> 1027;
1144 -> 1027;
1145 -> 974;
1145 -> 975;
1146 -> 974;
1146 -> 975;
1147 -> 1145;
1147 -> 1143;
1147 -> 975;
1148 -> 975;
1149 -> 1147;
1149 -> 1148;
1150 -> 1147;
1150 -> 1148;
1151 -> 1146;
1151 -> 1148;
1152 -> 1148;
1153 -> 1151;
1153 -> 1152;
1154 -> 1152;
1155 -> 1153;
1155 -> 1154;
1155 -> 1143;
1155 -> 1152;
1156 -> 1155;
1156 -> 1152;
1157 -> 1156;
1157 -> 1148;
1158 -> 1150;
1158 -> 1148;
1159 -> 1149;
1159 -> 1158;
1159 -> 1155;
1159 -> 1143;
1159 -> 1148;
1160 -> 1148;
1161 -> 1151;
1161 -> 1160;
1162 -> 1161;
1162 -> 1159;
1162 -> 1160;
1163 -> 1148;
1164 -> 1162;
1164 -> 1157;
1164 -> 1148;
1165 -> 974;
1165 -> 975;
1166 -> 974;
1166 -> 975;
1167 -> 974;
1167 -> 975;
1168 -> 1166;
1168 -> 975;
1169 -> 1165;
1169 -> 975;
1170 -> 975;
1171 -> 975;
1172 -> 1169;
1172 -> 1171;
1173 -> 1170;
1173 -> 1171;
1174 -> 1167;
1174 -> 1171;
1175 -> 1173;
1175 -> 1171;
1176 -> 1172;
1176 -> 1171;
1177 -> 1171;
1178 -> 1176;
1178 -> 1177;
1179 -> 1174;
1179 -> 1177;
1180 -> 1178;
1180 -> 1177;
1181 -> 1177;
1182 -> 1180;
1182 -> 1181;
1183 -> 1179;
1183 -> 1181;
1184 -> 1181;
1185 -> 1182;
1185 -> 1184;
1185 -> 1181;
1186 -> 1181;
1187 -> 1186;
1188 -> 1182;
1188 -> 1181;
1189 -> 1177;
1190 -> 1189;
1191 -> 1171;
1192 -> 1171;
1193 -> 1164;
1193 -> 1171;
1194 -> 1171;
1195 -> 1193;
1195 -> 1194;
1195 -> 1171;
1196 -> 1192;
1196 -> 1171;
1197 -> 1193;
1197 -> 1196;
1197 -> 1164;
1197 -> 1171;
1198 -> 1197;
1199 -> 974;
1199 -> 975;
1200 -> 974;
1200 -> 975;
1201 -> 975;
1202 -> 1199;
1202 -> 1201;
1203 -> 1201;
1204 -> 1202;
1204 -> 1198;
1204 -> 1203;
1205 -> 1203;
1206 -> 1204;
1206 -> 975;
1207 -> 1200;
1207 -> 975;
1208 -> 1206;
1208 -> 1207;
1208 -> 975;
1209 -> 975;
1210 -> 1208;
1211 -> 1208;
1211 -> 1012;
1211 -> 975;
1212 -> 974;
1212 -> 975;
1213 -> 974;
1213 -> 975;
1214 -> 1212;
1214 -> 975;
1215 -> 1214;
1215 -> 1208;
1215 -> 975;
1216 -> 1212;
1216 -> 1215;
1216 -> 975;
1217 -> 975;
1218 -> 1213;
1218 -> 1217;
1219 -> 1217;
1220 -> 1218;
1220 -> 1219;
1221 -> 1219;
1222 -> 1221;
1223 -> 1220;
1223 -> 1215;
1223 -> 1222;
1224 -> 1220;
1224 -> 1215;
1224 -> 1222;
1225 -> 1224;
1225 -> 1221;
1226 -> 1220;
1226 -> 1215;
1226 -> 1221;
1227 -> 1217;
1228 -> 1226;
1228 -> 975;
1229 -> 975;
1230 -> 1213;
1230 -> 1229;
1231 -> 1230;
1231 -> 1226;
1231 -> 1229;
1232 -> 1231;
1233 -> 1232;
1233 -> 1231;
1234 -> 1231;
1235 -> 1233;
1235 -> 1234;
1235 -> 1231;
1236 -> 1235;
1236 -> 1231;
1237 -> 1236;
1237 -> 1230;
1237 -> 1231;
1238 -> 1230;
1238 -> 1235;
1238 -> 1237;
1238 -> 1229;
1239 -> 1238;
1239 -> 975;
1240 -> 1239;
1241 -> 1212;
1241 -> 1240;
1241 -> 975;
1242 -> 1240;
1242 -> 1221;
1243 -> 1240;
1243 -> 975;
1244 -> 995;
1244 -> 1240;
1244 -> 975;
1245 -> 985;
1245 -> 1240;
1245 -> 975;
1246 -> 939;
1246 -> 938;
1247 -> 1246;
1248 -> 1247;
1248 -> 943;
1248 -> 1246;
1249 -> 1246;
1250 -> 1249;
1250 -> 943;
1250 -> 1246;
1251 -> 943;
1251 -> 1240;
1251 -> 1248;
1251 -> 1250;
1251 -> 938;
1252 -> 938;
1253 -> 941;
1253 -> 1252;
1253 -> 938;
1254 -> 939;
1254 -> 938;
1255 -> 940;
1255 -> 938;
1256 -> 942;
1256 -> 938;
1257 -> 938;
1258 -> 1254;
1258 -> 1257;
1259 -> 1255;
1259 -> 1257;
1260 -> 1256;
1260 -> 1257;
1261 -> 943;
1261 -> 1257;
1262 -> 1257;
1263 -> 1258;
1263 -> 1262;
1263 -> 1257;
1264 -> 1261;
1264 -> 1251;
1264 -> 1257;
1265 -> 1264;
1266 -> 1261;
1266 -> 1264;
1267 -> 1265;
1267 -> 1264;
1268 -> 1260;
1268 -> 1264;
1269 -> 1264;
1270 -> 1264;
1271 -> 1266;
1271 -> 1270;
1272 -> 1267;
1272 -> 1270;
1273 -> 1268;
1273 -> 1270;
1274 -> 1269;
1274 -> 1270;
1275 -> 1269;
1275 -> 1270;
1276 -> 1270;
1277 -> 1271;
1277 -> 1270;
1278 -> 1274;
1278 -> 1270;
1279 -> 1275;
1279 -> 1270;
1280 -> 1276;
1280 -> 1270;
1281 -> 1273;
1281 -> 1270;
1282 -> 1270;
1283 -> 1270;
1284 -> 1277;
1284 -> 1283;
1285 -> 1278;
1285 -> 1283;
1286 -> 1279;
1286 -> 1283;
1287 -> 1280;
1287 -> 1283;
1288 -> 1281;
1288 -> 1283;
1289 -> 1282;
1289 -> 1283;
1290 -> 1283;
1291 -> 1290;
1291 -> 1283;
1292 -> 1290;
1292 -> 1283;
1293 -> 1290;
1293 -> 1283;
1294 -> 1290;
1294 -> 1283;
1295 -> 1290;
1295 -> 1283;
1296 -> 1290;
1296 -> 1283;
1297 -> 1284;
1297 -> 1290;
1297 -> 1283;
1298 -> 1285;
1298 -> 1290;
1298 -> 1283;
1299 -> 1286;
1299 -> 1290;
1299 -> 1283;
1300 -> 1287;
1300 -> 1290;
1300 -> 1283;
1301 -> 1288;
1301 -> 1290;
1301 -> 1283;
1302 -> 0;
1302 -> 1283;
1303 -> 1302;
1303 -> 1290;
1303 -> 1283;
1304 -> 1283;
1305 -> 1290;
1305 -> 1304;
1306 -> 1304;
1307 -> 1305;
1307 -> 1290;
1307 -> 1292;
1307 -> 1298;
1307 -> 1306;
1307 -> 1304;
1308 -> 1304;
1309 -> 1305;
1309 -> 1290;
1309 -> 1291;
1309 -> 1297;
1309 -> 1308;
1310 -> 1309;
1310 -> 1290;
1310 -> 1302;
1310 -> 1308;
1311 -> 1307;
1311 -> 1310;
1311 -> 1290;
1311 -> 1302;
1311 -> 1304;
1312 -> 1311;
1312 -> 1283;
1313 -> 1312;
1314 -> 1313;
1314 -> 1290;
1314 -> 1312;
1315 -> 1270;
1316 -> 1271;
1316 -> 1315;
1317 -> 1316;
1317 -> 1302;
1317 -> 1315;
1318 -> 1316;
1318 -> 1302;
1318 -> 1315;
1319 -> 1318;
1319 -> 1315;
1320 -> 1316;
1320 -> 1302;
1320 -> 1315;
1321 -> 1320;
1321 -> 1270;
1322 -> 1321;
1322 -> 1282;
1322 -> 1320;
1322 -> 1290;
1322 -> 1291;
1322 -> 1297;
1322 -> 1292;
1322 -> 1298;
1322 -> 1293;
1322 -> 1299;
1322 -> 1294;
1322 -> 1300;
1322 -> 1295;
1322 -> 1303;
1322 -> 1296;
1322 -> 1314;
1322 -> 1301;
1322 -> 1269;
1322 -> 1276;
1322 -> 935;
1322 -> 1313;
1322 -> 1270;
1323 -> 1270;
1324 -> 1322;
1324 -> 1323;
1325 -> 1322;
1325 -> 1323;
1326 -> 1325;
1326 -> 1322;
1326 -> 1323;
1327 -> 1324;
1327 -> 1323;
1328 -> 1324;
1328 -> 1323;
1329 -> 1323;
1330 -> 1328;
1330 -> 1329;
1331 -> 1325;
1331 -> 1329;
1332 -> 1330;
1332 -> 1326;
1332 -> 0;
1332 -> 1329;
1333 -> 1329;
1334 -> 1330;
1334 -> 1326;
1334 -> 0;
1334 -> 1329;
1335 -> 1330;
1335 -> 1326;
1335 -> 0;
1335 -> 1334;
1336 -> 1330;
1336 -> 1326;
1336 -> 0;
1336 -> 1329;
1337 -> 1330;
1337 -> 1326;
1337 -> 0;
1337 -> 1329;
1338 -> 1330;
1338 -> 1326;
1338 -> 0;
1338 -> 1329;
1339 -> 1330;
1339 -> 1326;
1339 -> 0;
1339 -> 1329;
1340 -> 1330;
1340 -> 1326;
1340 -> 0;
1340 -> 1329;
1341 -> 1329;
1342 -> 1330;
1342 -> 1329;
1343 -> 1341;
1343 -> 1329;
1344 -> 1331;
1344 -> 1326;
1344 -> 1342;
1344 -> 1343;
1344 -> 1329;
1345 -> 1329;
1346 -> 1330;
1346 -> 1329;
1347 -> 1345;
1347 -> 1329;
1348 -> 1329;
1349 -> 1346;
1349 -> 1348;
1350 -> 1347;
1350 -> 1348;
1351 -> 1331;
1351 -> 1348;
1352 -> 1348;
1353 -> 1349;
1353 -> 1344;
1353 -> 1348;
1354 -> 1348;
1355 -> 1354;
1355 -> 1329;
1356 -> 1355;
1356 -> 1329;
1357 -> 1330;
1357 -> 1353;
1357 -> 0;
1357 -> 1356;
1358 -> 0;
1358 -> 1357;
1359 -> 1330;
1359 -> 1353;
1359 -> 0;
1359 -> 1329;
1360 -> 1359;
1360 -> 1329;
1361 -> 1358;
1361 -> 1360;
1362 -> 1361;
1362 -> 0;
1362 -> 1323;
1363 -> 1361;
1363 -> 1323;
1364 -> 1323;
1365 -> 1363;
1365 -> 1364;
1366 -> 1365;
1366 -> 1364;
1367 -> 1366;
1368 -> 1323;
1369 -> 1368;
1369 -> 1324;
1369 -> 1361;
1369 -> 1323;
1370 -> 1324;
1370 -> 1361;
1370 -> 1368;
1370 -> 1369;
1371 -> 1369;
1372 -> 1370;
1372 -> 1369;
1373 -> 1371;
1373 -> 1369;
1374 -> 1369;
1375 -> 1372;
1375 -> 1374;
1376 -> 1373;
1376 -> 1374;
1377 -> 1325;
1377 -> 1374;
1378 -> 1374;
1379 -> 1374;
1379 -> 1369;
1380 -> 1369;
1381 -> 1380;
1381 -> 1369;
1382 -> 1378;
1382 -> 1381;
1383 -> 1369;
1384 -> 1382;
1384 -> 1383;
1384 -> 1369;
1385 -> 1384;
1385 -> 1379;
1385 -> 1369;
1386 -> 1379;
1386 -> 1369;
1387 -> 1367;
1387 -> 1386;
1388 -> 1367;
1388 -> 1323;
1389 -> 1323;
1390 -> 1324;
1390 -> 1375;
1390 -> 1389;
1390 -> 1323;
1391 -> 1390;
1391 -> 1323;
1392 -> 1323;
1393 -> 1391;
1393 -> 1392;
1394 -> 1325;
1394 -> 1392;
1395 -> 1393;
1395 -> 1390;
1395 -> 0;
1395 -> 1392;
1396 -> 1392;
1397 -> 1393;
1397 -> 1390;
1397 -> 0;
1397 -> 1392;
1398 -> 1393;
1398 -> 1390;
1398 -> 0;
1398 -> 1397;
1399 -> 1393;
1399 -> 1390;
1399 -> 0;
1399 -> 1392;
1400 -> 1393;
1400 -> 1390;
1400 -> 0;
1400 -> 1392;
1401 -> 1393;
1401 -> 1390;
1401 -> 0;
1401 -> 1392;
1402 -> 1393;
1402 -> 1390;
1402 -> 0;
1402 -> 1392;
1403 -> 1393;
1403 -> 1390;
1403 -> 0;
1403 -> 1392;
1404 -> 1392;
1405 -> 1404;
1405 -> 1392;
1406 -> 1392;
1407 -> 1406;
1407 -> 1392;
1408 -> 1392;
1409 -> 1407;
1409 -> 1408;
1410 -> 1394;
1410 -> 1408;
1411 -> 1408;
1412 -> 1408;
1413 -> 1412;
1413 -> 1392;
1414 -> 1413;
1414 -> 1392;
1415 -> 1393;
1416 -> 1393;
1417 -> 1415;
1417 -> 1416;
1418 -> 1394;
1418 -> 1416;
1419 -> 1417;
1419 -> 1393;
1419 -> 0;
1419 -> 1416;
1420 -> 1417;
1420 -> 1393;
1420 -> 1416;
1421 -> 1416;
1422 -> 1420;
1422 -> 1421;
1422 -> 1416;
1423 -> 1420;
1423 -> 1416;
1424 -> 1416;
1425 -> 1423;
1425 -> 1424;
1426 -> 1418;
1426 -> 1424;
1427 -> 1425;
1427 -> 1393;
1427 -> 0;
1427 -> 1424;
1428 -> 1424;
1429 -> 1425;
1429 -> 1393;
1429 -> 0;
1429 -> 1424;
1430 -> 1425;
1430 -> 1393;
1430 -> 0;
1430 -> 1429;
1431 -> 1425;
1431 -> 1393;
1431 -> 0;
1431 -> 1424;
1432 -> 1425;
1432 -> 1393;
1432 -> 0;
1432 -> 1424;
1433 -> 1425;
1433 -> 1393;
1433 -> 0;
1433 -> 1424;
1434 -> 1425;
1434 -> 1393;
1434 -> 0;
1434 -> 1424;
1435 -> 1425;
1435 -> 1393;
1435 -> 0;
1435 -> 1424;
1436 -> 1426;
1436 -> 1393;
1436 -> 1425;
1436 -> 1424;
1437 -> 1436;
1438 -> 1393;
1439 -> 1437;
1439 -> 1438;
1440 -> 1439;
1440 -> 1438;
1441 -> 1440;
1442 -> 1323;
1443 -> 1441;
1443 -> 1442;
1444 -> 1324;
1444 -> 1436;
1444 -> 1323;
1445 -> 1323;
1446 -> 1444;
1446 -> 1445;
1447 -> 1444;
1447 -> 1445;
1448 -> 1447;
1448 -> 1444;
1448 -> 1445;
1449 -> 1446;
1449 -> 1445;
1450 -> 1445;
1451 -> 1449;
1451 -> 1450;
1452 -> 1447;
1452 -> 1450;
1453 -> 1451;
1453 -> 1448;
1453 -> 0;
1453 -> 1450;
1454 -> 1453;
1455 -> 1446;
1455 -> 1445;
1456 -> 1445;
1457 -> 1455;
1457 -> 1456;
1458 -> 1447;
1458 -> 1456;
1459 -> 1457;
1459 -> 1448;
1459 -> 0;
1459 -> 1456;
1460 -> 1456;
1461 -> 1457;
1461 -> 1448;
1461 -> 0;
1461 -> 1456;
1462 -> 1457;
1462 -> 1448;
1462 -> 1461;
1463 -> 1461;
1464 -> 1462;
1464 -> 1463;
1465 -> 1464;
1465 -> 1448;
1465 -> 0;
1465 -> 1463;
1466 -> 1463;
1467 -> 1464;
1467 -> 1448;
1467 -> 0;
1468 -> 1464;
1468 -> 1448;
1468 -> 0;
1468 -> 1463;
1469 -> 1464;
1469 -> 1448;
1469 -> 0;
1469 -> 1463;
1470 -> 1464;
1470 -> 1448;
1470 -> 0;
1470 -> 1463;
1471 -> 1464;
1471 -> 1448;
1471 -> 0;
1471 -> 1463;
1472 -> 1464;
1472 -> 1448;
1472 -> 0;
1472 -> 1463;
1473 -> 1464;
1474 -> 1445;
1475 -> 1473;
1475 -> 1474;
1476 -> 1475;
1476 -> 1474;
1477 -> 1476;
1478 -> 1445;
1479 -> 1447;
1479 -> 1478;
1480 -> 1478;
1481 -> 1479;
1481 -> 1464;
1481 -> 1480;
1481 -> 1478;
1482 -> 1478;
1483 -> 1479;
1483 -> 1464;
1483 -> 1482;
1484 -> 1481;
1484 -> 1445;
1485 -> 1446;
1485 -> 1484;
1486 -> 1484;
1487 -> 1485;
1487 -> 1486;
1488 -> 1447;
1488 -> 1486;
1489 -> 1487;
1489 -> 1464;
1489 -> 1486;
1490 -> 1489;
1491 -> 1488;
1491 -> 1489;
1492 -> 1484;
1493 -> 1270;
1494 -> 1282;
1494 -> 1493;
1495 -> 1494;
1495 -> 1491;
1495 -> 1493;
1496 -> 1493;
1497 -> 1495;
1497 -> 1496;
1497 -> 1493;
1498 -> 1493;
1499 -> 1495;
1499 -> 1498;
1499 -> 1491;
1499 -> 1493;
1500 -> 1499;
1501 -> 1270;
1502 -> 1276;
1502 -> 1270;
1503 -> 1502;
1503 -> 1500;
1503 -> 1270;
1504 -> 1261;
1504 -> 1500;
1504 -> 1264;
1505 -> 1265;
1505 -> 1264;
1506 -> 1504;
1506 -> 1505;
1506 -> 1500;
1506 -> 1264;
1507 -> 1261;
1507 -> 1506;
1507 -> 1257;
1508 -> 1261;
1508 -> 1506;
1508 -> 1257;
1509 -> 1251;
1509 -> 938;
1510 -> 1509;
1510 -> 1506;
1510 -> 938;
1511 -> 1508;
1511 -> 938;
1512 -> 917;
1513 -> 883;
1513 -> 1511;
1513 -> 1512;
1513 -> 917;
1514 -> 882;
1514 -> 1511;
1514 -> 878;
1515 -> 879;
1515 -> 0;
1515 -> 878;
1516 -> 881;
1516 -> 878;
1517 -> 884;
1517 -> 878;
1518 -> 882;
1518 -> 878;
1519 -> 1516;
1519 -> 1517;
1519 -> 1518;
1519 -> 883;
1519 -> 873;
1519 -> 1514;
1519 -> 878;
1520 -> 878;
1521 -> 868;
1522 -> 873;
1522 -> 1519;
1522 -> 868;
1523 -> 862;
1523 -> 639;
1524 -> 864;
1524 -> 1522;
1524 -> 1523;
1524 -> 867;
1524 -> 861;
1524 -> 853;
1524 -> 639;
1525 -> 862;
1525 -> 639;
1526 -> 854;
1526 -> 639;
1527 -> 856;
1527 -> 639;
1528 -> 855;
1528 -> 857;
1528 -> 1527;
1529 -> 1527;
1530 -> 861;
1530 -> 1527;
1531 -> 1526;
1531 -> 1527;
1532 -> 855;
1532 -> 1527;
1533 -> 857;
1533 -> 1527;
1534 -> 1524;
1534 -> 1527;
1535 -> 1529;
1535 -> 1527;
1536 -> 859;
1536 -> 1527;
1537 -> 860;
1537 -> 1527;
1538 -> 1527;
1539 -> 1530;
1539 -> 1538;
1540 -> 1531;
1540 -> 1538;
1541 -> 1532;
1541 -> 1538;
1542 -> 1533;
1542 -> 1538;
1543 -> 1534;
1543 -> 1538;
1544 -> 1535;
1544 -> 1538;
1545 -> 1536;
1545 -> 1538;
1546 -> 1537;
1546 -> 1538;
1547 -> 1538;
1548 -> 1539;
1548 -> 1547;
1548 -> 1538;
1549 -> 1538;
1550 -> 1544;
1550 -> 1549;
1550 -> 1538;
1551 -> 1538;
1552 -> 1539;
1552 -> 1551;
1553 -> 1552;
1553 -> 1524;
1553 -> 1551;
1554 -> 1553;
1554 -> 1538;
1555 -> 1538;
1556 -> 1538;
1557 -> 1545;
1557 -> 1538;
1558 -> 1539;
1558 -> 1557;
1559 -> 1540;
1559 -> 1557;
1560 -> 1543;
1560 -> 1557;
1561 -> 1544;
1561 -> 1557;
1562 -> 1546;
1562 -> 1557;
1563 -> 1557;
1564 -> 1558;
1564 -> 1563;
1565 -> 1559;
1565 -> 1563;
1566 -> 1560;
1566 -> 1563;
1567 -> 1561;
1567 -> 1563;
1568 -> 1562;
1568 -> 1563;
1569 -> 1568;
1569 -> 1563;
1570 -> 1563;
1571 -> 1569;
1571 -> 1570;
1572 -> 1564;
1572 -> 1570;
1573 -> 1570;
1574 -> 1572;
1574 -> 1524;
1574 -> 1573;
1574 -> 1570;
1575 -> 1574;
1576 -> 1572;
1576 -> 1574;
1577 -> 1574;
1578 -> 1576;
1578 -> 1577;
1579 -> 1574;
1580 -> 1579;
1580 -> 1576;
1581 -> 1580;
1581 -> 1574;
1582 -> 1574;
1583 -> 1572;
1583 -> 1582;
1584 -> 1583;
1584 -> 1576;
1584 -> 1582;
1585 -> 1582;
1586 -> 1584;
1586 -> 1585;
1587 -> 1586;
1587 -> 1584;
1587 -> 1585;
1588 -> 1585;
1589 -> 1587;
1589 -> 1588;
1590 -> 1588;
1591 -> 1589;
1591 -> 1590;
1592 -> 1591;
1592 -> 1590;
1593 -> 1591;
1593 -> 1588;
1594 -> 1587;
1594 -> 1588;
1595 -> 1588;
1596 -> 1594;
1596 -> 1595;
1597 -> 1596;
1597 -> 1593;
1597 -> 1595;
1598 -> 1597;
1598 -> 1588;
1599 -> 1598;
1599 -> 1574;
1600 -> 1581;
1600 -> 1599;
1600 -> 1574;
1601 -> 1576;
1601 -> 1600;
1603 -> 0;
1605 -> 1602;
1605 -> 1604;
1606 -> 1603;
1606 -> 1604;
1607 -> 1604;
1608 -> 1607;
1608 -> 1604;
1609 -> 1605;
1609 -> 1607;
1609 -> 1604;
1610 -> 1606;
1610 -> 1607;
1610 -> 1604;
1611 -> 1604;
1612 -> 1611;
1612 -> 1601;
1613 -> 1572;
1613 -> 1598;
1613 -> 1574;
1614 -> 1612;
1614 -> 1574;
1615 -> 1574;
1616 -> 1613;
1616 -> 1614;
1616 -> 1615;
1616 -> 1609;
1616 -> 1610;
1616 -> 1598;
1616 -> 0;
1616 -> 1574;
1617 -> 1572;
1617 -> 1616;
1617 -> 1570;
1618 -> 1617;
1618 -> 1563;
1619 -> 1618;
1619 -> 1616;
1619 -> 1563;
1620 -> 1618;
1620 -> 1616;
1620 -> 1563;
1621 -> 1567;
1621 -> 1620;
1621 -> 1529;
1621 -> 1616;
1621 -> 1563;
1622 -> 1618;
1622 -> 1621;
1622 -> 1563;
1623 -> 1563;
1624 -> 1622;
1624 -> 1623;
1624 -> 1563;
1625 -> 1624;
1626 -> 1539;
1626 -> 1538;
1627 -> 1540;
1627 -> 1538;
1628 -> 1541;
1628 -> 1538;
1629 -> 1542;
1629 -> 1538;
1630 -> 1543;
1630 -> 1538;
1631 -> 1544;
1631 -> 1538;
1632 -> 1545;
1632 -> 1538;
1633 -> 1625;
1633 -> 1538;
1634 -> 1546;
1634 -> 1538;
1635 -> 1538;
1636 -> 1538;
1637 -> 1626;
1637 -> 1636;
1638 -> 1627;
1638 -> 1636;
1639 -> 1628;
1639 -> 1636;
1640 -> 1629;
1640 -> 1636;
1641 -> 1630;
1641 -> 1636;
1642 -> 1631;
1642 -> 1636;
1643 -> 1632;
1643 -> 1636;
1644 -> 1633;
1644 -> 1636;
1645 -> 1634;
1645 -> 1636;
1646 -> 1635;
1646 -> 1636;
1647 -> 1636;
1648 -> 1647;
1648 -> 1636;
1649 -> 1647;
1649 -> 1636;
1650 -> 1647;
1650 -> 1636;
1651 -> 1647;
1651 -> 1636;
1652 -> 1647;
1652 -> 1636;
1653 -> 1647;
1653 -> 1636;
1654 -> 1647;
1654 -> 1636;
1655 -> 1647;
1655 -> 1636;
1656 -> 1647;
1656 -> 1636;
1657 -> 1647;
1657 -> 1636;
1658 -> 1647;
1658 -> 1636;
1659 -> 1636;
1660 -> 1637;
1660 -> 1659;
1660 -> 1636;
1661 -> 1636;
1662 -> 1642;
1662 -> 1661;
1662 -> 1636;
1663 -> 1637;
1663 -> 1647;
1663 -> 1636;
1664 -> 1638;
1664 -> 1647;
1664 -> 1636;
1665 -> 1639;
1665 -> 1647;
1665 -> 1636;
1666 -> 1645;
1666 -> 1647;
1666 -> 1636;
1667 -> 1642;
1667 -> 1647;
1667 -> 1636;
1668 -> 1643;
1668 -> 1647;
1668 -> 1636;
1669 -> 1644;
1669 -> 1647;
1669 -> 1636;
1670 -> 1641;
1670 -> 1647;
1670 -> 1636;
1671 -> 1641;
1671 -> 1636;
1672 -> 1636;
1673 -> 1671;
1673 -> 1672;
1674 -> 1647;
1674 -> 1672;
1675 -> 1673;
1675 -> 1672;
1676 -> 1636;
1677 -> 1639;
1677 -> 1640;
1677 -> 1636;
1678 -> 1640;
1678 -> 1647;
1678 -> 1636;
1679 -> 1538;
1680 -> 1539;
1680 -> 1679;
1681 -> 1680;
1681 -> 1621;
1681 -> 1679;
1682 -> 1681;
1682 -> 1538;
1683 -> 1682;
1684 -> 1683;
1684 -> 1635;
1684 -> 1682;
1685 -> 1538;
1686 -> 1539;
1686 -> 1685;
1687 -> 1685;
1688 -> 1686;
1688 -> 1687;
1689 -> 1687;
1690 -> 1688;
1690 -> 1689;
1691 -> 1689;
1692 -> 1690;
1692 -> 1691;
1693 -> 1692;
1693 -> 1621;
1693 -> 1691;
1694 -> 1692;
1694 -> 1621;
1694 -> 1691;
1695 -> 1694;
1695 -> 1689;
1696 -> 1690;
1696 -> 1621;
1696 -> 1689;
1697 -> 1685;
1698 -> 1696;
1698 -> 1538;
1699 -> 1538;
1700 -> 1698;
1700 -> 1699;
1701 -> 1635;
1701 -> 1699;
1702 -> 1700;
1702 -> 1696;
1702 -> 1699;
1703 -> 1701;
1703 -> 1702;
1704 -> 1702;
1705 -> 1703;
1705 -> 1704;
1705 -> 1702;
1705 -> 1647;
1705 -> 1648;
1705 -> 1663;
1705 -> 1649;
1705 -> 1665;
1705 -> 1650;
1705 -> 1678;
1705 -> 1651;
1705 -> 1667;
1705 -> 1652;
1705 -> 1670;
1705 -> 1653;
1705 -> 1664;
1705 -> 1654;
1705 -> 1668;
1705 -> 1655;
1705 -> 1656;
1705 -> 1669;
1705 -> 1657;
1705 -> 1684;
1705 -> 1658;
1705 -> 1666;
1705 -> 853;
1705 -> 1683;
1706 -> 1705;
1706 -> 1704;
1707 -> 1705;
1707 -> 1704;
1708 -> 1705;
1708 -> 1704;
1709 -> 1708;
1709 -> 1705;
1709 -> 1704;
1710 -> 1706;
1710 -> 1704;
1711 -> 1704;
1712 -> 1709;
1712 -> 1711;
1713 -> 1710;
1713 -> 1711;
1714 -> 1711;
1715 -> 1712;
1715 -> 1714;
1715 -> 1711;
1716 -> 1704;
1717 -> 1708;
1717 -> 1705;
1717 -> 1704;
1718 -> 1704;
1719 -> 1708;
1719 -> 1717;
1719 -> 1718;
1720 -> 1719;
1720 -> 1704;
1721 -> 1706;
1721 -> 1720;
1722 -> 1720;
1723 -> 1721;
1723 -> 1722;
1724 -> 1708;
1724 -> 1722;
1725 -> 1722;
1726 -> 1724;
1726 -> 1717;
1726 -> 1722;
1727 -> 1726;
1727 -> 1720;
1728 -> 1727;
1728 -> 1720;
1729 -> 1704;
1730 -> 1705;
1730 -> 1729;
1730 -> 1728;
1730 -> 1702;
1731 -> 1538;
1732 -> 1538;
1733 -> 1635;
1733 -> 1732;
1734 -> 1733;
1734 -> 1730;
1734 -> 1732;
1735 -> 1732;
1736 -> 1734;
1736 -> 1735;
1736 -> 1732;
1737 -> 1732;
1738 -> 1737;
1738 -> 1732;
1739 -> 1734;
1739 -> 1738;
1739 -> 1730;
1739 -> 1732;
1740 -> 1739;
1741 -> 1538;
1742 -> 1538;
1743 -> 1540;
1743 -> 1742;
1743 -> 1538;
1744 -> 1544;
1744 -> 1743;
1745 -> 1743;
1746 -> 1744;
1746 -> 1745;
1747 -> 1540;
1747 -> 1745;
1748 -> 1747;
1748 -> 1740;
1748 -> 1745;
1749 -> 1748;
1749 -> 1743;
1750 -> 1749;
1750 -> 1743;
1751 -> 1544;
1751 -> 1743;
1752 -> 1743;
1753 -> 1750;
1753 -> 1752;
1754 -> 1751;
1754 -> 1752;
1755 -> 1635;
1755 -> 1752;
1756 -> 1753;
1756 -> 1752;
1757 -> 1743;
1758 -> 1544;
1758 -> 1743;
1759 -> 1743;
1760 -> 1758;
1760 -> 1759;
1761 -> 1540;
1761 -> 1759;
1762 -> 1759;
1763 -> 1760;
1763 -> 1759;
1764 -> 1759;
1765 -> 1763;
1765 -> 1764;
1766 -> 1761;
1766 -> 1764;
1767 -> 1764;
1768 -> 1766;
1768 -> 1767;
1769 -> 1767;
1770 -> 1769;
1770 -> 1768;
1770 -> 1767;
1771 -> 1767;
1772 -> 1768;
1772 -> 1771;
1773 -> 1772;
1773 -> 1740;
1773 -> 1770;
1773 -> 1771;
1774 -> 1773;
1774 -> 1767;
1775 -> 1774;
1775 -> 1764;
1776 -> 1764;
1777 -> 1766;
1777 -> 1776;
1778 -> 1777;
1778 -> 1773;
1778 -> 1776;
1779 -> 1778;
1779 -> 1764;
1780 -> 1779;
1781 -> 1775;
1781 -> 1780;
1781 -> 1779;
1782 -> 1781;
1783 -> 1759;
1784 -> 1762;
1784 -> 1759;
1785 -> 1761;
1785 -> 1778;
1785 -> 1759;
1786 -> 1784;
1786 -> 1785;
1786 -> 1762;
1786 -> 1778;
1786 -> 1759;
1787 -> 1762;
1787 -> 1759;
1788 -> 1761;
1788 -> 1786;
1788 -> 1759;
1789 -> 1762;
1789 -> 1759;
1790 -> 1761;
1790 -> 1788;
1790 -> 1759;
1791 -> 1762;
1791 -> 1759;
1792 -> 1761;
1792 -> 1790;
1792 -> 1759;
1793 -> 1762;
1793 -> 1759;
1794 -> 1761;
1794 -> 1792;
1794 -> 1759;
1795 -> 1762;
1795 -> 1759;
1796 -> 1761;
1796 -> 1794;
1796 -> 1759;
1797 -> 1762;
1797 -> 1759;
1798 -> 1761;
1798 -> 1796;
1798 -> 1759;
1799 -> 1762;
1799 -> 1759;
1800 -> 1761;
1800 -> 1798;
1800 -> 1759;
1801 -> 1762;
1801 -> 1800;
1801 -> 1759;
1802 -> 1801;
1802 -> 1743;
1803 -> 1802;
1803 -> 1743;
1804 -> 1544;
1804 -> 1743;
1805 -> 1743;
1806 -> 1803;
1806 -> 1805;
1807 -> 1804;
1807 -> 1805;
1808 -> 1635;
1808 -> 1805;
1809 -> 1806;
1809 -> 1805;
1810 -> 1743;
1811 -> 1743;
1812 -> 1539;
1812 -> 1811;
1813 -> 1812;
1813 -> 1800;
1813 -> 1811;
1814 -> 1813;
1814 -> 1743;
1815 -> 1635;
1815 -> 1743;
1816 -> 1540;
1816 -> 1743;
1817 -> 1544;
1817 -> 1743;
1818 -> 1743;
1819 -> 1814;
1819 -> 1818;
1820 -> 0;
1820 -> 1818;
1821 -> 1814;
1821 -> 1820;
1821 -> 0;
1821 -> 1743;
1822 -> 1814;
1822 -> 1818;
1823 -> 1818;
1824 -> 1814;
1824 -> 1823;
1824 -> 1821;
1824 -> 1743;
1825 -> 1743;
1826 -> 1635;
1826 -> 1825;
1827 -> 1826;
1827 -> 1824;
1827 -> 1825;
1828 -> 1825;
1829 -> 1827;
1829 -> 1828;
1829 -> 1825;
1830 -> 1825;
1831 -> 1830;
1831 -> 1825;
1832 -> 1743;
1833 -> 1540;
1833 -> 1827;
1833 -> 1743;
1834 -> 1743;
1835 -> 1833;
1835 -> 1834;
1835 -> 1743;
1836 -> 1538;
1837 -> 1540;
1837 -> 1836;
1837 -> 1538;
1838 -> 1635;
1838 -> 1827;
1838 -> 1540;
1838 -> 1538;
1839 -> 1538;
1840 -> 1539;
1840 -> 1839;
1841 -> 1840;
1841 -> 1827;
1841 -> 1839;
1842 -> 1841;
1842 -> 1538;
1843 -> 1538;
1844 -> 1545;
1844 -> 1843;
1844 -> 1538;
1845 -> 1539;
1845 -> 1844;
1846 -> 1544;
1846 -> 1844;
1847 -> 1546;
1847 -> 1844;
1848 -> 1844;
1849 -> 1845;
1849 -> 1848;
1850 -> 1846;
1850 -> 1848;
1851 -> 1847;
1851 -> 1848;
1852 -> 1848;
1853 -> 1849;
1853 -> 1852;
1854 -> 1852;
1855 -> 1853;
1855 -> 1854;
1856 -> 1854;
1857 -> 1855;
1857 -> 1856;
1858 -> 1857;
1858 -> 1842;
1858 -> 1856;
1859 -> 1857;
1859 -> 1842;
1859 -> 1856;
1860 -> 1859;
1860 -> 1854;
1861 -> 1855;
1861 -> 1842;
1861 -> 1854;
1862 -> 1861;
1862 -> 1848;
1863 -> 1851;
1863 -> 1848;
1864 -> 1863;
1864 -> 1862;
1864 -> 853;
1864 -> 1861;
1864 -> 1848;
1865 -> 1848;
1866 -> 1850;
1866 -> 1864;
1866 -> 1848;
1867 -> 1844;
1868 -> 1844;
1869 -> 1540;
1869 -> 1868;
1869 -> 1844;
1870 -> 1625;
1870 -> 1868;
1870 -> 1844;
1871 -> 1869;
1871 -> 1870;
1871 -> 1844;
1872 -> 1527;
1873 -> 1529;
1873 -> 1527;
1874 -> 1873;
1874 -> 1866;
1874 -> 1527;
1875 -> 1526;
1875 -> 1874;
1876 -> 1529;
1876 -> 1874;
1877 -> 1874;
1878 -> 1875;
1878 -> 1877;
1879 -> 1876;
1879 -> 1877;
1880 -> 861;
1880 -> 1877;
1881 -> 1880;
1881 -> 1874;
1881 -> 1877;
1882 -> 1880;
1882 -> 1874;
1882 -> 1877;
1883 -> 1874;
1884 -> 858;
1884 -> 1527;
1885 -> 1529;
1885 -> 1527;
1886 -> 860;
1886 -> 1527;
1887 -> 1884;
1887 -> 1885;
1887 -> 1886;
1887 -> 861;
1887 -> 1874;
1887 -> 853;
1887 -> 1527;
1888 -> 1527;
1889 -> 1524;
1889 -> 1887;
1889 -> 1527;
1890 -> 639;
1891 -> 640;
1891 -> 1890;
1891 -> 1887;
1891 -> 632;
1892 -> 640;
1892 -> 639;
1893 -> 640;
1893 -> 639;
1894 -> 640;
1894 -> 639;
1895 -> 640;
1895 -> 639;
1896 -> 640;
1896 -> 639;
1897 -> 640;
1897 -> 639;
1898 -> 640;
1898 -> 639;
1899 -> 639;
1900 -> 1892;
1900 -> 639;
1901 -> 1894;
1901 -> 639;
1902 -> 1899;
1902 -> 639;
1903 -> 1898;
1903 -> 1900;
1903 -> 1901;
1903 -> 1902;
1903 -> 1891;
1903 -> 1899;
1903 -> 639;
1904 -> 1892;
1904 -> 1903;
1904 -> 639;
1905 -> 639;
1906 -> 1898;
1906 -> 1905;
1907 -> 1905;
1908 -> 1906;
1908 -> 1907;
1909 -> 1908;
1909 -> 1903;
1909 -> 1907;
1910 -> 1908;
1910 -> 1903;
1910 -> 1907;
1911 -> 1910;
1911 -> 1905;
1912 -> 1906;
1912 -> 1903;
1912 -> 1905;
1913 -> 1912;
1913 -> 639;
1914 -> 639;
1915 -> 1899;
1915 -> 639;
1916 -> 639;
1917 -> 1915;
1917 -> 1916;
1918 -> 1898;
1918 -> 1916;
1919 -> 1916;
1920 -> 1918;
1920 -> 1919;
1921 -> 1919;
1922 -> 1920;
1922 -> 1921;
1923 -> 1922;
1923 -> 1913;
1923 -> 1921;
1924 -> 1922;
1924 -> 1913;
1924 -> 1921;
1925 -> 1924;
1925 -> 1919;
1926 -> 1920;
1926 -> 1913;
1926 -> 1919;
1927 -> 1926;
1927 -> 1916;
1928 -> 1916;
1929 -> 1928;
1929 -> 1927;
1929 -> 1926;
1929 -> 1916;
1930 -> 1916;
1931 -> 1930;
1931 -> 639;
1932 -> 1896;
1932 -> 639;
1933 -> 1899;
1933 -> 639;
1934 -> 1897;
1934 -> 639;
1935 -> 1932;
1935 -> 1933;
1935 -> 1934;
1935 -> 1898;
1935 -> 1926;
1935 -> 1891;
1935 -> 639;
1936 -> 639;
1937 -> 1897;
1937 -> 1891;
1937 -> 1935;
1937 -> 639;
1938 -> 639;
1939 -> 1895;
1939 -> 639;
1940 -> 639;
1945 -> 1942;
1945 -> 1941;
1946 -> 1943;
1946 -> 1941;
1947 -> 1944;
1947 -> 1941;
1948 -> 1941;
1949 -> 1898;
1949 -> 639;
1950 -> 1939;
1950 -> 639;
1951 -> 1893;
1951 -> 639;
1952 -> 1938;
1952 -> 639;
1953 -> 1897;
1953 -> 639;
1954 -> 639;
1955 -> 639;
1956 -> 1949;
1956 -> 1955;
1957 -> 1950;
1957 -> 1955;
1958 -> 1951;
1958 -> 1955;
1959 -> 1952;
1959 -> 1955;
1960 -> 1953;
1960 -> 1955;
1961 -> 1954;
1961 -> 1955;
1962 -> 1954;
1962 -> 1955;
1963 -> 1955;
1964 -> 1955;
1965 -> 1958;
1965 -> 1964;
1965 -> 1955;
1966 -> 1955;
1967 -> 1956;
1967 -> 1966;
1968 -> 1966;
1969 -> 1967;
1969 -> 1968;
1970 -> 1969;
1970 -> 1937;
1970 -> 1968;
1971 -> 1969;
1971 -> 1937;
1971 -> 1968;
1972 -> 1971;
1972 -> 1966;
1973 -> 1967;
1973 -> 1937;
1973 -> 1966;
1974 -> 1973;
1974 -> 1955;
1975 -> 1974;
1975 -> 1957;
1975 -> 1955;
1976 -> 1956;
1976 -> 1955;
1977 -> 1963;
1977 -> 1955;
1978 -> 1961;
1978 -> 1955;
1979 -> 1962;
1979 -> 1955;
1980 -> 1955;
1981 -> 1959;
1981 -> 1955;
1982 -> 1960;
1982 -> 1955;
1983 -> 1955;
1984 -> 1975;
1984 -> 1983;
1985 -> 1976;
1985 -> 1983;
1986 -> 1977;
1986 -> 1983;
1987 -> 1978;
1987 -> 1983;
1988 -> 1979;
1988 -> 1983;
1989 -> 1980;
1989 -> 1983;
1990 -> 1980;
1990 -> 1983;
1991 -> 1981;
1991 -> 1983;
1992 -> 1982;
1992 -> 1983;
1993 -> 1980;
1993 -> 1983;
1994 -> 1983;
1995 -> 1994;
1995 -> 1983;
1996 -> 1994;
1996 -> 1983;
1997 -> 1994;
1997 -> 1983;
1998 -> 1994;
1998 -> 1983;
1999 -> 1994;
1999 -> 1983;
2000 -> 1994;
2000 -> 1983;
2001 -> 1994;
2001 -> 1983;
2002 -> 1994;
2002 -> 1983;
2003 -> 1994;
2003 -> 1983;
2004 -> 1994;
2004 -> 1983;
2005 -> 1994;
2005 -> 1983;
2006 -> 1994;
2006 -> 1983;
2007 -> 1984;
2007 -> 1994;
2007 -> 1983;
2008 -> 1985;
2008 -> 1994;
2008 -> 1983;
2009 -> 1986;
2009 -> 1994;
2009 -> 1983;
2010 -> 1987;
2010 -> 1994;
2010 -> 1983;
2011 -> 1988;
2011 -> 1994;
2011 -> 1983;
2012 -> 1989;
2012 -> 1994;
2012 -> 1983;
2013 -> 1990;
2013 -> 1994;
2013 -> 1983;
2014 -> 1991;
2014 -> 1994;
2014 -> 1983;
2015 -> 1992;
2015 -> 1994;
2015 -> 1983;
2016 -> 1955;
2017 -> 1956;
2017 -> 2016;
2018 -> 2016;
2019 -> 2017;
2019 -> 2018;
2020 -> 2019;
2020 -> 1973;
2020 -> 2018;
2021 -> 2019;
2021 -> 1973;
2021 -> 2018;
2022 -> 2021;
2022 -> 2016;
2023 -> 2017;
2023 -> 1973;
2023 -> 2016;
2024 -> 2023;
2024 -> 1955;
2025 -> 2024;
2025 -> 1980;
2025 -> 2023;
2025 -> 1994;
2025 -> 1995;
2025 -> 2007;
2025 -> 1996;
2025 -> 2008;
2025 -> 1997;
2025 -> 2009;
2025 -> 1998;
2025 -> 2010;
2025 -> 1999;
2025 -> 2011;
2025 -> 2000;
2025 -> 2012;
2025 -> 2001;
2025 -> 2013;
2025 -> 2002;
2025 -> 2014;
2025 -> 2003;
2025 -> 2004;
2025 -> 2005;
2025 -> 2006;
2025 -> 2015;
2025 -> 1954;
2025 -> 1938;
2025 -> 1937;
2025 -> 1955;
2026 -> 1955;
2027 -> 2025;
2027 -> 2026;
2028 -> 2025;
2028 -> 2026;
2029 -> 2028;
2029 -> 2025;
2029 -> 2026;
2030 -> 2027;
2030 -> 2029;
2030 -> 2026;
2031 -> 2030;
2032 -> 2030;
2033 -> 2030;
2034 -> 2032;
2034 -> 2033;
2035 -> 2028;
2035 -> 2033;
2036 -> 2035;
2036 -> 2029;
2036 -> 2033;
2037 -> 2033;
2038 -> 2036;
2039 -> 2030;
2040 -> 2030;
2041 -> 2039;
2041 -> 2040;
2042 -> 2028;
2042 -> 2040;
2043 -> 2042;
2043 -> 2029;
2043 -> 2040;
2044 -> 2040;
2045 -> 2043;
2046 -> 2030;
2047 -> 2028;
2047 -> 2046;
2048 -> 2047;
2048 -> 2029;
2048 -> 2046;
2049 -> 2030;
2050 -> 2030;
2051 -> 2050;
2051 -> 2030;
2052 -> 2051;
2053 -> 2051;
2054 -> 2052;
2054 -> 2053;
2055 -> 2028;
2055 -> 2053;
2056 -> 2055;
2056 -> 2029;
2056 -> 2053;
2057 -> 2053;
2058 -> 2056;
2059 -> 2051;
2060 -> 2028;
2060 -> 2059;
2061 -> 2060;
2061 -> 2029;
2061 -> 2048;
2061 -> 2059;
2062 -> 2051;
2063 -> 2051;
2064 -> 2028;
2064 -> 2029;
2064 -> 2063;
2064 -> 2051;
2065 -> 2051;
2066 -> 2063;
2066 -> 2065;
2067 -> 2063;
2067 -> 2065;
2068 -> 2028;
2068 -> 2065;
2069 -> 2066;
2069 -> 2065;
2070 -> 2067;
2070 -> 2065;
2071 -> 2069;
2071 -> 2070;
2071 -> 2065;
2072 -> 2065;
2073 -> 2071;
2073 -> 2072;
2074 -> 2068;
2074 -> 2072;
2075 -> 2074;
2075 -> 2029;
2075 -> 2072;
2076 -> 2072;
2077 -> 2075;
2078 -> 2065;
2079 -> 2051;
2080 -> 2028;
2080 -> 2079;
2081 -> 2080;
2081 -> 2029;
2081 -> 2048;
2081 -> 2061;
2081 -> 2079;
2082 -> 2079;
2083 -> 2080;
2083 -> 2029;
2083 -> 2048;
2083 -> 2061;
2083 -> 2081;
2083 -> 2082;
2083 -> 2079;
2084 -> 2051;
2085 -> 2051;
2086 -> 2051;
2087 -> 2085;
2087 -> 2086;
2088 -> 2028;
2088 -> 2086;
2089 -> 2088;
2089 -> 2029;
2089 -> 2086;
2090 -> 2086;
2091 -> 2089;
2092 -> 2030;
2093 -> 2030;
2094 -> 2092;
2094 -> 2093;
2095 -> 2028;
2095 -> 2093;
2096 -> 2095;
2096 -> 2029;
2096 -> 2093;
2097 -> 2093;
2098 -> 2096;
2099 -> 2030;
2100 -> 2028;
2100 -> 2099;
2101 -> 2100;
2101 -> 2029;
2101 -> 2048;
2101 -> 2061;
2101 -> 2081;
2101 -> 2099;
2102 -> 2030;
2103 -> 2028;
2103 -> 2029;
2103 -> 2026;
2104 -> 2027;
2104 -> 2029;
2104 -> 2048;
2104 -> 2061;
2104 -> 2081;
2104 -> 2101;
2104 -> 2026;
2105 -> 2028;
2105 -> 2029;
2105 -> 2048;
2105 -> 2061;
2105 -> 2081;
2105 -> 2101;
2105 -> 2104;
2106 -> 2028;
2106 -> 2104;
2107 -> 2106;
2107 -> 2104;
2107 -> 2105;
2107 -> 2029;
2107 -> 2048;
2107 -> 2061;
2107 -> 2081;
2107 -> 2101;
2108 -> 2104;
2109 -> 2107;
2109 -> 2108;
2110 -> 2107;
2110 -> 2108;
2111 -> 2110;
2111 -> 2107;
2111 -> 2108;
2112 -> 2108;
2113 -> 2110;
2113 -> 2111;
2113 -> 2112;
2113 -> 2108;
2114 -> 2109;
2114 -> 2108;
2115 -> 2108;
2116 -> 2114;
2116 -> 2115;
2117 -> 2110;
2117 -> 2115;
2118 -> 2117;
2118 -> 2111;
2118 -> 2115;
2119 -> 2116;
2119 -> 2115;
2120 -> 2115;
2121 -> 2119;
2121 -> 2120;
2122 -> 2121;
2122 -> 2120;
2123 -> 2122;
2123 -> 2118;
2123 -> 2120;
2124 -> 2115;
2125 -> 2117;
2125 -> 2123;
2125 -> 2124;
2125 -> 2115;
2126 -> 2116;
2126 -> 2115;
2127 -> 2126;
2127 -> 2123;
2127 -> 2115;
2128 -> 2127;
2128 -> 2115;
2129 -> 2115;
2130 -> 2115;
2131 -> 2130;
2131 -> 2115;
2132 -> 2116;
2132 -> 2115;
2133 -> 2129;
2133 -> 2115;
2134 -> 2130;
2134 -> 2115;
2135 -> 2115;
2136 -> 2132;
2136 -> 2135;
2137 -> 2133;
2137 -> 2135;
2138 -> 2134;
2138 -> 2135;
2139 -> 2117;
2139 -> 2135;
2140 -> 0;
2140 -> 2135;
2141 -> 2135;
2142 -> 2135;
2143 -> 2136;
2143 -> 2127;
2143 -> 2135;
2144 -> 2143;
2144 -> 2127;
2145 -> 2144;
2145 -> 2140;
2145 -> 2143;
2146 -> 2145;
2146 -> 2143;
2147 -> 2143;
2148 -> 2139;
2148 -> 2147;
2148 -> 2143;
2149 -> 2148;
2149 -> 2143;
2150 -> 2135;
2151 -> 2142;
2151 -> 2150;
2151 -> 2135;
2152 -> 0;
2152 -> 2151;
2153 -> 2135;
2154 -> 2153;
2154 -> 2115;
2155 -> 2152;
2155 -> 0;
2155 -> 2115;
2156 -> 2146;
2156 -> 0;
2156 -> 2155;
2157 -> 2155;
2158 -> 2108;
2159 -> 2110;
2159 -> 2148;
2159 -> 2108;
2160 -> 2109;
2160 -> 2148;
2160 -> 2159;
2161 -> 2110;
2161 -> 2160;
2162 -> 2110;
2162 -> 2160;
2163 -> 2162;
2163 -> 2160;
2163 -> 2161;
2164 -> 2160;
2165 -> 2164;
2166 -> 2163;
2166 -> 2165;
2166 -> 2164;
2167 -> 2163;
2167 -> 2164;
2168 -> 2164;
2169 -> 2164;
2170 -> 2169;
2170 -> 2164;
2171 -> 2168;
2171 -> 2164;
2172 -> 2169;
2172 -> 2164;
2173 -> 0;
2173 -> 2164;
2174 -> 2164;
2175 -> 2164;
2176 -> 2163;
2177 -> 2176;
2177 -> 2173;
2177 -> 2163;
2178 -> 2177;
2178 -> 2163;
2179 -> 2163;
2180 -> 2164;
2181 -> 2175;
2181 -> 2180;
2181 -> 2164;
2182 -> 0;
2182 -> 2181;
2183 -> 2164;
2184 -> 2182;
2184 -> 0;
2184 -> 2164;
2185 -> 2178;
2185 -> 0;
2185 -> 2184;
2186 -> 2184;
2187 -> 2163;
2188 -> 2027;
2188 -> 2163;
2188 -> 2026;
2189 -> 2188;
2190 -> 2189;
2191 -> 2188;
2192 -> 2188;
2193 -> 2188;
2194 -> 2192;
2194 -> 2193;
2195 -> 2028;
2195 -> 2193;
2196 -> 2195;
2196 -> 2163;
2196 -> 2193;
2197 -> 2193;
2198 -> 2196;
2199 -> 2188;
2200 -> 2199;
2200 -> 2163;
2200 -> 2189;
2201 -> 2199;
2202 -> 2199;
2202 -> 2163;
2202 -> 2189;
2202 -> 2200;
2202 -> 2201;
2203 -> 2188;
2204 -> 2188;
2205 -> 2188;
2206 -> 2204;
2206 -> 2205;
2207 -> 2028;
2207 -> 2205;
2208 -> 2207;
2208 -> 2163;
2208 -> 2205;
2209 -> 2205;
2210 -> 2208;
2211 -> 1955;
2212 -> 1980;
2212 -> 2200;
2212 -> 2211;
2212 -> 1955;
2213 -> 1963;
2213 -> 1955;
2214 -> 1955;
2215 -> 1961;
2215 -> 2214;
2215 -> 1955;
2216 -> 2215;
2217 -> 1956;
2217 -> 2216;
2218 -> 2216;
2219 -> 2217;
2219 -> 2200;
2219 -> 2218;
2220 -> 2218;
2221 -> 2219;
2221 -> 2215;
2222 -> 2221;
2223 -> 1959;
2223 -> 2221;
2224 -> 1960;
2224 -> 2221;
2225 -> 2221;
2226 -> 2222;
2226 -> 2225;
2227 -> 2222;
2227 -> 2225;
2228 -> 2223;
2228 -> 2225;
2229 -> 2224;
2229 -> 2225;
2230 -> 2226;
2230 -> 2225;
2231 -> 1896;
2231 -> 639;
2232 -> 1938;
2232 -> 639;
2233 -> 1897;
2233 -> 639;
2234 -> 2231;
2234 -> 2232;
2234 -> 2233;
2234 -> 1898;
2234 -> 2230;
2234 -> 639;
2235 -> 639;
2236 -> 640;
2236 -> 639;
2237 -> 640;
2237 -> 639;
2238 -> 640;
2238 -> 639;
2239 -> 640;
2239 -> 639;
2240 -> 639;
2241 -> 2239;
2241 -> 2234;
2241 -> 2240;
2241 -> 639;
2242 -> 2236;
2242 -> 639;
2243 -> 639;
2244 -> 2242;
2244 -> 2243;
2245 -> 2239;
2245 -> 2243;
2246 -> 2243;
2247 -> 2245;
2247 -> 2234;
2247 -> 2246;
2247 -> 2243;
2248 -> 639;
2249 -> 640;
2249 -> 639;
2250 -> 639;
2251 -> 2249;
2251 -> 2250;
2252 -> 2250;
2253 -> 2251;
2253 -> 2252;
2254 -> 2234;
2254 -> 2250;
2255 -> 639;
2256 -> 640;
2256 -> 639;
2257 -> 639;
2258 -> 2256;
2258 -> 2257;
2259 -> 2257;
2260 -> 2258;
2260 -> 2259;
2261 -> 2234;
2261 -> 2257;
2262 -> 640;
2262 -> 639;
2263 -> 640;
2263 -> 639;
2264 -> 639;
2265 -> 2263;
2265 -> 2264;
2266 -> 2265;
2266 -> 2234;
2266 -> 2264;
2267 -> 2266;
2267 -> 639;
2268 -> 2267;
2268 -> 2234;
2268 -> 639;
2269 -> 2267;
2269 -> 639;
2270 -> 2263;
2270 -> 2234;
2270 -> 639;
2271 -> 2267;
2271 -> 2268;
2272 -> 2262;
2272 -> 2234;
2272 -> 2268;
2273 -> 2268;
2274 -> 2271;
2274 -> 2273;
2275 -> 2272;
2275 -> 2273;
2276 -> 2263;
2276 -> 2273;
2277 -> 2276;
2277 -> 2234;
2277 -> 2273;
2278 -> 2274;
2278 -> 2273;
2279 -> 2277;
2279 -> 2278;
2279 -> 2273;
2280 -> 2273;
2281 -> 2274;
2281 -> 2273;
2282 -> 2280;
2282 -> 2273;
2283 -> 2276;
2283 -> 2234;
2283 -> 2281;
2283 -> 2282;
2283 -> 2273;
2284 -> 2274;
2284 -> 2273;
2285 -> 2273;
2286 -> 2273;
2287 -> 2284;
2287 -> 2286;
2288 -> 2285;
2288 -> 2286;
2289 -> 2288;
2289 -> 2286;
2290 -> 2286;
2291 -> 2287;
2291 -> 2290;
2291 -> 2286;
2292 -> 2287;
2292 -> 2288;
2292 -> 2286;
2293 -> 2274;
2293 -> 2273;
2294 -> 2285;
2294 -> 2273;
2295 -> 2276;
2295 -> 2283;
2295 -> 2293;
2295 -> 2294;
2295 -> 2292;
2295 -> 2273;
2296 -> 2295;
2296 -> 2285;
2296 -> 2273;
2297 -> 2274;
2297 -> 2296;
2298 -> 2295;
2298 -> 2296;
2299 -> 2275;
2299 -> 2296;
2300 -> 2296;
2301 -> 2297;
2301 -> 2300;
2302 -> 2298;
2302 -> 2300;
2303 -> 2299;
2303 -> 2300;
2304 -> 2276;
2304 -> 2300;
2305 -> 2304;
2305 -> 2295;
2305 -> 2300;
2306 -> 2300;
2307 -> 2302;
2307 -> 2306;
2308 -> 2307;
2308 -> 2295;
2308 -> 2306;
2309 -> 2308;
2309 -> 2300;
2310 -> 2305;
2310 -> 2295;
2310 -> 2300;
2311 -> 2304;
2311 -> 2295;
2311 -> 0;
2311 -> 2300;
2312 -> 2309;
2312 -> 2295;
2312 -> 2300;
2313 -> 2311;
2313 -> 2312;
2313 -> 2300;
2314 -> 2301;
2314 -> 2295;
2314 -> 2300;
2315 -> 2301;
2315 -> 2295;
2315 -> 2300;
2316 -> 2300;
2317 -> 2304;
2317 -> 2295;
2317 -> 2316;
2317 -> 2300;
2318 -> 2296;
2319 -> 2273;
2320 -> 2274;
2320 -> 2295;
2320 -> 2319;
2320 -> 2273;
2321 -> 2295;
2321 -> 2273;
2322 -> 2295;
2322 -> 2273;
2323 -> 640;
2323 -> 2322;
2323 -> 2320;
2323 -> 632;
2324 -> 640;
2324 -> 639;
2325 -> 2324;
2325 -> 2323;
2325 -> 639;
2326 -> 640;
2326 -> 639;
2327 -> 640;
2327 -> 639;
2328 -> 2327;
2328 -> 2325;
2328 -> 639;
2329 -> 639;
2330 -> 2329;
2330 -> 2328;
2330 -> 2325;
2330 -> 639;
2331 -> 639;
2332 -> 640;
2332 -> 2331;
2332 -> 2325;
2332 -> 632;
2333 -> 640;
2333 -> 639;
2334 -> 640;
2334 -> 639;
2335 -> 2333;
2335 -> 2332;
2335 -> 639;
2336 -> 2334;
2336 -> 2332;
2336 -> 2335;
2337 -> 2333;
2337 -> 2335;
2338 -> 2335;
2339 -> 2336;
2339 -> 2338;
2340 -> 2337;
2340 -> 2338;
2341 -> 2334;
2341 -> 2338;
2342 -> 2339;
2342 -> 2332;
2342 -> 2338;
2343 -> 2342;
2344 -> 2339;
2344 -> 2332;
2344 -> 2342;
2345 -> 2342;
2346 -> 2345;
2346 -> 2344;
2346 -> 2332;
2346 -> 2342;
2347 -> 2340;
2347 -> 2332;
2347 -> 2342;
2348 -> 2341;
2348 -> 2332;
2348 -> 2347;
2349 -> 2339;
2349 -> 2342;
2350 -> 2343;
2350 -> 2342;
2351 -> 2342;
2352 -> 2343;
2352 -> 2350;
2352 -> 2342;
2353 -> 2350;
2353 -> 2338;
2354 -> 640;
2354 -> 2353;
2354 -> 2352;
2354 -> 2350;
2354 -> 632;
2355 -> 640;
2355 -> 639;
2356 -> 2355;
2356 -> 2354;
2356 -> 639;
2357 -> 640;
2357 -> 639;
2358 -> 640;
2358 -> 639;
2359 -> 2357;
2359 -> 2356;
2359 -> 639;
2360 -> 639;
2361 -> 2358;
2361 -> 2356;
2361 -> 2360;
2362 -> 2361;
2362 -> 639;
2363 -> 639;
2364 -> 640;
2364 -> 639;
2365 -> 640;
2365 -> 639;
2366 -> 2364;
2366 -> 2362;
2366 -> 639;
2367 -> 639;
2368 -> 2366;
2368 -> 2367;
2369 -> 2365;
2369 -> 2367;
2370 -> 2369;
2370 -> 2362;
2370 -> 2367;
2371 -> 2370;
2371 -> 639;
2372 -> 639;
2373 -> 640;
2373 -> 639;
2374 -> 640;
2374 -> 639;
2375 -> 2373;
2375 -> 2371;
2375 -> 639;
2376 -> 639;
2377 -> 2375;
2377 -> 2376;
2378 -> 2374;
2378 -> 2376;
2379 -> 2376;
2380 -> 2377;
2380 -> 2376;
2381 -> 2376;
2382 -> 2380;
2382 -> 2381;
2383 -> 2378;
2383 -> 2381;
2384 -> 2381;
2385 -> 2383;
2385 -> 2384;
2386 -> 2384;
2387 -> 2386;
2387 -> 2385;
2387 -> 2384;
2388 -> 2384;
2389 -> 2385;
2389 -> 2388;
2390 -> 2389;
2390 -> 2371;
2390 -> 2387;
2390 -> 2388;
2391 -> 2390;
2391 -> 2384;
2392 -> 2391;
2392 -> 2381;
2393 -> 2381;
2394 -> 2383;
2394 -> 2393;
2395 -> 2390;
2395 -> 2381;
2396 -> 2395;
2397 -> 2392;
2397 -> 2396;
2397 -> 2395;
2398 -> 2397;
2399 -> 2376;
2400 -> 2379;
2400 -> 2376;
2401 -> 2379;
2401 -> 2376;
2402 -> 2379;
2402 -> 2376;
2403 -> 2379;
2403 -> 2376;
2404 -> 2379;
2404 -> 2376;
2405 -> 2379;
2405 -> 2376;
2406 -> 2379;
2406 -> 2376;
2407 -> 2379;
2407 -> 2376;
2408 -> 2379;
2408 -> 2390;
2408 -> 2376;
2409 -> 2408;
2409 -> 639;
2410 -> 639;
2411 -> 640;
2411 -> 639;
2412 -> 640;
2412 -> 639;
2413 -> 639;
2414 -> 2412;
2414 -> 2409;
2414 -> 639;
2415 -> 2413;
2415 -> 2414;
2415 -> 2409;
2415 -> 639;
2416 -> 639;
2417 -> 2413;
2417 -> 2415;
2417 -> 2416;
2417 -> 639;
2418 -> 2413;
2418 -> 2415;
2418 -> 2417;
2419 -> 2418;
2419 -> 2417;
2420 -> 2419;
2420 -> 2418;
2420 -> 0;
2421 -> 2420;
2422 -> 2419;
2422 -> 2418;
2422 -> 2420;
2423 -> 640;
2423 -> 639;
2424 -> 640;
2424 -> 639;
2425 -> 2423;
2425 -> 639;
2426 -> 2423;
2426 -> 2421;
2426 -> 639;
2427 -> 639;
2428 -> 2424;
2428 -> 2427;
2429 -> 2427;
2430 -> 2428;
2430 -> 2429;
2431 -> 2429;
2432 -> 2430;
2432 -> 2431;
2433 -> 2431;
2434 -> 2432;
2434 -> 2433;
2435 -> 2421;
2435 -> 2431;
2436 -> 2427;
2437 -> 2421;
2437 -> 639;
2438 -> 639;
2439 -> 2424;
2439 -> 2438;
2440 -> 640;
2440 -> 639;
2441 -> 640;
2441 -> 639;
2442 -> 640;
2442 -> 639;
2443 -> 640;
2443 -> 639;
2444 -> 639;
2445 -> 2443;
2445 -> 2421;
2445 -> 2444;
2446 -> 2444;
2447 -> 2446;
2448 -> 2447;
2449 -> 2445;
2449 -> 2447;
2450 -> 2444;
2451 -> 2445;
2451 -> 639;
2452 -> 2451;
2452 -> 2440;
2452 -> 2445;
2452 -> 639;
2453 -> 639;
2454 -> 2453;
2454 -> 639;
2455 -> 2442;
2455 -> 2454;
2455 -> 2421;
2455 -> 2453;
2455 -> 2445;
2455 -> 639;
2456 -> 639;
2457 -> 2453;
2457 -> 2455;
2457 -> 639;
2458 -> 2457;
2459 -> 2453;
2459 -> 2457;
2459 -> 639;
2460 -> 2458;
2460 -> 639;
2461 -> 640;
2461 -> 2460;
2461 -> 2459;
2461 -> 632;
2462 -> 2423;
2462 -> 2461;
2462 -> 639;
2463 -> 2461;
2463 -> 2431;
2464 -> 2461;
2464 -> 639;
2465 -> 2461;
2465 -> 2447;
2466 -> 2461;
2466 -> 639;
2467 -> 2466;
2467 -> 2440;
2467 -> 2461;
2467 -> 639;
2468 -> 640;
2468 -> 639;
2469 -> 640;
2469 -> 639;
2470 -> 639;
2471 -> 640;
2471 -> 2470;
2471 -> 2461;
2471 -> 632;
2472 -> 640;
2472 -> 639;
2473 -> 640;
2473 -> 639;
2474 -> 2473;
2474 -> 639;
2475 -> 2472;
2475 -> 639;
2476 -> 2473;
2476 -> 2471;
2476 -> 639;
2477 -> 2474;
2477 -> 2475;
2477 -> 2476;
2477 -> 2473;
2477 -> 2471;
2477 -> 639;
2478 -> 639;
2479 -> 2477;
2479 -> 0;
2479 -> 2478;
2480 -> 2478;
2481 -> 2477;
2482 -> 2477;
2482 -> 2478;
2483 -> 2478;
2484 -> 2483;
2485 -> 2477;
2485 -> 2483;
2486 -> 2478;
2487 -> 2478;
2488 -> 640;
2488 -> 639;
2489 -> 640;
2489 -> 639;
2490 -> 640;
2490 -> 639;
2491 -> 640;
2491 -> 639;
2492 -> 640;
2492 -> 639;
2493 -> 640;
2493 -> 639;
2494 -> 2488;
2494 -> 639;
2495 -> 2494;
2495 -> 2477;
2495 -> 639;
2496 -> 639;
2497 -> 2491;
2497 -> 2496;
2497 -> 639;
2498 -> 2488;
2498 -> 639;
2499 -> 2489;
2499 -> 639;
2500 -> 2490;
2500 -> 639;
2501 -> 2492;
2501 -> 639;
2502 -> 639;
2503 -> 2498;
2503 -> 2502;
2504 -> 2499;
2504 -> 2502;
2505 -> 2500;
2505 -> 2502;
2506 -> 2501;
2506 -> 2502;
2507 -> 2493;
2507 -> 2502;
2508 -> 2502;
2509 -> 2502;
2510 -> 2503;
2510 -> 2495;
2510 -> 2502;
2511 -> 2510;
2511 -> 2495;
2511 -> 2502;
2512 -> 2503;
2512 -> 2495;
2512 -> 2502;
2513 -> 2503;
2513 -> 2512;
2513 -> 2502;
2514 -> 2506;
2514 -> 2513;
2515 -> 2503;
2515 -> 2512;
2515 -> 2514;
2516 -> 2510;
2516 -> 2514;
2517 -> 2514;
2518 -> 2516;
2518 -> 2517;
2519 -> 2517;
2520 -> 2518;
2520 -> 2519;
2520 -> 2517;
2521 -> 2520;
2522 -> 2518;
2522 -> 2512;
2522 -> 2520;
2523 -> 2517;
2524 -> 2523;
2524 -> 2514;
2525 -> 2515;
2525 -> 2524;
2525 -> 2514;
2526 -> 2503;
2526 -> 2525;
2527 -> 2503;
2527 -> 2512;
2527 -> 2525;
2528 -> 2502;
2529 -> 2507;
2529 -> 2512;
2529 -> 2528;
2529 -> 2502;
2530 -> 2503;
2530 -> 2512;
2530 -> 2502;
2531 -> 639;
2532 -> 2491;
2532 -> 2531;
2532 -> 639;
2533 -> 2530;
2533 -> 2532;
2534 -> 640;
2534 -> 639;
2535 -> 640;
2535 -> 639;
2536 -> 640;
2536 -> 639;
2537 -> 640;
2537 -> 639;
2538 -> 639;
2539 -> 2536;
2539 -> 2538;
2539 -> 639;
2540 -> 2534;
2540 -> 2533;
2540 -> 639;
2541 -> 2534;
2541 -> 2540;
2542 -> 2535;
2542 -> 2540;
2543 -> 2536;
2543 -> 2540;
2544 -> 2540;
2545 -> 2540;
2546 -> 2541;
2546 -> 2545;
2547 -> 2542;
2547 -> 2545;
2548 -> 2543;
2548 -> 2545;
2549 -> 2544;
2549 -> 2545;
2550 -> 2544;
2550 -> 2545;
2551 -> 2537;
2551 -> 2545;
2552 -> 2546;
2552 -> 2533;
2552 -> 2545;
2553 -> 2545;
2554 -> 2548;
2554 -> 2553;
2554 -> 2545;
2555 -> 2546;
2555 -> 2552;
2555 -> 2545;
2556 -> 2546;
2556 -> 2552;
2556 -> 2555;
2557 -> 2546;
2557 -> 2552;
2557 -> 0;
2557 -> 2545;
2558 -> 2546;
2558 -> 2552;
2558 -> 2545;
2559 -> 2550;
2559 -> 2558;
2560 -> 2559;
2561 -> 2559;
2562 -> 2546;
2562 -> 2552;
2562 -> 2559;
2563 -> 2559;
2564 -> 2562;
2564 -> 2563;
2565 -> 2563;
2566 -> 2564;
2566 -> 2565;
2567 -> 2565;
2568 -> 2566;
2568 -> 2567;
2568 -> 2565;
2569 -> 2565;
2570 -> 2569;
2570 -> 2563;
2571 -> 2546;
2571 -> 2552;
2571 -> 2570;
2572 -> 2546;
2572 -> 2552;
2572 -> 2545;
2573 -> 2551;
2573 -> 2552;
2573 -> 2545;
2574 -> 2546;
2574 -> 2552;
2574 -> 2545;
2575 -> 640;
2575 -> 639;
2576 -> 640;
2576 -> 639;
2577 -> 640;
2577 -> 639;
2578 -> 640;
2578 -> 639;
2579 -> 640;
2579 -> 639;
2580 -> 640;
2580 -> 639;
2581 -> 639;
2582 -> 2577;
2582 -> 2581;
2582 -> 639;
2583 -> 2575;
2583 -> 2573;
2583 -> 639;
2584 -> 2575;
2584 -> 2573;
2584 -> 2583;
2585 -> 2575;
2585 -> 2573;
2585 -> 0;
2585 -> 639;
2586 -> 2575;
2586 -> 2573;
2586 -> 639;
2587 -> 2579;
2587 -> 2586;
2588 -> 2575;
2588 -> 2573;
2588 -> 639;
2589 -> 640;
2589 -> 639;
2590 -> 640;
2590 -> 639;
2591 -> 640;
2591 -> 639;
2592 -> 2591;
2592 -> 2573;
2592 -> 639;
2593 -> 2589;
2593 -> 639;
2594 -> 2592;
2594 -> 2593;
2594 -> 639;
2595 -> 639;
2596 -> 2589;
2596 -> 2595;
2596 -> 639;
2597 -> 639;
2598 -> 2589;
2598 -> 639;
2599 -> 2597;
2599 -> 639;
2600 -> 2591;
2600 -> 2573;
2600 -> 2598;
2600 -> 2599;
2600 -> 639;
2601 -> 2600;
2602 -> 2575;
2602 -> 2601;
2602 -> 639;
2603 -> 2575;
2603 -> 2601;
2603 -> 2602;
2604 -> 2575;
2604 -> 2601;
2604 -> 0;
2604 -> 639;
2605 -> 2575;
2605 -> 2601;
2605 -> 639;
2606 -> 2579;
2606 -> 2605;
2607 -> 2575;
2607 -> 2601;
2607 -> 639;
2608 -> 640;
2608 -> 639;
2609 -> 640;
2609 -> 639;
2610 -> 2608;
2610 -> 639;
2611 -> 639;
2612 -> 2610;
2612 -> 2611;
2612 -> 2601;
2612 -> 639;
2613 -> 2608;
2613 -> 639;
2614 -> 2613;
2614 -> 2601;
2614 -> 2612;
2614 -> 639;
2615 -> 639;
2616 -> 2614;
2616 -> 2615;
2617 -> 2616;
2617 -> 2614;
2617 -> 2615;
2618 -> 2616;
2618 -> 2614;
2618 -> 2617;
2619 -> 2618;
2619 -> 2617;
2620 -> 2617;
2621 -> 2619;
2621 -> 2620;
2622 -> 2621;
2622 -> 2614;
2622 -> 0;
2622 -> 2620;
2623 -> 2621;
2623 -> 2614;
2623 -> 2620;
2624 -> 2620;
2625 -> 2623;
2625 -> 2624;
2626 -> 2624;
2627 -> 2625;
2627 -> 2626;
2627 -> 2624;
2628 -> 2627;
2629 -> 2625;
2629 -> 2614;
2629 -> 2627;
2630 -> 2624;
2631 -> 2630;
2631 -> 2620;
2632 -> 2622;
2632 -> 2631;
2632 -> 2620;
2633 -> 2615;
2634 -> 2633;
2634 -> 639;
2635 -> 2614;
2635 -> 2634;
2635 -> 639;
2636 -> 2608;
2636 -> 639;
2637 -> 2635;
2637 -> 639;
2638 -> 639;
2639 -> 2637;
2639 -> 2638;
2640 -> 2639;
2640 -> 2637;
2640 -> 2638;
2641 -> 2639;
2641 -> 2637;
2641 -> 2640;
2642 -> 2641;
2642 -> 2640;
2643 -> 2640;
2644 -> 2642;
2644 -> 2643;
2645 -> 2644;
2645 -> 2637;
2645 -> 0;
2645 -> 2643;
2646 -> 2644;
2646 -> 2637;
2646 -> 2643;
2647 -> 2643;
2648 -> 2646;
2648 -> 2647;
2649 -> 2647;
2650 -> 2648;
2650 -> 2649;
2650 -> 2647;
2651 -> 2650;
2652 -> 2648;
2652 -> 2637;
2652 -> 2650;
2653 -> 2647;
2654 -> 2653;
2654 -> 2643;
2655 -> 2645;
2655 -> 2654;
2655 -> 2643;
2656 -> 2638;
2657 -> 2635;
2657 -> 639;
2658 -> 2608;
2658 -> 2657;
2659 -> 2657;
2660 -> 2658;
2660 -> 2659;
2660 -> 2601;
2660 -> 2637;
2660 -> 2657;
2661 -> 2535;
2661 -> 2660;
2662 -> 2536;
2662 -> 2660;
2663 -> 2661;
2663 -> 2660;
2664 -> 2662;
2664 -> 2660;
2665 -> 2660;
2666 -> 2660;
2667 -> 2660;
2668 -> 2664;
2668 -> 2667;
2668 -> 2660;
2669 -> 2660;
2670 -> 2660;
2670 -> 2669;
2671 -> 2660;
2671 -> 0;
2672 -> 2660;
2673 -> 2666;
2673 -> 2672;
2674 -> 2673;
2675 -> 2673;
2676 -> 2660;
2676 -> 2673;
2677 -> 2673;
2678 -> 2676;
2678 -> 2677;
2679 -> 2677;
2680 -> 2678;
2680 -> 2679;
2681 -> 2679;
2682 -> 2680;
2682 -> 2681;
2682 -> 2679;
2683 -> 2679;
2684 -> 2683;
2684 -> 2677;
2685 -> 2660;
2685 -> 2684;
2686 -> 2660;
2687 -> 640;
2687 -> 639;
2688 -> 640;
2688 -> 639;
2689 -> 640;
2689 -> 639;
2690 -> 2687;
2690 -> 2660;
2690 -> 639;
2691 -> 639;
2692 -> 2690;
2692 -> 2691;
2692 -> 639;
2693 -> 2688;
2693 -> 0;
2693 -> 2692;
2694 -> 2690;
2694 -> 2688;
2694 -> 2692;
2695 -> 2688;
2695 -> 0;
2695 -> 2694;
2696 -> 2535;
2696 -> 2694;
2697 -> 2536;
2697 -> 2694;
2698 -> 2696;
2698 -> 2694;
2699 -> 2697;
2699 -> 2694;
2700 -> 2694;
2701 -> 2694;
2702 -> 2694;
2703 -> 2699;
2703 -> 2702;
2703 -> 2694;
2704 -> 2694;
2705 -> 2694;
2705 -> 2704;
2706 -> 2694;
2706 -> 0;
2707 -> 2694;
2708 -> 2701;
2708 -> 2707;
2709 -> 2708;
2710 -> 2708;
2711 -> 2694;
2711 -> 2708;
2712 -> 2708;
2713 -> 2711;
2713 -> 2712;
2714 -> 2712;
2715 -> 2713;
2715 -> 2714;
2716 -> 2714;
2717 -> 2715;
2717 -> 2716;
2717 -> 2714;
2718 -> 2714;
2719 -> 2718;
2719 -> 2712;
2720 -> 2694;
2720 -> 2719;
2721 -> 2694;
2722 -> 2575;
2722 -> 2694;
2722 -> 639;
2723 -> 2575;
2723 -> 2694;
2723 -> 2722;
2724 -> 2575;
2724 -> 2694;
2724 -> 0;
2724 -> 639;
2725 -> 2575;
2725 -> 2694;
2725 -> 639;
2726 -> 2579;
2726 -> 2725;
2727 -> 2575;
2727 -> 2694;
2727 -> 639;
2728 -> 2591;
2728 -> 2694;
2728 -> 639;
2729 -> 2694;
2729 -> 2615;
2730 -> 2729;
2730 -> 2694;
2730 -> 2615;
2731 -> 2729;
2731 -> 2694;
2731 -> 2730;
2732 -> 2731;
2732 -> 2730;
2733 -> 2730;
2734 -> 2732;
2734 -> 2733;
2735 -> 2734;
2735 -> 2694;
2735 -> 0;
2735 -> 2733;
2736 -> 2734;
2736 -> 2694;
2736 -> 2733;
2737 -> 2733;
2738 -> 2736;
2738 -> 2737;
2739 -> 2737;
2740 -> 2738;
2740 -> 2739;
2740 -> 2737;
2741 -> 2740;
2742 -> 2738;
2742 -> 2694;
2742 -> 2740;
2743 -> 2737;
2744 -> 2743;
2744 -> 2733;
2745 -> 2735;
2745 -> 2744;
2745 -> 2733;
2746 -> 2694;
2746 -> 2638;
2747 -> 2746;
2747 -> 2694;
2747 -> 2638;
2748 -> 2746;
2748 -> 2694;
2748 -> 2747;
2749 -> 2748;
2749 -> 2747;
2750 -> 2747;
2751 -> 2749;
2751 -> 2750;
2752 -> 2751;
2752 -> 2694;
2752 -> 0;
2752 -> 2750;
2753 -> 2751;
2753 -> 2694;
2753 -> 2750;
2754 -> 2750;
2755 -> 2753;
2755 -> 2754;
2756 -> 2754;
2757 -> 2755;
2757 -> 2756;
2757 -> 2754;
2758 -> 2757;
2759 -> 2755;
2759 -> 2694;
2759 -> 2757;
2760 -> 2754;
2761 -> 2760;
2761 -> 2750;
2762 -> 2752;
2762 -> 2761;
2762 -> 2750;
2763 -> 2503;
2763 -> 2694;
2763 -> 2502;
2764 -> 2763;
2764 -> 2694;
2764 -> 2502;
2765 -> 2503;
2765 -> 2694;
2765 -> 2502;
2766 -> 2506;
2766 -> 2765;
2767 -> 2503;
2767 -> 2694;
2767 -> 2766;
2768 -> 2763;
2768 -> 2766;
2769 -> 2766;
2770 -> 2768;
2770 -> 2769;
2771 -> 2769;
2772 -> 2770;
2772 -> 2771;
2772 -> 2769;
2773 -> 2772;
2774 -> 2770;
2774 -> 2694;
2774 -> 2772;
2775 -> 2769;
2776 -> 2775;
2776 -> 2766;
2777 -> 2767;
2777 -> 2776;
2777 -> 2766;
2778 -> 2503;
2778 -> 2777;
2779 -> 2503;
2779 -> 2694;
2779 -> 2777;
2780 -> 2507;
2780 -> 2694;
2780 -> 2528;
2780 -> 2502;
2781 -> 2717;
2782 -> 2715;
2782 -> 2694;
2782 -> 2717;
2783 -> 640;
2783 -> 639;
2784 -> 2783;
2784 -> 2694;
2784 -> 639;
2785 -> 639;
2786 -> 2262;
2786 -> 2784;
2787 -> 2786;
2787 -> 2784;
2788 -> 2784;
2789 -> 2784;
2790 -> 2327;
2790 -> 2789;
2790 -> 639;
2791 -> 2329;
2791 -> 2790;
2791 -> 2789;
2791 -> 639;
2792 -> 640;
2792 -> 639;
2793 -> 2792;
2793 -> 639;
2794 -> 2793;
2794 -> 2792;
2794 -> 2789;
2794 -> 639;
2795 -> 639;
2796 -> 2357;
2796 -> 2794;
2796 -> 639;
2797 -> 2364;
2797 -> 2794;
2797 -> 639;
2798 -> 2797;
2798 -> 2367;
2799 -> 2373;
2799 -> 2794;
2799 -> 639;
2800 -> 2799;
2800 -> 2376;
2801 -> 2800;
2801 -> 2376;
2802 -> 2801;
2802 -> 2381;
2803 -> 2794;
2803 -> 2384;
2804 -> 2803;
2804 -> 2381;
2805 -> 2794;
2805 -> 2381;
2806 -> 2805;
2807 -> 2804;
2807 -> 2806;
2807 -> 2805;
2808 -> 2807;
2809 -> 2423;
2809 -> 2794;
2809 -> 639;
2810 -> 2794;
2810 -> 2431;
2811 -> 2794;
2811 -> 639;
2812 -> 2794;
2812 -> 2447;
2813 -> 2794;
2813 -> 639;
2814 -> 2813;
2814 -> 2440;
2814 -> 2794;
2814 -> 639;
2815 -> 2453;
2815 -> 2794;
2816 -> 2794;
2817 -> 2453;
2817 -> 2794;
2818 -> 2817;
2818 -> 2815;
2818 -> 2794;
2819 -> 2794;
2820 -> 2818;
2820 -> 2819;
2820 -> 2794;
2821 -> 2441;
2821 -> 2820;
2822 -> 2818;
2822 -> 2820;
2823 -> 2820;
2824 -> 2821;
2824 -> 2823;
2825 -> 2822;
2825 -> 2823;
2826 -> 2443;
2826 -> 2823;
2827 -> 2825;
2827 -> 2824;
2827 -> 2823;
2828 -> 2827;
2829 -> 2575;
2829 -> 2828;
2829 -> 639;
2830 -> 2575;
2830 -> 2828;
2830 -> 2829;
2831 -> 2575;
2831 -> 2828;
2831 -> 0;
2831 -> 639;
2832 -> 2575;
2832 -> 2828;
2832 -> 639;
2833 -> 2579;
2833 -> 2832;
2834 -> 2833;
2835 -> 2833;
2836 -> 2575;
2836 -> 2828;
2836 -> 2833;
2837 -> 2833;
2838 -> 2836;
2838 -> 2837;
2839 -> 2837;
2840 -> 2838;
2840 -> 2839;
2841 -> 2839;
2842 -> 2840;
2842 -> 2841;
2842 -> 2839;
2843 -> 2839;
2844 -> 2843;
2844 -> 2837;
2845 -> 2575;
2845 -> 2828;
2845 -> 2844;
2846 -> 2575;
2846 -> 2828;
2846 -> 639;
2847 -> 2591;
2847 -> 2828;
2847 -> 639;
2848 -> 2423;
2848 -> 2828;
2848 -> 639;
2849 -> 2828;
2849 -> 2431;
2850 -> 2828;
2850 -> 639;
2851 -> 2828;
2851 -> 2447;
2852 -> 2828;
2852 -> 639;
2853 -> 2852;
2853 -> 2440;
2853 -> 2828;
2853 -> 639;
2854 -> 2535;
2854 -> 2828;
2855 -> 2536;
2855 -> 2828;
2856 -> 2854;
2856 -> 2828;
2857 -> 2855;
2857 -> 2828;
2858 -> 2828;
2859 -> 2828;
2860 -> 2828;
2861 -> 2857;
2861 -> 2860;
2861 -> 2828;
2862 -> 2828;
2863 -> 2828;
2863 -> 2862;
2864 -> 2828;
2864 -> 0;
2865 -> 2828;
2866 -> 2859;
2866 -> 2865;
2867 -> 2866;
2868 -> 2866;
2869 -> 2828;
2869 -> 2866;
2870 -> 2866;
2871 -> 2869;
2871 -> 2870;
2872 -> 2870;
2873 -> 2871;
2873 -> 2872;
2874 -> 2872;
2875 -> 2873;
2875 -> 2874;
2875 -> 2872;
2876 -> 2872;
2877 -> 2876;
2877 -> 2870;
2878 -> 2828;
2878 -> 2877;
2879 -> 2828;
2880 -> 640;
2880 -> 639;
2881 -> 640;
2881 -> 639;
2882 -> 2881;
2882 -> 2828;
2882 -> 639;
2883 -> 2881;
2883 -> 2828;
2883 -> 639;
2884 -> 2883;
2885 -> 2881;
2885 -> 2884;
2886 -> 2885;
2886 -> 2828;
2886 -> 2884;
2887 -> 2884;
2888 -> 2885;
2888 -> 2828;
2888 -> 2884;
2889 -> 2886;
2889 -> 2828;
2889 -> 2888;
2890 -> 2888;
2891 -> 2890;
2891 -> 2889;
2891 -> 2828;
2891 -> 2888;
2892 -> 2885;
2892 -> 2828;
2892 -> 2884;
2893 -> 2884;
2894 -> 2886;
2894 -> 2828;
2894 -> 2893;
2895 -> 2894;
2895 -> 2884;
2896 -> 2886;
2896 -> 2884;
2897 -> 2887;
2897 -> 2884;
2898 -> 2884;
2899 -> 2896;
2899 -> 2898;
2900 -> 2897;
2900 -> 2898;
2901 -> 2898;
2902 -> 2901;
2902 -> 2898;
2903 -> 2899;
2903 -> 2828;
2903 -> 2898;
2904 -> 2900;
2904 -> 2898;
2905 -> 2898;
2906 -> 2902;
2906 -> 2905;
2907 -> 2903;
2907 -> 2905;
2908 -> 2904;
2908 -> 2905;
2909 -> 2905;
2910 -> 2907;
2910 -> 2909;
2910 -> 2905;
2911 -> 2898;
2912 -> 2898;
2913 -> 2899;
2913 -> 2903;
2913 -> 2912;
2914 -> 2913;
2914 -> 2898;
2915 -> 2901;
2915 -> 2914;
2916 -> 2899;
2916 -> 2903;
2916 -> 2914;
2917 -> 2900;
2917 -> 2914;
2918 -> 2914;
2919 -> 2915;
2919 -> 2918;
2920 -> 2916;
2920 -> 2918;
2921 -> 2917;
2921 -> 2918;
2922 -> 2918;
2923 -> 2920;
2923 -> 2922;
2923 -> 2918;
2924 -> 2914;
2925 -> 2901;
2925 -> 2898;
2926 -> 2925;
2926 -> 2884;
2927 -> 2887;
2927 -> 2884;
2928 -> 2927;
2928 -> 2883;
2929 -> 2928;
2929 -> 2881;
2929 -> 2883;
2930 -> 2883;
2931 -> 2881;
2931 -> 2916;
2931 -> 2929;
2931 -> 2927;
2931 -> 2930;
2931 -> 2883;
2932 -> 2881;
2932 -> 2916;
2932 -> 2929;
2932 -> 639;
2933 -> 640;
2933 -> 639;
2934 -> 640;
2934 -> 639;
2935 -> 640;
2935 -> 639;
2936 -> 2935;
2936 -> 2932;
2936 -> 639;
2937 -> 2936;
2937 -> 2932;
2937 -> 639;
2938 -> 639;
2939 -> 2938;
2939 -> 2937;
2939 -> 639;
2940 -> 640;
2940 -> 639;
2941 -> 0;
2941 -> 639;
2942 -> 640;
2942 -> 2941;
2942 -> 2932;
2942 -> 0;
2942 -> 632;
2943 -> 2575;
2943 -> 2942;
2943 -> 639;
2944 -> 2575;
2944 -> 2942;
2944 -> 2943;
2945 -> 2575;
2945 -> 2942;
2945 -> 0;
2945 -> 639;
2946 -> 2575;
2946 -> 2942;
2946 -> 639;
2947 -> 2579;
2947 -> 2946;
2948 -> 2575;
2948 -> 2942;
2948 -> 639;
2949 -> 2591;
2949 -> 2942;
2949 -> 639;
2950 -> 2535;
2950 -> 2942;
2951 -> 2536;
2951 -> 2942;
2952 -> 2950;
2952 -> 2942;
2953 -> 2951;
2953 -> 2942;
2954 -> 2942;
2955 -> 2942;
2956 -> 2942;
2957 -> 2953;
2957 -> 2956;
2957 -> 2942;
2958 -> 2942;
2959 -> 2942;
2959 -> 2958;
2960 -> 2942;
2960 -> 0;
2961 -> 2942;
2962 -> 2955;
2962 -> 2961;
2963 -> 2962;
2964 -> 2962;
2965 -> 2942;
2965 -> 2962;
2966 -> 2962;
2967 -> 2965;
2967 -> 2966;
2968 -> 2966;
2969 -> 2967;
2969 -> 2968;
2970 -> 2968;
2971 -> 2969;
2971 -> 2970;
2971 -> 2968;
2972 -> 2968;
2973 -> 2972;
2973 -> 2966;
2974 -> 2942;
2974 -> 2973;
2975 -> 2942;
2976 -> 2688;
2976 -> 0;
2976 -> 2942;
2977 -> 640;
2977 -> 639;
2978 -> 2977;
2978 -> 2942;
2978 -> 639;
2979 -> 640;
2979 -> 639;
2980 -> 2979;
2980 -> 2978;
2980 -> 639;
2981 -> 2881;
2981 -> 2980;
2981 -> 639;
2982 -> 2575;
2982 -> 2980;
2982 -> 639;
2983 -> 2575;
2983 -> 2980;
2983 -> 2982;
2984 -> 2575;
2984 -> 2980;
2984 -> 0;
2984 -> 639;
2985 -> 2575;
2985 -> 2980;
2985 -> 639;
2986 -> 2579;
2986 -> 2985;
2987 -> 2575;
2987 -> 2980;
2987 -> 639;
2988 -> 640;
2988 -> 639;
2989 -> 2988;
2989 -> 2980;
2989 -> 639;
2990 -> 0;
2990 -> 2989;
2991 -> 2535;
2991 -> 2990;
2992 -> 2536;
2992 -> 2990;
2993 -> 2991;
2993 -> 2990;
2994 -> 2992;
2994 -> 2990;
2995 -> 2990;
2996 -> 2990;
2997 -> 2990;
2998 -> 2994;
2998 -> 2997;
2998 -> 2990;
2999 -> 2990;
3000 -> 2990;
3000 -> 2999;
3001 -> 2990;
3001 -> 0;
3002 -> 2990;
3003 -> 2996;
3003 -> 3002;
3004 -> 3003;
3005 -> 3003;
3006 -> 2990;
3006 -> 3003;
3007 -> 3003;
3008 -> 3006;
3008 -> 3007;
3009 -> 3007;
3010 -> 3008;
3010 -> 3009;
3011 -> 3009;
3012 -> 3010;
3012 -> 3011;
3012 -> 3009;
3013 -> 3009;
3014 -> 3013;
3014 -> 3007;
3015 -> 2990;
3015 -> 3014;
3016 -> 2990;
3017 -> 2688;
3017 -> 0;
3017 -> 2990;
3018 -> 640;
3018 -> 639;
3019 -> 3018;
3019 -> 2990;
3019 -> 639;
3020 -> 2575;
3020 -> 3019;
3020 -> 639;
3021 -> 2575;
3021 -> 3019;
3021 -> 3020;
3022 -> 2575;
3022 -> 3019;
3022 -> 0;
3022 -> 639;
3023 -> 2575;
3023 -> 3019;
3023 -> 639;
3024 -> 2579;
3024 -> 3023;
3025 -> 3024;
3026 -> 3024;
3027 -> 2575;
3027 -> 3019;
3027 -> 3024;
3028 -> 3024;
3029 -> 3027;
3029 -> 3028;
3030 -> 3028;
3031 -> 3029;
3031 -> 3030;
3032 -> 3030;
3033 -> 3031;
3033 -> 3032;
3033 -> 3030;
3034 -> 3030;
3035 -> 3034;
3035 -> 3028;
3036 -> 2575;
3036 -> 3019;
3036 -> 3035;
3037 -> 2575;
3037 -> 3019;
3037 -> 639;
3038 -> 2988;
3038 -> 3019;
3039 -> 0;
3039 -> 3038;
3040 -> 2591;
3040 -> 3039;
3040 -> 639;
3041 -> 2575;
3041 -> 3039;
3041 -> 639;
3042 -> 2575;
3042 -> 3039;
3042 -> 3041;
3043 -> 2575;
3043 -> 3039;
3043 -> 0;
3043 -> 639;
3044 -> 2575;
3044 -> 3039;
3044 -> 639;
3045 -> 2579;
3045 -> 3044;
3046 -> 2575;
3046 -> 3039;
3046 -> 639;
3047 -> 3039;
3047 -> 0;
3047 -> 2478;
3048 -> 3039;
3049 -> 3039;
3049 -> 2478;
3050 -> 2503;
3050 -> 3039;
3050 -> 2502;
3051 -> 3050;
3051 -> 3039;
3051 -> 2502;
3052 -> 2503;
3052 -> 3039;
3052 -> 2502;
3053 -> 2506;
3053 -> 3052;
3054 -> 2503;
3054 -> 3039;
3054 -> 3053;
3055 -> 3050;
3055 -> 3053;
3056 -> 3053;
3057 -> 3055;
3057 -> 3056;
3058 -> 3056;
3059 -> 3057;
3059 -> 3058;
3059 -> 3056;
3060 -> 3059;
3061 -> 3057;
3061 -> 3039;
3061 -> 3059;
3062 -> 3056;
3063 -> 3062;
3063 -> 3053;
3064 -> 3054;
3064 -> 3063;
3064 -> 3053;
3065 -> 2503;
3065 -> 3064;
3066 -> 2503;
3066 -> 3039;
3066 -> 3064;
3067 -> 2507;
3067 -> 3039;
3067 -> 2528;
3067 -> 2502;
3068 -> 3039;
3068 -> 2615;
3069 -> 3068;
3069 -> 3039;
3069 -> 2615;
3070 -> 3068;
3070 -> 3039;
3070 -> 3069;
3071 -> 3070;
3071 -> 3069;
3072 -> 3069;
3073 -> 3071;
3073 -> 3072;
3074 -> 3073;
3074 -> 3039;
3074 -> 0;
3074 -> 3072;
3075 -> 3073;
3075 -> 3039;
3075 -> 3072;
3076 -> 3072;
3077 -> 3075;
3077 -> 3076;
3078 -> 3076;
3079 -> 3077;
3079 -> 3078;
3079 -> 3076;
3080 -> 3079;
3081 -> 3077;
3081 -> 3039;
3081 -> 3079;
3082 -> 3076;
3083 -> 3082;
3083 -> 3072;
3084 -> 3074;
3084 -> 3083;
3084 -> 3072;
3085 -> 3039;
3085 -> 2638;
3086 -> 3085;
3086 -> 3039;
3086 -> 2638;
3087 -> 3085;
3087 -> 3039;
3087 -> 3086;
3088 -> 3087;
3088 -> 3086;
3089 -> 3086;
3090 -> 3088;
3090 -> 3089;
3091 -> 3090;
3091 -> 3039;
3091 -> 0;
3091 -> 3089;
3092 -> 3090;
3092 -> 3039;
3092 -> 3089;
3093 -> 3089;
3094 -> 3092;
3094 -> 3093;
3095 -> 3093;
3096 -> 3094;
3096 -> 3095;
3096 -> 3093;
3097 -> 3096;
3098 -> 3094;
3098 -> 3039;
3098 -> 3096;
3099 -> 3093;
3100 -> 3099;
3100 -> 3089;
3101 -> 3091;
3101 -> 3100;
3101 -> 3089;
3102 -> 2535;
3102 -> 3039;
3103 -> 2536;
3103 -> 3039;
3104 -> 3102;
3104 -> 3039;
3105 -> 3103;
3105 -> 3039;
3106 -> 3039;
3107 -> 3039;
3108 -> 3039;
3109 -> 3105;
3109 -> 3108;
3109 -> 3039;
3110 -> 3039;
3111 -> 3039;
3111 -> 3110;
3112 -> 3039;
3112 -> 0;
3113 -> 3039;
3114 -> 3107;
3114 -> 3113;
3115 -> 3114;
3116 -> 3114;
3117 -> 3039;
3117 -> 3114;
3118 -> 3114;
3119 -> 3117;
3119 -> 3118;
3120 -> 3118;
3121 -> 3119;
3121 -> 3120;
3122 -> 3120;
3123 -> 3121;
3123 -> 3122;
3123 -> 3120;
3124 -> 3120;
3125 -> 3124;
3125 -> 3118;
3126 -> 3039;
3126 -> 3125;
3127 -> 3039;
3128 -> 2688;
3128 -> 0;
3128 -> 3039;
3129 -> 0;
3129 -> 3128;
3130 -> 3129;
3130 -> 2689;
3130 -> 3039;
3130 -> 3128;
3131 -> 3128;
3132 -> 3130;
3132 -> 3131;
3133 -> 2503;
3133 -> 3130;
3133 -> 2502;
3134 -> 3133;
3134 -> 3130;
3134 -> 2502;
3135 -> 2503;
3135 -> 3130;
3135 -> 2502;
3136 -> 2506;
3136 -> 3135;
3137 -> 2503;
3137 -> 3130;
3137 -> 3136;
3138 -> 3133;
3138 -> 3136;
3139 -> 3136;
3140 -> 3138;
3140 -> 3139;
3141 -> 3139;
3142 -> 3140;
3142 -> 3141;
3142 -> 3139;
3143 -> 3142;
3144 -> 3140;
3144 -> 3130;
3144 -> 3142;
3145 -> 3139;
3146 -> 3145;
3146 -> 3136;
3147 -> 3137;
3147 -> 3146;
3147 -> 3136;
3148 -> 2503;
3148 -> 3147;
3149 -> 2503;
3149 -> 3130;
3149 -> 3147;
3150 -> 2507;
3150 -> 3130;
3150 -> 2528;
3150 -> 2502;
3151 -> 2575;
3151 -> 3130;
3151 -> 639;
3152 -> 2575;
3152 -> 3130;
3152 -> 3151;
3153 -> 2575;
3153 -> 3130;
3153 -> 0;
3153 -> 639;
3154 -> 2575;
3154 -> 3130;
3154 -> 639;
3155 -> 2579;
3155 -> 3154;
3156 -> 2575;
3156 -> 3130;
3156 -> 639;
3157 -> 2591;
3157 -> 3130;
3157 -> 639;
3158 -> 2535;
3158 -> 3130;
3159 -> 2536;
3159 -> 3130;
3160 -> 3158;
3160 -> 3130;
3161 -> 3159;
3161 -> 3130;
3162 -> 3130;
3163 -> 3130;
3164 -> 3130;
3165 -> 3161;
3165 -> 3164;
3165 -> 3130;
3166 -> 3130;
3167 -> 3130;
3167 -> 3166;
3168 -> 3130;
3168 -> 0;
3169 -> 3130;
3170 -> 3163;
3170 -> 3169;
3171 -> 3170;
3172 -> 3170;
3173 -> 3130;
3173 -> 3170;
3174 -> 3170;
3175 -> 3173;
3175 -> 3174;
3176 -> 3174;
3177 -> 3175;
3177 -> 3176;
3178 -> 3176;
3179 -> 3177;
3179 -> 3178;
3179 -> 3176;
3180 -> 3176;
3181 -> 3180;
3181 -> 3174;
3182 -> 3130;
3182 -> 3181;
3183 -> 3130;
3184 -> 3130;
3184 -> 2615;
3185 -> 3184;
3185 -> 3130;
3185 -> 2615;
3186 -> 3184;
3186 -> 3130;
3186 -> 3185;
3187 -> 3186;
3187 -> 3185;
3188 -> 3185;
3189 -> 3187;
3189 -> 3188;
3190 -> 3189;
3190 -> 3130;
3190 -> 0;
3190 -> 3188;
3191 -> 3189;
3191 -> 3130;
3191 -> 3188;
3192 -> 3188;
3193 -> 3191;
3193 -> 3192;
3194 -> 3192;
3195 -> 3193;
3195 -> 3194;
3195 -> 3192;
3196 -> 3195;
3197 -> 3193;
3197 -> 3130;
3197 -> 3195;
3198 -> 3192;
3199 -> 3198;
3199 -> 3188;
3200 -> 3190;
3200 -> 3199;
3200 -> 3188;
3201 -> 3130;
3201 -> 2638;
3202 -> 3201;
3202 -> 3130;
3202 -> 2638;
3203 -> 3201;
3203 -> 3130;
3203 -> 3202;
3204 -> 3203;
3204 -> 3202;
3205 -> 3202;
3206 -> 3204;
3206 -> 3205;
3207 -> 3206;
3207 -> 3130;
3207 -> 0;
3207 -> 3205;
3208 -> 3206;
3208 -> 3130;
3208 -> 3205;
3209 -> 3205;
3210 -> 3208;
3210 -> 3209;
3211 -> 3209;
3212 -> 3210;
3212 -> 3211;
3212 -> 3209;
3213 -> 3212;
3214 -> 3210;
3214 -> 3130;
3214 -> 3212;
3215 -> 3209;
3216 -> 3215;
3216 -> 3205;
3217 -> 3207;
3217 -> 3216;
3217 -> 3205;
3218 -> 3179;
3219 -> 3177;
3219 -> 3130;
3219 -> 3179;
3220 -> 2423;
3220 -> 3130;
3220 -> 639;
3221 -> 3130;
3221 -> 2431;
3222 -> 3130;
3222 -> 639;
3223 -> 3130;
3223 -> 2447;
3224 -> 3130;
3224 -> 639;
3225 -> 3224;
3225 -> 2440;
3225 -> 3130;
3225 -> 639;
3226 -> 2443;
3226 -> 3130;
3227 -> 3130;
3227 -> 2257;
3228 -> 3130;
3228 -> 632;
3229 -> 632;
3230 -> 632;
3231 -> 635;
3231 -> 3230;
3231 -> 632;
3232 -> 632;
3233 -> 3232;
3233 -> 636;
3233 -> 632;
3234 -> 636;
3234 -> 632;
3235 -> 3234;
3235 -> 1;
3236 -> 3235;
3236 -> 3130;
3236 -> 3233;
3236 -> 1;
3238 -> 3237;
3239 -> 3236;
3239 -> 1;
3240 -> 1;
3241 -> 3239;
3241 -> 3240;
3242 -> 3240;
3243 -> 3241;
3243 -> 3236;
3243 -> 3242;
3243 -> 3240;
3244 -> 3241;
3244 -> 3236;
3244 -> 0;
3244 -> 3240;
3245 -> 3236;
3245 -> 1;
3246 -> 3236;
3246 -> 1;
3247 -> 0;
3247 -> 1;
3248 -> 3236;
3248 -> 3247;
3248 -> 1;
3249 -> 1;
3250 -> 3236;
3250 -> 1;
3251 -> 1;
3252 -> 3236;
3252 -> 1;
3253 -> 1;
3254 -> 3236;
3254 -> 1;
3255 -> 1;
3256 -> 3236;
3256 -> 1;
3257 -> 1;
3258 -> 3236;
3258 -> 1;
3259 -> 1;
3260 -> 3236;
3260 -> 1;
3261 -> 1;
3262 -> 3236;
3262 -> 1;
3263 -> 1;
3264 -> 3236;
3264 -> 1;
3265 -> 1;
3266 -> 3236;
3266 -> 1;
}