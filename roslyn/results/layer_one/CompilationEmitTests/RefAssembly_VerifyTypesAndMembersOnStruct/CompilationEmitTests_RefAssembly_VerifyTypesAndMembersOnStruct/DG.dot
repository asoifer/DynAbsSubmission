digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 854489"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 854490"];
3 [label="param CompilationEmitTests(this) 854491"];
4 [label="param EmitMetadataTestBase(this) 854492"];
5 [label="param CSharpTestBase(this) 854493"];
6 [label="param CommonTestBase(this) 854494"];
7 [label="param TestBase(this) 854495"];
8 [label="_temp 854496"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 854497"];
10 [label="param RefAssembly_VerifyTypesAndMembersOnStruct(this) 854498"];
11 [label="string source = @'\ninternal struct InternalStruct\n{\n    internal int P { get; set; }\n}\n'; 854499"];
12 [label="CSharpCompilation comp = CreateEmptyCompilation(source, references: new[] { MscorlibRef },\n                options: TestOptions.DebugDll.WithDeterministic(true)); 854500"];
13 [label="CSharpCompilation comp = CreateEmptyCompilation(source, references: new[] { MscorlibRef },\n                options: TestOptions.DebugDll.WithDeterministic(true)); 854501"];
14 [label="MscorlibRef 854502"];
15 [label="s_mscorlibRef.Value 854503"];
16 [label="CSharpCompilation comp = CreateEmptyCompilation(source, references: new[] { MscorlibRef },\n                options: TestOptions.DebugDll.WithDeterministic(true)); 854504"];
17 [label="new[] { MscorlibRef } 854505"];
18 [label="CSharpCompilation comp = CreateEmptyCompilation(source, references: new[] { MscorlibRef },\n                options: TestOptions.DebugDll.WithDeterministic(true)); 854506"];
19 [label="param operator(string source) 854507"];
20 [label="source 854508"];
21 [label="new CSharpTestSource(source) 854509"];
22 [label="param CSharpTestSource(object value) 854510"];
23 [label="param CSharpTestSource(this) 854511"];
24 [label="Value 854512"];
25 [label="param CreateEmptyCompilation(CSharpTestSource source) 854513"];
26 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 854514"];
27 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 854515"];
28 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 854516"];
29 [label="param CreateEmptyCompilation(string assemblyName = '') 854517"];
30 [label="param CreateEmptyCompilation(string sourceFileName = '') 854518"];
31 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 854519"];
32 [label="=> CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 854520"];
33 [label="source 854521"];
34 [label="references 854522"];
35 [label="options 854523"];
36 [label="parseOptions 854524"];
37 [label="assemblyName 854525"];
38 [label="sourceFileName 854526"];
39 [label="skipUsesIsNullable 854527"];
40 [label="null 854528"];
41 [label="experimentalFeature: null 854529"];
42 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 854530"];
43 [label="param CreateCompilationCore(CSharpTestSource source) 854531"];
44 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 854532"];
45 [label="param CreateCompilationCore(CSharpCompilationOptions options) 854533"];
46 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 854534"];
47 [label="param CreateCompilationCore(string assemblyName) 854535"];
48 [label="param CreateCompilationCore(string sourceFileName) 854536"];
49 [label="param CreateCompilationCore(bool skipUsesIsNullable) 854537"];
50 [label="param CreateCompilationCore(MessageID? experimentalFeature) 854538"];
51 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 854539"];
52 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 854540"];
53 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 854541"];
54 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 854542"];
55 [label="param GetSyntaxTrees(string sourceFileName = '') 854543"];
56 [label="param GetSyntaxTrees(this) 854544"];
57 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 854545"];
58 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 854546"];
59 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 854547"];
60 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 854548"];
61 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 854549"];
62 [label="param Parse(string text) 854550"];
63 [label="param Parse(string filename = '') 854551"];
64 [label="param Parse(CSharpParseOptions options = null) 854552"];
65 [label="param Parse(Encoding encoding = null) 854553"];
66 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 854554"];
67 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 854555"];
68 [label="options = TestOptions.Regular; 854556"];
69 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 854557"];
70 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 854558"];
71 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 854559"];
72 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 854560"];
73 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 854561"];
74 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 854562"];
75 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 854563"];
76 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 854564"];
77 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 854565"];
78 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 854566"];
79 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 854567"];
80 [label="param CheckSerializable(SyntaxTree tree) 854568"];
81 [label="var stream = new MemoryStream(); 854569"];
82 [label="var root = tree.GetRoot(); 854570"];
83 [label="var root = tree.GetRoot(); 854571"];
84 [label="root.SerializeTo(stream); 854572"];
85 [label="root.SerializeTo(stream); 854573"];
86 [label="root.SerializeTo(stream); 854574"];
87 [label="stream.Position = 0; 854575"];
88 [label="stream.Position 854576"];
89 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 854577"];
90 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 854578"];
91 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 854579"];
92 [label="return tree; 854580"];
93 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 854581"];
94 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 854582"];
95 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 854583"];
96 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 854584"];
97 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 854585"];
98 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 854586"];
99 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 854587"];
100 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 854588"];
101 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 854589"];
102 [label="param ValidateIOperations(Func<Compilation> createCompilation) 854590"];
103 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 854591"];
104 [label="return; 854592"];
105 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 854593"];
106 [label="var compilation = createCompilationLambda(); 854594"];
107 [label="var compilation = createCompilationLambda(); 854595"];
108 [label="return Guid.NewGuid().ToString('D'); 854596"];
109 [label="var compilation = createCompilationLambda(); 854597"];
110 [label="OutputKind.ConsoleApplication 854598"];
111 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 854599"];
112 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 854600"];
113 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 854601"];
114 [label="OutputKind.DynamicallyLinkedLibrary 854602"];
115 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 854603"];
116 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 854604"];
117 [label="true 854605"];
118 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 854606"];
119 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 854607"];
120 [label="param Create(string? assemblyName) 854608"];
121 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 854609"];
122 [label="param Create(IEnumerable<MetadataReference>? references = null) 854610"];
123 [label="param Create(CSharpCompilationOptions? options = null) 854611"];
124 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 854612"];
125 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 854613"];
126 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 854614"];
127 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 854615"];
128 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 854616"];
129 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 854617"];
130 [label="param Create(string? assemblyName) 854618"];
131 [label="param Create(CSharpCompilationOptions options) 854619"];
132 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 854620"];
133 [label="param Create(IEnumerable<MetadataReference>? references) 854621"];
134 [label="param Create(CSharpCompilation? previousSubmission) 854622"];
135 [label="param Create(Type? returnType) 854623"];
136 [label="param Create(Type? hostObjectType) 854624"];
137 [label="param Create(bool isSubmission) 854625"];
138 [label="RoslynDebug.Assert(options != null); 854626"];
139 [label="RoslynDebug.Assert(options != null); 854627"];
140 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 854628"];
141 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 854629"];
142 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 854630"];
143 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 854631"];
144 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 854632"];
145 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 854633"];
146 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 854634"];
147 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 854635"];
148 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 854636"];
149 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 854637"];
150 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 854638"];
151 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 854639"];
152 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 854640"];
153 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 854641"];
154 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 854642"];
155 [label="param SyntaxAndDeclarationManager(string scriptClassName) 854643"];
156 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 854644"];
157 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 854645"];
158 [label="param SyntaxAndDeclarationManager(bool isSubmission) 854646"];
159 [label="param SyntaxAndDeclarationManager(State state) 854647"];
160 [label="param SyntaxAndDeclarationManager(this) 854648"];
161 [label="externalSyntaxTrees 854649"];
162 [label="scriptClassName 854650"];
163 [label="resolver 854651"];
164 [label="messageProvider 854652"];
165 [label="isSubmission 854653"];
166 [label="param SyntaxAndDeclarationManager(this) 854654"];
167 [label="param SyntaxAndDeclarationManager(this) 854655"];
168 [label="_lazyState 854656"];
169 [label="_lazyState 854657"];
170 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 854658"];
171 [label="param CSharpCompilation(string? assemblyName) 854659"];
172 [label="param CSharpCompilation(CSharpCompilationOptions options) 854660"];
173 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 854661"];
174 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 854662"];
175 [label="param CSharpCompilation(Type? submissionReturnType) 854663"];
176 [label="param CSharpCompilation(Type? hostObjectType) 854664"];
177 [label="param CSharpCompilation(bool isSubmission) 854665"];
178 [label="param CSharpCompilation(ReferenceManager? referenceManager) 854666"];
179 [label="param CSharpCompilation(bool reuseReferenceManager) 854667"];
180 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 854668"];
181 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 854669"];
182 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 854670"];
183 [label="param CSharpCompilation(this) 854671"];
184 [label="assemblyName 854672"];
185 [label="options 854673"];
186 [label="references 854674"];
187 [label="previousSubmission 854675"];
188 [label="submissionReturnType 854676"];
189 [label="hostObjectType 854677"];
190 [label="isSubmission 854678"];
191 [label="referenceManager 854679"];
192 [label="reuseReferenceManager 854680"];
193 [label="syntaxAndDeclarations 854681"];
194 [label="syntaxAndDeclarations.ExternalSyntaxTrees 854682"];
195 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 854683"];
196 [label="semanticModelProvider 854684"];
197 [label="eventQueue 854685"];
198 [label="param CSharpCompilation(this) 854686"];
199 [label="param CSharpCompilation(string? assemblyName) 854687"];
200 [label="param CSharpCompilation(CSharpCompilationOptions options) 854688"];
201 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 854689"];
202 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 854690"];
203 [label="param CSharpCompilation(Type? submissionReturnType) 854691"];
204 [label="param CSharpCompilation(Type? hostObjectType) 854692"];
205 [label="param CSharpCompilation(bool isSubmission) 854693"];
206 [label="param CSharpCompilation(ReferenceManager? referenceManager) 854694"];
207 [label="param CSharpCompilation(bool reuseReferenceManager) 854695"];
208 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 854696"];
209 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 854697"];
210 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 854698"];
211 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 854699"];
212 [label="param CSharpCompilation(this) 854700"];
213 [label="assemblyName 854701"];
214 [label="references 854702"];
215 [label="features 854703"];
216 [label="isSubmission 854704"];
217 [label="semanticModelProvider 854705"];
218 [label="eventQueue 854706"];
219 [label="param CSharpCompilation(this) 854707"];
220 [label="param CSharpCompilation(this) 854708"];
221 [label="_options 854709"];
222 [label="_globalImports 854710"];
223 [label="_previousSubmissionImports 854711"];
224 [label="_globalNamespaceAlias 854712"];
225 [label="_scriptClass 854713"];
226 [label="_lazyHostObjectTypeSymbol 854714"];
227 [label="_lazyImportInfos 854715"];
228 [label="_conversions 854716"];
229 [label="_anonymousTypeManager 854717"];
230 [label="_lazyGlobalNamespace 854718"];
231 [label="builtInOperators 854719"];
232 [label="_lazyAssemblySymbol 854720"];
233 [label="_referenceManager 854721"];
234 [label="_syntaxAndDeclarations 854722"];
235 [label="_lazyEntryPoint 854723"];
236 [label="_lazyEmitNullablePublicOnly 854724"];
237 [label="_lazyCompilationUnitCompletedTrees 854725"];
238 [label="NullableAnalysisData 854726"];
239 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 854727"];
240 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 854728"];
241 [label="_externAliasTargets 854729"];
242 [label="_moduleInitializerMethods 854730"];
243 [label="_binderFactories 854731"];
244 [label="_ignoreAccessibilityBinderFactories 854732"];
245 [label="_lazyDeclarationDiagnostics 854733"];
246 [label="_declarationDiagnosticsFrozen 854734"];
247 [label="new DiagnosticBag() 854735"];
248 [label="_additionalCodegenWarnings = new DiagnosticBag() 854736"];
249 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 854737"];
250 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 854738"];
251 [label="WellKnownMemberSignatureComparer 854739"];
252 [label="_options 854740"];
253 [label="this.builtInOperators = new BuiltInOperators(this); 854741"];
254 [label="this.builtInOperators = new BuiltInOperators(this); 854742"];
255 [label="new BuiltInOperators(this) 854743"];
256 [label="param BuiltInOperators(CSharpCompilation compilation) 854744"];
257 [label="param BuiltInOperators(this) 854745"];
258 [label="_compilation 854746"];
259 [label="_builtInUnaryOperators 854747"];
260 [label="_builtInOperators 854748"];
261 [label="_compilation 854749"];
262 [label="this.builtInOperators 854750"];
263 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 854751"];
264 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 854752"];
265 [label="_scriptClass 854753"];
266 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 854754"];
267 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 854755"];
268 [label="_globalImports 854756"];
269 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 854757"];
270 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 854758"];
271 [label="_previousSubmissionImports 854759"];
272 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 854760"];
273 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 854761"];
274 [label="_globalNamespaceAlias 854762"];
275 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 854763"];
276 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 854764"];
277 [label="_anonymousTypeManager 854765"];
278 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 854766"];
279 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 854767"];
280 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 854768"];
281 [label="LanguageVersion? result = null; 854769"];
282 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 854770"];
283 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 854771"];
284 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 854772"];
285 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 854773"];
286 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 854774"];
287 [label="this.LanguageVersion 854775"];
288 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 854776"];
289 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854777"];
290 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854778"];
291 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854779"];
292 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854780"];
293 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854781"];
294 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854782"];
295 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 854783"];
296 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 854784"];
297 [label="this.Options 854785"];
298 [label="get\n            {\n                return _options;\n            } 854786"];
299 [label="return _options; 854787"];
300 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 854788"];
301 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 854789"];
302 [label="_referenceManager 854790"];
303 [label="_syntaxAndDeclarations 854791"];
304 [label="Debug.Assert(_lazyAssemblySymbol is null); 854792"];
305 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 854793"];
306 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 854794"];
307 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 854795"];
308 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 854796"];
309 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 854797"];
310 [label="compilation.AddSyntaxTrees(syntaxTrees) 854798"];
311 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 854799"];
312 [label="param AddSyntaxTrees(this) 854800"];
313 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 854801"];
314 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 854802"];
315 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 854803"];
316 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 854804"];
317 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 854805"];
318 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 854806"];
319 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 854807"];
320 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 854808"];
321 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 854809"];
322 [label="bool reuseReferenceManager = true; 854810"];
323 [label="int i = 0; 854811"];
324 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 854812"];
325 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 854813"];
326 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 854814"];
327 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 854815"];
328 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 854816"];
329 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 854817"];
330 [label="externalSyntaxTrees.Add(tree); 854818"];
331 [label="externalSyntaxTrees.Add(tree); 854819"];
332 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 854820"];
333 [label="i++; 854821"];
334 [label="externalSyntaxTrees.Free(); 854822"];
335 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 854823"];
336 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 854824"];
337 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 854825"];
338 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 854826"];
339 [label="param AddSyntaxTrees(this) 854827"];
340 [label="var scriptClassName = this.ScriptClassName; 854828"];
341 [label="var resolver = this.Resolver; 854829"];
342 [label="var messageProvider = this.MessageProvider; 854830"];
343 [label="var isSubmission = this.IsSubmission; 854831"];
344 [label="var state = _lazyState; 854832"];
345 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 854833"];
346 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 854834"];
347 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 854835"];
348 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 854836"];
349 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 854837"];
350 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 854838"];
351 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 854839"];
352 [label="param WithExternalSyntaxTrees(this) 854840"];
353 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 854841"];
354 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 854842"];
355 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 854843"];
356 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 854844"];
357 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 854845"];
358 [label="param SyntaxAndDeclarationManager(string scriptClassName) 854846"];
359 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 854847"];
360 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 854848"];
361 [label="param SyntaxAndDeclarationManager(bool isSubmission) 854849"];
362 [label="param SyntaxAndDeclarationManager(State state) 854850"];
363 [label="param SyntaxAndDeclarationManager(this) 854851"];
364 [label="param SyntaxAndDeclarationManager(this) 854852"];
365 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 854853"];
366 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 854854"];
367 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 854855"];
368 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 854856"];
369 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 854857"];
370 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 854858"];
371 [label="param Update(ReferenceManager referenceManager) 854859"];
372 [label="param Update(bool reuseReferenceManager) 854860"];
373 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 854861"];
374 [label="param Update(this) 854862"];
375 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 854863"];
376 [label="this.PreviousSubmission 854864"];
377 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 854865"];
378 [label="ScriptCompilationInfo 854866"];
379 [label="ScriptCompilationInfo?.PreviousScriptCompilation 854867"];
380 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 854868"];
381 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 854869"];
382 [label="this.SubmissionReturnType 854870"];
383 [label="=> ScriptCompilationInfo 854871"];
384 [label="ScriptCompilationInfo 854872"];
385 [label="this.HostObjectType 854873"];
386 [label="=> ScriptCompilationInfo 854874"];
387 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 854875"];
388 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 854876"];
389 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 854877"];
390 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 854878"];
391 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 854879"];
392 [label="param CSharpCompilation(string? assemblyName) 854880"];
393 [label="param CSharpCompilation(CSharpCompilationOptions options) 854881"];
394 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 854882"];
395 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 854883"];
396 [label="param CSharpCompilation(Type? submissionReturnType) 854884"];
397 [label="param CSharpCompilation(Type? hostObjectType) 854885"];
398 [label="param CSharpCompilation(bool isSubmission) 854886"];
399 [label="param CSharpCompilation(ReferenceManager? referenceManager) 854887"];
400 [label="param CSharpCompilation(bool reuseReferenceManager) 854888"];
401 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 854889"];
402 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 854890"];
403 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 854891"];
404 [label="param CSharpCompilation(this) 854892"];
405 [label="previousSubmission 854893"];
406 [label="submissionReturnType 854894"];
407 [label="hostObjectType 854895"];
408 [label="syntaxAndDeclarations.ExternalSyntaxTrees 854896"];
409 [label="eventQueue 854897"];
410 [label="param CSharpCompilation(this) 854898"];
411 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 854899"];
412 [label="param CSharpCompilation(Type? submissionReturnType) 854900"];
413 [label="param CSharpCompilation(Type? hostObjectType) 854901"];
414 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 854902"];
415 [label="param CSharpCompilation(this) 854903"];
416 [label="eventQueue 854904"];
417 [label="param CSharpCompilation(this) 854905"];
418 [label="_options 854906"];
419 [label="_globalImports 854907"];
420 [label="_previousSubmissionImports 854908"];
421 [label="_globalNamespaceAlias 854909"];
422 [label="_scriptClass 854910"];
423 [label="_lazyHostObjectTypeSymbol 854911"];
424 [label="_lazyImportInfos 854912"];
425 [label="_conversions 854913"];
426 [label="_anonymousTypeManager 854914"];
427 [label="_lazyGlobalNamespace 854915"];
428 [label="builtInOperators 854916"];
429 [label="_lazyAssemblySymbol 854917"];
430 [label="_referenceManager 854918"];
431 [label="_syntaxAndDeclarations 854919"];
432 [label="_lazyEntryPoint 854920"];
433 [label="_lazyEmitNullablePublicOnly 854921"];
434 [label="_lazyCompilationUnitCompletedTrees 854922"];
435 [label="NullableAnalysisData 854923"];
436 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 854924"];
437 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 854925"];
438 [label="_externAliasTargets 854926"];
439 [label="_moduleInitializerMethods 854927"];
440 [label="_binderFactories 854928"];
441 [label="_ignoreAccessibilityBinderFactories 854929"];
442 [label="_lazyDeclarationDiagnostics 854930"];
443 [label="_declarationDiagnosticsFrozen 854931"];
444 [label="new DiagnosticBag() 854932"];
445 [label="_additionalCodegenWarnings = new DiagnosticBag() 854933"];
446 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 854934"];
447 [label="this.builtInOperators = new BuiltInOperators(this); 854935"];
448 [label="this.builtInOperators = new BuiltInOperators(this); 854936"];
449 [label="new BuiltInOperators(this) 854937"];
450 [label="param BuiltInOperators(CSharpCompilation compilation) 854938"];
451 [label="param BuiltInOperators(this) 854939"];
452 [label="_compilation 854940"];
453 [label="_builtInUnaryOperators 854941"];
454 [label="_builtInOperators 854942"];
455 [label="_compilation 854943"];
456 [label="this.builtInOperators 854944"];
457 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 854945"];
458 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 854946"];
459 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 854947"];
460 [label="LanguageVersion? result = null; 854948"];
461 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 854949"];
462 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 854950"];
463 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 854951"];
464 [label="result = version; 854952"];
465 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 854953"];
466 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854954"];
467 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854955"];
468 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854956"];
469 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854957"];
470 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854958"];
471 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 854959"];
472 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 854960"];
473 [label="referenceManager.AssertCanReuseForCompilation(this); 854961"];
474 [label="referenceManager.AssertCanReuseForCompilation(this); 854962"];
475 [label="_referenceManager 854963"];
476 [label="Debug.Assert(_lazyAssemblySymbol is null); 854964"];
477 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 854965"];
478 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 854966"];
479 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 854967"];
480 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 854968"];
481 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 854969"];
482 [label="return compilation; 854970"];
483 [label="var compilation = createCompilationLambda(); 854971"];
484 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 854972"];
485 [label="IsNullableEnabled(compilation) 854973"];
486 [label="param IsNullableEnabled(CSharpCompilation compilation) 854974"];
487 [label="compilation.SyntaxTrees 854975"];
488 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 854976"];
489 [label="_syntaxAndDeclarations.GetLazyState() 854977"];
490 [label="param GetLazyState(this) 854978"];
491 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 854979"];
492 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 854980"];
493 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 854981"];
494 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 854982"];
495 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 854983"];
496 [label="param CreateState(string scriptClassName) 854984"];
497 [label="param CreateState(SourceReferenceResolver resolver) 854985"];
498 [label="param CreateState(CommonMessageProvider messageProvider) 854986"];
499 [label="param CreateState(bool isSubmission) 854987"];
500 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 854988"];
501 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 854989"];
502 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 854990"];
503 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 854991"];
504 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 854992"];
505 [label="var declTable = DeclarationTable.Empty; 854993"];
506 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 854994"];
507 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 854995"];
508 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 854996"];
509 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 854997"];
510 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 854998"];
511 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 854999"];
512 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 855000"];
513 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 855001"];
514 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 855002"];
515 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 855003"];
516 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 855004"];
517 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 855005"];
518 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 855006"];
519 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 855007"];
520 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 855008"];
521 [label="param AppendAllSyntaxTrees(string scriptClassName) 855009"];
522 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 855010"];
523 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 855011"];
524 [label="param AppendAllSyntaxTrees(bool isSubmission) 855012"];
525 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 855013"];
526 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 855014"];
527 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 855015"];
528 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 855016"];
529 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 855017"];
530 [label="var sourceCodeKind = tree.Options.Kind; 855018"];
531 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 855019"];
532 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 855020"];
533 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 855021"];
534 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 855022"];
535 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 855023"];
536 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 855024"];
537 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 855025"];
538 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 855026"];
539 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 855027"];
540 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 855028"];
541 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 855029"];
542 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 855030"];
543 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 855031"];
544 [label="declMapBuilder.Add(tree, lazyRoot); 855032"];
545 [label="declMapBuilder.Add(tree, lazyRoot); 855033"];
546 [label="declMapBuilder.Add(tree, lazyRoot); 855034"];
547 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 855035"];
548 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 855036"];
549 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 855037"];
550 [label="treesBuilder.Add(tree); 855038"];
551 [label="treesBuilder.Add(tree); 855039"];
552 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 855040"];
553 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 855041"];
554 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 855042"];
555 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 855043"];
556 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 855044"];
557 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 855045"];
558 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 855046"];
559 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 855047"];
560 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 855048"];
561 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 855049"];
562 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 855050"];
563 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 855051"];
564 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 855052"];
565 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 855053"];
566 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 855054"];
567 [label="param State(DeclarationTable declarationTable) 855055"];
568 [label="param State(this) 855056"];
569 [label="OrdinalMap 855057"];
570 [label="LoadDirectiveMap 855058"];
571 [label="LoadedSyntaxTreeMap 855059"];
572 [label="RootNamespaces 855060"];
573 [label="DeclarationTable 855061"];
574 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 855062"];
575 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 855063"];
576 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 855064"];
577 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 855065"];
578 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 855066"];
579 [label="this.SyntaxTrees 855067"];
580 [label="this.OrdinalMap 855068"];
581 [label="this.LoadDirectiveMap 855069"];
582 [label="this.LoadedSyntaxTreeMap 855070"];
583 [label="this.RootNamespaces 855071"];
584 [label="this.DeclarationTable 855072"];
585 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 855073"];
586 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 855074"];
587 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 855075"];
588 [label="return _lazyState; 855076"];
589 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 855077"];
590 [label="var trees = compilation.SyntaxTrees; 855078"];
591 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 855079"];
592 [label="var options = (CSharpParseOptions)trees[0].Options; 855080"];
593 [label="var options = (CSharpParseOptions)trees[0].Options; 855081"];
594 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 855082"];
595 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 855083"];
596 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 855084"];
597 [label="return compilation; 855085"];
598 [label="CSharpCompilation comp = CreateEmptyCompilation(source, references: new[] { MscorlibRef },\n                options: TestOptions.DebugDll.WithDeterministic(true)); 855086"];
599 [label="var emitRefOnly = EmitOptions.Default.WithEmitMetadataOnly(true).WithIncludePrivateMembers(false); 855087"];
600 [label="CompileAndVerify(comp, emitOptions: emitRefOnly, verify: Verification.Passes); 855088"];
601 [label="CompileAndVerify(comp, emitOptions: emitRefOnly, verify: Verification.Passes); 855089"];
602 [label="CompileAndVerify(comp, emitOptions: emitRefOnly, verify: Verification.Passes); 855090"];
603 [label="CompileAndVerify(comp, emitOptions: emitRefOnly, verify: Verification.Passes); 855091"];
604 [label="CompileAndVerify(comp, emitOptions: emitRefOnly, verify: Verification.Passes) 855092"];
605 [label="param CompileAndVerify(Compilation compilation) 855093"];
606 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 855094"];
607 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 855095"];
608 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 855096"];
609 [label="param CompileAndVerify(Action<PEAssembly> validator = null) 855097"];
610 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 855098"];
611 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 855099"];
612 [label="param CompileAndVerify(string expectedOutput = null) 855100"];
613 [label="param CompileAndVerify(int? expectedReturnCode = null) 855101"];
614 [label="param CompileAndVerify(string[] args = null) 855102"];
615 [label="param CompileAndVerify(EmitOptions emitOptions = null) 855103"];
616 [label="param CompileAndVerify(Verification verify = Verification.Passes) 855104"];
617 [label="param CompileAndVerify(this) 855105"];
618 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855106"];
619 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855107"];
620 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855108"];
621 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855109"];
622 [label="translate(sourceSymbolValidator) 855110"];
623 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 855111"];
624 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 855112"];
625 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 855113"];
626 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 855114"];
627 [label="return null; 855115"];
628 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855116"];
629 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855117"];
630 [label="translate(symbolValidator) 855118"];
631 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 855119"];
632 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 855120"];
633 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 855121"];
634 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 855122"];
635 [label="return null; 855123"];
636 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855124"];
637 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855125"];
638 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855126"];
639 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855127"];
640 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855128"];
641 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 855129"];
642 [label="CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 855130"];
643 [label="param CompileAndVerifyCommon(Compilation compilation) 855131"];
644 [label="param CompileAndVerifyCommon(IEnumerable<ResourceDescription> manifestResources = null) 855132"];
645 [label="param CompileAndVerifyCommon(IEnumerable<ModuleData> dependencies = null) 855133"];
646 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> sourceSymbolValidator = null) 855134"];
647 [label="param CompileAndVerifyCommon(Action<PEAssembly> assemblyValidator = null) 855135"];
648 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> symbolValidator = null) 855136"];
649 [label="param CompileAndVerifyCommon(SignatureDescription[] expectedSignatures = null) 855137"];
650 [label="param CompileAndVerifyCommon(string expectedOutput = null) 855138"];
651 [label="param CompileAndVerifyCommon(int? expectedReturnCode = null) 855139"];
652 [label="param CompileAndVerifyCommon(string[] args = null) 855140"];
653 [label="param CompileAndVerifyCommon(EmitOptions emitOptions = null) 855141"];
654 [label="param CompileAndVerifyCommon(Verification verify = Verification.Passes) 855142"];
655 [label="param CompileAndVerifyCommon(this) 855143"];
656 [label="CustomAssert.NotNull(compilation); 855144"];
657 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 855145"];
658 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 855146"];
659 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 855147"];
660 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 855148"];
661 [label="CompilationVerifier result = null; 855149"];
662 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855150"];
663 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855151"];
664 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855152"];
665 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855153"];
666 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855154"];
667 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855155"];
668 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855156"];
669 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855157"];
670 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855158"];
671 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855159"];
672 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855160"];
673 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 855161"];
674 [label="Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify) 855162"];
675 [label="param Emit(Compilation compilation) 855163"];
676 [label="param Emit(IEnumerable<ModuleData> dependencies) 855164"];
677 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 855165"];
678 [label="param Emit(SignatureDescription[] expectedSignatures) 855166"];
679 [label="param Emit(string expectedOutput) 855167"];
680 [label="param Emit(int? expectedReturnCode) 855168"];
681 [label="param Emit(string[] args) 855169"];
682 [label="param Emit(Action<PEAssembly> assemblyValidator) 855170"];
683 [label="param Emit(Action<IModuleSymbol> symbolValidator) 855171"];
684 [label="param Emit(EmitOptions emitOptions) 855172"];
685 [label="param Emit(Verification verify) 855173"];
686 [label="param Emit(this) 855174"];
687 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 855175"];
688 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 855176"];
689 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 855177"];
690 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 855178"];
691 [label="new CompilationVerifier(compilation, VisualizeRealIL, dependencies) 855179"];
692 [label="param CompilationVerifier(Compilation compilation) 855180"];
693 [label="param CompilationVerifier(Func<IModuleSymbol, CompilationTestData.MethodData, IReadOnlyDictionary<int, string>, bool, string> visualizeRealIL = null) 855181"];
694 [label="param CompilationVerifier(IEnumerable<ModuleData> dependencies = null) 855182"];
695 [label="param CompilationVerifier(this) 855183"];
696 [label="_compilation 855184"];
697 [label="_testData 855185"];
698 [label="_dependencies 855186"];
699 [label="_lazyModuleSymbol 855187"];
700 [label="_allModuleData 855188"];
701 [label="_visualizeRealIL 855189"];
702 [label="_compilation 855190"];
703 [label="_dependencies 855191"];
704 [label="_visualizeRealIL 855192"];
705 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 855193"];
706 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 855194"];
707 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 855195"];
708 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 855196"];
709 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 855197"];
710 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 855198"];
711 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 855199"];
712 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures) 855200"];
713 [label="param Emit(string expectedOutput) 855201"];
714 [label="param Emit(int? expectedReturnCode) 855202"];
715 [label="param Emit(string[] args) 855203"];
716 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 855204"];
717 [label="param Emit(EmitOptions emitOptions) 855205"];
718 [label="param Emit(Verification peVerify) 855206"];
719 [label="param Emit(SignatureDescription[] expectedSignatures) 855207"];
720 [label="param Emit(this) 855208"];
721 [label="RuntimeUtilities.GetRuntimeEnvironmentFactory 855209"];
722 [label="new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 855210"];
723 [label="s_lazyFactory = new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 855211"];
724 [label="using var testEnvironment = RuntimeEnvironmentFactory.Create(_dependencies); 855212"];
725 [label="RuntimeEnvironmentFactory.Create(_dependencies) 855213"];
726 [label="param Create(IEnumerable<ModuleData> additionalDependencies = null) 855214"];
727 [label="return s_lazyFactory.Value.Create(additionalDependencies); 855215"];
728 [label="return s_lazyFactory.Value.Create(additionalDependencies); 855216"];
729 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 855217"];
730 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 855218"];
731 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 855219"];
732 [label="Emit(testEnvironment, manifestResources, emitOptions) 855220"];
733 [label="param Emit(IRuntimeEnvironment testEnvironment) 855221"];
734 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 855222"];
735 [label="param Emit(EmitOptions emitOptions) 855223"];
736 [label="param Emit(this) 855224"];
737 [label="s_dumpCount 855225"];
738 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 855226"];
739 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 855227"];
740 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 855228"];
741 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 855229"];
742 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 855230"];
743 [label="param EmitCompilation(Compilation compilation) 855231"];
744 [label="param EmitCompilation(IEnumerable<ResourceDescription> manifestResources) 855232"];
745 [label="param EmitCompilation(List<ModuleData> dependencies) 855233"];
746 [label="param EmitCompilation(DiagnosticBag diagnostics) 855234"];
747 [label="param EmitCompilation(CompilationTestData testData) 855235"];
748 [label="param EmitCompilation(EmitOptions emitOptions) 855236"];
749 [label="var referencedCompilations = FindReferencedCompilations(compilation); 855237"];
750 [label="FindReferencedCompilations(compilation) 855238"];
751 [label="param FindReferencedCompilations(Compilation original) 855239"];
752 [label="var list = new List<Compilation>(); 855240"];
753 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 855241"];
754 [label="FindDirectReferencedCompilations(original) 855242"];
755 [label="param FindDirectReferencedCompilations(Compilation compilation) 855243"];
756 [label="var list = new List<Compilation>(); 855244"];
757 [label="var previousCompilation = compilation.ScriptCompilationInfo?.PreviousScriptCompilation; 855245"];
758 [label="compilation.ScriptCompilationInfo 855246"];
759 [label="=> ScriptCompilationInfo 855247"];
760 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 855248"];
761 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 855249"];
762 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 855250"];
763 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 855251"];
764 [label="get\n            {\n                return GetBoundReferenceManager().DirectiveReferences;\n            } 855252"];
765 [label="GetBoundReferenceManager() 855253"];
766 [label="param GetBoundReferenceManager(this) 855254"];
767 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855255"];
768 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 855256"];
769 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 855257"];
770 [label="get { return this.Declarations.ReferenceDirectives; } 855258"];
771 [label="this.Declarations 855259"];
772 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 855260"];
773 [label="_syntaxAndDeclarations.GetLazyState() 855261"];
774 [label="param GetLazyState(this) 855262"];
775 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 855263"];
776 [label="return this.Declarations.ReferenceDirectives; 855264"];
777 [label="get { return _options; } 855265"];
778 [label="return _options; 855266"];
779 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 855267"];
780 [label="_syntaxAndDeclarations.GetLazyState() 855268"];
781 [label="Debug.Assert(_lazyAssemblySymbol is object); 855269"];
782 [label="return _referenceManager; 855270"];
783 [label="return GetBoundReferenceManager().DirectiveReferences; 855271"];
784 [label="return list; 855272"];
785 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 855273"];
786 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 855274"];
787 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 855275"];
788 [label="return list; 855276"];
789 [label="var referencedCompilations = FindReferencedCompilations(compilation); 855277"];
790 [label="var fullNameSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase); 855278"];
791 [label="foreach (var referencedCompilation in referencedCompilations)\n            {\n                var emitData = EmitCompilationCore(referencedCompilation, null, diagnostics, null, emitOptions);\n                if (emitData.HasValue)\n                {\n                    var moduleData = new ModuleData(referencedCompilation.Assembly.Identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    emitData.Value.Assembly,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    fullNameSet.Add(moduleData.Id.FullName);\n                    dependencies.Add(moduleData);\n                }\n            } 855279"];
792 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 855280"];
793 [label="new[] { compilation } 855281"];
794 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 855282"];
795 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 855283"];
796 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 855284"];
797 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 855285"];
798 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 855286"];
799 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 855287"];
800 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics) 855288"];
801 [label="param EmitReferences(Compilation compilation) 855289"];
802 [label="param EmitReferences(HashSet<string> fullNameSet) 855290"];
803 [label="param EmitReferences(List<ModuleData> dependencies) 855291"];
804 [label="param EmitReferences(DiagnosticBag diagnostics) 855292"];
805 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 855293"];
806 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 855294"];
807 [label="var peRef = (PortableExecutableReference)metadataReference; 855295"];
808 [label="var metadata = peRef.GetMetadataNoCopy(); 855296"];
809 [label="var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly; 855297"];
810 [label="isManifestModule 855298"];
811 [label="var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null; 855299"];
812 [label="((AssemblyMetadata)metadata).GetAssembly().Identity 855300"];
813 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 855301"];
814 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 855302"];
815 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 855303"];
816 [label="foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                } 855304"];
817 [label="EnumerateModules(metadata) 855305"];
818 [label="param EnumerateModules(Metadata metadata) 855306"];
819 [label="return (metadata.Kind == MetadataImageKind.Assembly) ? ((AssemblyMetadata)metadata).GetModules().AsEnumerable() : SpecializedCollections.SingletonEnumerable((ModuleMetadata)metadata); 855307"];
820 [label="(metadata.Kind == MetadataImageKind.Assembly) 855308"];
821 [label="ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent(); 855309"];
822 [label="ModuleData moduleData; 855310"];
823 [label="if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    } 855311"];
824 [label="fullNameSet.Add(identity.GetDisplayName()); 855312"];
825 [label="fullNameSet.Add(identity.GetDisplayName()); 855313"];
826 [label="fullNameSet.Add(identity.GetDisplayName()); 855314"];
827 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 855315"];
828 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 855316"];
829 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 855317"];
830 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 855318"];
831 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 855319"];
832 [label="dependencies.Add(moduleData); 855320"];
833 [label="dependencies.Add(moduleData); 855321"];
834 [label="isManifestModule = false; 855322"];
835 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 855323"];
836 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 855324"];
837 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 855325"];
838 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 855326"];
839 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 855327"];
840 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 855328"];
841 [label="EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions) 855329"];
842 [label="param EmitCompilationCore(Compilation compilation) 855330"];
843 [label="param EmitCompilationCore(IEnumerable<ResourceDescription> manifestResources) 855331"];
844 [label="param EmitCompilationCore(DiagnosticBag diagnostics) 855332"];
845 [label="param EmitCompilationCore(CompilationTestData testData) 855333"];
846 [label="param EmitCompilationCore(EmitOptions emitOptions) 855334"];
847 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 855335"];
848 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 855336"];
849 [label="using var executableStream = new MemoryStream(); 855337"];
850 [label="var pdb = default(ImmutableArray<byte>); 855338"];
851 [label="var assembly = default(ImmutableArray<byte>); 855339"];
852 [label="var pdbStream = (emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) ? new MemoryStream() : null; 855340"];
853 [label="(emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) 855341"];
854 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 855342"];
855 [label="compilation.SyntaxTrees 855343"];
856 [label="get\n            {\n                return this.SyntaxTrees;\n            } 855344"];
857 [label="this.SyntaxTrees 855345"];
858 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 855346"];
859 [label="_syntaxAndDeclarations.GetLazyState() 855347"];
860 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855348"];
861 [label="return this.SyntaxTrees; 855349"];
862 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 855350"];
863 [label="EmitResult result; 855351"];
864 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 855352"];
865 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 855353"];
866 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 855354"];
867 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 855355"];
868 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 855356"];
869 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 855357"];
870 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 855358"];
871 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 855359"];
872 [label="get { return _syntaxAndDeclarations.MessageProvider; } 855360"];
873 [label="return _syntaxAndDeclarations.MessageProvider; 855361"];
874 [label="param CreateModuleBuilder(EmitOptions emitOptions) 855362"];
875 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 855363"];
876 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 855364"];
877 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 855365"];
878 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 855366"];
879 [label="param CreateModuleBuilder(CompilationTestData? testData) 855367"];
880 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 855368"];
881 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 855369"];
882 [label="param CreateModuleBuilder(this) 855370"];
883 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 855371"];
884 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 855372"];
885 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 855373"];
886 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 855374"];
887 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 855375"];
888 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 855376"];
889 [label="param GetRuntimeMetadataVersion(this) 855377"];
890 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 855378"];
891 [label="GetRuntimeMetadataVersion(emitOptions) 855379"];
892 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 855380"];
893 [label="param GetRuntimeMetadataVersion(this) 855381"];
894 [label="Assembly 855382"];
895 [label="get\n            {\n                return SourceAssembly;\n            } 855383"];
896 [label="SourceAssembly 855384"];
897 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 855385"];
898 [label="GetBoundReferenceManager() 855386"];
899 [label="param GetBoundReferenceManager(this) 855387"];
900 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855388"];
901 [label="return _referenceManager; 855389"];
902 [label="GetBoundReferenceManager(); 855390"];
903 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 855391"];
904 [label="return _lazyAssemblySymbol; 855392"];
905 [label="return SourceAssembly; 855393"];
906 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 855394"];
907 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 855395"];
908 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 855396"];
909 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 855397"];
910 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 855398"];
911 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 855399"];
912 [label="return runtimeMDVersion; 855400"];
913 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 855401"];
914 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 855402"];
915 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 855403"];
916 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 855404"];
917 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 855405"];
918 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 855406"];
919 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 855407"];
920 [label="get { return SourceAssembly.IsDelaySigned; } 855408"];
921 [label="SourceAssembly 855409"];
922 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 855410"];
923 [label="GetBoundReferenceManager() 855411"];
924 [label="param GetBoundReferenceManager(this) 855412"];
925 [label="GetBoundReferenceManager(); 855413"];
926 [label="return SourceAssembly.IsDelaySigned; 855414"];
927 [label="SourceAssembly.IsDelaySigned 855415"];
928 [label="get\n            {\n                return _options;\n            } 855416"];
929 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 855417"];
930 [label="Declarations 855418"];
931 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 855419"];
932 [label="_syntaxAndDeclarations.GetLazyState() 855420"];
933 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855421"];
934 [label="return Declarations.GetMergedRoot(this); 855422"];
935 [label="return Declarations.GetMergedRoot(this); 855423"];
936 [label="return Declarations.GetMergedRoot(this); 855424"];
937 [label="_syntaxAndDeclarations.GetLazyState() 855425"];
938 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855426"];
939 [label="get { return SourceAssembly.StrongNameKeys; } 855427"];
940 [label="SourceAssembly 855428"];
941 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 855429"];
942 [label="GetBoundReferenceManager() 855430"];
943 [label="param GetBoundReferenceManager(this) 855431"];
944 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855432"];
945 [label="return _referenceManager; 855433"];
946 [label="GetBoundReferenceManager(); 855434"];
947 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 855435"];
948 [label="return SourceAssembly.StrongNameKeys; 855436"];
949 [label="SourceAssembly.StrongNameKeys 855437"];
950 [label="get\n            {\n                return _options;\n            } 855438"];
951 [label="=> 0x30 855439"];
952 [label="0x30 855440"];
953 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 855441"];
954 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 855442"];
955 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 855443"];
956 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 855444"];
957 [label="PEModuleBuilder moduleBeingBuilt; 855445"];
958 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 855446"];
959 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 855447"];
960 [label="_options.OutputKind.IsValid() 855448"];
961 [label="_options.OutputKind 855449"];
962 [label="SourceAssembly 855450"];
963 [label="GetBoundReferenceManager() 855451"];
964 [label="GetBoundReferenceManager(); 855452"];
965 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 855453"];
966 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 855454"];
967 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 855455"];
968 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 855456"];
969 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 855457"];
970 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 855458"];
971 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 855459"];
972 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 855460"];
973 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 855461"];
974 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 855462"];
975 [label="param PEAssemblyBuilder(OutputKind outputKind) 855463"];
976 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 855464"];
977 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 855465"];
978 [label="param PEAssemblyBuilder(this) 855466"];
979 [label="sourceAssembly 855467"];
980 [label="emitOptions 855468"];
981 [label="outputKind 855469"];
982 [label="serializationProperties 855470"];
983 [label="manifestResources 855471"];
984 [label="ImmutableArray<NamedTypeSymbol>.Empty 855472"];
985 [label="param PEAssemblyBuilder(this) 855473"];
986 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 855474"];
987 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 855475"];
988 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 855476"];
989 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 855477"];
990 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 855478"];
991 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 855479"];
992 [label="param PEAssemblyBuilderBase(this) 855480"];
993 [label="0 855481"];
994 [label="sourceAssembly.Modules[0] 855482"];
995 [label="emitOptions 855483"];
996 [label="outputKind 855484"];
997 [label="serializationProperties 855485"];
998 [label="manifestResources 855486"];
999 [label="param PEAssemblyBuilderBase(this) 855487"];
1000 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 855488"];
1001 [label="param PEModuleBuilder(EmitOptions emitOptions) 855489"];
1002 [label="param PEModuleBuilder(OutputKind outputKind) 855490"];
1003 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 855491"];
1004 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 855492"];
1005 [label="param PEModuleBuilder(this) 855493"];
1006 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 855494"];
1007 [label="sourceModule 855495"];
1008 [label="serializationProperties 855496"];
1009 [label="manifestResources 855497"];
1010 [label="outputKind 855498"];
1011 [label="emitOptions 855499"];
1012 [label="new ModuleCompilationState() 855500"];
1013 [label="param ModuleCompilationState(this) 855501"];
1014 [label="param PEModuleBuilder(this) 855502"];
1015 [label="param PEModuleBuilder(this) 855503"];
1016 [label="get\n            {\n                return true;\n            } 855504"];
1017 [label="return true; 855505"];
1018 [label="param PEModuleBuilder(this) 855506"];
1019 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 855507"];
1020 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 855508"];
1021 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 855509"];
1022 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 855510"];
1023 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 855511"];
1024 [label="new ConcurrentSet<TypeSymbol>() 855512"];
1025 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 855513"];
1026 [label="_embeddedTypesManagerOpt 855514"];
1027 [label="_metadataName 855515"];
1028 [label="_fixedImplementationTypes 855516"];
1029 [label="_needsGeneratedAttributes 855517"];
1030 [label="_needsGeneratedAttributes_IsFrozen 855518"];
1031 [label="var specifiedName = sourceModule.MetadataName; 855519"];
1032 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 855520"];
1033 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 855521"];
1034 [label="_metadataName 855522"];
1035 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 855523"];
1036 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 855524"];
1037 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 855525"];
1038 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 855526"];
1039 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 855527"];
1040 [label="_sourceAssembly 855528"];
1041 [label="_lazyEmbeddedAttribute 855529"];
1042 [label="_lazyIsReadOnlyAttribute 855530"];
1043 [label="_lazyIsByRefLikeAttribute 855531"];
1044 [label="_lazyIsUnmanagedAttribute 855532"];
1045 [label="_lazyNullableAttribute 855533"];
1046 [label="_lazyNullableContextAttribute 855534"];
1047 [label="_lazyNullablePublicOnlyAttribute 855535"];
1048 [label="_lazyNativeIntegerAttribute 855536"];
1049 [label="_metadataName 855537"];
1050 [label="Debug.Assert(sourceAssembly is object); 855538"];
1051 [label="_sourceAssembly 855539"];
1052 [label="_additionalTypes = additionalTypes.NullToEmpty(); 855540"];
1053 [label="_additionalTypes 855541"];
1054 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 855542"];
1055 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 855543"];
1056 [label="(emitOptions.OutputNameOverride == null) 855544"];
1057 [label="sourceAssembly.MetadataName 855545"];
1058 [label="_metadataName 855546"];
1059 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 855547"];
1060 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 855548"];
1061 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 855549"];
1062 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 855550"];
1063 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 855551"];
1064 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 855552"];
1065 [label="moduleBeingBuilt.SourceLinkStreamOpt 855553"];
1066 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 855554"];
1067 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 855555"];
1068 [label="moduleBeingBuilt.EmbeddedTexts 855556"];
1069 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 855557"];
1070 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 855558"];
1071 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 855559"];
1072 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 855560"];
1073 [label="testData.Module 855561"];
1074 [label="return moduleBeingBuilt; 855562"];
1075 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 855563"];
1076 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 855564"];
1077 [label="param CompileMethods(bool emittingPdb) 855565"];
1078 [label="param CompileMethods(bool emitMetadataOnly) 855566"];
1079 [label="param CompileMethods(bool emitTestCoverageData) 855567"];
1080 [label="param CompileMethods(DiagnosticBag diagnostics) 855568"];
1081 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 855569"];
1082 [label="param CompileMethods(CancellationToken cancellationToken) 855570"];
1083 [label="param CompileMethods(this) 855571"];
1084 [label="PooledHashSet<int>? excludeDiagnostics = null; 855572"];
1085 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 855573"];
1086 [label="excludeDiagnostics = PooledHashSet<int>.GetInstance(); 855574"];
1087 [label="excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody); 855575"];
1088 [label="excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody); 855576"];
1089 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 855577"];
1090 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 855578"];
1091 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 855579"];
1092 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 855580"];
1093 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 855581"];
1094 [label="param GetDiagnostics(CompilationStage stage) 855582"];
1095 [label="param GetDiagnostics(bool includeEarlierStages) 855583"];
1096 [label="param GetDiagnostics(CancellationToken cancellationToken) 855584"];
1097 [label="param GetDiagnostics(this) 855585"];
1098 [label="var diagnostics = DiagnosticBag.GetInstance(); 855586"];
1099 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 855587"];
1100 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 855588"];
1101 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 855589"];
1102 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 855590"];
1103 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 855591"];
1104 [label="param GetDiagnostics(CompilationStage stage) 855592"];
1105 [label="param GetDiagnostics(bool includeEarlierStages) 855593"];
1106 [label="param GetDiagnostics(DiagnosticBag diagnostics) 855594"];
1107 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 855595"];
1108 [label="param GetDiagnostics(this) 855596"];
1109 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 855597"];
1110 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 855598"];
1111 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 855599"];
1112 [label="this.SyntaxTrees 855600"];
1113 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 855601"];
1114 [label="_syntaxAndDeclarations.GetLazyState() 855602"];
1115 [label="param GetLazyState(this) 855603"];
1116 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855604"];
1117 [label="var syntaxTrees = this.SyntaxTrees; 855605"];
1118 [label="this.Options 855606"];
1119 [label="get\n            {\n                return _options;\n            } 855607"];
1120 [label="return _options; 855608"];
1121 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 855609"];
1122 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 855610"];
1123 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 855611"];
1124 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 855612"];
1125 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 855613"];
1126 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 855614"];
1127 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 855615"];
1128 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 855616"];
1129 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 855617"];
1130 [label="ImmutableArray<LoadDirective> loadDirectives; 855618"];
1131 [label="loadDirectives 855619"];
1132 [label="syntaxAndDeclarations.GetLazyState() 855620"];
1133 [label="param GetLazyState(this) 855621"];
1134 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 855622"];
1135 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 855623"];
1136 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 855624"];
1137 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 855625"];
1138 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 855626"];
1139 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 855627"];
1140 [label="cancellationToken.ThrowIfCancellationRequested(); 855628"];
1141 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 855629"];
1142 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 855630"];
1143 [label="CheckAssemblyName(builder); 855631"];
1144 [label="CheckAssemblyName(builder); 855632"];
1145 [label="CheckAssemblyName(builder); 855633"];
1146 [label="Options 855634"];
1147 [label="get\n            {\n                return _options;\n            } 855635"];
1148 [label="return _options; 855636"];
1149 [label="builder.AddRange(Options.Errors); 855637"];
1150 [label="Options 855638"];
1151 [label="get\n            {\n                return _options;\n            } 855639"];
1152 [label="return _options; 855640"];
1153 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 855641"];
1154 [label="cancellationToken.ThrowIfCancellationRequested(); 855642"];
1155 [label="GetBoundReferenceManager() 855643"];
1156 [label="param GetBoundReferenceManager(this) 855644"];
1157 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855645"];
1158 [label="return _referenceManager; 855646"];
1159 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 855647"];
1160 [label="cancellationToken.ThrowIfCancellationRequested(); 855648"];
1161 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 855649"];
1162 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 855650"];
1163 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 855651"];
1164 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 855652"];
1165 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 855653"];
1166 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 855654"];
1167 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 855655"];
1168 [label="param GetSourceDeclarationDiagnostics(this) 855656"];
1169 [label="GlobalImports 855657"];
1170 [label="=> _globalImports.Value 855658"];
1171 [label="_globalImports.Value 855659"];
1172 [label="_globalImports.Value 855660"];
1173 [label="=> Imports.FromGlobalUsings(this) 855661"];
1174 [label="this 855662"];
1175 [label="Imports.FromGlobalUsings(this) 855663"];
1176 [label="Imports.FromGlobalUsings(this) 855664"];
1177 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 855665"];
1178 [label="ScriptCompilationInfo 855666"];
1179 [label="ScriptCompilationInfo?.PreviousScriptCompilation 855667"];
1180 [label="GlobalImports.Complete(cancellationToken); 855668"];
1181 [label="GlobalImports.Complete(cancellationToken); 855669"];
1182 [label="GlobalImports.Complete(cancellationToken); 855670"];
1183 [label="SourceLocation? location = null; 855671"];
1184 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 855672"];
1185 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 855673"];
1186 [label="Assembly 855674"];
1187 [label="get\n            {\n                return SourceAssembly;\n            } 855675"];
1188 [label="SourceAssembly 855676"];
1189 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 855677"];
1190 [label="GetBoundReferenceManager() 855678"];
1191 [label="param GetBoundReferenceManager(this) 855679"];
1192 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855680"];
1193 [label="return _referenceManager; 855681"];
1194 [label="GetBoundReferenceManager(); 855682"];
1195 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 855683"];
1196 [label="Assembly.ForceComplete(location, cancellationToken); 855684"];
1197 [label="Assembly.ForceComplete(location, cancellationToken); 855685"];
1198 [label="Assembly.ForceComplete(location, cancellationToken); 855686"];
1199 [label="Assembly.ForceComplete(location, cancellationToken); 855687"];
1200 [label="Assembly.ForceComplete(location, cancellationToken); 855688"];
1201 [label="SourceAssembly 855689"];
1202 [label="GetBoundReferenceManager() 855690"];
1203 [label="param GetBoundReferenceManager(this) 855691"];
1204 [label="GetBoundReferenceManager(); 855692"];
1205 [label="Declarations 855693"];
1206 [label="_syntaxAndDeclarations.GetLazyState() 855694"];
1207 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855695"];
1208 [label="return Declarations.GetMergedRoot(this); 855696"];
1209 [label="_syntaxAndDeclarations.GetLazyState() 855697"];
1210 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855698"];
1211 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 855699"];
1212 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 855700"];
1213 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 855701"];
1214 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 855702"];
1215 [label="var diagnostics = new DiagnosticBag(); 855703"];
1216 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 855704"];
1217 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 855705"];
1218 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 855706"];
1219 [label="return _lazyDeclarationDiagnostics; 855707"];
1220 [label="param SymbolDeclaredEvent(Symbol symbol) 855708"];
1221 [label="param SymbolDeclaredEvent(this) 855709"];
1222 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 855710"];
1223 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 855711"];
1224 [label="param GetUnaliasedReferencedAssemblies(this) 855712"];
1225 [label="GetBoundReferenceManager() 855713"];
1226 [label="param GetBoundReferenceManager(this) 855714"];
1227 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855715"];
1228 [label="return _referenceManager; 855716"];
1229 [label="var referenceManager = GetBoundReferenceManager(); 855717"];
1230 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 855718"];
1231 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 855719"];
1232 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 855720"];
1233 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 855721"];
1234 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 855722"];
1235 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 855723"];
1236 [label="return _additionalCodegenWarnings; 855724"];
1237 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855725"];
1238 [label="return _referenceManager; 855726"];
1239 [label="GetBoundReferenceManager(); 855727"];
1240 [label="param GetSpecialType(SpecialType specialType) 855728"];
1241 [label="param GetSpecialType(this) 855729"];
1242 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 855730"];
1243 [label="NamedTypeSymbol result; 855731"];
1244 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 855732"];
1245 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 855733"];
1246 [label="Assembly 855734"];
1247 [label="GetBoundReferenceManager() 855735"];
1248 [label="GetBoundReferenceManager(); 855736"];
1249 [label="result = Assembly.GetSpecialType(specialType); 855737"];
1250 [label="result = Assembly.GetSpecialType(specialType); 855738"];
1251 [label="Debug.Assert(result.SpecialType == specialType); 855739"];
1252 [label="return result; 855740"];
1253 [label="param GetBinder(CSharpSyntaxNode syntax) 855741"];
1254 [label="param GetBinder(this) 855742"];
1255 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 855743"];
1256 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 855744"];
1257 [label="GetBinderFactory(syntax.SyntaxTree) 855745"];
1258 [label="param GetBinderFactory(SyntaxTree syntaxTree) 855746"];
1259 [label="param GetBinderFactory(bool ignoreAccessibility = false) 855747"];
1260 [label="param GetBinderFactory(this) 855748"];
1261 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 855749"];
1262 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 855750"];
1263 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 855751"];
1264 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 855752"];
1265 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 855753"];
1266 [label="param GetBinderFactory(SyntaxTree syntaxTree) 855754"];
1267 [label="param GetBinderFactory(bool ignoreAccessibility) 855755"];
1268 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 855756"];
1269 [label="param GetBinderFactory(this) 855757"];
1270 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 855758"];
1271 [label="ignoreAccessibility 855759"];
1272 [label="_binderFactories 855760"];
1273 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 855761"];
1274 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 855762"];
1275 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 855763"];
1276 [label="GetSyntaxTreeOrdinal(syntaxTree) 855764"];
1277 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 855765"];
1278 [label="param GetSyntaxTreeOrdinal(this) 855766"];
1279 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 855767"];
1280 [label="this.ContainsSyntaxTree(tree) 855768"];
1281 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 855769"];
1282 [label="param ContainsSyntaxTree(this) 855770"];
1283 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 855771"];
1284 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 855772"];
1285 [label="_syntaxAndDeclarations.GetLazyState() 855773"];
1286 [label="param GetLazyState(this) 855774"];
1287 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855775"];
1288 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 855776"];
1289 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 855777"];
1290 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 855778"];
1291 [label="_syntaxAndDeclarations.GetLazyState() 855779"];
1292 [label="param GetLazyState(this) 855780"];
1293 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855781"];
1294 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 855782"];
1295 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 855783"];
1296 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 855784"];
1297 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 855785"];
1298 [label="this.SyntaxTrees 855786"];
1299 [label="param GetLazyState(this) 855787"];
1300 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 855788"];
1301 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 855789"];
1302 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 855790"];
1303 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 855791"];
1304 [label="BinderFactory? previousFactory; 855792"];
1305 [label="var previousWeakReference = binderFactories[treeNum]; 855793"];
1306 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 855794"];
1307 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 855795"];
1308 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 855796"];
1309 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 855797"];
1310 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 855798"];
1311 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 855799"];
1312 [label="param AddNewFactory(SyntaxTree syntaxTree) 855800"];
1313 [label="param AddNewFactory(bool ignoreAccessibility) 855801"];
1314 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 855802"];
1315 [label="param AddNewFactory(this) 855803"];
1316 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 855804"];
1317 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 855805"];
1318 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 855806"];
1319 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 855807"];
1320 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 855808"];
1321 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 855809"];
1322 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 855810"];
1323 [label="BinderFactory? previousFactory; 855811"];
1324 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 855812"];
1325 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 855813"];
1326 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 855814"];
1327 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 855815"];
1328 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 855816"];
1329 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 855817"];
1330 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 855818"];
1331 [label="return newFactory; 855819"];
1332 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 855820"];
1333 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 855821"];
1334 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 855822"];
1335 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 855823"];
1336 [label="GetAllUnaliasedModules(modules); 855824"];
1337 [label="GetAllUnaliasedModules(modules) 855825"];
1338 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 855826"];
1339 [label="param GetAllUnaliasedModules(this) 855827"];
1340 [label="Assembly 855828"];
1341 [label="get\n            {\n                return SourceAssembly;\n            } 855829"];
1342 [label="GetBoundReferenceManager() 855830"];
1343 [label="param GetBoundReferenceManager(this) 855831"];
1344 [label="GetBoundReferenceManager(); 855832"];
1345 [label="modules.AddRange(Assembly.Modules); 855833"];
1346 [label="modules.AddRange(Assembly.Modules); 855834"];
1347 [label="GetBoundReferenceManager() 855835"];
1348 [label="param GetBoundReferenceManager(this) 855836"];
1349 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855837"];
1350 [label="return _referenceManager; 855838"];
1351 [label="var referenceManager = GetBoundReferenceManager(); 855839"];
1352 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 855840"];
1353 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 855841"];
1354 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 855842"];
1355 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 855843"];
1356 [label="GetAllUnaliasedModules(modules); 855844"];
1357 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 855845"];
1358 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 855846"];
1359 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 855847"];
1360 [label="modules.Free(); 855848"];
1361 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 855849"];
1362 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 855850"];
1363 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 855851"];
1364 [label="return _lazyGlobalNamespace; 855852"];
1365 [label="get\n            {\n                return Assembly.Modules[0];\n            } 855853"];
1366 [label="Assembly 855854"];
1367 [label="get\n            {\n                return SourceAssembly;\n            } 855855"];
1368 [label="SourceAssembly 855856"];
1369 [label="GetBoundReferenceManager() 855857"];
1370 [label="param GetBoundReferenceManager(this) 855858"];
1371 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855859"];
1372 [label="return _referenceManager; 855860"];
1373 [label="GetBoundReferenceManager(); 855861"];
1374 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 855862"];
1375 [label="return Assembly.Modules[0]; 855863"];
1376 [label="return Assembly.Modules[0]; 855864"];
1377 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 855865"];
1378 [label="param IsNullableAnalysisEnabledIn(this) 855866"];
1379 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 855867"];
1380 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 855868"];
1381 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 855869"];
1382 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 855870"];
1383 [label="param IsNullableAnalysisEnabledIn(this) 855871"];
1384 [label="GetNullableAnalysisValue() 855872"];
1385 [label="param GetNullableAnalysisValue(this) 855873"];
1386 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 855874"];
1387 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 855875"];
1388 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 855876"];
1389 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 855877"];
1390 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 855878"];
1391 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 855879"];
1392 [label="Options 855880"];
1393 [label="get\n            {\n                return _options;\n            } 855881"];
1394 [label="return _options; 855882"];
1395 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 855883"];
1396 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 855884"];
1397 [label="param GetBinderFactory(SyntaxTree syntaxTree) 855885"];
1398 [label="param GetBinderFactory(bool ignoreAccessibility = false) 855886"];
1399 [label="param GetBinderFactory(this) 855887"];
1400 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 855888"];
1401 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 855889"];
1402 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 855890"];
1403 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 855891"];
1404 [label="param GetBinderFactory(SyntaxTree syntaxTree) 855892"];
1405 [label="param GetBinderFactory(bool ignoreAccessibility) 855893"];
1406 [label="param GetBinderFactory(this) 855894"];
1407 [label="ignoreAccessibility 855895"];
1408 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 855896"];
1409 [label="GetSyntaxTreeOrdinal(syntaxTree) 855897"];
1410 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 855898"];
1411 [label="param GetSyntaxTreeOrdinal(this) 855899"];
1412 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 855900"];
1413 [label="this.ContainsSyntaxTree(tree) 855901"];
1414 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 855902"];
1415 [label="param ContainsSyntaxTree(this) 855903"];
1416 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 855904"];
1417 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 855905"];
1418 [label="_syntaxAndDeclarations.GetLazyState() 855906"];
1419 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855907"];
1420 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 855908"];
1421 [label="_syntaxAndDeclarations.GetLazyState() 855909"];
1422 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855910"];
1423 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 855911"];
1424 [label="BinderFactory? previousFactory; 855912"];
1425 [label="var previousWeakReference = binderFactories[treeNum]; 855913"];
1426 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 855914"];
1427 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 855915"];
1428 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 855916"];
1429 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 855917"];
1430 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 855918"];
1431 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 855919"];
1432 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 855920"];
1433 [label="param AddNewFactory(SyntaxTree syntaxTree) 855921"];
1434 [label="param AddNewFactory(bool ignoreAccessibility) 855922"];
1435 [label="param AddNewFactory(this) 855923"];
1436 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 855924"];
1437 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 855925"];
1438 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 855926"];
1439 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 855927"];
1440 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 855928"];
1441 [label="BinderFactory? previousFactory; 855929"];
1442 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 855930"];
1443 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 855931"];
1444 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 855932"];
1445 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 855933"];
1446 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 855934"];
1447 [label="get\n            {\n                return Assembly.Modules[0];\n            } 855935"];
1448 [label="Assembly 855936"];
1449 [label="get\n            {\n                return SourceAssembly;\n            } 855937"];
1450 [label="SourceAssembly 855938"];
1451 [label="GetBoundReferenceManager() 855939"];
1452 [label="param GetBoundReferenceManager(this) 855940"];
1453 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855941"];
1454 [label="return _referenceManager; 855942"];
1455 [label="GetBoundReferenceManager(); 855943"];
1456 [label="return Assembly.Modules[0]; 855944"];
1457 [label="GetBoundReferenceManager() 855945"];
1458 [label="GetBoundReferenceManager(); 855946"];
1459 [label="Debug.Assert(result.SpecialType == specialType); 855947"];
1460 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855948"];
1461 [label="return _referenceManager; 855949"];
1462 [label="GetBoundReferenceManager(); 855950"];
1463 [label="param ShouldEmitNullableAttributes(Symbol symbol) 855951"];
1464 [label="param ShouldEmitNullableAttributes(this) 855952"];
1465 [label="RoslynDebug.Assert(symbol is object); 855953"];
1466 [label="RoslynDebug.Assert(symbol is object); 855954"];
1467 [label="Debug.Assert(symbol.IsDefinition); 855955"];
1468 [label="SourceModule 855956"];
1469 [label="get\n            {\n                return Assembly.Modules[0];\n            } 855957"];
1470 [label="Assembly 855958"];
1471 [label="get\n            {\n                return SourceAssembly;\n            } 855959"];
1472 [label="SourceAssembly 855960"];
1473 [label="GetBoundReferenceManager() 855961"];
1474 [label="param GetBoundReferenceManager(this) 855962"];
1475 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855963"];
1476 [label="return _referenceManager; 855964"];
1477 [label="GetBoundReferenceManager(); 855965"];
1478 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 855966"];
1479 [label="return Assembly.Modules[0]; 855967"];
1480 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 855968"];
1481 [label="EmitNullablePublicOnly 855969"];
1482 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 855970"];
1483 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 855971"];
1484 [label="SyntaxTrees 855972"];
1485 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 855973"];
1486 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 855974"];
1487 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 855975"];
1488 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 855976"];
1489 [label="_lazyEmitNullablePublicOnly 855977"];
1490 [label="return _lazyEmitNullablePublicOnly.Value(); 855978"];
1491 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 855979"];
1492 [label="return true; 855980"];
1493 [label="Debug.Assert(symbol.IsDefinition); 855981"];
1494 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855982"];
1495 [label="return _referenceManager; 855983"];
1496 [label="GetBoundReferenceManager(); 855984"];
1497 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 855985"];
1498 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 855986"];
1499 [label="return _referenceManager; 855987"];
1500 [label="GetBoundReferenceManager(); 855988"];
1501 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 855989"];
1502 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 855990"];
1503 [label="param IsFeatureEnabled(MessageID feature) 855991"];
1504 [label="compilation.SyntaxTrees 855992"];
1505 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 855993"];
1506 [label="_syntaxAndDeclarations.GetLazyState() 855994"];
1507 [label="param GetLazyState(this) 855995"];
1508 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 855996"];
1509 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 855997"];
1510 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 855998"];
1511 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 855999"];
1512 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 856000"];
1513 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 856001"];
1514 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 856002"];
1515 [label="_declarationDiagnosticsFrozen = true; 856003"];
1516 [label="_declarationDiagnosticsFrozen 856004"];
1517 [label="_needsGeneratedAttributes_IsFrozen = true; 856005"];
1518 [label="_needsGeneratedAttributes_IsFrozen 856006"];
1519 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 856007"];
1520 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 856008"];
1521 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 856009"];
1522 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 856010"];
1523 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 856011"];
1524 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 856012"];
1525 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 856013"];
1526 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 856014"];
1527 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 856015"];
1528 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 856016"];
1529 [label="param GetClsComplianceDiagnostics(this) 856017"];
1530 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 856018"];
1531 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 856019"];
1532 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 856020"];
1533 [label="var builder = DiagnosticBag.GetInstance(); 856021"];
1534 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 856022"];
1535 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 856023"];
1536 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 856024"];
1537 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 856025"];
1538 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 856026"];
1539 [label="param CheckCompliance(CSharpCompilation compilation) 856027"];
1540 [label="param CheckCompliance(DiagnosticBag diagnostics) 856028"];
1541 [label="param CheckCompliance(CancellationToken cancellationToken) 856029"];
1542 [label="param CheckCompliance(SyntaxTree filterTree = null) 856030"];
1543 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 856031"];
1544 [label="var queue = new ConcurrentQueue<Diagnostic>(); 856032"];
1545 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 856033"];
1546 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 856034"];
1547 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 856035"];
1548 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 856036"];
1549 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 856037"];
1550 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 856038"];
1551 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 856039"];
1552 [label="param ClsComplianceChecker(CSharpCompilation compilation) 856040"];
1553 [label="param ClsComplianceChecker(SyntaxTree filterTree) 856041"];
1554 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 856042"];
1555 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 856043"];
1556 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 856044"];
1557 [label="param ClsComplianceChecker(this) 856045"];
1558 [label="param ClsComplianceChecker(this) 856046"];
1559 [label="_compilation 856047"];
1560 [label="_filterTree 856048"];
1561 [label="_filterSpanWithinTree 856049"];
1562 [label="_diagnostics 856050"];
1563 [label="_declaredOrInheritedCompliance 856051"];
1564 [label="_compilerTasks 856052"];
1565 [label="_compilation 856053"];
1566 [label="_filterTree 856054"];
1567 [label="_filterSpanWithinTree 856055"];
1568 [label="_diagnostics 856056"];
1569 [label="_cancellationToken 856057"];
1570 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 856058"];
1571 [label="_declaredOrInheritedCompliance 856059"];
1572 [label="ConcurrentAnalysis 856060"];
1573 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 856061"];
1574 [label="null 856062"];
1575 [label="_filterTree == null 856063"];
1576 [label="_compilation.Options 856064"];
1577 [label="get\n            {\n                return _options;\n            } 856065"];
1578 [label="return _options; 856066"];
1579 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 856067"];
1580 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 856068"];
1581 [label="_compilerTasks = new ConcurrentStack<Task>(); 856069"];
1582 [label="_compilerTasks 856070"];
1583 [label="compilation.Assembly 856071"];
1584 [label="get\n            {\n                return SourceAssembly;\n            } 856072"];
1585 [label="GetBoundReferenceManager() 856073"];
1586 [label="param GetBoundReferenceManager(this) 856074"];
1587 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 856075"];
1588 [label="return _referenceManager; 856076"];
1589 [label="GetBoundReferenceManager(); 856077"];
1590 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 856078"];
1591 [label="checker.Visit(compilation.Assembly); 856079"];
1592 [label="checker.Visit(compilation.Assembly); 856080"];
1593 [label="checker.Visit(compilation.Assembly); 856081"];
1594 [label="param VisitAssembly(AssemblySymbol symbol) 856082"];
1595 [label="param VisitAssembly(this) 856083"];
1596 [label="_cancellationToken.ThrowIfCancellationRequested(); 856084"];
1597 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 856085"];
1598 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 856086"];
1599 [label="GetDeclaredOrInheritedCompliance(symbol) 856087"];
1600 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 856088"];
1601 [label="param GetDeclaredOrInheritedCompliance(this) 856089"];
1602 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 856090"];
1603 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 856091"];
1604 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 856092"];
1605 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 856093"];
1606 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 856094"];
1607 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 856095"];
1608 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 856096"];
1609 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 856097"];
1610 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 856098"];
1611 [label="Compliance compliance; 856099"];
1612 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 856100"];
1613 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 856101"];
1614 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 856102"];
1615 [label="Location ignoredLocation; 856103"];
1616 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 856104"];
1617 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 856105"];
1618 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 856106"];
1619 [label="param GetDeclaredCompliance(Symbol symbol) 856107"];
1620 [label="param GetDeclaredCompliance(out Location attributeLocation) 856108"];
1621 [label="param GetDeclaredCompliance(this) 856109"];
1622 [label="attributeLocation = null; 856110"];
1623 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 856111"];
1624 [label="return null; 856112"];
1625 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 856113"];
1626 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 856114"];
1627 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 856115"];
1628 [label="compliance = Compliance.ImpliedFalse; 856116"];
1629 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 856117"];
1630 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 856118"];
1631 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 856119"];
1632 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 856120"];
1633 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 856121"];
1634 [label="IsTrue(assemblyCompliance) 856122"];
1635 [label="param IsTrue(Compliance compliance) 856123"];
1636 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 856124"];
1637 [label="return false; 856125"];
1638 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 856126"];
1639 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 856127"];
1640 [label="ModuleSymbol module = symbol.Modules[i]; 856128"];
1641 [label="Location attributeLocation; 856129"];
1642 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 856130"];
1643 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 856131"];
1644 [label="GetDeclaredCompliance(module, out attributeLocation) 856132"];
1645 [label="param GetDeclaredCompliance(Symbol symbol) 856133"];
1646 [label="param GetDeclaredCompliance(out Location attributeLocation) 856134"];
1647 [label="param GetDeclaredCompliance(this) 856135"];
1648 [label="attributeLocation = null; 856136"];
1649 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 856137"];
1650 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 856138"];
1651 [label="i == 0 856139"];
1652 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 856140"];
1653 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 856141"];
1654 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 856142"];
1655 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 856143"];
1656 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 856144"];
1657 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 856145"];
1658 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 856146"];
1659 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 856147"];
1660 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 856148"];
1661 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 856149"];
1662 [label="GetDeclaredOrInheritedCompliance(sourceModule) 856150"];
1663 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 856151"];
1664 [label="param GetDeclaredOrInheritedCompliance(this) 856152"];
1665 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 856153"];
1666 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 856154"];
1667 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 856155"];
1668 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 856156"];
1669 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 856157"];
1670 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 856158"];
1671 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 856159"];
1672 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 856160"];
1673 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 856161"];
1674 [label="Compliance compliance; 856162"];
1675 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 856163"];
1676 [label="Location ignoredLocation; 856164"];
1677 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 856165"];
1678 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 856166"];
1679 [label="param GetDeclaredCompliance(out Location attributeLocation) 856167"];
1680 [label="param GetDeclaredCompliance(this) 856168"];
1681 [label="attributeLocation = null; 856169"];
1682 [label="return null; 856170"];
1683 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 856171"];
1684 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 856172"];
1685 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 856173"];
1686 [label="GetInheritedCompliance(symbol) 856174"];
1687 [label="param GetInheritedCompliance(Symbol symbol) 856175"];
1688 [label="param GetInheritedCompliance(this) 856176"];
1689 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 856177"];
1690 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 856178"];
1691 [label="System.Diagnostics.Debug.Assert((object)containing != null); 856179"];
1692 [label="System.Diagnostics.Debug.Assert((object)containing != null); 856180"];
1693 [label="return GetDeclaredOrInheritedCompliance(containing); 856181"];
1694 [label="GetDeclaredOrInheritedCompliance(containing) 856182"];
1695 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 856183"];
1696 [label="param GetDeclaredOrInheritedCompliance(this) 856184"];
1697 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 856185"];
1698 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 856186"];
1699 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 856187"];
1700 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 856188"];
1701 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 856189"];
1702 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 856190"];
1703 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 856191"];
1704 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 856192"];
1705 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 856193"];
1706 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 856194"];
1707 [label="return compliance; 856195"];
1708 [label="IsTrue(GetInheritedCompliance(symbol)) 856196"];
1709 [label="param IsTrue(Compliance compliance) 856197"];
1710 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 856198"];
1711 [label="return false; 856199"];
1712 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 856200"];
1713 [label="param IsTrue(Compliance compliance) 856201"];
1714 [label="Visit(symbol.GlobalNamespace); 856202"];
1715 [label="Visit(symbol.GlobalNamespace); 856203"];
1716 [label="param VisitNamespace(NamespaceSymbol symbol) 856204"];
1717 [label="param VisitNamespace(this) 856205"];
1718 [label="_cancellationToken.ThrowIfCancellationRequested(); 856206"];
1719 [label="if (DoNotVisit(symbol)) return; 856207"];
1720 [label="DoNotVisit(symbol) 856208"];
1721 [label="param DoNotVisit(Symbol symbol) 856209"];
1722 [label="param DoNotVisit(this) 856210"];
1723 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 856211"];
1724 [label="return false; 856212"];
1725 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 856213"];
1726 [label="GetDeclaredOrInheritedCompliance(symbol) 856214"];
1727 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 856215"];
1728 [label="param GetDeclaredOrInheritedCompliance(this) 856216"];
1729 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 856217"];
1730 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 856218"];
1731 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 856219"];
1732 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 856220"];
1733 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 856221"];
1734 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 856222"];
1735 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 856223"];
1736 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 856224"];
1737 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 856225"];
1738 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 856226"];
1739 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 856227"];
1740 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 856228"];
1741 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 856229"];
1742 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 856230"];
1743 [label="return compliance; 856231"];
1744 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 856232"];
1745 [label="param IsTrue(Compliance compliance) 856233"];
1746 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 856234"];
1747 [label="return false; 856235"];
1748 [label="ConcurrentAnalysis 856236"];
1749 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 856237"];
1750 [label="null 856238"];
1751 [label="_filterTree == null 856239"];
1752 [label="_compilation.Options 856240"];
1753 [label="get\n            {\n                return _options;\n            } 856241"];
1754 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 856242"];
1755 [label="VisitNamespaceMembersAsTasks(symbol); 856243"];
1756 [label="VisitNamespaceMembersAsTasks(symbol) 856244"];
1757 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 856245"];
1758 [label="param VisitNamespaceMembersAsTasks(this) 856246"];
1759 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 856247"];
1760 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 856248"];
1761 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 856249"];
1762 [label="VisitNamespaceMembersAsTasks(symbol); 856250"];
1763 [label="checker.WaitForWorkers() 856251"];
1764 [label="param WaitForWorkers(this) 856252"];
1765 [label="var tasks = _compilerTasks; 856253"];
1766 [label="if (tasks == null)\n            {\n                return;\n            } 856254"];
1767 [label="if (tasks == null)\n            {\n                return;\n            } 856255"];
1768 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 856256"];
1769 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 856257"];
1770 [label="curTask.GetAwaiter().GetResult(); 856258"];
1771 [label="checker.WaitForWorkers(); 856259"];
1772 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 856260"];
1773 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 856261"];
1774 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 856262"];
1775 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 856263"];
1776 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 856264"];
1777 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 856265"];
1778 [label="return _lazyClsComplianceDiagnostics; 856266"];
1779 [label="return result.AsImmutable().Concat(clsDiagnostics); 856267"];
1780 [label="return result.AsImmutable().Concat(clsDiagnostics); 856268"];
1781 [label="return result.AsImmutable().Concat(clsDiagnostics); 856269"];
1782 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 856270"];
1783 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 856271"];
1784 [label="cancellationToken.ThrowIfCancellationRequested(); 856272"];
1785 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 856273"];
1786 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 856274"];
1787 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 856275"];
1788 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 856276"];
1789 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 856277"];
1790 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 856278"];
1791 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 856279"];
1792 [label="return diagnostics.ToReadOnlyAndFree(); 856280"];
1793 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 856281"];
1794 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 856282"];
1795 [label="excludeDiagnostics?.Free(); 856283"];
1796 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 856284"];
1797 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 856285"];
1798 [label="if (hasDeclarationErrors)\n                {\n                    return false;\n                } 856286"];
1799 [label="if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                } 856287"];
1800 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken); 856288"];
1801 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken); 856289"];
1802 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken); 856290"];
1803 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken) 856291"];
1804 [label="param ProcessSynthesizedMembers(CSharpCompilation compilation) 856292"];
1805 [label="param ProcessSynthesizedMembers(PEModuleBuilder moduleBeingBuilt) 856293"];
1806 [label="param ProcessSynthesizedMembers(CancellationToken cancellationToken) 856294"];
1807 [label="Debug.Assert(moduleBeingBuilt != null); 856295"];
1808 [label="Debug.Assert(moduleBeingBuilt != null); 856296"];
1809 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 856297"];
1810 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 856298"];
1811 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 856299"];
1812 [label="new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken) 856300"];
1813 [label="param SynthesizedMetadataCompiler(PEModuleBuilder moduleBeingBuilt) 856301"];
1814 [label="param SynthesizedMetadataCompiler(CancellationToken cancellationToken) 856302"];
1815 [label="param SynthesizedMetadataCompiler(this) 856303"];
1816 [label="param SynthesizedMetadataCompiler(this) 856304"];
1817 [label="_moduleBeingBuilt 856305"];
1818 [label="Debug.Assert(moduleBeingBuilt != null); 856306"];
1819 [label="Debug.Assert(moduleBeingBuilt != null); 856307"];
1820 [label="_moduleBeingBuilt 856308"];
1821 [label="_cancellationToken 856309"];
1822 [label="compilation.SourceModule 856310"];
1823 [label="get\n            {\n                return Assembly.Modules[0];\n            } 856311"];
1824 [label="Assembly 856312"];
1825 [label="get\n            {\n                return SourceAssembly;\n            } 856313"];
1826 [label="SourceAssembly 856314"];
1827 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 856315"];
1828 [label="GetBoundReferenceManager() 856316"];
1829 [label="param GetBoundReferenceManager(this) 856317"];
1830 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 856318"];
1831 [label="return _referenceManager; 856319"];
1832 [label="GetBoundReferenceManager(); 856320"];
1833 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 856321"];
1834 [label="return Assembly.Modules[0]; 856322"];
1835 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 856323"];
1836 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 856324"];
1837 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 856325"];
1838 [label="param VisitNamespace(NamespaceSymbol symbol) 856326"];
1839 [label="param VisitNamespace(this) 856327"];
1840 [label="_cancellationToken.ThrowIfCancellationRequested(); 856328"];
1841 [label="foreach (var s in symbol.GetMembers())\n            {\n                s.Accept(this);\n            } 856329"];
1842 [label="s.Accept(this); 856330"];
1843 [label="s.Accept(this); 856331"];
1844 [label="param VisitNamedType(NamedTypeSymbol symbol) 856332"];
1845 [label="param VisitNamedType(this) 856333"];
1846 [label="_cancellationToken.ThrowIfCancellationRequested(); 856334"];
1847 [label="var sourceTypeSymbol = symbol as SourceMemberContainerTypeSymbol; 856335"];
1848 [label="if ((object)sourceTypeSymbol != null)\n            {\n                if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                }\n            } 856336"];
1849 [label="if ((object)sourceTypeSymbol != null)\n            {\n                if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                }\n            } 856337"];
1850 [label="if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                } 856338"];
1851 [label="if (_moduleBeingBuilt != null)\n                {\n                    // In some circumstances (e.g. implicit implementation of an interface method by a non-virtual method in a\n                    // base type from another assembly) it is necessary for the compiler to generate explicit implementations for\n                    // some interface methods.  They don't go in the symbol table, but if we are emitting metadata, then we should\n                    // generate MethodDef entries for them.\n                    foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    }\n                } 856339"];
1852 [label="foreach (var synthesizedExplicitImpl in sourceTypeSymbol.GetSynthesizedExplicitImplementations(_cancellationToken))\n                    {\n                        _moduleBeingBuilt.AddSynthesizedDefinition(symbol, synthesizedExplicitImpl.GetCciAdapter());\n                    } 856340"];
1853 [label="new LexicalOrderSymbolComparer() 856341"];
1854 [label="param LexicalOrderSymbolComparer(this) 856342"];
1855 [label="Instance = new LexicalOrderSymbolComparer() 856343"];
1856 [label="foreach (Symbol member in symbol.GetMembers())\n            {\n                switch (member.Kind)\n                {\n                    case SymbolKind.Property:\n                    case SymbolKind.NamedType:\n                        member.Accept(this);\n                        break;\n                }\n            } 856344"];
1857 [label="foreach (Symbol member in symbol.GetMembers())\n            {\n                switch (member.Kind)\n                {\n                    case SymbolKind.Property:\n                    case SymbolKind.NamedType:\n                        member.Accept(this);\n                        break;\n                }\n            } 856345"];
1858 [label="param Compare(Symbol x) 856346"];
1859 [label="param Compare(Symbol y) 856347"];
1860 [label="param Compare(this) 856348"];
1861 [label="int comparison; 856349"];
1862 [label="if (x == y)\n            {\n                return 0;\n            } 856350"];
1863 [label="var xSortKey = x.GetLexicalSortKey(); 856351"];
1864 [label="var ySortKey = y.GetLexicalSortKey(); 856352"];
1865 [label="var ySortKey = y.GetLexicalSortKey(); 856353"];
1866 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 856354"];
1867 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 856355"];
1868 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 856356"];
1869 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 856357"];
1870 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 856358"];
1871 [label="return comparison; 856359"];
1872 [label="var xSortKey = x.GetLexicalSortKey(); 856360"];
1873 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 856361"];
1874 [label="comparison = x.Kind.ToSortOrder() - y.Kind.ToSortOrder(); 856362"];
1875 [label="comparison = x.Kind.ToSortOrder() - y.Kind.ToSortOrder(); 856363"];
1876 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 856364"];
1877 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 856365"];
1878 [label="return comparison; 856366"];
1879 [label="switch (member.Kind)\n                {\n                    case SymbolKind.Property:\n                    case SymbolKind.NamedType:\n                        member.Accept(this);\n                        break;\n                } 856367"];
1880 [label="member.Accept(this); 856368"];
1881 [label="member.Accept(this); 856369"];
1882 [label="param VisitProperty(PropertySymbol symbol) 856370"];
1883 [label="param VisitProperty(this) 856371"];
1884 [label="var sourceProperty = symbol as SourcePropertySymbolBase; 856372"];
1885 [label="if ((object)sourceProperty != null && sourceProperty.IsSealed)\n            {\n                var synthesizedAccessor = sourceProperty.SynthesizedSealedAccessorOpt;\n                if ((object)synthesizedAccessor != null)\n                {\n                    _moduleBeingBuilt.AddSynthesizedDefinition(sourceProperty.ContainingType, synthesizedAccessor.GetCciAdapter());\n                }\n            } 856373"];
1886 [label="if ((object)sourceProperty != null && sourceProperty.IsSealed)\n            {\n                var synthesizedAccessor = sourceProperty.SynthesizedSealedAccessorOpt;\n                if ((object)synthesizedAccessor != null)\n                {\n                    _moduleBeingBuilt.AddSynthesizedDefinition(sourceProperty.ContainingType, synthesizedAccessor.GetCciAdapter());\n                }\n            } 856374"];
1887 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken); 856375"];
1888 [label="return true; 856376"];
1889 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 856377"];
1890 [label="get { return this.SourceModule.GetPublicSymbol(); } 856378"];
1891 [label="this.SourceModule 856379"];
1892 [label="get\n            {\n                return Assembly.Modules[0];\n            } 856380"];
1893 [label="Assembly 856381"];
1894 [label="get\n            {\n                return SourceAssembly;\n            } 856382"];
1895 [label="SourceAssembly 856383"];
1896 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 856384"];
1897 [label="GetBoundReferenceManager() 856385"];
1898 [label="param GetBoundReferenceManager(this) 856386"];
1899 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 856387"];
1900 [label="return _referenceManager; 856388"];
1901 [label="GetBoundReferenceManager(); 856389"];
1902 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 856390"];
1903 [label="return Assembly.Modules[0]; 856391"];
1904 [label="return this.SourceModule.GetPublicSymbol(); 856392"];
1905 [label="get { return SourceAssembly.IsDelaySigned; } 856393"];
1906 [label="SourceAssembly 856394"];
1907 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 856395"];
1908 [label="GetBoundReferenceManager() 856396"];
1909 [label="param GetBoundReferenceManager(this) 856397"];
1910 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 856398"];
1911 [label="return _referenceManager; 856399"];
1912 [label="GetBoundReferenceManager(); 856400"];
1913 [label="SourceAssembly.IsDelaySigned 856401"];
1914 [label="get { return SourceAssembly.StrongNameKeys; } 856402"];
1915 [label="SourceAssembly 856403"];
1916 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 856404"];
1917 [label="GetBoundReferenceManager() 856405"];
1918 [label="param GetBoundReferenceManager(this) 856406"];
1919 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 856407"];
1920 [label="return _referenceManager; 856408"];
1921 [label="GetBoundReferenceManager(); 856409"];
1922 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 856410"];
1923 [label="param GetCorLibraryReferenceToEmit(this) 856411"];
1924 [label="CorLibrary 856412"];
1925 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 856413"];
1926 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 856414"];
1927 [label="AssemblySymbol corLibrary = CorLibrary; 856415"];
1928 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 856416"];
1929 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 856417"];
1930 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 856418"];
1931 [label="return Translate(corLibrary, context.Diagnostics); 856419"];
1932 [label="return Translate(corLibrary, context.Diagnostics); 856420"];
1933 [label="Translate(corLibrary, context.Diagnostics) 856421"];
1934 [label="param Translate(AssemblySymbol assembly) 856422"];
1935 [label="param Translate(DiagnosticBag diagnostics) 856423"];
1936 [label="param Translate(this) 856424"];
1937 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 856425"];
1938 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 856426"];
1939 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 856427"];
1940 [label="Cci.IModuleReference reference; 856428"];
1941 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 856429"];
1942 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 856430"];
1943 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 856431"];
1944 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 856432"];
1945 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 856433"];
1946 [label="new AssemblyReference(assembly) 856434"];
1947 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 856435"];
1948 [label="param AssemblyReference(this) 856436"];
1949 [label="_targetAssembly 856437"];
1950 [label="Debug.Assert((object)assemblySymbol != null); 856438"];
1951 [label="Debug.Assert((object)assemblySymbol != null); 856439"];
1952 [label="_targetAssembly 856440"];
1953 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 856441"];
1954 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 856442"];
1955 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 856443"];
1956 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 856444"];
1957 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 856445"];
1958 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 856446"];
1959 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 856447"];
1960 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 856448"];
1961 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 856449"];
1962 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 856450"];
1963 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 856451"];
1964 [label="param ValidateReferencedAssembly(this) 856452"];
1965 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 856453"];
1966 [label="asmRef.Identity 856454"];
1967 [label="=> _targetAssembly.Identity 856455"];
1968 [label="_targetAssembly.Identity 856456"];
1969 [label="AssemblyIdentity refIdentity = asmRef.Identity; 856457"];
1970 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 856458"];
1971 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 856459"];
1972 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 856460"];
1973 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 856461"];
1974 [label="var refMachine = assembly.Machine; 856462"];
1975 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 856463"];
1976 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 856464"];
1977 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 856465"];
1978 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 856466"];
1979 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 856467"];
1980 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 856468"];
1981 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 856469"];
1982 [label="return cachedAsmRef; 856470"];
1983 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 856471"];
1984 [label="=> _targetAssembly.Identity 856472"];
1985 [label="_targetAssembly.Identity 856473"];
1986 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 856474"];
1987 [label="param GetAssemblyReferencesFromAddedModules(this) 856475"];
1988 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 856476"];
1989 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 856477"];
1990 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 856478"];
1991 [label="param GetAssemblyReferencesFromAddedModules(this) 856479"];
1992 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 856480"];
1993 [label="param GetFiles(EmitContext context) 856481"];
1994 [label="param GetFiles(this) 856482"];
1995 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 856483"];
1996 [label="return getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly); 856484"];
1997 [label="return getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly); 856485"];
1998 [label="getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly) 856486"];
1999 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 856487"];
2000 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 856488"];
2001 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 856489"];
2002 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 856490"];
2003 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 856491"];
2004 [label="var modules = sourceAssSymbol.Modules; 856492"];
2005 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 856493"];
2006 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 856494"];
2007 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 856495"];
2008 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 856496"];
2009 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 856497"];
2010 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 856498"];
2011 [label="builder.Free(); 856499"];
2012 [label="return lazyFiles; 856500"];
2013 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 856501"];
2014 [label="=> _embeddedTypesManagerOpt 856502"];
2015 [label="_embeddedTypesManagerOpt 856503"];
2016 [label="param GetAnonymousTypeDefinitions(EmitContext context) 856504"];
2017 [label="param GetAnonymousTypeDefinitions(this) 856505"];
2018 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 856506"];
2019 [label="return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>(); 856507"];
2020 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 856508"];
2021 [label="param GetAdditionalTopLevelTypeDefinitions(this) 856509"];
2022 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 856510"];
2023 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 856511"];
2024 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 856512"];
2025 [label="=> _additionalTypes 856513"];
2026 [label="_additionalTypes 856514"];
2027 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 856515"];
2028 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 856516"];
2029 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 856517"];
2030 [label="param GetEmbeddedTypeDefinitions(this) 856518"];
2031 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 856519"];
2032 [label="GetEmbeddedTypes(context.Diagnostics) 856520"];
2033 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 856521"];
2034 [label="param GetEmbeddedTypes(this) 856522"];
2035 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 856523"];
2036 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 856524"];
2037 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 856525"];
2038 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 856526"];
2039 [label="param CreateEmbeddedAttributesIfNeeded(this) 856527"];
2040 [label="GetNeedsGeneratedAttributes() 856528"];
2041 [label="param GetNeedsGeneratedAttributes(this) 856529"];
2042 [label="_needsGeneratedAttributes_IsFrozen = true; 856530"];
2043 [label="_needsGeneratedAttributes_IsFrozen 856531"];
2044 [label="GetNeedsGeneratedAttributesInternal() 856532"];
2045 [label="param GetNeedsGeneratedAttributesInternal(this) 856533"];
2046 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 856534"];
2047 [label="return GetNeedsGeneratedAttributesInternal(); 856535"];
2048 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 856536"];
2049 [label="ShouldEmitNullablePublicOnlyAttribute() 856537"];
2050 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 856538"];
2051 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 856539"];
2052 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 856540"];
2053 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 856541"];
2054 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 856542"];
2055 [label="var createParameterlessEmbeddedAttributeSymbol = new Func<string, NamespaceSymbol, DiagnosticBag, SynthesizedEmbeddedAttributeSymbol>(CreateParameterlessEmbeddedAttributeSymbol); 856543"];
2056 [label="CreateAttributeIfNeeded(\n                ref _lazyEmbeddedAttribute,\n                diagnostics,\n                AttributeDescription.CodeAnalysisEmbeddedAttribute,\n                createParameterlessEmbeddedAttributeSymbol); 856544"];
2057 [label="CreateAttributeIfNeeded(\n                ref _lazyEmbeddedAttribute,\n                diagnostics,\n                AttributeDescription.CodeAnalysisEmbeddedAttribute,\n                createParameterlessEmbeddedAttributeSymbol); 856545"];
2058 [label="CreateAttributeIfNeeded(\n                ref _lazyEmbeddedAttribute,\n                diagnostics,\n                AttributeDescription.CodeAnalysisEmbeddedAttribute,\n                createParameterlessEmbeddedAttributeSymbol); 856546"];
2059 [label="CreateAttributeIfNeeded(\n                ref _lazyEmbeddedAttribute,\n                diagnostics,\n                AttributeDescription.CodeAnalysisEmbeddedAttribute,\n                createParameterlessEmbeddedAttributeSymbol); 856547"];
2060 [label="CreateAttributeIfNeeded(\n                ref _lazyEmbeddedAttribute,\n                diagnostics,\n                AttributeDescription.CodeAnalysisEmbeddedAttribute,\n                createParameterlessEmbeddedAttributeSymbol) 856548"];
2061 [label="param CreateAttributeIfNeeded(ref T symbol) 856549"];
2062 [label="param CreateAttributeIfNeeded(DiagnosticBag diagnostics) 856550"];
2063 [label="param CreateAttributeIfNeeded(AttributeDescription description) 856551"];
2064 [label="param CreateAttributeIfNeeded(Func<string, NamespaceSymbol, DiagnosticBag, T> factory) 856552"];
2065 [label="param CreateAttributeIfNeeded(this) 856553"];
2066 [label="if (symbol is null)\n            {\n                AddDiagnosticsForExistingAttribute(description, diagnostics);\n\n                var containingNamespace = GetOrSynthesizeNamespace(description.Namespace);\n\n                symbol = factory(description.Name, containingNamespace, diagnostics);\n                Debug.Assert(symbol.Constructors.Length == description.Signatures.Length);\n\n                if (symbol.GetAttributeUsageInfo() != AttributeUsageInfo.Default)\n                {\n                    EnsureAttributeUsageAttributeMembersAvailable(diagnostics);\n                }\n\n                AddSynthesizedDefinition(containingNamespace, symbol);\n            } 856554"];
2067 [label="AddDiagnosticsForExistingAttribute(description, diagnostics); 856555"];
2068 [label="AddDiagnosticsForExistingAttribute(description, diagnostics); 856556"];
2069 [label="AddDiagnosticsForExistingAttribute(description, diagnostics) 856557"];
2070 [label="param AddDiagnosticsForExistingAttribute(AttributeDescription description) 856558"];
2071 [label="param AddDiagnosticsForExistingAttribute(DiagnosticBag diagnostics) 856559"];
2072 [label="param AddDiagnosticsForExistingAttribute(this) 856560"];
2073 [label="var attributeMetadataName = MetadataTypeName.FromFullName(description.FullName); 856561"];
2074 [label="var attributeMetadataName = MetadataTypeName.FromFullName(description.FullName); 856562"];
2075 [label="var userDefinedAttribute = _sourceAssembly.SourceModule.LookupTopLevelMetadataType(ref attributeMetadataName); 856563"];
2076 [label="var userDefinedAttribute = _sourceAssembly.SourceModule.LookupTopLevelMetadataType(ref attributeMetadataName); 856564"];
2077 [label="Debug.Assert((object)userDefinedAttribute.ContainingModule == _sourceAssembly.SourceModule); 856565"];
2078 [label="if (!(userDefinedAttribute is MissingMetadataTypeSymbol))\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeReserved, userDefinedAttribute.Locations[0], description.FullName);\n            } 856566"];
2079 [label="AddDiagnosticsForExistingAttribute(description, diagnostics); 856567"];
2080 [label="var containingNamespace = GetOrSynthesizeNamespace(description.Namespace); 856568"];
2081 [label="GetOrSynthesizeNamespace(description.Namespace) 856569"];
2082 [label="param GetOrSynthesizeNamespace(string namespaceFullName) 856570"];
2083 [label="param GetOrSynthesizeNamespace(this) 856571"];
2084 [label="var result = SourceModule.GlobalNamespace; 856572"];
2085 [label="foreach (var partName in namespaceFullName.Split('.'))\n            {\n                var subnamespace = (NamespaceSymbol)result.GetMembers(partName).FirstOrDefault(m => m.Kind == SymbolKind.Namespace);\n                if (subnamespace == null)\n                {\n                    subnamespace = new SynthesizedNamespaceSymbol(result, partName);\n                    AddSynthesizedDefinition(result, subnamespace);\n                }\n\n                result = subnamespace;\n            } 856573"];
2086 [label="foreach (var partName in namespaceFullName.Split('.'))\n            {\n                var subnamespace = (NamespaceSymbol)result.GetMembers(partName).FirstOrDefault(m => m.Kind == SymbolKind.Namespace);\n                if (subnamespace == null)\n                {\n                    subnamespace = new SynthesizedNamespaceSymbol(result, partName);\n                    AddSynthesizedDefinition(result, subnamespace);\n                }\n\n                result = subnamespace;\n            } 856574"];
2087 [label="var subnamespace = (NamespaceSymbol)result.GetMembers(partName).FirstOrDefault(m => m.Kind == SymbolKind.Namespace); 856575"];
2088 [label="var subnamespace = (NamespaceSymbol)result.GetMembers(partName).FirstOrDefault(m => m.Kind == SymbolKind.Namespace); 856576"];
2089 [label="var subnamespace = (NamespaceSymbol)result.GetMembers(partName).FirstOrDefault(m => m.Kind == SymbolKind.Namespace); 856577"];
2090 [label="if (subnamespace == null)\n                {\n                    subnamespace = new SynthesizedNamespaceSymbol(result, partName);\n                    AddSynthesizedDefinition(result, subnamespace);\n                } 856578"];
2091 [label="if (subnamespace == null)\n                {\n                    subnamespace = new SynthesizedNamespaceSymbol(result, partName);\n                    AddSynthesizedDefinition(result, subnamespace);\n                } 856579"];
2092 [label="subnamespace = new SynthesizedNamespaceSymbol(result, partName); 856580"];
2093 [label="subnamespace = new SynthesizedNamespaceSymbol(result, partName); 856581"];
2094 [label="AddSynthesizedDefinition(result, subnamespace); 856582"];
2095 [label="AddSynthesizedDefinition(result, subnamespace); 856583"];
2096 [label="result = subnamespace; 856584"];
2097 [label="var subnamespace = (NamespaceSymbol)result.GetMembers(partName).FirstOrDefault(m => m.Kind == SymbolKind.Namespace); 856585"];
2098 [label="return result; 856586"];
2099 [label="symbol = factory(description.Name, containingNamespace, diagnostics); 856587"];
2100 [label="symbol = factory(description.Name, containingNamespace, diagnostics); 856588"];
2101 [label="symbol = factory(description.Name, containingNamespace, diagnostics); 856589"];
2102 [label="symbol = factory(description.Name, containingNamespace, diagnostics); 856590"];
2103 [label="symbol = factory(description.Name, containingNamespace, diagnostics); 856591"];
2104 [label="param CreateParameterlessEmbeddedAttributeSymbol(string name) 856592"];
2105 [label="param CreateParameterlessEmbeddedAttributeSymbol(NamespaceSymbol containingNamespace) 856593"];
2106 [label="param CreateParameterlessEmbeddedAttributeSymbol(DiagnosticBag diagnostics) 856594"];
2107 [label="=> new SynthesizedEmbeddedAttributeSymbol(\n                    name,\n                    containingNamespace,\n                    SourceModule,\n                    baseType: GetWellKnownType(WellKnownType.System_Attribute, diagnostics)) 856595"];
2108 [label="name 856596"];
2109 [label="containingNamespace 856597"];
2110 [label="SourceModule 856598"];
2111 [label="WellKnownType.System_Attribute 856599"];
2112 [label="diagnostics 856600"];
2113 [label="GetWellKnownType(WellKnownType.System_Attribute, diagnostics) 856601"];
2114 [label="param GetWellKnownType(WellKnownType type) 856602"];
2115 [label="param GetWellKnownType(DiagnosticBag diagnostics) 856603"];
2116 [label="param GetWellKnownType(this) 856604"];
2117 [label="var result = _sourceAssembly.DeclaringCompilation.GetWellKnownType(type); 856605"];
2118 [label="var result = _sourceAssembly.DeclaringCompilation.GetWellKnownType(type); 856606"];
2119 [label="var result = _sourceAssembly.DeclaringCompilation.GetWellKnownType(type); 856607"];
2120 [label="GetBoundReferenceManager() 856608"];
2121 [label="param GetBoundReferenceManager(this) 856609"];
2122 [label="GetBoundReferenceManager(); 856610"];
2123 [label="Binder.ReportUseSiteDiagnostics(result, diagnostics, Location.None); 856611"];
2124 [label="Binder.ReportUseSiteDiagnostics(result, diagnostics, Location.None); 856612"];
2125 [label="Binder.ReportUseSiteDiagnostics(result, diagnostics, Location.None); 856613"];
2126 [label="Binder.ReportUseSiteDiagnostics(result, diagnostics, Location.None); 856614"];
2127 [label="return result; 856615"];
2128 [label="baseType: GetWellKnownType(WellKnownType.System_Attribute, diagnostics) 856616"];
2129 [label="new SynthesizedEmbeddedAttributeSymbol(\n                    name,\n                    containingNamespace,\n                    SourceModule,\n                    baseType: GetWellKnownType(WellKnownType.System_Attribute, diagnostics)) 856617"];
2130 [label="Debug.Assert(symbol.Constructors.Length == description.Signatures.Length); 856618"];
2131 [label="if (symbol.GetAttributeUsageInfo() != AttributeUsageInfo.Default)\n                {\n                    EnsureAttributeUsageAttributeMembersAvailable(diagnostics);\n                } 856619"];
2132 [label="AddSynthesizedDefinition(containingNamespace, symbol); 856620"];
2133 [label="AddSynthesizedDefinition(containingNamespace, symbol); 856621"];
2134 [label="AddSynthesizedDefinition(containingNamespace, symbol); 856622"];
2135 [label="CreateAttributeIfNeeded(\n                ref _lazyEmbeddedAttribute,\n                diagnostics,\n                AttributeDescription.CodeAnalysisEmbeddedAttribute,\n                createParameterlessEmbeddedAttributeSymbol); 856623"];
2136 [label="if ((needsAttributes & EmbeddableAttributes.IsReadOnlyAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsReadOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.IsReadOnlyAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 856624"];
2137 [label="if ((needsAttributes & EmbeddableAttributes.IsReadOnlyAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsReadOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.IsReadOnlyAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 856625"];
2138 [label="CreateAttributeIfNeeded(\n                    ref _lazyIsReadOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.IsReadOnlyAttribute,\n                    createParameterlessEmbeddedAttributeSymbol); 856626"];
2139 [label="CreateAttributeIfNeeded(\n                    ref _lazyIsReadOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.IsReadOnlyAttribute,\n                    createParameterlessEmbeddedAttributeSymbol); 856627"];
2140 [label="CreateAttributeIfNeeded(\n                    ref _lazyIsReadOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.IsReadOnlyAttribute,\n                    createParameterlessEmbeddedAttributeSymbol); 856628"];
2141 [label="CreateAttributeIfNeeded(\n                    ref _lazyIsReadOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.IsReadOnlyAttribute,\n                    createParameterlessEmbeddedAttributeSymbol); 856629"];
2142 [label="CreateAttributeIfNeeded(\n                    ref _lazyIsReadOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.IsReadOnlyAttribute,\n                    createParameterlessEmbeddedAttributeSymbol) 856630"];
2143 [label="param CreateAttributeIfNeeded(ref T symbol) 856631"];
2144 [label="param CreateAttributeIfNeeded(DiagnosticBag diagnostics) 856632"];
2145 [label="param CreateAttributeIfNeeded(AttributeDescription description) 856633"];
2146 [label="param CreateAttributeIfNeeded(Func<string, NamespaceSymbol, DiagnosticBag, T> factory) 856634"];
2147 [label="param CreateAttributeIfNeeded(this) 856635"];
2148 [label="param AddDiagnosticsForExistingAttribute(DiagnosticBag diagnostics) 856636"];
2149 [label="Debug.Assert((object)userDefinedAttribute.ContainingModule == _sourceAssembly.SourceModule); 856637"];
2150 [label="if (!(userDefinedAttribute is MissingMetadataTypeSymbol))\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeReserved, userDefinedAttribute.Locations[0], description.FullName);\n            } 856638"];
2151 [label="Debug.Assert(symbol.Constructors.Length == description.Signatures.Length); 856639"];
2152 [label="CreateAttributeIfNeeded(\n                    ref _lazyIsReadOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.IsReadOnlyAttribute,\n                    createParameterlessEmbeddedAttributeSymbol); 856640"];
2153 [label="if ((needsAttributes & EmbeddableAttributes.IsByRefLikeAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsByRefLikeAttribute,\n                    diagnostics,\n                    AttributeDescription.IsByRefLikeAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 856641"];
2154 [label="if ((needsAttributes & EmbeddableAttributes.IsByRefLikeAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsByRefLikeAttribute,\n                    diagnostics,\n                    AttributeDescription.IsByRefLikeAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 856642"];
2155 [label="if ((needsAttributes & EmbeddableAttributes.IsUnmanagedAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsUnmanagedAttribute,\n                    diagnostics,\n                    AttributeDescription.IsUnmanagedAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 856643"];
2156 [label="if ((needsAttributes & EmbeddableAttributes.IsUnmanagedAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsUnmanagedAttribute,\n                    diagnostics,\n                    AttributeDescription.IsUnmanagedAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 856644"];
2157 [label="if ((needsAttributes & EmbeddableAttributes.NullableAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableAttribute,\n                    CreateNullableAttributeSymbol);\n            } 856645"];
2158 [label="if ((needsAttributes & EmbeddableAttributes.NullableAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableAttribute,\n                    CreateNullableAttributeSymbol);\n            } 856646"];
2159 [label="if ((needsAttributes & EmbeddableAttributes.NullableContextAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableContextAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableContextAttribute,\n                    CreateNullableContextAttributeSymbol);\n            } 856647"];
2160 [label="if ((needsAttributes & EmbeddableAttributes.NullableContextAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableContextAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableContextAttribute,\n                    CreateNullableContextAttributeSymbol);\n            } 856648"];
2161 [label="if ((needsAttributes & EmbeddableAttributes.NullablePublicOnlyAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullablePublicOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.NullablePublicOnlyAttribute,\n                    CreateNullablePublicOnlyAttributeSymbol);\n            } 856649"];
2162 [label="if ((needsAttributes & EmbeddableAttributes.NullablePublicOnlyAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullablePublicOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.NullablePublicOnlyAttribute,\n                    CreateNullablePublicOnlyAttributeSymbol);\n            } 856650"];
2163 [label="if ((needsAttributes & EmbeddableAttributes.NativeIntegerAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNativeIntegerAttribute,\n                    diagnostics,\n                    AttributeDescription.NativeIntegerAttribute,\n                    CreateNativeIntegerAttributeSymbol);\n            } 856651"];
2164 [label="if ((needsAttributes & EmbeddableAttributes.NativeIntegerAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNativeIntegerAttribute,\n                    diagnostics,\n                    AttributeDescription.NativeIntegerAttribute,\n                    CreateNativeIntegerAttributeSymbol);\n            } 856652"];
2165 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 856653"];
2166 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 856654"];
2167 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 856655"];
2168 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 856656"];
2169 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 856657"];
2170 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 856658"];
2171 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 856659"];
2172 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 856660"];
2173 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 856661"];
2174 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 856662"];
2175 [label="builder.AddIfNotNull(_lazyNullableAttribute); 856663"];
2176 [label="builder.AddIfNotNull(_lazyNullableAttribute); 856664"];
2177 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 856665"];
2178 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 856666"];
2179 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 856667"];
2180 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 856668"];
2181 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 856669"];
2182 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 856670"];
2183 [label="return builder.ToImmutableAndFree(); 856671"];
2184 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 856672"];
2185 [label="param ShouldEmitNullableAttributes(Symbol symbol) 856673"];
2186 [label="param ShouldEmitNullableAttributes(this) 856674"];
2187 [label="RoslynDebug.Assert(symbol is object); 856675"];
2188 [label="Debug.Assert(symbol.IsDefinition); 856676"];
2189 [label="SourceModule 856677"];
2190 [label="get\n            {\n                return Assembly.Modules[0];\n            } 856678"];
2191 [label="Assembly 856679"];
2192 [label="get\n            {\n                return SourceAssembly;\n            } 856680"];
2193 [label="SourceAssembly 856681"];
2194 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 856682"];
2195 [label="GetBoundReferenceManager() 856683"];
2196 [label="param GetBoundReferenceManager(this) 856684"];
2197 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 856685"];
2198 [label="return _referenceManager; 856686"];
2199 [label="GetBoundReferenceManager(); 856687"];
2200 [label="return Assembly.Modules[0]; 856688"];
2201 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 856689"];
2202 [label="EmitNullablePublicOnly 856690"];
2203 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 856691"];
2204 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 856692"];
2205 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 856693"];
2206 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 856694"];
2207 [label="param SynthesizeNullableAttributeIfNecessary(this) 856695"];
2208 [label="Compilation.SourceModule 856696"];
2209 [label="get\n            {\n                return Assembly.Modules[0];\n            } 856697"];
2210 [label="Assembly 856698"];
2211 [label="SourceAssembly 856699"];
2212 [label="GetBoundReferenceManager() 856700"];
2213 [label="param GetBoundReferenceManager(this) 856701"];
2214 [label="GetBoundReferenceManager(); 856702"];
2215 [label="return Assembly.Modules[0]; 856703"];
2216 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 856704"];
2217 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 856705"];
2218 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 856706"];
2219 [label="type.AddNullableTransforms(flagsBuilder); 856707"];
2220 [label="type.AddNullableTransforms(flagsBuilder); 856708"];
2221 [label="SynthesizedAttributeData attribute; 856709"];
2222 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 856710"];
2223 [label="attribute = null; 856711"];
2224 [label="flagsBuilder.Free(); 856712"];
2225 [label="return attribute; 856713"];
2226 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 856714"];
2227 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 856715"];
2228 [label="param GetSynthesizedNestedTypes(this) 856716"];
2229 [label="return null; 856717"];
2230 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 856718"];
2231 [label="Debug.Assert(symbol.IsDefinition); 856719"];
2232 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 856720"];
2233 [label="return _referenceManager; 856721"];
2234 [label="GetBoundReferenceManager(); 856722"];
2235 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 856723"];
2236 [label="param GetBoundReferenceManager(this) 856724"];
2237 [label="GetBoundReferenceManager(); 856725"];
2238 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 856726"];
2239 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 856727"];
2240 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 856728"];
2241 [label="param GetTopLevelSourceTypeDefinitions(this) 856729"];
2242 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 856730"];
2243 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 856731"];
2244 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 856732"];
2245 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 856733"];
2246 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 856734"];
2247 [label="var ns = namespacesToProcess.Pop(); 856735"];
2248 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 856736"];
2249 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 856737"];
2250 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 856738"];
2251 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 856739"];
2252 [label="param MemberVisibility(Symbol symbol) 856740"];
2253 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 856741"];
2254 [label="if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    } 856742"];
2255 [label="return Cci.TypeMemberVisibility.Assembly; 856743"];
2256 [label="=> _sourceAssembly 856744"];
2257 [label="_sourceAssembly 856745"];
2258 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 856746"];
2259 [label="param GetSourceAssemblyAttributes(this) 856747"];
2260 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 856748"];
2261 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 856749"];
2262 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 856750"];
2263 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 856751"];
2264 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 856752"];
2265 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 856753"];
2266 [label="NamedTypeSymbol result; 856754"];
2267 [label="GetBoundReferenceManager() 856755"];
2268 [label="GetBoundReferenceManager(); 856756"];
2269 [label="Debug.Assert(result.SpecialType == specialType); 856757"];
2270 [label="SourceAssembly 856758"];
2271 [label="GetBoundReferenceManager() 856759"];
2272 [label="param GetBoundReferenceManager(this) 856760"];
2273 [label="GetBoundReferenceManager(); 856761"];
2274 [label="GetBoundReferenceManager() 856762"];
2275 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 856763"];
2276 [label="param Translate(MethodSymbol methodSymbol) 856764"];
2277 [label="param Translate(SyntaxNode syntaxNodeOpt) 856765"];
2278 [label="param Translate(DiagnosticBag diagnostics) 856766"];
2279 [label="param Translate(BoundArgListOperator optArgList = null) 856767"];
2280 [label="param Translate(bool needDeclaration = false) 856768"];
2281 [label="param Translate(this) 856769"];
2282 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 856770"];
2283 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 856771"];
2284 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 856772"];
2285 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 856773"];
2286 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 856774"];
2287 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 856775"];
2288 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 856776"];
2289 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 856777"];
2290 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 856778"];
2291 [label="param Translate(MethodSymbol methodSymbol) 856779"];
2292 [label="param Translate(SyntaxNode syntaxNodeOpt) 856780"];
2293 [label="param Translate(DiagnosticBag diagnostics) 856781"];
2294 [label="param Translate(bool needDeclaration) 856782"];
2295 [label="param Translate(this) 856783"];
2296 [label="object reference; 856784"];
2297 [label="Cci.IMethodReference methodRef; 856785"];
2298 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 856786"];
2299 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 856787"];
2300 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 856788"];
2301 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 856789"];
2302 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 856790"];
2303 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 856791"];
2304 [label="bool typeIsGeneric = IsGenericType(container); 856792"];
2305 [label="IsGenericType(container) 856793"];
2306 [label="param IsGenericType(NamedTypeSymbol toCheck) 856794"];
2307 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856795"];
2308 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856796"];
2309 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 856797"];
2310 [label="toCheck = toCheck.ContainingType; 856798"];
2311 [label="return false; 856799"];
2312 [label="bool typeIsGeneric = IsGenericType(container); 856800"];
2313 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 856801"];
2314 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 856802"];
2315 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 856803"];
2316 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 856804"];
2317 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 856805"];
2318 [label="return methodSymbol.GetCciAdapter(); 856806"];
2319 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 856807"];
2320 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 856808"];
2321 [label="return unexpandedMethodRef; 856809"];
2322 [label="param Translate(TypeSymbol typeSymbol) 856810"];
2323 [label="param Translate(SyntaxNode syntaxNodeOpt) 856811"];
2324 [label="param Translate(DiagnosticBag diagnostics) 856812"];
2325 [label="param Translate(this) 856813"];
2326 [label="Debug.Assert(diagnostics != null); 856814"];
2327 [label="Debug.Assert(diagnostics != null); 856815"];
2328 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 856816"];
2329 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 856817"];
2330 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 856818"];
2331 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 856819"];
2332 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 856820"];
2333 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 856821"];
2334 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 856822"];
2335 [label="param Translate(SyntaxNode syntaxNodeOpt) 856823"];
2336 [label="param Translate(DiagnosticBag diagnostics) 856824"];
2337 [label="param Translate(bool fromImplements = false) 856825"];
2338 [label="param Translate(bool needDeclaration = false) 856826"];
2339 [label="param Translate(this) 856827"];
2340 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 856828"];
2341 [label="Debug.Assert(diagnostics != null); 856829"];
2342 [label="Debug.Assert(diagnostics != null); 856830"];
2343 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856831"];
2344 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856832"];
2345 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 856833"];
2346 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 856834"];
2347 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 856835"];
2348 [label="object reference; 856836"];
2349 [label="Cci.INamedTypeReference typeRef; 856837"];
2350 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 856838"];
2351 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856839"];
2352 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856840"];
2353 [label="IsGenericType(container) 856841"];
2354 [label="param IsGenericType(NamedTypeSymbol toCheck) 856842"];
2355 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856843"];
2356 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856844"];
2357 [label="return false; 856845"];
2358 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856846"];
2359 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856847"];
2360 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 856848"];
2361 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 856849"];
2362 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 856850"];
2363 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 856851"];
2364 [label="param Translate(SyntaxNode syntaxNodeOpt) 856852"];
2365 [label="param Translate(DiagnosticBag diagnostics) 856853"];
2366 [label="param Translate(bool fromImplements = false) 856854"];
2367 [label="param Translate(bool needDeclaration = false) 856855"];
2368 [label="param Translate(this) 856856"];
2369 [label="Debug.Assert(diagnostics != null); 856857"];
2370 [label="Debug.Assert(diagnostics != null); 856858"];
2371 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856859"];
2372 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856860"];
2373 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 856861"];
2374 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 856862"];
2375 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 856863"];
2376 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 856864"];
2377 [label="param Translate(ModuleSymbol module) 856865"];
2378 [label="param Translate(DiagnosticBag diagnostics) 856866"];
2379 [label="param Translate(this) 856867"];
2380 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 856868"];
2381 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 856869"];
2382 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 856870"];
2383 [label="if ((object)module == null)\n            {\n                return null;\n            } 856871"];
2384 [label="if ((object)module == null)\n            {\n                return null;\n            } 856872"];
2385 [label="Cci.IModuleReference moduleRef; 856873"];
2386 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 856874"];
2387 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 856875"];
2388 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 856876"];
2389 [label="return moduleRef; 856877"];
2390 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856878"];
2391 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856879"];
2392 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 856880"];
2393 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 856881"];
2394 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 856882"];
2395 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 856883"];
2396 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 856884"];
2397 [label="param Translate(this) 856885"];
2398 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 856886"];
2399 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 856887"];
2400 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 856888"];
2401 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 856889"];
2402 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 856890"];
2403 [label="MustBeWrapped(@params.First()) 856891"];
2404 [label="param MustBeWrapped(ParameterSymbol param) 856892"];
2405 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 856893"];
2406 [label="var container = param.ContainingSymbol; 856894"];
2407 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 856895"];
2408 [label="ContainerIsGeneric(container) 856896"];
2409 [label="param ContainerIsGeneric(Symbol container) 856897"];
2410 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 856898"];
2411 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 856899"];
2412 [label="IsGenericType(container.ContainingType) 856900"];
2413 [label="param IsGenericType(NamedTypeSymbol toCheck) 856901"];
2414 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856902"];
2415 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856903"];
2416 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 856904"];
2417 [label="toCheck = toCheck.ContainingType; 856905"];
2418 [label="return false; 856906"];
2419 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 856907"];
2420 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 856908"];
2421 [label="return false; 856909"];
2422 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 856910"];
2423 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 856911"];
2424 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 856912"];
2425 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 856913"];
2426 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 856914"];
2427 [label="param MustBeWrapped(ParameterSymbol param) 856915"];
2428 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 856916"];
2429 [label="var container = param.ContainingSymbol; 856917"];
2430 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 856918"];
2431 [label="ContainerIsGeneric(container) 856919"];
2432 [label="param ContainerIsGeneric(Symbol container) 856920"];
2433 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 856921"];
2434 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 856922"];
2435 [label="IsGenericType(container.ContainingType) 856923"];
2436 [label="param IsGenericType(NamedTypeSymbol toCheck) 856924"];
2437 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856925"];
2438 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856926"];
2439 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 856927"];
2440 [label="toCheck = toCheck.ContainingType; 856928"];
2441 [label="return false; 856929"];
2442 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 856930"];
2443 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 856931"];
2444 [label="return false; 856932"];
2445 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 856933"];
2446 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 856934"];
2447 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 856935"];
2448 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 856936"];
2449 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 856937"];
2450 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 856938"];
2451 [label="param Translate(SyntaxNode syntaxNodeOpt) 856939"];
2452 [label="param Translate(DiagnosticBag diagnostics) 856940"];
2453 [label="param Translate(bool fromImplements = false) 856941"];
2454 [label="param Translate(bool needDeclaration = false) 856942"];
2455 [label="Debug.Assert(diagnostics != null); 856943"];
2456 [label="Debug.Assert(diagnostics != null); 856944"];
2457 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856945"];
2458 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856946"];
2459 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 856947"];
2460 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 856948"];
2461 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 856949"];
2462 [label="object reference; 856950"];
2463 [label="Cci.INamedTypeReference typeRef; 856951"];
2464 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 856952"];
2465 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856953"];
2466 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856954"];
2467 [label="IsGenericType(container) 856955"];
2468 [label="param IsGenericType(NamedTypeSymbol toCheck) 856956"];
2469 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856957"];
2470 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856958"];
2471 [label="return false; 856959"];
2472 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856960"];
2473 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856961"];
2474 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 856962"];
2475 [label="param IsPlatformType(Cci.ITypeReference typeRef) 856963"];
2476 [label="param IsPlatformType(Cci.PlatformType platformType) 856964"];
2477 [label="param IsPlatformType(this) 856965"];
2478 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 856966"];
2479 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 856967"];
2480 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 856968"];
2481 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 856969"];
2482 [label="return namedType.SpecialType == (SpecialType)platformType; 856970"];
2483 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 856971"];
2484 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 856972"];
2485 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 856973"];
2486 [label="param Translate(SyntaxNode syntaxNodeOpt) 856974"];
2487 [label="param Translate(DiagnosticBag diagnostics) 856975"];
2488 [label="param Translate(bool fromImplements = false) 856976"];
2489 [label="param Translate(bool needDeclaration = false) 856977"];
2490 [label="Debug.Assert(diagnostics != null); 856978"];
2491 [label="Debug.Assert(diagnostics != null); 856979"];
2492 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856980"];
2493 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856981"];
2494 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 856982"];
2495 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 856983"];
2496 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 856984"];
2497 [label="object reference; 856985"];
2498 [label="Cci.INamedTypeReference typeRef; 856986"];
2499 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 856987"];
2500 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856988"];
2501 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856989"];
2502 [label="IsGenericType(container) 856990"];
2503 [label="param IsGenericType(NamedTypeSymbol toCheck) 856991"];
2504 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856992"];
2505 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 856993"];
2506 [label="return false; 856994"];
2507 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856995"];
2508 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 856996"];
2509 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 856997"];
2510 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856998"];
2511 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 856999"];
2512 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857000"];
2513 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857001"];
2514 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857002"];
2515 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857003"];
2516 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 857004"];
2517 [label="param MustBeWrapped(ParameterSymbol param) 857005"];
2518 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 857006"];
2519 [label="var container = param.ContainingSymbol; 857007"];
2520 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 857008"];
2521 [label="ContainerIsGeneric(container) 857009"];
2522 [label="param ContainerIsGeneric(Symbol container) 857010"];
2523 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857011"];
2524 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857012"];
2525 [label="IsGenericType(container.ContainingType) 857013"];
2526 [label="param IsGenericType(NamedTypeSymbol toCheck) 857014"];
2527 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857015"];
2528 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857016"];
2529 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857017"];
2530 [label="toCheck = toCheck.ContainingType; 857018"];
2531 [label="return false; 857019"];
2532 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857020"];
2533 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857021"];
2534 [label="param MustBeWrapped(ParameterSymbol param) 857022"];
2535 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 857023"];
2536 [label="var container = param.ContainingSymbol; 857024"];
2537 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 857025"];
2538 [label="ContainerIsGeneric(container) 857026"];
2539 [label="param ContainerIsGeneric(Symbol container) 857027"];
2540 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857028"];
2541 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857029"];
2542 [label="IsGenericType(container.ContainingType) 857030"];
2543 [label="param IsGenericType(NamedTypeSymbol toCheck) 857031"];
2544 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857032"];
2545 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857033"];
2546 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857034"];
2547 [label="toCheck = toCheck.ContainingType; 857035"];
2548 [label="return false; 857036"];
2549 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857037"];
2550 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857038"];
2551 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 857039"];
2552 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 857040"];
2553 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857041"];
2554 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857042"];
2555 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 857043"];
2556 [label="bool typeIsGeneric = IsGenericType(container); 857044"];
2557 [label="IsGenericType(container) 857045"];
2558 [label="param IsGenericType(NamedTypeSymbol toCheck) 857046"];
2559 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857047"];
2560 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857048"];
2561 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857049"];
2562 [label="toCheck = toCheck.ContainingType; 857050"];
2563 [label="return false; 857051"];
2564 [label="bool typeIsGeneric = IsGenericType(container); 857052"];
2565 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857053"];
2566 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857054"];
2567 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857055"];
2568 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 857056"];
2569 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857057"];
2570 [label="toCheck = toCheck.ContainingType; 857058"];
2571 [label="param GetSourceAssemblySecurityAttributes(this) 857059"];
2572 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 857060"];
2573 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 857061"];
2574 [label="return Translate(corLibrary, context.Diagnostics); 857062"];
2575 [label="param Translate(DiagnosticBag diagnostics) 857063"];
2576 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 857064"];
2577 [label="return (Cci.IAssemblyReference)reference; 857065"];
2578 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 857066"];
2579 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 857067"];
2580 [label="param GetSourceModuleAttributes(this) 857068"];
2581 [label="return SourceModule.GetCustomAttributesToEmit(this); 857069"];
2582 [label="return SourceModule.GetCustomAttributesToEmit(this); 857070"];
2583 [label="return SourceModule.GetCustomAttributesToEmit(this); 857071"];
2584 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 857072"];
2585 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 857073"];
2586 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 857074"];
2587 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 857075"];
2588 [label="if ((needsAttributes & EmbeddableAttributes.IsByRefLikeAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsByRefLikeAttribute,\n                    diagnostics,\n                    AttributeDescription.IsByRefLikeAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 857076"];
2589 [label="if ((needsAttributes & EmbeddableAttributes.IsUnmanagedAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsUnmanagedAttribute,\n                    diagnostics,\n                    AttributeDescription.IsUnmanagedAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 857077"];
2590 [label="if ((needsAttributes & EmbeddableAttributes.NullableAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableAttribute,\n                    CreateNullableAttributeSymbol);\n            } 857078"];
2591 [label="if ((needsAttributes & EmbeddableAttributes.NullableContextAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableContextAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableContextAttribute,\n                    CreateNullableContextAttributeSymbol);\n            } 857079"];
2592 [label="if ((needsAttributes & EmbeddableAttributes.NullablePublicOnlyAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullablePublicOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.NullablePublicOnlyAttribute,\n                    CreateNullablePublicOnlyAttributeSymbol);\n            } 857080"];
2593 [label="if ((needsAttributes & EmbeddableAttributes.NativeIntegerAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNativeIntegerAttribute,\n                    diagnostics,\n                    AttributeDescription.NativeIntegerAttribute,\n                    CreateNativeIntegerAttributeSymbol);\n            } 857081"];
2594 [label="param SynthesizeEmbeddedAttribute(this) 857082"];
2595 [label="return new SynthesizedAttributeData(\n                _lazyEmbeddedAttribute.Constructors[0],\n                ImmutableArray<TypedConstant>.Empty,\n                ImmutableArray<KeyValuePair<string, TypedConstant>>.Empty); 857083"];
2596 [label="return new SynthesizedAttributeData(\n                _lazyEmbeddedAttribute.Constructors[0],\n                ImmutableArray<TypedConstant>.Empty,\n                ImmutableArray<KeyValuePair<string, TypedConstant>>.Empty); 857084"];
2597 [label="return new SynthesizedAttributeData(\n                _lazyEmbeddedAttribute.Constructors[0],\n                ImmutableArray<TypedConstant>.Empty,\n                ImmutableArray<KeyValuePair<string, TypedConstant>>.Empty); 857085"];
2598 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 857086"];
2599 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 857087"];
2600 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857088"];
2601 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857089"];
2602 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 857090"];
2603 [label="bool typeIsGeneric = IsGenericType(container); 857091"];
2604 [label="IsGenericType(container) 857092"];
2605 [label="param IsGenericType(NamedTypeSymbol toCheck) 857093"];
2606 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857094"];
2607 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857095"];
2608 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857096"];
2609 [label="toCheck = toCheck.ContainingType; 857097"];
2610 [label="return false; 857098"];
2611 [label="bool typeIsGeneric = IsGenericType(container); 857099"];
2612 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857100"];
2613 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857101"];
2614 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857102"];
2615 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 857103"];
2616 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857104"];
2617 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857105"];
2618 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857106"];
2619 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857107"];
2620 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857108"];
2621 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857109"];
2622 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 857110"];
2623 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857111"];
2624 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857112"];
2625 [label="param Translate(SyntaxNode syntaxNodeOpt) 857113"];
2626 [label="param Translate(DiagnosticBag diagnostics) 857114"];
2627 [label="param Translate(bool fromImplements = false) 857115"];
2628 [label="param Translate(bool needDeclaration = false) 857116"];
2629 [label="Debug.Assert(diagnostics != null); 857117"];
2630 [label="Debug.Assert(diagnostics != null); 857118"];
2631 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857119"];
2632 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857120"];
2633 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857121"];
2634 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857122"];
2635 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857123"];
2636 [label="object reference; 857124"];
2637 [label="Cci.INamedTypeReference typeRef; 857125"];
2638 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 857126"];
2639 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857127"];
2640 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857128"];
2641 [label="IsGenericType(container) 857129"];
2642 [label="param IsGenericType(NamedTypeSymbol toCheck) 857130"];
2643 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857131"];
2644 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857132"];
2645 [label="return false; 857133"];
2646 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857134"];
2647 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857135"];
2648 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857136"];
2649 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 857137"];
2650 [label="return this; 857138"];
2651 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857139"];
2652 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857140"];
2653 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857141"];
2654 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857142"];
2655 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857143"];
2656 [label="object reference; 857144"];
2657 [label="Cci.INamedTypeReference typeRef; 857145"];
2658 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 857146"];
2659 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857147"];
2660 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857148"];
2661 [label="IsGenericType(container) 857149"];
2662 [label="param IsGenericType(NamedTypeSymbol toCheck) 857150"];
2663 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857151"];
2664 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857152"];
2665 [label="return false; 857153"];
2666 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857154"];
2667 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857155"];
2668 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857156"];
2669 [label="Debug.Assert(symbol.IsDefinition); 857157"];
2670 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 857158"];
2671 [label="return _referenceManager; 857159"];
2672 [label="GetBoundReferenceManager(); 857160"];
2673 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 857161"];
2674 [label="param GetBoundReferenceManager(this) 857162"];
2675 [label="GetBoundReferenceManager(); 857163"];
2676 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 857164"];
2677 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 857165"];
2678 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857166"];
2679 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857167"];
2680 [label="param Translate(SyntaxNode syntaxNodeOpt) 857168"];
2681 [label="param Translate(DiagnosticBag diagnostics) 857169"];
2682 [label="param Translate(bool fromImplements = false) 857170"];
2683 [label="param Translate(bool needDeclaration = false) 857171"];
2684 [label="Debug.Assert(diagnostics != null); 857172"];
2685 [label="Debug.Assert(diagnostics != null); 857173"];
2686 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857174"];
2687 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857175"];
2688 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857176"];
2689 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857177"];
2690 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857178"];
2691 [label="object reference; 857179"];
2692 [label="Cci.INamedTypeReference typeRef; 857180"];
2693 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 857181"];
2694 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857182"];
2695 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857183"];
2696 [label="IsGenericType(container) 857184"];
2697 [label="param IsGenericType(NamedTypeSymbol toCheck) 857185"];
2698 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857186"];
2699 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857187"];
2700 [label="return false; 857188"];
2701 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857189"];
2702 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857190"];
2703 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857191"];
2704 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 857192"];
2705 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 857193"];
2706 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857194"];
2707 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857195"];
2708 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 857196"];
2709 [label="bool typeIsGeneric = IsGenericType(container); 857197"];
2710 [label="IsGenericType(container) 857198"];
2711 [label="param IsGenericType(NamedTypeSymbol toCheck) 857199"];
2712 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857200"];
2713 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857201"];
2714 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857202"];
2715 [label="toCheck = toCheck.ContainingType; 857203"];
2716 [label="return false; 857204"];
2717 [label="bool typeIsGeneric = IsGenericType(container); 857205"];
2718 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857206"];
2719 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857207"];
2720 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857208"];
2721 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 857209"];
2722 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 857210"];
2723 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 857211"];
2724 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 857212"];
2725 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 857213"];
2726 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 857214"];
2727 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 857215"];
2728 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 857216"];
2729 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 857217"];
2730 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 857218"];
2731 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 857219"];
2732 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 857220"];
2733 [label="param SynthesizeNullableAttributeIfNecessary(this) 857221"];
2734 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 857222"];
2735 [label="return null; 857223"];
2736 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857224"];
2737 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857225"];
2738 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857226"];
2739 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857227"];
2740 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857228"];
2741 [label="object reference; 857229"];
2742 [label="Cci.INamedTypeReference typeRef; 857230"];
2743 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 857231"];
2744 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857232"];
2745 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857233"];
2746 [label="IsGenericType(container) 857234"];
2747 [label="param IsGenericType(NamedTypeSymbol toCheck) 857235"];
2748 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857236"];
2749 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857237"];
2750 [label="return false; 857238"];
2751 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857239"];
2752 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857240"];
2753 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857241"];
2754 [label="Debug.Assert(symbol.IsDefinition); 857242"];
2755 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 857243"];
2756 [label="return _referenceManager; 857244"];
2757 [label="GetBoundReferenceManager(); 857245"];
2758 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 857246"];
2759 [label="param GetBoundReferenceManager(this) 857247"];
2760 [label="GetBoundReferenceManager(); 857248"];
2761 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 857249"];
2762 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 857250"];
2763 [label="get\n            {\n                return SourceAssembly;\n            } 857251"];
2764 [label="SourceAssembly 857252"];
2765 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 857253"];
2766 [label="GetBoundReferenceManager() 857254"];
2767 [label="param GetBoundReferenceManager(this) 857255"];
2768 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 857256"];
2769 [label="return _referenceManager; 857257"];
2770 [label="GetBoundReferenceManager(); 857258"];
2771 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 857259"];
2772 [label="param GetUnaliasedReferencedAssemblies(this) 857260"];
2773 [label="GetBoundReferenceManager() 857261"];
2774 [label="param GetBoundReferenceManager(this) 857262"];
2775 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 857263"];
2776 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 857264"];
2777 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 857265"];
2778 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 857266"];
2779 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857267"];
2780 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857268"];
2781 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 857269"];
2782 [label="bool typeIsGeneric = IsGenericType(container); 857270"];
2783 [label="IsGenericType(container) 857271"];
2784 [label="param IsGenericType(NamedTypeSymbol toCheck) 857272"];
2785 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857273"];
2786 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857274"];
2787 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857275"];
2788 [label="toCheck = toCheck.ContainingType; 857276"];
2789 [label="return false; 857277"];
2790 [label="bool typeIsGeneric = IsGenericType(container); 857278"];
2791 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857279"];
2792 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857280"];
2793 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857281"];
2794 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 857282"];
2795 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857283"];
2796 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857284"];
2797 [label="param Translate(SyntaxNode syntaxNodeOpt) 857285"];
2798 [label="param Translate(DiagnosticBag diagnostics) 857286"];
2799 [label="param Translate(bool fromImplements = false) 857287"];
2800 [label="param Translate(bool needDeclaration = false) 857288"];
2801 [label="Debug.Assert(diagnostics != null); 857289"];
2802 [label="Debug.Assert(diagnostics != null); 857290"];
2803 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857291"];
2804 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857292"];
2805 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857293"];
2806 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857294"];
2807 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857295"];
2808 [label="object reference; 857296"];
2809 [label="Cci.INamedTypeReference typeRef; 857297"];
2810 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 857298"];
2811 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857299"];
2812 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857300"];
2813 [label="IsGenericType(container) 857301"];
2814 [label="param IsGenericType(NamedTypeSymbol toCheck) 857302"];
2815 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857303"];
2816 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857304"];
2817 [label="return false; 857305"];
2818 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857306"];
2819 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857307"];
2820 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857308"];
2821 [label="param MustBeWrapped(ParameterSymbol param) 857309"];
2822 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 857310"];
2823 [label="var container = param.ContainingSymbol; 857311"];
2824 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 857312"];
2825 [label="ContainerIsGeneric(container) 857313"];
2826 [label="param ContainerIsGeneric(Symbol container) 857314"];
2827 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857315"];
2828 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857316"];
2829 [label="IsGenericType(container.ContainingType) 857317"];
2830 [label="param IsGenericType(NamedTypeSymbol toCheck) 857318"];
2831 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857319"];
2832 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857320"];
2833 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857321"];
2834 [label="toCheck = toCheck.ContainingType; 857322"];
2835 [label="return false; 857323"];
2836 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857324"];
2837 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857325"];
2838 [label="param MustBeWrapped(ParameterSymbol param) 857326"];
2839 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 857327"];
2840 [label="var container = param.ContainingSymbol; 857328"];
2841 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 857329"];
2842 [label="ContainerIsGeneric(container) 857330"];
2843 [label="param ContainerIsGeneric(Symbol container) 857331"];
2844 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857332"];
2845 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857333"];
2846 [label="IsGenericType(container.ContainingType) 857334"];
2847 [label="param IsGenericType(NamedTypeSymbol toCheck) 857335"];
2848 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857336"];
2849 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857337"];
2850 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857338"];
2851 [label="toCheck = toCheck.ContainingType; 857339"];
2852 [label="return false; 857340"];
2853 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857341"];
2854 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857342"];
2855 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 857343"];
2856 [label="param GetExportedTypes(DiagnosticBag diagnostics) 857344"];
2857 [label="param GetExportedTypes(this) 857345"];
2858 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 857346"];
2859 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 857347"];
2860 [label="CalculateExportedTypes() 857348"];
2861 [label="param CalculateExportedTypes(this) 857349"];
2862 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 857350"];
2863 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 857351"];
2864 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 857352"];
2865 [label="var modules = sourceAssembly.Modules; 857353"];
2866 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 857354"];
2867 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 857355"];
2868 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 857356"];
2869 [label="sourceAssembly.DeclaringCompilation.Options 857357"];
2870 [label="get\n            {\n                return _options;\n            } 857358"];
2871 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 857359"];
2872 [label="GetForwardedTypes(sourceAssembly, builder); 857360"];
2873 [label="GetForwardedTypes(sourceAssembly, builder); 857361"];
2874 [label="GetForwardedTypes(sourceAssembly, builder) 857362"];
2875 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 857363"];
2876 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 857364"];
2877 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 857365"];
2878 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 857366"];
2879 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 857367"];
2880 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 857368"];
2881 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 857369"];
2882 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 857370"];
2883 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 857371"];
2884 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 857372"];
2885 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 857373"];
2886 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 857374"];
2887 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 857375"];
2888 [label="sourceAssembly.DeclaringCompilation.Options 857376"];
2889 [label="get\n            {\n                return _options;\n            } 857377"];
2890 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 857378"];
2891 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 857379"];
2892 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 857380"];
2893 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 857381"];
2894 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 857382"];
2895 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 857383"];
2896 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 857384"];
2897 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 857385"];
2898 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 857386"];
2899 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 857387"];
2900 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 857388"];
2901 [label="return seenTopLevelForwardedTypes; 857389"];
2902 [label="GetForwardedTypes(sourceAssembly, builder); 857390"];
2903 [label="return builder.ToImmutableAndFree(); 857391"];
2904 [label="_lazyExportedTypes = CalculateExportedTypes(); 857392"];
2905 [label="_lazyExportedTypes 857393"];
2906 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 857394"];
2907 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 857395"];
2908 [label="return _lazyExportedTypes; 857396"];
2909 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 857397"];
2910 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 857398"];
2911 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 857399"];
2912 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 857400"];
2913 [label="=> _metadataName 857401"];
2914 [label="_metadataName 857402"];
2915 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 857403"];
2916 [label="if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    } 857404"];
2917 [label="return Cci.TypeMemberVisibility.Private; 857405"];
2918 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857406"];
2919 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857407"];
2920 [label="param Translate(SyntaxNode syntaxNodeOpt) 857408"];
2921 [label="param Translate(DiagnosticBag diagnostics) 857409"];
2922 [label="param Translate(bool fromImplements = false) 857410"];
2923 [label="param Translate(bool needDeclaration = false) 857411"];
2924 [label="Debug.Assert(diagnostics != null); 857412"];
2925 [label="Debug.Assert(diagnostics != null); 857413"];
2926 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857414"];
2927 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857415"];
2928 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857416"];
2929 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857417"];
2930 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857418"];
2931 [label="object reference; 857419"];
2932 [label="Cci.INamedTypeReference typeRef; 857420"];
2933 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 857421"];
2934 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857422"];
2935 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857423"];
2936 [label="IsGenericType(container) 857424"];
2937 [label="param IsGenericType(NamedTypeSymbol toCheck) 857425"];
2938 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857426"];
2939 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857427"];
2940 [label="return false; 857428"];
2941 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857429"];
2942 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857430"];
2943 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857431"];
2944 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 857432"];
2945 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857433"];
2946 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857434"];
2947 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857435"];
2948 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857436"];
2949 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857437"];
2950 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857438"];
2951 [label="return Cci.TypeMemberVisibility.Public; 857439"];
2952 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857440"];
2953 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857441"];
2954 [label="param Translate(SyntaxNode syntaxNodeOpt) 857442"];
2955 [label="param Translate(DiagnosticBag diagnostics) 857443"];
2956 [label="param Translate(bool fromImplements = false) 857444"];
2957 [label="param Translate(bool needDeclaration = false) 857445"];
2958 [label="Debug.Assert(diagnostics != null); 857446"];
2959 [label="Debug.Assert(diagnostics != null); 857447"];
2960 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857448"];
2961 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857449"];
2962 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857450"];
2963 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857451"];
2964 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857452"];
2965 [label="object reference; 857453"];
2966 [label="Cci.INamedTypeReference typeRef; 857454"];
2967 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 857455"];
2968 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857456"];
2969 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857457"];
2970 [label="IsGenericType(container) 857458"];
2971 [label="param IsGenericType(NamedTypeSymbol toCheck) 857459"];
2972 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857460"];
2973 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857461"];
2974 [label="return false; 857462"];
2975 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857463"];
2976 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857464"];
2977 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857465"];
2978 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 857466"];
2979 [label="get { return _metadataName; } 857467"];
2980 [label="return _metadataName; 857468"];
2981 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857469"];
2982 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857470"];
2983 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857471"];
2984 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857472"];
2985 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857473"];
2986 [label="object reference; 857474"];
2987 [label="Cci.INamedTypeReference typeRef; 857475"];
2988 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 857476"];
2989 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857477"];
2990 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857478"];
2991 [label="IsGenericType(container) 857479"];
2992 [label="param IsGenericType(NamedTypeSymbol toCheck) 857480"];
2993 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857481"];
2994 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857482"];
2995 [label="return false; 857483"];
2996 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857484"];
2997 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857485"];
2998 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857486"];
2999 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 857487"];
3000 [label="GetBoundReferenceManager() 857488"];
3001 [label="GetBoundReferenceManager(); 857489"];
3002 [label="Debug.Assert(result.SpecialType == specialType); 857490"];
3003 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 857491"];
3004 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 857492"];
3005 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857493"];
3006 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857494"];
3007 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 857495"];
3008 [label="bool typeIsGeneric = IsGenericType(container); 857496"];
3009 [label="IsGenericType(container) 857497"];
3010 [label="param IsGenericType(NamedTypeSymbol toCheck) 857498"];
3011 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857499"];
3012 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857500"];
3013 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857501"];
3014 [label="toCheck = toCheck.ContainingType; 857502"];
3015 [label="return false; 857503"];
3016 [label="bool typeIsGeneric = IsGenericType(container); 857504"];
3017 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857505"];
3018 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857506"];
3019 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857507"];
3020 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 857508"];
3021 [label="param MustBeWrapped(ParameterSymbol param) 857509"];
3022 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 857510"];
3023 [label="var container = param.ContainingSymbol; 857511"];
3024 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 857512"];
3025 [label="ContainerIsGeneric(container) 857513"];
3026 [label="param ContainerIsGeneric(Symbol container) 857514"];
3027 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857515"];
3028 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857516"];
3029 [label="IsGenericType(container.ContainingType) 857517"];
3030 [label="param IsGenericType(NamedTypeSymbol toCheck) 857518"];
3031 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857519"];
3032 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857520"];
3033 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857521"];
3034 [label="toCheck = toCheck.ContainingType; 857522"];
3035 [label="return false; 857523"];
3036 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857524"];
3037 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857525"];
3038 [label="param MustBeWrapped(ParameterSymbol param) 857526"];
3039 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 857527"];
3040 [label="var container = param.ContainingSymbol; 857528"];
3041 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 857529"];
3042 [label="ContainerIsGeneric(container) 857530"];
3043 [label="param ContainerIsGeneric(Symbol container) 857531"];
3044 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857532"];
3045 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857533"];
3046 [label="IsGenericType(container.ContainingType) 857534"];
3047 [label="param IsGenericType(NamedTypeSymbol toCheck) 857535"];
3048 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857536"];
3049 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857537"];
3050 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857538"];
3051 [label="toCheck = toCheck.ContainingType; 857539"];
3052 [label="return false; 857540"];
3053 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857541"];
3054 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857542"];
3055 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857543"];
3056 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857544"];
3057 [label="param Translate(SyntaxNode syntaxNodeOpt) 857545"];
3058 [label="param Translate(DiagnosticBag diagnostics) 857546"];
3059 [label="param Translate(bool fromImplements = false) 857547"];
3060 [label="param Translate(bool needDeclaration = false) 857548"];
3061 [label="Debug.Assert(diagnostics != null); 857549"];
3062 [label="Debug.Assert(diagnostics != null); 857550"];
3063 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857551"];
3064 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857552"];
3065 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857553"];
3066 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857554"];
3067 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857555"];
3068 [label="object reference; 857556"];
3069 [label="Cci.INamedTypeReference typeRef; 857557"];
3070 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 857558"];
3071 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857559"];
3072 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857560"];
3073 [label="IsGenericType(container) 857561"];
3074 [label="param IsGenericType(NamedTypeSymbol toCheck) 857562"];
3075 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857563"];
3076 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857564"];
3077 [label="return false; 857565"];
3078 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857566"];
3079 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857567"];
3080 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857568"];
3081 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 857569"];
3082 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 857570"];
3083 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 857571"];
3084 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 857572"];
3085 [label="GetBoundReferenceManager() 857573"];
3086 [label="param GetBoundReferenceManager(this) 857574"];
3087 [label="GetBoundReferenceManager(); 857575"];
3088 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 857576"];
3089 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 857577"];
3090 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857578"];
3091 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 857579"];
3092 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 857580"];
3093 [label="bool typeIsGeneric = IsGenericType(container); 857581"];
3094 [label="IsGenericType(container) 857582"];
3095 [label="param IsGenericType(NamedTypeSymbol toCheck) 857583"];
3096 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857584"];
3097 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857585"];
3098 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857586"];
3099 [label="toCheck = toCheck.ContainingType; 857587"];
3100 [label="return false; 857588"];
3101 [label="bool typeIsGeneric = IsGenericType(container); 857589"];
3102 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857590"];
3103 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857591"];
3104 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 857592"];
3105 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 857593"];
3106 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857594"];
3107 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857595"];
3108 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857596"];
3109 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857597"];
3110 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857598"];
3111 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857599"];
3112 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857600"];
3113 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 857601"];
3114 [label="param Translate(SyntaxNode syntaxNodeOpt) 857602"];
3115 [label="param Translate(DiagnosticBag diagnostics) 857603"];
3116 [label="param Translate(bool fromImplements = false) 857604"];
3117 [label="param Translate(bool needDeclaration = false) 857605"];
3118 [label="Debug.Assert(diagnostics != null); 857606"];
3119 [label="Debug.Assert(diagnostics != null); 857607"];
3120 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857608"];
3121 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 857609"];
3122 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 857610"];
3123 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857611"];
3124 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 857612"];
3125 [label="object reference; 857613"];
3126 [label="Cci.INamedTypeReference typeRef; 857614"];
3127 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 857615"];
3128 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857616"];
3129 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857617"];
3130 [label="IsGenericType(container) 857618"];
3131 [label="param IsGenericType(NamedTypeSymbol toCheck) 857619"];
3132 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857620"];
3133 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857621"];
3134 [label="return false; 857622"];
3135 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857623"];
3136 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 857624"];
3137 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 857625"];
3138 [label="param MustBeWrapped(ParameterSymbol param) 857626"];
3139 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 857627"];
3140 [label="var container = param.ContainingSymbol; 857628"];
3141 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 857629"];
3142 [label="ContainerIsGeneric(container) 857630"];
3143 [label="param ContainerIsGeneric(Symbol container) 857631"];
3144 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857632"];
3145 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857633"];
3146 [label="IsGenericType(container.ContainingType) 857634"];
3147 [label="param IsGenericType(NamedTypeSymbol toCheck) 857635"];
3148 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857636"];
3149 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857637"];
3150 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857638"];
3151 [label="toCheck = toCheck.ContainingType; 857639"];
3152 [label="return false; 857640"];
3153 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857641"];
3154 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857642"];
3155 [label="param MustBeWrapped(ParameterSymbol param) 857643"];
3156 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 857644"];
3157 [label="var container = param.ContainingSymbol; 857645"];
3158 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 857646"];
3159 [label="ContainerIsGeneric(container) 857647"];
3160 [label="param ContainerIsGeneric(Symbol container) 857648"];
3161 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857649"];
3162 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857650"];
3163 [label="IsGenericType(container.ContainingType) 857651"];
3164 [label="param IsGenericType(NamedTypeSymbol toCheck) 857652"];
3165 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857653"];
3166 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 857654"];
3167 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857655"];
3168 [label="toCheck = toCheck.ContainingType; 857656"];
3169 [label="return false; 857657"];
3170 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857658"];
3171 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 857659"];
3172 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 857660"];
3173 [label="toCheck = toCheck.ContainingType; 857661"];
3174 [label="Debug.Assert(symbol.IsDefinition); 857662"];
3175 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 857663"];
3176 [label="return _referenceManager; 857664"];
3177 [label="GetBoundReferenceManager(); 857665"];
3178 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 857666"];
3179 [label="param GetBoundReferenceManager(this) 857667"];
3180 [label="GetBoundReferenceManager(); 857668"];
3181 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 857669"];
3182 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 857670"];
3183 [label="param SynthesizeNullableAttributeIfNecessary(this) 857671"];
3184 [label="param GetSymbolToLocationMap(this) 857672"];
3185 [label="var result = new MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation>(); 857673"];
3186 [label="var namespacesAndTypesToProcess = new Stack<NamespaceOrTypeSymbol>(); 857674"];
3187 [label="namespacesAndTypesToProcess.Push(SourceModule.GlobalNamespace); 857675"];
3188 [label="namespacesAndTypesToProcess.Push(SourceModule.GlobalNamespace); 857676"];
3189 [label="Location location = null; 857677"];
3190 [label="while (namespacesAndTypesToProcess.Count > 0)\n            {\n                NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop();\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                }\n            } 857678"];
3191 [label="while (namespacesAndTypesToProcess.Count > 0)\n            {\n                NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop();\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                }\n            } 857679"];
3192 [label="NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop(); 857680"];
3193 [label="switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                } 857681"];
3194 [label="location = GetSmallestSourceLocationOrNull(symbol); 857682"];
3195 [label="GetSmallestSourceLocationOrNull(symbol) 857683"];
3196 [label="param GetSmallestSourceLocationOrNull(Symbol symbol) 857684"];
3197 [label="param GetSmallestSourceLocationOrNull(this) 857685"];
3198 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 857686"];
3199 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857687"];
3200 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857688"];
3201 [label="Location result = null; 857689"];
3202 [label="foreach (var loc in symbol.Locations)\n            {\n                if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                }\n            } 857690"];
3203 [label="if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                } 857691"];
3204 [label="if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                } 857692"];
3205 [label="result = loc; 857693"];
3206 [label="return result; 857694"];
3207 [label="if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        } 857695"];
3208 [label="if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        } 857696"];
3209 [label="foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            } 857697"];
3210 [label="switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                } 857698"];
3211 [label="namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member); 857699"];
3212 [label="location = GetSmallestSourceLocationOrNull(symbol); 857700"];
3213 [label="GetSmallestSourceLocationOrNull(symbol) 857701"];
3214 [label="param GetSmallestSourceLocationOrNull(Symbol symbol) 857702"];
3215 [label="param GetSmallestSourceLocationOrNull(this) 857703"];
3216 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 857704"];
3217 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857705"];
3218 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857706"];
3219 [label="if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        } 857707"];
3220 [label="if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        } 857708"];
3221 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 857709"];
3222 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 857710"];
3223 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 857711"];
3224 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()) 857712"];
3225 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 857713"];
3226 [label="param AddSymbolLocation(Location location) 857714"];
3227 [label="param AddSymbolLocation(Cci.IDefinition definition) 857715"];
3228 [label="param AddSymbolLocation(this) 857716"];
3229 [label="FileLinePositionSpan span = location.GetLineSpan(); 857717"];
3230 [label="Cci.DebugSourceDocument doc = DebugDocumentsBuilder.TryGetDebugDocument(span.Path, basePath: location.SourceTree.FilePath); 857718"];
3231 [label="Cci.DebugSourceDocument doc = DebugDocumentsBuilder.TryGetDebugDocument(span.Path, basePath: location.SourceTree.FilePath); 857719"];
3232 [label="Cci.DebugSourceDocument doc = DebugDocumentsBuilder.TryGetDebugDocument(span.Path, basePath: location.SourceTree.FilePath); 857720"];
3233 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 857721"];
3234 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 857722"];
3235 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 857723"];
3236 [label="foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            } 857724"];
3237 [label="switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                } 857725"];
3238 [label="var field = (FieldSymbol)member; 857726"];
3239 [label="AddSymbolLocation(result, field.TupleUnderlyingField ?? field); 857727"];
3240 [label="AddSymbolLocation(result, field.TupleUnderlyingField ?? field); 857728"];
3241 [label="AddSymbolLocation(result, field.TupleUnderlyingField ?? field) 857729"];
3242 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 857730"];
3243 [label="param AddSymbolLocation(Symbol symbol) 857731"];
3244 [label="param AddSymbolLocation(this) 857732"];
3245 [label="var location = GetSmallestSourceLocationOrNull(symbol); 857733"];
3246 [label="GetSmallestSourceLocationOrNull(symbol) 857734"];
3247 [label="param GetSmallestSourceLocationOrNull(Symbol symbol) 857735"];
3248 [label="param GetSmallestSourceLocationOrNull(this) 857736"];
3249 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 857737"];
3250 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857738"];
3251 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857739"];
3252 [label="if (location != null)\n            {\n                AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n            } 857740"];
3253 [label="if (location != null)\n            {\n                AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n            } 857741"];
3254 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 857742"];
3255 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 857743"];
3256 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 857744"];
3257 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()) 857745"];
3258 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 857746"];
3259 [label="param AddSymbolLocation(Location location) 857747"];
3260 [label="param AddSymbolLocation(Cci.IDefinition definition) 857748"];
3261 [label="param AddSymbolLocation(this) 857749"];
3262 [label="Cci.DebugSourceDocument doc = DebugDocumentsBuilder.TryGetDebugDocument(span.Path, basePath: location.SourceTree.FilePath); 857750"];
3263 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 857751"];
3264 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 857752"];
3265 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 857753"];
3266 [label="AddSymbolLocation(result, field.TupleUnderlyingField ?? field); 857754"];
3267 [label="AddSymbolLocation(result, member); 857755"];
3268 [label="AddSymbolLocation(result, member); 857756"];
3269 [label="AddSymbolLocation(result, member) 857757"];
3270 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 857758"];
3271 [label="param AddSymbolLocation(Symbol symbol) 857759"];
3272 [label="param GetSmallestSourceLocationOrNull(this) 857760"];
3273 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 857761"];
3274 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857762"];
3275 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857763"];
3276 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 857764"];
3277 [label="param AddSymbolLocation(Cci.IDefinition definition) 857765"];
3278 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 857766"];
3279 [label="var method = (MethodSymbol)member; 857767"];
3280 [label="if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        } 857768"];
3281 [label="AddSymbolLocation(result, member); 857769"];
3282 [label="AddSymbolLocation(result, member); 857770"];
3283 [label="AddSymbolLocation(result, member) 857771"];
3284 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 857772"];
3285 [label="param AddSymbolLocation(Symbol symbol) 857773"];
3286 [label="param GetSmallestSourceLocationOrNull(this) 857774"];
3287 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 857775"];
3288 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857776"];
3289 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857777"];
3290 [label="foreach (var loc in symbol.Locations)\n            {\n                if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                }\n            } 857778"];
3291 [label="AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter()); 857779"];
3292 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 857780"];
3293 [label="param AddSymbolLocation(Cci.IDefinition definition) 857781"];
3294 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 857782"];
3295 [label="AddSymbolLocation(result, member); 857783"];
3296 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 857784"];
3297 [label="param GetSmallestSourceLocationOrNull(this) 857785"];
3298 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 857786"];
3299 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857787"];
3300 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 857788"];
3301 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 857789"];
3302 [label="return result; 857790"];
3303 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 857791"];
3304 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 857792"];
3305 [label="return _referenceManager; 857793"];
3306 [label="GetBoundReferenceManager(); 857794"];
3307 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 857795"];
3308 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 857796"];
3309 [label="pdb = pdbStream.ToImmutable(); 857797"];
3310 [label="pdb = pdbStream.ToImmutable(); 857798"];
3311 [label="pdbStream.Dispose(); 857799"];
3312 [label="diagnostics.AddRange(result.Diagnostics); 857800"];
3313 [label="diagnostics.AddRange(result.Diagnostics); 857801"];
3314 [label="assembly = executableStream.ToImmutable(); 857802"];
3315 [label="assembly = executableStream.ToImmutable(); 857803"];
3316 [label="if (result.Success)\n            {\n                return new EmitOutput(assembly, pdb);\n            } 857804"];
3317 [label="return new EmitOutput(assembly, pdb); 857805"];
3318 [label="return new EmitOutput(assembly, pdb); 857806"];
3319 [label="return new EmitOutput(assembly, pdb); 857807"];
3320 [label="new EmitOutput(assembly, pdb) 857808"];
3321 [label="param EmitOutput(ImmutableArray<byte> assembly) 857809"];
3322 [label="param EmitOutput(ImmutableArray<byte> pdb) 857810"];
3323 [label="param EmitOutput(this) 857811"];
3324 [label="Assembly 857812"];
3325 [label="if (pdb.IsDefault)\n            {\n                // We didn't emit a discrete PDB file, so we'll look for an embedded PDB instead.\n                using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                }\n            } 857813"];
3326 [label="Pdb 857814"];
3327 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 857815"];
3328 [label="get { return this.Assembly.GetPublicSymbol(); } 857816"];
3329 [label="this.Assembly 857817"];
3330 [label="get\n            {\n                return SourceAssembly;\n            } 857818"];
3331 [label="SourceAssembly 857819"];
3332 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 857820"];
3333 [label="GetBoundReferenceManager() 857821"];
3334 [label="param GetBoundReferenceManager(this) 857822"];
3335 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 857823"];
3336 [label="return _referenceManager; 857824"];
3337 [label="GetBoundReferenceManager(); 857825"];
3338 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 857826"];
3339 [label="return this.Assembly.GetPublicSymbol(); 857827"];
3340 [label="get { return _options; } 857828"];
3341 [label="_diagnostics = testEnvironment.GetDiagnostics(); 857829"];
3342 [label="_diagnostics 857830"];
3343 [label="EmittedAssemblyData = testEnvironment.GetMainImage(); 857831"];
3344 [label="EmittedAssemblyData 857832"];
3345 [label="EmittedAssemblyPdb = testEnvironment.GetMainPdb(); 857833"];
3346 [label="EmittedAssemblyPdb 857834"];
3347 [label="_testData = ((IInternalRuntimeEnvironment)testEnvironment).GetCompilationTestData(); 857835"];
3348 [label="_testData 857836"];
3349 [label="return _compilation.Assembly.Identity.GetDisplayName(); 857837"];
3350 [label="_compilation.Assembly 857838"];
3351 [label="get { return this.Assembly.GetPublicSymbol(); } 857839"];
3352 [label="this.Assembly 857840"];
3353 [label="SourceAssembly 857841"];
3354 [label="GetBoundReferenceManager() 857842"];
3355 [label="param GetBoundReferenceManager(this) 857843"];
3356 [label="GetBoundReferenceManager(); 857844"];
3357 [label="return _compilation.Assembly.Identity.GetDisplayName(); 857845"];
3358 [label="_allModuleData = testEnvironment.GetAllModuleData(); 857846"];
3359 [label="_allModuleData 857847"];
3360 [label="testEnvironment.Verify(peVerify); 857848"];
3361 [label="testEnvironment.Verify(peVerify); 857849"];
3362 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 857850"];
3363 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 857851"];
3364 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 857852"];
3365 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 857853"];
3366 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 857854"];
3367 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 857855"];
3368 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 857856"];
3369 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 857857"];
3370 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 857858"];
3371 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 857859"];
3372 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 857860"];
3373 [label="return verifier; 857861"];
3374 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 857862"];
3375 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 857863"];
3376 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 857864"];
3377 [label="result = verifier; 857865"];
3378 [label="CustomAssert.NotNull(result); 857866"];
3379 [label="return result; 857867"];
3380 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 857868"];
3381 [label="CompileAndVerify(comp, emitOptions: emitRefOnly, verify: Verification.Passes); 857869"];
3382 [label="var refImage = comp.EmitToImageReference(emitRefOnly); 857870"];
3383 [label="var refImage = comp.EmitToImageReference(emitRefOnly); 857871"];
3384 [label="var refImage = comp.EmitToImageReference(emitRefOnly); 857872"];
3385 [label="comp.EmitToImageReference(emitRefOnly) 857873"];
3386 [label="param EmitToImageReference(this Compilation comp) 857874"];
3387 [label="param EmitToImageReference(EmitOptions options = null) 857875"];
3388 [label="param EmitToImageReference(bool embedInteropTypes = false) 857876"];
3389 [label="param EmitToImageReference(ImmutableArray<string> aliases = default) 857877"];
3390 [label="param EmitToImageReference(DiagnosticDescription[] expectedWarnings = null) 857878"];
3391 [label="comp 857879"];
3392 [label="options 857880"];
3393 [label="embedInteropTypes 857881"];
3394 [label="aliases 857882"];
3395 [label="expectedWarnings 857883"];
3396 [label="EmitToPortableExecutableReference(comp, options, embedInteropTypes, aliases, expectedWarnings) 857884"];
3397 [label="param EmitToPortableExecutableReference(this Compilation comp) 857885"];
3398 [label="param EmitToPortableExecutableReference(EmitOptions options = null) 857886"];
3399 [label="param EmitToPortableExecutableReference(bool embedInteropTypes = false) 857887"];
3400 [label="param EmitToPortableExecutableReference(ImmutableArray<string> aliases = default) 857888"];
3401 [label="param EmitToPortableExecutableReference(DiagnosticDescription[] expectedWarnings = null) 857889"];
3402 [label="var image = comp.EmitToArray(options, expectedWarnings: expectedWarnings); 857890"];
3403 [label="var image = comp.EmitToArray(options, expectedWarnings: expectedWarnings); 857891"];
3404 [label="var image = comp.EmitToArray(options, expectedWarnings: expectedWarnings); 857892"];
3405 [label="var image = comp.EmitToArray(options, expectedWarnings: expectedWarnings); 857893"];
3406 [label="comp.EmitToArray(options, expectedWarnings: expectedWarnings) 857894"];
3407 [label="param EmitToArray(this Compilation compilation) 857895"];
3408 [label="param EmitToArray(EmitOptions options = null) 857896"];
3409 [label="param EmitToArray(CompilationTestData testData = null) 857897"];
3410 [label="param EmitToArray(DiagnosticDescription[] expectedWarnings = null) 857898"];
3411 [label="param EmitToArray(Stream pdbStream = null) 857899"];
3412 [label="param EmitToArray(IMethodSymbol debugEntryPoint = null) 857900"];
3413 [label="param EmitToArray(Stream sourceLinkStream = null) 857901"];
3414 [label="param EmitToArray(IEnumerable<EmbeddedText> embeddedTexts = null) 857902"];
3415 [label="param EmitToArray(IEnumerable<ResourceDescription> manifestResources = null) 857903"];
3416 [label="param EmitToArray(Stream metadataPEStream = null) 857904"];
3417 [label="var peStream = new MemoryStream(); 857905"];
3418 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 857906"];
3419 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 857907"];
3420 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 857908"];
3421 [label="compilation.Options 857909"];
3422 [label="get { return _options; } 857910"];
3423 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 857911"];
3424 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 857912"];
3425 [label="if (pdbStream == null && compilation.Options.OptimizationLevel == OptimizationLevel.Debug && options?.DebugInformationFormat != DebugInformationFormat.Embedded)\n            {\n                if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                }\n\n                var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded;\n                pdbStream = discretePdb ? new MemoryStream() : null;\n            } 857913"];
3426 [label="MonoHelpers.IsRunningOnMono() 857914"];
3427 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 857915"];
3428 [label="if (MonoHelpers.IsRunningOnMono() || PathUtilities.IsUnixLikePlatform)\n                {\n                    options = (options ?? EmitOptions.Default).WithDebugInformationFormat(DebugInformationFormat.PortablePdb);\n                } 857916"];
3429 [label="var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded; 857917"];
3430 [label="var discretePdb = (object)options != null && options.DebugInformationFormat != DebugInformationFormat.Embedded; 857918"];
3431 [label="discretePdb 857919"];
3432 [label="pdbStream = discretePdb ? new MemoryStream() : null; 857920"];
3433 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857921"];
3434 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857922"];
3435 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857923"];
3436 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857924"];
3437 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857925"];
3438 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857926"];
3439 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857927"];
3440 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857928"];
3441 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857929"];
3442 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857930"];
3443 [label="var emitResult = compilation.Emit(\n                peStream: peStream,\n                metadataPEStream: metadataPEStream,\n                pdbStream: pdbStream,\n                xmlDocumentationStream: null,\n                win32Resources: null,\n                manifestResources: manifestResources,\n                options: options,\n                debugEntryPoint: debugEntryPoint,\n                sourceLinkStream: sourceLinkStream,\n                embeddedTexts: embeddedTexts,\n                testData: testData,\n                cancellationToken: default(CancellationToken)); 857931"];
3444 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 857932"];
3445 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 857933"];
3446 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 857934"];
3447 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 857935"];
3448 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 857936"];
3449 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 857937"];
3450 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 857938"];
3451 [label="GetRuntimeMetadataVersion(emitOptions) 857939"];
3452 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 857940"];
3453 [label="Assembly 857941"];
3454 [label="SourceAssembly 857942"];
3455 [label="GetBoundReferenceManager() 857943"];
3456 [label="param GetBoundReferenceManager(this) 857944"];
3457 [label="GetBoundReferenceManager(); 857945"];
3458 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 857946"];
3459 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 857947"];
3460 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 857948"];
3461 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 857949"];
3462 [label="SourceAssembly 857950"];
3463 [label="GetBoundReferenceManager() 857951"];
3464 [label="param GetBoundReferenceManager(this) 857952"];
3465 [label="GetBoundReferenceManager(); 857953"];
3466 [label="SourceAssembly.IsDelaySigned 857954"];
3467 [label="SourceAssembly 857955"];
3468 [label="GetBoundReferenceManager() 857956"];
3469 [label="param GetBoundReferenceManager(this) 857957"];
3470 [label="GetBoundReferenceManager(); 857958"];
3471 [label="=> 0x30 857959"];
3472 [label="0x30 857960"];
3473 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 857961"];
3474 [label="PEModuleBuilder moduleBeingBuilt; 857962"];
3475 [label="GetBoundReferenceManager() 857963"];
3476 [label="GetBoundReferenceManager(); 857964"];
3477 [label="get\n            {\n                return true;\n            } 857965"];
3478 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 857966"];
3479 [label="Debug.Assert(sourceAssembly is object); 857967"];
3480 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 857968"];
3481 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 857969"];
3482 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 857970"];
3483 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 857971"];
3484 [label="param CompileMethods(bool emittingPdb) 857972"];
3485 [label="param CompileMethods(bool emitTestCoverageData) 857973"];
3486 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 857974"];
3487 [label="PooledHashSet<int>? excludeDiagnostics = null; 857975"];
3488 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 857976"];
3489 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 857977"];
3490 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 857978"];
3491 [label="param GetDiagnostics(CompilationStage stage) 857979"];
3492 [label="param GetDiagnostics(bool includeEarlierStages) 857980"];
3493 [label="var diagnostics = DiagnosticBag.GetInstance(); 857981"];
3494 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 857982"];
3495 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 857983"];
3496 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 857984"];
3497 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 857985"];
3498 [label="param GetDiagnostics(CompilationStage stage) 857986"];
3499 [label="param GetDiagnostics(bool includeEarlierStages) 857987"];
3500 [label="param GetDiagnostics(DiagnosticBag diagnostics) 857988"];
3501 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 857989"];
3502 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 857990"];
3503 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 857991"];
3504 [label="this.SyntaxTrees 857992"];
3505 [label="_syntaxAndDeclarations.GetLazyState() 857993"];
3506 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 857994"];
3507 [label="this.Options 857995"];
3508 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 857996"];
3509 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 857997"];
3510 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 857998"];
3511 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 857999"];
3512 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 858000"];
3513 [label="CheckAssemblyName(builder); 858001"];
3514 [label="CheckAssemblyName(builder); 858002"];
3515 [label="Options 858003"];
3516 [label="Options 858004"];
3517 [label="get\n            {\n                return _options;\n            } 858005"];
3518 [label="return _options; 858006"];
3519 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 858007"];
3520 [label="GetBoundReferenceManager() 858008"];
3521 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 858009"];
3522 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 858010"];
3523 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 858011"];
3524 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 858012"];
3525 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 858013"];
3526 [label="GlobalImports 858014"];
3527 [label="SourceLocation? location = null; 858015"];
3528 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 858016"];
3529 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 858017"];
3530 [label="Assembly 858018"];
3531 [label="SourceAssembly 858019"];
3532 [label="GetBoundReferenceManager() 858020"];
3533 [label="param GetBoundReferenceManager(this) 858021"];
3534 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 858022"];
3535 [label="return _referenceManager; 858023"];
3536 [label="GetBoundReferenceManager(); 858024"];
3537 [label="Assembly.ForceComplete(location, cancellationToken); 858025"];
3538 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 858026"];
3539 [label="_declarationDiagnosticsFrozen = true; 858027"];
3540 [label="_needsGeneratedAttributes_IsFrozen = true; 858028"];
3541 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 858029"];
3542 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 858030"];
3543 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 858031"];
3544 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 858032"];
3545 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 858033"];
3546 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 858034"];
3547 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 858035"];
3548 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 858036"];
3549 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 858037"];
3550 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 858038"];
3551 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 858039"];
3552 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 858040"];
3553 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 858041"];
3554 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 858042"];
3555 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 858043"];
3556 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 858044"];
3557 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 858045"];
3558 [label="if (hasDeclarationErrors)\n                {\n                    return false;\n                } 858046"];
3559 [label="if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                } 858047"];
3560 [label="Debug.Assert(moduleBeingBuilt != null); 858048"];
3561 [label="Debug.Assert(moduleBeingBuilt != null); 858049"];
3562 [label="GetBoundReferenceManager() 858050"];
3563 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 858051"];
3564 [label="return _referenceManager; 858052"];
3565 [label="GetBoundReferenceManager(); 858053"];
3566 [label="param VisitProperty(PropertySymbol symbol) 858054"];
3567 [label="param VisitProperty(this) 858055"];
3568 [label="var sourceProperty = symbol as SourcePropertySymbolBase; 858056"];
3569 [label="if ((object)sourceProperty != null && sourceProperty.IsSealed)\n            {\n                var synthesizedAccessor = sourceProperty.SynthesizedSealedAccessorOpt;\n                if ((object)synthesizedAccessor != null)\n                {\n                    _moduleBeingBuilt.AddSynthesizedDefinition(sourceProperty.ContainingType, synthesizedAccessor.GetCciAdapter());\n                }\n            } 858057"];
3570 [label="if ((object)sourceProperty != null && sourceProperty.IsSealed)\n            {\n                var synthesizedAccessor = sourceProperty.SynthesizedSealedAccessorOpt;\n                if ((object)synthesizedAccessor != null)\n                {\n                    _moduleBeingBuilt.AddSynthesizedDefinition(sourceProperty.ContainingType, synthesizedAccessor.GetCciAdapter());\n                }\n            } 858058"];
3571 [label="return true; 858059"];
3572 [label="this.SourceModule 858060"];
3573 [label="Assembly 858061"];
3574 [label="SourceAssembly 858062"];
3575 [label="GetBoundReferenceManager() 858063"];
3576 [label="param GetBoundReferenceManager(this) 858064"];
3577 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 858065"];
3578 [label="return _referenceManager; 858066"];
3579 [label="GetBoundReferenceManager(); 858067"];
3580 [label="return Assembly.Modules[0]; 858068"];
3581 [label="SourceAssembly 858069"];
3582 [label="GetBoundReferenceManager() 858070"];
3583 [label="param GetBoundReferenceManager(this) 858071"];
3584 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 858072"];
3585 [label="return _referenceManager; 858073"];
3586 [label="GetBoundReferenceManager(); 858074"];
3587 [label="SourceAssembly.IsDelaySigned 858075"];
3588 [label="SourceAssembly 858076"];
3589 [label="GetBoundReferenceManager() 858077"];
3590 [label="param GetBoundReferenceManager(this) 858078"];
3591 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 858079"];
3592 [label="return _referenceManager; 858080"];
3593 [label="GetBoundReferenceManager(); 858081"];
3594 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 858082"];
3595 [label="CorLibrary 858083"];
3596 [label="return Translate(corLibrary, context.Diagnostics); 858084"];
3597 [label="param Translate(DiagnosticBag diagnostics) 858085"];
3598 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 858086"];
3599 [label="_targetAssembly 858087"];
3600 [label="Debug.Assert((object)assemblySymbol != null); 858088"];
3601 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 858089"];
3602 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 858090"];
3603 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 858091"];
3604 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 858092"];
3605 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 858093"];
3606 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 858094"];
3607 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 858095"];
3608 [label="param ValidateReferencedAssembly(this) 858096"];
3609 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 858097"];
3610 [label="asmRef.Identity 858098"];
3611 [label="=> _targetAssembly.Identity 858099"];
3612 [label="AssemblyIdentity refIdentity = asmRef.Identity; 858100"];
3613 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 858101"];
3614 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 858102"];
3615 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 858103"];
3616 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 858104"];
3617 [label="var refMachine = assembly.Machine; 858105"];
3618 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 858106"];
3619 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 858107"];
3620 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 858108"];
3621 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 858109"];
3622 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 858110"];
3623 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 858111"];
3624 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 858112"];
3625 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 858113"];
3626 [label="param GetAssemblyReferencesFromAddedModules(this) 858114"];
3627 [label="param GetFiles(EmitContext context) 858115"];
3628 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 858116"];
3629 [label="getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly) 858117"];
3630 [label="var modules = sourceAssSymbol.Modules; 858118"];
3631 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 858119"];
3632 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 858120"];
3633 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 858121"];
3634 [label="param GetAnonymousTypeDefinitions(this) 858122"];
3635 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 858123"];
3636 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 858124"];
3637 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 858125"];
3638 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 858126"];
3639 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 858127"];
3640 [label="GetEmbeddedTypes(context.Diagnostics) 858128"];
3641 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 858129"];
3642 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 858130"];
3643 [label="GetNeedsGeneratedAttributes() 858131"];
3644 [label="_needsGeneratedAttributes_IsFrozen = true; 858132"];
3645 [label="GetNeedsGeneratedAttributesInternal() 858133"];
3646 [label="ShouldEmitNullablePublicOnlyAttribute() 858134"];
3647 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 858135"];
3648 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 858136"];
3649 [label="CreateAttributeIfNeeded(\n                ref _lazyEmbeddedAttribute,\n                diagnostics,\n                AttributeDescription.CodeAnalysisEmbeddedAttribute,\n                createParameterlessEmbeddedAttributeSymbol); 858137"];
3650 [label="CreateAttributeIfNeeded(\n                ref _lazyEmbeddedAttribute,\n                diagnostics,\n                AttributeDescription.CodeAnalysisEmbeddedAttribute,\n                createParameterlessEmbeddedAttributeSymbol) 858138"];
3651 [label="param CreateAttributeIfNeeded(AttributeDescription description) 858139"];
3652 [label="param AddDiagnosticsForExistingAttribute(DiagnosticBag diagnostics) 858140"];
3653 [label="Debug.Assert((object)userDefinedAttribute.ContainingModule == _sourceAssembly.SourceModule); 858141"];
3654 [label="if (!(userDefinedAttribute is MissingMetadataTypeSymbol))\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeReserved, userDefinedAttribute.Locations[0], description.FullName);\n            } 858142"];
3655 [label="Debug.Assert(symbol.Constructors.Length == description.Signatures.Length); 858143"];
3656 [label="CreateAttributeIfNeeded(\n                ref _lazyEmbeddedAttribute,\n                diagnostics,\n                AttributeDescription.CodeAnalysisEmbeddedAttribute,\n                createParameterlessEmbeddedAttributeSymbol); 858144"];
3657 [label="if ((needsAttributes & EmbeddableAttributes.IsReadOnlyAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsReadOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.IsReadOnlyAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 858145"];
3658 [label="Debug.Assert(symbol.Constructors.Length == description.Signatures.Length); 858146"];
3659 [label="if ((needsAttributes & EmbeddableAttributes.IsByRefLikeAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsByRefLikeAttribute,\n                    diagnostics,\n                    AttributeDescription.IsByRefLikeAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 858147"];
3660 [label="if ((needsAttributes & EmbeddableAttributes.IsByRefLikeAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsByRefLikeAttribute,\n                    diagnostics,\n                    AttributeDescription.IsByRefLikeAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 858148"];
3661 [label="if ((needsAttributes & EmbeddableAttributes.IsUnmanagedAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsUnmanagedAttribute,\n                    diagnostics,\n                    AttributeDescription.IsUnmanagedAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 858149"];
3662 [label="if ((needsAttributes & EmbeddableAttributes.IsUnmanagedAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsUnmanagedAttribute,\n                    diagnostics,\n                    AttributeDescription.IsUnmanagedAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 858150"];
3663 [label="if ((needsAttributes & EmbeddableAttributes.NullableAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableAttribute,\n                    CreateNullableAttributeSymbol);\n            } 858151"];
3664 [label="if ((needsAttributes & EmbeddableAttributes.NullableAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableAttribute,\n                    CreateNullableAttributeSymbol);\n            } 858152"];
3665 [label="if ((needsAttributes & EmbeddableAttributes.NullableContextAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableContextAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableContextAttribute,\n                    CreateNullableContextAttributeSymbol);\n            } 858153"];
3666 [label="if ((needsAttributes & EmbeddableAttributes.NullableContextAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableContextAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableContextAttribute,\n                    CreateNullableContextAttributeSymbol);\n            } 858154"];
3667 [label="if ((needsAttributes & EmbeddableAttributes.NullablePublicOnlyAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullablePublicOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.NullablePublicOnlyAttribute,\n                    CreateNullablePublicOnlyAttributeSymbol);\n            } 858155"];
3668 [label="if ((needsAttributes & EmbeddableAttributes.NullablePublicOnlyAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullablePublicOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.NullablePublicOnlyAttribute,\n                    CreateNullablePublicOnlyAttributeSymbol);\n            } 858156"];
3669 [label="if ((needsAttributes & EmbeddableAttributes.NativeIntegerAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNativeIntegerAttribute,\n                    diagnostics,\n                    AttributeDescription.NativeIntegerAttribute,\n                    CreateNativeIntegerAttributeSymbol);\n            } 858157"];
3670 [label="if ((needsAttributes & EmbeddableAttributes.NativeIntegerAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNativeIntegerAttribute,\n                    diagnostics,\n                    AttributeDescription.NativeIntegerAttribute,\n                    CreateNativeIntegerAttributeSymbol);\n            } 858158"];
3671 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 858159"];
3672 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 858160"];
3673 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 858161"];
3674 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 858162"];
3675 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 858163"];
3676 [label="builder.AddIfNotNull(_lazyNullableAttribute); 858164"];
3677 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 858165"];
3678 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 858166"];
3679 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 858167"];
3680 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 858168"];
3681 [label="Debug.Assert(symbol.IsDefinition); 858169"];
3682 [label="SourceModule 858170"];
3683 [label="Assembly 858171"];
3684 [label="SourceAssembly 858172"];
3685 [label="GetBoundReferenceManager() 858173"];
3686 [label="param GetBoundReferenceManager(this) 858174"];
3687 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 858175"];
3688 [label="return _referenceManager; 858176"];
3689 [label="GetBoundReferenceManager(); 858177"];
3690 [label="return Assembly.Modules[0]; 858178"];
3691 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 858179"];
3692 [label="EmitNullablePublicOnly 858180"];
3693 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 858181"];
3694 [label="Compilation.SourceModule 858182"];
3695 [label="Assembly 858183"];
3696 [label="SourceAssembly 858184"];
3697 [label="GetBoundReferenceManager() 858185"];
3698 [label="param GetBoundReferenceManager(this) 858186"];
3699 [label="GetBoundReferenceManager(); 858187"];
3700 [label="return Assembly.Modules[0]; 858188"];
3701 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 858189"];
3702 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 858190"];
3703 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 858191"];
3704 [label="type.AddNullableTransforms(flagsBuilder); 858192"];
3705 [label="SynthesizedAttributeData attribute; 858193"];
3706 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 858194"];
3707 [label="param GetSynthesizedNestedTypes(this) 858195"];
3708 [label="return null; 858196"];
3709 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 858197"];
3710 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 858198"];
3711 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 858199"];
3712 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 858200"];
3713 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 858201"];
3714 [label="NamedTypeSymbol result; 858202"];
3715 [label="Debug.Assert(result.SpecialType == specialType); 858203"];
3716 [label="param Translate(SyntaxNode syntaxNodeOpt) 858204"];
3717 [label="param Translate(DiagnosticBag diagnostics) 858205"];
3718 [label="param Translate(bool needDeclaration = false) 858206"];
3719 [label="param Translate(this) 858207"];
3720 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 858208"];
3721 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 858209"];
3722 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 858210"];
3723 [label="param Translate(SyntaxNode syntaxNodeOpt) 858211"];
3724 [label="param Translate(DiagnosticBag diagnostics) 858212"];
3725 [label="param Translate(bool needDeclaration) 858213"];
3726 [label="param Translate(this) 858214"];
3727 [label="object reference; 858215"];
3728 [label="Cci.IMethodReference methodRef; 858216"];
3729 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 858217"];
3730 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 858218"];
3731 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 858219"];
3732 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 858220"];
3733 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 858221"];
3734 [label="bool typeIsGeneric = IsGenericType(container); 858222"];
3735 [label="IsGenericType(container) 858223"];
3736 [label="param IsGenericType(NamedTypeSymbol toCheck) 858224"];
3737 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858225"];
3738 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858226"];
3739 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858227"];
3740 [label="toCheck = toCheck.ContainingType; 858228"];
3741 [label="return false; 858229"];
3742 [label="bool typeIsGeneric = IsGenericType(container); 858230"];
3743 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 858231"];
3744 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 858232"];
3745 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 858233"];
3746 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 858234"];
3747 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 858235"];
3748 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 858236"];
3749 [label="param Translate(SyntaxNode syntaxNodeOpt) 858237"];
3750 [label="param Translate(DiagnosticBag diagnostics) 858238"];
3751 [label="Debug.Assert(diagnostics != null); 858239"];
3752 [label="Debug.Assert(diagnostics != null); 858240"];
3753 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 858241"];
3754 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 858242"];
3755 [label="param Translate(SyntaxNode syntaxNodeOpt) 858243"];
3756 [label="param Translate(DiagnosticBag diagnostics) 858244"];
3757 [label="param Translate(bool fromImplements = false) 858245"];
3758 [label="param Translate(bool needDeclaration = false) 858246"];
3759 [label="Debug.Assert(diagnostics != null); 858247"];
3760 [label="Debug.Assert(diagnostics != null); 858248"];
3761 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858249"];
3762 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858250"];
3763 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 858251"];
3764 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858252"];
3765 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858253"];
3766 [label="object reference; 858254"];
3767 [label="Cci.INamedTypeReference typeRef; 858255"];
3768 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 858256"];
3769 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858257"];
3770 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858258"];
3771 [label="IsGenericType(container) 858259"];
3772 [label="param IsGenericType(NamedTypeSymbol toCheck) 858260"];
3773 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858261"];
3774 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858262"];
3775 [label="return false; 858263"];
3776 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858264"];
3777 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858265"];
3778 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 858266"];
3779 [label="param Translate(SyntaxNode syntaxNodeOpt) 858267"];
3780 [label="param Translate(DiagnosticBag diagnostics) 858268"];
3781 [label="param Translate(bool fromImplements = false) 858269"];
3782 [label="param Translate(bool needDeclaration = false) 858270"];
3783 [label="Debug.Assert(diagnostics != null); 858271"];
3784 [label="Debug.Assert(diagnostics != null); 858272"];
3785 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858273"];
3786 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858274"];
3787 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 858275"];
3788 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858276"];
3789 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858277"];
3790 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 858278"];
3791 [label="param Translate(DiagnosticBag diagnostics) 858279"];
3792 [label="if ((object)module == null)\n            {\n                return null;\n            } 858280"];
3793 [label="if ((object)module == null)\n            {\n                return null;\n            } 858281"];
3794 [label="Cci.IModuleReference moduleRef; 858282"];
3795 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 858283"];
3796 [label="param Translate(this) 858284"];
3797 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 858285"];
3798 [label="MustBeWrapped(@params.First()) 858286"];
3799 [label="param MustBeWrapped(ParameterSymbol param) 858287"];
3800 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 858288"];
3801 [label="var container = param.ContainingSymbol; 858289"];
3802 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 858290"];
3803 [label="ContainerIsGeneric(container) 858291"];
3804 [label="param ContainerIsGeneric(Symbol container) 858292"];
3805 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858293"];
3806 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858294"];
3807 [label="IsGenericType(container.ContainingType) 858295"];
3808 [label="param IsGenericType(NamedTypeSymbol toCheck) 858296"];
3809 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858297"];
3810 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858298"];
3811 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858299"];
3812 [label="toCheck = toCheck.ContainingType; 858300"];
3813 [label="return false; 858301"];
3814 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858302"];
3815 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858303"];
3816 [label="return false; 858304"];
3817 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 858305"];
3818 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 858306"];
3819 [label="param MustBeWrapped(ParameterSymbol param) 858307"];
3820 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 858308"];
3821 [label="var container = param.ContainingSymbol; 858309"];
3822 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 858310"];
3823 [label="ContainerIsGeneric(container) 858311"];
3824 [label="param ContainerIsGeneric(Symbol container) 858312"];
3825 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858313"];
3826 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858314"];
3827 [label="IsGenericType(container.ContainingType) 858315"];
3828 [label="param IsGenericType(NamedTypeSymbol toCheck) 858316"];
3829 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858317"];
3830 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858318"];
3831 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858319"];
3832 [label="toCheck = toCheck.ContainingType; 858320"];
3833 [label="return false; 858321"];
3834 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858322"];
3835 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858323"];
3836 [label="return false; 858324"];
3837 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 858325"];
3838 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 858326"];
3839 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 858327"];
3840 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 858328"];
3841 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 858329"];
3842 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 858330"];
3843 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 858331"];
3844 [label="bool typeIsGeneric = IsGenericType(container); 858332"];
3845 [label="IsGenericType(container) 858333"];
3846 [label="param IsGenericType(NamedTypeSymbol toCheck) 858334"];
3847 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858335"];
3848 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858336"];
3849 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858337"];
3850 [label="toCheck = toCheck.ContainingType; 858338"];
3851 [label="return false; 858339"];
3852 [label="bool typeIsGeneric = IsGenericType(container); 858340"];
3853 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 858341"];
3854 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 858342"];
3855 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 858343"];
3856 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 858344"];
3857 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858345"];
3858 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858346"];
3859 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 858347"];
3860 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858348"];
3861 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858349"];
3862 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 858350"];
3863 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 858351"];
3864 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 858352"];
3865 [label="param Translate(SyntaxNode syntaxNodeOpt) 858353"];
3866 [label="param Translate(DiagnosticBag diagnostics) 858354"];
3867 [label="param Translate(bool fromImplements = false) 858355"];
3868 [label="param Translate(bool needDeclaration = false) 858356"];
3869 [label="Debug.Assert(diagnostics != null); 858357"];
3870 [label="Debug.Assert(diagnostics != null); 858358"];
3871 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858359"];
3872 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858360"];
3873 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 858361"];
3874 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858362"];
3875 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858363"];
3876 [label="object reference; 858364"];
3877 [label="Cci.INamedTypeReference typeRef; 858365"];
3878 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 858366"];
3879 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858367"];
3880 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858368"];
3881 [label="IsGenericType(container) 858369"];
3882 [label="param IsGenericType(NamedTypeSymbol toCheck) 858370"];
3883 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858371"];
3884 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858372"];
3885 [label="return false; 858373"];
3886 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858374"];
3887 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858375"];
3888 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 858376"];
3889 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 858377"];
3890 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 858378"];
3891 [label="bool typeIsGeneric = IsGenericType(container); 858379"];
3892 [label="param IsGenericType(NamedTypeSymbol toCheck) 858380"];
3893 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858381"];
3894 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858382"];
3895 [label="toCheck = toCheck.ContainingType; 858383"];
3896 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858384"];
3897 [label="toCheck = toCheck.ContainingType; 858385"];
3898 [label="param MustBeWrapped(ParameterSymbol param) 858386"];
3899 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 858387"];
3900 [label="var container = param.ContainingSymbol; 858388"];
3901 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 858389"];
3902 [label="ContainerIsGeneric(container) 858390"];
3903 [label="param ContainerIsGeneric(Symbol container) 858391"];
3904 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858392"];
3905 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858393"];
3906 [label="IsGenericType(container.ContainingType) 858394"];
3907 [label="param IsGenericType(NamedTypeSymbol toCheck) 858395"];
3908 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858396"];
3909 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858397"];
3910 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858398"];
3911 [label="toCheck = toCheck.ContainingType; 858399"];
3912 [label="return false; 858400"];
3913 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858401"];
3914 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858402"];
3915 [label="param MustBeWrapped(ParameterSymbol param) 858403"];
3916 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 858404"];
3917 [label="var container = param.ContainingSymbol; 858405"];
3918 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 858406"];
3919 [label="ContainerIsGeneric(container) 858407"];
3920 [label="param ContainerIsGeneric(Symbol container) 858408"];
3921 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858409"];
3922 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858410"];
3923 [label="IsGenericType(container.ContainingType) 858411"];
3924 [label="param IsGenericType(NamedTypeSymbol toCheck) 858412"];
3925 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858413"];
3926 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858414"];
3927 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858415"];
3928 [label="toCheck = toCheck.ContainingType; 858416"];
3929 [label="return false; 858417"];
3930 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858418"];
3931 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858419"];
3932 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 858420"];
3933 [label="return Translate(corLibrary, context.Diagnostics); 858421"];
3934 [label="param Translate(DiagnosticBag diagnostics) 858422"];
3935 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 858423"];
3936 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 858424"];
3937 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 858425"];
3938 [label="return SourceModule.GetCustomAttributesToEmit(this); 858426"];
3939 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 858427"];
3940 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 858428"];
3941 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 858429"];
3942 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 858430"];
3943 [label="if ((needsAttributes & EmbeddableAttributes.IsByRefLikeAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsByRefLikeAttribute,\n                    diagnostics,\n                    AttributeDescription.IsByRefLikeAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 858431"];
3944 [label="if ((needsAttributes & EmbeddableAttributes.IsUnmanagedAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyIsUnmanagedAttribute,\n                    diagnostics,\n                    AttributeDescription.IsUnmanagedAttribute,\n                    createParameterlessEmbeddedAttributeSymbol);\n            } 858432"];
3945 [label="if ((needsAttributes & EmbeddableAttributes.NullableAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableAttribute,\n                    CreateNullableAttributeSymbol);\n            } 858433"];
3946 [label="if ((needsAttributes & EmbeddableAttributes.NullableContextAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullableContextAttribute,\n                    diagnostics,\n                    AttributeDescription.NullableContextAttribute,\n                    CreateNullableContextAttributeSymbol);\n            } 858434"];
3947 [label="if ((needsAttributes & EmbeddableAttributes.NullablePublicOnlyAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNullablePublicOnlyAttribute,\n                    diagnostics,\n                    AttributeDescription.NullablePublicOnlyAttribute,\n                    CreateNullablePublicOnlyAttributeSymbol);\n            } 858435"];
3948 [label="if ((needsAttributes & EmbeddableAttributes.NativeIntegerAttribute) != 0)\n            {\n                CreateAttributeIfNeeded(\n                    ref _lazyNativeIntegerAttribute,\n                    diagnostics,\n                    AttributeDescription.NativeIntegerAttribute,\n                    CreateNativeIntegerAttributeSymbol);\n            } 858436"];
3949 [label="return new SynthesizedAttributeData(\n                _lazyEmbeddedAttribute.Constructors[0],\n                ImmutableArray<TypedConstant>.Empty,\n                ImmutableArray<KeyValuePair<string, TypedConstant>>.Empty); 858437"];
3950 [label="return new SynthesizedAttributeData(\n                _lazyEmbeddedAttribute.Constructors[0],\n                ImmutableArray<TypedConstant>.Empty,\n                ImmutableArray<KeyValuePair<string, TypedConstant>>.Empty); 858438"];
3951 [label="object reference; 858439"];
3952 [label="Cci.INamedTypeReference typeRef; 858440"];
3953 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 858441"];
3954 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858442"];
3955 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858443"];
3956 [label="IsGenericType(container) 858444"];
3957 [label="param IsGenericType(NamedTypeSymbol toCheck) 858445"];
3958 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858446"];
3959 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858447"];
3960 [label="return false; 858448"];
3961 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858449"];
3962 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858450"];
3963 [label="Debug.Assert(symbol.IsDefinition); 858451"];
3964 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 858452"];
3965 [label="return _referenceManager; 858453"];
3966 [label="GetBoundReferenceManager(); 858454"];
3967 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 858455"];
3968 [label="param GetBoundReferenceManager(this) 858456"];
3969 [label="GetBoundReferenceManager(); 858457"];
3970 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 858458"];
3971 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 858459"];
3972 [label="param SynthesizeNullableAttributeIfNecessary(this) 858460"];
3973 [label="param GetExportedTypes(DiagnosticBag diagnostics) 858461"];
3974 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 858462"];
3975 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 858463"];
3976 [label="var modules = sourceAssembly.Modules; 858464"];
3977 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 858465"];
3978 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 858466"];
3979 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 858467"];
3980 [label="sourceAssembly.DeclaringCompilation.Options 858468"];
3981 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 858469"];
3982 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 858470"];
3983 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 858471"];
3984 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 858472"];
3985 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 858473"];
3986 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 858474"];
3987 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 858475"];
3988 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 858476"];
3989 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 858477"];
3990 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 858478"];
3991 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 858479"];
3992 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 858480"];
3993 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 858481"];
3994 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 858482"];
3995 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 858483"];
3996 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 858484"];
3997 [label="return seenTopLevelForwardedTypes; 858485"];
3998 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 858486"];
3999 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 858487"];
4000 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 858488"];
4001 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 858489"];
4002 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 858490"];
4003 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 858491"];
4004 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 858492"];
4005 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 858493"];
4006 [label="param Translate(SyntaxNode syntaxNodeOpt) 858494"];
4007 [label="param Translate(DiagnosticBag diagnostics) 858495"];
4008 [label="param Translate(bool fromImplements = false) 858496"];
4009 [label="param Translate(bool needDeclaration = false) 858497"];
4010 [label="Debug.Assert(diagnostics != null); 858498"];
4011 [label="Debug.Assert(diagnostics != null); 858499"];
4012 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858500"];
4013 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858501"];
4014 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 858502"];
4015 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858503"];
4016 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858504"];
4017 [label="object reference; 858505"];
4018 [label="Cci.INamedTypeReference typeRef; 858506"];
4019 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 858507"];
4020 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858508"];
4021 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858509"];
4022 [label="IsGenericType(container) 858510"];
4023 [label="param IsGenericType(NamedTypeSymbol toCheck) 858511"];
4024 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858512"];
4025 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858513"];
4026 [label="return false; 858514"];
4027 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858515"];
4028 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858516"];
4029 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 858517"];
4030 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858518"];
4031 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 858519"];
4032 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 858520"];
4033 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858521"];
4034 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 858522"];
4035 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 858523"];
4036 [label="object reference; 858524"];
4037 [label="Cci.INamedTypeReference typeRef; 858525"];
4038 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 858526"];
4039 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858527"];
4040 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858528"];
4041 [label="IsGenericType(container) 858529"];
4042 [label="param IsGenericType(NamedTypeSymbol toCheck) 858530"];
4043 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858531"];
4044 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858532"];
4045 [label="return false; 858533"];
4046 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858534"];
4047 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 858535"];
4048 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 858536"];
4049 [label="GetBoundReferenceManager() 858537"];
4050 [label="GetBoundReferenceManager(); 858538"];
4051 [label="Debug.Assert(result.SpecialType == specialType); 858539"];
4052 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 858540"];
4053 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 858541"];
4054 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 858542"];
4055 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 858543"];
4056 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 858544"];
4057 [label="bool typeIsGeneric = IsGenericType(container); 858545"];
4058 [label="IsGenericType(container) 858546"];
4059 [label="param IsGenericType(NamedTypeSymbol toCheck) 858547"];
4060 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858548"];
4061 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858549"];
4062 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858550"];
4063 [label="toCheck = toCheck.ContainingType; 858551"];
4064 [label="return false; 858552"];
4065 [label="bool typeIsGeneric = IsGenericType(container); 858553"];
4066 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 858554"];
4067 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 858555"];
4068 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 858556"];
4069 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 858557"];
4070 [label="param MustBeWrapped(ParameterSymbol param) 858558"];
4071 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 858559"];
4072 [label="var container = param.ContainingSymbol; 858560"];
4073 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 858561"];
4074 [label="ContainerIsGeneric(container) 858562"];
4075 [label="param ContainerIsGeneric(Symbol container) 858563"];
4076 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858564"];
4077 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858565"];
4078 [label="IsGenericType(container.ContainingType) 858566"];
4079 [label="param IsGenericType(NamedTypeSymbol toCheck) 858567"];
4080 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858568"];
4081 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858569"];
4082 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858570"];
4083 [label="toCheck = toCheck.ContainingType; 858571"];
4084 [label="return false; 858572"];
4085 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858573"];
4086 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858574"];
4087 [label="param MustBeWrapped(ParameterSymbol param) 858575"];
4088 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 858576"];
4089 [label="var container = param.ContainingSymbol; 858577"];
4090 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 858578"];
4091 [label="ContainerIsGeneric(container) 858579"];
4092 [label="param ContainerIsGeneric(Symbol container) 858580"];
4093 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858581"];
4094 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858582"];
4095 [label="IsGenericType(container.ContainingType) 858583"];
4096 [label="param IsGenericType(NamedTypeSymbol toCheck) 858584"];
4097 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858585"];
4098 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 858586"];
4099 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858587"];
4100 [label="toCheck = toCheck.ContainingType; 858588"];
4101 [label="return false; 858589"];
4102 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858590"];
4103 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 858591"];
4104 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 858592"];
4105 [label="toCheck = toCheck.ContainingType; 858593"];
4106 [label="Debug.Assert(symbol.IsDefinition); 858594"];
4107 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 858595"];
4108 [label="return _referenceManager; 858596"];
4109 [label="GetBoundReferenceManager(); 858597"];
4110 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 858598"];
4111 [label="param GetBoundReferenceManager(this) 858599"];
4112 [label="GetBoundReferenceManager(); 858600"];
4113 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 858601"];
4114 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 858602"];
4115 [label="param SynthesizeNullableAttributeIfNecessary(this) 858603"];
4116 [label="var result = new MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation>(); 858604"];
4117 [label="var namespacesAndTypesToProcess = new Stack<NamespaceOrTypeSymbol>(); 858605"];
4118 [label="Location location = null; 858606"];
4119 [label="while (namespacesAndTypesToProcess.Count > 0)\n            {\n                NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop();\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                }\n            } 858607"];
4120 [label="param GetSmallestSourceLocationOrNull(this) 858608"];
4121 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 858609"];
4122 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 858610"];
4123 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 858611"];
4124 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 858612"];
4125 [label="param AddSymbolLocation(Cci.IDefinition definition) 858613"];
4126 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 858614"];
4127 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 858615"];
4128 [label="param GetSmallestSourceLocationOrNull(this) 858616"];
4129 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 858617"];
4130 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 858618"];
4131 [label="param AddSymbolLocation(Cci.IDefinition definition) 858619"];
4132 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 858620"];
4133 [label="param GetSmallestSourceLocationOrNull(this) 858621"];
4134 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 858622"];
4135 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 858623"];
4136 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 858624"];
4137 [label="param AddSymbolLocation(MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation> result) 858625"];
4138 [label="param AddSymbolLocation(Cci.IDefinition definition) 858626"];
4139 [label="if (doc != null)\n            {\n                result.Add(doc,\n                           new Cci.DefinitionWithLocation(\n                               definition,\n                               span.StartLinePosition.Line,\n                               span.StartLinePosition.Character,\n                               span.EndLinePosition.Line,\n                               span.EndLinePosition.Character));\n            } 858627"];
4140 [label="return result; 858628"];
4141 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 858629"];
4142 [label="return _referenceManager; 858630"];
4143 [label="GetBoundReferenceManager(); 858631"];
4144 [label="CustomAssert.True(emitResult.Success, 'Diagnostics:\\r\\n' + string.Join('\\r\\n', emitResult.Diagnostics.Select(d => d.ToString()))); 858632"];
4145 [label="CustomAssert.True(emitResult.Success, 'Diagnostics:\\r\\n' + string.Join('\\r\\n', emitResult.Diagnostics.Select(d => d.ToString()))); 858633"];
4146 [label="if (expectedWarnings != null)\n            {\n                emitResult.Diagnostics.Verify(expectedWarnings);\n            } 858634"];
4147 [label="if (expectedWarnings != null)\n            {\n                emitResult.Diagnostics.Verify(expectedWarnings);\n            } 858635"];
4148 [label="return peStream.ToImmutable(); 858636"];
4149 [label="return peStream.ToImmutable(); 858637"];
4150 [label="if (comp.Options.OutputKind == OutputKind.NetModule)\n            {\n                return ModuleMetadata.CreateFromImage(image).GetReference(display: comp.MakeSourceModuleName());\n            }\n            else\n            {\n                return AssemblyMetadata.CreateFromImage(image).GetReference(aliases: aliases, embedInteropTypes: embedInteropTypes, display: comp.MakeSourceAssemblySimpleName());\n            } 858638"];
4151 [label="comp.Options 858639"];
4152 [label="get { return _options; } 858640"];
4153 [label="return AssemblyMetadata.CreateFromImage(image).GetReference(aliases: aliases, embedInteropTypes: embedInteropTypes, display: comp.MakeSourceAssemblySimpleName()); 858641"];
4154 [label="return AssemblyMetadata.CreateFromImage(image).GetReference(aliases: aliases, embedInteropTypes: embedInteropTypes, display: comp.MakeSourceAssemblySimpleName()); 858642"];
4155 [label="return AssemblyMetadata.CreateFromImage(image).GetReference(aliases: aliases, embedInteropTypes: embedInteropTypes, display: comp.MakeSourceAssemblySimpleName()); 858643"];
4156 [label="return AssemblyMetadata.CreateFromImage(image).GetReference(aliases: aliases, embedInteropTypes: embedInteropTypes, display: comp.MakeSourceAssemblySimpleName()); 858644"];
4157 [label="return AssemblyMetadata.CreateFromImage(image).GetReference(aliases: aliases, embedInteropTypes: embedInteropTypes, display: comp.MakeSourceAssemblySimpleName()); 858645"];
4158 [label="var compWithRef = CreateEmptyCompilation('', references: new[] { MscorlibRef, refImage },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 858646"];
4159 [label="MscorlibRef 858647"];
4160 [label="s_mscorlibRef.Value 858648"];
4161 [label="var compWithRef = CreateEmptyCompilation('', references: new[] { MscorlibRef, refImage },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 858649"];
4162 [label="new[] { MscorlibRef, refImage } 858650"];
4163 [label="new[] { MscorlibRef, refImage } 858651"];
4164 [label="var compWithRef = CreateEmptyCompilation('', references: new[] { MscorlibRef, refImage },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 858652"];
4165 [label="var compWithRef = CreateEmptyCompilation('', references: new[] { MscorlibRef, refImage },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 858653"];
4166 [label="var compWithRef = CreateEmptyCompilation('', references: new[] { MscorlibRef, refImage },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 858654"];
4167 [label="new CSharpTestSource(source) 858655"];
4168 [label="param CSharpTestSource(this) 858656"];
4169 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 858657"];
4170 [label="=> CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 858658"];
4171 [label="skipUsesIsNullable 858659"];
4172 [label="null 858660"];
4173 [label="experimentalFeature: null 858661"];
4174 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 858662"];
4175 [label="param CreateCompilationCore(bool skipUsesIsNullable) 858663"];
4176 [label="param CreateCompilationCore(MessageID? experimentalFeature) 858664"];
4177 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 858665"];
4178 [label="var stream = new MemoryStream(); 858666"];
4179 [label="var root = tree.GetRoot(); 858667"];
4180 [label="root.SerializeTo(stream); 858668"];
4181 [label="root.SerializeTo(stream); 858669"];
4182 [label="root.SerializeTo(stream); 858670"];
4183 [label="stream.Position = 0; 858671"];
4184 [label="stream.Position 858672"];
4185 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 858673"];
4186 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 858674"];
4187 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 858675"];
4188 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 858676"];
4189 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 858677"];
4190 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 858678"];
4191 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 858679"];
4192 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 858680"];
4193 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 858681"];
4194 [label="param ValidateIOperations(Func<Compilation> createCompilation) 858682"];
4195 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 858683"];
4196 [label="return; 858684"];
4197 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 858685"];
4198 [label="var compilation = createCompilationLambda(); 858686"];
4199 [label="return Guid.NewGuid().ToString('D'); 858687"];
4200 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 858688"];
4201 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 858689"];
4202 [label="param Create(CSharpCompilation? previousSubmission) 858690"];
4203 [label="param Create(Type? returnType) 858691"];
4204 [label="param Create(Type? hostObjectType) 858692"];
4205 [label="param Create(bool isSubmission) 858693"];
4206 [label="RoslynDebug.Assert(options != null); 858694"];
4207 [label="RoslynDebug.Assert(options != null); 858695"];
4208 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 858696"];
4209 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 858697"];
4210 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 858698"];
4211 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 858699"];
4212 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 858700"];
4213 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 858701"];
4214 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 858702"];
4215 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 858703"];
4216 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 858704"];
4217 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 858705"];
4218 [label="param SyntaxAndDeclarationManager(bool isSubmission) 858706"];
4219 [label="param SyntaxAndDeclarationManager(State state) 858707"];
4220 [label="param SyntaxAndDeclarationManager(this) 858708"];
4221 [label="externalSyntaxTrees 858709"];
4222 [label="messageProvider 858710"];
4223 [label="isSubmission 858711"];
4224 [label="param SyntaxAndDeclarationManager(this) 858712"];
4225 [label="_lazyState 858713"];
4226 [label="_lazyState 858714"];
4227 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 858715"];
4228 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 858716"];
4229 [label="param CSharpCompilation(Type? submissionReturnType) 858717"];
4230 [label="param CSharpCompilation(Type? hostObjectType) 858718"];
4231 [label="param CSharpCompilation(bool isSubmission) 858719"];
4232 [label="param CSharpCompilation(ReferenceManager? referenceManager) 858720"];
4233 [label="param CSharpCompilation(bool reuseReferenceManager) 858721"];
4234 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 858722"];
4235 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 858723"];
4236 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 858724"];
4237 [label="param CSharpCompilation(this) 858725"];
4238 [label="previousSubmission 858726"];
4239 [label="submissionReturnType 858727"];
4240 [label="hostObjectType 858728"];
4241 [label="isSubmission 858729"];
4242 [label="referenceManager 858730"];
4243 [label="reuseReferenceManager 858731"];
4244 [label="syntaxAndDeclarations 858732"];
4245 [label="semanticModelProvider 858733"];
4246 [label="eventQueue 858734"];
4247 [label="param CSharpCompilation(this) 858735"];
4248 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 858736"];
4249 [label="param CSharpCompilation(Type? submissionReturnType) 858737"];
4250 [label="param CSharpCompilation(Type? hostObjectType) 858738"];
4251 [label="param CSharpCompilation(bool isSubmission) 858739"];
4252 [label="param CSharpCompilation(ReferenceManager? referenceManager) 858740"];
4253 [label="param CSharpCompilation(bool reuseReferenceManager) 858741"];
4254 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 858742"];
4255 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 858743"];
4256 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 858744"];
4257 [label="param CSharpCompilation(this) 858745"];
4258 [label="isSubmission 858746"];
4259 [label="semanticModelProvider 858747"];
4260 [label="eventQueue 858748"];
4261 [label="param CSharpCompilation(this) 858749"];
4262 [label="_options 858750"];
4263 [label="_globalImports 858751"];
4264 [label="_previousSubmissionImports 858752"];
4265 [label="_globalNamespaceAlias 858753"];
4266 [label="_scriptClass 858754"];
4267 [label="_lazyHostObjectTypeSymbol 858755"];
4268 [label="_lazyImportInfos 858756"];
4269 [label="_conversions 858757"];
4270 [label="_anonymousTypeManager 858758"];
4271 [label="_lazyGlobalNamespace 858759"];
4272 [label="builtInOperators 858760"];
4273 [label="_lazyAssemblySymbol 858761"];
4274 [label="_referenceManager 858762"];
4275 [label="_syntaxAndDeclarations 858763"];
4276 [label="_lazyEntryPoint 858764"];
4277 [label="_lazyEmitNullablePublicOnly 858765"];
4278 [label="_lazyCompilationUnitCompletedTrees 858766"];
4279 [label="NullableAnalysisData 858767"];
4280 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 858768"];
4281 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 858769"];
4282 [label="_externAliasTargets 858770"];
4283 [label="_moduleInitializerMethods 858771"];
4284 [label="_binderFactories 858772"];
4285 [label="_ignoreAccessibilityBinderFactories 858773"];
4286 [label="_lazyDeclarationDiagnostics 858774"];
4287 [label="_declarationDiagnosticsFrozen 858775"];
4288 [label="new DiagnosticBag() 858776"];
4289 [label="_additionalCodegenWarnings = new DiagnosticBag() 858777"];
4290 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 858778"];
4291 [label="this.builtInOperators = new BuiltInOperators(this); 858779"];
4292 [label="this.builtInOperators = new BuiltInOperators(this); 858780"];
4293 [label="new BuiltInOperators(this) 858781"];
4294 [label="param BuiltInOperators(CSharpCompilation compilation) 858782"];
4295 [label="param BuiltInOperators(this) 858783"];
4296 [label="_compilation 858784"];
4297 [label="_builtInUnaryOperators 858785"];
4298 [label="_builtInOperators 858786"];
4299 [label="_compilation 858787"];
4300 [label="this.builtInOperators 858788"];
4301 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 858789"];
4302 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 858790"];
4303 [label="LanguageVersion? result = null; 858791"];
4304 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 858792"];
4305 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 858793"];
4306 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 858794"];
4307 [label="this.LanguageVersion 858795"];
4308 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 858796"];
4309 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858797"];
4310 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858798"];
4311 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858799"];
4312 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858800"];
4313 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858801"];
4314 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858802"];
4315 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 858803"];
4316 [label="this.Options 858804"];
4317 [label="get\n            {\n                return _options;\n            } 858805"];
4318 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 858806"];
4319 [label="_syntaxAndDeclarations 858807"];
4320 [label="Debug.Assert(_lazyAssemblySymbol is null); 858808"];
4321 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 858809"];
4322 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 858810"];
4323 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 858811"];
4324 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 858812"];
4325 [label="int i = 0; 858813"];
4326 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 858814"];
4327 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 858815"];
4328 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 858816"];
4329 [label="i++; 858817"];
4330 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 858818"];
4331 [label="var scriptClassName = this.ScriptClassName; 858819"];
4332 [label="var resolver = this.Resolver; 858820"];
4333 [label="var messageProvider = this.MessageProvider; 858821"];
4334 [label="var isSubmission = this.IsSubmission; 858822"];
4335 [label="this.PreviousSubmission 858823"];
4336 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 858824"];
4337 [label="param CSharpCompilation(Type? submissionReturnType) 858825"];
4338 [label="param CSharpCompilation(Type? hostObjectType) 858826"];
4339 [label="previousSubmission 858827"];
4340 [label="submissionReturnType 858828"];
4341 [label="hostObjectType 858829"];
4342 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 858830"];
4343 [label="param CSharpCompilation(Type? submissionReturnType) 858831"];
4344 [label="param CSharpCompilation(Type? hostObjectType) 858832"];
4345 [label="_compilation 858833"];
4346 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 858834"];
4347 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858835"];
4348 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858836"];
4349 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858837"];
4350 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858838"];
4351 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858839"];
4352 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 858840"];
4353 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 858841"];
4354 [label="Debug.Assert(_lazyAssemblySymbol is null); 858842"];
4355 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 858843"];
4356 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 858844"];
4357 [label="IsNullableEnabled(compilation) 858845"];
4358 [label="compilation.SyntaxTrees 858846"];
4359 [label="_syntaxAndDeclarations.GetLazyState() 858847"];
4360 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 858848"];
4361 [label="param CreateState(SourceReferenceResolver resolver) 858849"];
4362 [label="param CreateState(CommonMessageProvider messageProvider) 858850"];
4363 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 858851"];
4364 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 858852"];
4365 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 858853"];
4366 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 858854"];
4367 [label="var sourceCodeKind = tree.Options.Kind; 858855"];
4368 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 858856"];
4369 [label="OrdinalMap 858857"];
4370 [label="LoadDirectiveMap 858858"];
4371 [label="LoadedSyntaxTreeMap 858859"];
4372 [label="RootNamespaces 858860"];
4373 [label="DeclarationTable 858861"];
4374 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 858862"];
4375 [label="var options = (CSharpParseOptions)trees[0].Options; 858863"];
4376 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 858864"];
4377 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 858865"];
4378 [label="compWithRef.SourceModule 858866"];
4379 [label="get\n            {\n                return Assembly.Modules[0];\n            } 858867"];
4380 [label="Assembly 858868"];
4381 [label="SourceAssembly 858869"];
4382 [label="GetBoundReferenceManager() 858870"];
4383 [label="param GetBoundReferenceManager(this) 858871"];
4384 [label="Debug.Assert(_lazyAssemblySymbol is object); 858872"];
4385 [label="GetBoundReferenceManager(); 858873"];
4386 [label="return Assembly.Modules[0]; 858874"];
4387 [label="var globalNamespace = compWithRef.SourceModule.GetReferencedAssemblySymbols().Last().GlobalNamespace; 858875"];
4388 [label="AssertEx.Equal(\n                new[] { '<Module>', 'InternalStruct', 'Microsoft', 'System' },\n                globalNamespace.GetMembers().Select(m => m.ToDisplayString())); 858876"];
4389 [label="new[] { '<Module>', 'InternalStruct', 'Microsoft', 'System' } 858877"];
4390 [label="AssertEx.Equal(\n                new[] { '<Module>', 'InternalStruct', 'Microsoft', 'System' },\n                globalNamespace.GetMembers().Select(m => m.ToDisplayString())); 858878"];
4391 [label="'ROSLYN_DIFFTOOL' 858879"];
4392 [label="Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 858880"];
4393 [label="s_diffToolPath = Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 858881"];
4394 [label="AssertEx.Equal(\n                new[] { '<Module>', 'InternalStruct', 'Microsoft', 'System' },\n                globalNamespace.GetMembers().Select(m => m.ToDisplayString())) 858882"];
4395 [label="param Equal(IEnumerable<T> expected) 858883"];
4396 [label="param Equal(IEnumerable<T> actual) 858884"];
4397 [label="param Equal(IEqualityComparer<T> comparer = null) 858885"];
4398 [label="param Equal(string message = null) 858886"];
4399 [label="param Equal(string itemSeparator = null) 858887"];
4400 [label="param Equal(Func<T, string> itemInspector = null) 858888"];
4401 [label="param Equal(string expectedValueSourcePath = null) 858889"];
4402 [label="param Equal(int expectedValueSourceLine = 0) 858890"];
4403 [label="var toReturn = true; 858891"];
4404 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 858892"];
4405 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 858893"];
4406 [label="CustomAssert.NotNull(actual); 858894"];
4407 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 858895"];
4408 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 858896"];
4409 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 858897"];
4410 [label="SequenceEqual(expected, actual, comparer) 858898"];
4411 [label="param SequenceEqual(IEnumerable<T> expected) 858899"];
4412 [label="param SequenceEqual(IEnumerable<T> actual) 858900"];
4413 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 858901"];
4414 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 858902"];
4415 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 858903"];
4416 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 858904"];
4417 [label="var enumerator1 = expected.GetEnumerator(); 858905"];
4418 [label="var enumerator2 = actual.GetEnumerator(); 858906"];
4419 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 858907"];
4420 [label="var hasNext1 = enumerator1.MoveNext(); 858908"];
4421 [label="var hasNext2 = enumerator2.MoveNext(); 858909"];
4422 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 858910"];
4423 [label="if (!hasNext1)\n                {\n                    break;\n                } 858911"];
4424 [label="var value1 = enumerator1.Current; 858912"];
4425 [label="var value2 = enumerator2.Current; 858913"];
4426 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 858914"];
4427 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 858915"];
4428 [label="comparer != null 858916"];
4429 [label="new AssertEqualityComparer<T>() 858917"];
4430 [label="param AssertEqualityComparer(this) 858918"];
4431 [label="s_instance = new AssertEqualityComparer<T>() 858919"];
4432 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 858920"];
4433 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 858921"];
4434 [label="AssertEqualityComparer<T>.Equals(value1, value2) 858922"];
4435 [label="param Equals(T left) 858923"];
4436 [label="param Equals(T right) 858924"];
4437 [label="return s_instance.Equals(left, right); 858925"];
4438 [label="return s_instance.Equals(left, right); 858926"];
4439 [label="s_instance.Equals(left, right) 858927"];
4440 [label="param Equals(T x) 858928"];
4441 [label="param Equals(T y) 858929"];
4442 [label="param Equals(this) 858930"];
4443 [label="CanBeNull() 858931"];
4444 [label="var type = typeof(T); 858932"];
4445 [label="return !type.GetTypeInfo().IsValueType ||\n                    (type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)); 858933"];
4446 [label="if (CanBeNull())\n                {\n                    if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    }\n\n                    if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    }\n                } 858934"];
4447 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 858935"];
4448 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 858936"];
4449 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 858937"];
4450 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 858938"];
4451 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 858939"];
4452 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 858940"];
4453 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 858941"];
4454 [label="if (x is IEquatable<T> equatable)\n                {\n                    return equatable.Equals(y);\n                } 858942"];
4455 [label="return equatable.Equals(y); 858943"];
4456 [label="return true; 858944"];
4457 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 858945"];
4458 [label="return true; 858946"];
4459 [label="AssertEx.Equal(\n                new[] { '<Module>', 'InternalStruct', 'Microsoft', 'System' },\n                globalNamespace.GetMembers().Select(m => m.ToDisplayString())); 858947"];
4460 [label="AssertEx.Equal(new[] { 'Microsoft.CodeAnalysis' }, globalNamespace.GetMember<NamespaceSymbol>('Microsoft').GetMembers().Select(m => m.ToDisplayString())); 858948"];
4461 [label="new[] { 'Microsoft.CodeAnalysis' } 858949"];
4462 [label="AssertEx.Equal(new[] { 'Microsoft.CodeAnalysis' }, globalNamespace.GetMember<NamespaceSymbol>('Microsoft').GetMembers().Select(m => m.ToDisplayString())); 858950"];
4463 [label="globalNamespace.GetMember<NamespaceSymbol>('Microsoft') 858951"];
4464 [label="param GetMember(this NamespaceOrTypeSymbol symbol) 858952"];
4465 [label="param GetMember(string qualifiedName) 858953"];
4466 [label="return (T)symbol.GetMember(qualifiedName); 858954"];
4467 [label="return (T)symbol.GetMember(qualifiedName); 858955"];
4468 [label="symbol.GetMember(qualifiedName) 858956"];
4469 [label="param GetMember(this NamespaceOrTypeSymbol container) 858957"];
4470 [label="param GetMember(string qualifiedName) 858958"];
4471 [label="NamespaceOrTypeSymbol lastContainer; 858959"];
4472 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 858960"];
4473 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 858961"];
4474 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 858962"];
4475 [label="GetMembers(container, qualifiedName, out lastContainer) 858963"];
4476 [label="param GetMembers(NamespaceOrTypeSymbol container) 858964"];
4477 [label="param GetMembers(string qualifiedName) 858965"];
4478 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 858966"];
4479 [label="var parts = SplitMemberName(qualifiedName); 858967"];
4480 [label="SplitMemberName(qualifiedName) 858968"];
4481 [label="param SplitMemberName(string name) 858969"];
4482 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 858970"];
4483 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 858971"];
4484 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 858972"];
4485 [label="var builder = ArrayBuilder<string>.GetInstance(); 858973"];
4486 [label="string part = name; 858974"];
4487 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 858975"];
4488 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 858976"];
4489 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 858977"];
4490 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 858978"];
4491 [label="builder.ReverseContents(); 858979"];
4492 [label="return builder.ToImmutableAndFree(); 858980"];
4493 [label="lastContainer = container; 858981"];
4494 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 858982"];
4495 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 858983"];
4496 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 858984"];
4497 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 858985"];
4498 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 858986"];
4499 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 858987"];
4500 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 858988"];
4501 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 858989"];
4502 [label="return members.Single(); 858990"];
4503 [label="AssertEx.Equal(new[] { 'Microsoft.CodeAnalysis' }, globalNamespace.GetMember<NamespaceSymbol>('Microsoft').GetMembers().Select(m => m.ToDisplayString())) 858991"];
4504 [label="param Equal(IEnumerable<T> expected) 858992"];
4505 [label="param Equal(IEnumerable<T> actual) 858993"];
4506 [label="param Equal(IEqualityComparer<T> comparer = null) 858994"];
4507 [label="param Equal(string message = null) 858995"];
4508 [label="param Equal(string itemSeparator = null) 858996"];
4509 [label="param Equal(Func<T, string> itemInspector = null) 858997"];
4510 [label="param Equal(string expectedValueSourcePath = null) 858998"];
4511 [label="param Equal(int expectedValueSourceLine = 0) 858999"];
4512 [label="var toReturn = true; 859000"];
4513 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 859001"];
4514 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 859002"];
4515 [label="CustomAssert.NotNull(actual); 859003"];
4516 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859004"];
4517 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859005"];
4518 [label="SequenceEqual(expected, actual, comparer) 859006"];
4519 [label="param SequenceEqual(IEnumerable<T> expected) 859007"];
4520 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 859008"];
4521 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859009"];
4522 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859010"];
4523 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859011"];
4524 [label="var enumerator1 = expected.GetEnumerator(); 859012"];
4525 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 859013"];
4526 [label="var hasNext1 = enumerator1.MoveNext(); 859014"];
4527 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 859015"];
4528 [label="if (!hasNext1)\n                {\n                    break;\n                } 859016"];
4529 [label="var value1 = enumerator1.Current; 859017"];
4530 [label="var value2 = enumerator2.Current; 859018"];
4531 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859019"];
4532 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859020"];
4533 [label="comparer != null 859021"];
4534 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859022"];
4535 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859023"];
4536 [label="AssertEqualityComparer<T>.Equals(value1, value2) 859024"];
4537 [label="param Equals(T left) 859025"];
4538 [label="param Equals(T right) 859026"];
4539 [label="return s_instance.Equals(left, right); 859027"];
4540 [label="return s_instance.Equals(left, right); 859028"];
4541 [label="s_instance.Equals(left, right) 859029"];
4542 [label="param Equals(T x) 859030"];
4543 [label="param Equals(T y) 859031"];
4544 [label="param Equals(this) 859032"];
4545 [label="CanBeNull() 859033"];
4546 [label="var type = typeof(T); 859034"];
4547 [label="return !type.GetTypeInfo().IsValueType ||\n                    (type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)); 859035"];
4548 [label="if (CanBeNull())\n                {\n                    if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    }\n\n                    if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    }\n                } 859036"];
4549 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 859037"];
4550 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 859038"];
4551 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 859039"];
4552 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 859040"];
4553 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859041"];
4554 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859042"];
4555 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859043"];
4556 [label="if (x is IEquatable<T> equatable)\n                {\n                    return equatable.Equals(y);\n                } 859044"];
4557 [label="return equatable.Equals(y); 859045"];
4558 [label="return true; 859046"];
4559 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859047"];
4560 [label="return true; 859048"];
4561 [label="AssertEx.Equal(new[] { 'Microsoft.CodeAnalysis' }, globalNamespace.GetMember<NamespaceSymbol>('Microsoft').GetMembers().Select(m => m.ToDisplayString())); 859049"];
4562 [label="AssertEx.Equal(\n                new[] { 'Microsoft.CodeAnalysis.EmbeddedAttribute' },\n                globalNamespace.GetMember<NamespaceSymbol>('Microsoft.CodeAnalysis').GetMembers().Select(m => m.ToDisplayString())); 859050"];
4563 [label="new[] { 'Microsoft.CodeAnalysis.EmbeddedAttribute' } 859051"];
4564 [label="AssertEx.Equal(\n                new[] { 'Microsoft.CodeAnalysis.EmbeddedAttribute' },\n                globalNamespace.GetMember<NamespaceSymbol>('Microsoft.CodeAnalysis').GetMembers().Select(m => m.ToDisplayString())); 859052"];
4565 [label="globalNamespace.GetMember<NamespaceSymbol>('Microsoft.CodeAnalysis') 859053"];
4566 [label="param GetMember(this NamespaceOrTypeSymbol symbol) 859054"];
4567 [label="param GetMember(string qualifiedName) 859055"];
4568 [label="return (T)symbol.GetMember(qualifiedName); 859056"];
4569 [label="return (T)symbol.GetMember(qualifiedName); 859057"];
4570 [label="symbol.GetMember(qualifiedName) 859058"];
4571 [label="param GetMember(this NamespaceOrTypeSymbol container) 859059"];
4572 [label="param GetMember(string qualifiedName) 859060"];
4573 [label="NamespaceOrTypeSymbol lastContainer; 859061"];
4574 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859062"];
4575 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859063"];
4576 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859064"];
4577 [label="GetMembers(container, qualifiedName, out lastContainer) 859065"];
4578 [label="param GetMembers(NamespaceOrTypeSymbol container) 859066"];
4579 [label="param GetMembers(string qualifiedName) 859067"];
4580 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 859068"];
4581 [label="var parts = SplitMemberName(qualifiedName); 859069"];
4582 [label="SplitMemberName(qualifiedName) 859070"];
4583 [label="param SplitMemberName(string name) 859071"];
4584 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859072"];
4585 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859073"];
4586 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859074"];
4587 [label="var builder = ArrayBuilder<string>.GetInstance(); 859075"];
4588 [label="string part = name; 859076"];
4589 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 859077"];
4590 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 859078"];
4591 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 859079"];
4592 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 859080"];
4593 [label="builder.ReverseContents(); 859081"];
4594 [label="return builder.ToImmutableAndFree(); 859082"];
4595 [label="lastContainer = container; 859083"];
4596 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 859084"];
4597 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 859085"];
4598 [label="var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]); 859086"];
4599 [label="var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]); 859087"];
4600 [label="lastContainer.GetMember(parts[i]) 859088"];
4601 [label="param GetMember(this NamespaceOrTypeSymbol container) 859089"];
4602 [label="param GetMember(string qualifiedName) 859090"];
4603 [label="NamespaceOrTypeSymbol lastContainer; 859091"];
4604 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 859092"];
4605 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859093"];
4606 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859094"];
4607 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859095"];
4608 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859096"];
4609 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859097"];
4610 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859098"];
4611 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859099"];
4612 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859100"];
4613 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859101"];
4614 [label="if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                } 859102"];
4615 [label="if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                } 859103"];
4616 [label="lastContainer = nestedContainer; 859104"];
4617 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859105"];
4618 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859106"];
4619 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859107"];
4620 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859108"];
4621 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859109"];
4622 [label="AssertEx.Equal(\n                new[] { 'Microsoft.CodeAnalysis.EmbeddedAttribute' },\n                globalNamespace.GetMember<NamespaceSymbol>('Microsoft.CodeAnalysis').GetMembers().Select(m => m.ToDisplayString())) 859110"];
4623 [label="param Equal(IEnumerable<T> expected) 859111"];
4624 [label="param Equal(IEnumerable<T> actual) 859112"];
4625 [label="param Equal(IEqualityComparer<T> comparer = null) 859113"];
4626 [label="param Equal(string message = null) 859114"];
4627 [label="param Equal(string itemSeparator = null) 859115"];
4628 [label="param Equal(Func<T, string> itemInspector = null) 859116"];
4629 [label="param Equal(string expectedValueSourcePath = null) 859117"];
4630 [label="param Equal(int expectedValueSourceLine = 0) 859118"];
4631 [label="var toReturn = true; 859119"];
4632 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 859120"];
4633 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 859121"];
4634 [label="CustomAssert.NotNull(actual); 859122"];
4635 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859123"];
4636 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859124"];
4637 [label="SequenceEqual(expected, actual, comparer) 859125"];
4638 [label="param SequenceEqual(IEnumerable<T> expected) 859126"];
4639 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 859127"];
4640 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859128"];
4641 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859129"];
4642 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859130"];
4643 [label="var enumerator1 = expected.GetEnumerator(); 859131"];
4644 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 859132"];
4645 [label="var hasNext1 = enumerator1.MoveNext(); 859133"];
4646 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 859134"];
4647 [label="if (!hasNext1)\n                {\n                    break;\n                } 859135"];
4648 [label="var value1 = enumerator1.Current; 859136"];
4649 [label="var value2 = enumerator2.Current; 859137"];
4650 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859138"];
4651 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859139"];
4652 [label="comparer != null 859140"];
4653 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859141"];
4654 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859142"];
4655 [label="AssertEqualityComparer<T>.Equals(value1, value2) 859143"];
4656 [label="param Equals(T left) 859144"];
4657 [label="param Equals(T right) 859145"];
4658 [label="return s_instance.Equals(left, right); 859146"];
4659 [label="return s_instance.Equals(left, right); 859147"];
4660 [label="s_instance.Equals(left, right) 859148"];
4661 [label="param Equals(T x) 859149"];
4662 [label="param Equals(T y) 859150"];
4663 [label="param Equals(this) 859151"];
4664 [label="CanBeNull() 859152"];
4665 [label="var type = typeof(T); 859153"];
4666 [label="return !type.GetTypeInfo().IsValueType ||\n                    (type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)); 859154"];
4667 [label="if (CanBeNull())\n                {\n                    if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    }\n\n                    if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    }\n                } 859155"];
4668 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 859156"];
4669 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 859157"];
4670 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 859158"];
4671 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 859159"];
4672 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859160"];
4673 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859161"];
4674 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859162"];
4675 [label="if (x is IEquatable<T> equatable)\n                {\n                    return equatable.Equals(y);\n                } 859163"];
4676 [label="return equatable.Equals(y); 859164"];
4677 [label="return true; 859165"];
4678 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859166"];
4679 [label="return true; 859167"];
4680 [label="AssertEx.Equal(\n                new[] { 'Microsoft.CodeAnalysis.EmbeddedAttribute' },\n                globalNamespace.GetMember<NamespaceSymbol>('Microsoft.CodeAnalysis').GetMembers().Select(m => m.ToDisplayString())); 859168"];
4681 [label="AssertEx.Equal(\n                new[] { 'System.Runtime.CompilerServices' },\n                globalNamespace.GetMember<NamespaceSymbol>('System.Runtime').GetMembers().Select(m => m.ToDisplayString())); 859169"];
4682 [label="new[] { 'System.Runtime.CompilerServices' } 859170"];
4683 [label="AssertEx.Equal(\n                new[] { 'System.Runtime.CompilerServices' },\n                globalNamespace.GetMember<NamespaceSymbol>('System.Runtime').GetMembers().Select(m => m.ToDisplayString())); 859171"];
4684 [label="globalNamespace.GetMember<NamespaceSymbol>('System.Runtime') 859172"];
4685 [label="param GetMember(this NamespaceOrTypeSymbol symbol) 859173"];
4686 [label="param GetMember(string qualifiedName) 859174"];
4687 [label="return (T)symbol.GetMember(qualifiedName); 859175"];
4688 [label="return (T)symbol.GetMember(qualifiedName); 859176"];
4689 [label="symbol.GetMember(qualifiedName) 859177"];
4690 [label="param GetMember(this NamespaceOrTypeSymbol container) 859178"];
4691 [label="param GetMember(string qualifiedName) 859179"];
4692 [label="NamespaceOrTypeSymbol lastContainer; 859180"];
4693 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859181"];
4694 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859182"];
4695 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859183"];
4696 [label="GetMembers(container, qualifiedName, out lastContainer) 859184"];
4697 [label="param GetMembers(NamespaceOrTypeSymbol container) 859185"];
4698 [label="param GetMembers(string qualifiedName) 859186"];
4699 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 859187"];
4700 [label="var parts = SplitMemberName(qualifiedName); 859188"];
4701 [label="SplitMemberName(qualifiedName) 859189"];
4702 [label="param SplitMemberName(string name) 859190"];
4703 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859191"];
4704 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859192"];
4705 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859193"];
4706 [label="var builder = ArrayBuilder<string>.GetInstance(); 859194"];
4707 [label="string part = name; 859195"];
4708 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 859196"];
4709 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 859197"];
4710 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 859198"];
4711 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 859199"];
4712 [label="builder.ReverseContents(); 859200"];
4713 [label="return builder.ToImmutableAndFree(); 859201"];
4714 [label="lastContainer = container; 859202"];
4715 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 859203"];
4716 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 859204"];
4717 [label="var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]); 859205"];
4718 [label="var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]); 859206"];
4719 [label="lastContainer.GetMember(parts[i]) 859207"];
4720 [label="param GetMember(this NamespaceOrTypeSymbol container) 859208"];
4721 [label="param GetMember(string qualifiedName) 859209"];
4722 [label="NamespaceOrTypeSymbol lastContainer; 859210"];
4723 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 859211"];
4724 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859212"];
4725 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859213"];
4726 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859214"];
4727 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859215"];
4728 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859216"];
4729 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859217"];
4730 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859218"];
4731 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859219"];
4732 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859220"];
4733 [label="if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                } 859221"];
4734 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859222"];
4735 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859223"];
4736 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859224"];
4737 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859225"];
4738 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859226"];
4739 [label="AssertEx.Equal(\n                new[] { 'System.Runtime.CompilerServices' },\n                globalNamespace.GetMember<NamespaceSymbol>('System.Runtime').GetMembers().Select(m => m.ToDisplayString())) 859227"];
4740 [label="param Equal(IEnumerable<T> expected) 859228"];
4741 [label="param Equal(IEnumerable<T> actual) 859229"];
4742 [label="param Equal(IEqualityComparer<T> comparer = null) 859230"];
4743 [label="param Equal(string message = null) 859231"];
4744 [label="param Equal(string itemSeparator = null) 859232"];
4745 [label="param Equal(Func<T, string> itemInspector = null) 859233"];
4746 [label="param Equal(string expectedValueSourcePath = null) 859234"];
4747 [label="param Equal(int expectedValueSourceLine = 0) 859235"];
4748 [label="var toReturn = true; 859236"];
4749 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 859237"];
4750 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 859238"];
4751 [label="CustomAssert.NotNull(actual); 859239"];
4752 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859240"];
4753 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859241"];
4754 [label="SequenceEqual(expected, actual, comparer) 859242"];
4755 [label="param SequenceEqual(IEnumerable<T> expected) 859243"];
4756 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 859244"];
4757 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859245"];
4758 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859246"];
4759 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859247"];
4760 [label="var enumerator1 = expected.GetEnumerator(); 859248"];
4761 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 859249"];
4762 [label="var hasNext1 = enumerator1.MoveNext(); 859250"];
4763 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 859251"];
4764 [label="if (!hasNext1)\n                {\n                    break;\n                } 859252"];
4765 [label="var value1 = enumerator1.Current; 859253"];
4766 [label="var value2 = enumerator2.Current; 859254"];
4767 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859255"];
4768 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859256"];
4769 [label="comparer != null 859257"];
4770 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859258"];
4771 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859259"];
4772 [label="AssertEqualityComparer<T>.Equals(value1, value2) 859260"];
4773 [label="param Equals(T left) 859261"];
4774 [label="param Equals(T right) 859262"];
4775 [label="return s_instance.Equals(left, right); 859263"];
4776 [label="return s_instance.Equals(left, right); 859264"];
4777 [label="s_instance.Equals(left, right) 859265"];
4778 [label="param Equals(T x) 859266"];
4779 [label="param Equals(T y) 859267"];
4780 [label="param Equals(this) 859268"];
4781 [label="CanBeNull() 859269"];
4782 [label="var type = typeof(T); 859270"];
4783 [label="return !type.GetTypeInfo().IsValueType ||\n                    (type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)); 859271"];
4784 [label="if (CanBeNull())\n                {\n                    if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    }\n\n                    if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    }\n                } 859272"];
4785 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 859273"];
4786 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 859274"];
4787 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 859275"];
4788 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 859276"];
4789 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859277"];
4790 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859278"];
4791 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859279"];
4792 [label="if (x is IEquatable<T> equatable)\n                {\n                    return equatable.Equals(y);\n                } 859280"];
4793 [label="return equatable.Equals(y); 859281"];
4794 [label="return true; 859282"];
4795 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859283"];
4796 [label="return true; 859284"];
4797 [label="AssertEx.Equal(\n                new[] { 'System.Runtime.CompilerServices' },\n                globalNamespace.GetMember<NamespaceSymbol>('System.Runtime').GetMembers().Select(m => m.ToDisplayString())); 859285"];
4798 [label="AssertEx.Equal(\n                new[] { 'System.Runtime.CompilerServices.IsReadOnlyAttribute' },\n                globalNamespace.GetMember<NamespaceSymbol>('System.Runtime.CompilerServices').GetMembers().Select(m => m.ToDisplayString())); 859286"];
4799 [label="new[] { 'System.Runtime.CompilerServices.IsReadOnlyAttribute' } 859287"];
4800 [label="AssertEx.Equal(\n                new[] { 'System.Runtime.CompilerServices.IsReadOnlyAttribute' },\n                globalNamespace.GetMember<NamespaceSymbol>('System.Runtime.CompilerServices').GetMembers().Select(m => m.ToDisplayString())); 859288"];
4801 [label="globalNamespace.GetMember<NamespaceSymbol>('System.Runtime.CompilerServices') 859289"];
4802 [label="param GetMember(this NamespaceOrTypeSymbol symbol) 859290"];
4803 [label="param GetMember(string qualifiedName) 859291"];
4804 [label="return (T)symbol.GetMember(qualifiedName); 859292"];
4805 [label="return (T)symbol.GetMember(qualifiedName); 859293"];
4806 [label="symbol.GetMember(qualifiedName) 859294"];
4807 [label="param GetMember(this NamespaceOrTypeSymbol container) 859295"];
4808 [label="param GetMember(string qualifiedName) 859296"];
4809 [label="NamespaceOrTypeSymbol lastContainer; 859297"];
4810 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859298"];
4811 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859299"];
4812 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859300"];
4813 [label="GetMembers(container, qualifiedName, out lastContainer) 859301"];
4814 [label="param GetMembers(NamespaceOrTypeSymbol container) 859302"];
4815 [label="param GetMembers(string qualifiedName) 859303"];
4816 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 859304"];
4817 [label="var parts = SplitMemberName(qualifiedName); 859305"];
4818 [label="SplitMemberName(qualifiedName) 859306"];
4819 [label="param SplitMemberName(string name) 859307"];
4820 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859308"];
4821 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859309"];
4822 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859310"];
4823 [label="var builder = ArrayBuilder<string>.GetInstance(); 859311"];
4824 [label="string part = name; 859312"];
4825 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 859313"];
4826 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 859314"];
4827 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 859315"];
4828 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 859316"];
4829 [label="builder.ReverseContents(); 859317"];
4830 [label="return builder.ToImmutableAndFree(); 859318"];
4831 [label="lastContainer = container; 859319"];
4832 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 859320"];
4833 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 859321"];
4834 [label="var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]); 859322"];
4835 [label="var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]); 859323"];
4836 [label="lastContainer.GetMember(parts[i]) 859324"];
4837 [label="param GetMember(this NamespaceOrTypeSymbol container) 859325"];
4838 [label="param GetMember(string qualifiedName) 859326"];
4839 [label="NamespaceOrTypeSymbol lastContainer; 859327"];
4840 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 859328"];
4841 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859329"];
4842 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859330"];
4843 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859331"];
4844 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859332"];
4845 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859333"];
4846 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859334"];
4847 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859335"];
4848 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859336"];
4849 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859337"];
4850 [label="if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                } 859338"];
4851 [label="lastContainer.GetMember(parts[i]) 859339"];
4852 [label="NamespaceOrTypeSymbol lastContainer; 859340"];
4853 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 859341"];
4854 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859342"];
4855 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859343"];
4856 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859344"];
4857 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859345"];
4858 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859346"];
4859 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859347"];
4860 [label="if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                } 859348"];
4861 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859349"];
4862 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859350"];
4863 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859351"];
4864 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859352"];
4865 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859353"];
4866 [label="AssertEx.Equal(\n                new[] { 'System.Runtime.CompilerServices.IsReadOnlyAttribute' },\n                globalNamespace.GetMember<NamespaceSymbol>('System.Runtime.CompilerServices').GetMembers().Select(m => m.ToDisplayString())) 859354"];
4867 [label="param Equal(IEnumerable<T> expected) 859355"];
4868 [label="param Equal(IEnumerable<T> actual) 859356"];
4869 [label="param Equal(IEqualityComparer<T> comparer = null) 859357"];
4870 [label="param Equal(string message = null) 859358"];
4871 [label="param Equal(string itemSeparator = null) 859359"];
4872 [label="param Equal(Func<T, string> itemInspector = null) 859360"];
4873 [label="param Equal(string expectedValueSourcePath = null) 859361"];
4874 [label="param Equal(int expectedValueSourceLine = 0) 859362"];
4875 [label="var toReturn = true; 859363"];
4876 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 859364"];
4877 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 859365"];
4878 [label="CustomAssert.NotNull(actual); 859366"];
4879 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859367"];
4880 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859368"];
4881 [label="SequenceEqual(expected, actual, comparer) 859369"];
4882 [label="param SequenceEqual(IEnumerable<T> expected) 859370"];
4883 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 859371"];
4884 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859372"];
4885 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859373"];
4886 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859374"];
4887 [label="var enumerator1 = expected.GetEnumerator(); 859375"];
4888 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 859376"];
4889 [label="var hasNext1 = enumerator1.MoveNext(); 859377"];
4890 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 859378"];
4891 [label="if (!hasNext1)\n                {\n                    break;\n                } 859379"];
4892 [label="var value1 = enumerator1.Current; 859380"];
4893 [label="var value2 = enumerator2.Current; 859381"];
4894 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859382"];
4895 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859383"];
4896 [label="comparer != null 859384"];
4897 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859385"];
4898 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859386"];
4899 [label="AssertEqualityComparer<T>.Equals(value1, value2) 859387"];
4900 [label="param Equals(T left) 859388"];
4901 [label="param Equals(T right) 859389"];
4902 [label="return s_instance.Equals(left, right); 859390"];
4903 [label="return s_instance.Equals(left, right); 859391"];
4904 [label="s_instance.Equals(left, right) 859392"];
4905 [label="param Equals(T x) 859393"];
4906 [label="param Equals(T y) 859394"];
4907 [label="param Equals(this) 859395"];
4908 [label="CanBeNull() 859396"];
4909 [label="var type = typeof(T); 859397"];
4910 [label="return !type.GetTypeInfo().IsValueType ||\n                    (type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)); 859398"];
4911 [label="if (CanBeNull())\n                {\n                    if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    }\n\n                    if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    }\n                } 859399"];
4912 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 859400"];
4913 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 859401"];
4914 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 859402"];
4915 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 859403"];
4916 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859404"];
4917 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859405"];
4918 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859406"];
4919 [label="if (x is IEquatable<T> equatable)\n                {\n                    return equatable.Equals(y);\n                } 859407"];
4920 [label="return equatable.Equals(y); 859408"];
4921 [label="return true; 859409"];
4922 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859410"];
4923 [label="return true; 859411"];
4924 [label="AssertEx.Equal(\n                new[] { 'System.Runtime.CompilerServices.IsReadOnlyAttribute' },\n                globalNamespace.GetMember<NamespaceSymbol>('System.Runtime.CompilerServices').GetMembers().Select(m => m.ToDisplayString())); 859412"];
4925 [label="AssertEx.Equal(\n                new[] { 'System.Int32 InternalStruct.<P>k__BackingField', 'InternalStruct..ctor()' },\n                compWithRef.GetMember<NamedTypeSymbol>('InternalStruct').GetMembers().Select(m => m.ToTestDisplayString())); 859413"];
4926 [label="new[] { 'System.Int32 InternalStruct.<P>k__BackingField', 'InternalStruct..ctor()' } 859414"];
4927 [label="AssertEx.Equal(\n                new[] { 'System.Int32 InternalStruct.<P>k__BackingField', 'InternalStruct..ctor()' },\n                compWithRef.GetMember<NamedTypeSymbol>('InternalStruct').GetMembers().Select(m => m.ToTestDisplayString())); 859415"];
4928 [label="compWithRef.GetMember<NamedTypeSymbol>('InternalStruct') 859416"];
4929 [label="param GetMember(this CSharpCompilation compilation) 859417"];
4930 [label="param GetMember(string qualifiedName) 859418"];
4931 [label="compilation.GlobalNamespace 859419"];
4932 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 859420"];
4933 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 859421"];
4934 [label="GetBoundReferenceManager(); 859422"];
4935 [label="return (T)compilation.GlobalNamespace.GetMember(qualifiedName); 859423"];
4936 [label="return (T)compilation.GlobalNamespace.GetMember(qualifiedName); 859424"];
4937 [label="compilation.GlobalNamespace.GetMember(qualifiedName) 859425"];
4938 [label="param GetMember(this NamespaceOrTypeSymbol container) 859426"];
4939 [label="param GetMember(string qualifiedName) 859427"];
4940 [label="NamespaceOrTypeSymbol lastContainer; 859428"];
4941 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859429"];
4942 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 859430"];
4943 [label="GetMembers(container, qualifiedName, out lastContainer) 859431"];
4944 [label="param GetMembers(string qualifiedName) 859432"];
4945 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 859433"];
4946 [label="var parts = SplitMemberName(qualifiedName); 859434"];
4947 [label="SplitMemberName(qualifiedName) 859435"];
4948 [label="param SplitMemberName(string name) 859436"];
4949 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859437"];
4950 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859438"];
4951 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 859439"];
4952 [label="var builder = ArrayBuilder<string>.GetInstance(); 859440"];
4953 [label="string part = name; 859441"];
4954 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 859442"];
4955 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 859443"];
4956 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 859444"];
4957 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 859445"];
4958 [label="builder.ReverseContents(); 859446"];
4959 [label="return builder.ToImmutableAndFree(); 859447"];
4960 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 859448"];
4961 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 859449"];
4962 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859450"];
4963 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859451"];
4964 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 859452"];
4965 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 859453"];
4966 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 859454"];
4967 [label="param SymbolDeclaredEvent(Symbol symbol) 859455"];
4968 [label="param SymbolDeclaredEvent(this) 859456"];
4969 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 859457"];
4970 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859458"];
4971 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859459"];
4972 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 859460"];
4973 [label="AssertEx.Equal(\n                new[] { 'System.Int32 InternalStruct.<P>k__BackingField', 'InternalStruct..ctor()' },\n                compWithRef.GetMember<NamedTypeSymbol>('InternalStruct').GetMembers().Select(m => m.ToTestDisplayString())) 859461"];
4974 [label="param Equal(IEnumerable<T> expected) 859462"];
4975 [label="param Equal(IEnumerable<T> actual) 859463"];
4976 [label="param Equal(IEqualityComparer<T> comparer = null) 859464"];
4977 [label="param Equal(string message = null) 859465"];
4978 [label="param Equal(string itemSeparator = null) 859466"];
4979 [label="param Equal(Func<T, string> itemInspector = null) 859467"];
4980 [label="param Equal(string expectedValueSourcePath = null) 859468"];
4981 [label="param Equal(int expectedValueSourceLine = 0) 859469"];
4982 [label="var toReturn = true; 859470"];
4983 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 859471"];
4984 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 859472"];
4985 [label="CustomAssert.NotNull(actual); 859473"];
4986 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859474"];
4987 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859475"];
4988 [label="SequenceEqual(expected, actual, comparer) 859476"];
4989 [label="param SequenceEqual(IEnumerable<T> expected) 859477"];
4990 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 859478"];
4991 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859479"];
4992 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859480"];
4993 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 859481"];
4994 [label="var enumerator1 = expected.GetEnumerator(); 859482"];
4995 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 859483"];
4996 [label="var hasNext1 = enumerator1.MoveNext(); 859484"];
4997 [label="var hasNext2 = enumerator2.MoveNext(); 859485"];
4998 [label="param ToTestDisplayString(this Symbol symbol) 859486"];
4999 [label="return symbol.ToDisplayString(SymbolDisplayFormat.TestFormat); 859487"];
5000 [label="return symbol.ToDisplayString(SymbolDisplayFormat.TestFormat); 859488"];
5001 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 859489"];
5002 [label="if (!hasNext1)\n                {\n                    break;\n                } 859490"];
5003 [label="var value1 = enumerator1.Current; 859491"];
5004 [label="var value2 = enumerator2.Current; 859492"];
5005 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859493"];
5006 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859494"];
5007 [label="comparer != null 859495"];
5008 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859496"];
5009 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 859497"];
5010 [label="AssertEqualityComparer<T>.Equals(value1, value2) 859498"];
5011 [label="param Equals(T left) 859499"];
5012 [label="param Equals(T right) 859500"];
5013 [label="return s_instance.Equals(left, right); 859501"];
5014 [label="return s_instance.Equals(left, right); 859502"];
5015 [label="s_instance.Equals(left, right) 859503"];
5016 [label="param Equals(T x) 859504"];
5017 [label="param Equals(T y) 859505"];
5018 [label="param Equals(this) 859506"];
5019 [label="CanBeNull() 859507"];
5020 [label="var type = typeof(T); 859508"];
5021 [label="return !type.GetTypeInfo().IsValueType ||\n                    (type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)); 859509"];
5022 [label="if (CanBeNull())\n                {\n                    if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    }\n\n                    if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    }\n                } 859510"];
5023 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 859511"];
5024 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 859512"];
5025 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 859513"];
5026 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 859514"];
5027 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859515"];
5028 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859516"];
5029 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 859517"];
5030 [label="if (x is IEquatable<T> equatable)\n                {\n                    return equatable.Equals(y);\n                } 859518"];
5031 [label="return equatable.Equals(y); 859519"];
5032 [label="return true; 859520"];
5033 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 859521"];
5034 [label="return true; 859522"];
5035 [label="AssertEx.Equal(\n                new[] { 'System.Int32 InternalStruct.<P>k__BackingField', 'InternalStruct..ctor()' },\n                compWithRef.GetMember<NamedTypeSymbol>('InternalStruct').GetMembers().Select(m => m.ToTestDisplayString())); 859523"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 11;
12 -> 1;
13 -> 1;
14 -> 1;
15 -> 14;
16 -> 15;
16 -> 1;
17 -> 16;
17 -> 13;
17 -> 1;
18 -> 12;
18 -> 13;
18 -> 17;
18 -> 1;
19 -> 18;
19 -> 13;
20 -> 19;
20 -> 13;
21 -> 13;
22 -> 20;
22 -> 21;
23 -> 21;
24 -> 22;
24 -> 23;
24 -> 21;
25 -> 18;
25 -> 13;
26 -> 18;
26 -> 13;
27 -> 18;
27 -> 13;
28 -> 18;
28 -> 13;
29 -> 18;
29 -> 13;
30 -> 18;
30 -> 13;
31 -> 18;
31 -> 13;
32 -> 18;
32 -> 13;
33 -> 25;
33 -> 13;
34 -> 26;
34 -> 13;
35 -> 27;
35 -> 13;
36 -> 28;
36 -> 13;
37 -> 29;
37 -> 13;
38 -> 30;
38 -> 13;
39 -> 31;
39 -> 13;
40 -> 13;
41 -> 40;
41 -> 13;
42 -> 13;
43 -> 33;
43 -> 42;
44 -> 34;
44 -> 42;
45 -> 35;
45 -> 42;
46 -> 36;
46 -> 42;
47 -> 37;
47 -> 42;
48 -> 38;
48 -> 42;
49 -> 39;
49 -> 42;
50 -> 41;
50 -> 42;
51 -> 46;
51 -> 42;
52 -> 48;
52 -> 42;
53 -> 42;
54 -> 51;
54 -> 53;
55 -> 52;
55 -> 53;
56 -> 43;
56 -> 53;
57 -> 56;
57 -> 24;
57 -> 53;
58 -> 57;
59 -> 55;
59 -> 57;
60 -> 54;
60 -> 57;
61 -> 57;
62 -> 58;
62 -> 61;
63 -> 59;
63 -> 61;
64 -> 60;
64 -> 61;
65 -> 58;
65 -> 61;
66 -> 61;
67 -> 64;
67 -> 66;
67 -> 61;
68 -> 0;
68 -> 67;
69 -> 62;
69 -> 61;
70 -> 0;
70 -> 61;
71 -> 70;
71 -> 65;
71 -> 61;
72 -> 61;
73 -> 69;
73 -> 71;
73 -> 72;
73 -> 0;
73 -> 61;
74 -> 73;
74 -> 61;
75 -> 68;
75 -> 61;
76 -> 63;
76 -> 61;
77 -> 61;
78 -> 74;
78 -> 75;
78 -> 76;
78 -> 77;
78 -> 73;
78 -> 0;
78 -> 61;
79 -> 61;
80 -> 78;
80 -> 79;
81 -> 79;
82 -> 79;
83 -> 80;
83 -> 78;
83 -> 82;
83 -> 79;
84 -> 81;
84 -> 79;
85 -> 79;
86 -> 83;
86 -> 78;
86 -> 82;
86 -> 84;
86 -> 85;
86 -> 81;
86 -> 79;
87 -> 79;
88 -> 87;
88 -> 81;
88 -> 79;
89 -> 81;
89 -> 79;
90 -> 79;
91 -> 89;
91 -> 90;
91 -> 81;
91 -> 88;
91 -> 79;
92 -> 80;
92 -> 79;
93 -> 92;
93 -> 58;
93 -> 57;
94 -> 58;
94 -> 42;
95 -> 42;
96 -> 45;
96 -> 95;
96 -> 42;
97 -> 0;
97 -> 42;
98 -> 50;
98 -> 42;
99 -> 47;
99 -> 94;
99 -> 44;
99 -> 45;
99 -> 42;
100 -> 99;
100 -> 42;
101 -> 42;
102 -> 100;
102 -> 101;
103 -> 0;
103 -> 101;
104 -> 103;
105 -> 42;
106 -> 99;
106 -> 58;
106 -> 93;
106 -> 78;
106 -> 24;
106 -> 42;
107 -> 42;
108 -> 107;
109 -> 106;
109 -> 108;
109 -> 42;
110 -> 0;
112 -> 110;
112 -> 111;
113 -> 112;
114 -> 0;
116 -> 114;
116 -> 115;
118 -> 116;
118 -> 117;
119 -> 118;
120 -> 106;
120 -> 107;
121 -> 106;
121 -> 107;
122 -> 106;
122 -> 107;
123 -> 106;
123 -> 107;
124 -> 120;
124 -> 107;
125 -> 123;
125 -> 107;
126 -> 121;
126 -> 107;
127 -> 122;
127 -> 107;
128 -> 107;
129 -> 107;
130 -> 124;
130 -> 129;
131 -> 125;
131 -> 129;
132 -> 126;
132 -> 129;
133 -> 127;
133 -> 129;
134 -> 128;
134 -> 129;
135 -> 128;
135 -> 129;
136 -> 128;
136 -> 129;
137 -> 128;
137 -> 129;
138 -> 129;
139 -> 131;
139 -> 138;
139 -> 129;
140 -> 137;
140 -> 129;
141 -> 133;
141 -> 129;
142 -> 141;
142 -> 109;
142 -> 129;
143 -> 130;
143 -> 129;
144 -> 131;
144 -> 129;
145 -> 142;
145 -> 129;
146 -> 134;
146 -> 129;
147 -> 135;
147 -> 129;
148 -> 136;
148 -> 129;
149 -> 137;
149 -> 129;
150 -> 129;
151 -> 0;
151 -> 129;
152 -> 131;
152 -> 142;
152 -> 129;
153 -> 129;
154 -> 151;
154 -> 153;
155 -> 152;
155 -> 153;
156 -> 152;
156 -> 153;
157 -> 151;
157 -> 153;
158 -> 149;
158 -> 153;
159 -> 150;
159 -> 153;
160 -> 150;
160 -> 153;
161 -> 154;
161 -> 153;
162 -> 155;
162 -> 153;
163 -> 156;
163 -> 153;
164 -> 157;
164 -> 153;
165 -> 158;
165 -> 153;
166 -> 153;
167 -> 166;
167 -> 161;
167 -> 162;
167 -> 163;
167 -> 164;
167 -> 165;
167 -> 0;
167 -> 142;
167 -> 153;
168 -> 166;
168 -> 153;
169 -> 159;
169 -> 166;
169 -> 153;
170 -> 129;
171 -> 143;
171 -> 170;
172 -> 144;
172 -> 170;
173 -> 145;
173 -> 170;
174 -> 146;
174 -> 170;
175 -> 147;
175 -> 170;
176 -> 148;
176 -> 170;
177 -> 149;
177 -> 170;
178 -> 150;
178 -> 170;
179 -> 150;
179 -> 170;
180 -> 150;
180 -> 170;
181 -> 150;
181 -> 170;
182 -> 150;
182 -> 170;
183 -> 150;
183 -> 170;
184 -> 171;
184 -> 170;
185 -> 172;
185 -> 170;
186 -> 173;
186 -> 170;
187 -> 174;
187 -> 170;
188 -> 175;
188 -> 170;
189 -> 176;
189 -> 170;
190 -> 177;
190 -> 170;
191 -> 178;
191 -> 170;
192 -> 179;
192 -> 170;
193 -> 180;
193 -> 170;
194 -> 180;
194 -> 167;
194 -> 170;
195 -> 194;
195 -> 167;
195 -> 168;
195 -> 169;
195 -> 170;
196 -> 181;
196 -> 170;
197 -> 182;
197 -> 170;
198 -> 170;
199 -> 184;
199 -> 198;
200 -> 185;
200 -> 198;
201 -> 186;
201 -> 198;
202 -> 187;
202 -> 198;
203 -> 188;
203 -> 198;
204 -> 189;
204 -> 198;
205 -> 190;
205 -> 198;
206 -> 191;
206 -> 198;
207 -> 192;
207 -> 198;
208 -> 193;
208 -> 198;
209 -> 195;
209 -> 198;
210 -> 196;
210 -> 198;
211 -> 197;
211 -> 198;
212 -> 183;
212 -> 198;
213 -> 199;
213 -> 198;
214 -> 201;
214 -> 198;
215 -> 209;
215 -> 198;
216 -> 205;
216 -> 198;
217 -> 210;
217 -> 198;
218 -> 211;
218 -> 198;
219 -> 198;
220 -> 219;
220 -> 213;
220 -> 214;
220 -> 215;
220 -> 216;
220 -> 217;
220 -> 218;
220 -> 142;
220 -> 195;
220 -> 198;
221 -> 219;
221 -> 198;
222 -> 219;
222 -> 198;
223 -> 219;
223 -> 198;
224 -> 219;
224 -> 198;
225 -> 219;
225 -> 198;
226 -> 219;
226 -> 198;
227 -> 219;
227 -> 198;
228 -> 219;
228 -> 198;
229 -> 219;
229 -> 198;
230 -> 219;
230 -> 198;
231 -> 219;
231 -> 198;
232 -> 219;
232 -> 198;
233 -> 219;
233 -> 198;
234 -> 219;
234 -> 198;
235 -> 219;
235 -> 198;
236 -> 219;
236 -> 198;
237 -> 219;
237 -> 198;
238 -> 219;
238 -> 198;
239 -> 219;
239 -> 198;
240 -> 219;
240 -> 198;
241 -> 219;
241 -> 198;
242 -> 219;
242 -> 198;
243 -> 219;
243 -> 198;
244 -> 219;
244 -> 198;
245 -> 219;
245 -> 198;
246 -> 219;
246 -> 198;
247 -> 198;
248 -> 247;
248 -> 219;
248 -> 198;
249 -> 219;
249 -> 198;
250 -> 249;
250 -> 220;
250 -> 221;
250 -> 222;
250 -> 223;
250 -> 224;
250 -> 225;
250 -> 226;
250 -> 227;
250 -> 228;
250 -> 229;
250 -> 230;
250 -> 231;
250 -> 232;
250 -> 233;
250 -> 234;
250 -> 235;
250 -> 236;
250 -> 237;
250 -> 238;
250 -> 239;
250 -> 240;
250 -> 241;
250 -> 242;
250 -> 243;
250 -> 244;
250 -> 245;
250 -> 246;
250 -> 248;
250 -> 247;
250 -> 198;
251 -> 250;
251 -> 219;
251 -> 198;
252 -> 200;
252 -> 219;
252 -> 198;
253 -> 219;
253 -> 198;
254 -> 198;
255 -> 198;
256 -> 253;
256 -> 255;
257 -> 254;
257 -> 255;
258 -> 257;
258 -> 255;
259 -> 257;
259 -> 255;
260 -> 257;
260 -> 255;
261 -> 256;
261 -> 257;
261 -> 255;
262 -> 254;
262 -> 219;
262 -> 198;
263 -> 219;
263 -> 250;
263 -> 198;
264 -> 263;
264 -> 250;
264 -> 251;
264 -> 252;
264 -> 262;
264 -> 261;
264 -> 259;
264 -> 260;
264 -> 198;
265 -> 264;
265 -> 219;
265 -> 198;
266 -> 219;
266 -> 264;
266 -> 198;
267 -> 266;
267 -> 264;
267 -> 265;
267 -> 198;
268 -> 267;
268 -> 219;
268 -> 198;
269 -> 219;
269 -> 267;
269 -> 198;
270 -> 269;
270 -> 267;
270 -> 268;
270 -> 198;
271 -> 270;
271 -> 219;
271 -> 198;
272 -> 219;
272 -> 270;
272 -> 198;
273 -> 272;
273 -> 270;
273 -> 271;
273 -> 198;
274 -> 273;
274 -> 219;
274 -> 198;
275 -> 219;
275 -> 198;
276 -> 275;
276 -> 273;
276 -> 274;
276 -> 198;
277 -> 276;
277 -> 219;
277 -> 198;
278 -> 208;
278 -> 276;
278 -> 198;
279 -> 198;
280 -> 278;
280 -> 279;
281 -> 279;
282 -> 280;
282 -> 279;
283 -> 282;
283 -> 276;
283 -> 277;
283 -> 279;
284 -> 0;
284 -> 279;
285 -> 284;
285 -> 281;
285 -> 279;
286 -> 285;
286 -> 198;
287 -> 286;
287 -> 219;
287 -> 198;
288 -> 205;
288 -> 198;
289 -> 288;
290 -> 202;
290 -> 289;
290 -> 288;
291 -> 203;
291 -> 289;
291 -> 288;
292 -> 290;
292 -> 291;
292 -> 288;
293 -> 204;
293 -> 289;
293 -> 288;
294 -> 292;
294 -> 293;
294 -> 288;
295 -> 207;
295 -> 198;
296 -> 219;
296 -> 276;
296 -> 277;
296 -> 287;
296 -> 295;
297 -> 295;
298 -> 219;
298 -> 297;
299 -> 298;
299 -> 296;
299 -> 297;
300 -> 206;
300 -> 295;
301 -> 296;
301 -> 299;
301 -> 300;
301 -> 295;
302 -> 301;
302 -> 219;
302 -> 295;
303 -> 208;
303 -> 219;
303 -> 198;
304 -> 219;
304 -> 301;
304 -> 198;
305 -> 198;
306 -> 219;
306 -> 301;
306 -> 305;
306 -> 198;
307 -> 129;
308 -> 132;
308 -> 307;
308 -> 129;
309 -> 132;
309 -> 308;
310 -> 308;
311 -> 309;
311 -> 310;
312 -> 150;
312 -> 310;
313 -> 310;
314 -> 311;
314 -> 313;
314 -> 310;
315 -> 311;
315 -> 310;
316 -> 315;
316 -> 301;
316 -> 302;
316 -> 303;
316 -> 310;
317 -> 310;
318 -> 312;
318 -> 316;
318 -> 310;
319 -> 317;
319 -> 310;
320 -> 318;
320 -> 316;
320 -> 310;
321 -> 319;
321 -> 320;
321 -> 317;
321 -> 316;
321 -> 310;
322 -> 310;
323 -> 310;
324 -> 311;
324 -> 310;
325 -> 324;
325 -> 321;
325 -> 310;
326 -> 325;
327 -> 325;
328 -> 325;
329 -> 312;
329 -> 328;
329 -> 325;
330 -> 325;
331 -> 317;
331 -> 330;
331 -> 328;
331 -> 325;
332 -> 322;
332 -> 325;
332 -> 331;
333 -> 323;
333 -> 325;
334 -> 317;
334 -> 331;
334 -> 310;
335 -> 312;
335 -> 334;
335 -> 310;
336 -> 311;
336 -> 310;
337 -> 310;
338 -> 336;
338 -> 337;
339 -> 318;
339 -> 337;
340 -> 339;
340 -> 334;
340 -> 337;
341 -> 339;
341 -> 334;
341 -> 337;
342 -> 339;
342 -> 334;
342 -> 337;
343 -> 339;
343 -> 334;
343 -> 337;
344 -> 339;
344 -> 334;
344 -> 337;
345 -> 338;
345 -> 337;
346 -> 339;
346 -> 334;
346 -> 345;
346 -> 337;
347 -> 337;
348 -> 344;
348 -> 347;
348 -> 337;
349 -> 346;
349 -> 348;
350 -> 348;
351 -> 349;
351 -> 350;
352 -> 339;
352 -> 350;
353 -> 351;
353 -> 350;
354 -> 352;
354 -> 346;
354 -> 350;
355 -> 350;
356 -> 350;
357 -> 353;
357 -> 356;
358 -> 354;
358 -> 356;
359 -> 354;
359 -> 356;
360 -> 354;
360 -> 356;
361 -> 354;
361 -> 356;
362 -> 355;
362 -> 356;
363 -> 355;
363 -> 356;
364 -> 356;
364 -> 357;
364 -> 358;
364 -> 359;
364 -> 360;
364 -> 361;
364 -> 346;
365 -> 355;
365 -> 348;
366 -> 365;
366 -> 310;
367 -> 312;
367 -> 364;
367 -> 310;
368 -> 332;
368 -> 310;
369 -> 366;
369 -> 310;
370 -> 310;
371 -> 367;
371 -> 370;
372 -> 368;
372 -> 370;
373 -> 369;
373 -> 370;
374 -> 312;
374 -> 370;
375 -> 374;
375 -> 364;
375 -> 370;
376 -> 370;
377 -> 374;
377 -> 376;
378 -> 377;
378 -> 364;
378 -> 376;
379 -> 378;
379 -> 376;
380 -> 379;
380 -> 370;
381 -> 374;
381 -> 364;
381 -> 356;
381 -> 362;
381 -> 370;
382 -> 370;
383 -> 381;
383 -> 382;
384 -> 383;
384 -> 381;
384 -> 382;
385 -> 370;
386 -> 384;
386 -> 385;
387 -> 371;
387 -> 370;
388 -> 372;
388 -> 370;
389 -> 373;
389 -> 370;
390 -> 370;
391 -> 370;
392 -> 375;
392 -> 391;
393 -> 375;
393 -> 391;
394 -> 375;
394 -> 391;
395 -> 380;
395 -> 391;
396 -> 384;
396 -> 391;
397 -> 386;
397 -> 391;
398 -> 386;
398 -> 391;
399 -> 387;
399 -> 391;
400 -> 388;
400 -> 391;
401 -> 389;
401 -> 391;
402 -> 386;
402 -> 391;
403 -> 390;
403 -> 391;
404 -> 390;
404 -> 391;
405 -> 395;
405 -> 391;
406 -> 396;
406 -> 391;
407 -> 397;
407 -> 391;
408 -> 401;
408 -> 386;
408 -> 391;
409 -> 403;
409 -> 391;
410 -> 391;
411 -> 405;
411 -> 410;
412 -> 406;
412 -> 410;
413 -> 407;
413 -> 410;
414 -> 409;
414 -> 410;
415 -> 404;
415 -> 410;
416 -> 414;
416 -> 410;
417 -> 410;
418 -> 417;
418 -> 410;
419 -> 417;
419 -> 410;
420 -> 417;
420 -> 410;
421 -> 417;
421 -> 410;
422 -> 417;
422 -> 410;
423 -> 417;
423 -> 410;
424 -> 417;
424 -> 410;
425 -> 417;
425 -> 410;
426 -> 417;
426 -> 410;
427 -> 417;
427 -> 410;
428 -> 417;
428 -> 410;
429 -> 417;
429 -> 410;
430 -> 417;
430 -> 410;
431 -> 417;
431 -> 410;
432 -> 417;
432 -> 410;
433 -> 417;
433 -> 410;
434 -> 417;
434 -> 410;
435 -> 417;
435 -> 410;
436 -> 417;
436 -> 410;
437 -> 417;
437 -> 410;
438 -> 417;
438 -> 410;
439 -> 417;
439 -> 410;
440 -> 417;
440 -> 410;
441 -> 417;
441 -> 410;
442 -> 417;
442 -> 410;
443 -> 417;
443 -> 410;
444 -> 410;
445 -> 444;
445 -> 417;
445 -> 410;
446 -> 417;
446 -> 410;
447 -> 417;
447 -> 410;
448 -> 410;
449 -> 410;
450 -> 447;
450 -> 449;
451 -> 448;
451 -> 449;
452 -> 451;
452 -> 449;
453 -> 451;
453 -> 449;
454 -> 451;
454 -> 449;
455 -> 450;
455 -> 451;
455 -> 449;
456 -> 448;
456 -> 417;
456 -> 410;
457 -> 417;
457 -> 410;
458 -> 410;
459 -> 408;
459 -> 458;
460 -> 458;
461 -> 459;
461 -> 458;
462 -> 461;
462 -> 408;
463 -> 461;
464 -> 462;
464 -> 463;
465 -> 398;
465 -> 410;
466 -> 465;
467 -> 411;
467 -> 466;
467 -> 465;
468 -> 412;
468 -> 466;
468 -> 465;
469 -> 467;
469 -> 468;
469 -> 465;
470 -> 413;
470 -> 466;
470 -> 465;
471 -> 469;
471 -> 470;
471 -> 465;
472 -> 399;
472 -> 400;
473 -> 417;
473 -> 400;
474 -> 399;
474 -> 473;
474 -> 408;
474 -> 464;
474 -> 400;
475 -> 399;
475 -> 417;
475 -> 400;
476 -> 417;
476 -> 474;
476 -> 410;
477 -> 410;
478 -> 417;
478 -> 474;
478 -> 477;
478 -> 410;
479 -> 390;
479 -> 310;
480 -> 479;
480 -> 308;
481 -> 480;
481 -> 474;
481 -> 129;
482 -> 480;
482 -> 129;
483 -> 106;
483 -> 482;
483 -> 474;
483 -> 475;
483 -> 401;
483 -> 42;
484 -> 483;
484 -> 42;
485 -> 42;
486 -> 484;
486 -> 485;
487 -> 485;
488 -> 486;
488 -> 487;
489 -> 487;
490 -> 488;
490 -> 483;
490 -> 489;
491 -> 489;
492 -> 490;
492 -> 483;
492 -> 491;
492 -> 489;
493 -> 490;
493 -> 483;
493 -> 492;
494 -> 492;
495 -> 493;
495 -> 494;
496 -> 493;
496 -> 494;
497 -> 493;
497 -> 494;
498 -> 493;
498 -> 494;
499 -> 493;
499 -> 494;
500 -> 494;
501 -> 494;
502 -> 494;
503 -> 494;
504 -> 494;
505 -> 0;
505 -> 494;
506 -> 495;
506 -> 494;
507 -> 500;
507 -> 506;
508 -> 506;
509 -> 496;
509 -> 506;
510 -> 497;
510 -> 506;
511 -> 498;
511 -> 506;
512 -> 499;
512 -> 506;
513 -> 501;
513 -> 506;
514 -> 502;
514 -> 506;
515 -> 503;
515 -> 506;
516 -> 504;
516 -> 506;
517 -> 505;
517 -> 506;
518 -> 506;
519 -> 507;
519 -> 518;
520 -> 508;
520 -> 518;
521 -> 509;
521 -> 518;
522 -> 510;
522 -> 518;
523 -> 511;
523 -> 518;
524 -> 512;
524 -> 518;
525 -> 513;
525 -> 518;
526 -> 514;
526 -> 518;
527 -> 515;
527 -> 518;
528 -> 516;
528 -> 518;
529 -> 517;
529 -> 518;
530 -> 520;
530 -> 483;
530 -> 518;
531 -> 530;
531 -> 0;
531 -> 518;
532 -> 520;
532 -> 518;
533 -> 521;
533 -> 518;
534 -> 524;
534 -> 518;
535 -> 528;
535 -> 518;
536 -> 529;
536 -> 518;
537 -> 518;
538 -> 532;
538 -> 537;
539 -> 533;
539 -> 537;
540 -> 534;
540 -> 537;
541 -> 535;
541 -> 537;
542 -> 536;
542 -> 537;
543 -> 538;
543 -> 539;
543 -> 540;
543 -> 537;
544 -> 538;
544 -> 537;
545 -> 543;
545 -> 537;
546 -> 541;
546 -> 544;
546 -> 545;
546 -> 504;
546 -> 543;
546 -> 537;
547 -> 543;
547 -> 537;
548 -> 542;
548 -> 547;
548 -> 0;
548 -> 546;
548 -> 537;
549 -> 518;
550 -> 520;
550 -> 518;
551 -> 519;
551 -> 550;
551 -> 500;
551 -> 548;
551 -> 518;
552 -> 520;
552 -> 518;
553 -> 525;
553 -> 501;
553 -> 518;
554 -> 525;
554 -> 552;
554 -> 553;
554 -> 501;
554 -> 551;
554 -> 518;
555 -> 500;
555 -> 554;
555 -> 494;
556 -> 501;
556 -> 554;
556 -> 494;
557 -> 502;
557 -> 494;
558 -> 503;
558 -> 494;
559 -> 548;
559 -> 494;
560 -> 494;
561 -> 494;
562 -> 555;
562 -> 561;
563 -> 556;
563 -> 561;
564 -> 557;
564 -> 561;
565 -> 558;
565 -> 561;
566 -> 556;
566 -> 561;
567 -> 559;
567 -> 561;
568 -> 560;
568 -> 561;
569 -> 568;
569 -> 561;
570 -> 568;
570 -> 561;
571 -> 568;
571 -> 561;
572 -> 568;
572 -> 561;
573 -> 568;
573 -> 561;
574 -> 562;
574 -> 561;
575 -> 562;
575 -> 555;
575 -> 561;
576 -> 562;
576 -> 561;
577 -> 566;
577 -> 574;
577 -> 561;
578 -> 0;
578 -> 561;
579 -> 562;
579 -> 568;
579 -> 561;
580 -> 563;
580 -> 568;
580 -> 561;
581 -> 564;
581 -> 568;
581 -> 561;
582 -> 565;
582 -> 568;
582 -> 561;
583 -> 566;
583 -> 568;
583 -> 561;
584 -> 567;
584 -> 568;
584 -> 561;
585 -> 560;
585 -> 492;
586 -> 492;
587 -> 493;
587 -> 585;
587 -> 586;
587 -> 580;
587 -> 581;
587 -> 582;
587 -> 583;
587 -> 584;
587 -> 579;
587 -> 577;
587 -> 555;
587 -> 557;
587 -> 558;
587 -> 492;
588 -> 490;
588 -> 587;
588 -> 489;
589 -> 588;
589 -> 487;
590 -> 589;
590 -> 485;
591 -> 590;
591 -> 587;
591 -> 485;
592 -> 485;
593 -> 590;
593 -> 592;
593 -> 587;
593 -> 485;
594 -> 0;
594 -> 485;
595 -> 593;
595 -> 594;
595 -> 485;
596 -> 49;
596 -> 595;
596 -> 42;
597 -> 483;
597 -> 42;
598 -> 18;
598 -> 597;
598 -> 595;
598 -> 1;
599 -> 1;
600 -> 598;
600 -> 1;
601 -> 599;
601 -> 1;
602 -> 0;
602 -> 1;
603 -> 1;
604 -> 1;
605 -> 600;
605 -> 604;
606 -> 603;
606 -> 604;
607 -> 603;
607 -> 604;
608 -> 603;
608 -> 604;
609 -> 603;
609 -> 604;
610 -> 603;
610 -> 604;
611 -> 603;
611 -> 604;
612 -> 603;
612 -> 604;
613 -> 603;
613 -> 604;
614 -> 603;
614 -> 604;
615 -> 601;
615 -> 604;
616 -> 602;
616 -> 604;
617 -> 10;
617 -> 604;
618 -> 605;
618 -> 604;
619 -> 606;
619 -> 604;
620 -> 607;
620 -> 604;
621 -> 608;
621 -> 604;
622 -> 604;
623 -> 621;
623 -> 622;
624 -> 617;
624 -> 622;
625 -> 622;
626 -> 623;
626 -> 625;
626 -> 622;
627 -> 626;
628 -> 609;
628 -> 604;
629 -> 610;
629 -> 604;
630 -> 604;
631 -> 629;
631 -> 630;
632 -> 617;
632 -> 630;
633 -> 630;
634 -> 631;
634 -> 633;
634 -> 630;
635 -> 634;
636 -> 611;
636 -> 604;
637 -> 612;
637 -> 604;
638 -> 613;
638 -> 604;
639 -> 614;
639 -> 604;
640 -> 615;
640 -> 604;
641 -> 616;
641 -> 604;
642 -> 604;
643 -> 618;
643 -> 642;
644 -> 619;
644 -> 642;
645 -> 620;
645 -> 642;
646 -> 627;
646 -> 642;
647 -> 628;
647 -> 642;
648 -> 635;
648 -> 642;
649 -> 636;
649 -> 642;
650 -> 637;
650 -> 642;
651 -> 638;
651 -> 642;
652 -> 639;
652 -> 642;
653 -> 640;
653 -> 642;
654 -> 641;
654 -> 642;
655 -> 617;
655 -> 642;
656 -> 643;
656 -> 642;
657 -> 642;
658 -> 650;
658 -> 657;
658 -> 642;
659 -> 642;
660 -> 646;
660 -> 659;
660 -> 642;
661 -> 642;
662 -> 643;
662 -> 642;
663 -> 645;
663 -> 642;
664 -> 644;
664 -> 642;
665 -> 649;
665 -> 642;
666 -> 650;
666 -> 642;
667 -> 651;
667 -> 642;
668 -> 642;
669 -> 668;
669 -> 652;
669 -> 642;
670 -> 647;
670 -> 642;
671 -> 648;
671 -> 642;
672 -> 653;
672 -> 642;
673 -> 654;
673 -> 642;
674 -> 642;
675 -> 662;
675 -> 674;
676 -> 663;
676 -> 674;
677 -> 664;
677 -> 674;
678 -> 665;
678 -> 674;
679 -> 666;
679 -> 674;
680 -> 667;
680 -> 674;
681 -> 669;
681 -> 674;
682 -> 670;
682 -> 674;
683 -> 671;
683 -> 674;
684 -> 672;
684 -> 674;
685 -> 673;
685 -> 674;
686 -> 655;
686 -> 674;
687 -> 675;
687 -> 674;
688 -> 686;
688 -> 9;
688 -> 674;
689 -> 676;
689 -> 674;
690 -> 674;
691 -> 674;
692 -> 687;
692 -> 691;
693 -> 688;
693 -> 691;
694 -> 689;
694 -> 691;
695 -> 690;
695 -> 691;
696 -> 695;
696 -> 691;
697 -> 695;
697 -> 691;
698 -> 695;
698 -> 691;
699 -> 695;
699 -> 691;
700 -> 695;
700 -> 691;
701 -> 695;
701 -> 691;
702 -> 692;
702 -> 695;
702 -> 691;
703 -> 694;
703 -> 695;
703 -> 691;
704 -> 693;
704 -> 695;
704 -> 691;
705 -> 679;
705 -> 674;
706 -> 680;
706 -> 674;
707 -> 681;
707 -> 674;
708 -> 677;
708 -> 674;
709 -> 684;
709 -> 674;
710 -> 685;
710 -> 674;
711 -> 678;
711 -> 674;
712 -> 674;
713 -> 705;
713 -> 712;
714 -> 706;
714 -> 712;
715 -> 707;
715 -> 712;
716 -> 708;
716 -> 712;
717 -> 709;
717 -> 712;
718 -> 710;
718 -> 712;
719 -> 711;
719 -> 712;
720 -> 690;
720 -> 712;
721 -> 0;
722 -> 721;
723 -> 722;
724 -> 720;
724 -> 703;
724 -> 712;
725 -> 712;
726 -> 724;
726 -> 725;
727 -> 726;
727 -> 725;
728 -> 723;
728 -> 722;
728 -> 727;
728 -> 725;
729 -> 728;
729 -> 712;
730 -> 716;
730 -> 712;
731 -> 717;
731 -> 712;
732 -> 712;
733 -> 729;
733 -> 732;
734 -> 730;
734 -> 732;
735 -> 731;
735 -> 732;
736 -> 720;
736 -> 732;
738 -> 736;
738 -> 702;
738 -> 732;
739 -> 734;
739 -> 732;
740 -> 735;
740 -> 732;
741 -> 732;
742 -> 738;
742 -> 739;
742 -> 740;
742 -> 741;
742 -> 733;
742 -> 598;
742 -> 599;
742 -> 728;
742 -> 732;
743 -> 742;
743 -> 741;
744 -> 742;
744 -> 741;
745 -> 742;
745 -> 741;
746 -> 742;
746 -> 741;
747 -> 742;
747 -> 741;
748 -> 742;
748 -> 741;
749 -> 743;
749 -> 741;
750 -> 741;
751 -> 749;
751 -> 750;
752 -> 750;
753 -> 751;
753 -> 750;
754 -> 750;
755 -> 753;
755 -> 754;
756 -> 754;
757 -> 755;
757 -> 742;
757 -> 754;
758 -> 754;
759 -> 757;
759 -> 758;
760 -> 754;
761 -> 759;
761 -> 760;
761 -> 754;
762 -> 755;
762 -> 759;
762 -> 754;
763 -> 754;
764 -> 762;
764 -> 763;
765 -> 763;
766 -> 764;
766 -> 765;
767 -> 766;
767 -> 762;
767 -> 765;
768 -> 766;
768 -> 767;
769 -> 767;
770 -> 768;
770 -> 769;
771 -> 769;
772 -> 770;
772 -> 771;
773 -> 771;
774 -> 772;
774 -> 768;
774 -> 773;
775 -> 774;
775 -> 771;
776 -> 775;
776 -> 769;
777 -> 768;
777 -> 769;
778 -> 777;
778 -> 776;
778 -> 769;
779 -> 768;
779 -> 769;
780 -> 769;
781 -> 766;
781 -> 778;
781 -> 767;
782 -> 766;
782 -> 778;
782 -> 765;
783 -> 782;
783 -> 763;
784 -> 756;
784 -> 754;
785 -> 784;
785 -> 750;
786 -> 750;
787 -> 785;
787 -> 786;
787 -> 750;
788 -> 752;
788 -> 750;
789 -> 788;
789 -> 741;
790 -> 0;
790 -> 741;
791 -> 789;
791 -> 741;
792 -> 741;
793 -> 743;
793 -> 792;
793 -> 741;
794 -> 789;
794 -> 741;
795 -> 792;
795 -> 794;
795 -> 793;
795 -> 752;
795 -> 783;
795 -> 741;
796 -> 795;
797 -> 790;
797 -> 795;
798 -> 745;
798 -> 795;
799 -> 746;
799 -> 795;
800 -> 795;
801 -> 796;
801 -> 800;
802 -> 797;
802 -> 800;
803 -> 798;
803 -> 800;
804 -> 799;
804 -> 800;
805 -> 801;
805 -> 783;
805 -> 752;
805 -> 792;
805 -> 793;
805 -> 795;
805 -> 800;
806 -> 805;
807 -> 805;
808 -> 807;
808 -> 783;
808 -> 795;
808 -> 792;
808 -> 793;
808 -> 752;
808 -> 805;
809 -> 807;
809 -> 808;
809 -> 0;
809 -> 805;
810 -> 809;
810 -> 805;
811 -> 808;
811 -> 810;
812 -> 811;
812 -> 810;
813 -> 805;
814 -> 812;
814 -> 813;
814 -> 811;
814 -> 805;
815 -> 802;
815 -> 814;
815 -> 790;
815 -> 0;
815 -> 805;
816 -> 808;
816 -> 805;
817 -> 805;
818 -> 816;
818 -> 817;
819 -> 818;
819 -> 814;
819 -> 0;
819 -> 817;
820 -> 819;
820 -> 817;
821 -> 820;
822 -> 820;
823 -> 809;
823 -> 820;
824 -> 823;
825 -> 812;
825 -> 824;
825 -> 821;
825 -> 823;
826 -> 802;
826 -> 825;
826 -> 815;
826 -> 823;
827 -> 812;
827 -> 823;
828 -> 0;
828 -> 823;
829 -> 821;
829 -> 823;
830 -> 823;
831 -> 827;
831 -> 828;
831 -> 829;
831 -> 830;
831 -> 825;
831 -> 821;
831 -> 823;
832 -> 831;
832 -> 820;
833 -> 803;
833 -> 831;
833 -> 832;
833 -> 820;
834 -> 820;
835 -> 800;
836 -> 743;
836 -> 741;
837 -> 744;
837 -> 741;
838 -> 746;
838 -> 741;
839 -> 747;
839 -> 741;
840 -> 748;
840 -> 741;
841 -> 741;
842 -> 836;
842 -> 841;
843 -> 837;
843 -> 841;
844 -> 838;
844 -> 841;
845 -> 839;
845 -> 841;
846 -> 840;
846 -> 841;
847 -> 841;
848 -> 846;
848 -> 847;
848 -> 841;
849 -> 841;
850 -> 841;
851 -> 841;
852 -> 846;
852 -> 833;
852 -> 0;
852 -> 841;
853 -> 852;
853 -> 841;
854 -> 842;
854 -> 833;
854 -> 841;
855 -> 841;
856 -> 854;
856 -> 855;
857 -> 855;
858 -> 856;
858 -> 857;
859 -> 857;
860 -> 859;
861 -> 858;
861 -> 855;
862 -> 841;
863 -> 841;
864 -> 849;
864 -> 841;
865 -> 841;
866 -> 853;
866 -> 841;
867 -> 843;
867 -> 841;
868 -> 846;
868 -> 841;
869 -> 861;
869 -> 841;
870 -> 845;
870 -> 841;
871 -> 864;
871 -> 865;
871 -> 866;
871 -> 867;
871 -> 868;
871 -> 869;
871 -> 870;
871 -> 842;
871 -> 849;
871 -> 853;
871 -> 861;
871 -> 841;
872 -> 871;
872 -> 865;
873 -> 872;
873 -> 871;
873 -> 865;
874 -> 871;
874 -> 865;
875 -> 871;
875 -> 865;
876 -> 871;
876 -> 865;
877 -> 871;
877 -> 865;
878 -> 871;
878 -> 865;
879 -> 871;
879 -> 865;
880 -> 871;
880 -> 865;
881 -> 871;
881 -> 865;
882 -> 871;
882 -> 865;
883 -> 882;
883 -> 873;
883 -> 865;
884 -> 874;
884 -> 865;
885 -> 880;
885 -> 865;
886 -> 865;
887 -> 884;
887 -> 886;
888 -> 885;
888 -> 886;
889 -> 882;
889 -> 886;
890 -> 887;
890 -> 886;
891 -> 886;
892 -> 890;
892 -> 891;
893 -> 889;
893 -> 891;
894 -> 891;
895 -> 893;
895 -> 894;
896 -> 894;
897 -> 895;
897 -> 896;
898 -> 896;
899 -> 897;
899 -> 898;
900 -> 899;
900 -> 873;
900 -> 898;
901 -> 899;
901 -> 873;
901 -> 898;
902 -> 901;
902 -> 896;
903 -> 897;
903 -> 873;
903 -> 896;
904 -> 897;
904 -> 903;
904 -> 896;
905 -> 904;
905 -> 894;
906 -> 905;
906 -> 891;
907 -> 906;
907 -> 891;
908 -> 906;
908 -> 903;
908 -> 907;
909 -> 908;
909 -> 886;
910 -> 886;
911 -> 909;
911 -> 910;
911 -> 886;
912 -> 909;
912 -> 911;
913 -> 912;
913 -> 865;
914 -> 865;
915 -> 913;
915 -> 914;
915 -> 865;
916 -> 874;
916 -> 865;
917 -> 913;
917 -> 865;
918 -> 865;
919 -> 916;
919 -> 917;
919 -> 918;
919 -> 882;
919 -> 903;
919 -> 865;
920 -> 919;
920 -> 918;
921 -> 918;
922 -> 920;
922 -> 921;
923 -> 921;
924 -> 922;
924 -> 923;
925 -> 924;
925 -> 921;
926 -> 922;
926 -> 918;
927 -> 918;
928 -> 926;
928 -> 927;
929 -> 926;
929 -> 927;
930 -> 927;
931 -> 929;
931 -> 930;
932 -> 930;
933 -> 932;
934 -> 931;
934 -> 927;
935 -> 929;
935 -> 927;
936 -> 927;
937 -> 936;
938 -> 937;
939 -> 919;
939 -> 918;
940 -> 918;
941 -> 939;
941 -> 940;
942 -> 940;
943 -> 941;
943 -> 942;
944 -> 943;
944 -> 934;
944 -> 942;
945 -> 943;
945 -> 934;
945 -> 942;
946 -> 945;
946 -> 940;
947 -> 941;
947 -> 934;
947 -> 940;
948 -> 947;
948 -> 918;
949 -> 918;
950 -> 948;
950 -> 949;
951 -> 919;
951 -> 918;
952 -> 918;
953 -> 919;
953 -> 952;
953 -> 950;
953 -> 865;
954 -> 865;
955 -> 878;
955 -> 954;
955 -> 865;
956 -> 955;
957 -> 865;
958 -> 882;
958 -> 953;
958 -> 865;
959 -> 882;
959 -> 953;
959 -> 958;
960 -> 959;
960 -> 958;
961 -> 882;
961 -> 953;
961 -> 960;
962 -> 958;
963 -> 962;
964 -> 963;
964 -> 962;
965 -> 962;
965 -> 953;
965 -> 961;
966 -> 965;
966 -> 958;
967 -> 874;
967 -> 958;
968 -> 961;
968 -> 958;
969 -> 953;
969 -> 958;
970 -> 956;
970 -> 958;
971 -> 958;
972 -> 958;
973 -> 966;
973 -> 972;
974 -> 967;
974 -> 972;
975 -> 968;
975 -> 972;
976 -> 969;
976 -> 972;
977 -> 970;
977 -> 972;
978 -> 971;
978 -> 972;
979 -> 973;
979 -> 972;
980 -> 974;
980 -> 972;
981 -> 975;
981 -> 972;
982 -> 976;
982 -> 972;
983 -> 977;
983 -> 972;
984 -> 0;
984 -> 972;
985 -> 972;
986 -> 979;
986 -> 985;
987 -> 980;
987 -> 985;
988 -> 981;
988 -> 985;
989 -> 982;
989 -> 985;
990 -> 983;
990 -> 985;
991 -> 984;
991 -> 985;
992 -> 978;
992 -> 985;
993 -> 985;
994 -> 986;
994 -> 965;
994 -> 993;
994 -> 985;
995 -> 987;
995 -> 985;
996 -> 988;
996 -> 985;
997 -> 989;
997 -> 985;
998 -> 990;
998 -> 985;
999 -> 985;
1000 -> 994;
1000 -> 999;
1001 -> 995;
1001 -> 999;
1002 -> 996;
1002 -> 999;
1003 -> 997;
1003 -> 999;
1004 -> 998;
1004 -> 999;
1005 -> 992;
1005 -> 999;
1006 -> 1000;
1006 -> 994;
1006 -> 999;
1007 -> 1000;
1007 -> 999;
1008 -> 1003;
1008 -> 999;
1009 -> 1004;
1009 -> 999;
1010 -> 1002;
1010 -> 999;
1011 -> 1001;
1011 -> 999;
1012 -> 999;
1013 -> 1012;
1014 -> 999;
1015 -> 1014;
1015 -> 1006;
1015 -> 1007;
1015 -> 1008;
1015 -> 1009;
1015 -> 1010;
1015 -> 1011;
1015 -> 1012;
1015 -> 994;
1015 -> 956;
1015 -> 1013;
1015 -> 999;
1016 -> 1015;
1016 -> 1014;
1017 -> 1014;
1018 -> 1015;
1018 -> 1017;
1018 -> 999;
1019 -> 999;
1020 -> 1019;
1020 -> 1014;
1020 -> 999;
1021 -> 0;
1021 -> 999;
1022 -> 1021;
1022 -> 0;
1022 -> 999;
1023 -> 1022;
1023 -> 1014;
1023 -> 999;
1024 -> 999;
1025 -> 1024;
1025 -> 1014;
1025 -> 999;
1026 -> 1014;
1026 -> 999;
1027 -> 1014;
1027 -> 999;
1028 -> 1014;
1028 -> 999;
1029 -> 1014;
1029 -> 999;
1030 -> 1014;
1030 -> 999;
1031 -> 1000;
1031 -> 1018;
1031 -> 999;
1032 -> 1031;
1032 -> 0;
1032 -> 999;
1033 -> 1032;
1033 -> 999;
1034 -> 1033;
1034 -> 1014;
1034 -> 999;
1035 -> 1014;
1035 -> 1018;
1035 -> 1020;
1035 -> 999;
1036 -> 1000;
1036 -> 999;
1037 -> 1014;
1037 -> 999;
1038 -> 1035;
1038 -> 1036;
1038 -> 1037;
1038 -> 1018;
1038 -> 1020;
1038 -> 1023;
1038 -> 1025;
1038 -> 1026;
1038 -> 1027;
1038 -> 1034;
1038 -> 1028;
1038 -> 1029;
1038 -> 1030;
1038 -> 1019;
1038 -> 1022;
1038 -> 1024;
1038 -> 999;
1039 -> 1000;
1039 -> 1038;
1039 -> 999;
1040 -> 992;
1040 -> 985;
1041 -> 992;
1041 -> 985;
1042 -> 992;
1042 -> 985;
1043 -> 992;
1043 -> 985;
1044 -> 992;
1044 -> 985;
1045 -> 992;
1045 -> 985;
1046 -> 992;
1046 -> 985;
1047 -> 992;
1047 -> 985;
1048 -> 992;
1048 -> 985;
1049 -> 992;
1049 -> 985;
1050 -> 986;
1050 -> 985;
1051 -> 986;
1051 -> 992;
1051 -> 985;
1052 -> 991;
1052 -> 985;
1053 -> 1052;
1053 -> 992;
1053 -> 985;
1054 -> 985;
1055 -> 987;
1055 -> 1038;
1055 -> 1054;
1055 -> 985;
1056 -> 1055;
1056 -> 985;
1057 -> 986;
1057 -> 1038;
1057 -> 1056;
1058 -> 986;
1058 -> 1038;
1058 -> 1057;
1058 -> 992;
1058 -> 985;
1059 -> 992;
1059 -> 1038;
1059 -> 985;
1060 -> 986;
1060 -> 985;
1061 -> 992;
1061 -> 985;
1062 -> 1059;
1062 -> 1060;
1062 -> 1061;
1062 -> 1038;
1062 -> 1040;
1062 -> 1051;
1062 -> 1041;
1062 -> 1042;
1062 -> 1043;
1062 -> 1044;
1062 -> 1045;
1062 -> 1046;
1062 -> 1047;
1062 -> 1048;
1062 -> 1049;
1062 -> 1058;
1062 -> 1053;
1062 -> 1057;
1062 -> 1052;
1062 -> 985;
1063 -> 865;
1064 -> 875;
1064 -> 1063;
1064 -> 865;
1065 -> 876;
1065 -> 971;
1065 -> 865;
1066 -> 865;
1067 -> 877;
1067 -> 1066;
1067 -> 865;
1068 -> 877;
1068 -> 971;
1068 -> 1067;
1069 -> 865;
1070 -> 879;
1070 -> 1069;
1070 -> 865;
1071 -> 879;
1071 -> 1062;
1071 -> 1070;
1072 -> 971;
1072 -> 1071;
1072 -> 1062;
1072 -> 1065;
1072 -> 1068;
1072 -> 1070;
1073 -> 971;
1073 -> 879;
1073 -> 1070;
1074 -> 971;
1074 -> 865;
1075 -> 871;
1075 -> 1074;
1075 -> 1072;
1075 -> 1073;
1075 -> 841;
1076 -> 871;
1076 -> 865;
1077 -> 871;
1077 -> 865;
1078 -> 871;
1078 -> 865;
1079 -> 871;
1079 -> 865;
1080 -> 871;
1080 -> 865;
1081 -> 871;
1081 -> 865;
1082 -> 871;
1082 -> 865;
1083 -> 871;
1083 -> 865;
1084 -> 865;
1085 -> 1078;
1085 -> 865;
1086 -> 1085;
1087 -> 0;
1087 -> 1085;
1088 -> 1086;
1088 -> 1087;
1088 -> 1085;
1089 -> 1080;
1089 -> 865;
1090 -> 0;
1090 -> 865;
1091 -> 865;
1092 -> 1082;
1092 -> 865;
1093 -> 865;
1094 -> 1090;
1094 -> 1093;
1095 -> 1091;
1095 -> 1093;
1096 -> 1092;
1096 -> 1093;
1097 -> 1083;
1097 -> 1093;
1098 -> 1093;
1099 -> 1094;
1099 -> 1093;
1100 -> 1095;
1100 -> 1093;
1101 -> 1098;
1101 -> 1093;
1102 -> 1096;
1102 -> 1093;
1103 -> 1093;
1104 -> 1099;
1104 -> 1103;
1105 -> 1100;
1105 -> 1103;
1106 -> 1101;
1106 -> 1103;
1107 -> 1102;
1107 -> 1103;
1108 -> 1097;
1108 -> 1103;
1109 -> 1103;
1110 -> 1104;
1110 -> 0;
1110 -> 1103;
1111 -> 1110;
1111 -> 1105;
1111 -> 1103;
1112 -> 1111;
1113 -> 1108;
1113 -> 1112;
1114 -> 1112;
1115 -> 1113;
1115 -> 1075;
1115 -> 1114;
1116 -> 1114;
1117 -> 1115;
1117 -> 1111;
1118 -> 1111;
1119 -> 1108;
1119 -> 1118;
1120 -> 1119;
1120 -> 1075;
1120 -> 1118;
1121 -> 1120;
1121 -> 1111;
1122 -> 1121;
1123 -> 1117;
1123 -> 1075;
1123 -> 1121;
1124 -> 1107;
1124 -> 1121;
1125 -> 1122;
1125 -> 1123;
1125 -> 1124;
1125 -> 1075;
1125 -> 1121;
1126 -> 1125;
1126 -> 1122;
1127 -> 1125;
1127 -> 1122;
1128 -> 1125;
1128 -> 1122;
1129 -> 1125;
1129 -> 1122;
1130 -> 1122;
1131 -> 1130;
1131 -> 1122;
1132 -> 1122;
1133 -> 1127;
1133 -> 1132;
1134 -> 1133;
1134 -> 1122;
1135 -> 1128;
1135 -> 1122;
1136 -> 1130;
1136 -> 1122;
1137 -> 1134;
1137 -> 1125;
1137 -> 1135;
1137 -> 1136;
1137 -> 1131;
1137 -> 1122;
1138 -> 1111;
1139 -> 1117;
1139 -> 1111;
1140 -> 1107;
1140 -> 1075;
1140 -> 1137;
1140 -> 1139;
1141 -> 1139;
1141 -> 1075;
1141 -> 1140;
1142 -> 1104;
1142 -> 0;
1142 -> 1103;
1143 -> 1109;
1143 -> 1142;
1144 -> 1143;
1144 -> 1108;
1144 -> 1109;
1144 -> 1140;
1144 -> 1142;
1145 -> 1142;
1146 -> 1142;
1147 -> 1108;
1147 -> 1146;
1148 -> 1147;
1148 -> 1144;
1148 -> 1146;
1149 -> 1148;
1149 -> 1142;
1150 -> 1142;
1151 -> 1108;
1151 -> 1150;
1152 -> 1151;
1152 -> 1149;
1152 -> 1150;
1153 -> 1152;
1153 -> 1142;
1154 -> 1107;
1154 -> 1149;
1154 -> 1142;
1155 -> 1142;
1156 -> 1108;
1156 -> 1155;
1157 -> 1156;
1157 -> 1154;
1157 -> 1155;
1158 -> 1156;
1158 -> 1154;
1158 -> 1155;
1159 -> 1158;
1159 -> 1142;
1160 -> 1107;
1160 -> 1159;
1160 -> 1142;
1161 -> 1107;
1161 -> 1142;
1162 -> 1142;
1163 -> 1142;
1164 -> 1162;
1164 -> 1163;
1165 -> 1162;
1165 -> 1163;
1166 -> 1162;
1166 -> 1163;
1167 -> 1161;
1167 -> 1163;
1168 -> 1108;
1168 -> 1163;
1169 -> 1163;
1170 -> 1168;
1170 -> 1169;
1171 -> 1170;
1171 -> 1160;
1171 -> 1169;
1172 -> 1169;
1173 -> 1171;
1173 -> 1172;
1174 -> 1173;
1174 -> 1172;
1175 -> 1174;
1175 -> 1171;
1175 -> 1172;
1176 -> 1172;
1177 -> 1175;
1177 -> 1176;
1178 -> 1177;
1178 -> 1175;
1178 -> 1176;
1179 -> 1178;
1179 -> 1176;
1180 -> 1179;
1180 -> 1163;
1181 -> 1167;
1181 -> 1163;
1182 -> 1180;
1182 -> 1181;
1182 -> 1179;
1182 -> 1160;
1182 -> 1163;
1183 -> 1163;
1184 -> 1163;
1185 -> 1164;
1185 -> 1184;
1185 -> 1163;
1186 -> 1163;
1187 -> 1168;
1187 -> 1186;
1188 -> 1186;
1189 -> 1187;
1189 -> 1188;
1190 -> 1188;
1191 -> 1189;
1191 -> 1190;
1192 -> 1191;
1192 -> 1182;
1192 -> 1190;
1193 -> 1191;
1193 -> 1182;
1193 -> 1190;
1194 -> 1193;
1194 -> 1188;
1195 -> 1189;
1195 -> 1182;
1195 -> 1188;
1196 -> 1195;
1196 -> 1163;
1197 -> 1183;
1197 -> 1163;
1198 -> 1167;
1198 -> 1163;
1199 -> 1197;
1199 -> 1198;
1199 -> 1196;
1199 -> 1160;
1199 -> 1195;
1199 -> 1163;
1200 -> 1163;
1201 -> 1200;
1202 -> 1201;
1203 -> 1199;
1203 -> 1202;
1204 -> 1203;
1204 -> 1201;
1205 -> 1200;
1206 -> 1205;
1207 -> 1206;
1208 -> 1200;
1209 -> 1208;
1210 -> 1209;
1211 -> 1199;
1211 -> 1200;
1212 -> 1211;
1212 -> 1199;
1212 -> 1200;
1213 -> 1200;
1214 -> 1211;
1214 -> 1199;
1214 -> 1213;
1214 -> 1200;
1215 -> 1214;
1216 -> 1211;
1216 -> 1199;
1216 -> 1214;
1217 -> 1215;
1217 -> 1214;
1218 -> 1214;
1219 -> 1211;
1219 -> 1217;
1219 -> 1200;
1220 -> 1199;
1220 -> 1200;
1221 -> 1199;
1221 -> 1200;
1222 -> 1221;
1222 -> 1219;
1222 -> 1200;
1223 -> 1199;
1223 -> 1200;
1224 -> 1199;
1224 -> 1200;
1225 -> 1200;
1226 -> 1224;
1226 -> 1225;
1227 -> 1226;
1227 -> 1219;
1227 -> 1225;
1228 -> 1226;
1228 -> 1219;
1228 -> 1225;
1229 -> 1228;
1229 -> 1200;
1230 -> 1200;
1231 -> 1230;
1231 -> 1229;
1231 -> 1219;
1231 -> 1200;
1232 -> 1230;
1232 -> 1231;
1233 -> 1229;
1233 -> 1232;
1233 -> 1230;
1234 -> 1223;
1234 -> 1233;
1234 -> 1232;
1235 -> 1199;
1235 -> 1200;
1236 -> 1235;
1236 -> 1234;
1236 -> 1200;
1237 -> 1203;
1237 -> 1236;
1237 -> 1202;
1238 -> 1203;
1238 -> 1236;
1238 -> 1202;
1239 -> 1238;
1239 -> 1201;
1240 -> 1199;
1240 -> 1200;
1241 -> 1199;
1241 -> 1200;
1242 -> 1240;
1242 -> 0;
1242 -> 1200;
1243 -> 1200;
1244 -> 1240;
1244 -> 1200;
1245 -> 1241;
1245 -> 1244;
1245 -> 1236;
1245 -> 1200;
1246 -> 1245;
1247 -> 1246;
1248 -> 1247;
1248 -> 1246;
1249 -> 1246;
1249 -> 1245;
1250 -> 1240;
1250 -> 1245;
1251 -> 1249;
1251 -> 1240;
1251 -> 1200;
1252 -> 1249;
1252 -> 1200;
1253 -> 1199;
1253 -> 1200;
1254 -> 1199;
1254 -> 1200;
1255 -> 1253;
1255 -> 1252;
1255 -> 1200;
1256 -> 1200;
1257 -> 1200;
1258 -> 1255;
1258 -> 1257;
1259 -> 1256;
1259 -> 1257;
1260 -> 1254;
1260 -> 1257;
1261 -> 1259;
1261 -> 1257;
1262 -> 1258;
1262 -> 1257;
1263 -> 1257;
1264 -> 1260;
1264 -> 1252;
1264 -> 1257;
1265 -> 1257;
1266 -> 1262;
1266 -> 1265;
1267 -> 1263;
1267 -> 1265;
1268 -> 1264;
1268 -> 1265;
1269 -> 1260;
1269 -> 1265;
1270 -> 1268;
1270 -> 1265;
1271 -> 1267;
1271 -> 1265;
1272 -> 1269;
1272 -> 1252;
1272 -> 1271;
1273 -> 1269;
1273 -> 1252;
1273 -> 1272;
1273 -> 1265;
1274 -> 1270;
1274 -> 1273;
1274 -> 1252;
1274 -> 1272;
1274 -> 1265;
1275 -> 1266;
1275 -> 1265;
1276 -> 1265;
1277 -> 1275;
1277 -> 1276;
1278 -> 1269;
1278 -> 1276;
1279 -> 1277;
1279 -> 1276;
1280 -> 1276;
1281 -> 1279;
1281 -> 1280;
1282 -> 1278;
1282 -> 1280;
1283 -> 1280;
1284 -> 1281;
1284 -> 1283;
1284 -> 1280;
1285 -> 1280;
1286 -> 1282;
1286 -> 1274;
1286 -> 1285;
1287 -> 1285;
1288 -> 1286;
1288 -> 1280;
1289 -> 1281;
1289 -> 1280;
1290 -> 1288;
1290 -> 1274;
1290 -> 1289;
1290 -> 1280;
1291 -> 1276;
1292 -> 1278;
1292 -> 1290;
1292 -> 1291;
1293 -> 1291;
1294 -> 1292;
1294 -> 1276;
1295 -> 1274;
1295 -> 1265;
1296 -> 1265;
1297 -> 1295;
1297 -> 1296;
1297 -> 1265;
1298 -> 1297;
1299 -> 1298;
1299 -> 1294;
1300 -> 1299;
1300 -> 1297;
1301 -> 1274;
1301 -> 1297;
1302 -> 1300;
1302 -> 1297;
1303 -> 1297;
1304 -> 1265;
1305 -> 1302;
1305 -> 1294;
1305 -> 1265;
1306 -> 1265;
1307 -> 1305;
1307 -> 1306;
1307 -> 1265;
1308 -> 1266;
1308 -> 1265;
1309 -> 1267;
1309 -> 1265;
1310 -> 1302;
1310 -> 1294;
1310 -> 1265;
1311 -> 1265;
1312 -> 1308;
1312 -> 1311;
1313 -> 1309;
1313 -> 1311;
1314 -> 1310;
1314 -> 1311;
1315 -> 1269;
1315 -> 1311;
1316 -> 1315;
1316 -> 1311;
1317 -> 1312;
1317 -> 1311;
1318 -> 1313;
1318 -> 1311;
1319 -> 1316;
1319 -> 1317;
1319 -> 1318;
1319 -> 1302;
1319 -> 1311;
1320 -> 1311;
1321 -> 1319;
1321 -> 1311;
1322 -> 1311;
1323 -> 1322;
1324 -> 1314;
1324 -> 1322;
1325 -> 1322;
1326 -> 1324;
1326 -> 1325;
1326 -> 1322;
1327 -> 1314;
1327 -> 1322;
1328 -> 1321;
1328 -> 1322;
1329 -> 1324;
1329 -> 1322;
1330 -> 1327;
1330 -> 1328;
1330 -> 1329;
1330 -> 1321;
1330 -> 1322;
1331 -> 1319;
1331 -> 1330;
1332 -> 1253;
1332 -> 1200;
1333 -> 1331;
1333 -> 1256;
1334 -> 1333;
1334 -> 1331;
1334 -> 1256;
1335 -> 1334;
1336 -> 1335;
1336 -> 1334;
1337 -> 1334;
1338 -> 1336;
1338 -> 1337;
1339 -> 1333;
1339 -> 1337;
1340 -> 1337;
1341 -> 1339;
1341 -> 1340;
1342 -> 1340;
1343 -> 1341;
1343 -> 1342;
1344 -> 1343;
1344 -> 1340;
1345 -> 1341;
1345 -> 1337;
1346 -> 1338;
1346 -> 1345;
1346 -> 1335;
1346 -> 1341;
1346 -> 1337;
1347 -> 1337;
1348 -> 1339;
1348 -> 1347;
1349 -> 1348;
1349 -> 1346;
1349 -> 1347;
1350 -> 1348;
1350 -> 1346;
1350 -> 1347;
1351 -> 1350;
1351 -> 1337;
1352 -> 1337;
1353 -> 1352;
1353 -> 1351;
1353 -> 1346;
1353 -> 1337;
1354 -> 1352;
1354 -> 1353;
1355 -> 1351;
1355 -> 1354;
1355 -> 1352;
1356 -> 1334;
1357 -> 1333;
1357 -> 1334;
1358 -> 1357;
1358 -> 1355;
1358 -> 1334;
1359 -> 1334;
1360 -> 1335;
1360 -> 1358;
1360 -> 1334;
1361 -> 1333;
1361 -> 1360;
1361 -> 1334;
1362 -> 1358;
1362 -> 1334;
1363 -> 1334;
1364 -> 1333;
1364 -> 1361;
1364 -> 1256;
1365 -> 1331;
1365 -> 1256;
1366 -> 1256;
1367 -> 1365;
1367 -> 1366;
1368 -> 1366;
1369 -> 1368;
1370 -> 1367;
1370 -> 1369;
1371 -> 1370;
1371 -> 1364;
1371 -> 1369;
1372 -> 1370;
1372 -> 1364;
1372 -> 1369;
1373 -> 1372;
1373 -> 1368;
1374 -> 1367;
1374 -> 1364;
1374 -> 1368;
1375 -> 1374;
1375 -> 1256;
1376 -> 1256;
1377 -> 1199;
1377 -> 1200;
1378 -> 1199;
1378 -> 1200;
1379 -> 1377;
1379 -> 1375;
1379 -> 1200;
1380 -> 1200;
1381 -> 1379;
1381 -> 1380;
1382 -> 1379;
1382 -> 1380;
1383 -> 1378;
1383 -> 1380;
1384 -> 1380;
1385 -> 1383;
1385 -> 1384;
1386 -> 1384;
1387 -> 1385;
1387 -> 1386;
1387 -> 1375;
1387 -> 1384;
1388 -> 1387;
1388 -> 1384;
1389 -> 1388;
1389 -> 1380;
1390 -> 1382;
1390 -> 1380;
1391 -> 1381;
1391 -> 1390;
1391 -> 1387;
1391 -> 1375;
1391 -> 1380;
1392 -> 1380;
1393 -> 1383;
1393 -> 1392;
1394 -> 1393;
1394 -> 1391;
1394 -> 1392;
1395 -> 1380;
1396 -> 1394;
1396 -> 1389;
1396 -> 1380;
1397 -> 1199;
1397 -> 1200;
1398 -> 1199;
1398 -> 1200;
1399 -> 1199;
1399 -> 1200;
1400 -> 1398;
1400 -> 1200;
1401 -> 1397;
1401 -> 1200;
1402 -> 1200;
1403 -> 1200;
1404 -> 1401;
1404 -> 1403;
1405 -> 1402;
1405 -> 1403;
1406 -> 1399;
1406 -> 1403;
1407 -> 1405;
1407 -> 1403;
1408 -> 1404;
1408 -> 1403;
1409 -> 1403;
1410 -> 1408;
1410 -> 1409;
1411 -> 1406;
1411 -> 1409;
1412 -> 1410;
1412 -> 1409;
1413 -> 1409;
1414 -> 1412;
1414 -> 1413;
1415 -> 1411;
1415 -> 1413;
1416 -> 1413;
1417 -> 1414;
1417 -> 1416;
1417 -> 1413;
1418 -> 1413;
1419 -> 1418;
1420 -> 1414;
1420 -> 1413;
1421 -> 1409;
1422 -> 1421;
1423 -> 1403;
1424 -> 1403;
1425 -> 1396;
1425 -> 1403;
1426 -> 1403;
1427 -> 1425;
1427 -> 1426;
1427 -> 1403;
1428 -> 1424;
1428 -> 1403;
1429 -> 1425;
1429 -> 1428;
1429 -> 1396;
1429 -> 1403;
1430 -> 1404;
1430 -> 1403;
1431 -> 1405;
1431 -> 1403;
1432 -> 1403;
1433 -> 1430;
1433 -> 1432;
1434 -> 1431;
1434 -> 1432;
1435 -> 1406;
1435 -> 1432;
1436 -> 1435;
1436 -> 1432;
1437 -> 1433;
1437 -> 1432;
1438 -> 1434;
1438 -> 1432;
1439 -> 1432;
1440 -> 1432;
1441 -> 1440;
1442 -> 1440;
1443 -> 1429;
1443 -> 1442;
1443 -> 1440;
1444 -> 1441;
1444 -> 1440;
1445 -> 1429;
1445 -> 1444;
1445 -> 1440;
1446 -> 1199;
1446 -> 1200;
1447 -> 1199;
1447 -> 1200;
1448 -> 1200;
1449 -> 1447;
1449 -> 1448;
1450 -> 1448;
1451 -> 1450;
1452 -> 1449;
1452 -> 1451;
1453 -> 1452;
1453 -> 1445;
1453 -> 1451;
1454 -> 1452;
1454 -> 1445;
1454 -> 1451;
1455 -> 1454;
1455 -> 1450;
1456 -> 1200;
1457 -> 1445;
1458 -> 1457;
1458 -> 1445;
1459 -> 1445;
1459 -> 1240;
1459 -> 1200;
1460 -> 1203;
1460 -> 1445;
1460 -> 1202;
1461 -> 1203;
1461 -> 1445;
1461 -> 1202;
1462 -> 1461;
1462 -> 1201;
1463 -> 1199;
1463 -> 1200;
1464 -> 1199;
1464 -> 1200;
1465 -> 1463;
1465 -> 1200;
1466 -> 1465;
1466 -> 1445;
1466 -> 1200;
1467 -> 1463;
1467 -> 1466;
1467 -> 1200;
1468 -> 1200;
1469 -> 1464;
1469 -> 1468;
1470 -> 1468;
1471 -> 1469;
1471 -> 1470;
1472 -> 1470;
1473 -> 1472;
1474 -> 1471;
1474 -> 1473;
1475 -> 1474;
1475 -> 1466;
1475 -> 1473;
1476 -> 1474;
1476 -> 1466;
1476 -> 1473;
1477 -> 1476;
1477 -> 1472;
1478 -> 1471;
1478 -> 1466;
1478 -> 1472;
1479 -> 1468;
1480 -> 1478;
1480 -> 1200;
1481 -> 1200;
1482 -> 1464;
1482 -> 1481;
1483 -> 1482;
1483 -> 1478;
1483 -> 1481;
1484 -> 1483;
1485 -> 1484;
1485 -> 1483;
1486 -> 1483;
1487 -> 1485;
1487 -> 1486;
1487 -> 1483;
1488 -> 1487;
1488 -> 1483;
1489 -> 1488;
1489 -> 1482;
1489 -> 1483;
1490 -> 1482;
1490 -> 1487;
1490 -> 1489;
1490 -> 1481;
1491 -> 1490;
1491 -> 1200;
1492 -> 1491;
1493 -> 1463;
1493 -> 1492;
1493 -> 1200;
1494 -> 1474;
1494 -> 1492;
1494 -> 1473;
1495 -> 1474;
1495 -> 1492;
1495 -> 1473;
1496 -> 1495;
1496 -> 1472;
1497 -> 1492;
1497 -> 1200;
1498 -> 1203;
1498 -> 1492;
1498 -> 1202;
1499 -> 1203;
1499 -> 1492;
1499 -> 1202;
1500 -> 1499;
1500 -> 1201;
1501 -> 1221;
1501 -> 1492;
1501 -> 1200;
1502 -> 1199;
1502 -> 1200;
1503 -> 1199;
1503 -> 1200;
1504 -> 1200;
1505 -> 1502;
1505 -> 1504;
1506 -> 1504;
1507 -> 1505;
1507 -> 1492;
1507 -> 1506;
1508 -> 1506;
1509 -> 1507;
1509 -> 1200;
1510 -> 1503;
1510 -> 1200;
1511 -> 1509;
1511 -> 1510;
1511 -> 1200;
1512 -> 1200;
1513 -> 1211;
1513 -> 1511;
1513 -> 1200;
1514 -> 1164;
1514 -> 1163;
1515 -> 1514;
1516 -> 1515;
1516 -> 1168;
1516 -> 1514;
1517 -> 1514;
1518 -> 1517;
1518 -> 1168;
1518 -> 1514;
1519 -> 1168;
1519 -> 1511;
1519 -> 1516;
1519 -> 1518;
1519 -> 1163;
1520 -> 1163;
1521 -> 1166;
1521 -> 1520;
1521 -> 1163;
1522 -> 1164;
1522 -> 1163;
1523 -> 1165;
1523 -> 1163;
1524 -> 1167;
1524 -> 1163;
1525 -> 1163;
1526 -> 1522;
1526 -> 1525;
1527 -> 1523;
1527 -> 1525;
1528 -> 1524;
1528 -> 1525;
1529 -> 1168;
1529 -> 1525;
1530 -> 1525;
1531 -> 1526;
1531 -> 1530;
1531 -> 1525;
1532 -> 1529;
1532 -> 1519;
1532 -> 1525;
1533 -> 1532;
1534 -> 1529;
1534 -> 1532;
1535 -> 1533;
1535 -> 1532;
1536 -> 1528;
1536 -> 1532;
1537 -> 1532;
1538 -> 1532;
1539 -> 1534;
1539 -> 1538;
1540 -> 1535;
1540 -> 1538;
1541 -> 1536;
1541 -> 1538;
1542 -> 1537;
1542 -> 1538;
1543 -> 1537;
1543 -> 1538;
1544 -> 1538;
1545 -> 1539;
1545 -> 1538;
1546 -> 1542;
1546 -> 1538;
1547 -> 1543;
1547 -> 1538;
1548 -> 1544;
1548 -> 1538;
1549 -> 1541;
1549 -> 1538;
1550 -> 1538;
1551 -> 1538;
1552 -> 1545;
1552 -> 1551;
1553 -> 1546;
1553 -> 1551;
1554 -> 1547;
1554 -> 1551;
1555 -> 1548;
1555 -> 1551;
1556 -> 1549;
1556 -> 1551;
1557 -> 1550;
1557 -> 1551;
1558 -> 1551;
1559 -> 1558;
1559 -> 1551;
1560 -> 1558;
1560 -> 1551;
1561 -> 1558;
1561 -> 1551;
1562 -> 1558;
1562 -> 1551;
1563 -> 1558;
1563 -> 1551;
1564 -> 1558;
1564 -> 1551;
1565 -> 1552;
1565 -> 1558;
1565 -> 1551;
1566 -> 1553;
1566 -> 1558;
1566 -> 1551;
1567 -> 1554;
1567 -> 1558;
1567 -> 1551;
1568 -> 1555;
1568 -> 1558;
1568 -> 1551;
1569 -> 1556;
1569 -> 1558;
1569 -> 1551;
1570 -> 0;
1570 -> 1551;
1571 -> 1570;
1571 -> 1558;
1571 -> 1551;
1572 -> 1551;
1573 -> 1558;
1573 -> 1572;
1574 -> 1572;
1575 -> 1573;
1575 -> 1558;
1575 -> 1560;
1575 -> 1566;
1575 -> 1574;
1575 -> 1572;
1576 -> 1572;
1577 -> 1573;
1577 -> 1558;
1577 -> 1559;
1577 -> 1565;
1577 -> 1576;
1578 -> 1577;
1578 -> 1558;
1578 -> 1570;
1578 -> 1576;
1579 -> 1575;
1579 -> 1578;
1579 -> 1558;
1579 -> 1570;
1579 -> 1572;
1580 -> 1579;
1580 -> 1551;
1581 -> 1580;
1582 -> 1581;
1582 -> 1558;
1582 -> 1580;
1583 -> 1538;
1584 -> 1539;
1584 -> 1583;
1585 -> 1583;
1586 -> 1584;
1586 -> 1585;
1587 -> 1586;
1587 -> 1570;
1587 -> 1585;
1588 -> 1586;
1588 -> 1570;
1588 -> 1585;
1589 -> 1588;
1589 -> 1583;
1590 -> 1584;
1590 -> 1570;
1590 -> 1583;
1591 -> 1590;
1591 -> 1538;
1592 -> 1591;
1592 -> 1550;
1592 -> 1590;
1592 -> 1558;
1592 -> 1559;
1592 -> 1565;
1592 -> 1560;
1592 -> 1566;
1592 -> 1561;
1592 -> 1567;
1592 -> 1562;
1592 -> 1568;
1592 -> 1563;
1592 -> 1571;
1592 -> 1564;
1592 -> 1582;
1592 -> 1569;
1592 -> 1537;
1592 -> 1544;
1592 -> 1160;
1592 -> 1581;
1592 -> 1538;
1593 -> 1538;
1594 -> 1592;
1594 -> 1593;
1595 -> 1592;
1595 -> 1593;
1596 -> 1595;
1596 -> 1592;
1596 -> 1593;
1597 -> 1594;
1597 -> 1593;
1598 -> 1594;
1598 -> 1593;
1599 -> 1593;
1600 -> 1598;
1600 -> 1599;
1601 -> 1595;
1601 -> 1599;
1602 -> 1600;
1602 -> 1596;
1602 -> 0;
1602 -> 1599;
1603 -> 1599;
1604 -> 1600;
1604 -> 1596;
1604 -> 0;
1604 -> 1599;
1605 -> 1600;
1605 -> 1596;
1605 -> 0;
1605 -> 1604;
1606 -> 1600;
1606 -> 1596;
1606 -> 0;
1606 -> 1599;
1607 -> 1600;
1607 -> 1596;
1607 -> 0;
1607 -> 1599;
1608 -> 1600;
1608 -> 1596;
1608 -> 0;
1608 -> 1599;
1609 -> 1600;
1609 -> 1596;
1609 -> 0;
1609 -> 1599;
1610 -> 1600;
1610 -> 1596;
1610 -> 0;
1610 -> 1599;
1611 -> 1599;
1612 -> 1600;
1612 -> 1599;
1613 -> 1611;
1613 -> 1599;
1614 -> 1601;
1614 -> 1596;
1614 -> 1612;
1614 -> 1613;
1614 -> 1599;
1615 -> 1599;
1616 -> 1600;
1616 -> 1599;
1617 -> 1615;
1617 -> 1599;
1618 -> 1599;
1619 -> 1616;
1619 -> 1618;
1620 -> 1617;
1620 -> 1618;
1621 -> 1601;
1621 -> 1618;
1622 -> 1618;
1623 -> 1619;
1623 -> 1614;
1623 -> 1618;
1624 -> 1618;
1625 -> 1624;
1625 -> 1599;
1626 -> 1625;
1626 -> 1599;
1627 -> 1600;
1627 -> 1623;
1627 -> 0;
1627 -> 1626;
1628 -> 0;
1628 -> 1627;
1629 -> 1600;
1629 -> 1623;
1629 -> 0;
1629 -> 1599;
1630 -> 1629;
1630 -> 1599;
1631 -> 1628;
1631 -> 1630;
1632 -> 1631;
1632 -> 0;
1632 -> 1593;
1633 -> 1631;
1633 -> 1593;
1634 -> 1593;
1635 -> 1633;
1635 -> 1634;
1636 -> 1635;
1636 -> 1634;
1637 -> 1636;
1638 -> 1593;
1639 -> 1638;
1639 -> 1594;
1639 -> 1631;
1639 -> 1593;
1640 -> 1594;
1640 -> 1631;
1640 -> 1638;
1640 -> 1639;
1641 -> 1639;
1642 -> 1640;
1642 -> 1639;
1643 -> 1641;
1643 -> 1639;
1644 -> 1639;
1645 -> 1642;
1645 -> 1644;
1646 -> 1643;
1646 -> 1644;
1647 -> 1595;
1647 -> 1644;
1648 -> 1644;
1649 -> 1644;
1649 -> 1639;
1650 -> 1639;
1651 -> 1650;
1651 -> 1639;
1652 -> 1648;
1652 -> 1651;
1653 -> 1639;
1654 -> 1652;
1654 -> 1653;
1654 -> 1639;
1655 -> 1654;
1655 -> 1649;
1655 -> 1639;
1656 -> 1649;
1656 -> 1639;
1657 -> 1637;
1657 -> 1656;
1658 -> 1637;
1658 -> 1593;
1659 -> 1593;
1660 -> 1594;
1660 -> 1645;
1660 -> 1659;
1660 -> 1593;
1661 -> 1660;
1661 -> 1593;
1662 -> 1593;
1663 -> 1661;
1663 -> 1662;
1664 -> 1595;
1664 -> 1662;
1665 -> 1663;
1665 -> 1660;
1665 -> 0;
1665 -> 1662;
1666 -> 1662;
1667 -> 1663;
1667 -> 1660;
1667 -> 0;
1667 -> 1662;
1668 -> 1663;
1668 -> 1660;
1668 -> 0;
1668 -> 1667;
1669 -> 1663;
1669 -> 1660;
1669 -> 0;
1669 -> 1662;
1670 -> 1663;
1670 -> 1660;
1670 -> 0;
1670 -> 1662;
1671 -> 1663;
1671 -> 1660;
1671 -> 0;
1671 -> 1662;
1672 -> 1663;
1672 -> 1660;
1672 -> 0;
1672 -> 1662;
1673 -> 1663;
1673 -> 1660;
1673 -> 0;
1673 -> 1662;
1674 -> 1662;
1675 -> 1674;
1675 -> 1662;
1676 -> 1662;
1677 -> 1676;
1677 -> 1662;
1678 -> 1662;
1679 -> 1677;
1679 -> 1678;
1680 -> 1664;
1680 -> 1678;
1681 -> 1678;
1682 -> 1678;
1683 -> 1682;
1683 -> 1662;
1684 -> 1683;
1684 -> 1662;
1685 -> 1663;
1686 -> 1663;
1687 -> 1685;
1687 -> 1686;
1688 -> 1664;
1688 -> 1686;
1689 -> 1687;
1689 -> 1663;
1689 -> 0;
1689 -> 1686;
1690 -> 1687;
1690 -> 1663;
1690 -> 1686;
1691 -> 1686;
1692 -> 1690;
1692 -> 1691;
1692 -> 1686;
1693 -> 1690;
1693 -> 1686;
1694 -> 1686;
1695 -> 1693;
1695 -> 1694;
1696 -> 1688;
1696 -> 1694;
1697 -> 1695;
1697 -> 1663;
1697 -> 0;
1697 -> 1694;
1698 -> 1694;
1699 -> 1695;
1699 -> 1663;
1699 -> 0;
1699 -> 1694;
1700 -> 1695;
1700 -> 1663;
1700 -> 0;
1700 -> 1699;
1701 -> 1695;
1701 -> 1663;
1701 -> 0;
1701 -> 1694;
1702 -> 1695;
1702 -> 1663;
1702 -> 0;
1702 -> 1694;
1703 -> 1695;
1703 -> 1663;
1703 -> 0;
1703 -> 1694;
1704 -> 1695;
1704 -> 1663;
1704 -> 0;
1704 -> 1694;
1705 -> 1695;
1705 -> 1663;
1705 -> 0;
1705 -> 1694;
1706 -> 1696;
1706 -> 1663;
1706 -> 1695;
1706 -> 1694;
1707 -> 1706;
1708 -> 1663;
1709 -> 1707;
1709 -> 1708;
1710 -> 1709;
1710 -> 1708;
1711 -> 1710;
1712 -> 1593;
1713 -> 1711;
1713 -> 1712;
1714 -> 1594;
1714 -> 1706;
1714 -> 1593;
1715 -> 1593;
1716 -> 1714;
1716 -> 1715;
1717 -> 1714;
1717 -> 1715;
1718 -> 1717;
1718 -> 1714;
1718 -> 1715;
1719 -> 1716;
1719 -> 1715;
1720 -> 1715;
1721 -> 1719;
1721 -> 1720;
1722 -> 1717;
1722 -> 1720;
1723 -> 1721;
1723 -> 1718;
1723 -> 0;
1723 -> 1720;
1724 -> 1723;
1725 -> 1716;
1725 -> 1715;
1726 -> 1715;
1727 -> 1725;
1727 -> 1726;
1728 -> 1717;
1728 -> 1726;
1729 -> 1727;
1729 -> 1718;
1729 -> 0;
1729 -> 1726;
1730 -> 1726;
1731 -> 1727;
1731 -> 1718;
1731 -> 0;
1731 -> 1726;
1732 -> 1727;
1732 -> 1718;
1732 -> 1731;
1733 -> 1731;
1734 -> 1732;
1734 -> 1733;
1735 -> 1734;
1735 -> 1718;
1735 -> 0;
1735 -> 1733;
1736 -> 1733;
1737 -> 1734;
1737 -> 1718;
1737 -> 0;
1738 -> 1734;
1738 -> 1718;
1738 -> 0;
1738 -> 1733;
1739 -> 1734;
1739 -> 1718;
1739 -> 0;
1739 -> 1733;
1740 -> 1734;
1740 -> 1718;
1740 -> 0;
1740 -> 1733;
1741 -> 1734;
1741 -> 1718;
1741 -> 0;
1741 -> 1733;
1742 -> 1734;
1742 -> 1718;
1742 -> 0;
1742 -> 1733;
1743 -> 1734;
1744 -> 1715;
1745 -> 1743;
1745 -> 1744;
1746 -> 1745;
1746 -> 1744;
1747 -> 1746;
1748 -> 1715;
1749 -> 1717;
1749 -> 1748;
1750 -> 1748;
1751 -> 1749;
1751 -> 1734;
1751 -> 1750;
1751 -> 1748;
1752 -> 1748;
1753 -> 1749;
1753 -> 1734;
1753 -> 1752;
1754 -> 1751;
1754 -> 1715;
1755 -> 1716;
1755 -> 1754;
1756 -> 1754;
1757 -> 1755;
1757 -> 1756;
1758 -> 1717;
1758 -> 1756;
1759 -> 1757;
1759 -> 1734;
1759 -> 1756;
1760 -> 1759;
1761 -> 1758;
1761 -> 1759;
1762 -> 1754;
1763 -> 1538;
1764 -> 1550;
1764 -> 1763;
1765 -> 1764;
1765 -> 1761;
1765 -> 1763;
1766 -> 1763;
1767 -> 1765;
1767 -> 1766;
1767 -> 1763;
1768 -> 1763;
1769 -> 1765;
1769 -> 1768;
1769 -> 1761;
1769 -> 1763;
1770 -> 1769;
1771 -> 1538;
1772 -> 1544;
1772 -> 1538;
1773 -> 1772;
1773 -> 1770;
1773 -> 1538;
1774 -> 1529;
1774 -> 1770;
1774 -> 1532;
1775 -> 1533;
1775 -> 1532;
1776 -> 1774;
1776 -> 1775;
1776 -> 1770;
1776 -> 1532;
1777 -> 1529;
1777 -> 1776;
1777 -> 1525;
1778 -> 1529;
1778 -> 1776;
1778 -> 1525;
1779 -> 1519;
1779 -> 1163;
1780 -> 1779;
1780 -> 1776;
1780 -> 1163;
1781 -> 1778;
1781 -> 1163;
1782 -> 1142;
1783 -> 1108;
1783 -> 1781;
1783 -> 1782;
1783 -> 1142;
1784 -> 1107;
1784 -> 1781;
1784 -> 1103;
1785 -> 1104;
1785 -> 0;
1785 -> 1103;
1786 -> 1106;
1786 -> 1103;
1787 -> 1109;
1787 -> 1103;
1788 -> 1107;
1788 -> 1103;
1789 -> 1786;
1789 -> 1787;
1789 -> 1788;
1789 -> 1108;
1789 -> 1098;
1789 -> 1784;
1789 -> 1103;
1790 -> 1103;
1791 -> 1093;
1792 -> 1098;
1792 -> 1789;
1792 -> 1093;
1793 -> 1086;
1793 -> 865;
1794 -> 1089;
1794 -> 1792;
1794 -> 1793;
1794 -> 1092;
1794 -> 1083;
1794 -> 1075;
1794 -> 1088;
1794 -> 865;
1795 -> 1086;
1795 -> 1794;
1795 -> 865;
1796 -> 1076;
1796 -> 865;
1797 -> 1078;
1797 -> 865;
1798 -> 1794;
1798 -> 1797;
1799 -> 1796;
1799 -> 1795;
1799 -> 1797;
1800 -> 1083;
1800 -> 1797;
1801 -> 1796;
1801 -> 1797;
1802 -> 1082;
1802 -> 1797;
1803 -> 1797;
1804 -> 1800;
1804 -> 1803;
1805 -> 1801;
1805 -> 1803;
1806 -> 1802;
1806 -> 1803;
1807 -> 1803;
1808 -> 1805;
1808 -> 1807;
1808 -> 1803;
1809 -> 1805;
1809 -> 1803;
1810 -> 1806;
1810 -> 1803;
1811 -> 1803;
1812 -> 1803;
1813 -> 1809;
1813 -> 1812;
1814 -> 1810;
1814 -> 1812;
1815 -> 1811;
1815 -> 1812;
1816 -> 1812;
1817 -> 1816;
1817 -> 1812;
1818 -> 1812;
1819 -> 1813;
1819 -> 1818;
1819 -> 1812;
1820 -> 1813;
1820 -> 1816;
1820 -> 1812;
1821 -> 1814;
1821 -> 1816;
1821 -> 1812;
1822 -> 1803;
1823 -> 1804;
1823 -> 1822;
1824 -> 1822;
1825 -> 1823;
1825 -> 1824;
1826 -> 1824;
1827 -> 1825;
1827 -> 1826;
1828 -> 1826;
1829 -> 1827;
1829 -> 1828;
1830 -> 1829;
1830 -> 1795;
1830 -> 1828;
1831 -> 1829;
1831 -> 1795;
1831 -> 1828;
1832 -> 1831;
1832 -> 1826;
1833 -> 1827;
1833 -> 1795;
1833 -> 1826;
1834 -> 1822;
1835 -> 1833;
1835 -> 1803;
1836 -> 1835;
1836 -> 1811;
1836 -> 1833;
1836 -> 1816;
1836 -> 1817;
1836 -> 1820;
1836 -> 1821;
1836 -> 1075;
1836 -> 1803;
1837 -> 1803;
1838 -> 1836;
1838 -> 1837;
1839 -> 1836;
1839 -> 1837;
1840 -> 1839;
1840 -> 1836;
1840 -> 1837;
1841 -> 1838;
1841 -> 1840;
1841 -> 1837;
1842 -> 1839;
1842 -> 1841;
1843 -> 1841;
1844 -> 1842;
1844 -> 1843;
1845 -> 1842;
1845 -> 1843;
1846 -> 1845;
1846 -> 1842;
1846 -> 1843;
1847 -> 1844;
1847 -> 1843;
1848 -> 1843;
1849 -> 1847;
1849 -> 1848;
1849 -> 1843;
1850 -> 1849;
1851 -> 1845;
1851 -> 1846;
1851 -> 1850;
1851 -> 1849;
1852 -> 1845;
1852 -> 1846;
1852 -> 1851;
1854 -> 1853;
1855 -> 1853;
1856 -> 1844;
1856 -> 1852;
1856 -> 1843;
1857 -> 1843;
1858 -> 1856;
1858 -> 1857;
1859 -> 1856;
1859 -> 1857;
1860 -> 1856;
1860 -> 1857;
1861 -> 1857;
1862 -> 1858;
1862 -> 1859;
1862 -> 1857;
1863 -> 1858;
1863 -> 1856;
1863 -> 1857;
1864 -> 1859;
1864 -> 1863;
1864 -> 1857;
1865 -> 1857;
1866 -> 1858;
1866 -> 1864;
1866 -> 1859;
1866 -> 1857;
1867 -> 1863;
1867 -> 1857;
1868 -> 1864;
1868 -> 1857;
1869 -> 1857;
1870 -> 1868;
1870 -> 1869;
1870 -> 1857;
1871 -> 1868;
1871 -> 1870;
1872 -> 1857;
1873 -> 1858;
1873 -> 1871;
1873 -> 1859;
1873 -> 1857;
1874 -> 1858;
1874 -> 1871;
1874 -> 1857;
1875 -> 1859;
1875 -> 1871;
1875 -> 1857;
1876 -> 1857;
1877 -> 1874;
1877 -> 1876;
1877 -> 1857;
1878 -> 1874;
1878 -> 1877;
1879 -> 1878;
1880 -> 1845;
1880 -> 1879;
1881 -> 1879;
1882 -> 1880;
1882 -> 1881;
1883 -> 1880;
1883 -> 1881;
1884 -> 1882;
1884 -> 1881;
1885 -> 1881;
1886 -> 1884;
1886 -> 1885;
1886 -> 1881;
1887 -> 1797;
1888 -> 865;
1889 -> 871;
1889 -> 1888;
1889 -> 1880;
1889 -> 841;
1890 -> 871;
1890 -> 865;
1891 -> 865;
1892 -> 1890;
1892 -> 1891;
1893 -> 1891;
1894 -> 1892;
1894 -> 1893;
1895 -> 1893;
1896 -> 1894;
1896 -> 1895;
1897 -> 1895;
1898 -> 1896;
1898 -> 1897;
1899 -> 1898;
1899 -> 1889;
1899 -> 1897;
1900 -> 1898;
1900 -> 1889;
1900 -> 1897;
1901 -> 1900;
1901 -> 1895;
1902 -> 1896;
1902 -> 1889;
1902 -> 1895;
1903 -> 1891;
1904 -> 1902;
1904 -> 865;
1905 -> 871;
1905 -> 865;
1906 -> 865;
1907 -> 1905;
1907 -> 1906;
1908 -> 1906;
1909 -> 1907;
1909 -> 1908;
1910 -> 1909;
1910 -> 1904;
1910 -> 1908;
1911 -> 1909;
1911 -> 1904;
1911 -> 1908;
1912 -> 1911;
1912 -> 1906;
1913 -> 865;
1914 -> 871;
1914 -> 865;
1915 -> 865;
1916 -> 1914;
1916 -> 1915;
1917 -> 1915;
1918 -> 1916;
1918 -> 1917;
1919 -> 1918;
1919 -> 1904;
1919 -> 1917;
1920 -> 1918;
1920 -> 1904;
1920 -> 1917;
1921 -> 1920;
1921 -> 1915;
1922 -> 871;
1922 -> 865;
1923 -> 871;
1923 -> 865;
1924 -> 865;
1925 -> 1923;
1925 -> 1924;
1926 -> 1925;
1926 -> 1904;
1926 -> 1924;
1927 -> 1926;
1927 -> 865;
1928 -> 1927;
1928 -> 1904;
1928 -> 865;
1929 -> 1927;
1929 -> 865;
1930 -> 1923;
1930 -> 1904;
1930 -> 865;
1931 -> 1927;
1931 -> 1928;
1932 -> 1922;
1932 -> 1904;
1932 -> 1928;
1933 -> 1928;
1934 -> 1931;
1934 -> 1933;
1935 -> 1932;
1935 -> 1933;
1936 -> 1923;
1936 -> 1933;
1937 -> 1936;
1937 -> 1904;
1937 -> 1933;
1938 -> 1934;
1938 -> 1933;
1939 -> 1937;
1939 -> 1938;
1939 -> 1933;
1940 -> 1933;
1941 -> 1934;
1941 -> 1933;
1942 -> 1940;
1942 -> 1933;
1943 -> 1936;
1943 -> 1904;
1943 -> 1941;
1943 -> 1942;
1943 -> 1933;
1944 -> 1934;
1944 -> 1933;
1945 -> 1933;
1946 -> 1933;
1947 -> 1944;
1947 -> 1946;
1948 -> 1945;
1948 -> 1946;
1949 -> 1948;
1949 -> 1946;
1950 -> 1946;
1951 -> 1947;
1951 -> 1950;
1951 -> 1946;
1952 -> 1947;
1952 -> 1948;
1952 -> 1946;
1953 -> 1934;
1953 -> 1933;
1954 -> 1945;
1954 -> 1933;
1955 -> 1936;
1955 -> 1943;
1955 -> 1953;
1955 -> 1954;
1955 -> 1952;
1955 -> 1933;
1956 -> 1955;
1956 -> 1945;
1956 -> 1933;
1957 -> 1934;
1957 -> 1956;
1958 -> 1955;
1958 -> 1956;
1959 -> 1935;
1959 -> 1956;
1960 -> 1956;
1961 -> 1957;
1961 -> 1960;
1962 -> 1958;
1962 -> 1960;
1963 -> 1959;
1963 -> 1960;
1964 -> 1936;
1964 -> 1960;
1965 -> 1964;
1965 -> 1955;
1965 -> 1960;
1966 -> 1960;
1967 -> 1962;
1967 -> 1966;
1968 -> 1967;
1968 -> 1955;
1968 -> 1966;
1969 -> 1968;
1969 -> 1960;
1970 -> 1965;
1970 -> 1955;
1970 -> 1960;
1971 -> 1964;
1971 -> 1955;
1971 -> 0;
1971 -> 1960;
1972 -> 1969;
1972 -> 1955;
1972 -> 1960;
1973 -> 1971;
1973 -> 1972;
1973 -> 1960;
1974 -> 1961;
1974 -> 1955;
1974 -> 1960;
1975 -> 1961;
1975 -> 1955;
1975 -> 1960;
1976 -> 1960;
1977 -> 1964;
1977 -> 1955;
1977 -> 1976;
1977 -> 1960;
1978 -> 1956;
1979 -> 1933;
1980 -> 1934;
1980 -> 1955;
1980 -> 1979;
1980 -> 1933;
1981 -> 1955;
1981 -> 1933;
1982 -> 1955;
1982 -> 1933;
1983 -> 871;
1983 -> 1982;
1983 -> 1980;
1983 -> 841;
1984 -> 871;
1984 -> 865;
1985 -> 1984;
1985 -> 1983;
1985 -> 865;
1986 -> 871;
1986 -> 865;
1987 -> 871;
1987 -> 865;
1988 -> 1987;
1988 -> 1985;
1988 -> 865;
1989 -> 865;
1990 -> 1989;
1990 -> 1988;
1990 -> 1985;
1990 -> 865;
1991 -> 865;
1992 -> 871;
1992 -> 1991;
1992 -> 1985;
1992 -> 841;
1993 -> 871;
1993 -> 865;
1994 -> 871;
1994 -> 865;
1995 -> 1993;
1995 -> 1992;
1995 -> 865;
1996 -> 1994;
1996 -> 1992;
1996 -> 865;
1997 -> 1993;
1997 -> 865;
1998 -> 865;
1999 -> 1996;
1999 -> 1998;
2000 -> 1997;
2000 -> 1998;
2001 -> 1994;
2001 -> 1998;
2002 -> 1999;
2002 -> 1992;
2002 -> 1998;
2003 -> 2002;
2004 -> 1999;
2004 -> 1992;
2004 -> 2002;
2005 -> 2002;
2006 -> 2005;
2006 -> 2004;
2006 -> 1992;
2006 -> 2002;
2007 -> 2000;
2007 -> 1992;
2007 -> 2002;
2008 -> 1999;
2008 -> 2002;
2009 -> 2003;
2009 -> 2002;
2010 -> 2002;
2011 -> 2003;
2011 -> 2009;
2011 -> 2002;
2012 -> 2009;
2012 -> 1998;
2013 -> 871;
2013 -> 2012;
2013 -> 2011;
2013 -> 2009;
2013 -> 841;
2014 -> 871;
2014 -> 865;
2015 -> 2014;
2015 -> 2013;
2015 -> 865;
2016 -> 871;
2016 -> 865;
2017 -> 871;
2017 -> 865;
2018 -> 2016;
2018 -> 2015;
2018 -> 865;
2019 -> 2018;
2020 -> 871;
2020 -> 865;
2021 -> 871;
2021 -> 865;
2022 -> 2020;
2022 -> 2019;
2022 -> 865;
2023 -> 865;
2024 -> 2022;
2024 -> 2023;
2025 -> 2021;
2025 -> 2023;
2026 -> 2025;
2026 -> 2019;
2026 -> 2023;
2027 -> 2026;
2027 -> 865;
2028 -> 865;
2029 -> 871;
2029 -> 865;
2030 -> 871;
2030 -> 865;
2031 -> 2029;
2031 -> 2027;
2031 -> 865;
2032 -> 865;
2033 -> 2031;
2033 -> 2032;
2034 -> 2030;
2034 -> 2032;
2035 -> 2032;
2036 -> 2033;
2036 -> 2032;
2037 -> 2032;
2038 -> 2036;
2038 -> 2037;
2039 -> 2034;
2039 -> 2037;
2040 -> 2037;
2041 -> 2039;
2041 -> 2040;
2042 -> 2040;
2043 -> 2042;
2043 -> 2041;
2043 -> 2040;
2044 -> 2040;
2045 -> 2041;
2045 -> 2044;
2046 -> 2045;
2046 -> 2027;
2046 -> 2043;
2046 -> 2044;
2047 -> 2046;
2047 -> 2040;
2048 -> 2047;
2048 -> 2037;
2049 -> 2037;
2050 -> 2039;
2050 -> 2049;
2051 -> 2050;
2051 -> 2046;
2051 -> 2049;
2052 -> 2051;
2052 -> 2037;
2053 -> 2052;
2054 -> 2048;
2054 -> 2053;
2054 -> 2052;
2055 -> 2039;
2055 -> 2051;
2055 -> 2037;
2056 -> 2039;
2056 -> 2051;
2056 -> 2037;
2057 -> 2038;
2057 -> 2037;
2058 -> 0;
2058 -> 2037;
2059 -> 2055;
2059 -> 2037;
2060 -> 2037;
2061 -> 2056;
2061 -> 2060;
2062 -> 2057;
2062 -> 2060;
2063 -> 2058;
2063 -> 2060;
2064 -> 2059;
2064 -> 2060;
2065 -> 2039;
2065 -> 2060;
2066 -> 2061;
2066 -> 2060;
2067 -> 2063;
2067 -> 2066;
2068 -> 2062;
2068 -> 2066;
2069 -> 2066;
2070 -> 2067;
2070 -> 2069;
2071 -> 2068;
2071 -> 2069;
2072 -> 2065;
2072 -> 2069;
2073 -> 2070;
2073 -> 0;
2073 -> 2069;
2074 -> 2069;
2075 -> 2073;
2075 -> 2069;
2076 -> 2072;
2076 -> 2051;
2076 -> 2075;
2076 -> 2073;
2076 -> 2069;
2077 -> 2076;
2077 -> 2072;
2077 -> 2069;
2078 -> 2076;
2078 -> 2069;
2079 -> 2066;
2080 -> 2063;
2080 -> 0;
2080 -> 2066;
2081 -> 2066;
2082 -> 2080;
2082 -> 2081;
2083 -> 2065;
2083 -> 2081;
2084 -> 2083;
2084 -> 2076;
2084 -> 2081;
2085 -> 2081;
2086 -> 2082;
2086 -> 2085;
2086 -> 2081;
2087 -> 2086;
2088 -> 2084;
2088 -> 2076;
2088 -> 2087;
2088 -> 2086;
2089 -> 0;
2089 -> 2086;
2090 -> 2086;
2091 -> 2088;
2091 -> 2090;
2091 -> 2086;
2092 -> 2084;
2092 -> 2091;
2093 -> 2086;
2093 -> 2091;
2094 -> 2084;
2094 -> 2091;
2095 -> 2092;
2095 -> 2091;
2096 -> 2092;
2096 -> 2086;
2097 -> 2096;
2097 -> 2095;
2097 -> 2087;
2097 -> 2086;
2098 -> 2097;
2098 -> 2081;
2099 -> 2063;
2099 -> 0;
2099 -> 2066;
2100 -> 2098;
2100 -> 2066;
2101 -> 2062;
2101 -> 2066;
2102 -> 2099;
2102 -> 2100;
2102 -> 2101;
2102 -> 2064;
2102 -> 2097;
2102 -> 2066;
2103 -> 2066;
2104 -> 2102;
2104 -> 2103;
2105 -> 2102;
2105 -> 2103;
2106 -> 2102;
2106 -> 2103;
2107 -> 2102;
2107 -> 2103;
2108 -> 2104;
2108 -> 2103;
2109 -> 2105;
2109 -> 2103;
2110 -> 2107;
2110 -> 2102;
2110 -> 2103;
2111 -> 0;
2111 -> 2103;
2112 -> 2106;
2112 -> 2103;
2113 -> 2103;
2114 -> 2111;
2114 -> 2113;
2115 -> 2112;
2115 -> 2113;
2116 -> 2107;
2116 -> 2113;
2117 -> 2114;
2117 -> 2113;
2118 -> 2117;
2118 -> 2116;
2118 -> 2102;
2118 -> 2113;
2119 -> 2113;
2120 -> 2119;
2121 -> 2118;
2121 -> 2120;
2122 -> 2121;
2122 -> 2119;
2123 -> 2118;
2123 -> 2113;
2124 -> 2115;
2124 -> 2113;
2125 -> 0;
2125 -> 2113;
2126 -> 2123;
2126 -> 2124;
2126 -> 2125;
2126 -> 2118;
2126 -> 0;
2126 -> 2113;
2127 -> 2118;
2127 -> 2113;
2128 -> 2127;
2128 -> 2103;
2129 -> 2108;
2129 -> 2109;
2129 -> 2110;
2129 -> 2128;
2129 -> 2126;
2129 -> 2103;
2130 -> 2129;
2130 -> 2063;
2130 -> 2066;
2131 -> 2129;
2131 -> 2066;
2132 -> 2098;
2132 -> 2066;
2133 -> 2129;
2133 -> 2066;
2134 -> 2065;
2134 -> 2132;
2134 -> 2133;
2134 -> 2131;
2134 -> 2066;
2135 -> 2037;
2136 -> 2048;
2136 -> 0;
2136 -> 2037;
2137 -> 2037;
2138 -> 2039;
2138 -> 2134;
2138 -> 2136;
2139 -> 2038;
2139 -> 2136;
2140 -> 0;
2140 -> 2136;
2141 -> 2055;
2141 -> 2136;
2142 -> 2136;
2143 -> 2138;
2143 -> 2142;
2144 -> 2139;
2144 -> 2142;
2145 -> 2140;
2145 -> 2142;
2146 -> 2141;
2146 -> 2142;
2147 -> 2039;
2147 -> 2142;
2148 -> 2143;
2149 -> 2143;
2150 -> 2143;
2151 -> 2143;
2151 -> 2145;
2152 -> 2136;
2153 -> 2048;
2153 -> 0;
2153 -> 2037;
2154 -> 2037;
2155 -> 2048;
2155 -> 0;
2155 -> 2037;
2156 -> 2037;
2157 -> 2048;
2157 -> 0;
2157 -> 2037;
2158 -> 2037;
2159 -> 2048;
2159 -> 0;
2159 -> 2037;
2160 -> 2037;
2161 -> 2048;
2161 -> 0;
2161 -> 2037;
2162 -> 2037;
2163 -> 2048;
2163 -> 0;
2163 -> 2037;
2164 -> 2037;
2165 -> 2032;
2166 -> 2035;
2166 -> 2032;
2167 -> 2034;
2167 -> 2143;
2167 -> 2032;
2168 -> 2166;
2168 -> 2167;
2168 -> 2035;
2168 -> 2143;
2168 -> 2032;
2169 -> 2035;
2169 -> 2032;
2170 -> 2034;
2170 -> 2168;
2170 -> 2032;
2171 -> 2035;
2171 -> 2032;
2172 -> 2034;
2172 -> 2170;
2172 -> 2032;
2173 -> 2035;
2173 -> 2032;
2174 -> 2034;
2174 -> 2172;
2174 -> 2032;
2175 -> 2035;
2175 -> 2032;
2176 -> 2034;
2176 -> 2174;
2176 -> 2032;
2177 -> 2035;
2177 -> 2032;
2178 -> 2034;
2178 -> 2176;
2178 -> 2032;
2179 -> 2035;
2179 -> 2032;
2180 -> 2034;
2180 -> 2178;
2180 -> 2032;
2181 -> 2035;
2181 -> 2032;
2182 -> 2034;
2182 -> 2180;
2182 -> 2032;
2183 -> 2035;
2183 -> 2182;
2183 -> 2032;
2184 -> 865;
2185 -> 871;
2185 -> 865;
2186 -> 871;
2186 -> 865;
2187 -> 2185;
2187 -> 865;
2188 -> 2185;
2188 -> 2183;
2188 -> 865;
2189 -> 865;
2190 -> 2186;
2190 -> 2189;
2191 -> 2189;
2192 -> 2190;
2192 -> 2191;
2193 -> 2191;
2194 -> 2192;
2194 -> 2193;
2195 -> 2193;
2196 -> 2194;
2196 -> 2195;
2197 -> 2196;
2197 -> 2183;
2197 -> 2195;
2198 -> 2196;
2198 -> 2183;
2198 -> 2195;
2199 -> 2198;
2199 -> 2193;
2200 -> 2189;
2201 -> 2183;
2201 -> 865;
2202 -> 865;
2203 -> 2186;
2203 -> 2202;
2204 -> 871;
2204 -> 865;
2205 -> 871;
2205 -> 865;
2206 -> 871;
2206 -> 865;
2207 -> 871;
2207 -> 865;
2208 -> 865;
2209 -> 2207;
2209 -> 2183;
2209 -> 2208;
2210 -> 2208;
2211 -> 2210;
2212 -> 2211;
2213 -> 2209;
2213 -> 2212;
2214 -> 2213;
2214 -> 2211;
2215 -> 2208;
2216 -> 2209;
2216 -> 865;
2217 -> 2216;
2217 -> 2204;
2217 -> 2209;
2217 -> 865;
2218 -> 865;
2219 -> 2218;
2219 -> 865;
2220 -> 2206;
2220 -> 2219;
2220 -> 2183;
2220 -> 2218;
2220 -> 2209;
2220 -> 865;
2221 -> 865;
2222 -> 2218;
2222 -> 2220;
2222 -> 865;
2223 -> 2222;
2224 -> 2218;
2224 -> 2222;
2224 -> 865;
2225 -> 2223;
2225 -> 865;
2226 -> 871;
2226 -> 2225;
2226 -> 2224;
2226 -> 841;
2227 -> 871;
2227 -> 865;
2228 -> 871;
2228 -> 865;
2229 -> 865;
2230 -> 871;
2230 -> 2229;
2230 -> 2226;
2230 -> 841;
2231 -> 2185;
2231 -> 2230;
2231 -> 865;
2232 -> 2196;
2232 -> 2230;
2232 -> 2195;
2233 -> 2196;
2233 -> 2230;
2233 -> 2195;
2234 -> 2233;
2234 -> 2193;
2235 -> 2230;
2235 -> 865;
2236 -> 2230;
2236 -> 2212;
2237 -> 2236;
2237 -> 2211;
2238 -> 2230;
2238 -> 865;
2239 -> 2238;
2239 -> 2204;
2239 -> 2230;
2239 -> 865;
2240 -> 871;
2240 -> 865;
2241 -> 871;
2241 -> 865;
2242 -> 865;
2243 -> 2241;
2243 -> 2230;
2243 -> 865;
2244 -> 2242;
2244 -> 2243;
2244 -> 2230;
2244 -> 865;
2245 -> 865;
2246 -> 2242;
2246 -> 2244;
2246 -> 2245;
2246 -> 865;
2247 -> 2242;
2247 -> 2244;
2247 -> 2246;
2248 -> 2247;
2248 -> 2246;
2249 -> 2248;
2249 -> 2247;
2249 -> 0;
2250 -> 2249;
2251 -> 2248;
2251 -> 2247;
2251 -> 2249;
2252 -> 871;
2252 -> 865;
2253 -> 2252;
2253 -> 2250;
2253 -> 865;
2254 -> 2252;
2254 -> 2250;
2254 -> 2253;
2255 -> 0;
2255 -> 2254;
2256 -> 871;
2256 -> 865;
2257 -> 2256;
2257 -> 2255;
2257 -> 865;
2258 -> 871;
2258 -> 865;
2259 -> 871;
2259 -> 865;
2260 -> 2259;
2260 -> 865;
2261 -> 2258;
2261 -> 865;
2262 -> 2259;
2262 -> 2257;
2262 -> 865;
2263 -> 2260;
2263 -> 2261;
2263 -> 2262;
2263 -> 2259;
2263 -> 2257;
2263 -> 865;
2264 -> 865;
2265 -> 2263;
2265 -> 0;
2265 -> 2264;
2266 -> 2264;
2267 -> 2263;
2268 -> 2267;
2268 -> 2263;
2269 -> 2263;
2269 -> 2264;
2270 -> 2264;
2271 -> 2270;
2272 -> 2263;
2272 -> 2271;
2273 -> 2272;
2273 -> 2270;
2274 -> 2264;
2275 -> 2264;
2276 -> 871;
2276 -> 865;
2277 -> 871;
2277 -> 865;
2278 -> 871;
2278 -> 865;
2279 -> 871;
2279 -> 865;
2280 -> 871;
2280 -> 865;
2281 -> 871;
2281 -> 865;
2282 -> 2276;
2282 -> 865;
2283 -> 2282;
2283 -> 2263;
2283 -> 865;
2284 -> 865;
2285 -> 2279;
2285 -> 2284;
2285 -> 865;
2286 -> 2276;
2286 -> 865;
2287 -> 2277;
2287 -> 865;
2288 -> 2278;
2288 -> 865;
2289 -> 2280;
2289 -> 865;
2290 -> 865;
2291 -> 2286;
2291 -> 2290;
2292 -> 2287;
2292 -> 2290;
2293 -> 2288;
2293 -> 2290;
2294 -> 2289;
2294 -> 2290;
2295 -> 2281;
2295 -> 2290;
2296 -> 2290;
2297 -> 2290;
2298 -> 2291;
2298 -> 2283;
2298 -> 2290;
2299 -> 2298;
2299 -> 2283;
2299 -> 2290;
2300 -> 2291;
2300 -> 2283;
2300 -> 2290;
2301 -> 2291;
2301 -> 2300;
2301 -> 2290;
2302 -> 2294;
2302 -> 2301;
2303 -> 2291;
2303 -> 2300;
2303 -> 2302;
2304 -> 2298;
2304 -> 2302;
2305 -> 2302;
2306 -> 2304;
2306 -> 2305;
2307 -> 2305;
2308 -> 2306;
2308 -> 2307;
2308 -> 2305;
2309 -> 2308;
2310 -> 2306;
2310 -> 2300;
2310 -> 2308;
2311 -> 2305;
2312 -> 2311;
2312 -> 2302;
2313 -> 2303;
2313 -> 2312;
2313 -> 2302;
2314 -> 2291;
2314 -> 2313;
2315 -> 2291;
2315 -> 2300;
2315 -> 2313;
2316 -> 2290;
2317 -> 2295;
2317 -> 2300;
2317 -> 2316;
2317 -> 2290;
2318 -> 2291;
2318 -> 2300;
2318 -> 2290;
2319 -> 865;
2320 -> 2279;
2320 -> 2319;
2320 -> 865;
2321 -> 2318;
2321 -> 2320;
2322 -> 871;
2322 -> 865;
2323 -> 871;
2323 -> 865;
2324 -> 871;
2324 -> 865;
2325 -> 871;
2325 -> 865;
2326 -> 865;
2327 -> 2324;
2327 -> 2326;
2327 -> 865;
2328 -> 2322;
2328 -> 2321;
2328 -> 865;
2329 -> 2322;
2329 -> 2328;
2330 -> 2323;
2330 -> 2328;
2331 -> 2324;
2331 -> 2328;
2332 -> 2328;
2333 -> 2328;
2334 -> 2329;
2334 -> 2333;
2335 -> 2330;
2335 -> 2333;
2336 -> 2331;
2336 -> 2333;
2337 -> 2332;
2337 -> 2333;
2338 -> 2332;
2338 -> 2333;
2339 -> 2325;
2339 -> 2333;
2340 -> 2334;
2340 -> 2321;
2340 -> 2333;
2341 -> 2333;
2342 -> 2336;
2342 -> 2341;
2342 -> 2333;
2343 -> 2334;
2343 -> 2340;
2343 -> 2333;
2344 -> 2334;
2344 -> 2340;
2344 -> 2343;
2345 -> 2334;
2345 -> 2340;
2345 -> 0;
2345 -> 2333;
2346 -> 2334;
2346 -> 2340;
2346 -> 2333;
2347 -> 2338;
2347 -> 2346;
2348 -> 2347;
2349 -> 2347;
2350 -> 2334;
2350 -> 2340;
2350 -> 2347;
2351 -> 2347;
2352 -> 2350;
2352 -> 2351;
2353 -> 2351;
2354 -> 2352;
2354 -> 2353;
2355 -> 2353;
2356 -> 2354;
2356 -> 2355;
2356 -> 2353;
2357 -> 2353;
2358 -> 2357;
2358 -> 2351;
2359 -> 2334;
2359 -> 2340;
2359 -> 2358;
2360 -> 2334;
2360 -> 2340;
2360 -> 2333;
2361 -> 2339;
2361 -> 2340;
2361 -> 2333;
2362 -> 2334;
2362 -> 2340;
2362 -> 2333;
2363 -> 871;
2363 -> 865;
2364 -> 871;
2364 -> 865;
2365 -> 871;
2365 -> 865;
2366 -> 871;
2366 -> 865;
2367 -> 871;
2367 -> 865;
2368 -> 871;
2368 -> 865;
2369 -> 865;
2370 -> 2365;
2370 -> 2369;
2370 -> 865;
2371 -> 2363;
2371 -> 2361;
2371 -> 865;
2372 -> 2363;
2372 -> 2361;
2372 -> 2371;
2373 -> 2363;
2373 -> 2361;
2373 -> 0;
2373 -> 865;
2374 -> 2363;
2374 -> 2361;
2374 -> 865;
2375 -> 2367;
2375 -> 2374;
2376 -> 2363;
2376 -> 2361;
2376 -> 865;
2377 -> 871;
2377 -> 865;
2378 -> 871;
2378 -> 865;
2379 -> 871;
2379 -> 865;
2380 -> 2379;
2380 -> 2361;
2380 -> 865;
2381 -> 2377;
2381 -> 865;
2382 -> 2380;
2382 -> 2381;
2382 -> 865;
2383 -> 865;
2384 -> 2377;
2384 -> 2383;
2384 -> 865;
2385 -> 865;
2386 -> 2377;
2386 -> 865;
2387 -> 2385;
2387 -> 865;
2388 -> 2379;
2388 -> 2361;
2388 -> 2386;
2388 -> 2387;
2388 -> 865;
2389 -> 2388;
2390 -> 2363;
2390 -> 2389;
2390 -> 865;
2391 -> 2363;
2391 -> 2389;
2391 -> 2390;
2392 -> 2363;
2392 -> 2389;
2392 -> 0;
2392 -> 865;
2393 -> 2363;
2393 -> 2389;
2393 -> 865;
2394 -> 2367;
2394 -> 2393;
2395 -> 2363;
2395 -> 2389;
2395 -> 865;
2396 -> 871;
2396 -> 865;
2397 -> 871;
2397 -> 865;
2398 -> 2396;
2398 -> 865;
2399 -> 865;
2400 -> 2398;
2400 -> 2399;
2400 -> 2389;
2400 -> 865;
2401 -> 2396;
2401 -> 865;
2402 -> 2401;
2402 -> 2389;
2402 -> 2400;
2402 -> 865;
2403 -> 865;
2404 -> 2402;
2404 -> 2403;
2405 -> 2404;
2405 -> 2402;
2405 -> 2403;
2406 -> 2404;
2406 -> 2402;
2406 -> 2405;
2407 -> 2406;
2407 -> 2405;
2408 -> 2405;
2409 -> 2407;
2409 -> 2408;
2410 -> 2409;
2410 -> 2402;
2410 -> 0;
2410 -> 2408;
2411 -> 2409;
2411 -> 2402;
2411 -> 2408;
2412 -> 2408;
2413 -> 2411;
2413 -> 2412;
2414 -> 2412;
2415 -> 2413;
2415 -> 2414;
2415 -> 2412;
2416 -> 2415;
2417 -> 2413;
2417 -> 2402;
2417 -> 2415;
2418 -> 2412;
2419 -> 2418;
2419 -> 2408;
2420 -> 2410;
2420 -> 2419;
2420 -> 2408;
2421 -> 2403;
2422 -> 2421;
2422 -> 865;
2423 -> 2402;
2423 -> 2422;
2423 -> 865;
2424 -> 2396;
2424 -> 865;
2425 -> 2423;
2425 -> 865;
2426 -> 865;
2427 -> 2425;
2427 -> 2426;
2428 -> 2427;
2428 -> 2425;
2428 -> 2426;
2429 -> 2427;
2429 -> 2425;
2429 -> 2428;
2430 -> 2429;
2430 -> 2428;
2431 -> 2428;
2432 -> 2430;
2432 -> 2431;
2433 -> 2432;
2433 -> 2425;
2433 -> 0;
2433 -> 2431;
2434 -> 2432;
2434 -> 2425;
2434 -> 2431;
2435 -> 2431;
2436 -> 2434;
2436 -> 2435;
2437 -> 2435;
2438 -> 2436;
2438 -> 2437;
2438 -> 2435;
2439 -> 2438;
2440 -> 2436;
2440 -> 2425;
2440 -> 2438;
2441 -> 2435;
2442 -> 2441;
2442 -> 2431;
2443 -> 2433;
2443 -> 2442;
2443 -> 2431;
2444 -> 2426;
2445 -> 2423;
2445 -> 865;
2446 -> 2396;
2446 -> 2445;
2447 -> 2445;
2448 -> 2446;
2448 -> 2447;
2448 -> 2389;
2448 -> 2425;
2448 -> 2445;
2449 -> 2323;
2449 -> 2448;
2450 -> 2324;
2450 -> 2448;
2451 -> 2449;
2451 -> 2448;
2452 -> 2450;
2452 -> 2448;
2453 -> 2448;
2454 -> 2448;
2455 -> 2448;
2456 -> 2452;
2456 -> 2455;
2456 -> 2448;
2457 -> 2448;
2458 -> 2448;
2458 -> 2457;
2459 -> 2448;
2459 -> 0;
2460 -> 2448;
2461 -> 2454;
2461 -> 2460;
2462 -> 2461;
2463 -> 2461;
2464 -> 2448;
2464 -> 2461;
2465 -> 2461;
2466 -> 2464;
2466 -> 2465;
2467 -> 2465;
2468 -> 2466;
2468 -> 2467;
2469 -> 2467;
2470 -> 2468;
2470 -> 2469;
2470 -> 2467;
2471 -> 2467;
2472 -> 2471;
2472 -> 2465;
2473 -> 2448;
2473 -> 2472;
2474 -> 2448;
2475 -> 871;
2475 -> 865;
2476 -> 871;
2476 -> 865;
2477 -> 871;
2477 -> 865;
2478 -> 2475;
2478 -> 2448;
2478 -> 865;
2479 -> 865;
2480 -> 2478;
2480 -> 2479;
2480 -> 865;
2481 -> 2476;
2481 -> 0;
2481 -> 2480;
2482 -> 2478;
2482 -> 2476;
2482 -> 2480;
2483 -> 2476;
2483 -> 0;
2483 -> 2482;
2484 -> 2323;
2484 -> 2482;
2485 -> 2324;
2485 -> 2482;
2486 -> 2484;
2486 -> 2482;
2487 -> 2485;
2487 -> 2482;
2488 -> 2482;
2489 -> 2482;
2490 -> 2482;
2491 -> 2487;
2491 -> 2490;
2491 -> 2482;
2492 -> 2482;
2493 -> 2482;
2493 -> 2492;
2494 -> 2482;
2494 -> 0;
2495 -> 2482;
2496 -> 2489;
2496 -> 2495;
2497 -> 2496;
2498 -> 2496;
2499 -> 2482;
2499 -> 2496;
2500 -> 2496;
2501 -> 2499;
2501 -> 2500;
2502 -> 2500;
2503 -> 2501;
2503 -> 2502;
2504 -> 2502;
2505 -> 2503;
2505 -> 2504;
2505 -> 2502;
2506 -> 2502;
2507 -> 2506;
2507 -> 2500;
2508 -> 2482;
2508 -> 2507;
2509 -> 2482;
2510 -> 2363;
2510 -> 2482;
2510 -> 865;
2511 -> 2363;
2511 -> 2482;
2511 -> 2510;
2512 -> 2363;
2512 -> 2482;
2512 -> 0;
2512 -> 865;
2513 -> 2363;
2513 -> 2482;
2513 -> 865;
2514 -> 2367;
2514 -> 2513;
2515 -> 2363;
2515 -> 2482;
2515 -> 865;
2516 -> 2379;
2516 -> 2482;
2516 -> 865;
2517 -> 2482;
2517 -> 2403;
2518 -> 2517;
2518 -> 2482;
2518 -> 2403;
2519 -> 2517;
2519 -> 2482;
2519 -> 2518;
2520 -> 2519;
2520 -> 2518;
2521 -> 2518;
2522 -> 2520;
2522 -> 2521;
2523 -> 2522;
2523 -> 2482;
2523 -> 0;
2523 -> 2521;
2524 -> 2522;
2524 -> 2482;
2524 -> 2521;
2525 -> 2521;
2526 -> 2524;
2526 -> 2525;
2527 -> 2525;
2528 -> 2526;
2528 -> 2527;
2528 -> 2525;
2529 -> 2528;
2530 -> 2526;
2530 -> 2482;
2530 -> 2528;
2531 -> 2525;
2532 -> 2531;
2532 -> 2521;
2533 -> 2523;
2533 -> 2532;
2533 -> 2521;
2534 -> 2482;
2534 -> 2426;
2535 -> 2534;
2535 -> 2482;
2535 -> 2426;
2536 -> 2534;
2536 -> 2482;
2536 -> 2535;
2537 -> 2536;
2537 -> 2535;
2538 -> 2535;
2539 -> 2537;
2539 -> 2538;
2540 -> 2539;
2540 -> 2482;
2540 -> 0;
2540 -> 2538;
2541 -> 2539;
2541 -> 2482;
2541 -> 2538;
2542 -> 2538;
2543 -> 2541;
2543 -> 2542;
2544 -> 2542;
2545 -> 2543;
2545 -> 2544;
2545 -> 2542;
2546 -> 2545;
2547 -> 2543;
2547 -> 2482;
2547 -> 2545;
2548 -> 2542;
2549 -> 2548;
2549 -> 2538;
2550 -> 2540;
2550 -> 2549;
2550 -> 2538;
2551 -> 2291;
2551 -> 2482;
2551 -> 2290;
2552 -> 2551;
2552 -> 2482;
2552 -> 2290;
2553 -> 2291;
2553 -> 2482;
2553 -> 2290;
2554 -> 2294;
2554 -> 2553;
2555 -> 2291;
2555 -> 2482;
2555 -> 2554;
2556 -> 2551;
2556 -> 2554;
2557 -> 2554;
2558 -> 2556;
2558 -> 2557;
2559 -> 2557;
2560 -> 2558;
2560 -> 2559;
2560 -> 2557;
2561 -> 2560;
2562 -> 2558;
2562 -> 2482;
2562 -> 2560;
2563 -> 2557;
2564 -> 2563;
2564 -> 2554;
2565 -> 2555;
2565 -> 2564;
2565 -> 2554;
2566 -> 2291;
2566 -> 2565;
2567 -> 2291;
2567 -> 2482;
2567 -> 2565;
2568 -> 2295;
2568 -> 2482;
2568 -> 2316;
2568 -> 2290;
2569 -> 2505;
2570 -> 2503;
2570 -> 2482;
2570 -> 2505;
2571 -> 871;
2571 -> 865;
2572 -> 2571;
2572 -> 2482;
2572 -> 865;
2573 -> 865;
2574 -> 1922;
2574 -> 2572;
2575 -> 2574;
2575 -> 2572;
2576 -> 2572;
2577 -> 2572;
2578 -> 1987;
2578 -> 2577;
2578 -> 865;
2579 -> 1989;
2579 -> 2578;
2579 -> 2577;
2579 -> 865;
2580 -> 871;
2580 -> 865;
2581 -> 2580;
2581 -> 865;
2582 -> 2581;
2582 -> 2580;
2582 -> 2577;
2582 -> 865;
2583 -> 865;
2584 -> 2020;
2584 -> 2582;
2584 -> 865;
2585 -> 2584;
2585 -> 2023;
2586 -> 2582;
2586 -> 2037;
2587 -> 2586;
2588 -> 2582;
2588 -> 0;
2588 -> 2037;
2589 -> 2582;
2589 -> 0;
2589 -> 2037;
2590 -> 2582;
2590 -> 0;
2590 -> 2037;
2591 -> 2582;
2591 -> 0;
2591 -> 2037;
2592 -> 2582;
2592 -> 0;
2592 -> 2037;
2593 -> 2582;
2593 -> 0;
2593 -> 2037;
2594 -> 871;
2594 -> 865;
2595 -> 865;
2596 -> 2594;
2596 -> 2582;
2596 -> 2595;
2596 -> 865;
2597 -> 0;
2597 -> 865;
2598 -> 2291;
2598 -> 2596;
2598 -> 2290;
2599 -> 2598;
2599 -> 2596;
2599 -> 2290;
2600 -> 2291;
2600 -> 2596;
2600 -> 2290;
2601 -> 2294;
2601 -> 2600;
2602 -> 2291;
2602 -> 2596;
2602 -> 2601;
2603 -> 2598;
2603 -> 2601;
2604 -> 2601;
2605 -> 2603;
2605 -> 2604;
2606 -> 2604;
2607 -> 2605;
2607 -> 2606;
2607 -> 2604;
2608 -> 2607;
2609 -> 2605;
2609 -> 2596;
2609 -> 2607;
2610 -> 2604;
2611 -> 2610;
2611 -> 2601;
2612 -> 2602;
2612 -> 2611;
2612 -> 2601;
2613 -> 2291;
2613 -> 2612;
2614 -> 2291;
2614 -> 2596;
2614 -> 2612;
2615 -> 2295;
2615 -> 2596;
2615 -> 2316;
2615 -> 2290;
2616 -> 2363;
2616 -> 2596;
2616 -> 865;
2617 -> 2363;
2617 -> 2596;
2617 -> 2616;
2618 -> 2363;
2618 -> 2596;
2618 -> 0;
2618 -> 865;
2619 -> 2363;
2619 -> 2596;
2619 -> 865;
2620 -> 2367;
2620 -> 2619;
2621 -> 2363;
2621 -> 2596;
2621 -> 865;
2622 -> 2379;
2622 -> 2596;
2622 -> 865;
2623 -> 2323;
2623 -> 2596;
2624 -> 2324;
2624 -> 2596;
2625 -> 2623;
2625 -> 2596;
2626 -> 2624;
2626 -> 2596;
2627 -> 2596;
2628 -> 2596;
2629 -> 2596;
2630 -> 2626;
2630 -> 2629;
2630 -> 2596;
2631 -> 2596;
2632 -> 2596;
2632 -> 2631;
2633 -> 2596;
2633 -> 0;
2634 -> 2596;
2635 -> 2628;
2635 -> 2634;
2636 -> 2635;
2637 -> 2635;
2638 -> 2596;
2638 -> 2635;
2639 -> 2635;
2640 -> 2638;
2640 -> 2639;
2641 -> 2639;
2642 -> 2640;
2642 -> 2641;
2643 -> 2641;
2644 -> 2642;
2644 -> 2643;
2644 -> 2641;
2645 -> 2641;
2646 -> 2645;
2646 -> 2639;
2647 -> 2596;
2647 -> 2646;
2648 -> 2596;
2649 -> 2476;
2649 -> 0;
2649 -> 2596;
2650 -> 2379;
2650 -> 2622;
2651 -> 2363;
2651 -> 2650;
2651 -> 865;
2652 -> 2363;
2652 -> 2650;
2652 -> 2651;
2653 -> 2363;
2653 -> 2650;
2653 -> 0;
2653 -> 865;
2654 -> 2363;
2654 -> 2650;
2654 -> 865;
2655 -> 2367;
2655 -> 2654;
2656 -> 2655;
2657 -> 2655;
2658 -> 2363;
2658 -> 2650;
2658 -> 2655;
2659 -> 2655;
2660 -> 2658;
2660 -> 2659;
2661 -> 2659;
2662 -> 2660;
2662 -> 2661;
2663 -> 2661;
2664 -> 2662;
2664 -> 2663;
2664 -> 2661;
2665 -> 2661;
2666 -> 2665;
2666 -> 2659;
2667 -> 2363;
2667 -> 2650;
2667 -> 2666;
2668 -> 2363;
2668 -> 2650;
2668 -> 865;
2669 -> 2185;
2669 -> 2650;
2669 -> 865;
2670 -> 2196;
2670 -> 2650;
2670 -> 2195;
2671 -> 2196;
2671 -> 2650;
2671 -> 2195;
2672 -> 2671;
2672 -> 2193;
2673 -> 2650;
2673 -> 865;
2674 -> 2650;
2674 -> 2212;
2675 -> 2674;
2675 -> 2211;
2676 -> 2650;
2676 -> 865;
2677 -> 2676;
2677 -> 2204;
2677 -> 2650;
2677 -> 865;
2678 -> 2323;
2678 -> 2650;
2679 -> 2324;
2679 -> 2650;
2680 -> 2678;
2680 -> 2650;
2681 -> 2679;
2681 -> 2650;
2682 -> 2650;
2683 -> 2650;
2684 -> 2650;
2685 -> 2681;
2685 -> 2684;
2685 -> 2650;
2686 -> 2650;
2687 -> 2650;
2687 -> 2686;
2688 -> 2650;
2688 -> 0;
2689 -> 2650;
2690 -> 2683;
2690 -> 2689;
2691 -> 2690;
2692 -> 2690;
2693 -> 2650;
2693 -> 2690;
2694 -> 2690;
2695 -> 2693;
2695 -> 2694;
2696 -> 2694;
2697 -> 2695;
2697 -> 2696;
2698 -> 2696;
2699 -> 2697;
2699 -> 2698;
2699 -> 2696;
2700 -> 2696;
2701 -> 2700;
2701 -> 2694;
2702 -> 2650;
2702 -> 2701;
2703 -> 2650;
2704 -> 2291;
2704 -> 2650;
2704 -> 2290;
2705 -> 2704;
2705 -> 2650;
2705 -> 2290;
2706 -> 2291;
2706 -> 2650;
2706 -> 2290;
2707 -> 2294;
2707 -> 2706;
2708 -> 2291;
2708 -> 2650;
2708 -> 2707;
2709 -> 2704;
2709 -> 2707;
2710 -> 2707;
2711 -> 2709;
2711 -> 2710;
2712 -> 2710;
2713 -> 2711;
2713 -> 2712;
2713 -> 2710;
2714 -> 2713;
2715 -> 2711;
2715 -> 2650;
2715 -> 2713;
2716 -> 2710;
2717 -> 2716;
2717 -> 2707;
2718 -> 2708;
2718 -> 2717;
2718 -> 2707;
2719 -> 2291;
2719 -> 2718;
2720 -> 2291;
2720 -> 2650;
2720 -> 2718;
2721 -> 2295;
2721 -> 2650;
2721 -> 2316;
2721 -> 2290;
2722 -> 2218;
2722 -> 2650;
2723 -> 2650;
2724 -> 2218;
2724 -> 2650;
2725 -> 2724;
2725 -> 2722;
2725 -> 2650;
2726 -> 2650;
2727 -> 2725;
2727 -> 2726;
2727 -> 2650;
2728 -> 2205;
2728 -> 2727;
2729 -> 2725;
2729 -> 2727;
2730 -> 2727;
2731 -> 2728;
2731 -> 2730;
2732 -> 2729;
2732 -> 2730;
2733 -> 2207;
2733 -> 2730;
2734 -> 2732;
2734 -> 2731;
2734 -> 2730;
2735 -> 2734;
2736 -> 2363;
2736 -> 2735;
2736 -> 865;
2737 -> 2363;
2737 -> 2735;
2737 -> 2736;
2738 -> 2363;
2738 -> 2735;
2738 -> 0;
2738 -> 865;
2739 -> 2363;
2739 -> 2735;
2739 -> 865;
2740 -> 2367;
2740 -> 2739;
2741 -> 2740;
2742 -> 2740;
2743 -> 2363;
2743 -> 2735;
2743 -> 2740;
2744 -> 2740;
2745 -> 2743;
2745 -> 2744;
2746 -> 2744;
2747 -> 2745;
2747 -> 2746;
2748 -> 2746;
2749 -> 2747;
2749 -> 2748;
2749 -> 2746;
2750 -> 2746;
2751 -> 2750;
2751 -> 2744;
2752 -> 2363;
2752 -> 2735;
2752 -> 2751;
2753 -> 2363;
2753 -> 2735;
2753 -> 865;
2754 -> 2185;
2754 -> 2735;
2754 -> 865;
2755 -> 2196;
2755 -> 2735;
2755 -> 2195;
2756 -> 2196;
2756 -> 2735;
2756 -> 2195;
2757 -> 2756;
2757 -> 2193;
2758 -> 2735;
2758 -> 865;
2759 -> 2735;
2759 -> 2212;
2760 -> 2759;
2760 -> 2211;
2761 -> 2735;
2761 -> 865;
2762 -> 2761;
2762 -> 2204;
2762 -> 2735;
2762 -> 865;
2763 -> 871;
2763 -> 865;
2764 -> 865;
2765 -> 2763;
2765 -> 2764;
2766 -> 2764;
2767 -> 2765;
2767 -> 2766;
2768 -> 2767;
2768 -> 2735;
2768 -> 2766;
2769 -> 2767;
2769 -> 2735;
2769 -> 2766;
2770 -> 2769;
2770 -> 2764;
2771 -> 871;
2771 -> 865;
2772 -> 871;
2772 -> 865;
2773 -> 865;
2774 -> 2772;
2774 -> 2773;
2775 -> 865;
2776 -> 871;
2776 -> 865;
2777 -> 2291;
2777 -> 2735;
2777 -> 2290;
2778 -> 2777;
2778 -> 2735;
2778 -> 2290;
2779 -> 2291;
2779 -> 2735;
2779 -> 2290;
2780 -> 2294;
2780 -> 2779;
2781 -> 2291;
2781 -> 2735;
2781 -> 2780;
2782 -> 2777;
2782 -> 2780;
2783 -> 2780;
2784 -> 2782;
2784 -> 2783;
2785 -> 2783;
2786 -> 2784;
2786 -> 2785;
2786 -> 2783;
2787 -> 2786;
2788 -> 2784;
2788 -> 2735;
2788 -> 2786;
2789 -> 2783;
2790 -> 2789;
2790 -> 2780;
2791 -> 2781;
2791 -> 2790;
2791 -> 2780;
2792 -> 2291;
2792 -> 2791;
2793 -> 2291;
2793 -> 2735;
2793 -> 2791;
2794 -> 2295;
2794 -> 2735;
2794 -> 2316;
2794 -> 2290;
2795 -> 2323;
2795 -> 2735;
2796 -> 2324;
2796 -> 2735;
2797 -> 2795;
2797 -> 2735;
2798 -> 2796;
2798 -> 2735;
2799 -> 2735;
2800 -> 2735;
2801 -> 2735;
2802 -> 2798;
2802 -> 2801;
2802 -> 2735;
2803 -> 2735;
2804 -> 2735;
2804 -> 2803;
2805 -> 2735;
2805 -> 0;
2806 -> 2735;
2807 -> 2800;
2807 -> 2806;
2808 -> 2807;
2809 -> 2807;
2810 -> 2735;
2810 -> 2807;
2811 -> 2807;
2812 -> 2810;
2812 -> 2811;
2813 -> 2811;
2814 -> 2812;
2814 -> 2813;
2815 -> 2813;
2816 -> 2814;
2816 -> 2815;
2816 -> 2813;
2817 -> 2813;
2818 -> 2817;
2818 -> 2811;
2819 -> 2735;
2819 -> 2818;
2820 -> 2735;
2821 -> 2735;
2821 -> 2403;
2822 -> 2821;
2822 -> 2735;
2822 -> 2403;
2823 -> 2821;
2823 -> 2735;
2823 -> 2822;
2824 -> 2823;
2824 -> 2822;
2825 -> 2822;
2826 -> 2824;
2826 -> 2825;
2827 -> 2826;
2827 -> 2735;
2827 -> 0;
2827 -> 2825;
2828 -> 2826;
2828 -> 2735;
2828 -> 2825;
2829 -> 2825;
2830 -> 2828;
2830 -> 2829;
2831 -> 2829;
2832 -> 2830;
2832 -> 2831;
2832 -> 2829;
2833 -> 2832;
2834 -> 2830;
2834 -> 2735;
2834 -> 2832;
2835 -> 2829;
2836 -> 2835;
2836 -> 2825;
2837 -> 2827;
2837 -> 2836;
2837 -> 2825;
2838 -> 2735;
2838 -> 2426;
2839 -> 2838;
2839 -> 2735;
2839 -> 2426;
2840 -> 2838;
2840 -> 2735;
2840 -> 2839;
2841 -> 2840;
2841 -> 2839;
2842 -> 2839;
2843 -> 2841;
2843 -> 2842;
2844 -> 2843;
2844 -> 2735;
2844 -> 0;
2844 -> 2842;
2845 -> 2843;
2845 -> 2735;
2845 -> 2842;
2846 -> 2842;
2847 -> 2845;
2847 -> 2846;
2848 -> 2846;
2849 -> 2847;
2849 -> 2848;
2849 -> 2846;
2850 -> 2849;
2851 -> 2847;
2851 -> 2735;
2851 -> 2849;
2852 -> 2846;
2853 -> 2852;
2853 -> 2842;
2854 -> 2844;
2854 -> 2853;
2854 -> 2842;
2855 -> 2476;
2855 -> 0;
2855 -> 2735;
2856 -> 871;
2856 -> 865;
2857 -> 871;
2857 -> 865;
2858 -> 2857;
2858 -> 2735;
2858 -> 865;
2859 -> 2857;
2859 -> 2735;
2859 -> 865;
2860 -> 2859;
2861 -> 2857;
2861 -> 2860;
2862 -> 2861;
2862 -> 2735;
2862 -> 2860;
2863 -> 2860;
2864 -> 2861;
2864 -> 2735;
2864 -> 2860;
2865 -> 2862;
2865 -> 2735;
2865 -> 2864;
2866 -> 2864;
2867 -> 2866;
2867 -> 2865;
2867 -> 2735;
2867 -> 2864;
2868 -> 2861;
2868 -> 2735;
2868 -> 2860;
2869 -> 2860;
2870 -> 2862;
2870 -> 2735;
2870 -> 2869;
2871 -> 2870;
2871 -> 2860;
2872 -> 2862;
2872 -> 2860;
2873 -> 2863;
2873 -> 2860;
2874 -> 2860;
2875 -> 2872;
2875 -> 2874;
2876 -> 2873;
2876 -> 2874;
2877 -> 2874;
2878 -> 2877;
2878 -> 2874;
2879 -> 2875;
2879 -> 2735;
2879 -> 2874;
2880 -> 2876;
2880 -> 2874;
2881 -> 2874;
2882 -> 2878;
2882 -> 2881;
2883 -> 2879;
2883 -> 2881;
2884 -> 2880;
2884 -> 2881;
2885 -> 2881;
2886 -> 2883;
2886 -> 2885;
2886 -> 2881;
2887 -> 2874;
2888 -> 2874;
2889 -> 2875;
2889 -> 2879;
2889 -> 2888;
2890 -> 2889;
2890 -> 2874;
2891 -> 2877;
2891 -> 2890;
2892 -> 2875;
2892 -> 2879;
2892 -> 2890;
2893 -> 2876;
2893 -> 2890;
2894 -> 2890;
2895 -> 2891;
2895 -> 2894;
2896 -> 2892;
2896 -> 2894;
2897 -> 2893;
2897 -> 2894;
2898 -> 2894;
2899 -> 2896;
2899 -> 2898;
2899 -> 2894;
2900 -> 2890;
2901 -> 2877;
2901 -> 2874;
2902 -> 2901;
2902 -> 2860;
2903 -> 2863;
2903 -> 2860;
2904 -> 2903;
2904 -> 2859;
2905 -> 2904;
2905 -> 2857;
2905 -> 2859;
2906 -> 2859;
2907 -> 2857;
2907 -> 2892;
2907 -> 2905;
2907 -> 2903;
2907 -> 2906;
2907 -> 2859;
2908 -> 2857;
2908 -> 2892;
2908 -> 2905;
2908 -> 865;
2909 -> 871;
2909 -> 865;
2910 -> 0;
2910 -> 865;
2911 -> 871;
2911 -> 2910;
2911 -> 2908;
2911 -> 0;
2911 -> 841;
2912 -> 1993;
2912 -> 2911;
2912 -> 865;
2913 -> 871;
2913 -> 865;
2914 -> 2913;
2914 -> 2911;
2914 -> 865;
2915 -> 2857;
2915 -> 2914;
2915 -> 865;
2916 -> 2252;
2916 -> 2914;
2916 -> 0;
2917 -> 0;
2917 -> 2916;
2918 -> 2323;
2918 -> 2917;
2919 -> 2324;
2919 -> 2917;
2920 -> 2918;
2920 -> 2917;
2921 -> 2919;
2921 -> 2917;
2922 -> 2917;
2923 -> 2917;
2924 -> 2917;
2925 -> 2921;
2925 -> 2924;
2925 -> 2917;
2926 -> 2917;
2927 -> 2917;
2927 -> 2926;
2928 -> 2917;
2928 -> 0;
2929 -> 2917;
2930 -> 2923;
2930 -> 2929;
2931 -> 2930;
2932 -> 2930;
2933 -> 2917;
2933 -> 2930;
2934 -> 2930;
2935 -> 2933;
2935 -> 2934;
2936 -> 2934;
2937 -> 2935;
2937 -> 2936;
2938 -> 2936;
2939 -> 2937;
2939 -> 2938;
2939 -> 2936;
2940 -> 2936;
2941 -> 2940;
2941 -> 2934;
2942 -> 2917;
2942 -> 2941;
2943 -> 2917;
2944 -> 2476;
2944 -> 0;
2944 -> 2917;
2945 -> 2363;
2945 -> 2917;
2945 -> 865;
2946 -> 2363;
2946 -> 2917;
2946 -> 2945;
2947 -> 2363;
2947 -> 2917;
2947 -> 0;
2947 -> 865;
2948 -> 2363;
2948 -> 2917;
2948 -> 865;
2949 -> 2367;
2949 -> 2948;
2950 -> 2363;
2950 -> 2917;
2950 -> 865;
2951 -> 0;
2951 -> 2917;
2952 -> 2323;
2952 -> 2951;
2953 -> 2324;
2953 -> 2951;
2954 -> 2952;
2954 -> 2951;
2955 -> 2953;
2955 -> 2951;
2956 -> 2951;
2957 -> 2951;
2958 -> 2951;
2959 -> 2955;
2959 -> 2958;
2959 -> 2951;
2960 -> 2951;
2961 -> 2951;
2961 -> 2960;
2962 -> 2951;
2962 -> 0;
2963 -> 2951;
2964 -> 2957;
2964 -> 2963;
2965 -> 2964;
2966 -> 2964;
2967 -> 2951;
2967 -> 2964;
2968 -> 2964;
2969 -> 2967;
2969 -> 2968;
2970 -> 2968;
2971 -> 2969;
2971 -> 2970;
2972 -> 2970;
2973 -> 2971;
2973 -> 2972;
2973 -> 2970;
2974 -> 2970;
2975 -> 2974;
2975 -> 2968;
2976 -> 2951;
2976 -> 2975;
2977 -> 2951;
2978 -> 2476;
2978 -> 0;
2978 -> 2951;
2979 -> 871;
2979 -> 865;
2980 -> 2979;
2980 -> 2951;
2980 -> 865;
2981 -> 2363;
2981 -> 2980;
2981 -> 865;
2982 -> 2363;
2982 -> 2980;
2982 -> 2981;
2983 -> 2363;
2983 -> 2980;
2983 -> 0;
2983 -> 865;
2984 -> 2363;
2984 -> 2980;
2984 -> 865;
2985 -> 2367;
2985 -> 2984;
2986 -> 2985;
2987 -> 2985;
2988 -> 2363;
2988 -> 2980;
2988 -> 2985;
2989 -> 2985;
2990 -> 2988;
2990 -> 2989;
2991 -> 2989;
2992 -> 2990;
2992 -> 2991;
2993 -> 2991;
2994 -> 2992;
2994 -> 2993;
2994 -> 2991;
2995 -> 2991;
2996 -> 2995;
2996 -> 2989;
2997 -> 2363;
2997 -> 2980;
2997 -> 2996;
2998 -> 2363;
2998 -> 2980;
2998 -> 865;
2999 -> 2980;
2999 -> 0;
2999 -> 2264;
3000 -> 2980;
3001 -> 3000;
3001 -> 2980;
3002 -> 2980;
3002 -> 2264;
3003 -> 2291;
3003 -> 2980;
3003 -> 2290;
3004 -> 3003;
3004 -> 2980;
3004 -> 2290;
3005 -> 2291;
3005 -> 2980;
3005 -> 2290;
3006 -> 2294;
3006 -> 3005;
3007 -> 2291;
3007 -> 2980;
3007 -> 3006;
3008 -> 3003;
3008 -> 3006;
3009 -> 3006;
3010 -> 3008;
3010 -> 3009;
3011 -> 3009;
3012 -> 3010;
3012 -> 3011;
3012 -> 3009;
3013 -> 3012;
3014 -> 3010;
3014 -> 2980;
3014 -> 3012;
3015 -> 3009;
3016 -> 3015;
3016 -> 3006;
3017 -> 3007;
3017 -> 3016;
3017 -> 3006;
3018 -> 2291;
3018 -> 3017;
3019 -> 2291;
3019 -> 2980;
3019 -> 3017;
3020 -> 2295;
3020 -> 2980;
3020 -> 2316;
3020 -> 2290;
3021 -> 2980;
3021 -> 2403;
3022 -> 3021;
3022 -> 2980;
3022 -> 2403;
3023 -> 3021;
3023 -> 2980;
3023 -> 3022;
3024 -> 3023;
3024 -> 3022;
3025 -> 3022;
3026 -> 3024;
3026 -> 3025;
3027 -> 3026;
3027 -> 2980;
3027 -> 0;
3027 -> 3025;
3028 -> 3026;
3028 -> 2980;
3028 -> 3025;
3029 -> 3025;
3030 -> 3028;
3030 -> 3029;
3031 -> 3029;
3032 -> 3030;
3032 -> 3031;
3032 -> 3029;
3033 -> 3032;
3034 -> 3030;
3034 -> 2980;
3034 -> 3032;
3035 -> 3029;
3036 -> 3035;
3036 -> 3025;
3037 -> 3027;
3037 -> 3036;
3037 -> 3025;
3038 -> 2980;
3038 -> 2426;
3039 -> 3038;
3039 -> 2980;
3039 -> 2426;
3040 -> 3038;
3040 -> 2980;
3040 -> 3039;
3041 -> 3040;
3041 -> 3039;
3042 -> 3039;
3043 -> 3041;
3043 -> 3042;
3044 -> 3043;
3044 -> 2980;
3044 -> 0;
3044 -> 3042;
3045 -> 3043;
3045 -> 2980;
3045 -> 3042;
3046 -> 3042;
3047 -> 3045;
3047 -> 3046;
3048 -> 3046;
3049 -> 3047;
3049 -> 3048;
3049 -> 3046;
3050 -> 3049;
3051 -> 3047;
3051 -> 2980;
3051 -> 3049;
3052 -> 3046;
3053 -> 3052;
3053 -> 3042;
3054 -> 3044;
3054 -> 3053;
3054 -> 3042;
3055 -> 2323;
3055 -> 2980;
3056 -> 2324;
3056 -> 2980;
3057 -> 3055;
3057 -> 2980;
3058 -> 3056;
3058 -> 2980;
3059 -> 2980;
3060 -> 2980;
3061 -> 2980;
3062 -> 3058;
3062 -> 3061;
3062 -> 2980;
3063 -> 2980;
3064 -> 2980;
3064 -> 3063;
3065 -> 2980;
3065 -> 0;
3066 -> 2980;
3067 -> 3060;
3067 -> 3066;
3068 -> 3067;
3069 -> 3067;
3070 -> 2980;
3070 -> 3067;
3071 -> 3067;
3072 -> 3070;
3072 -> 3071;
3073 -> 3071;
3074 -> 3072;
3074 -> 3073;
3075 -> 3073;
3076 -> 3074;
3076 -> 3075;
3076 -> 3073;
3077 -> 3073;
3078 -> 3077;
3078 -> 3071;
3079 -> 2980;
3079 -> 3078;
3080 -> 2980;
3081 -> 2476;
3081 -> 0;
3081 -> 2980;
3082 -> 0;
3082 -> 3081;
3083 -> 3082;
3083 -> 2477;
3083 -> 2980;
3083 -> 3081;
3084 -> 3081;
3085 -> 3084;
3086 -> 3083;
3086 -> 3085;
3087 -> 3086;
3087 -> 3084;
3088 -> 2291;
3088 -> 3083;
3088 -> 2290;
3089 -> 3088;
3089 -> 3083;
3089 -> 2290;
3090 -> 2291;
3090 -> 3083;
3090 -> 2290;
3091 -> 2294;
3091 -> 3090;
3092 -> 2291;
3092 -> 3083;
3092 -> 3091;
3093 -> 3088;
3093 -> 3091;
3094 -> 3091;
3095 -> 3093;
3095 -> 3094;
3096 -> 3094;
3097 -> 3095;
3097 -> 3096;
3097 -> 3094;
3098 -> 3097;
3099 -> 3095;
3099 -> 3083;
3099 -> 3097;
3100 -> 3094;
3101 -> 3100;
3101 -> 3091;
3102 -> 3092;
3102 -> 3101;
3102 -> 3091;
3103 -> 2291;
3103 -> 3102;
3104 -> 2291;
3104 -> 3083;
3104 -> 3102;
3105 -> 2295;
3105 -> 3083;
3105 -> 2316;
3105 -> 2290;
3106 -> 2363;
3106 -> 3083;
3106 -> 865;
3107 -> 2363;
3107 -> 3083;
3107 -> 3106;
3108 -> 2363;
3108 -> 3083;
3108 -> 0;
3108 -> 865;
3109 -> 2363;
3109 -> 3083;
3109 -> 865;
3110 -> 2367;
3110 -> 3109;
3111 -> 2363;
3111 -> 3083;
3111 -> 865;
3112 -> 2323;
3112 -> 3083;
3113 -> 2324;
3113 -> 3083;
3114 -> 3112;
3114 -> 3083;
3115 -> 3113;
3115 -> 3083;
3116 -> 3083;
3117 -> 3083;
3118 -> 3083;
3119 -> 3115;
3119 -> 3118;
3119 -> 3083;
3120 -> 3083;
3121 -> 3083;
3121 -> 3120;
3122 -> 3083;
3122 -> 0;
3123 -> 3083;
3124 -> 3117;
3124 -> 3123;
3125 -> 3124;
3126 -> 3124;
3127 -> 3083;
3127 -> 3124;
3128 -> 3124;
3129 -> 3127;
3129 -> 3128;
3130 -> 3128;
3131 -> 3129;
3131 -> 3130;
3132 -> 3130;
3133 -> 3131;
3133 -> 3132;
3133 -> 3130;
3134 -> 3130;
3135 -> 3134;
3135 -> 3128;
3136 -> 3083;
3136 -> 3135;
3137 -> 3083;
3138 -> 3083;
3138 -> 2403;
3139 -> 3138;
3139 -> 3083;
3139 -> 2403;
3140 -> 3138;
3140 -> 3083;
3140 -> 3139;
3141 -> 3140;
3141 -> 3139;
3142 -> 3139;
3143 -> 3141;
3143 -> 3142;
3144 -> 3143;
3144 -> 3083;
3144 -> 0;
3144 -> 3142;
3145 -> 3143;
3145 -> 3083;
3145 -> 3142;
3146 -> 3142;
3147 -> 3145;
3147 -> 3146;
3148 -> 3146;
3149 -> 3147;
3149 -> 3148;
3149 -> 3146;
3150 -> 3149;
3151 -> 3147;
3151 -> 3083;
3151 -> 3149;
3152 -> 3146;
3153 -> 3152;
3153 -> 3142;
3154 -> 3144;
3154 -> 3153;
3154 -> 3142;
3155 -> 3083;
3155 -> 2426;
3156 -> 3155;
3156 -> 3083;
3156 -> 2426;
3157 -> 3155;
3157 -> 3083;
3157 -> 3156;
3158 -> 3157;
3158 -> 3156;
3159 -> 3156;
3160 -> 3158;
3160 -> 3159;
3161 -> 3160;
3161 -> 3083;
3161 -> 0;
3161 -> 3159;
3162 -> 3160;
3162 -> 3083;
3162 -> 3159;
3163 -> 3159;
3164 -> 3162;
3164 -> 3163;
3165 -> 3163;
3166 -> 3164;
3166 -> 3165;
3166 -> 3163;
3167 -> 3166;
3168 -> 3164;
3168 -> 3083;
3168 -> 3166;
3169 -> 3163;
3170 -> 3169;
3170 -> 3159;
3171 -> 3161;
3171 -> 3170;
3171 -> 3159;
3172 -> 3133;
3173 -> 3131;
3173 -> 3083;
3173 -> 3133;
3174 -> 2185;
3174 -> 3083;
3174 -> 865;
3175 -> 2196;
3175 -> 3083;
3175 -> 2195;
3176 -> 2196;
3176 -> 3083;
3176 -> 2195;
3177 -> 3176;
3177 -> 2193;
3178 -> 3083;
3178 -> 865;
3179 -> 3083;
3179 -> 2212;
3180 -> 3179;
3180 -> 2211;
3181 -> 3083;
3181 -> 865;
3182 -> 3181;
3182 -> 2204;
3182 -> 3083;
3182 -> 865;
3183 -> 2207;
3183 -> 3083;
3184 -> 871;
3184 -> 865;
3185 -> 865;
3186 -> 865;
3187 -> 3184;
3187 -> 3083;
3187 -> 865;
3188 -> 3186;
3188 -> 3187;
3188 -> 3083;
3188 -> 865;
3189 -> 865;
3190 -> 865;
3191 -> 3186;
3191 -> 3188;
3191 -> 3190;
3191 -> 865;
3192 -> 3186;
3192 -> 3188;
3192 -> 3191;
3193 -> 3192;
3193 -> 3191;
3194 -> 3192;
3194 -> 3193;
3195 -> 3193;
3196 -> 3194;
3196 -> 3195;
3197 -> 3184;
3197 -> 3195;
3198 -> 3196;
3198 -> 3192;
3198 -> 3195;
3199 -> 3197;
3199 -> 3192;
3199 -> 3198;
3199 -> 3195;
3200 -> 3195;
3201 -> 3195;
3202 -> 3196;
3202 -> 3192;
3202 -> 3195;
3203 -> 3202;
3204 -> 3201;
3204 -> 3203;
3204 -> 3202;
3205 -> 3202;
3205 -> 3204;
3206 -> 3205;
3206 -> 3195;
3207 -> 3193;
3208 -> 3206;
3208 -> 3207;
3208 -> 3193;
3209 -> 3192;
3209 -> 3208;
3210 -> 3209;
3210 -> 3192;
3211 -> 3209;
3211 -> 3210;
3212 -> 3211;
3213 -> 3211;
3214 -> 3212;
3214 -> 3213;
3215 -> 3184;
3215 -> 3213;
3216 -> 3214;
3216 -> 3211;
3216 -> 3213;
3217 -> 3215;
3217 -> 3211;
3217 -> 3216;
3217 -> 3213;
3218 -> 3213;
3219 -> 3211;
3220 -> 3214;
3220 -> 3219;
3220 -> 3211;
3221 -> 3185;
3221 -> 3220;
3222 -> 3214;
3222 -> 3220;
3223 -> 3211;
3223 -> 3220;
3224 -> 3220;
3225 -> 3221;
3225 -> 3224;
3226 -> 3222;
3226 -> 3224;
3227 -> 3223;
3227 -> 3224;
3228 -> 3184;
3228 -> 3224;
3229 -> 3226;
3229 -> 3223;
3229 -> 3224;
3230 -> 3229;
3230 -> 3224;
3231 -> 3226;
3231 -> 3229;
3231 -> 3224;
3232 -> 3228;
3232 -> 3229;
3232 -> 3230;
3232 -> 3231;
3232 -> 3224;
3233 -> 3224;
3234 -> 3232;
3234 -> 3233;
3234 -> 3224;
3235 -> 3220;
3236 -> 3211;
3236 -> 3232;
3236 -> 3220;
3237 -> 3236;
3237 -> 3232;
3238 -> 3236;
3238 -> 3237;
3239 -> 3185;
3239 -> 3237;
3240 -> 3238;
3240 -> 3237;
3241 -> 3237;
3242 -> 3239;
3242 -> 3241;
3243 -> 3240;
3243 -> 3241;
3244 -> 3184;
3244 -> 3241;
3245 -> 3243;
3245 -> 3241;
3246 -> 3241;
3247 -> 3245;
3247 -> 3246;
3248 -> 3244;
3248 -> 3246;
3249 -> 3247;
3249 -> 3236;
3249 -> 3232;
3249 -> 3246;
3250 -> 3248;
3250 -> 3232;
3250 -> 3249;
3250 -> 3246;
3251 -> 3246;
3252 -> 3241;
3253 -> 3247;
3253 -> 3252;
3253 -> 3241;
3254 -> 3242;
3254 -> 3253;
3255 -> 3247;
3255 -> 3253;
3256 -> 3243;
3256 -> 3236;
3256 -> 3232;
3256 -> 3253;
3257 -> 3253;
3258 -> 3254;
3258 -> 3257;
3259 -> 3255;
3259 -> 3257;
3260 -> 3256;
3260 -> 3257;
3261 -> 3244;
3261 -> 3257;
3262 -> 3261;
3262 -> 3259;
3262 -> 3257;
3263 -> 3257;
3264 -> 3262;
3264 -> 3263;
3264 -> 3257;
3265 -> 3253;
3266 -> 3237;
3267 -> 3185;
3267 -> 3262;
3268 -> 3262;
3269 -> 3262;
3270 -> 3267;
3270 -> 3269;
3271 -> 3268;
3271 -> 3269;
3272 -> 3269;
3273 -> 3271;
3273 -> 3262;
3273 -> 3269;
3274 -> 3272;
3274 -> 3262;
3274 -> 3273;
3274 -> 3269;
3275 -> 3269;
3276 -> 3270;
3276 -> 3271;
3277 -> 3271;
3278 -> 3271;
3279 -> 3271;
3280 -> 3279;
3280 -> 3271;
3281 -> 3185;
3281 -> 3271;
3282 -> 3271;
3283 -> 3271;
3284 -> 3281;
3284 -> 3283;
3285 -> 3282;
3285 -> 3283;
3286 -> 3283;
3287 -> 3285;
3287 -> 3280;
3287 -> 3283;
3288 -> 3286;
3288 -> 3280;
3288 -> 3287;
3288 -> 3283;
3289 -> 3283;
3290 -> 3285;
3290 -> 3280;
3290 -> 3283;
3291 -> 3284;
3291 -> 3290;
3292 -> 3291;
3292 -> 3290;
3293 -> 3290;
3294 -> 3290;
3295 -> 3185;
3295 -> 3290;
3296 -> 3295;
3296 -> 3290;
3297 -> 3290;
3298 -> 3290;
3299 -> 3297;
3299 -> 3290;
3299 -> 3298;
3300 -> 3290;
3301 -> 3296;
3301 -> 3290;
3302 -> 3185;
3302 -> 865;
3303 -> 871;
3303 -> 3302;
3303 -> 3290;
3303 -> 3185;
3303 -> 841;
3304 -> 1918;
3304 -> 3303;
3304 -> 1917;
3305 -> 1918;
3305 -> 3303;
3305 -> 1917;
3306 -> 3305;
3306 -> 1915;
3307 -> 841;
3308 -> 853;
3308 -> 3307;
3308 -> 841;
3309 -> 853;
3309 -> 3308;
3310 -> 3309;
3310 -> 3303;
3310 -> 3308;
3311 -> 853;
3311 -> 3310;
3311 -> 3308;
3312 -> 3303;
3312 -> 3311;
3312 -> 841;
3313 -> 844;
3313 -> 3312;
3313 -> 3311;
3313 -> 841;
3314 -> 849;
3314 -> 841;
3315 -> 3314;
3315 -> 3313;
3315 -> 841;
3316 -> 3303;
3316 -> 3315;
3316 -> 841;
3317 -> 3315;
3317 -> 3316;
3318 -> 3310;
3318 -> 3316;
3319 -> 3316;
3320 -> 3316;
3321 -> 3317;
3321 -> 3320;
3322 -> 3318;
3322 -> 3320;
3323 -> 3319;
3323 -> 3320;
3324 -> 3321;
3324 -> 3323;
3324 -> 3320;
3325 -> 3322;
3325 -> 3310;
3325 -> 3320;
3326 -> 3322;
3326 -> 3323;
3326 -> 3320;
3327 -> 742;
3327 -> 3319;
3327 -> 3315;
3327 -> 3324;
3327 -> 3326;
3327 -> 3310;
3327 -> 732;
3328 -> 742;
3328 -> 741;
3329 -> 741;
3330 -> 3328;
3330 -> 3329;
3331 -> 3329;
3332 -> 3330;
3332 -> 3331;
3333 -> 3331;
3334 -> 3332;
3334 -> 3333;
3335 -> 3334;
3335 -> 3327;
3335 -> 3333;
3336 -> 3334;
3336 -> 3327;
3336 -> 3333;
3337 -> 3336;
3337 -> 3331;
3338 -> 3332;
3338 -> 3327;
3338 -> 3331;
3339 -> 3338;
3339 -> 741;
3340 -> 742;
3340 -> 741;
3341 -> 733;
3341 -> 3339;
3341 -> 732;
3342 -> 3341;
3342 -> 736;
3342 -> 732;
3343 -> 733;
3343 -> 3341;
3343 -> 732;
3344 -> 3343;
3344 -> 736;
3344 -> 732;
3345 -> 733;
3345 -> 3343;
3345 -> 732;
3346 -> 3345;
3346 -> 736;
3346 -> 732;
3347 -> 733;
3347 -> 3345;
3347 -> 732;
3348 -> 3347;
3348 -> 736;
3348 -> 732;
3349 -> 736;
3349 -> 702;
3349 -> 3347;
3349 -> 732;
3350 -> 732;
3351 -> 3349;
3351 -> 3350;
3352 -> 3350;
3353 -> 3352;
3354 -> 3353;
3355 -> 3351;
3355 -> 3354;
3356 -> 3355;
3356 -> 3353;
3357 -> 732;
3358 -> 728;
3358 -> 3351;
3358 -> 712;
3359 -> 3358;
3359 -> 720;
3359 -> 712;
3360 -> 718;
3360 -> 712;
3361 -> 728;
3361 -> 3360;
3361 -> 3358;
3361 -> 712;
3362 -> 712;
3363 -> 719;
3363 -> 3362;
3363 -> 712;
3364 -> 712;
3365 -> 713;
3365 -> 3364;
3365 -> 712;
3366 -> 714;
3366 -> 3364;
3366 -> 712;
3367 -> 3365;
3367 -> 3366;
3367 -> 712;
3368 -> 674;
3369 -> 674;
3370 -> 682;
3370 -> 3369;
3370 -> 674;
3371 -> 683;
3371 -> 3369;
3371 -> 674;
3372 -> 3370;
3372 -> 3371;
3372 -> 674;
3373 -> 690;
3373 -> 674;
3374 -> 3373;
3374 -> 642;
3375 -> 642;
3376 -> 661;
3376 -> 3375;
3376 -> 642;
3377 -> 3374;
3377 -> 3376;
3378 -> 3377;
3378 -> 642;
3379 -> 3377;
3379 -> 642;
3380 -> 3379;
3380 -> 604;
3381 -> 3380;
3381 -> 1;
3382 -> 598;
3382 -> 1;
3383 -> 599;
3383 -> 1;
3384 -> 1;
3385 -> 1;
3386 -> 3382;
3386 -> 3385;
3387 -> 3383;
3387 -> 3385;
3388 -> 3384;
3388 -> 3385;
3389 -> 3384;
3389 -> 3385;
3390 -> 3384;
3390 -> 3385;
3391 -> 3386;
3391 -> 3385;
3392 -> 3387;
3392 -> 3385;
3393 -> 3388;
3393 -> 3385;
3394 -> 3389;
3394 -> 3385;
3395 -> 3390;
3395 -> 3385;
3396 -> 3385;
3397 -> 3391;
3397 -> 3396;
3398 -> 3392;
3398 -> 3396;
3399 -> 3393;
3399 -> 3396;
3400 -> 3394;
3400 -> 3396;
3401 -> 3395;
3401 -> 3396;
3402 -> 3397;
3402 -> 3396;
3403 -> 3398;
3403 -> 3396;
3404 -> 3401;
3404 -> 3396;
3405 -> 3396;
3406 -> 3396;
3407 -> 3402;
3407 -> 3406;
3408 -> 3403;
3408 -> 3406;
3409 -> 3405;
3409 -> 3406;
3410 -> 3404;
3410 -> 3406;
3411 -> 3405;
3411 -> 3406;
3412 -> 3405;
3412 -> 3406;
3413 -> 3405;
3413 -> 3406;
3414 -> 3405;
3414 -> 3406;
3415 -> 3405;
3415 -> 3406;
3416 -> 3405;
3416 -> 3406;
3417 -> 3406;
3418 -> 3406;
3419 -> 3411;
3419 -> 3418;
3419 -> 3406;
3420 -> 3407;
3420 -> 3361;
3420 -> 3406;
3421 -> 3406;
3422 -> 3420;
3422 -> 3421;
3423 -> 3419;
3423 -> 3422;
3423 -> 3406;
3424 -> 3408;
3424 -> 3422;
3424 -> 0;
3424 -> 3406;
3425 -> 3423;
3425 -> 3424;
3425 -> 3406;
3426 -> 3425;
3427 -> 0;
3427 -> 3426;
3428 -> 3427;
3428 -> 3425;
3429 -> 3425;
3430 -> 3408;
3430 -> 3422;
3430 -> 0;
3430 -> 3425;
3431 -> 3429;
3431 -> 3425;
3432 -> 3431;
3433 -> 3417;
3433 -> 3406;
3434 -> 3416;
3434 -> 3406;
3435 -> 3432;
3435 -> 3406;
3436 -> 3406;
3437 -> 3415;
3437 -> 3406;
3438 -> 3408;
3438 -> 3406;
3439 -> 3412;
3439 -> 3406;
3440 -> 3413;
3440 -> 3406;
3441 -> 3414;
3441 -> 3406;
3442 -> 3409;
3442 -> 3406;
3443 -> 3433;
3443 -> 3434;
3443 -> 3435;
3443 -> 3436;
3443 -> 3437;
3443 -> 3438;
3443 -> 3439;
3443 -> 3440;
3443 -> 3441;
3443 -> 3442;
3443 -> 3407;
3443 -> 3417;
3443 -> 3432;
3443 -> 3422;
3443 -> 3406;
3444 -> 3443;
3444 -> 3436;
3445 -> 3443;
3445 -> 3436;
3446 -> 3443;
3446 -> 3436;
3447 -> 3443;
3447 -> 3436;
3448 -> 3436;
3449 -> 3443;
3449 -> 3448;
3450 -> 3445;
3450 -> 3448;
3451 -> 3448;
3452 -> 3449;
3452 -> 3451;
3453 -> 3451;
3454 -> 3453;
3455 -> 3454;
3456 -> 3443;
3456 -> 3455;
3457 -> 3456;
3457 -> 3454;
3458 -> 3448;
3459 -> 3436;
3460 -> 3449;
3460 -> 3459;
3460 -> 3436;
3461 -> 3436;
3462 -> 3461;
3463 -> 3462;
3464 -> 3449;
3464 -> 3463;
3465 -> 3464;
3465 -> 3462;
3466 -> 3461;
3467 -> 3461;
3468 -> 3467;
3469 -> 3449;
3469 -> 3468;
3470 -> 3469;
3470 -> 3467;
3471 -> 3449;
3471 -> 3461;
3472 -> 3461;
3473 -> 3436;
3474 -> 3436;
3475 -> 3449;
3476 -> 3475;
3476 -> 3449;
3477 -> 3449;
3478 -> 3449;
3479 -> 3449;
3480 -> 3436;
3481 -> 3444;
3481 -> 3480;
3481 -> 3436;
3482 -> 3436;
3483 -> 3436;
3484 -> 3443;
3484 -> 3436;
3485 -> 3443;
3485 -> 3436;
3486 -> 3443;
3486 -> 3436;
3487 -> 3436;
3488 -> 0;
3488 -> 3436;
3489 -> 3436;
3490 -> 3436;
3491 -> 3488;
3491 -> 3490;
3492 -> 3489;
3492 -> 3490;
3493 -> 3490;
3494 -> 3491;
3494 -> 3490;
3495 -> 3492;
3495 -> 3490;
3496 -> 3493;
3496 -> 3490;
3497 -> 3490;
3498 -> 3494;
3498 -> 3497;
3499 -> 3495;
3499 -> 3497;
3500 -> 3496;
3500 -> 3497;
3501 -> 3497;
3502 -> 3498;
3502 -> 0;
3502 -> 3497;
3503 -> 3502;
3503 -> 3499;
3503 -> 3497;
3504 -> 3503;
3505 -> 3504;
3506 -> 3505;
3507 -> 3503;
3508 -> 3449;
3509 -> 3449;
3510 -> 3503;
3511 -> 3449;
3512 -> 3498;
3512 -> 0;
3512 -> 3497;
3513 -> 3501;
3513 -> 3512;
3514 -> 3512;
3515 -> 3512;
3516 -> 3512;
3517 -> 3443;
3517 -> 3516;
3518 -> 3517;
3518 -> 3449;
3518 -> 3516;
3519 -> 3518;
3519 -> 3512;
3520 -> 3512;
3521 -> 3512;
3522 -> 3512;
3523 -> 3521;
3523 -> 3522;
3524 -> 3521;
3524 -> 3522;
3525 -> 3521;
3525 -> 3522;
3526 -> 3522;
3527 -> 3522;
3528 -> 3522;
3529 -> 3523;
3529 -> 3528;
3529 -> 3522;
3530 -> 3522;
3531 -> 3530;
3532 -> 3531;
3533 -> 3443;
3533 -> 3532;
3534 -> 3533;
3534 -> 3449;
3534 -> 3532;
3535 -> 3533;
3535 -> 3449;
3535 -> 3532;
3536 -> 3535;
3536 -> 3531;
3537 -> 3527;
3537 -> 3522;
3538 -> 3523;
3538 -> 3522;
3539 -> 3538;
3540 -> 3538;
3541 -> 3522;
3542 -> 3525;
3542 -> 3541;
3542 -> 3522;
3543 -> 3523;
3543 -> 3522;
3544 -> 3524;
3544 -> 3522;
3545 -> 3522;
3546 -> 3543;
3546 -> 3545;
3547 -> 3544;
3547 -> 3545;
3548 -> 3545;
3549 -> 3546;
3549 -> 3548;
3549 -> 3545;
3550 -> 3443;
3550 -> 3449;
3550 -> 3545;
3551 -> 3512;
3552 -> 3443;
3552 -> 3449;
3552 -> 3551;
3552 -> 3512;
3553 -> 3498;
3553 -> 0;
3553 -> 3497;
3554 -> 3500;
3554 -> 3497;
3555 -> 3501;
3555 -> 3497;
3556 -> 3497;
3557 -> 3490;
3558 -> 3449;
3558 -> 3443;
3559 -> 3443;
3559 -> 3449;
3560 -> 3443;
3561 -> 3443;
3562 -> 3443;
3563 -> 3562;
3563 -> 3449;
3564 -> 3562;
3564 -> 3449;
3565 -> 3564;
3565 -> 3443;
3566 -> 3449;
3567 -> 3449;
3568 -> 3566;
3568 -> 3449;
3569 -> 3449;
3570 -> 3568;
3570 -> 3569;
3570 -> 3449;
3571 -> 3436;
3572 -> 3436;
3573 -> 3572;
3574 -> 3573;
3575 -> 3574;
3576 -> 3443;
3576 -> 3575;
3577 -> 3576;
3577 -> 3449;
3577 -> 3575;
3578 -> 3576;
3578 -> 3449;
3578 -> 3575;
3579 -> 3578;
3579 -> 3574;
3580 -> 3572;
3581 -> 3436;
3582 -> 3581;
3583 -> 3443;
3583 -> 3582;
3584 -> 3583;
3584 -> 3449;
3584 -> 3582;
3585 -> 3583;
3585 -> 3449;
3585 -> 3582;
3586 -> 3585;
3586 -> 3581;
3587 -> 3436;
3588 -> 3436;
3589 -> 3588;
3590 -> 3443;
3590 -> 3589;
3591 -> 3590;
3591 -> 3449;
3591 -> 3589;
3592 -> 3590;
3592 -> 3449;
3592 -> 3589;
3593 -> 3592;
3593 -> 3588;
3594 -> 3443;
3594 -> 3436;
3595 -> 3436;
3596 -> 3594;
3596 -> 3449;
3597 -> 3596;
3597 -> 3449;
3598 -> 3449;
3599 -> 3449;
3600 -> 3449;
3601 -> 3449;
3602 -> 3449;
3602 -> 3601;
3603 -> 3597;
3603 -> 3601;
3604 -> 3601;
3605 -> 3602;
3605 -> 3604;
3606 -> 3602;
3606 -> 3604;
3607 -> 3603;
3607 -> 3604;
3608 -> 3449;
3608 -> 3604;
3609 -> 3608;
3609 -> 3449;
3609 -> 3604;
3610 -> 3604;
3611 -> 3606;
3611 -> 3610;
3612 -> 3611;
3612 -> 3604;
3613 -> 3609;
3613 -> 3449;
3613 -> 3604;
3614 -> 3608;
3614 -> 3449;
3614 -> 0;
3614 -> 3604;
3615 -> 3612;
3615 -> 3449;
3615 -> 3604;
3616 -> 3614;
3616 -> 3615;
3616 -> 3604;
3617 -> 3605;
3617 -> 3449;
3617 -> 3604;
3618 -> 3605;
3618 -> 3449;
3618 -> 3604;
3619 -> 3604;
3620 -> 3608;
3620 -> 3449;
3620 -> 3619;
3620 -> 3604;
3621 -> 3601;
3622 -> 3443;
3622 -> 3436;
3623 -> 3443;
3623 -> 3449;
3623 -> 3436;
3624 -> 3436;
3625 -> 3624;
3625 -> 3623;
3625 -> 3449;
3625 -> 3436;
3626 -> 3436;
3627 -> 3443;
3627 -> 3436;
3628 -> 3627;
3628 -> 3449;
3628 -> 3436;
3629 -> 3436;
3630 -> 3449;
3631 -> 3449;
3632 -> 3631;
3632 -> 3630;
3632 -> 3449;
3633 -> 3627;
3633 -> 3449;
3634 -> 3443;
3634 -> 3436;
3635 -> 3443;
3635 -> 3436;
3636 -> 3635;
3636 -> 3449;
3636 -> 3436;
3637 -> 3436;
3638 -> 3636;
3638 -> 3637;
3639 -> 3436;
3640 -> 3436;
3641 -> 3640;
3642 -> 3640;
3643 -> 3642;
3644 -> 3643;
3645 -> 3643;
3646 -> 3642;
3647 -> 3449;
3647 -> 3642;
3648 -> 3647;
3649 -> 0;
3649 -> 3642;
3650 -> 3642;
3651 -> 3649;
3651 -> 3650;
3652 -> 3449;
3653 -> 3449;
3654 -> 3449;
3655 -> 3449;
3655 -> 3651;
3656 -> 3642;
3657 -> 3642;
3658 -> 3449;
3659 -> 3449;
3659 -> 0;
3659 -> 3642;
3660 -> 3642;
3661 -> 3449;
3661 -> 0;
3661 -> 3642;
3662 -> 3642;
3663 -> 3449;
3663 -> 0;
3663 -> 3642;
3664 -> 3642;
3665 -> 3449;
3665 -> 0;
3665 -> 3642;
3666 -> 3642;
3667 -> 3449;
3667 -> 0;
3667 -> 3642;
3668 -> 3642;
3669 -> 3449;
3669 -> 0;
3669 -> 3642;
3670 -> 3642;
3671 -> 3640;
3672 -> 3641;
3672 -> 3640;
3673 -> 3641;
3673 -> 3640;
3674 -> 3641;
3674 -> 3640;
3675 -> 3641;
3675 -> 3640;
3676 -> 3641;
3676 -> 3640;
3677 -> 3641;
3677 -> 3640;
3678 -> 3641;
3678 -> 3640;
3679 -> 3641;
3679 -> 3640;
3680 -> 3436;
3681 -> 3443;
3681 -> 3449;
3681 -> 3436;
3682 -> 3436;
3683 -> 3682;
3684 -> 3683;
3685 -> 3684;
3686 -> 3443;
3686 -> 3685;
3687 -> 3686;
3687 -> 3449;
3687 -> 3685;
3688 -> 3686;
3688 -> 3449;
3688 -> 3685;
3689 -> 3688;
3689 -> 3684;
3690 -> 3682;
3691 -> 3449;
3691 -> 3436;
3692 -> 3436;
3693 -> 3443;
3693 -> 3436;
3694 -> 3436;
3695 -> 3694;
3696 -> 3695;
3697 -> 3696;
3698 -> 3449;
3698 -> 3697;
3699 -> 3698;
3699 -> 3696;
3700 -> 3694;
3701 -> 3449;
3701 -> 3436;
3702 -> 3701;
3702 -> 3693;
3702 -> 3449;
3702 -> 3436;
3703 -> 3436;
3704 -> 3703;
3704 -> 3436;
3705 -> 3436;
3706 -> 3443;
3706 -> 3436;
3707 -> 3443;
3707 -> 3436;
3708 -> 3436;
3709 -> 3443;
3709 -> 3436;
3710 -> 3436;
3711 -> 3436;
3712 -> 3436;
3713 -> 3449;
3713 -> 0;
3713 -> 3712;
3714 -> 3712;
3715 -> 3449;
3715 -> 3712;
3716 -> 3443;
3716 -> 3436;
3717 -> 3443;
3717 -> 3436;
3718 -> 3443;
3718 -> 3436;
3719 -> 3443;
3719 -> 3436;
3720 -> 3436;
3721 -> 3443;
3721 -> 3720;
3721 -> 3436;
3722 -> 3436;
3723 -> 3716;
3723 -> 3722;
3724 -> 3717;
3724 -> 3722;
3725 -> 3718;
3725 -> 3722;
3726 -> 3719;
3726 -> 3722;
3727 -> 3722;
3728 -> 3722;
3729 -> 3443;
3729 -> 3449;
3729 -> 3722;
3730 -> 3729;
3730 -> 3449;
3730 -> 3722;
3731 -> 3443;
3731 -> 3449;
3731 -> 3722;
3732 -> 3725;
3732 -> 3731;
3733 -> 3443;
3733 -> 3449;
3733 -> 3732;
3734 -> 3729;
3734 -> 3732;
3735 -> 3732;
3736 -> 3734;
3736 -> 3735;
3737 -> 3735;
3738 -> 3736;
3738 -> 3737;
3738 -> 3735;
3739 -> 3738;
3740 -> 3736;
3740 -> 3449;
3740 -> 3738;
3741 -> 3735;
3742 -> 3741;
3742 -> 3732;
3743 -> 3733;
3743 -> 3742;
3743 -> 3732;
3744 -> 3443;
3744 -> 3743;
3745 -> 3443;
3745 -> 3449;
3745 -> 3743;
3746 -> 3722;
3747 -> 3726;
3747 -> 3449;
3747 -> 3746;
3747 -> 3722;
3748 -> 3436;
3749 -> 3443;
3749 -> 3436;
3750 -> 3443;
3750 -> 3436;
3751 -> 3436;
3752 -> 3750;
3752 -> 3751;
3752 -> 3436;
3753 -> 3749;
3753 -> 3449;
3754 -> 3750;
3754 -> 3449;
3755 -> 3753;
3755 -> 3449;
3756 -> 3754;
3756 -> 3449;
3757 -> 3449;
3758 -> 3449;
3759 -> 3449;
3760 -> 3756;
3760 -> 3759;
3760 -> 3449;
3761 -> 3449;
3762 -> 3449;
3762 -> 3761;
3763 -> 3449;
3763 -> 0;
3764 -> 3449;
3765 -> 3758;
3765 -> 3764;
3766 -> 3765;
3767 -> 3765;
3768 -> 3449;
3768 -> 3765;
3769 -> 3765;
3770 -> 3768;
3770 -> 3769;
3771 -> 3769;
3772 -> 3770;
3772 -> 3771;
3773 -> 3771;
3774 -> 3772;
3774 -> 3773;
3774 -> 3771;
3775 -> 3771;
3776 -> 3775;
3776 -> 3769;
3777 -> 3449;
3777 -> 3776;
3778 -> 3449;
3779 -> 3443;
3779 -> 3436;
3780 -> 3443;
3780 -> 3436;
3781 -> 3443;
3781 -> 3436;
3782 -> 3443;
3782 -> 3436;
3783 -> 3436;
3784 -> 3780;
3784 -> 3783;
3784 -> 3436;
3785 -> 3443;
3785 -> 3449;
3785 -> 3436;
3786 -> 3443;
3786 -> 3449;
3786 -> 3785;
3787 -> 3443;
3787 -> 3449;
3787 -> 0;
3787 -> 3436;
3788 -> 3443;
3788 -> 3449;
3788 -> 3436;
3789 -> 3782;
3789 -> 3788;
3790 -> 3443;
3790 -> 3449;
3790 -> 3436;
3791 -> 3443;
3791 -> 3436;
3792 -> 3436;
3793 -> 3443;
3793 -> 3792;
3793 -> 3436;
3794 -> 3436;
3795 -> 3794;
3795 -> 3436;
3796 -> 3443;
3796 -> 3436;
3797 -> 3436;
3798 -> 3436;
3799 -> 3449;
3799 -> 3798;
3800 -> 3799;
3800 -> 3449;
3800 -> 3798;
3801 -> 3799;
3801 -> 3449;
3801 -> 3800;
3802 -> 3801;
3802 -> 3800;
3803 -> 3800;
3804 -> 3802;
3804 -> 3803;
3805 -> 3804;
3805 -> 3449;
3805 -> 0;
3805 -> 3803;
3806 -> 3804;
3806 -> 3449;
3806 -> 3803;
3807 -> 3803;
3808 -> 3806;
3808 -> 3807;
3809 -> 3807;
3810 -> 3808;
3810 -> 3809;
3810 -> 3807;
3811 -> 3810;
3812 -> 3808;
3812 -> 3449;
3812 -> 3810;
3813 -> 3807;
3814 -> 3813;
3814 -> 3803;
3815 -> 3805;
3815 -> 3814;
3815 -> 3803;
3816 -> 3798;
3817 -> 3816;
3817 -> 3436;
3818 -> 3436;
3819 -> 3449;
3819 -> 3818;
3820 -> 3819;
3820 -> 3449;
3820 -> 3818;
3821 -> 3819;
3821 -> 3449;
3821 -> 3820;
3822 -> 3821;
3822 -> 3820;
3823 -> 3820;
3824 -> 3822;
3824 -> 3823;
3825 -> 3824;
3825 -> 3449;
3825 -> 0;
3825 -> 3823;
3826 -> 3824;
3826 -> 3449;
3826 -> 3823;
3827 -> 3823;
3828 -> 3826;
3828 -> 3827;
3829 -> 3827;
3830 -> 3828;
3830 -> 3829;
3830 -> 3827;
3831 -> 3830;
3832 -> 3828;
3832 -> 3449;
3832 -> 3830;
3833 -> 3827;
3834 -> 3833;
3834 -> 3823;
3835 -> 3825;
3835 -> 3834;
3835 -> 3823;
3836 -> 3818;
3837 -> 3436;
3838 -> 3716;
3838 -> 3449;
3838 -> 3722;
3839 -> 3838;
3839 -> 3449;
3839 -> 3722;
3840 -> 3716;
3840 -> 3449;
3840 -> 3722;
3841 -> 3716;
3841 -> 3840;
3841 -> 3722;
3842 -> 3725;
3842 -> 3841;
3843 -> 3716;
3843 -> 3840;
3843 -> 3842;
3844 -> 3838;
3844 -> 3842;
3845 -> 3842;
3846 -> 3844;
3846 -> 3845;
3847 -> 3845;
3848 -> 3846;
3848 -> 3847;
3848 -> 3845;
3849 -> 3848;
3850 -> 3846;
3850 -> 3840;
3850 -> 3848;
3851 -> 3845;
3852 -> 3851;
3852 -> 3842;
3853 -> 3843;
3853 -> 3852;
3853 -> 3842;
3854 -> 3716;
3854 -> 3853;
3855 -> 3716;
3855 -> 3840;
3855 -> 3853;
3856 -> 3726;
3856 -> 3840;
3856 -> 3746;
3856 -> 3722;
3857 -> 3443;
3857 -> 3840;
3857 -> 3436;
3858 -> 3443;
3858 -> 3840;
3858 -> 3857;
3859 -> 3443;
3859 -> 3840;
3859 -> 0;
3859 -> 3436;
3860 -> 3443;
3860 -> 3840;
3860 -> 3436;
3861 -> 3782;
3861 -> 3860;
3862 -> 3443;
3862 -> 3840;
3862 -> 3436;
3863 -> 3749;
3863 -> 3840;
3864 -> 3750;
3864 -> 3840;
3865 -> 3863;
3865 -> 3840;
3866 -> 3864;
3866 -> 3840;
3867 -> 3840;
3868 -> 3840;
3869 -> 3840;
3870 -> 3866;
3870 -> 3869;
3870 -> 3840;
3871 -> 3840;
3872 -> 3840;
3872 -> 3871;
3873 -> 3840;
3873 -> 0;
3874 -> 3840;
3875 -> 3868;
3875 -> 3874;
3876 -> 3875;
3877 -> 3875;
3878 -> 3840;
3878 -> 3875;
3879 -> 3875;
3880 -> 3878;
3880 -> 3879;
3881 -> 3879;
3882 -> 3880;
3882 -> 3881;
3883 -> 3881;
3884 -> 3882;
3884 -> 3883;
3884 -> 3881;
3885 -> 3881;
3886 -> 3885;
3886 -> 3879;
3887 -> 3840;
3887 -> 3886;
3888 -> 3840;
3889 -> 3716;
3889 -> 3840;
3889 -> 3722;
3890 -> 3889;
3890 -> 3840;
3890 -> 3722;
3891 -> 3889;
3891 -> 3842;
3892 -> 3891;
3892 -> 3845;
3893 -> 3892;
3893 -> 3847;
3893 -> 3845;
3894 -> 3893;
3895 -> 3892;
3895 -> 3840;
3895 -> 3893;
3896 -> 3884;
3897 -> 3882;
3897 -> 3840;
3897 -> 3884;
3898 -> 3840;
3898 -> 3798;
3899 -> 3898;
3899 -> 3840;
3899 -> 3798;
3900 -> 3898;
3900 -> 3840;
3900 -> 3899;
3901 -> 3900;
3901 -> 3899;
3902 -> 3899;
3903 -> 3901;
3903 -> 3902;
3904 -> 3903;
3904 -> 3840;
3904 -> 0;
3904 -> 3902;
3905 -> 3903;
3905 -> 3840;
3905 -> 3902;
3906 -> 3902;
3907 -> 3905;
3907 -> 3906;
3908 -> 3906;
3909 -> 3907;
3909 -> 3908;
3909 -> 3906;
3910 -> 3909;
3911 -> 3907;
3911 -> 3840;
3911 -> 3909;
3912 -> 3906;
3913 -> 3912;
3913 -> 3902;
3914 -> 3904;
3914 -> 3913;
3914 -> 3902;
3915 -> 3840;
3915 -> 3818;
3916 -> 3915;
3916 -> 3840;
3916 -> 3818;
3917 -> 3915;
3917 -> 3840;
3917 -> 3916;
3918 -> 3917;
3918 -> 3916;
3919 -> 3916;
3920 -> 3918;
3920 -> 3919;
3921 -> 3920;
3921 -> 3840;
3921 -> 0;
3921 -> 3919;
3922 -> 3920;
3922 -> 3840;
3922 -> 3919;
3923 -> 3919;
3924 -> 3922;
3924 -> 3923;
3925 -> 3923;
3926 -> 3924;
3926 -> 3925;
3926 -> 3923;
3927 -> 3926;
3928 -> 3924;
3928 -> 3840;
3928 -> 3926;
3929 -> 3923;
3930 -> 3929;
3930 -> 3919;
3931 -> 3921;
3931 -> 3930;
3931 -> 3919;
3932 -> 3436;
3933 -> 3594;
3933 -> 3840;
3934 -> 3933;
3934 -> 3840;
3935 -> 3840;
3936 -> 3443;
3936 -> 3840;
3936 -> 3436;
3937 -> 3624;
3937 -> 3936;
3937 -> 3840;
3937 -> 3436;
3938 -> 3436;
3939 -> 3635;
3939 -> 3840;
3939 -> 3436;
3940 -> 3939;
3940 -> 3637;
3941 -> 3840;
3941 -> 3642;
3942 -> 3941;
3943 -> 3840;
3943 -> 0;
3943 -> 3642;
3944 -> 3840;
3944 -> 0;
3944 -> 3642;
3945 -> 3840;
3945 -> 0;
3945 -> 3642;
3946 -> 3840;
3946 -> 0;
3946 -> 3642;
3947 -> 3840;
3947 -> 0;
3947 -> 3642;
3948 -> 3840;
3948 -> 0;
3948 -> 3642;
3949 -> 3436;
3950 -> 0;
3950 -> 3436;
3951 -> 3861;
3952 -> 3861;
3953 -> 3443;
3953 -> 3840;
3953 -> 3861;
3954 -> 3861;
3955 -> 3953;
3955 -> 3954;
3956 -> 3954;
3957 -> 3955;
3957 -> 3956;
3958 -> 3956;
3959 -> 3957;
3959 -> 3958;
3959 -> 3956;
3960 -> 3956;
3961 -> 3960;
3961 -> 3954;
3962 -> 3443;
3962 -> 3840;
3962 -> 3961;
3963 -> 3443;
3963 -> 3840;
3963 -> 3436;
3964 -> 3686;
3964 -> 3840;
3964 -> 3685;
3965 -> 3686;
3965 -> 3840;
3965 -> 3685;
3966 -> 3965;
3966 -> 3684;
3967 -> 3840;
3967 -> 3436;
3968 -> 3840;
3968 -> 3697;
3969 -> 3968;
3969 -> 3696;
3970 -> 3840;
3970 -> 3436;
3971 -> 3970;
3971 -> 3693;
3971 -> 3840;
3971 -> 3436;
3972 -> 3443;
3972 -> 3840;
3973 -> 3443;
3973 -> 3436;
3974 -> 3443;
3974 -> 3840;
3974 -> 3436;
3975 -> 3840;
3976 -> 3840;
3976 -> 3975;
3977 -> 3975;
3978 -> 3977;
3978 -> 3976;
3978 -> 3840;
3978 -> 3975;
3979 -> 3840;
3980 -> 3840;
3981 -> 3980;
3981 -> 3840;
3982 -> 3840;
3983 -> 3840;
3984 -> 3840;
3985 -> 3983;
3985 -> 3984;
3986 -> 3983;
3986 -> 3984;
3987 -> 3982;
3987 -> 3984;
3988 -> 3984;
3989 -> 3986;
3989 -> 3988;
3989 -> 3984;
3990 -> 3982;
3990 -> 3983;
3991 -> 3983;
3992 -> 3983;
3992 -> 3991;
3993 -> 3983;
3993 -> 3991;
3994 -> 3990;
3994 -> 3991;
3995 -> 3991;
3996 -> 3993;
3996 -> 3995;
3996 -> 3991;
3997 -> 3983;
3997 -> 3840;
3998 -> 3840;
3999 -> 3443;
3999 -> 3983;
3999 -> 3840;
3999 -> 3998;
4000 -> 3443;
4000 -> 3436;
4001 -> 0;
4001 -> 3436;
4002 -> 3627;
4002 -> 3983;
4002 -> 3436;
4003 -> 3443;
4003 -> 3983;
4003 -> 3436;
4004 -> 3749;
4004 -> 3983;
4005 -> 3750;
4005 -> 3983;
4006 -> 4004;
4006 -> 3983;
4007 -> 4005;
4007 -> 3983;
4008 -> 3983;
4009 -> 3983;
4010 -> 3983;
4011 -> 4007;
4011 -> 4010;
4011 -> 3983;
4012 -> 3983;
4013 -> 3983;
4013 -> 4012;
4014 -> 3983;
4014 -> 0;
4015 -> 3983;
4016 -> 4009;
4016 -> 4015;
4017 -> 4016;
4018 -> 4016;
4019 -> 3983;
4019 -> 4016;
4020 -> 4016;
4021 -> 4019;
4021 -> 4020;
4022 -> 4020;
4023 -> 4021;
4023 -> 4022;
4024 -> 4022;
4025 -> 4023;
4025 -> 4024;
4025 -> 4022;
4026 -> 4022;
4027 -> 4026;
4027 -> 4020;
4028 -> 3983;
4028 -> 4027;
4029 -> 3983;
4030 -> 3443;
4030 -> 3983;
4030 -> 3436;
4031 -> 3443;
4031 -> 3983;
4031 -> 4030;
4032 -> 3443;
4032 -> 3983;
4032 -> 0;
4032 -> 3436;
4033 -> 3443;
4033 -> 3983;
4033 -> 3436;
4034 -> 3782;
4034 -> 4033;
4035 -> 3443;
4035 -> 3983;
4035 -> 3436;
4036 -> 4034;
4037 -> 4034;
4038 -> 3443;
4038 -> 3983;
4038 -> 4034;
4039 -> 4034;
4040 -> 4038;
4040 -> 4039;
4041 -> 4039;
4042 -> 4040;
4042 -> 4041;
4043 -> 4041;
4044 -> 4042;
4044 -> 4043;
4044 -> 4041;
4045 -> 4041;
4046 -> 4045;
4046 -> 4039;
4047 -> 3443;
4047 -> 3983;
4047 -> 4046;
4048 -> 3983;
4048 -> 0;
4048 -> 3712;
4049 -> 3983;
4050 -> 4049;
4050 -> 3983;
4051 -> 3983;
4051 -> 3712;
4052 -> 3716;
4052 -> 3983;
4052 -> 3722;
4053 -> 4052;
4053 -> 3983;
4053 -> 3722;
4054 -> 3716;
4054 -> 3983;
4054 -> 3722;
4055 -> 3725;
4055 -> 4054;
4056 -> 3716;
4056 -> 3983;
4056 -> 4055;
4057 -> 4052;
4057 -> 4055;
4058 -> 4055;
4059 -> 4057;
4059 -> 4058;
4060 -> 4058;
4061 -> 4059;
4061 -> 4060;
4061 -> 4058;
4062 -> 4061;
4063 -> 4059;
4063 -> 3983;
4063 -> 4061;
4064 -> 4058;
4065 -> 4064;
4065 -> 4055;
4066 -> 4056;
4066 -> 4065;
4066 -> 4055;
4067 -> 3716;
4067 -> 4066;
4068 -> 3716;
4068 -> 3983;
4068 -> 4066;
4069 -> 3726;
4069 -> 3983;
4069 -> 3746;
4069 -> 3722;
4070 -> 3983;
4070 -> 3798;
4071 -> 4070;
4071 -> 3983;
4071 -> 3798;
4072 -> 4070;
4072 -> 3983;
4072 -> 4071;
4073 -> 4072;
4073 -> 4071;
4074 -> 4071;
4075 -> 4073;
4075 -> 4074;
4076 -> 4075;
4076 -> 3983;
4076 -> 0;
4076 -> 4074;
4077 -> 4075;
4077 -> 3983;
4077 -> 4074;
4078 -> 4074;
4079 -> 4077;
4079 -> 4078;
4080 -> 4078;
4081 -> 4079;
4081 -> 4080;
4081 -> 4078;
4082 -> 4081;
4083 -> 4079;
4083 -> 3983;
4083 -> 4081;
4084 -> 4078;
4085 -> 4084;
4085 -> 4074;
4086 -> 4076;
4086 -> 4085;
4086 -> 4074;
4087 -> 3983;
4087 -> 3818;
4088 -> 4087;
4088 -> 3983;
4088 -> 3818;
4089 -> 4087;
4089 -> 3983;
4089 -> 4088;
4090 -> 4089;
4090 -> 4088;
4091 -> 4088;
4092 -> 4090;
4092 -> 4091;
4093 -> 4092;
4093 -> 3983;
4093 -> 0;
4093 -> 4091;
4094 -> 4092;
4094 -> 3983;
4094 -> 4091;
4095 -> 4091;
4096 -> 4094;
4096 -> 4095;
4097 -> 4095;
4098 -> 4096;
4098 -> 4097;
4098 -> 4095;
4099 -> 4098;
4100 -> 4096;
4100 -> 3983;
4100 -> 4098;
4101 -> 4095;
4102 -> 4101;
4102 -> 4091;
4103 -> 4093;
4103 -> 4102;
4103 -> 4091;
4104 -> 4025;
4105 -> 4023;
4105 -> 3983;
4105 -> 4025;
4106 -> 3443;
4106 -> 3983;
4106 -> 3436;
4107 -> 3686;
4107 -> 3983;
4107 -> 3685;
4108 -> 3686;
4108 -> 3983;
4108 -> 3685;
4109 -> 4108;
4109 -> 3684;
4110 -> 3983;
4110 -> 3436;
4111 -> 3983;
4111 -> 3697;
4112 -> 4111;
4112 -> 3696;
4113 -> 3983;
4113 -> 3436;
4114 -> 4113;
4114 -> 3693;
4114 -> 3983;
4114 -> 3436;
4115 -> 3443;
4115 -> 3983;
4116 -> 3436;
4117 -> 3436;
4118 -> 3436;
4119 -> 3436;
4120 -> 3443;
4120 -> 3983;
4121 -> 3983;
4122 -> 4120;
4122 -> 3983;
4122 -> 4121;
4123 -> 3983;
4124 -> 3983;
4125 -> 3983;
4126 -> 3983;
4127 -> 3983;
4128 -> 3983;
4129 -> 4128;
4129 -> 3983;
4129 -> 4121;
4130 -> 4127;
4130 -> 3983;
4131 -> 4127;
4131 -> 3983;
4132 -> 4127;
4132 -> 4126;
4132 -> 3983;
4133 -> 4127;
4134 -> 4127;
4135 -> 4133;
4135 -> 4127;
4135 -> 4134;
4136 -> 4127;
4137 -> 4127;
4138 -> 4127;
4139 -> 4127;
4140 -> 4116;
4140 -> 3436;
4141 -> 3590;
4141 -> 4127;
4141 -> 3589;
4142 -> 3590;
4142 -> 4127;
4142 -> 3589;
4143 -> 4142;
4143 -> 3588;
4144 -> 4127;
4144 -> 3406;
4145 -> 3406;
4146 -> 3406;
4147 -> 3410;
4147 -> 4146;
4147 -> 3406;
4148 -> 3417;
4148 -> 3406;
4149 -> 4148;
4149 -> 4127;
4149 -> 3406;
4150 -> 3397;
4150 -> 4149;
4150 -> 3396;
4151 -> 3396;
4152 -> 4150;
4152 -> 4151;
4153 -> 4149;
4153 -> 4152;
4154 -> 3400;
4154 -> 4152;
4155 -> 3399;
4155 -> 4152;
4156 -> 4152;
4157 -> 4153;
4157 -> 4156;
4157 -> 4154;
4157 -> 4155;
4157 -> 3384;
4157 -> 4152;
4158 -> 1;
4159 -> 1;
4160 -> 4159;
4161 -> 4160;
4161 -> 1;
4162 -> 4161;
4162 -> 4158;
4162 -> 1;
4163 -> 4157;
4163 -> 4158;
4163 -> 1;
4164 -> 0;
4164 -> 1;
4165 -> 0;
4165 -> 4164;
4165 -> 4157;
4165 -> 1;
4166 -> 4158;
4166 -> 4165;
4166 -> 4162;
4166 -> 4163;
4166 -> 1;
4167 -> 4158;
4168 -> 4167;
4169 -> 4166;
4169 -> 4158;
4170 -> 4166;
4170 -> 4158;
4171 -> 4169;
4171 -> 4158;
4172 -> 4158;
4173 -> 4172;
4173 -> 4158;
4174 -> 4158;
4175 -> 4171;
4175 -> 4174;
4176 -> 4173;
4176 -> 4174;
4177 -> 4174;
4178 -> 4166;
4179 -> 4166;
4180 -> 4178;
4180 -> 4166;
4181 -> 4166;
4182 -> 4179;
4182 -> 4166;
4182 -> 4180;
4182 -> 4181;
4182 -> 4178;
4183 -> 4166;
4184 -> 4183;
4184 -> 4178;
4184 -> 4166;
4185 -> 4178;
4185 -> 4166;
4186 -> 4166;
4187 -> 4185;
4187 -> 4186;
4187 -> 4178;
4187 -> 4184;
4187 -> 4166;
4188 -> 4174;
4189 -> 4166;
4189 -> 4188;
4189 -> 4174;
4190 -> 0;
4190 -> 4174;
4191 -> 4176;
4191 -> 4174;
4192 -> 4166;
4192 -> 4174;
4193 -> 4174;
4194 -> 4192;
4194 -> 4193;
4195 -> 0;
4195 -> 4193;
4196 -> 4195;
4197 -> 4174;
4198 -> 4174;
4199 -> 4198;
4200 -> 4198;
4201 -> 4198;
4202 -> 4200;
4202 -> 4201;
4203 -> 4200;
4203 -> 4201;
4204 -> 4200;
4204 -> 4201;
4205 -> 4200;
4205 -> 4201;
4206 -> 4201;
4207 -> 4166;
4207 -> 4206;
4207 -> 4201;
4208 -> 4205;
4208 -> 4201;
4209 -> 4202;
4209 -> 4201;
4210 -> 4203;
4210 -> 4201;
4211 -> 4204;
4211 -> 4201;
4212 -> 4205;
4212 -> 4201;
4213 -> 4201;
4214 -> 0;
4214 -> 4201;
4215 -> 4201;
4216 -> 4214;
4216 -> 4215;
4217 -> 4214;
4217 -> 4215;
4218 -> 4212;
4218 -> 4215;
4219 -> 4213;
4219 -> 4215;
4220 -> 4213;
4220 -> 4215;
4221 -> 4216;
4221 -> 4215;
4222 -> 4217;
4222 -> 4215;
4223 -> 4218;
4223 -> 4215;
4224 -> 4215;
4225 -> 4224;
4225 -> 4215;
4226 -> 4219;
4226 -> 4224;
4226 -> 4215;
4227 -> 4201;
4228 -> 4209;
4228 -> 4227;
4229 -> 4210;
4229 -> 4227;
4230 -> 4211;
4230 -> 4227;
4231 -> 4212;
4231 -> 4227;
4232 -> 4213;
4232 -> 4227;
4233 -> 4213;
4233 -> 4227;
4234 -> 4213;
4234 -> 4227;
4235 -> 4213;
4235 -> 4227;
4236 -> 4213;
4236 -> 4227;
4237 -> 4213;
4237 -> 4227;
4238 -> 4228;
4238 -> 4227;
4239 -> 4229;
4239 -> 4227;
4240 -> 4230;
4240 -> 4227;
4241 -> 4231;
4241 -> 4227;
4242 -> 4232;
4242 -> 4227;
4243 -> 4233;
4243 -> 4227;
4244 -> 4234;
4244 -> 4227;
4245 -> 4235;
4245 -> 4227;
4246 -> 4236;
4246 -> 4227;
4247 -> 4227;
4248 -> 4238;
4248 -> 4247;
4249 -> 4239;
4249 -> 4247;
4250 -> 4240;
4250 -> 4247;
4251 -> 4241;
4251 -> 4247;
4252 -> 4242;
4252 -> 4247;
4253 -> 4243;
4253 -> 4247;
4254 -> 4244;
4254 -> 4247;
4255 -> 4245;
4255 -> 4247;
4256 -> 4246;
4256 -> 4247;
4257 -> 4237;
4257 -> 4247;
4258 -> 4251;
4258 -> 4247;
4259 -> 4255;
4259 -> 4247;
4260 -> 4256;
4260 -> 4247;
4261 -> 4247;
4262 -> 4261;
4262 -> 4247;
4263 -> 4261;
4263 -> 4247;
4264 -> 4261;
4264 -> 4247;
4265 -> 4261;
4265 -> 4247;
4266 -> 4261;
4266 -> 4247;
4267 -> 4261;
4267 -> 4247;
4268 -> 4261;
4268 -> 4247;
4269 -> 4261;
4269 -> 4247;
4270 -> 4261;
4270 -> 4247;
4271 -> 4261;
4271 -> 4247;
4272 -> 4261;
4272 -> 4247;
4273 -> 4261;
4273 -> 4247;
4274 -> 4261;
4274 -> 4247;
4275 -> 4261;
4275 -> 4247;
4276 -> 4261;
4276 -> 4247;
4277 -> 4261;
4277 -> 4247;
4278 -> 4261;
4278 -> 4247;
4279 -> 4261;
4279 -> 4247;
4280 -> 4261;
4280 -> 4247;
4281 -> 4261;
4281 -> 4247;
4282 -> 4261;
4282 -> 4247;
4283 -> 4261;
4283 -> 4247;
4284 -> 4261;
4284 -> 4247;
4285 -> 4261;
4285 -> 4247;
4286 -> 4261;
4286 -> 4247;
4287 -> 4261;
4287 -> 4247;
4288 -> 4247;
4289 -> 4288;
4289 -> 4261;
4289 -> 4247;
4290 -> 4261;
4290 -> 4247;
4291 -> 4261;
4291 -> 4247;
4292 -> 4247;
4293 -> 4247;
4294 -> 4291;
4294 -> 4293;
4295 -> 4292;
4295 -> 4293;
4296 -> 4295;
4296 -> 4293;
4297 -> 4295;
4297 -> 4293;
4298 -> 4295;
4298 -> 4293;
4299 -> 4294;
4299 -> 4295;
4299 -> 4293;
4300 -> 4292;
4300 -> 4261;
4300 -> 4247;
4301 -> 4261;
4301 -> 4247;
4302 -> 4247;
4303 -> 4302;
4304 -> 0;
4304 -> 4302;
4305 -> 4304;
4305 -> 4303;
4305 -> 4302;
4306 -> 4305;
4306 -> 4247;
4307 -> 4306;
4307 -> 4261;
4307 -> 4247;
4308 -> 4251;
4308 -> 4247;
4309 -> 4308;
4310 -> 4248;
4310 -> 4309;
4310 -> 4308;
4311 -> 4249;
4311 -> 4309;
4311 -> 4308;
4312 -> 4310;
4312 -> 4311;
4312 -> 4308;
4313 -> 4250;
4313 -> 4309;
4313 -> 4308;
4314 -> 4312;
4314 -> 4313;
4314 -> 4308;
4315 -> 4253;
4315 -> 4247;
4316 -> 4315;
4317 -> 4261;
4317 -> 4316;
4318 -> 4252;
4318 -> 4315;
4319 -> 4254;
4319 -> 4261;
4319 -> 4247;
4320 -> 4261;
4320 -> 4166;
4320 -> 4247;
4321 -> 4247;
4322 -> 4261;
4322 -> 4166;
4322 -> 4321;
4322 -> 4247;
4323 -> 4201;
4324 -> 4166;
4325 -> 4166;
4326 -> 4166;
4327 -> 4166;
4328 -> 4166;
4329 -> 4325;
4329 -> 4166;
4330 -> 4166;
4331 -> 4166;
4332 -> 4166;
4333 -> 4166;
4334 -> 4166;
4335 -> 4166;
4336 -> 4335;
4336 -> 4166;
4337 -> 4335;
4337 -> 4166;
4338 -> 4335;
4338 -> 4166;
4339 -> 4336;
4339 -> 4166;
4340 -> 4337;
4340 -> 4166;
4341 -> 4338;
4341 -> 4166;
4342 -> 4339;
4342 -> 4335;
4343 -> 4340;
4343 -> 4335;
4344 -> 4341;
4344 -> 4335;
4345 -> 4335;
4346 -> 4335;
4347 -> 4346;
4348 -> 4342;
4348 -> 4347;
4348 -> 4346;
4349 -> 4343;
4349 -> 4347;
4349 -> 4346;
4350 -> 4348;
4350 -> 4349;
4350 -> 4346;
4351 -> 4344;
4351 -> 4347;
4351 -> 4346;
4352 -> 4350;
4352 -> 4351;
4352 -> 4346;
4353 -> 4335;
4354 -> 4335;
4355 -> 4335;
4356 -> 4335;
4356 -> 4201;
4357 -> 4174;
4358 -> 4357;
4359 -> 4358;
4360 -> 4359;
4361 -> 4335;
4362 -> 4335;
4363 -> 4361;
4363 -> 4335;
4364 -> 4362;
4364 -> 4335;
4365 -> 4361;
4365 -> 4335;
4366 -> 4361;
4366 -> 4335;
4367 -> 4335;
4368 -> 4367;
4368 -> 0;
4368 -> 4335;
4369 -> 4361;
4369 -> 4335;
4370 -> 4361;
4370 -> 4335;
4371 -> 4361;
4371 -> 4335;
4372 -> 4361;
4372 -> 4335;
4373 -> 4361;
4373 -> 4335;
4374 -> 4361;
4374 -> 4357;
4375 -> 4357;
4376 -> 0;
4376 -> 4357;
4377 -> 4175;
4377 -> 4361;
4377 -> 4174;
4378 -> 1;
4379 -> 4361;
4379 -> 4378;
4380 -> 4378;
4381 -> 4380;
4382 -> 4381;
4383 -> 4379;
4383 -> 4382;
4384 -> 4383;
4385 -> 4383;
4385 -> 4381;
4386 -> 4378;
4387 -> 4383;
4387 -> 1;
4388 -> 1;
4389 -> 4388;
4389 -> 1;
4390 -> 4387;
4390 -> 1;
4392 -> 4391;
4393 -> 4392;
4394 -> 1;
4395 -> 4388;
4395 -> 4394;
4396 -> 4390;
4396 -> 4394;
4397 -> 4388;
4397 -> 4394;
4398 -> 4388;
4398 -> 4394;
4399 -> 4388;
4399 -> 4394;
4400 -> 4388;
4400 -> 4394;
4401 -> 4388;
4401 -> 4394;
4402 -> 4388;
4402 -> 4394;
4403 -> 4394;
4404 -> 4394;
4405 -> 4395;
4405 -> 4404;
4405 -> 4394;
4406 -> 4396;
4406 -> 4405;
4407 -> 4395;
4407 -> 4394;
4408 -> 4396;
4408 -> 4394;
4409 -> 4397;
4409 -> 4394;
4410 -> 4394;
4411 -> 4407;
4411 -> 4410;
4412 -> 4408;
4412 -> 4410;
4413 -> 4409;
4413 -> 4410;
4414 -> 4411;
4414 -> 4410;
4415 -> 4412;
4415 -> 4410;
4416 -> 4414;
4416 -> 4415;
4416 -> 4410;
4417 -> 4411;
4417 -> 4388;
4417 -> 4389;
4417 -> 4410;
4418 -> 4412;
4418 -> 4387;
4418 -> 4390;
4418 -> 4388;
4418 -> 4410;
4419 -> 4410;
4420 -> 4417;
4420 -> 4419;
4421 -> 4418;
4421 -> 4419;
4422 -> 4420;
4422 -> 4421;
4422 -> 4419;
4423 -> 4420;
4423 -> 4419;
4424 -> 4417;
4424 -> 4420;
4424 -> 4419;
4425 -> 4418;
4425 -> 4421;
4425 -> 4419;
4426 -> 4419;
4427 -> 4413;
4427 -> 4426;
4427 -> 4419;
4428 -> 4427;
4428 -> 4419;
4430 -> 4429;
4431 -> 4429;
4432 -> 4424;
4432 -> 4428;
4433 -> 4425;
4433 -> 4428;
4434 -> 4428;
4435 -> 4432;
4435 -> 4434;
4436 -> 4433;
4436 -> 4434;
4437 -> 4435;
4437 -> 4434;
4438 -> 4436;
4438 -> 4434;
4439 -> 4434;
4440 -> 4437;
4440 -> 4439;
4441 -> 4438;
4441 -> 4439;
4442 -> 0;
4442 -> 4439;
4443 -> 4439;
4444 -> 4443;
4445 -> 4444;
4445 -> 4443;
4446 -> 4445;
4446 -> 4439;
4447 -> 4440;
4447 -> 4446;
4448 -> 4446;
4449 -> 4441;
4449 -> 4446;
4450 -> 4446;
4451 -> 4440;
4451 -> 4439;
4452 -> 4441;
4452 -> 4439;
4453 -> 4451;
4453 -> 4452;
4453 -> 4439;
4454 -> 4440;
4454 -> 4439;
4455 -> 4441;
4455 -> 4454;
4456 -> 4410;
4457 -> 4456;
4457 -> 4394;
4458 -> 4457;
4459 -> 4458;
4459 -> 1;
4460 -> 1;
4461 -> 4460;
4461 -> 1;
4462 -> 4387;
4462 -> 1;
4463 -> 1;
4464 -> 4462;
4464 -> 4463;
4465 -> 4460;
4465 -> 4463;
4466 -> 4464;
4466 -> 4463;
4467 -> 4465;
4467 -> 4463;
4468 -> 4463;
4469 -> 4466;
4469 -> 4468;
4470 -> 4467;
4470 -> 4468;
4471 -> 4468;
4472 -> 4469;
4472 -> 4468;
4473 -> 4470;
4473 -> 4468;
4474 -> 4471;
4474 -> 4468;
4475 -> 4468;
4476 -> 4472;
4476 -> 4475;
4477 -> 4473;
4477 -> 4475;
4478 -> 4474;
4478 -> 4475;
4479 -> 4477;
4479 -> 4475;
4480 -> 4475;
4481 -> 4479;
4481 -> 4480;
4482 -> 4480;
4483 -> 0;
4483 -> 4480;
4484 -> 4481;
4484 -> 4482;
4484 -> 4483;
4484 -> 4480;
4485 -> 4480;
4486 -> 4481;
4486 -> 4480;
4487 -> 4480;
4488 -> 4486;
4488 -> 4487;
4488 -> 4480;
4489 -> 4486;
4489 -> 4488;
4490 -> 4485;
4490 -> 4489;
4490 -> 4488;
4491 -> 4485;
4491 -> 4490;
4491 -> 4480;
4492 -> 4485;
4492 -> 4491;
4492 -> 4480;
4493 -> 4476;
4493 -> 4475;
4494 -> 4475;
4495 -> 4492;
4495 -> 4494;
4495 -> 4475;
4496 -> 4475;
4497 -> 4492;
4497 -> 4496;
4497 -> 4475;
4498 -> 4493;
4498 -> 4421;
4498 -> 4497;
4498 -> 4475;
4499 -> 4468;
4500 -> 4498;
4500 -> 4421;
4500 -> 4499;
4500 -> 4468;
4501 -> 4500;
4502 -> 4498;
4502 -> 4468;
4503 -> 1;
4504 -> 4460;
4504 -> 4503;
4505 -> 4502;
4505 -> 4503;
4506 -> 4460;
4506 -> 4503;
4507 -> 4460;
4507 -> 4503;
4508 -> 4460;
4508 -> 4503;
4509 -> 4460;
4509 -> 4503;
4510 -> 4460;
4510 -> 4503;
4511 -> 4460;
4511 -> 4503;
4512 -> 4503;
4513 -> 4503;
4514 -> 4504;
4514 -> 4513;
4514 -> 4503;
4515 -> 4505;
4515 -> 4514;
4516 -> 4504;
4516 -> 4503;
4517 -> 4506;
4517 -> 4503;
4518 -> 4503;
4519 -> 4516;
4519 -> 4518;
4520 -> 4517;
4520 -> 4518;
4521 -> 4519;
4521 -> 4518;
4522 -> 4505;
4522 -> 4518;
4523 -> 4521;
4523 -> 4522;
4523 -> 4518;
4524 -> 4519;
4524 -> 4460;
4524 -> 4461;
4524 -> 4518;
4525 -> 4518;
4526 -> 4524;
4526 -> 4525;
4527 -> 4526;
4527 -> 4505;
4527 -> 4525;
4528 -> 4526;
4528 -> 4525;
4529 -> 4524;
4529 -> 4526;
4529 -> 4525;
4530 -> 4505;
4530 -> 4525;
4531 -> 4525;
4532 -> 4520;
4532 -> 4531;
4532 -> 4525;
4533 -> 4532;
4533 -> 4525;
4534 -> 4529;
4534 -> 4533;
4535 -> 4530;
4535 -> 4533;
4536 -> 4533;
4537 -> 4534;
4537 -> 4536;
4538 -> 4535;
4538 -> 4536;
4539 -> 4537;
4539 -> 4536;
4540 -> 4538;
4540 -> 4536;
4541 -> 4536;
4542 -> 4539;
4542 -> 4541;
4543 -> 4540;
4543 -> 4541;
4544 -> 0;
4544 -> 4541;
4545 -> 4541;
4546 -> 4545;
4547 -> 4546;
4547 -> 4545;
4548 -> 4547;
4548 -> 4541;
4549 -> 4542;
4549 -> 4548;
4550 -> 4548;
4551 -> 4543;
4551 -> 4548;
4552 -> 4548;
4553 -> 4542;
4553 -> 4541;
4554 -> 4543;
4554 -> 4541;
4555 -> 4553;
4555 -> 4554;
4555 -> 4541;
4556 -> 4542;
4556 -> 4541;
4557 -> 4543;
4557 -> 4556;
4558 -> 4518;
4559 -> 4558;
4559 -> 4503;
4560 -> 4559;
4561 -> 4560;
4561 -> 1;
4562 -> 1;
4563 -> 4562;
4563 -> 1;
4564 -> 4387;
4564 -> 1;
4565 -> 1;
4566 -> 4564;
4566 -> 4565;
4567 -> 4562;
4567 -> 4565;
4568 -> 4566;
4568 -> 4565;
4569 -> 4567;
4569 -> 4565;
4570 -> 4565;
4571 -> 4568;
4571 -> 4570;
4572 -> 4569;
4572 -> 4570;
4573 -> 4570;
4574 -> 4571;
4574 -> 4570;
4575 -> 4572;
4575 -> 4570;
4576 -> 4573;
4576 -> 4570;
4577 -> 4570;
4578 -> 4574;
4578 -> 4577;
4579 -> 4575;
4579 -> 4577;
4580 -> 4576;
4580 -> 4577;
4581 -> 4579;
4581 -> 4577;
4582 -> 4577;
4583 -> 4581;
4583 -> 4582;
4584 -> 4582;
4585 -> 0;
4585 -> 4582;
4586 -> 4583;
4586 -> 4584;
4586 -> 4585;
4586 -> 4582;
4587 -> 4582;
4588 -> 4583;
4588 -> 4582;
4589 -> 4582;
4590 -> 4588;
4590 -> 4589;
4590 -> 4582;
4591 -> 4588;
4591 -> 4590;
4592 -> 4587;
4592 -> 4591;
4592 -> 4590;
4593 -> 4587;
4593 -> 4592;
4593 -> 4582;
4594 -> 4587;
4594 -> 4593;
4594 -> 4582;
4595 -> 4578;
4595 -> 4577;
4596 -> 4577;
4597 -> 4594;
4597 -> 4596;
4597 -> 4577;
4598 -> 4595;
4598 -> 4597;
4599 -> 4594;
4599 -> 4596;
4599 -> 4593;
4599 -> 4597;
4600 -> 4597;
4601 -> 4598;
4601 -> 4600;
4602 -> 4599;
4602 -> 4600;
4603 -> 4600;
4604 -> 4603;
4604 -> 4600;
4605 -> 4600;
4606 -> 0;
4606 -> 4600;
4607 -> 4602;
4607 -> 4605;
4607 -> 4606;
4607 -> 4600;
4608 -> 4600;
4609 -> 4602;
4609 -> 4608;
4609 -> 4600;
4610 -> 4601;
4610 -> 4505;
4610 -> 4609;
4610 -> 4600;
4611 -> 4600;
4612 -> 4610;
4612 -> 4505;
4612 -> 4611;
4612 -> 4600;
4613 -> 4612;
4614 -> 4597;
4615 -> 4610;
4615 -> 4614;
4615 -> 4597;
4616 -> 4610;
4616 -> 4615;
4617 -> 4577;
4618 -> 4594;
4618 -> 4599;
4618 -> 4617;
4618 -> 4577;
4619 -> 4570;
4620 -> 4616;
4620 -> 4505;
4620 -> 4610;
4620 -> 4619;
4620 -> 4570;
4621 -> 4620;
4622 -> 1;
4623 -> 4562;
4623 -> 4622;
4624 -> 4616;
4624 -> 4622;
4625 -> 4562;
4625 -> 4622;
4626 -> 4562;
4626 -> 4622;
4627 -> 4562;
4627 -> 4622;
4628 -> 4562;
4628 -> 4622;
4629 -> 4562;
4629 -> 4622;
4630 -> 4562;
4630 -> 4622;
4631 -> 4622;
4632 -> 4622;
4633 -> 4623;
4633 -> 4632;
4633 -> 4622;
4634 -> 4624;
4634 -> 4633;
4635 -> 4623;
4635 -> 4622;
4636 -> 4625;
4636 -> 4622;
4637 -> 4622;
4638 -> 4635;
4638 -> 4637;
4639 -> 4636;
4639 -> 4637;
4640 -> 4638;
4640 -> 4637;
4641 -> 4624;
4641 -> 4637;
4642 -> 4640;
4642 -> 4641;
4642 -> 4637;
4643 -> 4638;
4643 -> 4562;
4643 -> 4563;
4643 -> 4637;
4644 -> 4637;
4645 -> 4643;
4645 -> 4644;
4646 -> 4645;
4646 -> 4624;
4646 -> 4644;
4647 -> 4645;
4647 -> 4644;
4648 -> 4643;
4648 -> 4645;
4648 -> 4644;
4649 -> 4624;
4649 -> 4644;
4650 -> 4644;
4651 -> 4639;
4651 -> 4650;
4651 -> 4644;
4652 -> 4651;
4652 -> 4644;
4653 -> 4648;
4653 -> 4652;
4654 -> 4649;
4654 -> 4652;
4655 -> 4652;
4656 -> 4653;
4656 -> 4655;
4657 -> 4654;
4657 -> 4655;
4658 -> 4656;
4658 -> 4655;
4659 -> 4657;
4659 -> 4655;
4660 -> 4655;
4661 -> 4658;
4661 -> 4660;
4662 -> 4659;
4662 -> 4660;
4663 -> 0;
4663 -> 4660;
4664 -> 4660;
4665 -> 4664;
4666 -> 4665;
4666 -> 4664;
4667 -> 4666;
4667 -> 4660;
4668 -> 4661;
4668 -> 4667;
4669 -> 4667;
4670 -> 4662;
4670 -> 4667;
4671 -> 4667;
4672 -> 4661;
4672 -> 4660;
4673 -> 4662;
4673 -> 4660;
4674 -> 4672;
4674 -> 4673;
4674 -> 4660;
4675 -> 4661;
4675 -> 4660;
4676 -> 4662;
4676 -> 4675;
4677 -> 4637;
4678 -> 4677;
4678 -> 4622;
4679 -> 4678;
4680 -> 4679;
4680 -> 1;
4681 -> 1;
4682 -> 4681;
4682 -> 1;
4683 -> 4387;
4683 -> 1;
4684 -> 1;
4685 -> 4683;
4685 -> 4684;
4686 -> 4681;
4686 -> 4684;
4687 -> 4685;
4687 -> 4684;
4688 -> 4686;
4688 -> 4684;
4689 -> 4684;
4690 -> 4687;
4690 -> 4689;
4691 -> 4688;
4691 -> 4689;
4692 -> 4689;
4693 -> 4690;
4693 -> 4689;
4694 -> 4691;
4694 -> 4689;
4695 -> 4692;
4695 -> 4689;
4696 -> 4689;
4697 -> 4693;
4697 -> 4696;
4698 -> 4694;
4698 -> 4696;
4699 -> 4695;
4699 -> 4696;
4700 -> 4698;
4700 -> 4696;
4701 -> 4696;
4702 -> 4700;
4702 -> 4701;
4703 -> 4701;
4704 -> 0;
4704 -> 4701;
4705 -> 4702;
4705 -> 4703;
4705 -> 4704;
4705 -> 4701;
4706 -> 4701;
4707 -> 4702;
4707 -> 4701;
4708 -> 4701;
4709 -> 4707;
4709 -> 4708;
4709 -> 4701;
4710 -> 4707;
4710 -> 4709;
4711 -> 4706;
4711 -> 4710;
4711 -> 4709;
4712 -> 4706;
4712 -> 4711;
4712 -> 4701;
4713 -> 4706;
4713 -> 4712;
4713 -> 4701;
4714 -> 4697;
4714 -> 4696;
4715 -> 4696;
4716 -> 4713;
4716 -> 4715;
4716 -> 4696;
4717 -> 4714;
4717 -> 4716;
4718 -> 4713;
4718 -> 4715;
4718 -> 4712;
4718 -> 4716;
4719 -> 4716;
4720 -> 4717;
4720 -> 4719;
4721 -> 4718;
4721 -> 4719;
4722 -> 4719;
4723 -> 4722;
4723 -> 4719;
4724 -> 4719;
4725 -> 0;
4725 -> 4719;
4726 -> 4721;
4726 -> 4724;
4726 -> 4725;
4726 -> 4719;
4727 -> 4719;
4728 -> 4721;
4728 -> 4727;
4728 -> 4719;
4729 -> 4720;
4729 -> 4624;
4729 -> 4728;
4729 -> 4719;
4730 -> 4719;
4731 -> 4729;
4731 -> 4624;
4731 -> 4730;
4731 -> 4719;
4732 -> 4731;
4733 -> 4716;
4734 -> 4696;
4735 -> 4713;
4735 -> 4718;
4735 -> 4734;
4735 -> 4696;
4736 -> 4689;
4737 -> 4729;
4737 -> 4624;
4737 -> 4736;
4737 -> 4689;
4738 -> 4737;
4739 -> 1;
4740 -> 4681;
4740 -> 4739;
4741 -> 4729;
4741 -> 4739;
4742 -> 4681;
4742 -> 4739;
4743 -> 4681;
4743 -> 4739;
4744 -> 4681;
4744 -> 4739;
4745 -> 4681;
4745 -> 4739;
4746 -> 4681;
4746 -> 4739;
4747 -> 4681;
4747 -> 4739;
4748 -> 4739;
4749 -> 4739;
4750 -> 4740;
4750 -> 4749;
4750 -> 4739;
4751 -> 4741;
4751 -> 4750;
4752 -> 4740;
4752 -> 4739;
4753 -> 4742;
4753 -> 4739;
4754 -> 4739;
4755 -> 4752;
4755 -> 4754;
4756 -> 4753;
4756 -> 4754;
4757 -> 4755;
4757 -> 4754;
4758 -> 4741;
4758 -> 4754;
4759 -> 4757;
4759 -> 4758;
4759 -> 4754;
4760 -> 4755;
4760 -> 4681;
4760 -> 4682;
4760 -> 4754;
4761 -> 4754;
4762 -> 4760;
4762 -> 4761;
4763 -> 4762;
4763 -> 4741;
4763 -> 4761;
4764 -> 4762;
4764 -> 4761;
4765 -> 4760;
4765 -> 4762;
4765 -> 4761;
4766 -> 4741;
4766 -> 4761;
4767 -> 4761;
4768 -> 4756;
4768 -> 4767;
4768 -> 4761;
4769 -> 4768;
4769 -> 4761;
4770 -> 4765;
4770 -> 4769;
4771 -> 4766;
4771 -> 4769;
4772 -> 4769;
4773 -> 4770;
4773 -> 4772;
4774 -> 4771;
4774 -> 4772;
4775 -> 4773;
4775 -> 4772;
4776 -> 4774;
4776 -> 4772;
4777 -> 4772;
4778 -> 4775;
4778 -> 4777;
4779 -> 4776;
4779 -> 4777;
4780 -> 0;
4780 -> 4777;
4781 -> 4777;
4782 -> 4781;
4783 -> 4782;
4783 -> 4781;
4784 -> 4783;
4784 -> 4777;
4785 -> 4778;
4785 -> 4784;
4786 -> 4784;
4787 -> 4779;
4787 -> 4784;
4788 -> 4784;
4789 -> 4778;
4789 -> 4777;
4790 -> 4779;
4790 -> 4777;
4791 -> 4789;
4791 -> 4790;
4791 -> 4777;
4792 -> 4778;
4792 -> 4777;
4793 -> 4779;
4793 -> 4792;
4794 -> 4754;
4795 -> 4794;
4795 -> 4739;
4796 -> 4795;
4797 -> 4796;
4797 -> 1;
4798 -> 1;
4799 -> 4798;
4799 -> 1;
4800 -> 4387;
4800 -> 1;
4801 -> 1;
4802 -> 4800;
4802 -> 4801;
4803 -> 4798;
4803 -> 4801;
4804 -> 4802;
4804 -> 4801;
4805 -> 4803;
4805 -> 4801;
4806 -> 4801;
4807 -> 4804;
4807 -> 4806;
4808 -> 4805;
4808 -> 4806;
4809 -> 4806;
4810 -> 4807;
4810 -> 4806;
4811 -> 4808;
4811 -> 4806;
4812 -> 4809;
4812 -> 4806;
4813 -> 4806;
4814 -> 4810;
4814 -> 4813;
4815 -> 4811;
4815 -> 4813;
4816 -> 4812;
4816 -> 4813;
4817 -> 4815;
4817 -> 4813;
4818 -> 4813;
4819 -> 4817;
4819 -> 4818;
4820 -> 4818;
4821 -> 0;
4821 -> 4818;
4822 -> 4819;
4822 -> 4820;
4822 -> 4821;
4822 -> 4818;
4823 -> 4818;
4824 -> 4819;
4824 -> 4818;
4825 -> 4818;
4826 -> 4824;
4826 -> 4825;
4826 -> 4818;
4827 -> 4824;
4827 -> 4826;
4828 -> 4823;
4828 -> 4827;
4828 -> 4826;
4829 -> 4823;
4829 -> 4828;
4829 -> 4818;
4830 -> 4823;
4830 -> 4829;
4830 -> 4818;
4831 -> 4814;
4831 -> 4813;
4832 -> 4813;
4833 -> 4830;
4833 -> 4832;
4833 -> 4813;
4834 -> 4831;
4834 -> 4833;
4835 -> 4830;
4835 -> 4832;
4835 -> 4829;
4835 -> 4833;
4836 -> 4833;
4837 -> 4834;
4837 -> 4836;
4838 -> 4835;
4838 -> 4836;
4839 -> 4836;
4840 -> 4839;
4840 -> 4836;
4841 -> 4836;
4842 -> 0;
4842 -> 4836;
4843 -> 4838;
4843 -> 4841;
4843 -> 4842;
4843 -> 4836;
4844 -> 4836;
4845 -> 4838;
4845 -> 4844;
4845 -> 4836;
4846 -> 4837;
4846 -> 4741;
4846 -> 4845;
4846 -> 4836;
4847 -> 4836;
4848 -> 4846;
4848 -> 4741;
4848 -> 4847;
4848 -> 4836;
4849 -> 4848;
4850 -> 4833;
4851 -> 4835;
4852 -> 4851;
4853 -> 4852;
4853 -> 4851;
4854 -> 4851;
4855 -> 0;
4855 -> 4851;
4856 -> 4851;
4857 -> 4851;
4858 -> 4846;
4858 -> 4741;
4858 -> 4857;
4858 -> 4851;
4859 -> 4858;
4860 -> 4835;
4861 -> 4813;
4862 -> 4830;
4862 -> 4835;
4862 -> 4861;
4862 -> 4813;
4863 -> 4806;
4864 -> 4846;
4864 -> 4741;
4864 -> 4863;
4864 -> 4806;
4865 -> 4864;
4866 -> 1;
4867 -> 4798;
4867 -> 4866;
4868 -> 4846;
4868 -> 4866;
4869 -> 4798;
4869 -> 4866;
4870 -> 4798;
4870 -> 4866;
4871 -> 4798;
4871 -> 4866;
4872 -> 4798;
4872 -> 4866;
4873 -> 4798;
4873 -> 4866;
4874 -> 4798;
4874 -> 4866;
4875 -> 4866;
4876 -> 4866;
4877 -> 4867;
4877 -> 4876;
4877 -> 4866;
4878 -> 4868;
4878 -> 4877;
4879 -> 4867;
4879 -> 4866;
4880 -> 4869;
4880 -> 4866;
4881 -> 4866;
4882 -> 4879;
4882 -> 4881;
4883 -> 4880;
4883 -> 4881;
4884 -> 4882;
4884 -> 4881;
4885 -> 4868;
4885 -> 4881;
4886 -> 4884;
4886 -> 4885;
4886 -> 4881;
4887 -> 4882;
4887 -> 4798;
4887 -> 4799;
4887 -> 4881;
4888 -> 4881;
4889 -> 4887;
4889 -> 4888;
4890 -> 4889;
4890 -> 4868;
4890 -> 4888;
4891 -> 4889;
4891 -> 4888;
4892 -> 4887;
4892 -> 4889;
4892 -> 4888;
4893 -> 4868;
4893 -> 4888;
4894 -> 4888;
4895 -> 4883;
4895 -> 4894;
4895 -> 4888;
4896 -> 4895;
4896 -> 4888;
4897 -> 4892;
4897 -> 4896;
4898 -> 4893;
4898 -> 4896;
4899 -> 4896;
4900 -> 4897;
4900 -> 4899;
4901 -> 4898;
4901 -> 4899;
4902 -> 4900;
4902 -> 4899;
4903 -> 4901;
4903 -> 4899;
4904 -> 4899;
4905 -> 4902;
4905 -> 4904;
4906 -> 4903;
4906 -> 4904;
4907 -> 0;
4907 -> 4904;
4908 -> 4904;
4909 -> 4908;
4910 -> 4909;
4910 -> 4908;
4911 -> 4910;
4911 -> 4904;
4912 -> 4905;
4912 -> 4911;
4913 -> 4911;
4914 -> 4906;
4914 -> 4911;
4915 -> 4911;
4916 -> 4905;
4916 -> 4904;
4917 -> 4906;
4917 -> 4904;
4918 -> 4916;
4918 -> 4917;
4918 -> 4904;
4919 -> 4905;
4919 -> 4904;
4920 -> 4906;
4920 -> 4919;
4921 -> 4881;
4922 -> 4921;
4922 -> 4866;
4923 -> 4922;
4924 -> 4923;
4924 -> 1;
4925 -> 1;
4926 -> 4925;
4926 -> 1;
4927 -> 4361;
4927 -> 1;
4928 -> 1;
4929 -> 4927;
4929 -> 4928;
4930 -> 4925;
4930 -> 4928;
4931 -> 4928;
4932 -> 4929;
4932 -> 4931;
4933 -> 4932;
4933 -> 4868;
4933 -> 4931;
4934 -> 4933;
4935 -> 4933;
4935 -> 4928;
4936 -> 4930;
4936 -> 4928;
4937 -> 4928;
4938 -> 4935;
4938 -> 4937;
4939 -> 4936;
4939 -> 4937;
4940 -> 4937;
4941 -> 4939;
4941 -> 4937;
4942 -> 4940;
4942 -> 4937;
4943 -> 4937;
4944 -> 4941;
4944 -> 4943;
4945 -> 4942;
4945 -> 4943;
4946 -> 4944;
4946 -> 4943;
4947 -> 4943;
4948 -> 4946;
4948 -> 4947;
4949 -> 4947;
4950 -> 0;
4950 -> 4947;
4951 -> 4948;
4951 -> 4949;
4951 -> 4950;
4951 -> 4947;
4952 -> 4947;
4953 -> 4948;
4953 -> 4947;
4954 -> 4947;
4955 -> 4953;
4955 -> 4954;
4955 -> 4947;
4956 -> 4953;
4956 -> 4955;
4957 -> 4952;
4957 -> 4956;
4957 -> 4955;
4958 -> 4952;
4958 -> 4957;
4958 -> 4947;
4959 -> 4952;
4959 -> 4958;
4959 -> 4947;
4960 -> 4943;
4961 -> 4959;
4961 -> 4960;
4961 -> 4943;
4962 -> 4943;
4963 -> 4959;
4963 -> 4962;
4963 -> 4943;
4964 -> 4963;
4964 -> 4938;
4964 -> 4933;
4964 -> 4943;
4965 -> 4964;
4965 -> 4962;
4966 -> 4962;
4967 -> 4964;
4967 -> 4962;
4968 -> 4964;
4968 -> 4962;
4969 -> 4968;
4969 -> 4964;
4969 -> 4962;
4970 -> 4937;
4971 -> 4964;
4971 -> 4970;
4971 -> 4937;
4972 -> 4971;
4973 -> 1;
4974 -> 4925;
4974 -> 4973;
4975 -> 4964;
4975 -> 4973;
4976 -> 4925;
4976 -> 4973;
4977 -> 4925;
4977 -> 4973;
4978 -> 4925;
4978 -> 4973;
4979 -> 4925;
4979 -> 4973;
4980 -> 4925;
4980 -> 4973;
4981 -> 4925;
4981 -> 4973;
4982 -> 4973;
4983 -> 4973;
4984 -> 4974;
4984 -> 4983;
4984 -> 4973;
4985 -> 4975;
4985 -> 4984;
4986 -> 4974;
4986 -> 4973;
4987 -> 4976;
4987 -> 4973;
4988 -> 4973;
4989 -> 4986;
4989 -> 4988;
4990 -> 4987;
4990 -> 4988;
4991 -> 4989;
4991 -> 4988;
4992 -> 4975;
4992 -> 4988;
4993 -> 4991;
4993 -> 4992;
4993 -> 4988;
4994 -> 4989;
4994 -> 4925;
4994 -> 4926;
4994 -> 4988;
4995 -> 4988;
4996 -> 4994;
4996 -> 4995;
4997 -> 4995;
4998 -> 4975;
4998 -> 4997;
4999 -> 0;
4999 -> 4997;
5000 -> 4998;
5000 -> 4975;
5000 -> 4999;
5000 -> 0;
5000 -> 4997;
5001 -> 4996;
5001 -> 5000;
5001 -> 4995;
5002 -> 4996;
5002 -> 4995;
5003 -> 4994;
5003 -> 4996;
5003 -> 4995;
5004 -> 4975;
5004 -> 5000;
5004 -> 4995;
5005 -> 4995;
5006 -> 4990;
5006 -> 5005;
5006 -> 4995;
5007 -> 5006;
5007 -> 4995;
5008 -> 5003;
5008 -> 5007;
5009 -> 5004;
5009 -> 5007;
5010 -> 5007;
5011 -> 5008;
5011 -> 5010;
5012 -> 5009;
5012 -> 5010;
5013 -> 5011;
5013 -> 5010;
5014 -> 5012;
5014 -> 5010;
5015 -> 5010;
5016 -> 5013;
5016 -> 5015;
5017 -> 5014;
5017 -> 5015;
5018 -> 0;
5018 -> 5015;
5019 -> 5015;
5020 -> 5019;
5021 -> 5020;
5021 -> 5019;
5022 -> 5021;
5022 -> 5015;
5023 -> 5016;
5023 -> 5022;
5024 -> 5022;
5025 -> 5017;
5025 -> 5022;
5026 -> 5022;
5027 -> 5016;
5027 -> 5015;
5028 -> 5017;
5028 -> 5015;
5029 -> 5027;
5029 -> 5028;
5029 -> 5015;
5030 -> 5016;
5030 -> 5015;
5031 -> 5017;
5031 -> 5030;
5032 -> 4988;
5033 -> 5032;
5033 -> 4973;
5034 -> 5033;
5035 -> 5034;
5035 -> 1;
}